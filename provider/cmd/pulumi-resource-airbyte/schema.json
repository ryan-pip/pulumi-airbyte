{
    "name": "airbyte",
    "displayName": "Airbyte",
    "description": "A Pulumi package for creating and managing xyz cloud resources.",
    "keywords": [
        "pulumi",
        "airbyte",
        "category/utility"
    ],
    "homepage": "https://www.airbyte.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`airbyte` Terraform Provider](https://github.com/ryan-pip/terraform-provider-airbyte).",
    "repository": "https://github.com/ryan-pip/pulumi-airbyte",
    "pluginDownloadURL": "github://api.github.com/ryan-pip",
    "publisher": "Pulumi",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "namespaces": {
                "airbyte": "Airbyte"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-airbyte/sdk/go/airbyte",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing xyz cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/ryan-pip/terraform-provider-airbyte)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-airbyte` repo](https://github.com/ryan-pip/pulumi-airbyte/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-airbyte` repo](https://github.com/ryan-pip/terraform-provider-airbyte/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/ryan-pip/terraform-provider-airbyte)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-airbyte` repo](https://github.com/ryan-pip/pulumi-airbyte/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-airbyte` repo](https://github.com/ryan-pip/terraform-provider-airbyte/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "bearerAuth": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "AIRBYTE_BEARER_AUTH"
                    ]
                },
                "secret": true
            },
            "password": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "AIRBYTE_PASSWORD"
                    ]
                },
                "secret": true
            },
            "serverUrl": {
                "type": "string",
                "description": "Server URL (defaults to https://api.airbyte.com/v1)\n",
                "default": "https://api.airbyte.com/v1",
                "defaultInfo": {
                    "environment": [
                        "AIRBYTE_SERVER_URL"
                    ]
                }
            },
            "username": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "AIRBYTE_USERNAME"
                    ]
                },
                "secret": true
            }
        }
    },
    "types": {
        "airbyte:index/ConnectionConfigurations:ConnectionConfigurations": {
            "properties": {
                "streams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/airbyte:index/ConnectionConfigurationsStream:ConnectionConfigurationsStream"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "streams"
                    ]
                }
            }
        },
        "airbyte:index/ConnectionConfigurationsStream:ConnectionConfigurationsStream": {
            "properties": {
                "cursorFields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Optional name of the connection\n"
                },
                "primaryKeys": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "syncMode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cursorFields",
                        "name",
                        "primaryKeys",
                        "syncMode"
                    ]
                }
            }
        },
        "airbyte:index/ConnectionSchedule:ConnectionSchedule": {
            "properties": {
                "basicTiming": {
                    "type": "string"
                },
                "cronExpression": {
                    "type": "string"
                },
                "scheduleType": {
                    "type": "string",
                    "description": "must be one of [\"manual\", \"cron\"]\n"
                }
            },
            "type": "object",
            "required": [
                "scheduleType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "basicTiming",
                        "cronExpression",
                        "scheduleType"
                    ]
                }
            }
        },
        "airbyte:index/DestinationAWSDatalakeConfiguration:DestinationAWSDatalakeConfiguration": {
            "properties": {
                "awsAccountId": {
                    "type": "string",
                    "description": "target aws account id\n"
                },
                "bucketName": {
                    "type": "string",
                    "description": "The name of the S3 bucket. Read more \\n\\nhere\\n\\n.\n"
                },
                "bucketPrefix": {
                    "type": "string",
                    "description": "S3 prefix\n"
                },
                "credentials": {
                    "$ref": "#/types/airbyte:index/DestinationAWSDatalakeConfigurationCredentials:DestinationAWSDatalakeConfigurationCredentials",
                    "description": "Choose How to Authenticate to AWS.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"aws-datalake\"]\n"
                },
                "format": {
                    "$ref": "#/types/airbyte:index/DestinationAWSDatalakeConfigurationFormat:DestinationAWSDatalakeConfigurationFormat",
                    "description": "Format of the data output.\n"
                },
                "glueCatalogFloatAsDecimal": {
                    "type": "boolean",
                    "description": "Cast float/double as decimal(38,18). This can help achieve higher accuracy and represent numbers correctly as received from the source.\n"
                },
                "lakeformationDatabaseDefaultTagKey": {
                    "type": "string",
                    "description": "Add a default tag key to databases created by this destination\n"
                },
                "lakeformationDatabaseDefaultTagValues": {
                    "type": "string",
                    "description": "Add default values for the `Tag Key` to databases created by this destination. Comma separate for multiple values.\n"
                },
                "lakeformationDatabaseName": {
                    "type": "string",
                    "description": "The default database this destination will use to create tables in per stream. Can be changed per connection by customizing the namespace.\n"
                },
                "lakeformationGovernedTables": {
                    "type": "boolean",
                    "description": "Whether to create tables as LF governed tables.\n"
                },
                "partitioning": {
                    "type": "string",
                    "description": "must be one of [\"NO PARTITIONING\", \"DATE\", \"YEAR\", \"MONTH\", \"DAY\", \"YEAR/MONTH\", \"YEAR/MONTH/DAY\"]\nPartition data by cursor fields when a cursor field is a date\n"
                },
                "region": {
                    "type": "string",
                    "description": "must be one of [\"\", \"us-east-1\", \"us-east-2\", \"us-west-1\", \"us-west-2\", \"af-south-1\", \"ap-east-1\", \"ap-south-1\", \"ap-northeast-1\", \"ap-northeast-2\", \"ap-northeast-3\", \"ap-southeast-1\", \"ap-southeast-2\", \"ca-central-1\", \"cn-north-1\", \"cn-northwest-1\", \"eu-central-1\", \"eu-north-1\", \"eu-south-1\", \"eu-west-1\", \"eu-west-2\", \"eu-west-3\", \"sa-east-1\", \"me-south-1\", \"us-gov-east-1\", \"us-gov-west-1\"]\nThe region of the S3 bucket. See \\n\\nhere\\n\\n for all region codes.\n"
                }
            },
            "type": "object",
            "required": [
                "bucketName",
                "credentials",
                "destinationType",
                "lakeformationDatabaseName",
                "region"
            ]
        },
        "airbyte:index/DestinationAWSDatalakeConfigurationCredentials:DestinationAWSDatalakeConfigurationCredentials": {
            "properties": {
                "destinationAwsDatalakeAuthenticationModeIamRole": {
                    "$ref": "#/types/airbyte:index/DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamRole:DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamRole"
                },
                "destinationAwsDatalakeAuthenticationModeIamUser": {
                    "$ref": "#/types/airbyte:index/DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamUser:DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamUser"
                },
                "destinationAwsDatalakeUpdateAuthenticationModeIamRole": {
                    "$ref": "#/types/airbyte:index/DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamRole:DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamRole"
                },
                "destinationAwsDatalakeUpdateAuthenticationModeIamUser": {
                    "$ref": "#/types/airbyte:index/DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamUser:DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamUser"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamRole:DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamRole": {
            "properties": {
                "credentialsTitle": {
                    "type": "string"
                },
                "roleArn": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentialsTitle",
                "roleArn"
            ]
        },
        "airbyte:index/DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamUser:DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamUser": {
            "properties": {
                "awsAccessKeyId": {
                    "type": "string"
                },
                "awsSecretAccessKey": {
                    "type": "string"
                },
                "credentialsTitle": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "awsAccessKeyId",
                "awsSecretAccessKey",
                "credentialsTitle"
            ]
        },
        "airbyte:index/DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamRole:DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamRole": {
            "properties": {
                "credentialsTitle": {
                    "type": "string"
                },
                "roleArn": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentialsTitle",
                "roleArn"
            ]
        },
        "airbyte:index/DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamUser:DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamUser": {
            "properties": {
                "awsAccessKeyId": {
                    "type": "string"
                },
                "awsSecretAccessKey": {
                    "type": "string"
                },
                "credentialsTitle": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "awsAccessKeyId",
                "awsSecretAccessKey",
                "credentialsTitle"
            ]
        },
        "airbyte:index/DestinationAWSDatalakeConfigurationFormat:DestinationAWSDatalakeConfigurationFormat": {
            "properties": {
                "destinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJson": {
                    "$ref": "#/types/airbyte:index/DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJson:DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJson"
                },
                "destinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage": {
                    "$ref": "#/types/airbyte:index/DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage:DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage"
                },
                "destinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJson": {
                    "$ref": "#/types/airbyte:index/DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJson:DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJson"
                },
                "destinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage": {
                    "$ref": "#/types/airbyte:index/DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage:DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJson:DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJson": {
            "properties": {
                "compressionCodec": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "formatType"
            ]
        },
        "airbyte:index/DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage:DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage": {
            "properties": {
                "compressionCodec": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "formatType"
            ]
        },
        "airbyte:index/DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJson:DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJson": {
            "properties": {
                "compressionCodec": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "formatType"
            ]
        },
        "airbyte:index/DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage:DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage": {
            "properties": {
                "compressionCodec": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "formatType"
            ]
        },
        "airbyte:index/DestinationAzureBlobStorageConfiguration:DestinationAzureBlobStorageConfiguration": {
            "properties": {
                "azureBlobStorageAccountKey": {
                    "type": "string",
                    "description": "The Azure blob storage account key.\n"
                },
                "azureBlobStorageAccountName": {
                    "type": "string",
                    "description": "The account's name of the Azure Blob Storage.\n"
                },
                "azureBlobStorageContainerName": {
                    "type": "string",
                    "description": "The name of the Azure blob storage container. If not exists - will be created automatically. May be empty, then will be created automatically airbytecontainer+timestamp\n"
                },
                "azureBlobStorageEndpointDomainName": {
                    "type": "string",
                    "description": "This is Azure Blob Storage endpoint domain name. Leave default value (or leave it empty if run container from command line) to use Microsoft native from example.\n"
                },
                "azureBlobStorageOutputBufferSize": {
                    "type": "integer",
                    "description": "The amount of megabytes to buffer for the output stream to Azure. This will impact memory footprint on workers, but may need adjustment for performance and appropriate block size in Azure.\n"
                },
                "azureBlobStorageSpillSize": {
                    "type": "integer",
                    "description": "The amount of megabytes after which the connector should spill the records in a new blob object. Make sure to configure size greater than individual records. Enter 0 if not applicable\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"azure-blob-storage\"]\n"
                },
                "format": {
                    "$ref": "#/types/airbyte:index/DestinationAzureBlobStorageConfigurationFormat:DestinationAzureBlobStorageConfigurationFormat",
                    "description": "Output data format\n"
                }
            },
            "type": "object",
            "required": [
                "azureBlobStorageAccountKey",
                "azureBlobStorageAccountName",
                "destinationType",
                "format"
            ]
        },
        "airbyte:index/DestinationAzureBlobStorageConfigurationFormat:DestinationAzureBlobStorageConfigurationFormat": {
            "properties": {
                "destinationAzureBlobStorageOutputFormatCsvCommaSeparatedValues": {
                    "$ref": "#/types/airbyte:index/DestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatCsvCommaSeparatedValues:DestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatCsvCommaSeparatedValues"
                },
                "destinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJson": {
                    "$ref": "#/types/airbyte:index/DestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJson:DestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJson"
                },
                "destinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValues": {
                    "$ref": "#/types/airbyte:index/DestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValues:DestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValues"
                },
                "destinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJson": {
                    "$ref": "#/types/airbyte:index/DestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJson:DestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJson"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatCsvCommaSeparatedValues:DestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatCsvCommaSeparatedValues": {
            "properties": {
                "flattening": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "flattening",
                "formatType"
            ]
        },
        "airbyte:index/DestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJson:DestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJson": {
            "properties": {
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "formatType"
            ]
        },
        "airbyte:index/DestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValues:DestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValues": {
            "properties": {
                "flattening": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "flattening",
                "formatType"
            ]
        },
        "airbyte:index/DestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJson:DestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJson": {
            "properties": {
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "formatType"
            ]
        },
        "airbyte:index/DestinationBigqueryConfiguration:DestinationBigqueryConfiguration": {
            "properties": {
                "bigQueryClientBufferSizeMb": {
                    "type": "integer",
                    "description": "Google BigQuery client's chunk (buffer) size (MIN=1, MAX = 15) for each table. The size that will be written by a single RPC. Written data will be buffered and only flushed upon reaching this size or closing the channel. The default 15MB value is used if not set explicitly. Read more \\n\\nhere\\n\\n.\n"
                },
                "credentialsJson": {
                    "type": "string",
                    "description": "The contents of the JSON service account key. Check out the \\n\\ndocs\\n\\n if you need help generating this key. Default credentials will be used if this field is left empty.\n"
                },
                "datasetId": {
                    "type": "string",
                    "description": "The default BigQuery Dataset ID that tables are replicated to if the source does not specify a namespace. Read more \\n\\nhere\\n\\n.\n"
                },
                "datasetLocation": {
                    "type": "string",
                    "description": "must be one of [\"US\", \"EU\", \"asia-east1\", \"asia-east2\", \"asia-northeast1\", \"asia-northeast2\", \"asia-northeast3\", \"asia-south1\", \"asia-south2\", \"asia-southeast1\", \"asia-southeast2\", \"australia-southeast1\", \"australia-southeast2\", \"europe-central1\", \"europe-central2\", \"europe-north1\", \"europe-southwest1\", \"europe-west1\", \"europe-west2\", \"europe-west3\", \"europe-west4\", \"europe-west6\", \"europe-west7\", \"europe-west8\", \"europe-west9\", \"me-west1\", \"northamerica-northeast1\", \"northamerica-northeast2\", \"southamerica-east1\", \"southamerica-west1\", \"us-central1\", \"us-east1\", \"us-east2\", \"us-east3\", \"us-east4\", \"us-east5\", \"us-west1\", \"us-west2\", \"us-west3\", \"us-west4\"]\nThe location of the dataset. Warning: Changes made after creation will not be applied. Read more \\n\\nhere\\n\\n.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"bigquery\"]\n"
                },
                "loadingMethod": {
                    "$ref": "#/types/airbyte:index/DestinationBigqueryConfigurationLoadingMethod:DestinationBigqueryConfigurationLoadingMethod",
                    "description": "Loading method used to send select the way data will be uploaded to BigQuery. \\n\\n\\n\\nStandard Inserts\\n\\n - Direct uploading using SQL INSERT statements. This method is extremely inefficient and provided only for quick testing. In almost all cases, you should use staging. \\n\\n\\n\\nGCS Staging\\n\\n - Writes large batches of records to a file, uploads the file to GCS, then uses \\n\\nCOPY INTO table\\n\\n to upload the file. Recommended for most workloads for better speed and scalability. Read more about GCS Staging \\n\\nhere\\n\\n.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The GCP project ID for the project containing the target BigQuery dataset. Read more \\n\\nhere\\n\\n.\n"
                },
                "rawDataDataset": {
                    "type": "string",
                    "description": "(Early Access) The dataset to write raw tables into\n"
                },
                "transformationPriority": {
                    "type": "string",
                    "description": "must be one of [\"interactive\", \"batch\"]\nInteractive run type means that the query is executed as soon as possible, and these queries count towards concurrent rate limit and daily limit. Read more about interactive run type \\n\\nhere\\n\\n. Batch queries are queued and started as soon as idle resources are available in the BigQuery shared resource pool, which usually occurs within a few minutes. Batch queries don’t count towards your concurrent rate limit. Read more about batch queries \\n\\nhere\\n\\n. The default \"interactive\" value is used if not set explicitly.\n"
                },
                "use1s1tFormat": {
                    "type": "boolean",
                    "description": "(Early Access) Use \\n\\nDestinations V2\\n\\n.\n"
                }
            },
            "type": "object",
            "required": [
                "datasetId",
                "datasetLocation",
                "destinationType",
                "projectId"
            ]
        },
        "airbyte:index/DestinationBigqueryConfigurationLoadingMethod:DestinationBigqueryConfigurationLoadingMethod": {
            "properties": {
                "destinationBigqueryLoadingMethodGcsStaging": {
                    "$ref": "#/types/airbyte:index/DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStaging:DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStaging"
                },
                "destinationBigqueryLoadingMethodStandardInserts": {
                    "$ref": "#/types/airbyte:index/DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodStandardInserts:DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodStandardInserts"
                },
                "destinationBigqueryUpdateLoadingMethodGcsStaging": {
                    "$ref": "#/types/airbyte:index/DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStaging:DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStaging"
                },
                "destinationBigqueryUpdateLoadingMethodStandardInserts": {
                    "$ref": "#/types/airbyte:index/DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodStandardInserts:DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodStandardInserts"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStaging:DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStaging": {
            "properties": {
                "credential": {
                    "$ref": "#/types/airbyte:index/DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredential:DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredential"
                },
                "fileBufferCount": {
                    "type": "integer"
                },
                "gcsBucketName": {
                    "type": "string"
                },
                "gcsBucketPath": {
                    "type": "string"
                },
                "keepFilesInGcsBucket": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credential",
                "gcsBucketName",
                "gcsBucketPath",
                "method"
            ]
        },
        "airbyte:index/DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredential:DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredential": {
            "properties": {
                "destinationBigqueryLoadingMethodGcsStagingCredentialHmacKey": {
                    "$ref": "#/types/airbyte:index/DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialDestinationBigqueryLoadingMethodGcsStagingCredentialHmacKey:DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialDestinationBigqueryLoadingMethodGcsStagingCredentialHmacKey"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialDestinationBigqueryLoadingMethodGcsStagingCredentialHmacKey:DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialDestinationBigqueryLoadingMethodGcsStagingCredentialHmacKey": {
            "properties": {
                "credentialType": {
                    "type": "string"
                },
                "hmacKeyAccessId": {
                    "type": "string"
                },
                "hmacKeySecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentialType",
                "hmacKeyAccessId",
                "hmacKeySecret"
            ]
        },
        "airbyte:index/DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodStandardInserts:DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodStandardInserts": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ]
        },
        "airbyte:index/DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStaging:DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStaging": {
            "properties": {
                "credential": {
                    "$ref": "#/types/airbyte:index/DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredential:DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredential"
                },
                "fileBufferCount": {
                    "type": "integer"
                },
                "gcsBucketName": {
                    "type": "string"
                },
                "gcsBucketPath": {
                    "type": "string"
                },
                "keepFilesInGcsBucket": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credential",
                "gcsBucketName",
                "gcsBucketPath",
                "method"
            ]
        },
        "airbyte:index/DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredential:DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredential": {
            "properties": {
                "destinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKey": {
                    "$ref": "#/types/airbyte:index/DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKey:DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKey"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKey:DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKey": {
            "properties": {
                "credentialType": {
                    "type": "string"
                },
                "hmacKeyAccessId": {
                    "type": "string"
                },
                "hmacKeySecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentialType",
                "hmacKeyAccessId",
                "hmacKeySecret"
            ]
        },
        "airbyte:index/DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodStandardInserts:DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodStandardInserts": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ]
        },
        "airbyte:index/DestinationBigqueryDenormalizedConfiguration:DestinationBigqueryDenormalizedConfiguration": {
            "properties": {
                "bigQueryClientBufferSizeMb": {
                    "type": "integer",
                    "description": "Google BigQuery client's chunk (buffer) size (MIN=1, MAX = 15) for each table. The size that will be written by a single RPC. Written data will be buffered and only flushed upon reaching this size or closing the channel. The default 15MB value is used if not set explicitly. Read more \\n\\nhere\\n\\n.\n"
                },
                "credentialsJson": {
                    "type": "string",
                    "description": "The contents of the JSON service account key. Check out the \\n\\ndocs\\n\\n if you need help generating this key. Default credentials will be used if this field is left empty.\n"
                },
                "datasetId": {
                    "type": "string",
                    "description": "The default BigQuery Dataset ID that tables are replicated to if the source does not specify a namespace. Read more \\n\\nhere\\n\\n.\n"
                },
                "datasetLocation": {
                    "type": "string",
                    "description": "must be one of [\"US\", \"EU\", \"asia-east1\", \"asia-east2\", \"asia-northeast1\", \"asia-northeast2\", \"asia-northeast3\", \"asia-south1\", \"asia-south2\", \"asia-southeast1\", \"asia-southeast2\", \"australia-southeast1\", \"australia-southeast2\", \"europe-central1\", \"europe-central2\", \"europe-north1\", \"europe-southwest1\", \"europe-west1\", \"europe-west2\", \"europe-west3\", \"europe-west4\", \"europe-west6\", \"europe-west7\", \"europe-west8\", \"europe-west9\", \"me-west1\", \"northamerica-northeast1\", \"northamerica-northeast2\", \"southamerica-east1\", \"southamerica-west1\", \"us-central1\", \"us-east1\", \"us-east2\", \"us-east3\", \"us-east4\", \"us-east5\", \"us-west1\", \"us-west2\", \"us-west3\", \"us-west4\"]\nThe location of the dataset. Warning: Changes made after creation will not be applied. The default \"US\" value is used if not set explicitly. Read more \\n\\nhere\\n\\n.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"bigquery-denormalized\"]\n"
                },
                "loadingMethod": {
                    "$ref": "#/types/airbyte:index/DestinationBigqueryDenormalizedConfigurationLoadingMethod:DestinationBigqueryDenormalizedConfigurationLoadingMethod",
                    "description": "Loading method used to send select the way data will be uploaded to BigQuery. \\n\\n\\n\\nStandard Inserts\\n\\n - Direct uploading using SQL INSERT statements. This method is extremely inefficient and provided only for quick testing. In almost all cases, you should use staging. \\n\\n\\n\\nGCS Staging\\n\\n - Writes large batches of records to a file, uploads the file to GCS, then uses \\n\\nCOPY INTO table\\n\\n to upload the file. Recommended for most workloads for better speed and scalability. Read more about GCS Staging \\n\\nhere\\n\\n.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The GCP project ID for the project containing the target BigQuery dataset. Read more \\n\\nhere\\n\\n.\n"
                }
            },
            "type": "object",
            "required": [
                "datasetId",
                "destinationType",
                "projectId"
            ]
        },
        "airbyte:index/DestinationBigqueryDenormalizedConfigurationLoadingMethod:DestinationBigqueryDenormalizedConfigurationLoadingMethod": {
            "properties": {
                "destinationBigqueryDenormalizedLoadingMethodGcsStaging": {
                    "$ref": "#/types/airbyte:index/DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStaging:DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStaging"
                },
                "destinationBigqueryDenormalizedLoadingMethodStandardInserts": {
                    "$ref": "#/types/airbyte:index/DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodStandardInserts:DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodStandardInserts"
                },
                "destinationBigqueryDenormalizedUpdateLoadingMethodGcsStaging": {
                    "$ref": "#/types/airbyte:index/DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStaging:DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStaging"
                },
                "destinationBigqueryDenormalizedUpdateLoadingMethodStandardInserts": {
                    "$ref": "#/types/airbyte:index/DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodStandardInserts:DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodStandardInserts"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStaging:DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStaging": {
            "properties": {
                "credential": {
                    "$ref": "#/types/airbyte:index/DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredential:DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredential"
                },
                "fileBufferCount": {
                    "type": "integer"
                },
                "gcsBucketName": {
                    "type": "string"
                },
                "gcsBucketPath": {
                    "type": "string"
                },
                "keepFilesInGcsBucket": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credential",
                "gcsBucketName",
                "gcsBucketPath",
                "method"
            ]
        },
        "airbyte:index/DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredential:DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredential": {
            "properties": {
                "destinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKey": {
                    "$ref": "#/types/airbyte:index/DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKey:DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKey"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKey:DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKey": {
            "properties": {
                "credentialType": {
                    "type": "string"
                },
                "hmacKeyAccessId": {
                    "type": "string"
                },
                "hmacKeySecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentialType",
                "hmacKeyAccessId",
                "hmacKeySecret"
            ]
        },
        "airbyte:index/DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodStandardInserts:DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodStandardInserts": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ]
        },
        "airbyte:index/DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStaging:DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStaging": {
            "properties": {
                "credential": {
                    "$ref": "#/types/airbyte:index/DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredential:DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredential"
                },
                "fileBufferCount": {
                    "type": "integer"
                },
                "gcsBucketName": {
                    "type": "string"
                },
                "gcsBucketPath": {
                    "type": "string"
                },
                "keepFilesInGcsBucket": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credential",
                "gcsBucketName",
                "gcsBucketPath",
                "method"
            ]
        },
        "airbyte:index/DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredential:DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredential": {
            "properties": {
                "destinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKey": {
                    "$ref": "#/types/airbyte:index/DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKey:DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKey"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKey:DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKey": {
            "properties": {
                "credentialType": {
                    "type": "string"
                },
                "hmacKeyAccessId": {
                    "type": "string"
                },
                "hmacKeySecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentialType",
                "hmacKeyAccessId",
                "hmacKeySecret"
            ]
        },
        "airbyte:index/DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodStandardInserts:DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodStandardInserts": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ]
        },
        "airbyte:index/DestinationClickhouseConfiguration:DestinationClickhouseConfiguration": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"clickhouse\"]\n"
                },
                "host": {
                    "type": "string",
                    "description": "Hostname of the database.\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '\u0026'. (example: key1=value1\u0026key2=value2\u0026key3=value3).\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password associated with the username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "HTTP port of the database.\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/DestinationClickhouseConfigurationTunnelMethod:DestinationClickhouseConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "destinationType",
                "host",
                "port",
                "username"
            ]
        },
        "airbyte:index/DestinationClickhouseConfigurationTunnelMethod:DestinationClickhouseConfigurationTunnelMethod": {
            "properties": {
                "destinationClickhouseSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodNoTunnel:DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodNoTunnel"
                },
                "destinationClickhouseSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodPasswordAuthentication:DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodPasswordAuthentication"
                },
                "destinationClickhouseSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodSshKeyAuthentication:DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodSshKeyAuthentication"
                },
                "destinationClickhouseUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodNoTunnel:DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodNoTunnel"
                },
                "destinationClickhouseUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodPasswordAuthentication:DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodPasswordAuthentication"
                },
                "destinationClickhouseUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodSshKeyAuthentication:DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodNoTunnel:DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodPasswordAuthentication:DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodSshKeyAuthentication:DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodNoTunnel:DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodPasswordAuthentication:DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodSshKeyAuthentication:DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/DestinationConvexConfiguration:DestinationConvexConfiguration": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "API access key used to send data to a Convex deployment.\n"
                },
                "deploymentUrl": {
                    "type": "string",
                    "description": "URL of the Convex deployment that is the destination\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"convex\"]\n"
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "deploymentUrl",
                "destinationType"
            ]
        },
        "airbyte:index/DestinationCumulioConfiguration:DestinationCumulioConfiguration": {
            "properties": {
                "apiHost": {
                    "type": "string",
                    "description": "URL of the Cumul.io API (e.g. 'https://api.cumul.io', 'https://api.us.cumul.io', or VPC-specific API url). Defaults to 'https://api.cumul.io'.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "An API key generated in Cumul.io's platform (can be generated here: https://app.cumul.io/start/profile/integration).\n"
                },
                "apiToken": {
                    "type": "string",
                    "description": "The corresponding API token generated in Cumul.io's platform (can be generated here: https://app.cumul.io/start/profile/integration).\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"cumulio\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiHost",
                "apiKey",
                "apiToken",
                "destinationType"
            ]
        },
        "airbyte:index/DestinationDatabendConfiguration:DestinationDatabendConfiguration": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"databend\"]\n"
                },
                "host": {
                    "type": "string",
                    "description": "Hostname of the database.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password associated with the username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the database.\n"
                },
                "table": {
                    "type": "string",
                    "description": "The default  table was written to.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "destinationType",
                "host",
                "username"
            ]
        },
        "airbyte:index/DestinationDatabricksConfiguration:DestinationDatabricksConfiguration": {
            "properties": {
                "acceptTerms": {
                    "type": "boolean",
                    "description": "You must agree to the Databricks JDBC Driver \\n\\nTerms \u0026 Conditions\\n\\n to use this connector.\n"
                },
                "dataSource": {
                    "$ref": "#/types/airbyte:index/DestinationDatabricksConfigurationDataSource:DestinationDatabricksConfigurationDataSource",
                    "description": "Storage on which the delta lake is built.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The name of the catalog. If not specified otherwise, the \"hive_metastore\" will be used.\n"
                },
                "databricksHttpPath": {
                    "type": "string",
                    "description": "Databricks Cluster HTTP Path.\n"
                },
                "databricksPersonalAccessToken": {
                    "type": "string",
                    "description": "Databricks Personal Access Token for making authenticated requests.\n"
                },
                "databricksPort": {
                    "type": "string",
                    "description": "Databricks Cluster Port.\n"
                },
                "databricksServerHostname": {
                    "type": "string",
                    "description": "Databricks Cluster Server Hostname.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"databricks\"]\n"
                },
                "enableSchemaEvolution": {
                    "type": "boolean",
                    "description": "Support schema evolution for all streams. If \"false\", the connector might fail when a stream's schema changes.\n"
                },
                "purgeStagingData": {
                    "type": "boolean",
                    "description": "Default to 'true'. Switch it to 'false' for debugging purpose.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The default schema tables are written. If not specified otherwise, the \"default\" will be used.\n"
                }
            },
            "type": "object",
            "required": [
                "acceptTerms",
                "dataSource",
                "databricksHttpPath",
                "databricksPersonalAccessToken",
                "databricksServerHostname",
                "destinationType"
            ]
        },
        "airbyte:index/DestinationDatabricksConfigurationDataSource:DestinationDatabricksConfigurationDataSource": {
            "properties": {
                "destinationDatabricksDataSourceAmazonS3": {
                    "$ref": "#/types/airbyte:index/DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAmazonS3:DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAmazonS3"
                },
                "destinationDatabricksDataSourceAzureBlobStorage": {
                    "$ref": "#/types/airbyte:index/DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAzureBlobStorage:DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAzureBlobStorage"
                },
                "destinationDatabricksDataSourceRecommendedManagedTables": {
                    "$ref": "#/types/airbyte:index/DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceRecommendedManagedTables:DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceRecommendedManagedTables"
                },
                "destinationDatabricksUpdateDataSourceAmazonS3": {
                    "$ref": "#/types/airbyte:index/DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAmazonS3:DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAmazonS3"
                },
                "destinationDatabricksUpdateDataSourceAzureBlobStorage": {
                    "$ref": "#/types/airbyte:index/DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAzureBlobStorage:DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAzureBlobStorage"
                },
                "destinationDatabricksUpdateDataSourceRecommendedManagedTables": {
                    "$ref": "#/types/airbyte:index/DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceRecommendedManagedTables:DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceRecommendedManagedTables"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAmazonS3:DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAmazonS3": {
            "properties": {
                "dataSourceType": {
                    "type": "string"
                },
                "fileNamePattern": {
                    "type": "string"
                },
                "s3AccessKeyId": {
                    "type": "string"
                },
                "s3BucketName": {
                    "type": "string"
                },
                "s3BucketPath": {
                    "type": "string"
                },
                "s3BucketRegion": {
                    "type": "string"
                },
                "s3SecretAccessKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dataSourceType",
                "s3AccessKeyId",
                "s3BucketName",
                "s3BucketPath",
                "s3BucketRegion",
                "s3SecretAccessKey"
            ]
        },
        "airbyte:index/DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAzureBlobStorage:DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAzureBlobStorage": {
            "properties": {
                "azureBlobStorageAccountName": {
                    "type": "string"
                },
                "azureBlobStorageContainerName": {
                    "type": "string"
                },
                "azureBlobStorageEndpointDomainName": {
                    "type": "string"
                },
                "azureBlobStorageSasToken": {
                    "type": "string"
                },
                "dataSourceType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "azureBlobStorageAccountName",
                "azureBlobStorageContainerName",
                "azureBlobStorageSasToken",
                "dataSourceType"
            ]
        },
        "airbyte:index/DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceRecommendedManagedTables:DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceRecommendedManagedTables": {
            "properties": {
                "dataSourceType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dataSourceType"
            ]
        },
        "airbyte:index/DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAmazonS3:DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAmazonS3": {
            "properties": {
                "dataSourceType": {
                    "type": "string"
                },
                "fileNamePattern": {
                    "type": "string"
                },
                "s3AccessKeyId": {
                    "type": "string"
                },
                "s3BucketName": {
                    "type": "string"
                },
                "s3BucketPath": {
                    "type": "string"
                },
                "s3BucketRegion": {
                    "type": "string"
                },
                "s3SecretAccessKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dataSourceType",
                "s3AccessKeyId",
                "s3BucketName",
                "s3BucketPath",
                "s3BucketRegion",
                "s3SecretAccessKey"
            ]
        },
        "airbyte:index/DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAzureBlobStorage:DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAzureBlobStorage": {
            "properties": {
                "azureBlobStorageAccountName": {
                    "type": "string"
                },
                "azureBlobStorageContainerName": {
                    "type": "string"
                },
                "azureBlobStorageEndpointDomainName": {
                    "type": "string"
                },
                "azureBlobStorageSasToken": {
                    "type": "string"
                },
                "dataSourceType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "azureBlobStorageAccountName",
                "azureBlobStorageContainerName",
                "azureBlobStorageSasToken",
                "dataSourceType"
            ]
        },
        "airbyte:index/DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceRecommendedManagedTables:DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceRecommendedManagedTables": {
            "properties": {
                "dataSourceType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dataSourceType"
            ]
        },
        "airbyte:index/DestinationDevNullConfiguration:DestinationDevNullConfiguration": {
            "properties": {
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"dev-null\"]\n"
                },
                "testDestination": {
                    "$ref": "#/types/airbyte:index/DestinationDevNullConfigurationTestDestination:DestinationDevNullConfigurationTestDestination",
                    "description": "The type of destination to be used\n"
                }
            },
            "type": "object",
            "required": [
                "destinationType",
                "testDestination"
            ]
        },
        "airbyte:index/DestinationDevNullConfigurationTestDestination:DestinationDevNullConfigurationTestDestination": {
            "properties": {
                "destinationDevNullTestDestinationSilent": {
                    "$ref": "#/types/airbyte:index/DestinationDevNullConfigurationTestDestinationDestinationDevNullTestDestinationSilent:DestinationDevNullConfigurationTestDestinationDestinationDevNullTestDestinationSilent"
                },
                "destinationDevNullUpdateTestDestinationSilent": {
                    "$ref": "#/types/airbyte:index/DestinationDevNullConfigurationTestDestinationDestinationDevNullUpdateTestDestinationSilent:DestinationDevNullConfigurationTestDestinationDestinationDevNullUpdateTestDestinationSilent"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationDevNullConfigurationTestDestinationDestinationDevNullTestDestinationSilent:DestinationDevNullConfigurationTestDestinationDestinationDevNullTestDestinationSilent": {
            "properties": {
                "testDestinationType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "testDestinationType"
            ]
        },
        "airbyte:index/DestinationDevNullConfigurationTestDestinationDestinationDevNullUpdateTestDestinationSilent:DestinationDevNullConfigurationTestDestinationDestinationDevNullUpdateTestDestinationSilent": {
            "properties": {
                "testDestinationType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "testDestinationType"
            ]
        },
        "airbyte:index/DestinationDynamodbConfiguration:DestinationDynamodbConfiguration": {
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The access key id to access the DynamoDB. Airbyte requires Read and Write permissions to the DynamoDB.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"dynamodb\"]\n"
                },
                "dynamodbEndpoint": {
                    "type": "string",
                    "description": "This is your DynamoDB endpoint url.(if you are working with AWS DynamoDB, just leave empty).\n"
                },
                "dynamodbRegion": {
                    "type": "string",
                    "description": "must be one of [\"\", \"us-east-1\", \"us-east-2\", \"us-west-1\", \"us-west-2\", \"af-south-1\", \"ap-east-1\", \"ap-south-1\", \"ap-northeast-1\", \"ap-northeast-2\", \"ap-northeast-3\", \"ap-southeast-1\", \"ap-southeast-2\", \"ca-central-1\", \"cn-north-1\", \"cn-northwest-1\", \"eu-central-1\", \"eu-north-1\", \"eu-south-1\", \"eu-west-1\", \"eu-west-2\", \"eu-west-3\", \"sa-east-1\", \"me-south-1\", \"us-gov-east-1\", \"us-gov-west-1\"]\nThe region of the DynamoDB.\n"
                },
                "dynamodbTableNamePrefix": {
                    "type": "string",
                    "description": "The prefix to use when naming DynamoDB tables.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The corresponding secret to the access key id.\n"
                }
            },
            "type": "object",
            "required": [
                "accessKeyId",
                "destinationType",
                "dynamodbRegion",
                "dynamodbTableNamePrefix",
                "secretAccessKey"
            ]
        },
        "airbyte:index/DestinationElasticsearchConfiguration:DestinationElasticsearchConfiguration": {
            "properties": {
                "authenticationMethod": {
                    "$ref": "#/types/airbyte:index/DestinationElasticsearchConfigurationAuthenticationMethod:DestinationElasticsearchConfigurationAuthenticationMethod",
                    "description": "The type of authentication to be used\n"
                },
                "caCertificate": {
                    "type": "string",
                    "description": "CA certificate\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"elasticsearch\"]\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The full url of the Elasticsearch server\n"
                },
                "upsert": {
                    "type": "boolean",
                    "description": "If a primary key identifier is defined in the source, an upsert will be performed using the primary key value as the elasticsearch doc id. Does not support composite primary keys.\n"
                }
            },
            "type": "object",
            "required": [
                "destinationType",
                "endpoint"
            ]
        },
        "airbyte:index/DestinationElasticsearchConfigurationAuthenticationMethod:DestinationElasticsearchConfigurationAuthenticationMethod": {
            "properties": {
                "destinationElasticsearchAuthenticationMethodApiKeySecret": {
                    "$ref": "#/types/airbyte:index/DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodApiKeySecret:DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodApiKeySecret"
                },
                "destinationElasticsearchAuthenticationMethodUsernamePassword": {
                    "$ref": "#/types/airbyte:index/DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodUsernamePassword:DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodUsernamePassword"
                },
                "destinationElasticsearchUpdateAuthenticationMethodApiKeySecret": {
                    "$ref": "#/types/airbyte:index/DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodApiKeySecret:DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodApiKeySecret"
                },
                "destinationElasticsearchUpdateAuthenticationMethodUsernamePassword": {
                    "$ref": "#/types/airbyte:index/DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodUsernamePassword:DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodUsernamePassword"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodApiKeySecret:DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodApiKeySecret": {
            "properties": {
                "apiKeyId": {
                    "type": "string"
                },
                "apiKeySecret": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiKeyId",
                "apiKeySecret",
                "method"
            ]
        },
        "airbyte:index/DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodUsernamePassword:DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodUsernamePassword": {
            "properties": {
                "method": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method",
                "password",
                "username"
            ]
        },
        "airbyte:index/DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodApiKeySecret:DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodApiKeySecret": {
            "properties": {
                "apiKeyId": {
                    "type": "string"
                },
                "apiKeySecret": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiKeyId",
                "apiKeySecret",
                "method"
            ]
        },
        "airbyte:index/DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodUsernamePassword:DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodUsernamePassword": {
            "properties": {
                "method": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method",
                "password",
                "username"
            ]
        },
        "airbyte:index/DestinationFireboltConfiguration:DestinationFireboltConfiguration": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "Firebolt account to login.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database to connect to.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"firebolt\"]\n"
                },
                "engine": {
                    "type": "string",
                    "description": "Engine name or url to connect to.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The host name of your Firebolt database.\n"
                },
                "loadingMethod": {
                    "$ref": "#/types/airbyte:index/DestinationFireboltConfigurationLoadingMethod:DestinationFireboltConfigurationLoadingMethod",
                    "description": "Loading method used to select the way data will be uploaded to Firebolt\n"
                },
                "password": {
                    "type": "string",
                    "description": "Firebolt password.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Firebolt email address you use to login.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "destinationType",
                "password",
                "username"
            ]
        },
        "airbyte:index/DestinationFireboltConfigurationLoadingMethod:DestinationFireboltConfigurationLoadingMethod": {
            "properties": {
                "destinationFireboltLoadingMethodExternalTableViaS3": {
                    "$ref": "#/types/airbyte:index/DestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodExternalTableViaS3:DestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodExternalTableViaS3"
                },
                "destinationFireboltLoadingMethodSqlInserts": {
                    "$ref": "#/types/airbyte:index/DestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodSqlInserts:DestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodSqlInserts"
                },
                "destinationFireboltUpdateLoadingMethodExternalTableViaS3": {
                    "$ref": "#/types/airbyte:index/DestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodExternalTableViaS3:DestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodExternalTableViaS3"
                },
                "destinationFireboltUpdateLoadingMethodSqlInserts": {
                    "$ref": "#/types/airbyte:index/DestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodSqlInserts:DestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodSqlInserts"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodExternalTableViaS3:DestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodExternalTableViaS3": {
            "properties": {
                "awsKeyId": {
                    "type": "string"
                },
                "awsKeySecret": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "s3Bucket": {
                    "type": "string"
                },
                "s3Region": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "awsKeyId",
                "awsKeySecret",
                "method",
                "s3Bucket",
                "s3Region"
            ]
        },
        "airbyte:index/DestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodSqlInserts:DestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodSqlInserts": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ]
        },
        "airbyte:index/DestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodExternalTableViaS3:DestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodExternalTableViaS3": {
            "properties": {
                "awsKeyId": {
                    "type": "string"
                },
                "awsKeySecret": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "s3Bucket": {
                    "type": "string"
                },
                "s3Region": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "awsKeyId",
                "awsKeySecret",
                "method",
                "s3Bucket",
                "s3Region"
            ]
        },
        "airbyte:index/DestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodSqlInserts:DestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodSqlInserts": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ]
        },
        "airbyte:index/DestinationFirestoreConfiguration:DestinationFirestoreConfiguration": {
            "properties": {
                "credentialsJson": {
                    "type": "string",
                    "description": "The contents of the JSON service account key. Check out the \\n\\ndocs\\n\\n if you need help generating this key. Default credentials will be used if this field is left empty.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"firestore\"]\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The GCP project ID for the project containing the target BigQuery dataset.\n"
                }
            },
            "type": "object",
            "required": [
                "destinationType",
                "projectId"
            ]
        },
        "airbyte:index/DestinationGcsConfiguration:DestinationGcsConfiguration": {
            "properties": {
                "credential": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationCredential:DestinationGcsConfigurationCredential",
                    "description": "An HMAC key is a type of credential and can be associated with a service account or a user account in Cloud Storage. Read more \\n\\nhere\\n\\n.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"gcs\"]\n"
                },
                "format": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormat:DestinationGcsConfigurationFormat",
                    "description": "Output data format. One of the following formats must be selected - \\n\\nAVRO\\n\\n format, \\n\\nPARQUET\\n\\n format, \\n\\nCSV\\n\\n format, or \\n\\nJSONL\\n\\n format.\n"
                },
                "gcsBucketName": {
                    "type": "string",
                    "description": "You can find the bucket name in the App Engine Admin console Application Settings page, under the label Google Cloud Storage Bucket. Read more \\n\\nhere\\n\\n.\n"
                },
                "gcsBucketPath": {
                    "type": "string",
                    "description": "GCS Bucket Path string Subdirectory under the above bucket to sync the data into.\n"
                },
                "gcsBucketRegion": {
                    "type": "string",
                    "description": "must be one of [\"northamerica-northeast1\", \"northamerica-northeast2\", \"us-central1\", \"us-east1\", \"us-east4\", \"us-west1\", \"us-west2\", \"us-west3\", \"us-west4\", \"southamerica-east1\", \"southamerica-west1\", \"europe-central2\", \"europe-north1\", \"europe-west1\", \"europe-west2\", \"europe-west3\", \"europe-west4\", \"europe-west6\", \"asia-east1\", \"asia-east2\", \"asia-northeast1\", \"asia-northeast2\", \"asia-northeast3\", \"asia-south1\", \"asia-south2\", \"asia-southeast1\", \"asia-southeast2\", \"australia-southeast1\", \"australia-southeast2\", \"asia\", \"eu\", \"us\", \"asia1\", \"eur4\", \"nam4\"]\nSelect a Region of the GCS Bucket. Read more \\n\\nhere\\n\\n.\n"
                }
            },
            "type": "object",
            "required": [
                "credential",
                "destinationType",
                "format",
                "gcsBucketName",
                "gcsBucketPath"
            ]
        },
        "airbyte:index/DestinationGcsConfigurationCredential:DestinationGcsConfigurationCredential": {
            "properties": {
                "destinationGcsAuthenticationHmacKey": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationCredentialDestinationGcsAuthenticationHmacKey:DestinationGcsConfigurationCredentialDestinationGcsAuthenticationHmacKey"
                },
                "destinationGcsUpdateAuthenticationHmacKey": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationCredentialDestinationGcsUpdateAuthenticationHmacKey:DestinationGcsConfigurationCredentialDestinationGcsUpdateAuthenticationHmacKey"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationGcsConfigurationCredentialDestinationGcsAuthenticationHmacKey:DestinationGcsConfigurationCredentialDestinationGcsAuthenticationHmacKey": {
            "properties": {
                "credentialType": {
                    "type": "string"
                },
                "hmacKeyAccessId": {
                    "type": "string"
                },
                "hmacKeySecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentialType",
                "hmacKeyAccessId",
                "hmacKeySecret"
            ]
        },
        "airbyte:index/DestinationGcsConfigurationCredentialDestinationGcsUpdateAuthenticationHmacKey:DestinationGcsConfigurationCredentialDestinationGcsUpdateAuthenticationHmacKey": {
            "properties": {
                "credentialType": {
                    "type": "string"
                },
                "hmacKeyAccessId": {
                    "type": "string"
                },
                "hmacKeySecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentialType",
                "hmacKeyAccessId",
                "hmacKeySecret"
            ]
        },
        "airbyte:index/DestinationGcsConfigurationFormat:DestinationGcsConfigurationFormat": {
            "properties": {
                "destinationGcsOutputFormatAvroApacheAvro": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvro:DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvro"
                },
                "destinationGcsOutputFormatCsvCommaSeparatedValues": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValues:DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValues"
                },
                "destinationGcsOutputFormatJsonLinesNewlineDelimitedJson": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJson:DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJson"
                },
                "destinationGcsOutputFormatParquetColumnarStorage": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatParquetColumnarStorage:DestinationGcsConfigurationFormatDestinationGcsOutputFormatParquetColumnarStorage"
                },
                "destinationGcsUpdateOutputFormatAvroApacheAvro": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvro:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvro"
                },
                "destinationGcsUpdateOutputFormatCsvCommaSeparatedValues": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValues:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValues"
                },
                "destinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJson": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJson:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJson"
                },
                "destinationGcsUpdateOutputFormatParquetColumnarStorage": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatParquetColumnarStorage:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatParquetColumnarStorage"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvro:DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvro": {
            "properties": {
                "compressionCodec": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodec:DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodec"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionCodec",
                "formatType"
            ]
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodec:DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodec": {
            "properties": {
                "destinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2:DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2"
                },
                "destinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate:DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate"
                },
                "destinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression:DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression"
                },
                "destinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy:DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy"
                },
                "destinationGcsOutputFormatAvroApacheAvroCompressionCodecXz": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz:DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz"
                },
                "destinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard:DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2:DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2": {
            "properties": {
                "codec": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ]
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate:DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate": {
            "properties": {
                "codec": {
                    "type": "string"
                },
                "compressionLevel": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ]
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression:DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression": {
            "properties": {
                "codec": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ]
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy:DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy": {
            "properties": {
                "codec": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ]
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz:DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz": {
            "properties": {
                "codec": {
                    "type": "string"
                },
                "compressionLevel": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ]
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard:DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard": {
            "properties": {
                "codec": {
                    "type": "string"
                },
                "compressionLevel": {
                    "type": "integer"
                },
                "includeChecksum": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ]
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValues:DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValues": {
            "properties": {
                "compression": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompression:DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompression"
                },
                "flattening": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "formatType"
            ]
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompression:DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompression": {
            "properties": {
                "destinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzip": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzip:DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzip"
                },
                "destinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompression": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompression:DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompression"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzip:DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzip": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompression:DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompression": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJson:DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJson": {
            "properties": {
                "compression": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompression:DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompression"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "formatType"
            ]
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompression:DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompression": {
            "properties": {
                "destinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip:DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip"
                },
                "destinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression:DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip:DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression:DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsOutputFormatParquetColumnarStorage:DestinationGcsConfigurationFormatDestinationGcsOutputFormatParquetColumnarStorage": {
            "properties": {
                "blockSizeMb": {
                    "type": "integer"
                },
                "compressionCodec": {
                    "type": "string"
                },
                "dictionaryEncoding": {
                    "type": "boolean"
                },
                "dictionaryPageSizeKb": {
                    "type": "integer"
                },
                "formatType": {
                    "type": "string"
                },
                "maxPaddingSizeMb": {
                    "type": "integer"
                },
                "pageSizeKb": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "formatType"
            ]
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvro:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvro": {
            "properties": {
                "compressionCodec": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodec:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodec"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionCodec",
                "formatType"
            ]
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodec:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodec": {
            "properties": {
                "destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecBzip2": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecBzip2:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecBzip2"
                },
                "destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflate": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflate:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflate"
                },
                "destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression"
                },
                "destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecSnappy": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecSnappy:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecSnappy"
                },
                "destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXz": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXz:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXz"
                },
                "destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandard": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandard:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandard"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecBzip2:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecBzip2": {
            "properties": {
                "codec": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ]
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflate:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflate": {
            "properties": {
                "codec": {
                    "type": "string"
                },
                "compressionLevel": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ]
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression": {
            "properties": {
                "codec": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ]
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecSnappy:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecSnappy": {
            "properties": {
                "codec": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ]
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXz:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXz": {
            "properties": {
                "codec": {
                    "type": "string"
                },
                "compressionLevel": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ]
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandard:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandard": {
            "properties": {
                "codec": {
                    "type": "string"
                },
                "compressionLevel": {
                    "type": "integer"
                },
                "includeChecksum": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ]
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValues:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValues": {
            "properties": {
                "compression": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompression:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompression"
                },
                "flattening": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "formatType"
            ]
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompression:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompression": {
            "properties": {
                "destinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip"
                },
                "destinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJson:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJson": {
            "properties": {
                "compression": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "formatType"
            ]
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression": {
            "properties": {
                "destinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip"
                },
                "destinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatParquetColumnarStorage:DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatParquetColumnarStorage": {
            "properties": {
                "blockSizeMb": {
                    "type": "integer"
                },
                "compressionCodec": {
                    "type": "string"
                },
                "dictionaryEncoding": {
                    "type": "boolean"
                },
                "dictionaryPageSizeKb": {
                    "type": "integer"
                },
                "formatType": {
                    "type": "string"
                },
                "maxPaddingSizeMb": {
                    "type": "integer"
                },
                "pageSizeKb": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "formatType"
            ]
        },
        "airbyte:index/DestinationGoogleSheetsConfiguration:DestinationGoogleSheetsConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/DestinationGoogleSheetsConfigurationCredentials:DestinationGoogleSheetsConfigurationCredentials",
                    "description": "Google API Credentials for connecting to Google Sheets and Google Drive APIs\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"google-sheets\"]\n"
                },
                "spreadsheetId": {
                    "type": "string",
                    "description": "The link to your spreadsheet. See \\n\\nthis guide\\n\\n for more details.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "destinationType",
                "spreadsheetId"
            ]
        },
        "airbyte:index/DestinationGoogleSheetsConfigurationCredentials:DestinationGoogleSheetsConfigurationCredentials": {
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "refreshToken"
            ]
        },
        "airbyte:index/DestinationKeenConfiguration:DestinationKeenConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "To get Keen Master API Key, navigate to the Access tab from the left-hand, side panel and check the Project Details section.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"keen\"]\n"
                },
                "inferTimestamp": {
                    "type": "boolean",
                    "description": "Allow connector to guess keen.timestamp value based on the streamed data.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "To get Keen Project ID, navigate to the Access tab from the left-hand, side panel and check the Project Details section.\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "destinationType",
                "projectId"
            ]
        },
        "airbyte:index/DestinationKinesisConfiguration:DestinationKinesisConfiguration": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Generate the AWS Access Key for current user.\n"
                },
                "bufferSize": {
                    "type": "integer",
                    "description": "Buffer size for storing kinesis records before being batch streamed.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"kinesis\"]\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "AWS Kinesis endpoint.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The AWS Private Key - a string of numbers and letters that are unique for each account, also known as a \"recovery phrase\".\n"
                },
                "region": {
                    "type": "string",
                    "description": "AWS region. Your account determines the Regions that are available to you.\n"
                },
                "shardCount": {
                    "type": "integer",
                    "description": "Number of shards to which the data should be streamed.\n"
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "bufferSize",
                "destinationType",
                "endpoint",
                "privateKey",
                "region",
                "shardCount"
            ]
        },
        "airbyte:index/DestinationLangchainConfiguration:DestinationLangchainConfiguration": {
            "properties": {
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"langchain\"]\n"
                },
                "embedding": {
                    "$ref": "#/types/airbyte:index/DestinationLangchainConfigurationEmbedding:DestinationLangchainConfigurationEmbedding",
                    "description": "Embedding configuration\n"
                },
                "indexing": {
                    "$ref": "#/types/airbyte:index/DestinationLangchainConfigurationIndexing:DestinationLangchainConfigurationIndexing",
                    "description": "Indexing configuration\n"
                },
                "processing": {
                    "$ref": "#/types/airbyte:index/DestinationLangchainConfigurationProcessing:DestinationLangchainConfigurationProcessing"
                }
            },
            "type": "object",
            "required": [
                "destinationType",
                "embedding",
                "indexing",
                "processing"
            ]
        },
        "airbyte:index/DestinationLangchainConfigurationEmbedding:DestinationLangchainConfigurationEmbedding": {
            "properties": {
                "destinationLangchainEmbeddingFake": {
                    "$ref": "#/types/airbyte:index/DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingFake:DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingFake"
                },
                "destinationLangchainEmbeddingOpenAi": {
                    "$ref": "#/types/airbyte:index/DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingOpenAi:DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingOpenAi"
                },
                "destinationLangchainUpdateEmbeddingFake": {
                    "$ref": "#/types/airbyte:index/DestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingFake:DestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingFake"
                },
                "destinationLangchainUpdateEmbeddingOpenAi": {
                    "$ref": "#/types/airbyte:index/DestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingOpenAi:DestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingOpenAi"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingFake:DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingFake": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingOpenAi:DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingOpenAi": {
            "properties": {
                "mode": {
                    "type": "string"
                },
                "openaiKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "openaiKey"
            ]
        },
        "airbyte:index/DestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingFake:DestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingFake": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingOpenAi:DestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingOpenAi": {
            "properties": {
                "mode": {
                    "type": "string"
                },
                "openaiKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "openaiKey"
            ]
        },
        "airbyte:index/DestinationLangchainConfigurationIndexing:DestinationLangchainConfigurationIndexing": {
            "properties": {
                "destinationLangchainIndexingChromaLocalPersistance": {
                    "$ref": "#/types/airbyte:index/DestinationLangchainConfigurationIndexingDestinationLangchainIndexingChromaLocalPersistance:DestinationLangchainConfigurationIndexingDestinationLangchainIndexingChromaLocalPersistance"
                },
                "destinationLangchainIndexingDocArrayHnswSearch": {
                    "$ref": "#/types/airbyte:index/DestinationLangchainConfigurationIndexingDestinationLangchainIndexingDocArrayHnswSearch:DestinationLangchainConfigurationIndexingDestinationLangchainIndexingDocArrayHnswSearch"
                },
                "destinationLangchainIndexingPinecone": {
                    "$ref": "#/types/airbyte:index/DestinationLangchainConfigurationIndexingDestinationLangchainIndexingPinecone:DestinationLangchainConfigurationIndexingDestinationLangchainIndexingPinecone"
                },
                "destinationLangchainUpdateIndexingChromaLocalPersistance": {
                    "$ref": "#/types/airbyte:index/DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingChromaLocalPersistance:DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingChromaLocalPersistance"
                },
                "destinationLangchainUpdateIndexingDocArrayHnswSearch": {
                    "$ref": "#/types/airbyte:index/DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingDocArrayHnswSearch:DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingDocArrayHnswSearch"
                },
                "destinationLangchainUpdateIndexingPinecone": {
                    "$ref": "#/types/airbyte:index/DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingPinecone:DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingPinecone"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationLangchainConfigurationIndexingDestinationLangchainIndexingChromaLocalPersistance:DestinationLangchainConfigurationIndexingDestinationLangchainIndexingChromaLocalPersistance": {
            "properties": {
                "collectionName": {
                    "type": "string"
                },
                "destinationPath": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "destinationPath"
            ]
        },
        "airbyte:index/DestinationLangchainConfigurationIndexingDestinationLangchainIndexingDocArrayHnswSearch:DestinationLangchainConfigurationIndexingDestinationLangchainIndexingDocArrayHnswSearch": {
            "properties": {
                "destinationPath": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "destinationPath"
            ]
        },
        "airbyte:index/DestinationLangchainConfigurationIndexingDestinationLangchainIndexingPinecone:DestinationLangchainConfigurationIndexingDestinationLangchainIndexingPinecone": {
            "properties": {
                "index": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "pineconeEnvironment": {
                    "type": "string"
                },
                "pineconeKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "index",
                "pineconeEnvironment",
                "pineconeKey"
            ]
        },
        "airbyte:index/DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingChromaLocalPersistance:DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingChromaLocalPersistance": {
            "properties": {
                "collectionName": {
                    "type": "string"
                },
                "destinationPath": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "destinationPath"
            ]
        },
        "airbyte:index/DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingDocArrayHnswSearch:DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingDocArrayHnswSearch": {
            "properties": {
                "destinationPath": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "destinationPath"
            ]
        },
        "airbyte:index/DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingPinecone:DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingPinecone": {
            "properties": {
                "index": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "pineconeEnvironment": {
                    "type": "string"
                },
                "pineconeKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "index",
                "pineconeEnvironment",
                "pineconeKey"
            ]
        },
        "airbyte:index/DestinationLangchainConfigurationProcessing:DestinationLangchainConfigurationProcessing": {
            "properties": {
                "chunkOverlap": {
                    "type": "integer"
                },
                "chunkSize": {
                    "type": "integer"
                },
                "textFields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "chunkSize",
                "textFields"
            ]
        },
        "airbyte:index/DestinationMSsqlConfiguration:DestinationMSsqlConfiguration": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The name of the MSSQL database.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"mssql\"]\n"
                },
                "host": {
                    "type": "string",
                    "description": "The host name of the MSSQL database.\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '\u0026'. (example: key1=value1\u0026key2=value2\u0026key3=value3).\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password associated with this username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port of the MSSQL database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The default schema tables are written to if the source does not specify a namespace. The usual value for this field is \"public\".\n"
                },
                "sslMethod": {
                    "$ref": "#/types/airbyte:index/DestinationMSsqlConfigurationSslMethod:DestinationMSsqlConfigurationSslMethod",
                    "description": "The encryption method which is used to communicate with the database.\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/DestinationMSsqlConfigurationTunnelMethod:DestinationMSsqlConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username which is used to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "destinationType",
                "host",
                "port",
                "schema",
                "username"
            ]
        },
        "airbyte:index/DestinationMSsqlConfigurationSslMethod:DestinationMSsqlConfigurationSslMethod": {
            "properties": {
                "destinationMssqlSslMethodEncryptedTrustServerCertificate": {
                    "$ref": "#/types/airbyte:index/DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedTrustServerCertificate:DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedTrustServerCertificate"
                },
                "destinationMssqlSslMethodEncryptedVerifyCertificate": {
                    "$ref": "#/types/airbyte:index/DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedVerifyCertificate:DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedVerifyCertificate"
                },
                "destinationMssqlUpdateSslMethodEncryptedTrustServerCertificate": {
                    "$ref": "#/types/airbyte:index/DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedTrustServerCertificate:DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedTrustServerCertificate"
                },
                "destinationMssqlUpdateSslMethodEncryptedVerifyCertificate": {
                    "$ref": "#/types/airbyte:index/DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedVerifyCertificate:DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedVerifyCertificate"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedTrustServerCertificate:DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedTrustServerCertificate": {
            "properties": {
                "sslMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sslMethod"
            ]
        },
        "airbyte:index/DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedVerifyCertificate:DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedVerifyCertificate": {
            "properties": {
                "hostNameInCertificate": {
                    "type": "string"
                },
                "sslMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sslMethod"
            ]
        },
        "airbyte:index/DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedTrustServerCertificate:DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedTrustServerCertificate": {
            "properties": {
                "sslMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sslMethod"
            ]
        },
        "airbyte:index/DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedVerifyCertificate:DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedVerifyCertificate": {
            "properties": {
                "hostNameInCertificate": {
                    "type": "string"
                },
                "sslMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sslMethod"
            ]
        },
        "airbyte:index/DestinationMSsqlConfigurationTunnelMethod:DestinationMSsqlConfigurationTunnelMethod": {
            "properties": {
                "destinationMssqlSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodNoTunnel:DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodNoTunnel"
                },
                "destinationMssqlSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodPasswordAuthentication:DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodPasswordAuthentication"
                },
                "destinationMssqlSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodSshKeyAuthentication:DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodSshKeyAuthentication"
                },
                "destinationMssqlUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodNoTunnel:DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodNoTunnel"
                },
                "destinationMssqlUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodPasswordAuthentication:DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodPasswordAuthentication"
                },
                "destinationMssqlUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodSshKeyAuthentication:DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodNoTunnel:DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodPasswordAuthentication:DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodSshKeyAuthentication:DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodNoTunnel:DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodPasswordAuthentication:DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodSshKeyAuthentication:DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/DestinationMongodbConfiguration:DestinationMongodbConfiguration": {
            "properties": {
                "authType": {
                    "$ref": "#/types/airbyte:index/DestinationMongodbConfigurationAuthType:DestinationMongodbConfigurationAuthType",
                    "description": "Authorization type.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Name of the database.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"mongodb\"]\n"
                },
                "instanceType": {
                    "$ref": "#/types/airbyte:index/DestinationMongodbConfigurationInstanceType:DestinationMongodbConfigurationInstanceType",
                    "description": "MongoDb instance to connect to. For MongoDB Atlas and Replica Set TLS connection is used by default.\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/DestinationMongodbConfigurationTunnelMethod:DestinationMongodbConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "database",
                "destinationType"
            ]
        },
        "airbyte:index/DestinationMongodbConfigurationAuthType:DestinationMongodbConfigurationAuthType": {
            "properties": {
                "destinationMongodbAuthorizationTypeLoginPassword": {
                    "$ref": "#/types/airbyte:index/DestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeLoginPassword:DestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeLoginPassword"
                },
                "destinationMongodbAuthorizationTypeNone": {
                    "$ref": "#/types/airbyte:index/DestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeNone:DestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeNone"
                },
                "destinationMongodbUpdateAuthorizationTypeLoginPassword": {
                    "$ref": "#/types/airbyte:index/DestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeLoginPassword:DestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeLoginPassword"
                },
                "destinationMongodbUpdateAuthorizationTypeNone": {
                    "$ref": "#/types/airbyte:index/DestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeNone:DestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeNone"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeLoginPassword:DestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeLoginPassword": {
            "properties": {
                "authorization": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authorization",
                "password",
                "username"
            ]
        },
        "airbyte:index/DestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeNone:DestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeNone": {
            "properties": {
                "authorization": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authorization"
            ]
        },
        "airbyte:index/DestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeLoginPassword:DestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeLoginPassword": {
            "properties": {
                "authorization": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authorization",
                "password",
                "username"
            ]
        },
        "airbyte:index/DestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeNone:DestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeNone": {
            "properties": {
                "authorization": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authorization"
            ]
        },
        "airbyte:index/DestinationMongodbConfigurationInstanceType:DestinationMongodbConfigurationInstanceType": {
            "properties": {
                "destinationMongodbMongoDbInstanceTypeMongoDbAtlas": {
                    "$ref": "#/types/airbyte:index/DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeMongoDbAtlas:DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeMongoDbAtlas"
                },
                "destinationMongodbMongoDbInstanceTypeReplicaSet": {
                    "$ref": "#/types/airbyte:index/DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeReplicaSet:DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeReplicaSet"
                },
                "destinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance": {
                    "$ref": "#/types/airbyte:index/DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance:DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance"
                },
                "destinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlas": {
                    "$ref": "#/types/airbyte:index/DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlas:DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlas"
                },
                "destinationMongodbUpdateMongoDbInstanceTypeReplicaSet": {
                    "$ref": "#/types/airbyte:index/DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeReplicaSet:DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeReplicaSet"
                },
                "destinationMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance": {
                    "$ref": "#/types/airbyte:index/DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance:DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeMongoDbAtlas:DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeMongoDbAtlas": {
            "properties": {
                "clusterUrl": {
                    "type": "string"
                },
                "instance": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clusterUrl",
                "instance"
            ]
        },
        "airbyte:index/DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeReplicaSet:DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeReplicaSet": {
            "properties": {
                "instance": {
                    "type": "string"
                },
                "replicaSet": {
                    "type": "string"
                },
                "serverAddresses": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "instance",
                "serverAddresses"
            ]
        },
        "airbyte:index/DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance:DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "instance": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "host",
                "instance",
                "port"
            ]
        },
        "airbyte:index/DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlas:DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlas": {
            "properties": {
                "clusterUrl": {
                    "type": "string"
                },
                "instance": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clusterUrl",
                "instance"
            ]
        },
        "airbyte:index/DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeReplicaSet:DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeReplicaSet": {
            "properties": {
                "instance": {
                    "type": "string"
                },
                "replicaSet": {
                    "type": "string"
                },
                "serverAddresses": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "instance",
                "serverAddresses"
            ]
        },
        "airbyte:index/DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance:DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "instance": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "host",
                "instance",
                "port"
            ]
        },
        "airbyte:index/DestinationMongodbConfigurationTunnelMethod:DestinationMongodbConfigurationTunnelMethod": {
            "properties": {
                "destinationMongodbSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodNoTunnel:DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodNoTunnel"
                },
                "destinationMongodbSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodPasswordAuthentication:DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodPasswordAuthentication"
                },
                "destinationMongodbSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodSshKeyAuthentication:DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodSshKeyAuthentication"
                },
                "destinationMongodbUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodNoTunnel:DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodNoTunnel"
                },
                "destinationMongodbUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodPasswordAuthentication:DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodPasswordAuthentication"
                },
                "destinationMongodbUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodSshKeyAuthentication:DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodNoTunnel:DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodPasswordAuthentication:DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodSshKeyAuthentication:DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodNoTunnel:DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodPasswordAuthentication:DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodSshKeyAuthentication:DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/DestinationMysqlConfiguration:DestinationMysqlConfiguration": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"mysql\"]\n"
                },
                "host": {
                    "type": "string",
                    "description": "Hostname of the database.\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '\u0026'. (example: key1=value1\u0026key2=value2\u0026key3=value3).\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password associated with the username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the database.\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/DestinationMysqlConfigurationTunnelMethod:DestinationMysqlConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "destinationType",
                "host",
                "port",
                "username"
            ]
        },
        "airbyte:index/DestinationMysqlConfigurationTunnelMethod:DestinationMysqlConfigurationTunnelMethod": {
            "properties": {
                "destinationMysqlSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodNoTunnel:DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodNoTunnel"
                },
                "destinationMysqlSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodPasswordAuthentication:DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodPasswordAuthentication"
                },
                "destinationMysqlSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodSshKeyAuthentication:DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodSshKeyAuthentication"
                },
                "destinationMysqlUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodNoTunnel:DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodNoTunnel"
                },
                "destinationMysqlUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodPasswordAuthentication:DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodPasswordAuthentication"
                },
                "destinationMysqlUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodSshKeyAuthentication:DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodNoTunnel:DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodPasswordAuthentication:DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodSshKeyAuthentication:DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodNoTunnel:DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodPasswordAuthentication:DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodSshKeyAuthentication:DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/DestinationOracleConfiguration:DestinationOracleConfiguration": {
            "properties": {
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"oracle\"]\n"
                },
                "host": {
                    "type": "string",
                    "description": "The hostname of the database.\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '\u0026'. (example: key1=value1\u0026key2=value2\u0026key3=value3).\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password associated with the username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port of the database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The default schema is used as the target schema for all statements issued from the connection that do not explicitly specify a schema name. The usual value for this field is \"airbyte\".  In Oracle, schemas and users are the same thing, so the \"user\" parameter is used as the login credentials and this is used for the default Airbyte message schema.\n"
                },
                "sid": {
                    "type": "string",
                    "description": "The System Identifier uniquely distinguishes the instance from any other instance on the same computer.\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/DestinationOracleConfigurationTunnelMethod:DestinationOracleConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to access the database. This user must have CREATE USER privileges in the database.\n"
                }
            },
            "type": "object",
            "required": [
                "destinationType",
                "host",
                "port",
                "sid",
                "username"
            ]
        },
        "airbyte:index/DestinationOracleConfigurationTunnelMethod:DestinationOracleConfigurationTunnelMethod": {
            "properties": {
                "destinationOracleSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodNoTunnel:DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodNoTunnel"
                },
                "destinationOracleSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodPasswordAuthentication:DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodPasswordAuthentication"
                },
                "destinationOracleSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodSshKeyAuthentication:DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodSshKeyAuthentication"
                },
                "destinationOracleUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodNoTunnel:DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodNoTunnel"
                },
                "destinationOracleUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodPasswordAuthentication:DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodPasswordAuthentication"
                },
                "destinationOracleUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodSshKeyAuthentication:DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodNoTunnel:DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodPasswordAuthentication:DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodSshKeyAuthentication:DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodNoTunnel:DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodPasswordAuthentication:DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodSshKeyAuthentication:DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/DestinationPostgresConfiguration:DestinationPostgresConfiguration": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"postgres\"]\n"
                },
                "host": {
                    "type": "string",
                    "description": "Hostname of the database.\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '\u0026'. (example: key1=value1\u0026key2=value2\u0026key3=value3).\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password associated with the username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The default schema tables are written to if the source does not specify a namespace. The usual value for this field is \"public\".\n"
                },
                "sslMode": {
                    "$ref": "#/types/airbyte:index/DestinationPostgresConfigurationSslMode:DestinationPostgresConfigurationSslMode",
                    "description": "SSL connection modes.\n\\n\\ndisable\\n\\n - Chose this mode to disable encryption of communication between Airbyte and destination database\n\\n\\nallow\\n\\n - Chose this mode to enable encryption only when required by the source database\n\\n\\nprefer\\n\\n - Chose this mode to allow unencrypted connection only if the source database does not support encryption\n\\n\\nrequire\\n\\n - Chose this mode to always require encryption. If the source database server does not support encryption, connection will fail\n\\n\\nverify-ca\\n\\n - Chose this mode to always require encryption and to verify that the source database server has a valid SSL certificate\n\\n\\nverify-full\\n\\n - This is the most secure mode. Chose this mode to always require encryption and to verify the identity of the source database server\nSee more information - \\n\\n in the docs\\n\\n.\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/DestinationPostgresConfigurationTunnelMethod:DestinationPostgresConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "destinationType",
                "host",
                "port",
                "schema",
                "username"
            ]
        },
        "airbyte:index/DestinationPostgresConfigurationSslMode:DestinationPostgresConfigurationSslMode": {
            "properties": {
                "destinationPostgresSslModesAllow": {
                    "$ref": "#/types/airbyte:index/DestinationPostgresConfigurationSslModeDestinationPostgresSslModesAllow:DestinationPostgresConfigurationSslModeDestinationPostgresSslModesAllow"
                },
                "destinationPostgresSslModesDisable": {
                    "$ref": "#/types/airbyte:index/DestinationPostgresConfigurationSslModeDestinationPostgresSslModesDisable:DestinationPostgresConfigurationSslModeDestinationPostgresSslModesDisable"
                },
                "destinationPostgresSslModesPrefer": {
                    "$ref": "#/types/airbyte:index/DestinationPostgresConfigurationSslModeDestinationPostgresSslModesPrefer:DestinationPostgresConfigurationSslModeDestinationPostgresSslModesPrefer"
                },
                "destinationPostgresSslModesRequire": {
                    "$ref": "#/types/airbyte:index/DestinationPostgresConfigurationSslModeDestinationPostgresSslModesRequire:DestinationPostgresConfigurationSslModeDestinationPostgresSslModesRequire"
                },
                "destinationPostgresSslModesVerifyCa": {
                    "$ref": "#/types/airbyte:index/DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyCa:DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyCa"
                },
                "destinationPostgresSslModesVerifyFull": {
                    "$ref": "#/types/airbyte:index/DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyFull:DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyFull"
                },
                "destinationPostgresUpdateSslModesAllow": {
                    "$ref": "#/types/airbyte:index/DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesAllow:DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesAllow"
                },
                "destinationPostgresUpdateSslModesDisable": {
                    "$ref": "#/types/airbyte:index/DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesDisable:DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesDisable"
                },
                "destinationPostgresUpdateSslModesPrefer": {
                    "$ref": "#/types/airbyte:index/DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesPrefer:DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesPrefer"
                },
                "destinationPostgresUpdateSslModesRequire": {
                    "$ref": "#/types/airbyte:index/DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesRequire:DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesRequire"
                },
                "destinationPostgresUpdateSslModesVerifyCa": {
                    "$ref": "#/types/airbyte:index/DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyCa:DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyCa"
                },
                "destinationPostgresUpdateSslModesVerifyFull": {
                    "$ref": "#/types/airbyte:index/DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyFull:DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyFull"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationPostgresConfigurationSslModeDestinationPostgresSslModesAllow:DestinationPostgresConfigurationSslModeDestinationPostgresSslModesAllow": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/DestinationPostgresConfigurationSslModeDestinationPostgresSslModesDisable:DestinationPostgresConfigurationSslModeDestinationPostgresSslModesDisable": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/DestinationPostgresConfigurationSslModeDestinationPostgresSslModesPrefer:DestinationPostgresConfigurationSslModeDestinationPostgresSslModesPrefer": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/DestinationPostgresConfigurationSslModeDestinationPostgresSslModesRequire:DestinationPostgresConfigurationSslModeDestinationPostgresSslModesRequire": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyCa:DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyCa": {
            "properties": {
                "caCertificate": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "mode"
            ]
        },
        "airbyte:index/DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyFull:DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyFull": {
            "properties": {
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "clientCertificate",
                "clientKey",
                "mode"
            ]
        },
        "airbyte:index/DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesAllow:DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesAllow": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesDisable:DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesDisable": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesPrefer:DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesPrefer": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesRequire:DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesRequire": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyCa:DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyCa": {
            "properties": {
                "caCertificate": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "mode"
            ]
        },
        "airbyte:index/DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyFull:DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyFull": {
            "properties": {
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "clientCertificate",
                "clientKey",
                "mode"
            ]
        },
        "airbyte:index/DestinationPostgresConfigurationTunnelMethod:DestinationPostgresConfigurationTunnelMethod": {
            "properties": {
                "destinationPostgresSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodNoTunnel:DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodNoTunnel"
                },
                "destinationPostgresSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodPasswordAuthentication:DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodPasswordAuthentication"
                },
                "destinationPostgresSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodSshKeyAuthentication:DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodSshKeyAuthentication"
                },
                "destinationPostgresUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodNoTunnel:DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodNoTunnel"
                },
                "destinationPostgresUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodPasswordAuthentication:DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodPasswordAuthentication"
                },
                "destinationPostgresUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodSshKeyAuthentication:DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodNoTunnel:DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodPasswordAuthentication:DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodSshKeyAuthentication:DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodNoTunnel:DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodPasswordAuthentication:DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodSshKeyAuthentication:DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/DestinationPubsubConfiguration:DestinationPubsubConfiguration": {
            "properties": {
                "batchingDelayThreshold": {
                    "type": "integer",
                    "description": "Number of ms before the buffer is flushed\n"
                },
                "batchingElementCountThreshold": {
                    "type": "integer",
                    "description": "Number of messages before the buffer is flushed\n"
                },
                "batchingEnabled": {
                    "type": "boolean",
                    "description": "If TRUE messages will be buffered instead of sending them one by one\n"
                },
                "batchingRequestBytesThreshold": {
                    "type": "integer",
                    "description": "Number of bytes before the buffer is flushed\n"
                },
                "credentialsJson": {
                    "type": "string",
                    "description": "The contents of the JSON service account key. Check out the \\n\\ndocs\\n\\n if you need help generating this key.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"pubsub\"]\n"
                },
                "orderingEnabled": {
                    "type": "boolean",
                    "description": "If TRUE PubSub publisher will have \\n\\nmessage ordering\\n\\n enabled. Every message will have an ordering key of stream\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The GCP project ID for the project containing the target PubSub.\n"
                },
                "topicId": {
                    "type": "string",
                    "description": "The PubSub topic ID in the given GCP project ID.\n"
                }
            },
            "type": "object",
            "required": [
                "batchingEnabled",
                "credentialsJson",
                "destinationType",
                "orderingEnabled",
                "projectId",
                "topicId"
            ]
        },
        "airbyte:index/DestinationRedisConfiguration:DestinationRedisConfiguration": {
            "properties": {
                "cacheType": {
                    "type": "string",
                    "description": "must be one of [\"hash\"]\nRedis cache type to store data in.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"redis\"]\n"
                },
                "host": {
                    "type": "string",
                    "description": "Redis host to connect to.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password associated with Redis.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of Redis.\n"
                },
                "ssl": {
                    "type": "boolean",
                    "description": "Indicates whether SSL encryption protocol will be used to connect to Redis. It is recommended to use SSL connection if possible.\n"
                },
                "sslMode": {
                    "$ref": "#/types/airbyte:index/DestinationRedisConfigurationSslMode:DestinationRedisConfigurationSslMode",
                    "description": "SSL connection modes.\n\\n\\n\\n\\nverify-full\\n\\n - This is the most secure mode. Always require encryption and verifies the identity of the source database server\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/DestinationRedisConfigurationTunnelMethod:DestinationRedisConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username associated with Redis.\n"
                }
            },
            "type": "object",
            "required": [
                "cacheType",
                "destinationType",
                "host",
                "port",
                "username"
            ]
        },
        "airbyte:index/DestinationRedisConfigurationSslMode:DestinationRedisConfigurationSslMode": {
            "properties": {
                "destinationRedisSslModesDisable": {
                    "$ref": "#/types/airbyte:index/DestinationRedisConfigurationSslModeDestinationRedisSslModesDisable:DestinationRedisConfigurationSslModeDestinationRedisSslModesDisable"
                },
                "destinationRedisSslModesVerifyFull": {
                    "$ref": "#/types/airbyte:index/DestinationRedisConfigurationSslModeDestinationRedisSslModesVerifyFull:DestinationRedisConfigurationSslModeDestinationRedisSslModesVerifyFull"
                },
                "destinationRedisUpdateSslModesDisable": {
                    "$ref": "#/types/airbyte:index/DestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesDisable:DestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesDisable"
                },
                "destinationRedisUpdateSslModesVerifyFull": {
                    "$ref": "#/types/airbyte:index/DestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesVerifyFull:DestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesVerifyFull"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationRedisConfigurationSslModeDestinationRedisSslModesDisable:DestinationRedisConfigurationSslModeDestinationRedisSslModesDisable": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/DestinationRedisConfigurationSslModeDestinationRedisSslModesVerifyFull:DestinationRedisConfigurationSslModeDestinationRedisSslModesVerifyFull": {
            "properties": {
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "clientCertificate",
                "clientKey",
                "mode"
            ]
        },
        "airbyte:index/DestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesDisable:DestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesDisable": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/DestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesVerifyFull:DestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesVerifyFull": {
            "properties": {
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "clientCertificate",
                "clientKey",
                "mode"
            ]
        },
        "airbyte:index/DestinationRedisConfigurationTunnelMethod:DestinationRedisConfigurationTunnelMethod": {
            "properties": {
                "destinationRedisSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodNoTunnel:DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodNoTunnel"
                },
                "destinationRedisSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodPasswordAuthentication:DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodPasswordAuthentication"
                },
                "destinationRedisSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodSshKeyAuthentication:DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodSshKeyAuthentication"
                },
                "destinationRedisUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodNoTunnel:DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodNoTunnel"
                },
                "destinationRedisUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodPasswordAuthentication:DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodPasswordAuthentication"
                },
                "destinationRedisUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodSshKeyAuthentication:DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodNoTunnel:DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodPasswordAuthentication:DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodSshKeyAuthentication:DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodNoTunnel:DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodPasswordAuthentication:DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodSshKeyAuthentication:DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/DestinationRedshiftConfiguration:DestinationRedshiftConfiguration": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"redshift\"]\n"
                },
                "host": {
                    "type": "string",
                    "description": "Host Endpoint of the Redshift Cluster (must include the cluster-id, region and end with .redshift.amazonaws.com)\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '\u0026'. (example: key1=value1\u0026key2=value2\u0026key3=value3).\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password associated with the username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The default schema tables are written to if the source does not specify a namespace. Unless specifically configured, the usual value for this field is \"public\".\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/DestinationRedshiftConfigurationTunnelMethod:DestinationRedshiftConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                },
                "uploadingMethod": {
                    "$ref": "#/types/airbyte:index/DestinationRedshiftConfigurationUploadingMethod:DestinationRedshiftConfigurationUploadingMethod",
                    "description": "The method how the data will be uploaded to the database.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "destinationType",
                "host",
                "password",
                "port",
                "schema",
                "username"
            ]
        },
        "airbyte:index/DestinationRedshiftConfigurationTunnelMethod:DestinationRedshiftConfigurationTunnelMethod": {
            "properties": {
                "destinationRedshiftSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodNoTunnel:DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodNoTunnel"
                },
                "destinationRedshiftSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodPasswordAuthentication:DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodPasswordAuthentication"
                },
                "destinationRedshiftSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodSshKeyAuthentication:DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodSshKeyAuthentication"
                },
                "destinationRedshiftUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodNoTunnel:DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodNoTunnel"
                },
                "destinationRedshiftUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodPasswordAuthentication:DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodPasswordAuthentication"
                },
                "destinationRedshiftUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodSshKeyAuthentication:DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodNoTunnel:DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodPasswordAuthentication:DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodSshKeyAuthentication:DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodNoTunnel:DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodPasswordAuthentication:DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodSshKeyAuthentication:DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/DestinationRedshiftConfigurationUploadingMethod:DestinationRedshiftConfigurationUploadingMethod": {
            "properties": {
                "destinationRedshiftUpdateUploadingMethodS3Staging": {
                    "$ref": "#/types/airbyte:index/DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3Staging:DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3Staging"
                },
                "destinationRedshiftUpdateUploadingMethodStandard": {
                    "$ref": "#/types/airbyte:index/DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodStandard:DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodStandard"
                },
                "destinationRedshiftUploadingMethodS3Staging": {
                    "$ref": "#/types/airbyte:index/DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3Staging:DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3Staging"
                },
                "destinationRedshiftUploadingMethodStandard": {
                    "$ref": "#/types/airbyte:index/DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodStandard:DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodStandard"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3Staging:DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3Staging": {
            "properties": {
                "accessKeyId": {
                    "type": "string"
                },
                "encryption": {
                    "$ref": "#/types/airbyte:index/DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryption:DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryption"
                },
                "fileBufferCount": {
                    "type": "integer"
                },
                "fileNamePattern": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "purgeStagingData": {
                    "type": "boolean"
                },
                "s3BucketName": {
                    "type": "string"
                },
                "s3BucketPath": {
                    "type": "string"
                },
                "s3BucketRegion": {
                    "type": "string"
                },
                "secretAccessKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessKeyId",
                "method",
                "s3BucketName",
                "s3BucketRegion",
                "secretAccessKey"
            ]
        },
        "airbyte:index/DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryption:DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryption": {
            "properties": {
                "destinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption": {
                    "$ref": "#/types/airbyte:index/DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption:DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption"
                },
                "destinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryption": {
                    "$ref": "#/types/airbyte:index/DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryption:DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryption"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption:DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption": {
            "properties": {
                "encryptionType": {
                    "type": "string"
                },
                "keyEncryptingKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "encryptionType"
            ]
        },
        "airbyte:index/DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryption:DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryption": {
            "properties": {
                "encryptionType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "encryptionType"
            ]
        },
        "airbyte:index/DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodStandard:DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodStandard": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ]
        },
        "airbyte:index/DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3Staging:DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3Staging": {
            "properties": {
                "accessKeyId": {
                    "type": "string"
                },
                "encryption": {
                    "$ref": "#/types/airbyte:index/DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryption:DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryption"
                },
                "fileBufferCount": {
                    "type": "integer"
                },
                "fileNamePattern": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "purgeStagingData": {
                    "type": "boolean"
                },
                "s3BucketName": {
                    "type": "string"
                },
                "s3BucketPath": {
                    "type": "string"
                },
                "s3BucketRegion": {
                    "type": "string"
                },
                "secretAccessKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessKeyId",
                "method",
                "s3BucketName",
                "s3BucketRegion",
                "secretAccessKey"
            ]
        },
        "airbyte:index/DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryption:DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryption": {
            "properties": {
                "destinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption": {
                    "$ref": "#/types/airbyte:index/DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption:DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption"
                },
                "destinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption": {
                    "$ref": "#/types/airbyte:index/DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption:DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption:DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption": {
            "properties": {
                "encryptionType": {
                    "type": "string"
                },
                "keyEncryptingKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "encryptionType"
            ]
        },
        "airbyte:index/DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption:DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption": {
            "properties": {
                "encryptionType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "encryptionType"
            ]
        },
        "airbyte:index/DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodStandard:DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodStandard": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ]
        },
        "airbyte:index/DestinationS3Configuration:DestinationS3Configuration": {
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The access key ID to access the S3 bucket. Airbyte requires Read and Write permissions to the given bucket. Read more \\n\\nhere\\n\\n.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"s3\"]\n"
                },
                "fileNamePattern": {
                    "type": "string",
                    "description": "The pattern allows you to set the file-name format for the S3 staging file(s)\n"
                },
                "format": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormat:DestinationS3ConfigurationFormat",
                    "description": "Format of the data output. See \\n\\nhere\\n\\n for more details\n"
                },
                "s3BucketName": {
                    "type": "string",
                    "description": "The name of the S3 bucket. Read more \\n\\nhere\\n\\n.\n"
                },
                "s3BucketPath": {
                    "type": "string",
                    "description": "Directory under the S3 bucket where data will be written. Read more \\n\\nhere\\n\\n\n"
                },
                "s3BucketRegion": {
                    "type": "string",
                    "description": "must be one of [\"\", \"us-east-1\", \"us-east-2\", \"us-west-1\", \"us-west-2\", \"af-south-1\", \"ap-east-1\", \"ap-south-1\", \"ap-northeast-1\", \"ap-northeast-2\", \"ap-northeast-3\", \"ap-southeast-1\", \"ap-southeast-2\", \"ca-central-1\", \"cn-north-1\", \"cn-northwest-1\", \"eu-central-1\", \"eu-north-1\", \"eu-south-1\", \"eu-west-1\", \"eu-west-2\", \"eu-west-3\", \"sa-east-1\", \"me-south-1\", \"us-gov-east-1\", \"us-gov-west-1\"]\nThe region of the S3 bucket. See \\n\\nhere\\n\\n for all region codes.\n"
                },
                "s3Endpoint": {
                    "type": "string",
                    "description": "Your S3 endpoint url. Read more \\n\\nhere\\n\\n\n"
                },
                "s3PathFormat": {
                    "type": "string",
                    "description": "Format string on how data will be organized inside the S3 bucket directory. Read more \\n\\nhere\\n\\n\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The corresponding secret to the access key ID. Read more \\n\\nhere\\n\\n\n"
                }
            },
            "type": "object",
            "required": [
                "destinationType",
                "format",
                "s3BucketName",
                "s3BucketPath",
                "s3BucketRegion"
            ]
        },
        "airbyte:index/DestinationS3ConfigurationFormat:DestinationS3ConfigurationFormat": {
            "properties": {
                "destinationS3OutputFormatAvroApacheAvro": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvro:DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvro"
                },
                "destinationS3OutputFormatCsvCommaSeparatedValues": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValues:DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValues"
                },
                "destinationS3OutputFormatJsonLinesNewlineDelimitedJson": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJson:DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJson"
                },
                "destinationS3OutputFormatParquetColumnarStorage": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatParquetColumnarStorage:DestinationS3ConfigurationFormatDestinationS3OutputFormatParquetColumnarStorage"
                },
                "destinationS3UpdateOutputFormatAvroApacheAvro": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvro:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvro"
                },
                "destinationS3UpdateOutputFormatCsvCommaSeparatedValues": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValues:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValues"
                },
                "destinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJson": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJson:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJson"
                },
                "destinationS3UpdateOutputFormatParquetColumnarStorage": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatParquetColumnarStorage:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatParquetColumnarStorage"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvro:DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvro": {
            "properties": {
                "compressionCodec": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodec:DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodec"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionCodec",
                "formatType"
            ]
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodec:DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodec": {
            "properties": {
                "destinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2:DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2"
                },
                "destinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate:DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate"
                },
                "destinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression:DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression"
                },
                "destinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy:DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy"
                },
                "destinationS3OutputFormatAvroApacheAvroCompressionCodecXz": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecXz:DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecXz"
                },
                "destinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard:DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2:DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2": {
            "properties": {
                "codec": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ]
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate:DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate": {
            "properties": {
                "codec": {
                    "type": "string"
                },
                "compressionLevel": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "codec",
                "compressionLevel"
            ]
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression:DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression": {
            "properties": {
                "codec": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ]
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy:DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy": {
            "properties": {
                "codec": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ]
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecXz:DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecXz": {
            "properties": {
                "codec": {
                    "type": "string"
                },
                "compressionLevel": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "codec",
                "compressionLevel"
            ]
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard:DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard": {
            "properties": {
                "codec": {
                    "type": "string"
                },
                "compressionLevel": {
                    "type": "integer"
                },
                "includeChecksum": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "codec",
                "compressionLevel"
            ]
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValues:DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValues": {
            "properties": {
                "compression": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompression:DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompression"
                },
                "flattening": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "flattening",
                "formatType"
            ]
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompression:DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompression": {
            "properties": {
                "destinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzip": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzip:DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzip"
                },
                "destinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompression": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompression:DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompression"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzip:DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzip": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompression:DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompression": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJson:DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJson": {
            "properties": {
                "compression": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompression:DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompression"
                },
                "flattening": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "formatType"
            ]
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompression:DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompression": {
            "properties": {
                "destinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip:DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip"
                },
                "destinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression:DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip:DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression:DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3OutputFormatParquetColumnarStorage:DestinationS3ConfigurationFormatDestinationS3OutputFormatParquetColumnarStorage": {
            "properties": {
                "blockSizeMb": {
                    "type": "integer"
                },
                "compressionCodec": {
                    "type": "string"
                },
                "dictionaryEncoding": {
                    "type": "boolean"
                },
                "dictionaryPageSizeKb": {
                    "type": "integer"
                },
                "formatType": {
                    "type": "string"
                },
                "maxPaddingSizeMb": {
                    "type": "integer"
                },
                "pageSizeKb": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "formatType"
            ]
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvro:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvro": {
            "properties": {
                "compressionCodec": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodec:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodec"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionCodec",
                "formatType"
            ]
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodec:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodec": {
            "properties": {
                "destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecBzip2": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecBzip2:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecBzip2"
                },
                "destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflate": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflate:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflate"
                },
                "destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression"
                },
                "destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecSnappy": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecSnappy:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecSnappy"
                },
                "destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXz": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXz:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXz"
                },
                "destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandard": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandard:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandard"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecBzip2:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecBzip2": {
            "properties": {
                "codec": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ]
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflate:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflate": {
            "properties": {
                "codec": {
                    "type": "string"
                },
                "compressionLevel": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "codec",
                "compressionLevel"
            ]
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression": {
            "properties": {
                "codec": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ]
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecSnappy:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecSnappy": {
            "properties": {
                "codec": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ]
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXz:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXz": {
            "properties": {
                "codec": {
                    "type": "string"
                },
                "compressionLevel": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "codec",
                "compressionLevel"
            ]
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandard:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandard": {
            "properties": {
                "codec": {
                    "type": "string"
                },
                "compressionLevel": {
                    "type": "integer"
                },
                "includeChecksum": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "codec",
                "compressionLevel"
            ]
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValues:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValues": {
            "properties": {
                "compression": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompression:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompression"
                },
                "flattening": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "flattening",
                "formatType"
            ]
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompression:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompression": {
            "properties": {
                "destinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip"
                },
                "destinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJson:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJson": {
            "properties": {
                "compression": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression"
                },
                "flattening": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "formatType"
            ]
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression": {
            "properties": {
                "destinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip"
                },
                "destinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression": {
                    "$ref": "#/types/airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatParquetColumnarStorage:DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatParquetColumnarStorage": {
            "properties": {
                "blockSizeMb": {
                    "type": "integer"
                },
                "compressionCodec": {
                    "type": "string"
                },
                "dictionaryEncoding": {
                    "type": "boolean"
                },
                "dictionaryPageSizeKb": {
                    "type": "integer"
                },
                "formatType": {
                    "type": "string"
                },
                "maxPaddingSizeMb": {
                    "type": "integer"
                },
                "pageSizeKb": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "formatType"
            ]
        },
        "airbyte:index/DestinationS3GlueConfiguration:DestinationS3GlueConfiguration": {
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The access key ID to access the S3 bucket. Airbyte requires Read and Write permissions to the given bucket. Read more \\n\\nhere\\n\\n.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"s3-glue\"]\n"
                },
                "fileNamePattern": {
                    "type": "string",
                    "description": "The pattern allows you to set the file-name format for the S3 staging file(s)\n"
                },
                "format": {
                    "$ref": "#/types/airbyte:index/DestinationS3GlueConfigurationFormat:DestinationS3GlueConfigurationFormat",
                    "description": "Format of the data output. See \\n\\nhere\\n\\n for more details\n"
                },
                "glueDatabase": {
                    "type": "string",
                    "description": "Name of the glue database for creating the tables, leave blank if no integration\n"
                },
                "glueSerializationLibrary": {
                    "type": "string",
                    "description": "must be one of [\"org.openx.data.jsonserde.JsonSerDe\", \"org.apache.hive.hcatalog.data.JsonSerDe\"]\nThe library that your query engine will use for reading and writing data in your lake.\n"
                },
                "s3BucketName": {
                    "type": "string",
                    "description": "The name of the S3 bucket. Read more \\n\\nhere\\n\\n.\n"
                },
                "s3BucketPath": {
                    "type": "string",
                    "description": "Directory under the S3 bucket where data will be written. Read more \\n\\nhere\\n\\n\n"
                },
                "s3BucketRegion": {
                    "type": "string",
                    "description": "must be one of [\"\", \"us-east-1\", \"us-east-2\", \"us-west-1\", \"us-west-2\", \"af-south-1\", \"ap-east-1\", \"ap-south-1\", \"ap-northeast-1\", \"ap-northeast-2\", \"ap-northeast-3\", \"ap-southeast-1\", \"ap-southeast-2\", \"ca-central-1\", \"cn-north-1\", \"cn-northwest-1\", \"eu-central-1\", \"eu-north-1\", \"eu-south-1\", \"eu-west-1\", \"eu-west-2\", \"eu-west-3\", \"sa-east-1\", \"me-south-1\", \"us-gov-east-1\", \"us-gov-west-1\"]\nThe region of the S3 bucket. See \\n\\nhere\\n\\n for all region codes.\n"
                },
                "s3Endpoint": {
                    "type": "string",
                    "description": "Your S3 endpoint url. Read more \\n\\nhere\\n\\n\n"
                },
                "s3PathFormat": {
                    "type": "string",
                    "description": "Format string on how data will be organized inside the S3 bucket directory. Read more \\n\\nhere\\n\\n\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The corresponding secret to the access key ID. Read more \\n\\nhere\\n\\n\n"
                }
            },
            "type": "object",
            "required": [
                "destinationType",
                "format",
                "glueDatabase",
                "glueSerializationLibrary",
                "s3BucketName",
                "s3BucketPath",
                "s3BucketRegion"
            ]
        },
        "airbyte:index/DestinationS3GlueConfigurationFormat:DestinationS3GlueConfigurationFormat": {
            "properties": {
                "destinationS3GlueOutputFormatJsonLinesNewlineDelimitedJson": {
                    "$ref": "#/types/airbyte:index/DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJson:DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJson"
                },
                "destinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJson": {
                    "$ref": "#/types/airbyte:index/DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJson:DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJson"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJson:DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJson": {
            "properties": {
                "compression": {
                    "$ref": "#/types/airbyte:index/DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompression:DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompression"
                },
                "flattening": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "formatType"
            ]
        },
        "airbyte:index/DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompression:DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompression": {
            "properties": {
                "destinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip": {
                    "$ref": "#/types/airbyte:index/DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip:DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip"
                },
                "destinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression": {
                    "$ref": "#/types/airbyte:index/DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression:DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip:DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression:DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJson:DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJson": {
            "properties": {
                "compression": {
                    "$ref": "#/types/airbyte:index/DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression:DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression"
                },
                "flattening": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "formatType"
            ]
        },
        "airbyte:index/DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression:DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression": {
            "properties": {
                "destinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip": {
                    "$ref": "#/types/airbyte:index/DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip:DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip"
                },
                "destinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression": {
                    "$ref": "#/types/airbyte:index/DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression:DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip:DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression:DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationSftpJsonConfiguration:DestinationSftpJsonConfiguration": {
            "properties": {
                "destinationPath": {
                    "type": "string",
                    "description": "Path to the directory where json files will be written.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"sftp-json\"]\n"
                },
                "host": {
                    "type": "string",
                    "description": "Hostname of the SFTP server.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password associated with the username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the SFTP server.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use to access the SFTP server.\n"
                }
            },
            "type": "object",
            "required": [
                "destinationPath",
                "destinationType",
                "host",
                "password",
                "username"
            ]
        },
        "airbyte:index/DestinationSnowflakeConfiguration:DestinationSnowflakeConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/DestinationSnowflakeConfigurationCredentials:DestinationSnowflakeConfigurationCredentials"
                },
                "database": {
                    "type": "string",
                    "description": "Enter the name of the \\n\\ndatabase\\n\\n you want to sync data into\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"snowflake\"]\n"
                },
                "host": {
                    "type": "string",
                    "description": "Enter your Snowflake account's \\n\\nlocator\\n\\n (in the format \\n\\n.\\n\\n.\\n\\n.snowflakecomputing.com)\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Enter the additional properties to pass to the JDBC URL string when connecting to the database (formatted as key=value pairs separated by the symbol \u0026). Example: key1=value1\u0026key2=value2\u0026key3=value3\n"
                },
                "rawDataSchema": {
                    "type": "string",
                    "description": "(Beta) The schema to write raw tables into\n"
                },
                "role": {
                    "type": "string",
                    "description": "Enter the \\n\\nrole\\n\\n that you want to use to access Snowflake\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Enter the name of the default \\n\\nschema\\n\\n\n"
                },
                "use1s1tFormat": {
                    "type": "boolean",
                    "description": "(Beta) Use \\n\\nDestinations V2\\n\\n. Contact Airbyte Support to participate in the beta program.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Enter the name of the user you want to use to access the database\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "Enter the name of the \\n\\nwarehouse\\n\\n that you want to sync data into\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "destinationType",
                "host",
                "role",
                "schema",
                "username",
                "warehouse"
            ]
        },
        "airbyte:index/DestinationSnowflakeConfigurationCredentials:DestinationSnowflakeConfigurationCredentials": {
            "properties": {
                "destinationSnowflakeAuthorizationMethodKeyPairAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthentication:DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthentication"
                },
                "destinationSnowflakeAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20:DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20"
                },
                "destinationSnowflakeAuthorizationMethodUsernameAndPassword": {
                    "$ref": "#/types/airbyte:index/DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPassword:DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPassword"
                },
                "destinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication:DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication"
                },
                "destinationSnowflakeUpdateAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20:DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20"
                },
                "destinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword": {
                    "$ref": "#/types/airbyte:index/DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword:DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthentication:DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthentication": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "privateKey": {
                    "type": "string"
                },
                "privateKeyPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "privateKey"
            ]
        },
        "airbyte:index/DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20:DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "refreshToken"
            ]
        },
        "airbyte:index/DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPassword:DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPassword": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "password"
            ]
        },
        "airbyte:index/DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication:DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "privateKey": {
                    "type": "string"
                },
                "privateKeyPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "privateKey"
            ]
        },
        "airbyte:index/DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20:DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "refreshToken"
            ]
        },
        "airbyte:index/DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword:DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "password"
            ]
        },
        "airbyte:index/DestinationTimeplusConfiguration:DestinationTimeplusConfiguration": {
            "properties": {
                "apikey": {
                    "type": "string",
                    "description": "Personal API key\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"timeplus\"]\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "Timeplus workspace endpoint\n"
                }
            },
            "type": "object",
            "required": [
                "apikey",
                "destinationType",
                "endpoint"
            ]
        },
        "airbyte:index/DestinationTypesenseConfiguration:DestinationTypesenseConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Typesense API Key\n"
                },
                "batchSize": {
                    "type": "string",
                    "description": "How many documents should be imported together. Default 1000\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"typesense\"]\n"
                },
                "host": {
                    "type": "string",
                    "description": "Hostname of the Typesense instance without protocol.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Port of the Typesense instance. Ex: 8108, 80, 443. Default is 443\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol of the Typesense instance. Ex: http or https. Default is https\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "destinationType",
                "host"
            ]
        },
        "airbyte:index/DestinationVerticaConfiguration:DestinationVerticaConfiguration": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"vertica\"]\n"
                },
                "host": {
                    "type": "string",
                    "description": "Hostname of the database.\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '\u0026'. (example: key1=value1\u0026key2=value2\u0026key3=value3).\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password associated with the username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Schema for vertica destination\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/DestinationVerticaConfigurationTunnelMethod:DestinationVerticaConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "destinationType",
                "host",
                "port",
                "schema",
                "username"
            ]
        },
        "airbyte:index/DestinationVerticaConfigurationTunnelMethod:DestinationVerticaConfigurationTunnelMethod": {
            "properties": {
                "destinationVerticaSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodNoTunnel:DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodNoTunnel"
                },
                "destinationVerticaSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodPasswordAuthentication:DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodPasswordAuthentication"
                },
                "destinationVerticaSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodSshKeyAuthentication:DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodSshKeyAuthentication"
                },
                "destinationVerticaUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodNoTunnel:DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodNoTunnel"
                },
                "destinationVerticaUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodPasswordAuthentication:DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodPasswordAuthentication"
                },
                "destinationVerticaUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodSshKeyAuthentication:DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object"
        },
        "airbyte:index/DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodNoTunnel:DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodPasswordAuthentication:DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodSshKeyAuthentication:DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodNoTunnel:DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodPasswordAuthentication:DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodSshKeyAuthentication:DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/DestinationXataConfiguration:DestinationXataConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key to connect.\n"
                },
                "dbUrl": {
                    "type": "string",
                    "description": "URL pointing to your workspace.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"xata\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "dbUrl",
                "destinationType"
            ]
        },
        "airbyte:index/SourceAhaConfiguration:SourceAhaConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"aha\"]\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType",
                "url"
            ]
        },
        "airbyte:index/SourceAircallConfiguration:SourceAircallConfiguration": {
            "properties": {
                "apiId": {
                    "type": "string",
                    "description": "App ID found at settings https://dashboard.aircall.io/integrations/api-keys\n"
                },
                "apiToken": {
                    "type": "string",
                    "description": "App token found at settings (Ref- https://dashboard.aircall.io/integrations/api-keys)\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"aircall\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Date time filter for incremental filter, Specify which date to extract from.\n"
                }
            },
            "type": "object",
            "required": [
                "apiId",
                "apiToken",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceAirtableConfiguration:SourceAirtableConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceAirtableConfigurationCredentials:SourceAirtableConfigurationCredentials"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"airtable\"]\n"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceAirtableConfigurationCredentials:SourceAirtableConfigurationCredentials": {
            "properties": {
                "sourceAirtableAuthenticationOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationOAuth20:SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationOAuth20"
                },
                "sourceAirtableAuthenticationPersonalAccessToken": {
                    "$ref": "#/types/airbyte:index/SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationPersonalAccessToken:SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationPersonalAccessToken"
                },
                "sourceAirtableUpdateAuthenticationOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationOAuth20:SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationOAuth20"
                },
                "sourceAirtableUpdateAuthenticationPersonalAccessToken": {
                    "$ref": "#/types/airbyte:index/SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationPersonalAccessToken:SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationPersonalAccessToken"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationOAuth20:SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationPersonalAccessToken:SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationPersonalAccessToken": {
            "properties": {
                "apiKey": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiKey"
            ]
        },
        "airbyte:index/SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationOAuth20:SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationPersonalAccessToken:SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationPersonalAccessToken": {
            "properties": {
                "apiKey": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiKey"
            ]
        },
        "airbyte:index/SourceAlloydbConfiguration:SourceAlloydbConfiguration": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database.\n"
                },
                "host": {
                    "type": "string",
                    "description": "Hostname of the database.\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '\u0026'. (Eg. key1=value1\u0026key2=value2\u0026key3=value3). For more information read about \\n\\nJDBC URL parameters\\n\\n.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password associated with the username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the database.\n"
                },
                "replicationMethod": {
                    "$ref": "#/types/airbyte:index/SourceAlloydbConfigurationReplicationMethod:SourceAlloydbConfigurationReplicationMethod",
                    "description": "Replication method for extracting data from the database.\n"
                },
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of schemas (case sensitive) to sync from. Defaults to public.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"alloydb\"]\n"
                },
                "sslMode": {
                    "$ref": "#/types/airbyte:index/SourceAlloydbConfigurationSslMode:SourceAlloydbConfigurationSslMode",
                    "description": "SSL connection modes.\nRead more \\n\\n in the docs\\n\\n.\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/SourceAlloydbConfigurationTunnelMethod:SourceAlloydbConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "host",
                "port",
                "sourceType",
                "username"
            ]
        },
        "airbyte:index/SourceAlloydbConfigurationReplicationMethod:SourceAlloydbConfigurationReplicationMethod": {
            "properties": {
                "sourceAlloydbReplicationMethodLogicalReplicationCdc": {
                    "$ref": "#/types/airbyte:index/SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodLogicalReplicationCdc:SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodLogicalReplicationCdc"
                },
                "sourceAlloydbReplicationMethodStandard": {
                    "$ref": "#/types/airbyte:index/SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandard:SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandard"
                },
                "sourceAlloydbReplicationMethodStandardXmin": {
                    "$ref": "#/types/airbyte:index/SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardXmin:SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardXmin"
                },
                "sourceAlloydbUpdateReplicationMethodLogicalReplicationCdc": {
                    "$ref": "#/types/airbyte:index/SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodLogicalReplicationCdc:SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodLogicalReplicationCdc"
                },
                "sourceAlloydbUpdateReplicationMethodStandard": {
                    "$ref": "#/types/airbyte:index/SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandard:SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandard"
                },
                "sourceAlloydbUpdateReplicationMethodStandardXmin": {
                    "$ref": "#/types/airbyte:index/SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardXmin:SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardXmin"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodLogicalReplicationCdc:SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodLogicalReplicationCdc": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "initialWaitingSeconds": {
                    "type": "integer"
                },
                "lsnCommitBehaviour": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "plugin": {
                    "type": "string"
                },
                "publication": {
                    "type": "string"
                },
                "queueSize": {
                    "type": "integer"
                },
                "replicationSlot": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method",
                "publication",
                "replicationSlot"
            ]
        },
        "airbyte:index/SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandard:SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandard": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ]
        },
        "airbyte:index/SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardXmin:SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardXmin": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ]
        },
        "airbyte:index/SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodLogicalReplicationCdc:SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodLogicalReplicationCdc": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "initialWaitingSeconds": {
                    "type": "integer"
                },
                "lsnCommitBehaviour": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "plugin": {
                    "type": "string"
                },
                "publication": {
                    "type": "string"
                },
                "queueSize": {
                    "type": "integer"
                },
                "replicationSlot": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method",
                "publication",
                "replicationSlot"
            ]
        },
        "airbyte:index/SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandard:SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandard": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ]
        },
        "airbyte:index/SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardXmin:SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardXmin": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ]
        },
        "airbyte:index/SourceAlloydbConfigurationSslMode:SourceAlloydbConfigurationSslMode": {
            "properties": {
                "sourceAlloydbSslModesAllow": {
                    "$ref": "#/types/airbyte:index/SourceAlloydbConfigurationSslModeSourceAlloydbSslModesAllow:SourceAlloydbConfigurationSslModeSourceAlloydbSslModesAllow"
                },
                "sourceAlloydbSslModesDisable": {
                    "$ref": "#/types/airbyte:index/SourceAlloydbConfigurationSslModeSourceAlloydbSslModesDisable:SourceAlloydbConfigurationSslModeSourceAlloydbSslModesDisable"
                },
                "sourceAlloydbSslModesPrefer": {
                    "$ref": "#/types/airbyte:index/SourceAlloydbConfigurationSslModeSourceAlloydbSslModesPrefer:SourceAlloydbConfigurationSslModeSourceAlloydbSslModesPrefer"
                },
                "sourceAlloydbSslModesRequire": {
                    "$ref": "#/types/airbyte:index/SourceAlloydbConfigurationSslModeSourceAlloydbSslModesRequire:SourceAlloydbConfigurationSslModeSourceAlloydbSslModesRequire"
                },
                "sourceAlloydbSslModesVerifyCa": {
                    "$ref": "#/types/airbyte:index/SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyCa:SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyCa"
                },
                "sourceAlloydbSslModesVerifyFull": {
                    "$ref": "#/types/airbyte:index/SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyFull:SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyFull"
                },
                "sourceAlloydbUpdateSslModesAllow": {
                    "$ref": "#/types/airbyte:index/SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesAllow:SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesAllow"
                },
                "sourceAlloydbUpdateSslModesDisable": {
                    "$ref": "#/types/airbyte:index/SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesDisable:SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesDisable"
                },
                "sourceAlloydbUpdateSslModesPrefer": {
                    "$ref": "#/types/airbyte:index/SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesPrefer:SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesPrefer"
                },
                "sourceAlloydbUpdateSslModesRequire": {
                    "$ref": "#/types/airbyte:index/SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesRequire:SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesRequire"
                },
                "sourceAlloydbUpdateSslModesVerifyCa": {
                    "$ref": "#/types/airbyte:index/SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyCa:SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyCa"
                },
                "sourceAlloydbUpdateSslModesVerifyFull": {
                    "$ref": "#/types/airbyte:index/SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyFull:SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyFull"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceAlloydbConfigurationSslModeSourceAlloydbSslModesAllow:SourceAlloydbConfigurationSslModeSourceAlloydbSslModesAllow": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/SourceAlloydbConfigurationSslModeSourceAlloydbSslModesDisable:SourceAlloydbConfigurationSslModeSourceAlloydbSslModesDisable": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/SourceAlloydbConfigurationSslModeSourceAlloydbSslModesPrefer:SourceAlloydbConfigurationSslModeSourceAlloydbSslModesPrefer": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/SourceAlloydbConfigurationSslModeSourceAlloydbSslModesRequire:SourceAlloydbConfigurationSslModeSourceAlloydbSslModesRequire": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyCa:SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyCa": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "mode"
            ]
        },
        "airbyte:index/SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyFull:SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyFull": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "mode"
            ]
        },
        "airbyte:index/SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesAllow:SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesAllow": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesDisable:SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesDisable": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesPrefer:SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesPrefer": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesRequire:SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesRequire": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyCa:SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyCa": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "mode"
            ]
        },
        "airbyte:index/SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyFull:SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyFull": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "mode"
            ]
        },
        "airbyte:index/SourceAlloydbConfigurationTunnelMethod:SourceAlloydbConfigurationTunnelMethod": {
            "properties": {
                "sourceAlloydbSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodNoTunnel:SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodNoTunnel"
                },
                "sourceAlloydbSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodPasswordAuthentication:SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodPasswordAuthentication"
                },
                "sourceAlloydbSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodSshKeyAuthentication:SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodSshKeyAuthentication"
                },
                "sourceAlloydbUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodNoTunnel:SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodNoTunnel"
                },
                "sourceAlloydbUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodPasswordAuthentication:SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodPasswordAuthentication"
                },
                "sourceAlloydbUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodSshKeyAuthentication:SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodNoTunnel:SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodPasswordAuthentication:SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodSshKeyAuthentication:SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodNoTunnel:SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodPasswordAuthentication:SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodSshKeyAuthentication:SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/SourceAmazonAdsConfiguration:SourceAmazonAdsConfiguration": {
            "properties": {
                "authType": {
                    "type": "string",
                    "description": "must be one of [\"oauth2.0\"]\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The client ID of your Amazon Ads developer application. See the \\n\\ndocs\\n\\n for more information.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The client secret of your Amazon Ads developer application. See the \\n\\ndocs\\n\\n for more information.\n"
                },
                "lookBackWindow": {
                    "type": "integer",
                    "description": "The amount of days to go back in time to get the updated data from Amazon Ads\n"
                },
                "profiles": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Profile IDs you want to fetch data for. See \\n\\ndocs\\n\\n for more details.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "Amazon Ads refresh token. See the \\n\\ndocs\\n\\n for more information on how to obtain this token.\n"
                },
                "region": {
                    "type": "string",
                    "description": "must be one of [\"NA\", \"EU\", \"FE\"]\nRegion to pull data from (EU/NA/FE). See \\n\\ndocs\\n\\n for more details.\n"
                },
                "reportRecordTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Optional configuration which accepts an array of string of record types. Leave blank for default behaviour to pull all report types. Use this config option only if you want to pull specific report type(s). See \\n\\ndocs\\n\\n for more details\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"amazon-ads\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The Start date for collecting reports, should not be more than 60 days in the past. In YYYY-MM-DD format\n"
                },
                "stateFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Reflects the state of the Display, Product, and Brand Campaign streams as enabled, paused, or archived. If you do not populate this field, it will be ignored completely.\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "refreshToken",
                "sourceType"
            ]
        },
        "airbyte:index/SourceAmazonSellerPartnerConfiguration:SourceAmazonSellerPartnerConfiguration": {
            "properties": {
                "advancedStreamOptions": {
                    "type": "string",
                    "description": "Additional information to configure report options. This varies by report type, not every report implement this kind of feature. Must be a valid json string.\n"
                },
                "authType": {
                    "type": "string",
                    "description": "must be one of [\"oauth2.0\"]\n"
                },
                "awsAccessKey": {
                    "type": "string",
                    "description": "Specifies the AWS access key used as part of the credentials to authenticate the user.\n"
                },
                "awsEnvironment": {
                    "type": "string",
                    "description": "must be one of [\"PRODUCTION\", \"SANDBOX\"]\nSelect the AWS Environment.\n"
                },
                "awsSecretKey": {
                    "type": "string",
                    "description": "Specifies the AWS secret key used as part of the credentials to authenticate the user.\n"
                },
                "lwaAppId": {
                    "type": "string",
                    "description": "Your Login with Amazon Client ID.\n"
                },
                "lwaClientSecret": {
                    "type": "string",
                    "description": "Your Login with Amazon Client Secret.\n"
                },
                "maxWaitSeconds": {
                    "type": "integer",
                    "description": "Sometimes report can take up to 30 minutes to generate. This will set the limit for how long to wait for a successful report.\n"
                },
                "periodInDays": {
                    "type": "integer",
                    "description": "Will be used for stream slicing for initial full_refresh sync when no updated state is present for reports that support sliced incremental sync.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "The Refresh Token obtained via OAuth flow authorization.\n"
                },
                "region": {
                    "type": "string",
                    "description": "must be one of [\"AE\", \"AU\", \"BE\", \"BR\", \"CA\", \"DE\", \"EG\", \"ES\", \"FR\", \"GB\", \"IN\", \"IT\", \"JP\", \"MX\", \"NL\", \"PL\", \"SA\", \"SE\", \"SG\", \"TR\", \"UK\", \"US\"]\nSelect the AWS Region.\n"
                },
                "replicationEndDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data after this date will not be replicated.\n"
                },
                "replicationStartDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                },
                "reportOptions": {
                    "type": "string",
                    "description": "Additional information passed to reports. This varies by report type. Must be a valid json string.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "Specifies the Amazon Resource Name (ARN) of an IAM role that you want to use to perform operations requested using this profile. (Needs permission to 'Assume Role' STS).\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"amazon-seller-partner\"]\n"
                }
            },
            "type": "object",
            "required": [
                "awsEnvironment",
                "lwaAppId",
                "lwaClientSecret",
                "refreshToken",
                "region",
                "replicationStartDate",
                "sourceType"
            ]
        },
        "airbyte:index/SourceAmazonSqsConfiguration:SourceAmazonSqsConfiguration": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The Access Key ID of the AWS IAM Role to use for pulling messages\n"
                },
                "attributesToReturn": {
                    "type": "string",
                    "description": "Comma separated list of Mesage Attribute names to return\n"
                },
                "deleteMessages": {
                    "type": "boolean",
                    "description": "If Enabled, messages will be deleted from the SQS Queue after being read. If Disabled, messages are left in the queue and can be read more than once. WARNING: Enabling this option can result in data loss in cases of failure, use with caution, see documentation for more detail.\n"
                },
                "maxBatchSize": {
                    "type": "integer",
                    "description": "Max amount of messages to get in one batch (10 max)\n"
                },
                "maxWaitTime": {
                    "type": "integer",
                    "description": "Max amount of time in seconds to wait for messages in a single poll (20 max)\n"
                },
                "queueUrl": {
                    "type": "string",
                    "description": "URL of the SQS Queue\n"
                },
                "region": {
                    "type": "string",
                    "description": "must be one of [\"us-east-1\", \"us-east-2\", \"us-west-1\", \"us-west-2\", \"af-south-1\", \"ap-east-1\", \"ap-south-1\", \"ap-northeast-1\", \"ap-northeast-2\", \"ap-northeast-3\", \"ap-southeast-1\", \"ap-southeast-2\", \"ca-central-1\", \"cn-north-1\", \"cn-northwest-1\", \"eu-central-1\", \"eu-north-1\", \"eu-south-1\", \"eu-west-1\", \"eu-west-2\", \"eu-west-3\", \"sa-east-1\", \"me-south-1\", \"us-gov-east-1\", \"us-gov-west-1\"]\nAWS Region of the SQS Queue\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The Secret Key of the AWS IAM Role to use for pulling messages\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"amazon-sqs\"]\n"
                },
                "visibilityTimeout": {
                    "type": "integer",
                    "description": "Modify the Visibility Timeout of the individual message from the Queue's default (seconds).\n"
                }
            },
            "type": "object",
            "required": [
                "deleteMessages",
                "queueUrl",
                "region",
                "sourceType"
            ]
        },
        "airbyte:index/SourceAmplitudeConfiguration:SourceAmplitudeConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Amplitude API Key. See the \\n\\nsetup guide\\n\\n for more information on how to obtain this key.\n"
                },
                "dataRegion": {
                    "type": "string",
                    "description": "must be one of [\"Standard Server\", \"EU Residency Server\"]\nAmplitude data region server\n"
                },
                "requestTimeRange": {
                    "type": "integer",
                    "description": "According to \\n\\nConsiderations\\n\\n too big time range in request can cause a timeout error. In this case, set shorter time interval in hours.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "Amplitude Secret Key. See the \\n\\nsetup guide\\n\\n for more information on how to obtain this key.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"amplitude\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2021-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "secretKey",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceApifyDatasetConfiguration:SourceApifyDatasetConfiguration": {
            "properties": {
                "clean": {
                    "type": "boolean",
                    "description": "If set to true, only clean items will be downloaded from the dataset. See description of what clean means in \\n\\nApify API docs\\n\\n. If not sure, set clean to false.\n"
                },
                "datasetId": {
                    "type": "string",
                    "description": "ID of the dataset you would like to load to Airbyte.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"apify-dataset\"]\n"
                }
            },
            "type": "object",
            "required": [
                "datasetId",
                "sourceType"
            ]
        },
        "airbyte:index/SourceAppfollowConfiguration:SourceAppfollowConfiguration": {
            "properties": {
                "apiSecret": {
                    "type": "string",
                    "description": "API Key provided by Appfollow\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"appfollow\"]\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType"
            ]
        },
        "airbyte:index/SourceAsanaConfiguration:SourceAsanaConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceAsanaConfigurationCredentials:SourceAsanaConfigurationCredentials",
                    "description": "Choose how to authenticate to Github\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"asana\"]\n"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceAsanaConfigurationCredentials:SourceAsanaConfigurationCredentials": {
            "properties": {
                "sourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth": {
                    "$ref": "#/types/airbyte:index/SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth:SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth"
                },
                "sourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken": {
                    "$ref": "#/types/airbyte:index/SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken:SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken"
                },
                "sourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauth": {
                    "$ref": "#/types/airbyte:index/SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauth:SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauth"
                },
                "sourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken": {
                    "$ref": "#/types/airbyte:index/SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken:SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth:SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth": {
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "optionTitle": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken:SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken": {
            "properties": {
                "optionTitle": {
                    "type": "string"
                },
                "personalAccessToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "personalAccessToken"
            ]
        },
        "airbyte:index/SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauth:SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauth": {
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "optionTitle": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken:SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken": {
            "properties": {
                "optionTitle": {
                    "type": "string"
                },
                "personalAccessToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "personalAccessToken"
            ]
        },
        "airbyte:index/SourceAuth0Configuration:SourceAuth0Configuration": {
            "properties": {
                "baseUrl": {
                    "type": "string",
                    "description": "The Authentication API is served over HTTPS. All URLs referenced in the documentation have the following base `https://YOUR_DOMAIN`\n"
                },
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceAuth0ConfigurationCredentials:SourceAuth0ConfigurationCredentials"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"auth0\"]\n"
                }
            },
            "type": "object",
            "required": [
                "baseUrl",
                "credentials",
                "sourceType"
            ]
        },
        "airbyte:index/SourceAuth0ConfigurationCredentials:SourceAuth0ConfigurationCredentials": {
            "properties": {
                "sourceAuth0AuthenticationMethodOAuth2AccessToken": {
                    "$ref": "#/types/airbyte:index/SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2AccessToken:SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2AccessToken"
                },
                "sourceAuth0AuthenticationMethodOAuth2ConfidentialApplication": {
                    "$ref": "#/types/airbyte:index/SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2ConfidentialApplication:SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2ConfidentialApplication"
                },
                "sourceAuth0UpdateAuthenticationMethodOAuth2AccessToken": {
                    "$ref": "#/types/airbyte:index/SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2AccessToken:SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2AccessToken"
                },
                "sourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication": {
                    "$ref": "#/types/airbyte:index/SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication:SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2AccessToken:SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2AccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType"
            ]
        },
        "airbyte:index/SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2ConfidentialApplication:SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2ConfidentialApplication": {
            "properties": {
                "audience": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "audience",
                "authType",
                "clientId",
                "clientSecret"
            ]
        },
        "airbyte:index/SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2AccessToken:SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2AccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType"
            ]
        },
        "airbyte:index/SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication:SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication": {
            "properties": {
                "audience": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "audience",
                "authType",
                "clientId",
                "clientSecret"
            ]
        },
        "airbyte:index/SourceAwsCloudtrailConfiguration:SourceAwsCloudtrailConfiguration": {
            "properties": {
                "awsKeyId": {
                    "type": "string",
                    "description": "AWS CloudTrail Access Key ID. See the \\n\\ndocs\\n\\n for more information on how to obtain this key.\n"
                },
                "awsRegionName": {
                    "type": "string",
                    "description": "The default AWS Region to use, for example, us-west-1 or us-west-2. When specifying a Region inline during client initialization, this property is named region_name.\n"
                },
                "awsSecretKey": {
                    "type": "string",
                    "description": "AWS CloudTrail Access Key ID. See the \\n\\ndocs\\n\\n for more information on how to obtain this key.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"aws-cloudtrail\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date you would like to replicate data. Data in AWS CloudTrail is available for last 90 days only. Format: YYYY-MM-DD.\n"
                }
            },
            "type": "object",
            "required": [
                "awsKeyId",
                "awsRegionName",
                "awsSecretKey",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceAzureBlobStorageConfiguration:SourceAzureBlobStorageConfiguration": {
            "properties": {
                "azureBlobStorageAccountKey": {
                    "type": "string",
                    "description": "The Azure blob storage account key.\n"
                },
                "azureBlobStorageAccountName": {
                    "type": "string",
                    "description": "The account's name of the Azure Blob Storage.\n"
                },
                "azureBlobStorageBlobsPrefix": {
                    "type": "string",
                    "description": "The Azure blob storage prefix to be applied\n"
                },
                "azureBlobStorageContainerName": {
                    "type": "string",
                    "description": "The name of the Azure blob storage container.\n"
                },
                "azureBlobStorageEndpoint": {
                    "type": "string",
                    "description": "This is Azure Blob Storage endpoint domain name. Leave default value (or leave it empty if run container from command line) to use Microsoft native from example.\n"
                },
                "azureBlobStorageSchemaInferenceLimit": {
                    "type": "integer",
                    "description": "The Azure blob storage blobs to scan for inferring the schema, useful on large amounts of data with consistent structure\n"
                },
                "format": {
                    "$ref": "#/types/airbyte:index/SourceAzureBlobStorageConfigurationFormat:SourceAzureBlobStorageConfigurationFormat",
                    "description": "Input data format\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"azure-blob-storage\"]\n"
                }
            },
            "type": "object",
            "required": [
                "azureBlobStorageAccountKey",
                "azureBlobStorageAccountName",
                "azureBlobStorageContainerName",
                "format",
                "sourceType"
            ]
        },
        "airbyte:index/SourceAzureBlobStorageConfigurationFormat:SourceAzureBlobStorageConfigurationFormat": {
            "properties": {
                "sourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJson": {
                    "$ref": "#/types/airbyte:index/SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJson:SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJson"
                },
                "sourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJson": {
                    "$ref": "#/types/airbyte:index/SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJson:SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJson"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJson:SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJson": {
            "properties": {
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "formatType"
            ]
        },
        "airbyte:index/SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJson:SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJson": {
            "properties": {
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "formatType"
            ]
        },
        "airbyte:index/SourceAzureTableConfiguration:SourceAzureTableConfiguration": {
            "properties": {
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"azure-table\"]\n"
                },
                "storageAccessKey": {
                    "type": "string",
                    "description": "Azure Table Storage Access Key. See the \\n\\ndocs\\n\\n for more information on how to obtain this key.\n"
                },
                "storageAccountName": {
                    "type": "string",
                    "description": "The name of your storage account.\n"
                },
                "storageEndpointSuffix": {
                    "type": "string",
                    "description": "Azure Table Storage service account URL suffix. See the \\n\\ndocs\\n\\n for more information on how to obtain endpoint suffix\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType",
                "storageAccessKey",
                "storageAccountName"
            ]
        },
        "airbyte:index/SourceBambooHrConfiguration:SourceBambooHrConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Api key of bamboo hr\n"
                },
                "customReportsFields": {
                    "type": "string",
                    "description": "Comma-separated list of fields to include in custom reports.\n"
                },
                "customReportsIncludeDefaultFields": {
                    "type": "boolean",
                    "description": "If true, the custom reports endpoint will include the default fields defined here: https://documentation.bamboohr.com/docs/list-of-field-names.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"bamboo-hr\"]\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Sub Domain of bamboo hr\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType",
                "subdomain"
            ]
        },
        "airbyte:index/SourceBigcommerceConfiguration:SourceBigcommerceConfiguration": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access Token for making authenticated requests.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"bigcommerce\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date you would like to replicate data. Format: YYYY-MM-DD.\n"
                },
                "storeHash": {
                    "type": "string",
                    "description": "The hash code of the store. For https://api.bigcommerce.com/stores/HASH*CODE/v3/, The store's hash code is 'HASH*CODE'.\n"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "sourceType",
                "startDate",
                "storeHash"
            ]
        },
        "airbyte:index/SourceBigqueryConfiguration:SourceBigqueryConfiguration": {
            "properties": {
                "credentialsJson": {
                    "type": "string",
                    "description": "The contents of your Service Account Key JSON file. See the \\n\\ndocs\\n\\n for more information on how to obtain this key.\n"
                },
                "datasetId": {
                    "type": "string",
                    "description": "The dataset ID to search for tables and views. If you are only loading data from one dataset, setting this option could result in much faster schema discovery.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The GCP project ID for the project containing the target BigQuery dataset.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"bigquery\"]\n"
                }
            },
            "type": "object",
            "required": [
                "credentialsJson",
                "projectId",
                "sourceType"
            ]
        },
        "airbyte:index/SourceBingAdsConfiguration:SourceBingAdsConfiguration": {
            "properties": {
                "authMethod": {
                    "type": "string",
                    "description": "must be one of [\"oauth2.0\"]\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The Client ID of your Microsoft Advertising developer application.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The Client Secret of your Microsoft Advertising developer application.\n"
                },
                "developerToken": {
                    "type": "string",
                    "description": "Developer token associated with user. See more info \\n\\n in the docs\\n\\n.\n"
                },
                "lookbackWindow": {
                    "type": "integer",
                    "description": "Also known as attribution or conversion window. How far into the past to look for records (in days). If your conversion window has an hours/minutes granularity, round it up to the number of days exceeding. Used only for performance report streams in incremental mode.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "Refresh Token to renew the expired Access Token.\n"
                },
                "reportsStartDate": {
                    "type": "string",
                    "description": "The start date from which to begin replicating report data. Any data generated before this date will not be replicated in reports. This is a UTC date in YYYY-MM-DD format.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"bing-ads\"]\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The Tenant ID of your Microsoft Advertising developer application. Set this to \"common\" unless you know you need a different value.\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "developerToken",
                "refreshToken",
                "reportsStartDate",
                "sourceType"
            ]
        },
        "airbyte:index/SourceBraintreeConfiguration:SourceBraintreeConfiguration": {
            "properties": {
                "environment": {
                    "type": "string",
                    "description": "must be one of [\"Development\", \"Sandbox\", \"Qa\", \"Production\"]\nEnvironment specifies where the data will come from.\n"
                },
                "merchantId": {
                    "type": "string",
                    "description": "The unique identifier for your entire gateway account. See the \\n\\ndocs\\n\\n for more information on how to obtain this ID.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "Braintree Private Key. See the \\n\\ndocs\\n\\n for more information on how to obtain this key.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "Braintree Public Key. See the \\n\\ndocs\\n\\n for more information on how to obtain this key.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"braintree\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "environment",
                "merchantId",
                "privateKey",
                "publicKey",
                "sourceType"
            ]
        },
        "airbyte:index/SourceBrazeConfiguration:SourceBrazeConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Braze REST API key\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"braze\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Rows after this date will be synced\n"
                },
                "url": {
                    "type": "string",
                    "description": "Braze REST API endpoint\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType",
                "startDate",
                "url"
            ]
        },
        "airbyte:index/SourceChargebeeConfiguration:SourceChargebeeConfiguration": {
            "properties": {
                "productCatalog": {
                    "type": "string",
                    "description": "must be one of [\"1.0\", \"2.0\"]\nProduct Catalog version of your Chargebee site. Instructions on how to find your version you may find \\n\\nhere\\n\\n under `API Version` section.\n"
                },
                "site": {
                    "type": "string",
                    "description": "The site prefix for your Chargebee instance.\n"
                },
                "siteApiKey": {
                    "type": "string",
                    "description": "Chargebee API Key. See the \\n\\ndocs\\n\\n for more information on how to obtain this key.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"chargebee\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2021-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "productCatalog",
                "site",
                "siteApiKey",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceChartmogulConfiguration:SourceChartmogulConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Your Chartmogul API key. See \\n\\n the docs \\n\\n for info on how to obtain this.\n"
                },
                "interval": {
                    "type": "string",
                    "description": "must be one of [\"day\", \"week\", \"month\", \"quarter\"]\nSome APIs such as \\n\\nMetrics\\n\\n require intervals to cluster data.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"chartmogul\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. When feasible, any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "interval",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceClickhouseConfiguration:SourceClickhouseConfiguration": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The name of the database.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The host endpoint of the Clickhouse cluster.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password associated with this username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port of the database.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"clickhouse\"]\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/SourceClickhouseConfigurationTunnelMethod:SourceClickhouseConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username which is used to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "host",
                "port",
                "sourceType",
                "username"
            ]
        },
        "airbyte:index/SourceClickhouseConfigurationTunnelMethod:SourceClickhouseConfigurationTunnelMethod": {
            "properties": {
                "sourceClickhouseSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodNoTunnel:SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodNoTunnel"
                },
                "sourceClickhouseSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodPasswordAuthentication:SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodPasswordAuthentication"
                },
                "sourceClickhouseSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodSshKeyAuthentication:SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodSshKeyAuthentication"
                },
                "sourceClickhouseUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodNoTunnel:SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodNoTunnel"
                },
                "sourceClickhouseUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodPasswordAuthentication:SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodPasswordAuthentication"
                },
                "sourceClickhouseUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodSshKeyAuthentication:SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodNoTunnel:SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodPasswordAuthentication:SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodSshKeyAuthentication:SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodNoTunnel:SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodPasswordAuthentication:SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodSshKeyAuthentication:SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/SourceClickupApiConfiguration:SourceClickupApiConfiguration": {
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "Every ClickUp API call required authentication. This field is your personal API token. See \\n\\nhere\\n\\n.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of your folder in your space. Retrieve it from the `/space/{space_id}/folder` of the ClickUp API. See \\n\\nhere\\n\\n.\n"
                },
                "includeClosedTasks": {
                    "type": "boolean",
                    "description": "Include or exclude closed tasks. By default, they are excluded. See \\n\\nhere\\n\\n.\n"
                },
                "listId": {
                    "type": "string",
                    "description": "The ID of your list in your folder. Retrieve it from the `/folder/{folder_id}/list` of the ClickUp API. See \\n\\nhere\\n\\n.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"clickup-api\"]\n"
                },
                "spaceId": {
                    "type": "string",
                    "description": "The ID of your space in your workspace. Retrieve it from the `/team/{team_id}/space` of the ClickUp API. See \\n\\nhere\\n\\n.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of your team in ClickUp. Retrieve it from the `/team` of the ClickUp API. See \\n\\nhere\\n\\n.\n"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "sourceType"
            ]
        },
        "airbyte:index/SourceClockifyConfiguration:SourceClockifyConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "You can get your api access_key \\n\\nhere\\n\\n This API is Case Sensitive.\n"
                },
                "apiUrl": {
                    "type": "string",
                    "description": "The URL for the Clockify API. This should only need to be modified if connecting to an enterprise version of Clockify.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"clockify\"]\n"
                },
                "workspaceId": {
                    "type": "string",
                    "description": "WorkSpace Id\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType",
                "workspaceId"
            ]
        },
        "airbyte:index/SourceCloseComConfiguration:SourceCloseComConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Close.com API key (usually starts with 'api_'; find yours \\n\\nhere\\n\\n).\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"close-com\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The start date to sync data; all data after this date will be replicated. Leave blank to retrieve all the data available in the account. Format: YYYY-MM-DD.\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ]
        },
        "airbyte:index/SourceCodaConfiguration:SourceCodaConfiguration": {
            "properties": {
                "authToken": {
                    "type": "string",
                    "description": "Bearer token\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"coda\"]\n"
                }
            },
            "type": "object",
            "required": [
                "authToken",
                "sourceType"
            ]
        },
        "airbyte:index/SourceCoinApiConfiguration:SourceCoinApiConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "The end date in ISO 8601 format. If not supplied, data will be returned\nfrom the start date to the current time, or when the count of result\nelements reaches its limit.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "must be one of [\"sandbox\", \"production\"]\nThe environment to use. Either sandbox or production.\n"
                },
                "limit": {
                    "type": "integer",
                    "description": "The maximum number of elements to return. If not supplied, the default\nis 100. For numbers larger than 100, each 100 items is counted as one\nrequest for pricing purposes. Maximum value is 100000.\n"
                },
                "period": {
                    "type": "string",
                    "description": "The period to use. See the documentation for a list. https://docs.coinapi.io/#list-all-periods-get\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"coin-api\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The start date in ISO 8601 format.\n"
                },
                "symbolId": {
                    "type": "string",
                    "description": "The symbol ID to use. See the documentation for a list.\nhttps://docs.coinapi.io/#list-all-symbols-get\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "environment",
                "period",
                "sourceType",
                "startDate",
                "symbolId"
            ]
        },
        "airbyte:index/SourceCoinmarketcapConfiguration:SourceCoinmarketcapConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Your API Key. See \\n\\nhere\\n\\n. The token is case sensitive.\n"
                },
                "dataType": {
                    "type": "string",
                    "description": "must be one of [\"latest\", \"historical\"]\n/latest: Latest market ticker quotes and averages for cryptocurrencies and exchanges. /historical: Intervals of historic market data like OHLCV data or data for use in charting libraries. See \\n\\nhere\\n\\n.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"coinmarketcap\"]\n"
                },
                "symbols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Cryptocurrency symbols. (only used for quotes stream)\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "dataType",
                "sourceType"
            ]
        },
        "airbyte:index/SourceConfigcatConfiguration:SourceConfigcatConfiguration": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "Basic auth password. See \\n\\nhere\\n\\n.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"configcat\"]\n"
                },
                "username": {
                    "type": "string",
                    "description": "Basic auth user name. See \\n\\nhere\\n\\n.\n"
                }
            },
            "type": "object",
            "required": [
                "password",
                "sourceType",
                "username"
            ]
        },
        "airbyte:index/SourceConfluenceConfiguration:SourceConfluenceConfiguration": {
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "Please follow the Jira confluence for generating an API token: \\n\\ngenerating an API token\\n\\n.\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "Your Confluence domain name\n"
                },
                "email": {
                    "type": "string",
                    "description": "Your Confluence login email\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"confluence\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "domainName",
                "email",
                "sourceType"
            ]
        },
        "airbyte:index/SourceConvexConfiguration:SourceConvexConfiguration": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "API access key used to retrieve data from Convex.\n"
                },
                "deploymentUrl": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"convex\"]\n"
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "deploymentUrl",
                "sourceType"
            ]
        },
        "airbyte:index/SourceDatadogConfiguration:SourceDatadogConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Datadog API key\n"
                },
                "applicationKey": {
                    "type": "string",
                    "description": "Datadog application key\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Data after this date will  not be replicated. An empty value will represent the current datetime for each  execution. This just applies to Incremental syncs.\n"
                },
                "maxRecordsPerRequest": {
                    "type": "integer",
                    "description": "Maximum number of records to collect per request.\n"
                },
                "queries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/airbyte:index/SourceDatadogConfigurationQuery:SourceDatadogConfigurationQuery"
                    },
                    "description": "List of queries to be run and used as inputs.\n"
                },
                "query": {
                    "type": "string",
                    "description": "The search query. This just applies to Incremental syncs. If empty, it'll collect all logs.\n"
                },
                "site": {
                    "type": "string",
                    "description": "must be one of [\"datadoghq.com\", \"us3.datadoghq.com\", \"us5.datadoghq.com\", \"datadoghq.eu\", \"ddog-gov.com\"]\nThe site where Datadog data resides in.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"datadog\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated. This just applies to Incremental syncs.\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "applicationKey",
                "sourceType"
            ]
        },
        "airbyte:index/SourceDatadogConfigurationQuery:SourceDatadogConfigurationQuery": {
            "properties": {
                "dataSource": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "query": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dataSource",
                "name",
                "query"
            ]
        },
        "airbyte:index/SourceDatascopeConfiguration:SourceDatascopeConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"datascope\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Start date for the data to be replicated\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceDelightedConfiguration:SourceDelightedConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "A Delighted API key.\n"
                },
                "since": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate the data\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"delighted\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "since",
                "sourceType"
            ]
        },
        "airbyte:index/SourceDixaConfiguration:SourceDixaConfiguration": {
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "Dixa API token\n"
                },
                "batchSize": {
                    "type": "integer",
                    "description": "Number of days to batch into one request. Max 31.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"dixa\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The connector pulls records updated from this date onwards.\n"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceDockerhubConfiguration:SourceDockerhubConfiguration": {
            "properties": {
                "dockerUsername": {
                    "type": "string",
                    "description": "Username of DockerHub person or organization (for https://hub.docker.com/v2/repositories/USERNAME/ API call)\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"dockerhub\"]\n"
                }
            },
            "type": "object",
            "required": [
                "dockerUsername",
                "sourceType"
            ]
        },
        "airbyte:index/SourceDremioConfiguration:SourceDremioConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key that is generated when you authenticate to Dremio API\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "URL of your Dremio instance\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"dremio\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "baseUrl",
                "sourceType"
            ]
        },
        "airbyte:index/SourceDynamodbConfiguration:SourceDynamodbConfiguration": {
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The access key id to access Dynamodb. Airbyte requires read permissions to the database\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "the URL of the Dynamodb database\n"
                },
                "region": {
                    "type": "string",
                    "description": "must be one of [\"\", \"us-east-1\", \"us-east-2\", \"us-west-1\", \"us-west-2\", \"af-south-1\", \"ap-east-1\", \"ap-south-1\", \"ap-northeast-1\", \"ap-northeast-2\", \"ap-northeast-3\", \"ap-southeast-1\", \"ap-southeast-2\", \"ca-central-1\", \"cn-north-1\", \"cn-northwest-1\", \"eu-central-1\", \"eu-north-1\", \"eu-south-1\", \"eu-west-1\", \"eu-west-2\", \"eu-west-3\", \"sa-east-1\", \"me-south-1\", \"us-gov-east-1\", \"us-gov-west-1\"]\nThe region of the Dynamodb database\n"
                },
                "reservedAttributeNames": {
                    "type": "string",
                    "description": "Comma separated reserved attribute names present in your tables\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The corresponding secret to the access key id.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"dynamodb\"]\n"
                }
            },
            "type": "object",
            "required": [
                "accessKeyId",
                "secretAccessKey",
                "sourceType"
            ]
        },
        "airbyte:index/SourceE2eTestCloudConfiguration:SourceE2eTestCloudConfiguration": {
            "properties": {
                "maxMessages": {
                    "type": "integer",
                    "description": "Number of records to emit per stream. Min 1. Max 100 billion.\n"
                },
                "messageIntervalMs": {
                    "type": "integer",
                    "description": "Interval between messages in ms. Min 0 ms. Max 60000 ms (1 minute).\n"
                },
                "mockCatalog": {
                    "$ref": "#/types/airbyte:index/SourceE2eTestCloudConfigurationMockCatalog:SourceE2eTestCloudConfigurationMockCatalog"
                },
                "seed": {
                    "type": "integer",
                    "description": "When the seed is unspecified, the current time millis will be used as the seed. Range: [0, 1000000].\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"e2e-test-cloud\"]\n"
                },
                "type": {
                    "type": "string",
                    "description": "must be one of [\"CONTINUOUS_FEED\"]\n"
                }
            },
            "type": "object",
            "required": [
                "maxMessages",
                "mockCatalog",
                "sourceType"
            ]
        },
        "airbyte:index/SourceE2eTestCloudConfigurationMockCatalog:SourceE2eTestCloudConfigurationMockCatalog": {
            "properties": {
                "sourceE2eTestCloudMockCatalogMultiSchema": {
                    "$ref": "#/types/airbyte:index/SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogMultiSchema:SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogMultiSchema"
                },
                "sourceE2eTestCloudMockCatalogSingleSchema": {
                    "$ref": "#/types/airbyte:index/SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogSingleSchema:SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogSingleSchema"
                },
                "sourceE2eTestCloudUpdateMockCatalogMultiSchema": {
                    "$ref": "#/types/airbyte:index/SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogMultiSchema:SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogMultiSchema"
                },
                "sourceE2eTestCloudUpdateMockCatalogSingleSchema": {
                    "$ref": "#/types/airbyte:index/SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogSingleSchema:SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogSingleSchema"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogMultiSchema:SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogMultiSchema": {
            "properties": {
                "streamSchemas": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "streamSchemas",
                "type"
            ]
        },
        "airbyte:index/SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogSingleSchema:SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogSingleSchema": {
            "properties": {
                "streamDuplication": {
                    "type": "integer"
                },
                "streamName": {
                    "type": "string"
                },
                "streamSchema": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "streamName",
                "streamSchema",
                "type"
            ]
        },
        "airbyte:index/SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogMultiSchema:SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogMultiSchema": {
            "properties": {
                "streamSchemas": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "streamSchemas",
                "type"
            ]
        },
        "airbyte:index/SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogSingleSchema:SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogSingleSchema": {
            "properties": {
                "streamDuplication": {
                    "type": "integer"
                },
                "streamName": {
                    "type": "string"
                },
                "streamSchema": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "streamName",
                "streamSchema",
                "type"
            ]
        },
        "airbyte:index/SourceEmailoctopusConfiguration:SourceEmailoctopusConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "EmailOctopus API Key. See the \\n\\ndocs\\n\\n for information on how to generate this key.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"emailoctopus\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ]
        },
        "airbyte:index/SourceExchangeRatesConfiguration:SourceExchangeRatesConfiguration": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Your API Key. See \\n\\nhere\\n\\n. The key is case sensitive.\n"
                },
                "base": {
                    "type": "string",
                    "description": "ISO reference currency. See \\n\\nhere\\n\\n. Free plan doesn't support Source Currency Switching, default base currency is EUR\n"
                },
                "ignoreWeekends": {
                    "type": "boolean",
                    "description": "Ignore weekends? (Exchanges don't run on weekends)\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"exchange-rates\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Start getting data from that date.\n"
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceFacebookMarketingConfiguration:SourceFacebookMarketingConfiguration": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "The value of the generated access token. From your App’s Dashboard, click on \"Marketing API\" then \"Tools\". Select permissions \\n\\nads*management, ads*read, read*insights, business*management\\n\\n. Then click on \"Get token\". See the \\n\\ndocs\\n\\n for more information.\n"
                },
                "accountId": {
                    "type": "string",
                    "description": "The Facebook Ad account ID to use when pulling data from the Facebook Marketing API. Open your Meta Ads Manager. The Ad account ID number is in the account dropdown menu or in your browser's address bar. See the \\n\\ndocs\\n\\n for more information.\n"
                },
                "actionBreakdownsAllowEmpty": {
                    "type": "boolean",
                    "description": "Allows action_breakdowns to be an empty list\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The Client Id for your OAuth app\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The Client Secret for your OAuth app\n"
                },
                "customInsights": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/airbyte:index/SourceFacebookMarketingConfigurationCustomInsight:SourceFacebookMarketingConfigurationCustomInsight"
                    },
                    "description": "A list which contains ad statistics entries, each entry must have a name and can contains fields, breakdowns or action*breakdowns. Click on \"add\" to fill this field.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "The date until which you'd like to replicate data for all incremental streams, in the format YYYY-MM-DDT00:00:00Z. All data generated between the start date and this end date will be replicated. Not setting this option will result in always syncing the latest data.\n"
                },
                "fetchThumbnailImages": {
                    "type": "boolean",
                    "description": "Set to active if you want to fetch the thumbnail*url and store the result in thumbnail*data_url for each Ad Creative.\n"
                },
                "includeDeleted": {
                    "type": "boolean",
                    "description": "Set to active if you want to include data from deleted Campaigns, Ads, and AdSets.\n"
                },
                "insightsLookbackWindow": {
                    "type": "integer",
                    "description": "The attribution window. Facebook freezes insight data 28 days after it was generated, which means that all data from the past 28 days may have changed since we last emitted it, so you can retrieve refreshed insights from the past by setting this parameter. If you set a custom lookback window value in Facebook account, please provide the same value here.\n"
                },
                "maxBatchSize": {
                    "type": "integer",
                    "description": "Maximum batch size used when sending batch requests to Facebook API. Most users do not need to set this field unless they specifically need to tune the connector to address specific issues or use cases.\n"
                },
                "pageSize": {
                    "type": "integer",
                    "description": "Page size used when sending requests to Facebook API to specify number of records per page when response has pagination. Most users do not need to set this field unless they specifically need to tune the connector to address specific issues or use cases.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"facebook-marketing\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data for all incremental streams, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "accountId",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceFacebookMarketingConfigurationCustomInsight:SourceFacebookMarketingConfigurationCustomInsight": {
            "properties": {
                "actionBreakdowns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "actionReportTime": {
                    "type": "string"
                },
                "breakdowns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "endDate": {
                    "type": "string"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "insightsLookbackWindow": {
                    "type": "integer"
                },
                "level": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string"
                },
                "timeIncrement": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "airbyte:index/SourceFacebookPagesConfiguration:SourceFacebookPagesConfiguration": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Facebook Page Access Token\n"
                },
                "pageId": {
                    "type": "string",
                    "description": "Page ID\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"facebook-pages\"]\n"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "pageId",
                "sourceType"
            ]
        },
        "airbyte:index/SourceFakerConfiguration:SourceFakerConfiguration": {
            "properties": {
                "alwaysUpdated": {
                    "type": "boolean",
                    "description": "Should the updated_at values for every record be new each sync?  Setting this to false will case the source to stop emitting records after COUNT records have been emitted.\n"
                },
                "count": {
                    "type": "integer",
                    "description": "How many users should be generated in total.  This setting does not apply to the purchases or products stream.\n"
                },
                "parallelism": {
                    "type": "integer",
                    "description": "How many parallel workers should we use to generate fake data?  Choose a value equal to the number of CPUs you will allocate to this source.\n"
                },
                "recordsPerSlice": {
                    "type": "integer",
                    "description": "How many fake records will be in each page (stream slice), before a state message is emitted?\n"
                },
                "seed": {
                    "type": "integer",
                    "description": "Manually control the faker random seed to return the same values on subsequent runs (leave -1 for random)\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"faker\"]\n"
                }
            },
            "type": "object",
            "required": [
                "count",
                "sourceType"
            ]
        },
        "airbyte:index/SourceFaunaConfiguration:SourceFaunaConfiguration": {
            "properties": {
                "collection": {
                    "$ref": "#/types/airbyte:index/SourceFaunaConfigurationCollection:SourceFaunaConfigurationCollection",
                    "description": "Settings for the Fauna Collection.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Domain of Fauna to query. Defaults db.fauna.com. See \\n\\nthe docs\\n\\n.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Endpoint port.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "URL scheme.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "Fauna secret, used when authenticating with the database.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"fauna\"]\n"
                }
            },
            "type": "object",
            "required": [
                "domain",
                "port",
                "scheme",
                "secret",
                "sourceType"
            ]
        },
        "airbyte:index/SourceFaunaConfigurationCollection:SourceFaunaConfigurationCollection": {
            "properties": {
                "deletions": {
                    "$ref": "#/types/airbyte:index/SourceFaunaConfigurationCollectionDeletions:SourceFaunaConfigurationCollectionDeletions"
                },
                "pageSize": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "deletions",
                "pageSize"
            ]
        },
        "airbyte:index/SourceFaunaConfigurationCollectionDeletions:SourceFaunaConfigurationCollectionDeletions": {
            "properties": {
                "sourceFaunaCollectionDeletionModeDisabled": {
                    "$ref": "#/types/airbyte:index/SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeDisabled:SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeDisabled"
                },
                "sourceFaunaCollectionDeletionModeEnabled": {
                    "$ref": "#/types/airbyte:index/SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeEnabled:SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeEnabled"
                },
                "sourceFaunaUpdateCollectionDeletionModeDisabled": {
                    "$ref": "#/types/airbyte:index/SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeDisabled:SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeDisabled"
                },
                "sourceFaunaUpdateCollectionDeletionModeEnabled": {
                    "$ref": "#/types/airbyte:index/SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeEnabled:SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeEnabled"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeDisabled:SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeDisabled": {
            "properties": {
                "deletionMode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "deletionMode"
            ]
        },
        "airbyte:index/SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeEnabled:SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeEnabled": {
            "properties": {
                "column": {
                    "type": "string"
                },
                "deletionMode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "column",
                "deletionMode"
            ]
        },
        "airbyte:index/SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeDisabled:SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeDisabled": {
            "properties": {
                "deletionMode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "deletionMode"
            ]
        },
        "airbyte:index/SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeEnabled:SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeEnabled": {
            "properties": {
                "column": {
                    "type": "string"
                },
                "deletionMode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "column",
                "deletionMode"
            ]
        },
        "airbyte:index/SourceFileSecureConfiguration:SourceFileSecureConfiguration": {
            "properties": {
                "datasetName": {
                    "type": "string",
                    "description": "The Name of the final table to replicate this file into (should include letters, numbers dash and underscores only).\n"
                },
                "format": {
                    "type": "string",
                    "description": "must be one of [\"csv\", \"json\", \"jsonl\", \"excel\", \"excel_binary\", \"feather\", \"parquet\", \"yaml\"]\nThe Format of the file which should be replicated (Warning: some formats may be experimental, please refer to the docs).\n"
                },
                "provider": {
                    "$ref": "#/types/airbyte:index/SourceFileSecureConfigurationProvider:SourceFileSecureConfigurationProvider",
                    "description": "The storage Provider or Location of the file(s) which should be replicated.\n"
                },
                "readerOptions": {
                    "type": "string",
                    "description": "This should be a string in JSON format. It depends on the chosen file format to provide additional options and tune its behavior.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"file-secure\"]\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL path to access the file which should be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "datasetName",
                "format",
                "provider",
                "sourceType",
                "url"
            ]
        },
        "airbyte:index/SourceFileSecureConfigurationProvider:SourceFileSecureConfigurationProvider": {
            "properties": {
                "sourceFileSecureStorageProviderAzBlobAzureBlobStorage": {
                    "$ref": "#/types/airbyte:index/SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderAzBlobAzureBlobStorage:SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderAzBlobAzureBlobStorage"
                },
                "sourceFileSecureStorageProviderGcsGoogleCloudStorage": {
                    "$ref": "#/types/airbyte:index/SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderGcsGoogleCloudStorage:SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderGcsGoogleCloudStorage"
                },
                "sourceFileSecureStorageProviderHttpsPublicWeb": {
                    "$ref": "#/types/airbyte:index/SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderHttpsPublicWeb:SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderHttpsPublicWeb"
                },
                "sourceFileSecureStorageProviderS3AmazonWebServices": {
                    "$ref": "#/types/airbyte:index/SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderS3AmazonWebServices:SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderS3AmazonWebServices"
                },
                "sourceFileSecureStorageProviderScpSecureCopyProtocol": {
                    "$ref": "#/types/airbyte:index/SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderScpSecureCopyProtocol:SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderScpSecureCopyProtocol"
                },
                "sourceFileSecureStorageProviderSftpSecureFileTransferProtocol": {
                    "$ref": "#/types/airbyte:index/SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSftpSecureFileTransferProtocol:SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSftpSecureFileTransferProtocol"
                },
                "sourceFileSecureStorageProviderSshSecureShell": {
                    "$ref": "#/types/airbyte:index/SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSshSecureShell:SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSshSecureShell"
                },
                "sourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorage": {
                    "$ref": "#/types/airbyte:index/SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorage:SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorage"
                },
                "sourceFileSecureUpdateStorageProviderGcsGoogleCloudStorage": {
                    "$ref": "#/types/airbyte:index/SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderGcsGoogleCloudStorage:SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderGcsGoogleCloudStorage"
                },
                "sourceFileSecureUpdateStorageProviderHttpsPublicWeb": {
                    "$ref": "#/types/airbyte:index/SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderHttpsPublicWeb:SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderHttpsPublicWeb"
                },
                "sourceFileSecureUpdateStorageProviderS3AmazonWebServices": {
                    "$ref": "#/types/airbyte:index/SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderS3AmazonWebServices:SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderS3AmazonWebServices"
                },
                "sourceFileSecureUpdateStorageProviderScpSecureCopyProtocol": {
                    "$ref": "#/types/airbyte:index/SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderScpSecureCopyProtocol:SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderScpSecureCopyProtocol"
                },
                "sourceFileSecureUpdateStorageProviderSftpSecureFileTransferProtocol": {
                    "$ref": "#/types/airbyte:index/SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSftpSecureFileTransferProtocol:SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSftpSecureFileTransferProtocol"
                },
                "sourceFileSecureUpdateStorageProviderSshSecureShell": {
                    "$ref": "#/types/airbyte:index/SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSshSecureShell:SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSshSecureShell"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderAzBlobAzureBlobStorage:SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderAzBlobAzureBlobStorage": {
            "properties": {
                "sasToken": {
                    "type": "string"
                },
                "sharedKey": {
                    "type": "string"
                },
                "storage": {
                    "type": "string"
                },
                "storageAccount": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "storage",
                "storageAccount"
            ]
        },
        "airbyte:index/SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderGcsGoogleCloudStorage:SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderGcsGoogleCloudStorage": {
            "properties": {
                "serviceAccountJson": {
                    "type": "string"
                },
                "storage": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "storage"
            ]
        },
        "airbyte:index/SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderHttpsPublicWeb:SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderHttpsPublicWeb": {
            "properties": {
                "storage": {
                    "type": "string"
                },
                "userAgent": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "storage"
            ]
        },
        "airbyte:index/SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderS3AmazonWebServices:SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderS3AmazonWebServices": {
            "properties": {
                "awsAccessKeyId": {
                    "type": "string"
                },
                "awsSecretAccessKey": {
                    "type": "string"
                },
                "storage": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "storage"
            ]
        },
        "airbyte:index/SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderScpSecureCopyProtocol:SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderScpSecureCopyProtocol": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "storage": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "host",
                "storage",
                "user"
            ]
        },
        "airbyte:index/SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSftpSecureFileTransferProtocol:SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSftpSecureFileTransferProtocol": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "storage": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "host",
                "storage",
                "user"
            ]
        },
        "airbyte:index/SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSshSecureShell:SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSshSecureShell": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "storage": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "host",
                "storage",
                "user"
            ]
        },
        "airbyte:index/SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorage:SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorage": {
            "properties": {
                "sasToken": {
                    "type": "string"
                },
                "sharedKey": {
                    "type": "string"
                },
                "storage": {
                    "type": "string"
                },
                "storageAccount": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "storage",
                "storageAccount"
            ]
        },
        "airbyte:index/SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderGcsGoogleCloudStorage:SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderGcsGoogleCloudStorage": {
            "properties": {
                "serviceAccountJson": {
                    "type": "string"
                },
                "storage": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "storage"
            ]
        },
        "airbyte:index/SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderHttpsPublicWeb:SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderHttpsPublicWeb": {
            "properties": {
                "storage": {
                    "type": "string"
                },
                "userAgent": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "storage"
            ]
        },
        "airbyte:index/SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderS3AmazonWebServices:SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderS3AmazonWebServices": {
            "properties": {
                "awsAccessKeyId": {
                    "type": "string"
                },
                "awsSecretAccessKey": {
                    "type": "string"
                },
                "storage": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "storage"
            ]
        },
        "airbyte:index/SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderScpSecureCopyProtocol:SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderScpSecureCopyProtocol": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "storage": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "host",
                "storage",
                "user"
            ]
        },
        "airbyte:index/SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSftpSecureFileTransferProtocol:SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSftpSecureFileTransferProtocol": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "storage": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "host",
                "storage",
                "user"
            ]
        },
        "airbyte:index/SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSshSecureShell:SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSshSecureShell": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "storage": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "host",
                "storage",
                "user"
            ]
        },
        "airbyte:index/SourceFireboltConfiguration:SourceFireboltConfiguration": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "Firebolt account to login.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database to connect to.\n"
                },
                "engine": {
                    "type": "string",
                    "description": "Engine name or url to connect to.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The host name of your Firebolt database.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Firebolt password.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"firebolt\"]\n"
                },
                "username": {
                    "type": "string",
                    "description": "Firebolt email address you use to login.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "password",
                "sourceType",
                "username"
            ]
        },
        "airbyte:index/SourceFreshcallerConfiguration:SourceFreshcallerConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Freshcaller API Key. See the \\n\\ndocs\\n\\n for more information on how to obtain this key.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Used to construct Base URL for the Freshcaller APIs\n"
                },
                "requestsPerMinute": {
                    "type": "integer",
                    "description": "The number of requests per minute that this source allowed to use. There is a rate limit of 50 requests per minute per app per account.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"freshcaller\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time. Any data created after this date will be replicated.\n"
                },
                "syncLagMinutes": {
                    "type": "integer",
                    "description": "Lag in minutes for each sync, i.e., at time T, data for the time range [prev*sync*time, T-30] will be fetched\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "domain",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceFreshdeskConfiguration:SourceFreshdeskConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Freshdesk API Key. See the \\n\\ndocs\\n\\n for more information on how to obtain this key.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Freshdesk domain\n"
                },
                "requestsPerMinute": {
                    "type": "integer",
                    "description": "The number of requests per minute that this source allowed to use. There is a rate limit of 50 requests per minute per app per account.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"freshdesk\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time. Any data created after this date will be replicated. If this parameter is not set, all data will be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "domain",
                "sourceType"
            ]
        },
        "airbyte:index/SourceFreshsalesConfiguration:SourceFreshsalesConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Freshsales API Key. See \\n\\nhere\\n\\n. The key is case sensitive.\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "The Name of your Freshsales domain\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"freshsales\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "domainName",
                "sourceType"
            ]
        },
        "airbyte:index/SourceGainsightPxConfiguration:SourceGainsightPxConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "The Aptrinsic API Key which is recieved from the dashboard settings (ref - https://app.aptrinsic.com/settings/api-keys)\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"gainsight-px\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ]
        },
        "airbyte:index/SourceGcsConfiguration:SourceGcsConfiguration": {
            "properties": {
                "gcsBucket": {
                    "type": "string",
                    "description": "GCS bucket name\n"
                },
                "gcsPath": {
                    "type": "string",
                    "description": "GCS path to data\n"
                },
                "serviceAccount": {
                    "type": "string",
                    "description": "Enter your Google Cloud \\n\\nservice account key\\n\\n in JSON format\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"gcs\"]\n"
                }
            },
            "type": "object",
            "required": [
                "gcsBucket",
                "gcsPath",
                "serviceAccount",
                "sourceType"
            ]
        },
        "airbyte:index/SourceGetlagoConfiguration:SourceGetlagoConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Your API Key. See \\n\\nhere\\n\\n.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"getlago\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ]
        },
        "airbyte:index/SourceGithubConfiguration:SourceGithubConfiguration": {
            "properties": {
                "branch": {
                    "type": "string",
                    "description": "Space-delimited list of GitHub repository branches to pull commits for, e.g. `airbytehq/airbyte/master`. If no branches are specified for a repository, the default branch will be pulled.\n"
                },
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceGithubConfigurationCredentials:SourceGithubConfigurationCredentials",
                    "description": "Choose how to authenticate to GitHub\n"
                },
                "repository": {
                    "type": "string",
                    "description": "Space-delimited list of GitHub organizations/repositories, e.g. `airbytehq/airbyte` for single repository, `airbytehq/*` for get all repositories from organization and `airbytehq/airbyte airbytehq/another-repo` for multiple repositories.\n"
                },
                "requestsPerHour": {
                    "type": "integer",
                    "description": "The GitHub API allows for a maximum of 5000 requests per hour (15000 for Github Enterprise). You can specify a lower value to limit your use of the API quota.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"github\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data from GitHub in the format YYYY-MM-DDT00:00:00Z. For the streams which support this configuration, only data generated on or after the start date will be replicated. This field doesn't apply to all streams, see the \\n\\ndocs\\n\\n for more info\n"
                }
            },
            "type": "object",
            "required": [
                "repository",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceGithubConfigurationCredentials:SourceGithubConfigurationCredentials": {
            "properties": {
                "sourceGithubAuthenticationOAuth": {
                    "$ref": "#/types/airbyte:index/SourceGithubConfigurationCredentialsSourceGithubAuthenticationOAuth:SourceGithubConfigurationCredentialsSourceGithubAuthenticationOAuth"
                },
                "sourceGithubAuthenticationPersonalAccessToken": {
                    "$ref": "#/types/airbyte:index/SourceGithubConfigurationCredentialsSourceGithubAuthenticationPersonalAccessToken:SourceGithubConfigurationCredentialsSourceGithubAuthenticationPersonalAccessToken"
                },
                "sourceGithubUpdateAuthenticationOAuth": {
                    "$ref": "#/types/airbyte:index/SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationOAuth:SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationOAuth"
                },
                "sourceGithubUpdateAuthenticationPersonalAccessToken": {
                    "$ref": "#/types/airbyte:index/SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationPersonalAccessToken:SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationPersonalAccessToken"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceGithubConfigurationCredentialsSourceGithubAuthenticationOAuth:SourceGithubConfigurationCredentialsSourceGithubAuthenticationOAuth": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "optionTitle": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken"
            ]
        },
        "airbyte:index/SourceGithubConfigurationCredentialsSourceGithubAuthenticationPersonalAccessToken:SourceGithubConfigurationCredentialsSourceGithubAuthenticationPersonalAccessToken": {
            "properties": {
                "optionTitle": {
                    "type": "string"
                },
                "personalAccessToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "personalAccessToken"
            ]
        },
        "airbyte:index/SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationOAuth:SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationOAuth": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "optionTitle": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken"
            ]
        },
        "airbyte:index/SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationPersonalAccessToken:SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationPersonalAccessToken": {
            "properties": {
                "optionTitle": {
                    "type": "string"
                },
                "personalAccessToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "personalAccessToken"
            ]
        },
        "airbyte:index/SourceGitlabConfiguration:SourceGitlabConfiguration": {
            "properties": {
                "apiUrl": {
                    "type": "string",
                    "description": "Please enter your basic URL from GitLab instance.\n"
                },
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceGitlabConfigurationCredentials:SourceGitlabConfigurationCredentials"
                },
                "groups": {
                    "type": "string",
                    "description": "Space-delimited list of groups. e.g. airbyte.io.\n"
                },
                "projects": {
                    "type": "string",
                    "description": "Space-delimited list of projects. e.g. airbyte.io/documentation meltano/tap-gitlab.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"gitlab\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data for GitLab API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceGitlabConfigurationCredentials:SourceGitlabConfigurationCredentials": {
            "properties": {
                "sourceGitlabAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodOAuth20:SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodOAuth20"
                },
                "sourceGitlabAuthorizationMethodPrivateToken": {
                    "$ref": "#/types/airbyte:index/SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodPrivateToken:SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodPrivateToken"
                },
                "sourceGitlabUpdateAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodOAuth20:SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodOAuth20"
                },
                "sourceGitlabUpdateAuthorizationMethodPrivateToken": {
                    "$ref": "#/types/airbyte:index/SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodPrivateToken:SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodPrivateToken"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodOAuth20:SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "clientId",
                "clientSecret",
                "refreshToken",
                "tokenExpiryDate"
            ]
        },
        "airbyte:index/SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodPrivateToken:SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodPrivateToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken"
            ]
        },
        "airbyte:index/SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodOAuth20:SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "clientId",
                "clientSecret",
                "refreshToken",
                "tokenExpiryDate"
            ]
        },
        "airbyte:index/SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodPrivateToken:SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodPrivateToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken"
            ]
        },
        "airbyte:index/SourceGlassfrogConfiguration:SourceGlassfrogConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key provided by Glassfrog\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"glassfrog\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ]
        },
        "airbyte:index/SourceGnewsConfiguration:SourceGnewsConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "endDate": {
                    "type": "string"
                },
                "ins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "language": {
                    "type": "string"
                },
                "nullables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "query": {
                    "type": "string"
                },
                "sortby": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string"
                },
                "topHeadlinesQuery": {
                    "type": "string"
                },
                "topHeadlinesTopic": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "query",
                "sourceType"
            ]
        },
        "airbyte:index/SourceGoogleAdsConfiguration:SourceGoogleAdsConfiguration": {
            "properties": {
                "conversionWindowDays": {
                    "type": "integer",
                    "description": "A conversion window is the number of days after an ad interaction (such as an ad click or video view) during which a conversion, such as a purchase, is recorded in Google Ads. For more information, see \\n\\nGoogle's documentation\\n\\n.\n"
                },
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceGoogleAdsConfigurationCredentials:SourceGoogleAdsConfigurationCredentials"
                },
                "customQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/airbyte:index/SourceGoogleAdsConfigurationCustomQuery:SourceGoogleAdsConfigurationCustomQuery"
                    }
                },
                "customerId": {
                    "type": "string",
                    "description": "Comma-separated list of (client) customer IDs. Each customer ID must be specified as a 10-digit number without dashes. For detailed instructions on finding this value, refer to our \\n\\ndocumentation\\n\\n.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "UTC date in the format YYYY-MM-DD. Any data after this date will not be replicated.\n"
                },
                "loginCustomerId": {
                    "type": "string",
                    "description": "If your access to the customer account is through a manager account, this field is required, and must be set to the 10-digit customer ID of the manager account. For more information about this field, refer to \\n\\nGoogle's documentation\\n\\n.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"google-ads\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date in the format YYYY-MM-DD. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "customerId",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceGoogleAdsConfigurationCredentials:SourceGoogleAdsConfigurationCredentials": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "developerToken": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "developerToken",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceGoogleAdsConfigurationCustomQuery:SourceGoogleAdsConfigurationCustomQuery": {
            "properties": {
                "query": {
                    "type": "string"
                },
                "tableName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "query",
                "tableName"
            ]
        },
        "airbyte:index/SourceGoogleAnalyticsDataApiConfiguration:SourceGoogleAnalyticsDataApiConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceGoogleAnalyticsDataApiConfigurationCredentials:SourceGoogleAnalyticsDataApiConfigurationCredentials",
                    "description": "Credentials for the service\n"
                },
                "customReports": {
                    "type": "string",
                    "description": "A JSON array describing the custom reports you want to sync from Google Analytics. See \\n\\nthe documentation\\n\\n for more information about the exact format you can use to fill out this field.\n"
                },
                "dateRangesStartDate": {
                    "type": "string",
                    "description": "The start date from which to replicate report data in the format YYYY-MM-DD. Data generated before this date will not be included in the report. Not applied to custom Cohort reports.\n"
                },
                "propertyId": {
                    "type": "string",
                    "description": "The Property ID is a unique number assigned to each property in Google Analytics, found in your GA4 property URL. This ID allows the connector to track the specific events associated with your property. Refer to the \\n\\nGoogle Analytics documentation\\n\\n to locate your property ID.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"google-analytics-data-api\"]\n"
                },
                "windowInDays": {
                    "type": "integer",
                    "description": "The interval in days for each data request made to the Google Analytics API. A larger value speeds up data sync, but increases the chance of data sampling, which may result in inaccuracies. We recommend a value of 1 to minimize sampling, unless speed is an absolute priority over accuracy. Acceptable values range from 1 to 364. Does not apply to custom Cohort reports. More information is available in \\n\\nthe documentation\\n\\n.\n"
                }
            },
            "type": "object",
            "required": [
                "dateRangesStartDate",
                "propertyId",
                "sourceType"
            ]
        },
        "airbyte:index/SourceGoogleAnalyticsDataApiConfigurationCredentials:SourceGoogleAnalyticsDataApiConfigurationCredentials": {
            "properties": {
                "sourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauth": {
                    "$ref": "#/types/airbyte:index/SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauth:SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauth"
                },
                "sourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthentication:SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthentication"
                },
                "sourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauth": {
                    "$ref": "#/types/airbyte:index/SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauth:SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauth"
                },
                "sourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthentication:SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthentication"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauth:SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauth": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthentication:SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthentication": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "credentialsJson": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentialsJson"
            ]
        },
        "airbyte:index/SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauth:SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauth": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthentication:SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthentication": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "credentialsJson": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentialsJson"
            ]
        },
        "airbyte:index/SourceGoogleAnalyticsV4Configuration:SourceGoogleAnalyticsV4Configuration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceGoogleAnalyticsV4ConfigurationCredentials:SourceGoogleAnalyticsV4ConfigurationCredentials",
                    "description": "Credentials for the service\n"
                },
                "customReports": {
                    "type": "string",
                    "description": "A JSON array describing the custom reports you want to sync from Google Analytics. See \\n\\nthe docs\\n\\n for more information about the exact format you can use to fill out this field.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"google-analytics-v4\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date in the format YYYY-MM-DD. Any data before this date will not be replicated.\n"
                },
                "viewId": {
                    "type": "string",
                    "description": "The ID for the Google Analytics View you want to fetch data from. This can be found from the \\n\\nGoogle Analytics Account Explorer\\n\\n.\n"
                },
                "windowInDays": {
                    "type": "integer",
                    "description": "The time increment used by the connector when requesting data from the Google Analytics API. More information is available in the \\n\\nthe docs\\n\\n. The bigger this value is, the faster the sync will be, but the more likely that sampling will be applied to your data, potentially causing inaccuracies in the returned results. We recommend setting this to 1 unless you have a hard requirement to make the sync faster at the expense of accuracy. The minimum allowed value for this field is 1, and the maximum is 364.\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType",
                "startDate",
                "viewId"
            ]
        },
        "airbyte:index/SourceGoogleAnalyticsV4ConfigurationCredentials:SourceGoogleAnalyticsV4ConfigurationCredentials": {
            "properties": {
                "sourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth": {
                    "$ref": "#/types/airbyte:index/SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth:SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth"
                },
                "sourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication:SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication"
                },
                "sourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth": {
                    "$ref": "#/types/airbyte:index/SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth:SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth"
                },
                "sourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication:SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth:SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication:SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "credentialsJson": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentialsJson"
            ]
        },
        "airbyte:index/SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth:SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication:SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "credentialsJson": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentialsJson"
            ]
        },
        "airbyte:index/SourceGoogleDirectoryConfiguration:SourceGoogleDirectoryConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceGoogleDirectoryConfigurationCredentials:SourceGoogleDirectoryConfigurationCredentials",
                    "description": "Google APIs use the OAuth 2.0 protocol for authentication and authorization. The Source supports \\n\\nWeb server application\\n\\n and \\n\\nService accounts\\n\\n scenarios.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"google-directory\"]\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType"
            ]
        },
        "airbyte:index/SourceGoogleDirectoryConfigurationCredentials:SourceGoogleDirectoryConfigurationCredentials": {
            "properties": {
                "sourceGoogleDirectoryGoogleCredentialsServiceAccountKey": {
                    "$ref": "#/types/airbyte:index/SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsServiceAccountKey:SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsServiceAccountKey"
                },
                "sourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuth": {
                    "$ref": "#/types/airbyte:index/SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuth:SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuth"
                },
                "sourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey": {
                    "$ref": "#/types/airbyte:index/SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey:SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey"
                },
                "sourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth": {
                    "$ref": "#/types/airbyte:index/SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth:SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsServiceAccountKey:SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsServiceAccountKey": {
            "properties": {
                "credentialsJson": {
                    "type": "string"
                },
                "credentialsTitle": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentialsJson",
                "email"
            ]
        },
        "airbyte:index/SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuth:SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuth": {
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "credentialsTitle": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey:SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey": {
            "properties": {
                "credentialsJson": {
                    "type": "string"
                },
                "credentialsTitle": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentialsJson",
                "email"
            ]
        },
        "airbyte:index/SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth:SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth": {
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "credentialsTitle": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceGooglePagespeedInsightsConfiguration:SourceGooglePagespeedInsightsConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Google PageSpeed API Key. See \\n\\nhere\\n\\n. The key is optional - however the API is heavily rate limited when using without API Key. Creating and using the API key therefore is recommended. The key is case sensitive.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines which Lighthouse category to run. One or many of: \"accessibility\", \"best-practices\", \"performance\", \"pwa\", \"seo\".\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"google-pagespeed-insights\"]\n"
                },
                "strategies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The analyses strategy to use. Either \"desktop\" or \"mobile\".\n"
                },
                "urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The URLs to retrieve pagespeed information from. The connector will attempt to sync PageSpeed reports for all the defined URLs. Format: https://(www.)url.domain\n"
                }
            },
            "type": "object",
            "required": [
                "categories",
                "sourceType",
                "strategies",
                "urls"
            ]
        },
        "airbyte:index/SourceGoogleSearchConsoleConfiguration:SourceGoogleSearchConsoleConfiguration": {
            "properties": {
                "authorization": {
                    "$ref": "#/types/airbyte:index/SourceGoogleSearchConsoleConfigurationAuthorization:SourceGoogleSearchConsoleConfigurationAuthorization"
                },
                "customReports": {
                    "type": "string",
                    "description": "A JSON array describing the custom reports you want to sync from Google Search Console. See \\n\\nthe docs\\n\\n for more information about the exact format you can use to fill out this field.\n"
                },
                "dataState": {
                    "type": "string",
                    "description": "must be one of [\"final\", \"all\"]\nIf \"final\" or if this parameter is omitted, the returned data will include only finalized data. Setting this parameter to \"all\" should not be used with Incremental Sync mode as it may cause data loss. If \"all\", data will include fresh data.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "UTC date in the format 2017-01-25. Any data after this date will not be replicated. Must be greater or equal to the start date field.\n"
                },
                "siteUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The URLs of the website property attached to your GSC account. Read more \\n\\nhere\\n\\n.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"google-search-console\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date in the format 2017-01-25. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "authorization",
                "siteUrls",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceGoogleSearchConsoleConfigurationAuthorization:SourceGoogleSearchConsoleConfigurationAuthorization": {
            "properties": {
                "sourceGoogleSearchConsoleAuthenticationTypeOAuth": {
                    "$ref": "#/types/airbyte:index/SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeOAuth:SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeOAuth"
                },
                "sourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication:SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication"
                },
                "sourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth": {
                    "$ref": "#/types/airbyte:index/SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth:SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth"
                },
                "sourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication:SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeOAuth:SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeOAuth": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication:SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "serviceAccountInfo": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "email",
                "serviceAccountInfo"
            ]
        },
        "airbyte:index/SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth:SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication:SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "serviceAccountInfo": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "email",
                "serviceAccountInfo"
            ]
        },
        "airbyte:index/SourceGoogleSheetsConfiguration:SourceGoogleSheetsConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceGoogleSheetsConfigurationCredentials:SourceGoogleSheetsConfigurationCredentials",
                    "description": "Credentials for connecting to the Google Sheets API\n"
                },
                "namesConversion": {
                    "type": "boolean",
                    "description": "Enables the conversion of column names to a standardized, SQL-compliant format. For example, 'My Name' \u003e 'my_name'. Enable this option if your destination is SQL-based.\n"
                },
                "rowBatchSize": {
                    "type": "integer",
                    "description": "The number of rows fetched when making a Google Sheet API call. Defaults to 200.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"google-sheets\"]\n"
                },
                "spreadsheetId": {
                    "type": "string",
                    "description": "Enter the link to the Google spreadsheet you want to sync. To copy the link, click the 'Share' button in the top-right corner of the spreadsheet, then click 'Copy link'.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "sourceType",
                "spreadsheetId"
            ]
        },
        "airbyte:index/SourceGoogleSheetsConfigurationCredentials:SourceGoogleSheetsConfigurationCredentials": {
            "properties": {
                "sourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth": {
                    "$ref": "#/types/airbyte:index/SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth:SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth"
                },
                "sourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication:SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication"
                },
                "sourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth": {
                    "$ref": "#/types/airbyte:index/SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth:SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth"
                },
                "sourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication:SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth:SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication:SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "serviceAccountInfo": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "serviceAccountInfo"
            ]
        },
        "airbyte:index/SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth:SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication:SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "serviceAccountInfo": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "serviceAccountInfo"
            ]
        },
        "airbyte:index/SourceGoogleWebfontsConfiguration:SourceGoogleWebfontsConfiguration": {
            "properties": {
                "alt": {
                    "type": "string",
                    "description": "Optional, Available params- json, media, proto\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key is required to access google apis, For getting your's goto google console and generate api key for Webfonts\n"
                },
                "prettyPrint": {
                    "type": "string",
                    "description": "Optional, boolean type\n"
                },
                "sort": {
                    "type": "string",
                    "description": "Optional, to find how to sort\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"google-webfonts\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ]
        },
        "airbyte:index/SourceGoogleWorkspaceAdminReportsConfiguration:SourceGoogleWorkspaceAdminReportsConfiguration": {
            "properties": {
                "credentialsJson": {
                    "type": "string",
                    "description": "The contents of the JSON service account key. See the \\n\\ndocs\\n\\n for more information on how to generate this key.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email of the user, which has permissions to access the Google Workspace Admin APIs.\n"
                },
                "lookback": {
                    "type": "integer",
                    "description": "Sets the range of time shown in the report. Reports API allows from up to 180 days ago.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"google-workspace-admin-reports\"]\n"
                }
            },
            "type": "object",
            "required": [
                "credentialsJson",
                "email",
                "sourceType"
            ]
        },
        "airbyte:index/SourceGreenhouseConfiguration:SourceGreenhouseConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Greenhouse API Key. See the \\n\\ndocs\\n\\n for more information on how to generate this key.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"greenhouse\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ]
        },
        "airbyte:index/SourceGridlyConfiguration:SourceGridlyConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string"
                },
                "gridId": {
                    "type": "string",
                    "description": "ID of a grid, or can be ID of a branch\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"gridly\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "gridId",
                "sourceType"
            ]
        },
        "airbyte:index/SourceHarvestConfiguration:SourceHarvestConfiguration": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Harvest account ID. Required for all Harvest requests in pair with Personal Access Token\n"
                },
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceHarvestConfigurationCredentials:SourceHarvestConfigurationCredentials",
                    "description": "Choose how to authenticate to Harvest.\n"
                },
                "replicationEndDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data after this date will not be replicated.\n"
                },
                "replicationStartDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"harvest\"]\n"
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "replicationStartDate",
                "sourceType"
            ]
        },
        "airbyte:index/SourceHarvestConfigurationCredentials:SourceHarvestConfigurationCredentials": {
            "properties": {
                "sourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth": {
                    "$ref": "#/types/airbyte:index/SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth:SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth"
                },
                "sourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken": {
                    "$ref": "#/types/airbyte:index/SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken:SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken"
                },
                "sourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth": {
                    "$ref": "#/types/airbyte:index/SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth:SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth"
                },
                "sourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken": {
                    "$ref": "#/types/airbyte:index/SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken:SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth:SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken:SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "apiToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken"
            ]
        },
        "airbyte:index/SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth:SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken:SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "apiToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken"
            ]
        },
        "airbyte:index/SourceHubplannerConfiguration:SourceHubplannerConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Hubplanner API key. See https://github.com/hubplanner/API#authentication for more details.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"hubplanner\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ]
        },
        "airbyte:index/SourceHubspotConfiguration:SourceHubspotConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceHubspotConfigurationCredentials:SourceHubspotConfigurationCredentials",
                    "description": "Choose how to authenticate to HubSpot.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"hubspot\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceHubspotConfigurationCredentials:SourceHubspotConfigurationCredentials": {
            "properties": {
                "sourceHubspotAuthenticationOAuth": {
                    "$ref": "#/types/airbyte:index/SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationOAuth:SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationOAuth"
                },
                "sourceHubspotAuthenticationPrivateApp": {
                    "$ref": "#/types/airbyte:index/SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationPrivateApp:SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationPrivateApp"
                },
                "sourceHubspotUpdateAuthenticationOAuth": {
                    "$ref": "#/types/airbyte:index/SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationOAuth:SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationOAuth"
                },
                "sourceHubspotUpdateAuthenticationPrivateApp": {
                    "$ref": "#/types/airbyte:index/SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationPrivateApp:SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationPrivateApp"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationOAuth:SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationOAuth": {
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "credentialsTitle": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "credentialsTitle",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationPrivateApp:SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationPrivateApp": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "credentialsTitle": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "credentialsTitle"
            ]
        },
        "airbyte:index/SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationOAuth:SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationOAuth": {
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "credentialsTitle": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "credentialsTitle",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationPrivateApp:SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationPrivateApp": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "credentialsTitle": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "credentialsTitle"
            ]
        },
        "airbyte:index/SourceInsightlyConfiguration:SourceInsightlyConfiguration": {
            "properties": {
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"insightly\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data for Insightly in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated. Note that it will be used only for incremental streams.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Your Insightly API token.\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType",
                "startDate",
                "token"
            ]
        },
        "airbyte:index/SourceInstagramConfiguration:SourceInstagramConfiguration": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "The value of the access token generated with \\n\\ninstagram*basic, instagram*manage*insights, pages*show*list, pages*read_engagement, Instagram Public Content Access\\n\\n permissions. See the \\n\\ndocs\\n\\n for more information\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The Client ID for your Oauth application\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The Client Secret for your Oauth application\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"instagram\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data for User Insights, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceInstatusConfiguration:SourceInstatusConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Instatus REST API key\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"instatus\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ]
        },
        "airbyte:index/SourceIntercomConfiguration:SourceIntercomConfiguration": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token for making authenticated requests. See the \\n\\nIntercom docs\\n\\n for more information.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"intercom\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceIp2whoisConfiguration:SourceIp2whoisConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Your API Key. See \\n\\nhere\\n\\n.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Domain name. See \\n\\nhere\\n\\n.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"ip2whois\"]\n"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceIterableConfiguration:SourceIterableConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Iterable API Key. See the \\n\\ndocs\\n\\n for more information on how to obtain this key.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"iterable\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data for Iterable, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceJiraConfiguration:SourceJiraConfiguration": {
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "Jira API Token. See the \\n\\ndocs\\n\\n for more information on how to generate this key. API Token is used for Authorization to your account by BasicAuth.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The Domain for your Jira account, e.g. airbyteio.atlassian.net, airbyteio.jira.com, jira.your-domain.com\n"
                },
                "email": {
                    "type": "string",
                    "description": "The user email for your Jira account which you used to generate the API token. This field is used for Authorization to your account by BasicAuth.\n"
                },
                "enableExperimentalStreams": {
                    "type": "boolean",
                    "description": "Allow the use of experimental streams which rely on undocumented Jira API endpoints. See https://docs.airbyte.com/integrations/sources/jira#experimental-tables for more info.\n"
                },
                "expandIssueChangelog": {
                    "type": "boolean",
                    "description": "Expand the changelog when replicating issues.\n"
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Jira project keys to replicate data for, or leave it empty if you want to replicate data for all projects.\n"
                },
                "renderFields": {
                    "type": "boolean",
                    "description": "Render issue fields in HTML format in addition to Jira JSON-like format.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"jira\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you want to replicate data from Jira, use the format YYYY-MM-DDT00:00:00Z. Note that this field only applies to certain streams, and only data generated on or after the start date will be replicated. Or leave it empty if you want to replicate all data. For more information, refer to the \\n\\ndocumentation\\n\\n.\n"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "domain",
                "email",
                "sourceType"
            ]
        },
        "airbyte:index/SourceK6CloudConfiguration:SourceK6CloudConfiguration": {
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "Your API Token. See \\n\\nhere\\n\\n. The key is case sensitive.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"k6-cloud\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "sourceType"
            ]
        },
        "airbyte:index/SourceKlarnaConfiguration:SourceKlarnaConfiguration": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "A string which is associated with your Merchant ID and is used to authorize use of Klarna's APIs (https://developers.klarna.com/api/#authentication)\n"
                },
                "playground": {
                    "type": "boolean",
                    "description": "Propertie defining if connector is used against playground or production environment\n"
                },
                "region": {
                    "type": "string",
                    "description": "must be one of [\"eu\", \"us\", \"oc\"]\nBase url region (For playground eu https://docs.klarna.com/klarna-payments/api/payments-api/#tag/API-URLs). Supported 'eu', 'us', 'oc'\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"klarna\"]\n"
                },
                "username": {
                    "type": "string",
                    "description": "Consists of your Merchant ID (eid) - a unique number that identifies your e-store, combined with a random string (https://developers.klarna.com/api/#authentication)\n"
                }
            },
            "type": "object",
            "required": [
                "password",
                "playground",
                "region",
                "sourceType",
                "username"
            ]
        },
        "airbyte:index/SourceKlaviyoConfiguration:SourceKlaviyoConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Klaviyo API Key. See our \\n\\ndocs\\n\\n if you need help finding this key.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"klaviyo\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceKustomerSingerConfiguration:SourceKustomerSingerConfiguration": {
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "Kustomer API Token. See the \\n\\ndocs\\n\\n on how to obtain this\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"kustomer-singer\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate the data\n"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceKyveConfiguration:SourceKyveConfiguration": {
            "properties": {
                "maxPages": {
                    "type": "integer",
                    "description": "The maximum amount of pages to go trough. Set to 'null' for all pages.\n"
                },
                "pageSize": {
                    "type": "integer",
                    "description": "The pagesize for pagination, smaller numbers are used in integration tests.\n"
                },
                "poolIds": {
                    "type": "string",
                    "description": "The IDs of the KYVE storage pool you want to archive. (Comma separated)\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"kyve\"]\n"
                },
                "startIds": {
                    "type": "string",
                    "description": "The start-id defines, from which bundle id the pipeline should start to extract the data (Comma separated)\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "URL to the KYVE Chain API.\n"
                }
            },
            "type": "object",
            "required": [
                "poolIds",
                "sourceType",
                "startIds"
            ]
        },
        "airbyte:index/SourceLaunchdarklyConfiguration:SourceLaunchdarklyConfiguration": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Your Access token. See \\n\\nhere\\n\\n.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"launchdarkly\"]\n"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "sourceType"
            ]
        },
        "airbyte:index/SourceLemlistConfiguration:SourceLemlistConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Lemlist API key.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"lemlist\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ]
        },
        "airbyte:index/SourceLeverHiringConfiguration:SourceLeverHiringConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceLeverHiringConfigurationCredentials:SourceLeverHiringConfigurationCredentials",
                    "description": "Choose how to authenticate to Lever Hiring.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "must be one of [\"Production\", \"Sandbox\"]\nThe environment in which you'd like to replicate data for Lever. This is used to determine which Lever API endpoint to use.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"lever-hiring\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated. Note that it will be used only in the following incremental streams: comments, commits, and issues.\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceLeverHiringConfigurationCredentials:SourceLeverHiringConfigurationCredentials": {
            "properties": {
                "sourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKey": {
                    "$ref": "#/types/airbyte:index/SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKey:SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKey"
                },
                "sourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth": {
                    "$ref": "#/types/airbyte:index/SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth:SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth"
                },
                "sourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKey": {
                    "$ref": "#/types/airbyte:index/SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKey:SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKey"
                },
                "sourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth": {
                    "$ref": "#/types/airbyte:index/SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth:SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKey:SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKey": {
            "properties": {
                "apiKey": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiKey"
            ]
        },
        "airbyte:index/SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth:SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "refreshToken"
            ]
        },
        "airbyte:index/SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKey:SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKey": {
            "properties": {
                "apiKey": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiKey"
            ]
        },
        "airbyte:index/SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth:SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "refreshToken"
            ]
        },
        "airbyte:index/SourceLinkedinAdsConfiguration:SourceLinkedinAdsConfiguration": {
            "properties": {
                "accountIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Specify the account IDs separated by a space, to pull the data from. Leave empty, if you want to pull the data from all associated accounts. See the \\n\\nLinkedIn Ads docs\\n\\n for more info.\n"
                },
                "adAnalyticsReports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/airbyte:index/SourceLinkedinAdsConfigurationAdAnalyticsReport:SourceLinkedinAdsConfigurationAdAnalyticsReport"
                    }
                },
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceLinkedinAdsConfigurationCredentials:SourceLinkedinAdsConfigurationCredentials"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"linkedin-ads\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date in the format 2020-09-17. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceLinkedinAdsConfigurationAdAnalyticsReport:SourceLinkedinAdsConfigurationAdAnalyticsReport": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "pivotBy": {
                    "type": "string"
                },
                "timeGranularity": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "pivotBy",
                "timeGranularity"
            ]
        },
        "airbyte:index/SourceLinkedinAdsConfigurationCredentials:SourceLinkedinAdsConfigurationCredentials": {
            "properties": {
                "sourceLinkedinAdsAuthenticationAccessToken": {
                    "$ref": "#/types/airbyte:index/SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationAccessToken:SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationAccessToken"
                },
                "sourceLinkedinAdsAuthenticationOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationOAuth20:SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationOAuth20"
                },
                "sourceLinkedinAdsUpdateAuthenticationAccessToken": {
                    "$ref": "#/types/airbyte:index/SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationAccessToken:SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationAccessToken"
                },
                "sourceLinkedinAdsUpdateAuthenticationOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationOAuth20:SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationOAuth20"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationAccessToken:SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationAccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken"
            ]
        },
        "airbyte:index/SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationOAuth20:SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationOAuth20": {
            "properties": {
                "authMethod": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationAccessToken:SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationAccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken"
            ]
        },
        "airbyte:index/SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationOAuth20:SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationOAuth20": {
            "properties": {
                "authMethod": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceLinkedinPagesConfiguration:SourceLinkedinPagesConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceLinkedinPagesConfigurationCredentials:SourceLinkedinPagesConfigurationCredentials"
                },
                "orgId": {
                    "type": "string",
                    "description": "Specify the Organization ID\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"linkedin-pages\"]\n"
                }
            },
            "type": "object",
            "required": [
                "orgId",
                "sourceType"
            ]
        },
        "airbyte:index/SourceLinkedinPagesConfigurationCredentials:SourceLinkedinPagesConfigurationCredentials": {
            "properties": {
                "sourceLinkedinPagesAuthenticationAccessToken": {
                    "$ref": "#/types/airbyte:index/SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationAccessToken:SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationAccessToken"
                },
                "sourceLinkedinPagesAuthenticationOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationOAuth20:SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationOAuth20"
                },
                "sourceLinkedinPagesUpdateAuthenticationAccessToken": {
                    "$ref": "#/types/airbyte:index/SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationAccessToken:SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationAccessToken"
                },
                "sourceLinkedinPagesUpdateAuthenticationOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationOAuth20:SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationOAuth20"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationAccessToken:SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationAccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken"
            ]
        },
        "airbyte:index/SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationOAuth20:SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationOAuth20": {
            "properties": {
                "authMethod": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationAccessToken:SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationAccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken"
            ]
        },
        "airbyte:index/SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationOAuth20:SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationOAuth20": {
            "properties": {
                "authMethod": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceLinnworksConfiguration:SourceLinnworksConfiguration": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Linnworks Application ID\n"
                },
                "applicationSecret": {
                    "type": "string",
                    "description": "Linnworks Application Secret\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"linnworks\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                },
                "token": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "applicationId",
                "applicationSecret",
                "sourceType",
                "startDate",
                "token"
            ]
        },
        "airbyte:index/SourceLokaliseConfiguration:SourceLokaliseConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Lokalise API Key with read-access. Available at Profile settings \u003e API tokens. See \\n\\nhere\\n\\n.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Lokalise project ID. Available at Project Settings \u003e General.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"lokalise\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "projectId",
                "sourceType"
            ]
        },
        "airbyte:index/SourceMailchimpConfiguration:SourceMailchimpConfiguration": {
            "properties": {
                "campaignId": {
                    "type": "string"
                },
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceMailchimpConfigurationCredentials:SourceMailchimpConfigurationCredentials"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"mailchimp\"]\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType"
            ]
        },
        "airbyte:index/SourceMailchimpConfigurationCredentials:SourceMailchimpConfigurationCredentials": {
            "properties": {
                "sourceMailchimpAuthenticationApiKey": {
                    "$ref": "#/types/airbyte:index/SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationApiKey:SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationApiKey"
                },
                "sourceMailchimpAuthenticationOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationOAuth20:SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationOAuth20"
                },
                "sourceMailchimpUpdateAuthenticationApiKey": {
                    "$ref": "#/types/airbyte:index/SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationApiKey:SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationApiKey"
                },
                "sourceMailchimpUpdateAuthenticationOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationOAuth20:SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationOAuth20"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationApiKey:SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationApiKey": {
            "properties": {
                "apikey": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apikey",
                "authType"
            ]
        },
        "airbyte:index/SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationOAuth20:SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType"
            ]
        },
        "airbyte:index/SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationApiKey:SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationApiKey": {
            "properties": {
                "apikey": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apikey",
                "authType"
            ]
        },
        "airbyte:index/SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationOAuth20:SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType"
            ]
        },
        "airbyte:index/SourceMailgunConfiguration:SourceMailgunConfiguration": {
            "properties": {
                "domainRegion": {
                    "type": "string",
                    "description": "Domain region code. 'EU' or 'US' are possible values. The default is 'US'.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "Primary account API key to access your Mailgun data.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"mailgun\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2020-10-01 00:00:00. Any data before this date will not be replicated. If omitted, defaults to 3 days ago.\n"
                }
            },
            "type": "object",
            "required": [
                "privateKey",
                "sourceType"
            ]
        },
        "airbyte:index/SourceMailjetSmsConfiguration:SourceMailjetSmsConfiguration": {
            "properties": {
                "endDate": {
                    "type": "integer",
                    "description": "Retrieve SMS messages created before the specified timestamp. Required format - Unix timestamp.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"mailjet-sms\"]\n"
                },
                "startDate": {
                    "type": "integer",
                    "description": "Retrieve SMS messages created after the specified timestamp. Required format - Unix timestamp.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Your access token. See \\n\\nhere\\n\\n.\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType",
                "token"
            ]
        },
        "airbyte:index/SourceMarketoConfiguration:SourceMarketoConfiguration": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The Client ID of your Marketo developer application. See \\n\\n the docs \\n\\n for info on how to obtain this.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The Client Secret of your Marketo developer application. See \\n\\n the docs \\n\\n for info on how to obtain this.\n"
                },
                "domainUrl": {
                    "type": "string",
                    "description": "Your Marketo Base URL. See \\n\\n the docs \\n\\n for info on how to obtain this.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"marketo\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "domainUrl",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceMetabaseConfiguration:SourceMetabaseConfiguration": {
            "properties": {
                "instanceApiUrl": {
                    "type": "string",
                    "description": "URL to your metabase instance API\n"
                },
                "password": {
                    "type": "string"
                },
                "sessionToken": {
                    "type": "string",
                    "description": "To generate your session token, you need to run the following command: `curl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d '{\"username\": \"person@metabase.com\", \"password\": \"fakepassword\"}' \\\nhttp://localhost:3000/api/session\n` Then copy the value of the `id` field returned by a successful call to that API.\nNote that by default, sessions are good for 14 days and needs to be regenerated.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"metabase\"]\n"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "instanceApiUrl",
                "sourceType"
            ]
        },
        "airbyte:index/SourceMicrosoftTeamsConfiguration:SourceMicrosoftTeamsConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceMicrosoftTeamsConfigurationCredentials:SourceMicrosoftTeamsConfigurationCredentials",
                    "description": "Choose how to authenticate to Microsoft\n"
                },
                "period": {
                    "type": "string",
                    "description": "Specifies the length of time over which the Team Device Report stream is aggregated. The supported values are: D7, D30, D90, and D180.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"microsoft-teams\"]\n"
                }
            },
            "type": "object",
            "required": [
                "period",
                "sourceType"
            ]
        },
        "airbyte:index/SourceMicrosoftTeamsConfigurationCredentials:SourceMicrosoftTeamsConfigurationCredentials": {
            "properties": {
                "sourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft": {
                    "$ref": "#/types/airbyte:index/SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft:SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft"
                },
                "sourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20:SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20"
                },
                "sourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoft": {
                    "$ref": "#/types/airbyte:index/SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoft:SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoft"
                },
                "sourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20:SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft:SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "tenantId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "tenantId"
            ]
        },
        "airbyte:index/SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20:SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tenantId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "refreshToken",
                "tenantId"
            ]
        },
        "airbyte:index/SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoft:SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoft": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "tenantId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "tenantId"
            ]
        },
        "airbyte:index/SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20:SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tenantId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "refreshToken",
                "tenantId"
            ]
        },
        "airbyte:index/SourceMixpanelConfiguration:SourceMixpanelConfiguration": {
            "properties": {
                "attributionWindow": {
                    "type": "integer",
                    "description": "A period of time for attributing results to ads and the lookback period after those actions occur during which ad results are counted. Default attribution window is 5 days.\n"
                },
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceMixpanelConfigurationCredentials:SourceMixpanelConfigurationCredentials",
                    "description": "Choose how to authenticate to Mixpanel\n"
                },
                "dateWindowSize": {
                    "type": "integer",
                    "description": "Defines window size in days, that used to slice through data. You can reduce it, if amount of data in each window is too big for your environment.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "The date in the format YYYY-MM-DD. Any data after this date will not be replicated. Left empty to always sync to most recent date\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Your project ID number. See the \\n\\ndocs\\n\\n for more information on how to obtain this.\n"
                },
                "projectTimezone": {
                    "type": "string",
                    "description": "Time zone in which integer date times are stored. The project timezone may be found in the project settings in the \\n\\nMixpanel console\\n\\n.\n"
                },
                "region": {
                    "type": "string",
                    "description": "must be one of [\"US\", \"EU\"]\nThe region of mixpanel domain instance either US or EU.\n"
                },
                "selectPropertiesByDefault": {
                    "type": "boolean",
                    "description": "Setting this config parameter to TRUE ensures that new properties on events and engage records are captured. Otherwise new properties will be ignored.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"mixpanel\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date in the format YYYY-MM-DD. Any data before this date will not be replicated. If this option is not set, the connector will replicate data from up to one year ago by default.\n"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceMixpanelConfigurationCredentials:SourceMixpanelConfigurationCredentials": {
            "properties": {
                "sourceMixpanelAuthenticationWildcardProjectSecret": {
                    "$ref": "#/types/airbyte:index/SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecret:SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecret"
                },
                "sourceMixpanelAuthenticationWildcardServiceAccount": {
                    "$ref": "#/types/airbyte:index/SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccount:SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccount"
                },
                "sourceMixpanelUpdateAuthenticationWildcardProjectSecret": {
                    "$ref": "#/types/airbyte:index/SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecret:SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecret"
                },
                "sourceMixpanelUpdateAuthenticationWildcardServiceAccount": {
                    "$ref": "#/types/airbyte:index/SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccount:SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccount"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecret:SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecret": {
            "properties": {
                "apiSecret": {
                    "type": "string"
                },
                "optionTitle": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiSecret"
            ]
        },
        "airbyte:index/SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccount:SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccount": {
            "properties": {
                "optionTitle": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "secret",
                "username"
            ]
        },
        "airbyte:index/SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecret:SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecret": {
            "properties": {
                "apiSecret": {
                    "type": "string"
                },
                "optionTitle": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiSecret"
            ]
        },
        "airbyte:index/SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccount:SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccount": {
            "properties": {
                "optionTitle": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "secret",
                "username"
            ]
        },
        "airbyte:index/SourceMondayConfiguration:SourceMondayConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceMondayConfigurationCredentials:SourceMondayConfigurationCredentials"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"monday\"]\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType"
            ]
        },
        "airbyte:index/SourceMondayConfigurationCredentials:SourceMondayConfigurationCredentials": {
            "properties": {
                "sourceMondayAuthorizationMethodApiToken": {
                    "$ref": "#/types/airbyte:index/SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodApiToken:SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodApiToken"
                },
                "sourceMondayAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodOAuth20:SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodOAuth20"
                },
                "sourceMondayUpdateAuthorizationMethodApiToken": {
                    "$ref": "#/types/airbyte:index/SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodApiToken:SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodApiToken"
                },
                "sourceMondayUpdateAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodOAuth20:SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodOAuth20"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodApiToken:SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodApiToken": {
            "properties": {
                "apiToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "authType"
            ]
        },
        "airbyte:index/SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodOAuth20:SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "subdomain": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret"
            ]
        },
        "airbyte:index/SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodApiToken:SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodApiToken": {
            "properties": {
                "apiToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "authType"
            ]
        },
        "airbyte:index/SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodOAuth20:SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "subdomain": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret"
            ]
        },
        "airbyte:index/SourceMongodbConfiguration:SourceMongodbConfiguration": {
            "properties": {
                "authSource": {
                    "type": "string",
                    "description": "The authentication source where the user information is stored.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database you want to replicate.\n"
                },
                "instanceType": {
                    "$ref": "#/types/airbyte:index/SourceMongodbConfigurationInstanceType:SourceMongodbConfigurationInstanceType",
                    "description": "The MongoDb instance to connect to. For MongoDB Atlas and Replica Set TLS connection is used by default.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password associated with this username.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"mongodb\"]\n"
                },
                "user": {
                    "type": "string",
                    "description": "The username which is used to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "sourceType"
            ]
        },
        "airbyte:index/SourceMongodbConfigurationInstanceType:SourceMongodbConfigurationInstanceType": {
            "properties": {
                "sourceMongodbMongoDbInstanceTypeMongoDbAtlas": {
                    "$ref": "#/types/airbyte:index/SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeMongoDbAtlas:SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeMongoDbAtlas"
                },
                "sourceMongodbMongoDbInstanceTypeReplicaSet": {
                    "$ref": "#/types/airbyte:index/SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeReplicaSet:SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeReplicaSet"
                },
                "sourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance": {
                    "$ref": "#/types/airbyte:index/SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance:SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance"
                },
                "sourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlas": {
                    "$ref": "#/types/airbyte:index/SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlas:SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlas"
                },
                "sourceMongodbUpdateMongoDbInstanceTypeReplicaSet": {
                    "$ref": "#/types/airbyte:index/SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSet:SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSet"
                },
                "sourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance": {
                    "$ref": "#/types/airbyte:index/SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance:SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeMongoDbAtlas:SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeMongoDbAtlas": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "clusterUrl": {
                    "type": "string"
                },
                "instance": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clusterUrl",
                "instance"
            ]
        },
        "airbyte:index/SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeReplicaSet:SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeReplicaSet": {
            "properties": {
                "instance": {
                    "type": "string"
                },
                "replicaSet": {
                    "type": "string"
                },
                "serverAddresses": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "instance",
                "serverAddresses"
            ]
        },
        "airbyte:index/SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance:SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "instance": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "host",
                "instance",
                "port"
            ]
        },
        "airbyte:index/SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlas:SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlas": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "clusterUrl": {
                    "type": "string"
                },
                "instance": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clusterUrl",
                "instance"
            ]
        },
        "airbyte:index/SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSet:SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSet": {
            "properties": {
                "instance": {
                    "type": "string"
                },
                "replicaSet": {
                    "type": "string"
                },
                "serverAddresses": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "instance",
                "serverAddresses"
            ]
        },
        "airbyte:index/SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance:SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "instance": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "host",
                "instance",
                "port"
            ]
        },
        "airbyte:index/SourceMongodbInternalPocConfiguration:SourceMongodbInternalPocConfiguration": {
            "properties": {
                "authSource": {
                    "type": "string",
                    "description": "The authentication source where the user information is stored.\n"
                },
                "connectionString": {
                    "type": "string",
                    "description": "The connection string of the database that you want to replicate..\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password associated with this username.\n"
                },
                "replicaSet": {
                    "type": "string",
                    "description": "The name of the replica set to be replicated.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"mongodb-internal-poc\"]\n"
                },
                "user": {
                    "type": "string",
                    "description": "The username which is used to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType"
            ]
        },
        "airbyte:index/SourceMssqlConfiguration:SourceMssqlConfiguration": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The name of the database.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The hostname of the database.\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '\u0026'. (example: key1=value1\u0026key2=value2\u0026key3=value3).\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password associated with the username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port of the database.\n"
                },
                "replicationMethod": {
                    "$ref": "#/types/airbyte:index/SourceMssqlConfigurationReplicationMethod:SourceMssqlConfigurationReplicationMethod",
                    "description": "The replication method used for extracting data from the database. STANDARD replication requires no setup on the DB side but will not be able to represent deletions incrementally. CDC uses {TBC} to detect inserts, updates, and deletes. This needs to be configured on the source database itself.\n"
                },
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of schemas to sync from. Defaults to user. Case sensitive.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"mssql\"]\n"
                },
                "sslMethod": {
                    "$ref": "#/types/airbyte:index/SourceMssqlConfigurationSslMethod:SourceMssqlConfigurationSslMethod",
                    "description": "The encryption method which is used when communicating with the database.\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/SourceMssqlConfigurationTunnelMethod:SourceMssqlConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username which is used to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "host",
                "port",
                "sourceType",
                "username"
            ]
        },
        "airbyte:index/SourceMssqlConfigurationReplicationMethod:SourceMssqlConfigurationReplicationMethod": {
            "properties": {
                "sourceMssqlReplicationMethodLogicalReplicationCdc": {
                    "$ref": "#/types/airbyte:index/SourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodLogicalReplicationCdc:SourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodLogicalReplicationCdc"
                },
                "sourceMssqlReplicationMethodStandard": {
                    "$ref": "#/types/airbyte:index/SourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodStandard:SourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodStandard"
                },
                "sourceMssqlUpdateReplicationMethodLogicalReplicationCdc": {
                    "$ref": "#/types/airbyte:index/SourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodLogicalReplicationCdc:SourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodLogicalReplicationCdc"
                },
                "sourceMssqlUpdateReplicationMethodStandard": {
                    "$ref": "#/types/airbyte:index/SourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodStandard:SourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodStandard"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodLogicalReplicationCdc:SourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodLogicalReplicationCdc": {
            "properties": {
                "dataToSync": {
                    "type": "string"
                },
                "initialWaitingSeconds": {
                    "type": "integer"
                },
                "method": {
                    "type": "string"
                },
                "snapshotIsolation": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ]
        },
        "airbyte:index/SourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodStandard:SourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodStandard": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ]
        },
        "airbyte:index/SourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodLogicalReplicationCdc:SourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodLogicalReplicationCdc": {
            "properties": {
                "dataToSync": {
                    "type": "string"
                },
                "initialWaitingSeconds": {
                    "type": "integer"
                },
                "method": {
                    "type": "string"
                },
                "snapshotIsolation": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ]
        },
        "airbyte:index/SourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodStandard:SourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodStandard": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ]
        },
        "airbyte:index/SourceMssqlConfigurationSslMethod:SourceMssqlConfigurationSslMethod": {
            "properties": {
                "sourceMssqlSslMethodEncryptedTrustServerCertificate": {
                    "$ref": "#/types/airbyte:index/SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedTrustServerCertificate:SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedTrustServerCertificate"
                },
                "sourceMssqlSslMethodEncryptedVerifyCertificate": {
                    "$ref": "#/types/airbyte:index/SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedVerifyCertificate:SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedVerifyCertificate"
                },
                "sourceMssqlUpdateSslMethodEncryptedTrustServerCertificate": {
                    "$ref": "#/types/airbyte:index/SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedTrustServerCertificate:SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedTrustServerCertificate"
                },
                "sourceMssqlUpdateSslMethodEncryptedVerifyCertificate": {
                    "$ref": "#/types/airbyte:index/SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedVerifyCertificate:SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedVerifyCertificate"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedTrustServerCertificate:SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedTrustServerCertificate": {
            "properties": {
                "sslMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sslMethod"
            ]
        },
        "airbyte:index/SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedVerifyCertificate:SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedVerifyCertificate": {
            "properties": {
                "hostNameInCertificate": {
                    "type": "string"
                },
                "sslMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sslMethod"
            ]
        },
        "airbyte:index/SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedTrustServerCertificate:SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedTrustServerCertificate": {
            "properties": {
                "sslMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sslMethod"
            ]
        },
        "airbyte:index/SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedVerifyCertificate:SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedVerifyCertificate": {
            "properties": {
                "hostNameInCertificate": {
                    "type": "string"
                },
                "sslMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sslMethod"
            ]
        },
        "airbyte:index/SourceMssqlConfigurationTunnelMethod:SourceMssqlConfigurationTunnelMethod": {
            "properties": {
                "sourceMssqlSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodNoTunnel:SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodNoTunnel"
                },
                "sourceMssqlSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodPasswordAuthentication:SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodPasswordAuthentication"
                },
                "sourceMssqlSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodSshKeyAuthentication:SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodSshKeyAuthentication"
                },
                "sourceMssqlUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodNoTunnel:SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodNoTunnel"
                },
                "sourceMssqlUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodPasswordAuthentication:SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodPasswordAuthentication"
                },
                "sourceMssqlUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodSshKeyAuthentication:SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodNoTunnel:SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodPasswordAuthentication:SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodSshKeyAuthentication:SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodNoTunnel:SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodPasswordAuthentication:SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodSshKeyAuthentication:SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/SourceMyHoursConfiguration:SourceMyHoursConfiguration": {
            "properties": {
                "email": {
                    "type": "string",
                    "description": "Your My Hours username\n"
                },
                "logsBatchSize": {
                    "type": "integer",
                    "description": "Pagination size used for retrieving logs in days\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password associated to the username\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"my-hours\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Start date for collecting time logs\n"
                }
            },
            "type": "object",
            "required": [
                "email",
                "password",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceMysqlConfiguration:SourceMysqlConfiguration": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The database name.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The host name of the database.\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '\u0026'. (example: key1=value1\u0026key2=value2\u0026key3=value3). For more information read about \\n\\nJDBC URL parameters\\n\\n.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password associated with the username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to connect to.\n"
                },
                "replicationMethod": {
                    "$ref": "#/types/airbyte:index/SourceMysqlConfigurationReplicationMethod:SourceMysqlConfigurationReplicationMethod",
                    "description": "Configures how data is extracted from the database.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"mysql\"]\n"
                },
                "sslMode": {
                    "$ref": "#/types/airbyte:index/SourceMysqlConfigurationSslMode:SourceMysqlConfigurationSslMode",
                    "description": "SSL connection modes. Read more \\n\\n in the docs\\n\\n.\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/SourceMysqlConfigurationTunnelMethod:SourceMysqlConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username which is used to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "host",
                "port",
                "replicationMethod",
                "sourceType",
                "username"
            ]
        },
        "airbyte:index/SourceMysqlConfigurationReplicationMethod:SourceMysqlConfigurationReplicationMethod": {
            "properties": {
                "sourceMysqlUpdateMethodReadChangesUsingBinaryLogCdc": {
                    "$ref": "#/types/airbyte:index/SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodReadChangesUsingBinaryLogCdc:SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodReadChangesUsingBinaryLogCdc"
                },
                "sourceMysqlUpdateMethodScanChangesWithUserDefinedCursor": {
                    "$ref": "#/types/airbyte:index/SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodScanChangesWithUserDefinedCursor:SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodScanChangesWithUserDefinedCursor"
                },
                "sourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdc": {
                    "$ref": "#/types/airbyte:index/SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdc:SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdc"
                },
                "sourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursor": {
                    "$ref": "#/types/airbyte:index/SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursor:SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursor"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodReadChangesUsingBinaryLogCdc:SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodReadChangesUsingBinaryLogCdc": {
            "properties": {
                "initialWaitingSeconds": {
                    "type": "integer"
                },
                "method": {
                    "type": "string"
                },
                "serverTimeZone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ]
        },
        "airbyte:index/SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodScanChangesWithUserDefinedCursor:SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodScanChangesWithUserDefinedCursor": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ]
        },
        "airbyte:index/SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdc:SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdc": {
            "properties": {
                "initialWaitingSeconds": {
                    "type": "integer"
                },
                "method": {
                    "type": "string"
                },
                "serverTimeZone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ]
        },
        "airbyte:index/SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursor:SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursor": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ]
        },
        "airbyte:index/SourceMysqlConfigurationSslMode:SourceMysqlConfigurationSslMode": {
            "properties": {
                "sourceMysqlSslModesPreferred": {
                    "$ref": "#/types/airbyte:index/SourceMysqlConfigurationSslModeSourceMysqlSslModesPreferred:SourceMysqlConfigurationSslModeSourceMysqlSslModesPreferred"
                },
                "sourceMysqlSslModesRequired": {
                    "$ref": "#/types/airbyte:index/SourceMysqlConfigurationSslModeSourceMysqlSslModesRequired:SourceMysqlConfigurationSslModeSourceMysqlSslModesRequired"
                },
                "sourceMysqlSslModesVerifyCa": {
                    "$ref": "#/types/airbyte:index/SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyCa:SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyCa"
                },
                "sourceMysqlSslModesVerifyIdentity": {
                    "$ref": "#/types/airbyte:index/SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyIdentity:SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyIdentity"
                },
                "sourceMysqlUpdateSslModesPreferred": {
                    "$ref": "#/types/airbyte:index/SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesPreferred:SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesPreferred"
                },
                "sourceMysqlUpdateSslModesRequired": {
                    "$ref": "#/types/airbyte:index/SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesRequired:SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesRequired"
                },
                "sourceMysqlUpdateSslModesVerifyCa": {
                    "$ref": "#/types/airbyte:index/SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyCa:SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyCa"
                },
                "sourceMysqlUpdateSslModesVerifyIdentity": {
                    "$ref": "#/types/airbyte:index/SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyIdentity:SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyIdentity"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceMysqlConfigurationSslModeSourceMysqlSslModesPreferred:SourceMysqlConfigurationSslModeSourceMysqlSslModesPreferred": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/SourceMysqlConfigurationSslModeSourceMysqlSslModesRequired:SourceMysqlConfigurationSslModeSourceMysqlSslModesRequired": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyCa:SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyCa": {
            "properties": {
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "mode"
            ]
        },
        "airbyte:index/SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyIdentity:SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyIdentity": {
            "properties": {
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "mode"
            ]
        },
        "airbyte:index/SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesPreferred:SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesPreferred": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesRequired:SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesRequired": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyCa:SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyCa": {
            "properties": {
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "mode"
            ]
        },
        "airbyte:index/SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyIdentity:SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyIdentity": {
            "properties": {
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "mode"
            ]
        },
        "airbyte:index/SourceMysqlConfigurationTunnelMethod:SourceMysqlConfigurationTunnelMethod": {
            "properties": {
                "sourceMysqlSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodNoTunnel:SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodNoTunnel"
                },
                "sourceMysqlSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodPasswordAuthentication:SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodPasswordAuthentication"
                },
                "sourceMysqlSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodSshKeyAuthentication:SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodSshKeyAuthentication"
                },
                "sourceMysqlUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodNoTunnel:SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodNoTunnel"
                },
                "sourceMysqlUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodPasswordAuthentication:SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodPasswordAuthentication"
                },
                "sourceMysqlUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodSshKeyAuthentication:SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodNoTunnel:SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodPasswordAuthentication:SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodSshKeyAuthentication:SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodNoTunnel:SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodPasswordAuthentication:SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodSshKeyAuthentication:SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/SourceNetsuiteConfiguration:SourceNetsuiteConfiguration": {
            "properties": {
                "consumerKey": {
                    "type": "string",
                    "description": "Consumer key associated with your integration\n"
                },
                "consumerSecret": {
                    "type": "string",
                    "description": "Consumer secret associated with your integration\n"
                },
                "objectTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The API names of the Netsuite objects you want to sync. Setting this speeds up the connection setup process by limiting the number of schemas that need to be retrieved from Netsuite.\n"
                },
                "realm": {
                    "type": "string",
                    "description": "Netsuite realm e.g. 2344535, as for `production` or 2344535_SB1, as for the `sandbox`\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"netsuite\"]\n"
                },
                "startDatetime": {
                    "type": "string",
                    "description": "Starting point for your data replication, in format of \"YYYY-MM-DDTHH:mm:ssZ\"\n"
                },
                "tokenKey": {
                    "type": "string",
                    "description": "Access token key\n"
                },
                "tokenSecret": {
                    "type": "string",
                    "description": "Access token secret\n"
                },
                "windowInDays": {
                    "type": "integer",
                    "description": "The amount of days used to query the data with date chunks. Set smaller value, if you have lots of data.\n"
                }
            },
            "type": "object",
            "required": [
                "consumerKey",
                "consumerSecret",
                "realm",
                "sourceType",
                "startDatetime",
                "tokenKey",
                "tokenSecret"
            ]
        },
        "airbyte:index/SourceNotionConfiguration:SourceNotionConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceNotionConfigurationCredentials:SourceNotionConfigurationCredentials",
                    "description": "Pick an authentication method.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"notion\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00.000Z. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceNotionConfigurationCredentials:SourceNotionConfigurationCredentials": {
            "properties": {
                "sourceNotionAuthenticateUsingAccessToken": {
                    "$ref": "#/types/airbyte:index/SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingAccessToken:SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingAccessToken"
                },
                "sourceNotionAuthenticateUsingOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingOAuth20:SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingOAuth20"
                },
                "sourceNotionUpdateAuthenticateUsingAccessToken": {
                    "$ref": "#/types/airbyte:index/SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingAccessToken:SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingAccessToken"
                },
                "sourceNotionUpdateAuthenticateUsingOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingOAuth20:SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingOAuth20"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingAccessToken:SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingAccessToken": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "token"
            ]
        },
        "airbyte:index/SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingOAuth20:SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret"
            ]
        },
        "airbyte:index/SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingAccessToken:SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingAccessToken": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "token"
            ]
        },
        "airbyte:index/SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingOAuth20:SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret"
            ]
        },
        "airbyte:index/SourceNytimesConfiguration:SourceNytimesConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "End date to stop the article retrieval (format YYYY-MM)\n"
                },
                "period": {
                    "type": "integer",
                    "description": "must be one of [\"1\", \"7\", \"30\"]\nPeriod of time (in days)\n"
                },
                "shareType": {
                    "type": "string",
                    "description": "must be one of [\"facebook\"]\nShare Type\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"nytimes\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Start date to begin the article retrieval (format YYYY-MM)\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "period",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceOktaConfiguration:SourceOktaConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceOktaConfigurationCredentials:SourceOktaConfigurationCredentials"
                },
                "domain": {
                    "type": "string",
                    "description": "The Okta domain. See the \\n\\ndocs\\n\\n for instructions on how to find it.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"okta\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format YYYY-MM-DDTHH:MM:SSZ. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType"
            ]
        },
        "airbyte:index/SourceOktaConfigurationCredentials:SourceOktaConfigurationCredentials": {
            "properties": {
                "sourceOktaAuthorizationMethodApiToken": {
                    "$ref": "#/types/airbyte:index/SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodApiToken:SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodApiToken"
                },
                "sourceOktaAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodOAuth20:SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodOAuth20"
                },
                "sourceOktaUpdateAuthorizationMethodApiToken": {
                    "$ref": "#/types/airbyte:index/SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodApiToken:SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodApiToken"
                },
                "sourceOktaUpdateAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodOAuth20:SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodOAuth20"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodApiToken:SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodApiToken": {
            "properties": {
                "apiToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "authType"
            ]
        },
        "airbyte:index/SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodOAuth20:SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodOAuth20": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodApiToken:SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodApiToken": {
            "properties": {
                "apiToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "authType"
            ]
        },
        "airbyte:index/SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodOAuth20:SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodOAuth20": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceOmnisendConfiguration:SourceOmnisendConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"omnisend\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ]
        },
        "airbyte:index/SourceOnesignalConfiguration:SourceOnesignalConfiguration": {
            "properties": {
                "applications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/airbyte:index/SourceOnesignalConfigurationApplication:SourceOnesignalConfigurationApplication"
                    },
                    "description": "Applications keys, see the \\n\\ndocs\\n\\n for more information on how to obtain this data\n"
                },
                "outcomeNames": {
                    "type": "string",
                    "description": "Comma-separated list of names and the value (sum/count) for the returned outcome data. See the \\n\\ndocs\\n\\n for more details\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"onesignal\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data for OneSignal API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.\n"
                },
                "userAuthKey": {
                    "type": "string",
                    "description": "OneSignal User Auth Key, see the \\n\\ndocs\\n\\n for more information on how to obtain this key.\n"
                }
            },
            "type": "object",
            "required": [
                "applications",
                "outcomeNames",
                "sourceType",
                "startDate",
                "userAuthKey"
            ]
        },
        "airbyte:index/SourceOnesignalConfigurationApplication:SourceOnesignalConfigurationApplication": {
            "properties": {
                "appApiKey": {
                    "type": "string"
                },
                "appId": {
                    "type": "string"
                },
                "appName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "appApiKey",
                "appId"
            ]
        },
        "airbyte:index/SourceOpenweatherConfiguration:SourceOpenweatherConfiguration": {
            "properties": {
                "appid": {
                    "type": "string",
                    "description": "Your OpenWeather API Key. See \\n\\nhere\\n\\n. The key is case sensitive.\n"
                },
                "lang": {
                    "type": "string",
                    "description": "must be one of [\"af\", \"al\", \"ar\", \"az\", \"bg\", \"ca\", \"cz\", \"da\", \"de\", \"el\", \"en\", \"eu\", \"fa\", \"fi\", \"fr\", \"gl\", \"he\", \"hi\", \"hr\", \"hu\", \"id\", \"it\", \"ja\", \"kr\", \"la\", \"lt\", \"mk\", \"no\", \"nl\", \"pl\", \"pt\", \"pt*br\", \"ro\", \"ru\", \"sv\", \"se\", \"sk\", \"sl\", \"sp\", \"es\", \"sr\", \"th\", \"tr\", \"ua\", \"uk\", \"vi\", \"zh*cn\", \"zh_tw\", \"zu\"]\nYou can use lang parameter to get the output in your language. The contents of the description field will be translated. See \\n\\nhere\\n\\n for the list of supported languages.\n"
                },
                "lat": {
                    "type": "string",
                    "description": "Latitude for which you want to get weather condition from. (min -90, max 90)\n"
                },
                "lon": {
                    "type": "string",
                    "description": "Longitude for which you want to get weather condition from. (min -180, max 180)\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"openweather\"]\n"
                },
                "units": {
                    "type": "string",
                    "description": "must be one of [\"standard\", \"metric\", \"imperial\"]\nUnits of measurement. standard, metric and imperial units are available. If you do not use the units parameter, standard units will be applied by default.\n"
                }
            },
            "type": "object",
            "required": [
                "appid",
                "lat",
                "lon",
                "sourceType"
            ]
        },
        "airbyte:index/SourceOracleConfiguration:SourceOracleConfiguration": {
            "properties": {
                "connectionData": {
                    "$ref": "#/types/airbyte:index/SourceOracleConfigurationConnectionData:SourceOracleConfigurationConnectionData",
                    "description": "Connect data that will be used for DB connection\n"
                },
                "encryption": {
                    "$ref": "#/types/airbyte:index/SourceOracleConfigurationEncryption:SourceOracleConfigurationEncryption",
                    "description": "The encryption method with is used when communicating with the database.\n"
                },
                "host": {
                    "type": "string",
                    "description": "Hostname of the database.\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '\u0026'. (example: key1=value1\u0026key2=value2\u0026key3=value3).\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password associated with the username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the database.\nOracle Corporations recommends the following port numbers:\n1521 - Default listening port for client connections to the listener.\n2484 - Recommended and officially registered listening port for client connections to the listener using TCP/IP with SSL\n"
                },
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of schemas to sync from. Defaults to user. Case sensitive.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"oracle\"]\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/SourceOracleConfigurationTunnelMethod:SourceOracleConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username which is used to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "encryption",
                "host",
                "port",
                "sourceType",
                "username"
            ]
        },
        "airbyte:index/SourceOracleConfigurationConnectionData:SourceOracleConfigurationConnectionData": {
            "properties": {
                "sourceOracleConnectByServiceName": {
                    "$ref": "#/types/airbyte:index/SourceOracleConfigurationConnectionDataSourceOracleConnectByServiceName:SourceOracleConfigurationConnectionDataSourceOracleConnectByServiceName"
                },
                "sourceOracleConnectBySystemIdSid": {
                    "$ref": "#/types/airbyte:index/SourceOracleConfigurationConnectionDataSourceOracleConnectBySystemIdSid:SourceOracleConfigurationConnectionDataSourceOracleConnectBySystemIdSid"
                },
                "sourceOracleUpdateConnectByServiceName": {
                    "$ref": "#/types/airbyte:index/SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectByServiceName:SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectByServiceName"
                },
                "sourceOracleUpdateConnectBySystemIdSid": {
                    "$ref": "#/types/airbyte:index/SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectBySystemIdSid:SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectBySystemIdSid"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceOracleConfigurationConnectionDataSourceOracleConnectByServiceName:SourceOracleConfigurationConnectionDataSourceOracleConnectByServiceName": {
            "properties": {
                "connectionType": {
                    "type": "string"
                },
                "serviceName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "serviceName"
            ]
        },
        "airbyte:index/SourceOracleConfigurationConnectionDataSourceOracleConnectBySystemIdSid:SourceOracleConfigurationConnectionDataSourceOracleConnectBySystemIdSid": {
            "properties": {
                "connectionType": {
                    "type": "string"
                },
                "sid": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sid"
            ]
        },
        "airbyte:index/SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectByServiceName:SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectByServiceName": {
            "properties": {
                "connectionType": {
                    "type": "string"
                },
                "serviceName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "serviceName"
            ]
        },
        "airbyte:index/SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectBySystemIdSid:SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectBySystemIdSid": {
            "properties": {
                "connectionType": {
                    "type": "string"
                },
                "sid": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sid"
            ]
        },
        "airbyte:index/SourceOracleConfigurationEncryption:SourceOracleConfigurationEncryption": {
            "properties": {
                "sourceOracleEncryptionNativeNetworkEncryptionNne": {
                    "$ref": "#/types/airbyte:index/SourceOracleConfigurationEncryptionSourceOracleEncryptionNativeNetworkEncryptionNne:SourceOracleConfigurationEncryptionSourceOracleEncryptionNativeNetworkEncryptionNne"
                },
                "sourceOracleEncryptionTlsEncryptedVerifyCertificate": {
                    "$ref": "#/types/airbyte:index/SourceOracleConfigurationEncryptionSourceOracleEncryptionTlsEncryptedVerifyCertificate:SourceOracleConfigurationEncryptionSourceOracleEncryptionTlsEncryptedVerifyCertificate"
                },
                "sourceOracleUpdateEncryptionNativeNetworkEncryptionNne": {
                    "$ref": "#/types/airbyte:index/SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionNativeNetworkEncryptionNne:SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionNativeNetworkEncryptionNne"
                },
                "sourceOracleUpdateEncryptionTlsEncryptedVerifyCertificate": {
                    "$ref": "#/types/airbyte:index/SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionTlsEncryptedVerifyCertificate:SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionTlsEncryptedVerifyCertificate"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceOracleConfigurationEncryptionSourceOracleEncryptionNativeNetworkEncryptionNne:SourceOracleConfigurationEncryptionSourceOracleEncryptionNativeNetworkEncryptionNne": {
            "properties": {
                "encryptionAlgorithm": {
                    "type": "string"
                },
                "encryptionMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "encryptionMethod"
            ]
        },
        "airbyte:index/SourceOracleConfigurationEncryptionSourceOracleEncryptionTlsEncryptedVerifyCertificate:SourceOracleConfigurationEncryptionSourceOracleEncryptionTlsEncryptedVerifyCertificate": {
            "properties": {
                "encryptionMethod": {
                    "type": "string"
                },
                "sslCertificate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "encryptionMethod",
                "sslCertificate"
            ]
        },
        "airbyte:index/SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionNativeNetworkEncryptionNne:SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionNativeNetworkEncryptionNne": {
            "properties": {
                "encryptionAlgorithm": {
                    "type": "string"
                },
                "encryptionMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "encryptionMethod"
            ]
        },
        "airbyte:index/SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionTlsEncryptedVerifyCertificate:SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionTlsEncryptedVerifyCertificate": {
            "properties": {
                "encryptionMethod": {
                    "type": "string"
                },
                "sslCertificate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "encryptionMethod",
                "sslCertificate"
            ]
        },
        "airbyte:index/SourceOracleConfigurationTunnelMethod:SourceOracleConfigurationTunnelMethod": {
            "properties": {
                "sourceOracleSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodNoTunnel:SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodNoTunnel"
                },
                "sourceOracleSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodPasswordAuthentication:SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodPasswordAuthentication"
                },
                "sourceOracleSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodSshKeyAuthentication:SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodSshKeyAuthentication"
                },
                "sourceOracleUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodNoTunnel:SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodNoTunnel"
                },
                "sourceOracleUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodPasswordAuthentication:SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodPasswordAuthentication"
                },
                "sourceOracleUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodSshKeyAuthentication:SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodNoTunnel:SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodPasswordAuthentication:SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodSshKeyAuthentication:SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodNoTunnel:SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodPasswordAuthentication:SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodSshKeyAuthentication:SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/SourceOrbConfiguration:SourceOrbConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Orb API Key, issued from the Orb admin console.\n"
                },
                "lookbackWindowDays": {
                    "type": "integer",
                    "description": "When set to N, the connector will always refresh resources created within the past N days. By default, updated objects that are not newly created are not incrementally synced.\n"
                },
                "numericEventPropertiesKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Property key names to extract from all events, in order to enrich ledger entries corresponding to an event deduction.\n"
                },
                "planId": {
                    "type": "string",
                    "description": "Orb Plan ID to filter subscriptions that should have usage fetched.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"orb\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2022-03-01T00:00:00Z. Any data with created_at before this data will not be synced. For Subscription Usage, this becomes the `timeframe_start` API parameter.\n"
                },
                "stringEventPropertiesKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Property key names to extract from all events, in order to enrich ledger entries corresponding to an event deduction.\n"
                },
                "subscriptionUsageGroupingKey": {
                    "type": "string",
                    "description": "Property key name to group subscription usage by.\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceOrbitConfiguration:SourceOrbitConfiguration": {
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "Authorizes you to work with Orbit workspaces associated with the token.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"orbit\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Date in the format 2022-06-26. Only load members whose last activities are after this date.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "The unique name of the workspace that your API token is associated with.\n"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "sourceType",
                "workspace"
            ]
        },
        "airbyte:index/SourceOutbrainAmplifyConfiguration:SourceOutbrainAmplifyConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceOutbrainAmplifyConfigurationCredentials:SourceOutbrainAmplifyConfigurationCredentials",
                    "description": "Credentials for making authenticated requests requires either username/password or access_token.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "Date in the format YYYY-MM-DD.\n"
                },
                "geoLocationBreakdown": {
                    "type": "string",
                    "description": "must be one of [\"country\", \"region\", \"subregion\"]\nThe granularity used for geo location data in reports.\n"
                },
                "reportGranularity": {
                    "type": "string",
                    "description": "must be one of [\"daily\", \"weekly\", \"monthly\"]\nThe granularity used for periodic data in reports. See \\n\\nthe docs\\n\\n.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"outbrain-amplify\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Date in the format YYYY-MM-DD eg. 2017-01-25. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceOutbrainAmplifyConfigurationCredentials:SourceOutbrainAmplifyConfigurationCredentials": {
            "properties": {
                "sourceOutbrainAmplifyAuthenticationMethodAccessToken": {
                    "$ref": "#/types/airbyte:index/SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodAccessToken:SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodAccessToken"
                },
                "sourceOutbrainAmplifyAuthenticationMethodUsernamePassword": {
                    "$ref": "#/types/airbyte:index/SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodUsernamePassword:SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodUsernamePassword"
                },
                "sourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken": {
                    "$ref": "#/types/airbyte:index/SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken:SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken"
                },
                "sourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword": {
                    "$ref": "#/types/airbyte:index/SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword:SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodAccessToken:SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodAccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "type"
            ]
        },
        "airbyte:index/SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodUsernamePassword:SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodUsernamePassword": {
            "properties": {
                "password": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "password",
                "type",
                "username"
            ]
        },
        "airbyte:index/SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken:SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "type"
            ]
        },
        "airbyte:index/SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword:SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword": {
            "properties": {
                "password": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "password",
                "type",
                "username"
            ]
        },
        "airbyte:index/SourceOutreachConfiguration:SourceOutreachConfiguration": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The Client ID of your Outreach developer application.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The Client Secret of your Outreach developer application.\n"
                },
                "redirectUri": {
                    "type": "string",
                    "description": "A Redirect URI is the location where the authorization server sends the user once the app has been successfully authorized and granted an authorization code or access token.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "The token for obtaining the new access token.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"outreach\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data for Outreach API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "redirectUri",
                "refreshToken",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourcePaypalTransactionConfiguration:SourcePaypalTransactionConfiguration": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The Client ID of your Paypal developer application.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The Client Secret of your Paypal developer application.\n"
                },
                "isSandbox": {
                    "type": "boolean",
                    "description": "Determines whether to use the sandbox or production environment.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "The key to refresh the expired access token.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"paypal-transaction\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Start Date for data extraction in \\n\\nISO format\\n\\n. Date must be in range from 3 years till 12 hrs before present time.\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "isSandbox",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourcePaystackConfiguration:SourcePaystackConfiguration": {
            "properties": {
                "lookbackWindowDays": {
                    "type": "integer",
                    "description": "When set, the connector will always reload data from the past N days, where N is the value set here. This is useful if your data is updated after creation.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The Paystack API key (usually starts with 'sk*live*'; find yours \\n\\nhere\\n\\n).\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"paystack\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "secretKey",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourcePendoConfiguration:SourcePendoConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"pendo\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ]
        },
        "airbyte:index/SourcePersistiqConfiguration:SourcePersistiqConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "PersistIq API Key. See the \\n\\ndocs\\n\\n for more information on where to find that key.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"persistiq\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ]
        },
        "airbyte:index/SourcePexelsApiConfiguration:SourcePexelsApiConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key is required to access pexels api, For getting your's goto https://www.pexels.com/api/documentation and create account for free.\n"
                },
                "color": {
                    "type": "string",
                    "description": "Optional, Desired photo color. Supported colors red, orange, yellow, green, turquoise, blue, violet, pink, brown, black, gray, white or any hexidecimal color code.\n"
                },
                "locale": {
                    "type": "string",
                    "description": "Optional, The locale of the search you are performing. The current supported locales are 'en-US' 'pt-BR' 'es-ES' 'ca-ES' 'de-DE' 'it-IT' 'fr-FR' 'sv-SE' 'id-ID' 'pl-PL' 'ja-JP' 'zh-TW' 'zh-CN' 'ko-KR' 'th-TH' 'nl-NL' 'hu-HU' 'vi-VN' 'cs-CZ' 'da-DK' 'fi-FI' 'uk-UA' 'el-GR' 'ro-RO' 'nb-NO' 'sk-SK' 'tr-TR' 'ru-RU'.\n"
                },
                "orientation": {
                    "type": "string",
                    "description": "Optional, Desired photo orientation. The current supported orientations are landscape, portrait or square\n"
                },
                "query": {
                    "type": "string",
                    "description": "Optional, the search query, Example Ocean, Tigers, Pears, etc.\n"
                },
                "size": {
                    "type": "string",
                    "description": "Optional, Minimum photo size. The current supported sizes are large(24MP), medium(12MP) or small(4MP).\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"pexels-api\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "query",
                "sourceType"
            ]
        },
        "airbyte:index/SourcePinterestConfiguration:SourcePinterestConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourcePinterestConfigurationCredentials:SourcePinterestConfigurationCredentials"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"pinterest\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "A date in the format YYYY-MM-DD. If you have not set a date, it would be defaulted to latest allowed date by api (89 days from today).\n"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Entity statuses based off of campaigns, ad_groups, and ads. If you do not have a status set, it will be ignored completely.\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourcePinterestConfigurationCredentials:SourcePinterestConfigurationCredentials": {
            "properties": {
                "sourcePinterestAuthorizationMethodAccessToken": {
                    "$ref": "#/types/airbyte:index/SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodAccessToken:SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodAccessToken"
                },
                "sourcePinterestAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodOAuth20:SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodOAuth20"
                },
                "sourcePinterestUpdateAuthorizationMethodAccessToken": {
                    "$ref": "#/types/airbyte:index/SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodAccessToken:SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodAccessToken"
                },
                "sourcePinterestUpdateAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodOAuth20:SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodOAuth20"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodAccessToken:SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodAccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authMethod"
            ]
        },
        "airbyte:index/SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodOAuth20:SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodOAuth20": {
            "properties": {
                "authMethod": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authMethod",
                "refreshToken"
            ]
        },
        "airbyte:index/SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodAccessToken:SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodAccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authMethod"
            ]
        },
        "airbyte:index/SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodOAuth20:SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodOAuth20": {
            "properties": {
                "authMethod": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authMethod",
                "refreshToken"
            ]
        },
        "airbyte:index/SourcePipedriveConfiguration:SourcePipedriveConfiguration": {
            "properties": {
                "authorization": {
                    "$ref": "#/types/airbyte:index/SourcePipedriveConfigurationAuthorization:SourcePipedriveConfigurationAuthorization"
                },
                "replicationStartDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated. When specified and not None, then stream will behave as incremental\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"pipedrive\"]\n"
                }
            },
            "type": "object",
            "required": [
                "replicationStartDate",
                "sourceType"
            ]
        },
        "airbyte:index/SourcePipedriveConfigurationAuthorization:SourcePipedriveConfigurationAuthorization": {
            "properties": {
                "apiToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "authType"
            ]
        },
        "airbyte:index/SourcePocketConfiguration:SourcePocketConfiguration": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "The user's Pocket access token.\n"
                },
                "consumerKey": {
                    "type": "string",
                    "description": "Your application's Consumer Key.\n"
                },
                "contentType": {
                    "type": "string",
                    "description": "must be one of [\"article\", \"video\", \"image\"]\nSelect the content type of the items to retrieve.\n"
                },
                "detailType": {
                    "type": "string",
                    "description": "must be one of [\"simple\", \"complete\"]\nSelect the granularity of the information about each item.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Only return items from a particular `domain`.\n"
                },
                "favorite": {
                    "type": "boolean",
                    "description": "Retrieve only favorited items.\n"
                },
                "search": {
                    "type": "string",
                    "description": "Only return items whose title or url contain the `search` string.\n"
                },
                "since": {
                    "type": "string",
                    "description": "Only return items modified since the given timestamp.\n"
                },
                "sort": {
                    "type": "string",
                    "description": "must be one of [\"newest\", \"oldest\", \"title\", \"site\"]\nSort retrieved items by the given criteria.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"pocket\"]\n"
                },
                "state": {
                    "type": "string",
                    "description": "must be one of [\"unread\", \"archive\", \"all\"]\nSelect the state of the items to retrieve.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "Return only items tagged with this tag name. Use *untagged* for retrieving only untagged items.\n"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "consumerKey",
                "sourceType"
            ]
        },
        "airbyte:index/SourcePokeapiConfiguration:SourcePokeapiConfiguration": {
            "properties": {
                "pokemonName": {
                    "type": "string",
                    "description": "Pokemon requested from the API.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"pokeapi\"]\n"
                }
            },
            "type": "object",
            "required": [
                "pokemonName",
                "sourceType"
            ]
        },
        "airbyte:index/SourcePolygonStockApiConfiguration:SourcePolygonStockApiConfiguration": {
            "properties": {
                "adjusted": {
                    "type": "string",
                    "description": "Determines whether or not the results are adjusted for splits. By default, results are adjusted and set to true. Set this to false to get results that are NOT adjusted for splits.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "Your API ACCESS Key\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "The target date for the aggregate window.\n"
                },
                "limit": {
                    "type": "integer",
                    "description": "The target date for the aggregate window.\n"
                },
                "multiplier": {
                    "type": "integer",
                    "description": "The size of the timespan multiplier.\n"
                },
                "sort": {
                    "type": "string",
                    "description": "Sort the results by timestamp. asc will return results in ascending order (oldest at the top), desc will return results in descending order (newest at the top).\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"polygon-stock-api\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The beginning date for the aggregate window.\n"
                },
                "stocksTicker": {
                    "type": "string",
                    "description": "The exchange symbol that this item is traded under.\n"
                },
                "timespan": {
                    "type": "string",
                    "description": "The size of the time window.\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "endDate",
                "multiplier",
                "sourceType",
                "startDate",
                "stocksTicker",
                "timespan"
            ]
        },
        "airbyte:index/SourcePostgresConfiguration:SourcePostgresConfiguration": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database.\n"
                },
                "host": {
                    "type": "string",
                    "description": "Hostname of the database.\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '\u0026'. (Eg. key1=value1\u0026key2=value2\u0026key3=value3). For more information read about \\n\\nJDBC URL parameters\\n\\n.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password associated with the username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the database.\n"
                },
                "replicationMethod": {
                    "$ref": "#/types/airbyte:index/SourcePostgresConfigurationReplicationMethod:SourcePostgresConfigurationReplicationMethod",
                    "description": "Replication method for extracting data from the database.\n"
                },
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of schemas (case sensitive) to sync from. Defaults to public.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"postgres\"]\n"
                },
                "sslMode": {
                    "$ref": "#/types/airbyte:index/SourcePostgresConfigurationSslMode:SourcePostgresConfigurationSslMode",
                    "description": "SSL connection modes.\nRead more \\n\\n in the docs\\n\\n.\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/SourcePostgresConfigurationTunnelMethod:SourcePostgresConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "host",
                "port",
                "sourceType",
                "username"
            ]
        },
        "airbyte:index/SourcePostgresConfigurationReplicationMethod:SourcePostgresConfigurationReplicationMethod": {
            "properties": {
                "sourcePostgresReplicationMethodLogicalReplicationCdc": {
                    "$ref": "#/types/airbyte:index/SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodLogicalReplicationCdc:SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodLogicalReplicationCdc"
                },
                "sourcePostgresReplicationMethodStandard": {
                    "$ref": "#/types/airbyte:index/SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandard:SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandard"
                },
                "sourcePostgresReplicationMethodStandardXmin": {
                    "$ref": "#/types/airbyte:index/SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardXmin:SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardXmin"
                },
                "sourcePostgresUpdateReplicationMethodLogicalReplicationCdc": {
                    "$ref": "#/types/airbyte:index/SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodLogicalReplicationCdc:SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodLogicalReplicationCdc"
                },
                "sourcePostgresUpdateReplicationMethodStandard": {
                    "$ref": "#/types/airbyte:index/SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandard:SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandard"
                },
                "sourcePostgresUpdateReplicationMethodStandardXmin": {
                    "$ref": "#/types/airbyte:index/SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardXmin:SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardXmin"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodLogicalReplicationCdc:SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodLogicalReplicationCdc": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "initialWaitingSeconds": {
                    "type": "integer"
                },
                "lsnCommitBehaviour": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "plugin": {
                    "type": "string"
                },
                "publication": {
                    "type": "string"
                },
                "queueSize": {
                    "type": "integer"
                },
                "replicationSlot": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method",
                "publication",
                "replicationSlot"
            ]
        },
        "airbyte:index/SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandard:SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandard": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ]
        },
        "airbyte:index/SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardXmin:SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardXmin": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ]
        },
        "airbyte:index/SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodLogicalReplicationCdc:SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodLogicalReplicationCdc": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "initialWaitingSeconds": {
                    "type": "integer"
                },
                "lsnCommitBehaviour": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "plugin": {
                    "type": "string"
                },
                "publication": {
                    "type": "string"
                },
                "queueSize": {
                    "type": "integer"
                },
                "replicationSlot": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method",
                "publication",
                "replicationSlot"
            ]
        },
        "airbyte:index/SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandard:SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandard": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ]
        },
        "airbyte:index/SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardXmin:SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardXmin": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ]
        },
        "airbyte:index/SourcePostgresConfigurationSslMode:SourcePostgresConfigurationSslMode": {
            "properties": {
                "sourcePostgresSslModesAllow": {
                    "$ref": "#/types/airbyte:index/SourcePostgresConfigurationSslModeSourcePostgresSslModesAllow:SourcePostgresConfigurationSslModeSourcePostgresSslModesAllow"
                },
                "sourcePostgresSslModesDisable": {
                    "$ref": "#/types/airbyte:index/SourcePostgresConfigurationSslModeSourcePostgresSslModesDisable:SourcePostgresConfigurationSslModeSourcePostgresSslModesDisable"
                },
                "sourcePostgresSslModesPrefer": {
                    "$ref": "#/types/airbyte:index/SourcePostgresConfigurationSslModeSourcePostgresSslModesPrefer:SourcePostgresConfigurationSslModeSourcePostgresSslModesPrefer"
                },
                "sourcePostgresSslModesRequire": {
                    "$ref": "#/types/airbyte:index/SourcePostgresConfigurationSslModeSourcePostgresSslModesRequire:SourcePostgresConfigurationSslModeSourcePostgresSslModesRequire"
                },
                "sourcePostgresSslModesVerifyCa": {
                    "$ref": "#/types/airbyte:index/SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyCa:SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyCa"
                },
                "sourcePostgresSslModesVerifyFull": {
                    "$ref": "#/types/airbyte:index/SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyFull:SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyFull"
                },
                "sourcePostgresUpdateSslModesAllow": {
                    "$ref": "#/types/airbyte:index/SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesAllow:SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesAllow"
                },
                "sourcePostgresUpdateSslModesDisable": {
                    "$ref": "#/types/airbyte:index/SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesDisable:SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesDisable"
                },
                "sourcePostgresUpdateSslModesPrefer": {
                    "$ref": "#/types/airbyte:index/SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesPrefer:SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesPrefer"
                },
                "sourcePostgresUpdateSslModesRequire": {
                    "$ref": "#/types/airbyte:index/SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesRequire:SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesRequire"
                },
                "sourcePostgresUpdateSslModesVerifyCa": {
                    "$ref": "#/types/airbyte:index/SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyCa:SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyCa"
                },
                "sourcePostgresUpdateSslModesVerifyFull": {
                    "$ref": "#/types/airbyte:index/SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyFull:SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyFull"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourcePostgresConfigurationSslModeSourcePostgresSslModesAllow:SourcePostgresConfigurationSslModeSourcePostgresSslModesAllow": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/SourcePostgresConfigurationSslModeSourcePostgresSslModesDisable:SourcePostgresConfigurationSslModeSourcePostgresSslModesDisable": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/SourcePostgresConfigurationSslModeSourcePostgresSslModesPrefer:SourcePostgresConfigurationSslModeSourcePostgresSslModesPrefer": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/SourcePostgresConfigurationSslModeSourcePostgresSslModesRequire:SourcePostgresConfigurationSslModeSourcePostgresSslModesRequire": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyCa:SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyCa": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "mode"
            ]
        },
        "airbyte:index/SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyFull:SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyFull": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "mode"
            ]
        },
        "airbyte:index/SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesAllow:SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesAllow": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesDisable:SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesDisable": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesPrefer:SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesPrefer": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesRequire:SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesRequire": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "airbyte:index/SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyCa:SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyCa": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "mode"
            ]
        },
        "airbyte:index/SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyFull:SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyFull": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "mode"
            ]
        },
        "airbyte:index/SourcePostgresConfigurationTunnelMethod:SourcePostgresConfigurationTunnelMethod": {
            "properties": {
                "sourcePostgresSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodNoTunnel:SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodNoTunnel"
                },
                "sourcePostgresSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodPasswordAuthentication:SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodPasswordAuthentication"
                },
                "sourcePostgresSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodSshKeyAuthentication:SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodSshKeyAuthentication"
                },
                "sourcePostgresUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodNoTunnel:SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodNoTunnel"
                },
                "sourcePostgresUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodPasswordAuthentication:SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodPasswordAuthentication"
                },
                "sourcePostgresUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodSshKeyAuthentication:SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodNoTunnel:SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodPasswordAuthentication:SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodSshKeyAuthentication:SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodNoTunnel:SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ]
        },
        "airbyte:index/SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodPasswordAuthentication:SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ]
        },
        "airbyte:index/SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodSshKeyAuthentication:SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ]
        },
        "airbyte:index/SourcePosthogConfiguration:SourcePosthogConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key. See the \\n\\ndocs\\n\\n for information on how to generate this key.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base PostHog url. Defaults to PostHog Cloud (https://app.posthog.com).\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"posthog\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate the data. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourcePostmarkappConfiguration:SourcePostmarkappConfiguration": {
            "properties": {
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"postmarkapp\"]\n"
                },
                "xPostmarkAccountToken": {
                    "type": "string",
                    "description": "API Key for account\n"
                },
                "xPostmarkServerToken": {
                    "type": "string",
                    "description": "API Key for server\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType",
                "xPostmarkAccountToken",
                "xPostmarkServerToken"
            ]
        },
        "airbyte:index/SourcePrestashopConfiguration:SourcePrestashopConfiguration": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Your PrestaShop access key. See \\n\\n the docs \\n\\n for info on how to obtain this.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"prestashop\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The Start date in the format YYYY-MM-DD.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Shop URL without trailing slash.\n"
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "sourceType",
                "startDate",
                "url"
            ]
        },
        "airbyte:index/SourcePublicApisConfiguration:SourcePublicApisConfiguration": {
            "properties": {
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"public-apis\"]\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType"
            ]
        },
        "airbyte:index/SourcePunkApiConfiguration:SourcePunkApiConfiguration": {
            "properties": {
                "brewedAfter": {
                    "type": "string",
                    "description": "To extract specific data with Unique ID\n"
                },
                "brewedBefore": {
                    "type": "string",
                    "description": "To extract specific data with Unique ID\n"
                },
                "id": {
                    "type": "string",
                    "description": "To extract specific data with Unique ID\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"punk-api\"]\n"
                }
            },
            "type": "object",
            "required": [
                "brewedAfter",
                "brewedBefore",
                "sourceType"
            ]
        },
        "airbyte:index/SourcePypiConfiguration:SourcePypiConfiguration": {
            "properties": {
                "projectName": {
                    "type": "string",
                    "description": "Name of the project/package. Can only be in lowercase with hyphen. This is the name used using pip command for installing the package.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"pypi\"]\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of the project/package.  Use it to find a particular release instead of all releases.\n"
                }
            },
            "type": "object",
            "required": [
                "projectName",
                "sourceType"
            ]
        },
        "airbyte:index/SourceQualarooConfiguration:SourceQualarooConfiguration": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "A Qualaroo token. See the \\n\\ndocs\\n\\n for instructions on how to generate it.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"qualaroo\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                },
                "surveyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of the surveys from which you'd like to replicate data. If left empty, data from all surveys to which you have access will be replicated.\n"
                },
                "token": {
                    "type": "string",
                    "description": "A Qualaroo token. See the \\n\\ndocs\\n\\n for instructions on how to generate it.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "sourceType",
                "startDate",
                "token"
            ]
        },
        "airbyte:index/SourceQuickbooksConfiguration:SourceQuickbooksConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceQuickbooksConfigurationCredentials:SourceQuickbooksConfigurationCredentials"
                },
                "sandbox": {
                    "type": "boolean",
                    "description": "Determines whether to use the sandbox or production environment.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"quickbooks\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The default value to use if no bookmark exists for an endpoint (rfc3339 date string). E.g, 2021-03-20T00:00:00Z. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "sandbox",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceQuickbooksConfigurationCredentials:SourceQuickbooksConfigurationCredentials": {
            "properties": {
                "sourceQuickbooksAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceQuickbooksConfigurationCredentialsSourceQuickbooksAuthorizationMethodOAuth20:SourceQuickbooksConfigurationCredentialsSourceQuickbooksAuthorizationMethodOAuth20"
                },
                "sourceQuickbooksUpdateAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceQuickbooksConfigurationCredentialsSourceQuickbooksUpdateAuthorizationMethodOAuth20:SourceQuickbooksConfigurationCredentialsSourceQuickbooksUpdateAuthorizationMethodOAuth20"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceQuickbooksConfigurationCredentialsSourceQuickbooksAuthorizationMethodOAuth20:SourceQuickbooksConfigurationCredentialsSourceQuickbooksAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "realmId": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "clientId",
                "clientSecret",
                "realmId",
                "refreshToken",
                "tokenExpiryDate"
            ]
        },
        "airbyte:index/SourceQuickbooksConfigurationCredentialsSourceQuickbooksUpdateAuthorizationMethodOAuth20:SourceQuickbooksConfigurationCredentialsSourceQuickbooksUpdateAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "realmId": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "clientId",
                "clientSecret",
                "realmId",
                "refreshToken",
                "tokenExpiryDate"
            ]
        },
        "airbyte:index/SourceRailzConfiguration:SourceRailzConfiguration": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "Client ID (client_id)\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "Secret key (secret_key)\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"railz\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Start date\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "secretKey",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceRechargeConfiguration:SourceRechargeConfiguration": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "The value of the Access Token generated. See the \\n\\ndocs\\n\\n for more information.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"recharge\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data for Recharge API, in the format YYYY-MM-DDT00:00:00Z. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceRecreationConfiguration:SourceRecreationConfiguration": {
            "properties": {
                "apikey": {
                    "type": "string",
                    "description": "API Key\n"
                },
                "queryCampsites": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"recreation\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apikey",
                "sourceType"
            ]
        },
        "airbyte:index/SourceRecruiteeConfiguration:SourceRecruiteeConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Recruitee API Key. See \\n\\nhere\\n\\n.\n"
                },
                "companyId": {
                    "type": "integer",
                    "description": "Recruitee Company ID. You can also find this ID on the \\n\\nRecruitee API tokens page\\n\\n.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"recruitee\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "companyId",
                "sourceType"
            ]
        },
        "airbyte:index/SourceRecurlyConfiguration:SourceRecurlyConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Recurly API Key. See the  \\n\\ndocs\\n\\n for more information on how to generate this key.\n"
                },
                "beginTime": {
                    "type": "string",
                    "description": "ISO8601 timestamp from which the replication from Recurly API will start from.\n"
                },
                "endTime": {
                    "type": "string",
                    "description": "ISO8601 timestamp to which the replication from Recurly API will stop. Records after that date won't be imported.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"recurly\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ]
        },
        "airbyte:index/SourceRedshiftConfiguration:SourceRedshiftConfiguration": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database.\n"
                },
                "host": {
                    "type": "string",
                    "description": "Host Endpoint of the Redshift Cluster (must include the cluster-id, region and end with .redshift.amazonaws.com).\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '\u0026'. (example: key1=value1\u0026key2=value2\u0026key3=value3).\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password associated with the username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the database.\n"
                },
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of schemas to sync from. Specify one or more explicitly or keep empty to process all schemas. Schema names are case sensitive.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"redshift\"]\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "host",
                "password",
                "port",
                "sourceType",
                "username"
            ]
        },
        "airbyte:index/SourceRetentlyConfiguration:SourceRetentlyConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceRetentlyConfigurationCredentials:SourceRetentlyConfigurationCredentials",
                    "description": "Choose how to authenticate to Retently\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"retently\"]\n"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceRetentlyConfigurationCredentials:SourceRetentlyConfigurationCredentials": {
            "properties": {
                "sourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth": {
                    "$ref": "#/types/airbyte:index/SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth:SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth"
                },
                "sourceRetentlyAuthenticationMechanismAuthenticateWithApiToken": {
                    "$ref": "#/types/airbyte:index/SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateWithApiToken:SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateWithApiToken"
                },
                "sourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth": {
                    "$ref": "#/types/airbyte:index/SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth:SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth"
                },
                "sourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiToken": {
                    "$ref": "#/types/airbyte:index/SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiToken:SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiToken"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth:SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateWithApiToken:SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateWithApiToken": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "apiKey": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiKey"
            ]
        },
        "airbyte:index/SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth:SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiToken:SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiToken": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "apiKey": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiKey"
            ]
        },
        "airbyte:index/SourceRkiCovidConfiguration:SourceRkiCovidConfiguration": {
            "properties": {
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"rki-covid\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date in the format 2017-01-25. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceRssConfiguration:SourceRssConfiguration": {
            "properties": {
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"rss\"]\n"
                },
                "url": {
                    "type": "string",
                    "description": "RSS Feed URL\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType",
                "url"
            ]
        },
        "airbyte:index/SourceS3Configuration:SourceS3Configuration": {
            "properties": {
                "dataset": {
                    "type": "string",
                    "description": "The name of the stream you would like this source to output. Can contain letters, numbers, or underscores.\n"
                },
                "format": {
                    "$ref": "#/types/airbyte:index/SourceS3ConfigurationFormat:SourceS3ConfigurationFormat",
                    "description": "The format of the files you'd like to replicate\n"
                },
                "pathPattern": {
                    "type": "string",
                    "description": "A regular expression which tells the connector which files to replicate. All files which match this pattern will be replicated. Use | to separate multiple patterns. See \\n\\nthis page\\n\\n to understand pattern syntax (GLOBSTAR and SPLIT flags are enabled). Use pattern \\n\\n**\\n\\n to pick up all files.\n"
                },
                "provider": {
                    "$ref": "#/types/airbyte:index/SourceS3ConfigurationProvider:SourceS3ConfigurationProvider",
                    "description": "Use this to load files from S3 or S3-compatible services\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Optionally provide a schema to enforce, as a valid JSON string. Ensure this is a mapping of \\n\\n{ \"column\" : \"type\" }\\n\\n, where types are valid \\n\\nJSON Schema datatypes\\n\\n. Leave as {} to auto-infer the schema.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"s3\"]\n"
                }
            },
            "type": "object",
            "required": [
                "dataset",
                "pathPattern",
                "provider",
                "sourceType"
            ]
        },
        "airbyte:index/SourceS3ConfigurationFormat:SourceS3ConfigurationFormat": {
            "properties": {
                "sourceS3FileFormatAvro": {
                    "$ref": "#/types/airbyte:index/SourceS3ConfigurationFormatSourceS3FileFormatAvro:SourceS3ConfigurationFormatSourceS3FileFormatAvro"
                },
                "sourceS3FileFormatCsv": {
                    "$ref": "#/types/airbyte:index/SourceS3ConfigurationFormatSourceS3FileFormatCsv:SourceS3ConfigurationFormatSourceS3FileFormatCsv"
                },
                "sourceS3FileFormatJsonl": {
                    "$ref": "#/types/airbyte:index/SourceS3ConfigurationFormatSourceS3FileFormatJsonl:SourceS3ConfigurationFormatSourceS3FileFormatJsonl"
                },
                "sourceS3FileFormatParquet": {
                    "$ref": "#/types/airbyte:index/SourceS3ConfigurationFormatSourceS3FileFormatParquet:SourceS3ConfigurationFormatSourceS3FileFormatParquet"
                },
                "sourceS3UpdateFileFormatAvro": {
                    "$ref": "#/types/airbyte:index/SourceS3ConfigurationFormatSourceS3UpdateFileFormatAvro:SourceS3ConfigurationFormatSourceS3UpdateFileFormatAvro"
                },
                "sourceS3UpdateFileFormatCsv": {
                    "$ref": "#/types/airbyte:index/SourceS3ConfigurationFormatSourceS3UpdateFileFormatCsv:SourceS3ConfigurationFormatSourceS3UpdateFileFormatCsv"
                },
                "sourceS3UpdateFileFormatJsonl": {
                    "$ref": "#/types/airbyte:index/SourceS3ConfigurationFormatSourceS3UpdateFileFormatJsonl:SourceS3ConfigurationFormatSourceS3UpdateFileFormatJsonl"
                },
                "sourceS3UpdateFileFormatParquet": {
                    "$ref": "#/types/airbyte:index/SourceS3ConfigurationFormatSourceS3UpdateFileFormatParquet:SourceS3ConfigurationFormatSourceS3UpdateFileFormatParquet"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceS3ConfigurationFormatSourceS3FileFormatAvro:SourceS3ConfigurationFormatSourceS3FileFormatAvro": {
            "properties": {
                "filetype": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceS3ConfigurationFormatSourceS3FileFormatCsv:SourceS3ConfigurationFormatSourceS3FileFormatCsv": {
            "properties": {
                "additionalReaderOptions": {
                    "type": "string"
                },
                "advancedOptions": {
                    "type": "string"
                },
                "blockSize": {
                    "type": "integer"
                },
                "delimiter": {
                    "type": "string"
                },
                "doubleQuote": {
                    "type": "boolean"
                },
                "encoding": {
                    "type": "string"
                },
                "escapeChar": {
                    "type": "string"
                },
                "filetype": {
                    "type": "string"
                },
                "inferDatatypes": {
                    "type": "boolean"
                },
                "newlinesInValues": {
                    "type": "boolean"
                },
                "quoteChar": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceS3ConfigurationFormatSourceS3FileFormatJsonl:SourceS3ConfigurationFormatSourceS3FileFormatJsonl": {
            "properties": {
                "blockSize": {
                    "type": "integer"
                },
                "filetype": {
                    "type": "string"
                },
                "newlinesInValues": {
                    "type": "boolean"
                },
                "unexpectedFieldBehavior": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceS3ConfigurationFormatSourceS3FileFormatParquet:SourceS3ConfigurationFormatSourceS3FileFormatParquet": {
            "properties": {
                "batchSize": {
                    "type": "integer"
                },
                "bufferSize": {
                    "type": "integer"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filetype": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceS3ConfigurationFormatSourceS3UpdateFileFormatAvro:SourceS3ConfigurationFormatSourceS3UpdateFileFormatAvro": {
            "properties": {
                "filetype": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceS3ConfigurationFormatSourceS3UpdateFileFormatCsv:SourceS3ConfigurationFormatSourceS3UpdateFileFormatCsv": {
            "properties": {
                "additionalReaderOptions": {
                    "type": "string"
                },
                "advancedOptions": {
                    "type": "string"
                },
                "blockSize": {
                    "type": "integer"
                },
                "delimiter": {
                    "type": "string"
                },
                "doubleQuote": {
                    "type": "boolean"
                },
                "encoding": {
                    "type": "string"
                },
                "escapeChar": {
                    "type": "string"
                },
                "filetype": {
                    "type": "string"
                },
                "inferDatatypes": {
                    "type": "boolean"
                },
                "newlinesInValues": {
                    "type": "boolean"
                },
                "quoteChar": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceS3ConfigurationFormatSourceS3UpdateFileFormatJsonl:SourceS3ConfigurationFormatSourceS3UpdateFileFormatJsonl": {
            "properties": {
                "blockSize": {
                    "type": "integer"
                },
                "filetype": {
                    "type": "string"
                },
                "newlinesInValues": {
                    "type": "boolean"
                },
                "unexpectedFieldBehavior": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceS3ConfigurationFormatSourceS3UpdateFileFormatParquet:SourceS3ConfigurationFormatSourceS3UpdateFileFormatParquet": {
            "properties": {
                "batchSize": {
                    "type": "integer"
                },
                "bufferSize": {
                    "type": "integer"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filetype": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceS3ConfigurationProvider:SourceS3ConfigurationProvider": {
            "properties": {
                "awsAccessKeyId": {
                    "type": "string"
                },
                "awsSecretAccessKey": {
                    "type": "string"
                },
                "bucket": {
                    "type": "string"
                },
                "endpoint": {
                    "type": "string"
                },
                "pathPrefix": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "bucket"
            ]
        },
        "airbyte:index/SourceSalesforceConfiguration:SourceSalesforceConfiguration": {
            "properties": {
                "authType": {
                    "type": "string",
                    "description": "must be one of [\"Client\"]\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "Enter your Salesforce developer application's \\n\\nClient ID\\n\\n\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Enter your Salesforce developer application's \\n\\nClient secret\\n\\n\n"
                },
                "forceUseBulkApi": {
                    "type": "boolean",
                    "description": "Toggle to use Bulk API (this might cause empty fields for some streams)\n"
                },
                "isSandbox": {
                    "type": "boolean",
                    "description": "Toggle if you're using a \\n\\nSalesforce Sandbox\\n\\n\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "Enter your application's \\n\\nSalesforce Refresh Token\\n\\n used for Airbyte to access your Salesforce account.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"salesforce\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Enter the date (or date-time) in the YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. Airbyte will replicate the data updated on and after this date. If this field is blank, Airbyte will replicate the data for last two years.\n"
                },
                "streamsCriterias": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/airbyte:index/SourceSalesforceConfigurationStreamsCriteria:SourceSalesforceConfigurationStreamsCriteria"
                    },
                    "description": "Add filters to select only required stream based on `SObject` name. Use this field to filter which tables are displayed by this connector. This is useful if your Salesforce account has a large number of tables (\u003e1000), in which case you may find it easier to navigate the UI and speed up the connector's performance if you restrict the tables displayed by this connector.\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "refreshToken",
                "sourceType"
            ]
        },
        "airbyte:index/SourceSalesforceConfigurationStreamsCriteria:SourceSalesforceConfigurationStreamsCriteria": {
            "properties": {
                "criteria": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "criteria",
                "value"
            ]
        },
        "airbyte:index/SourceSalesloftConfiguration:SourceSalesloftConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceSalesloftConfigurationCredentials:SourceSalesloftConfigurationCredentials"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"salesloft\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data for Salesloft API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceSalesloftConfigurationCredentials:SourceSalesloftConfigurationCredentials": {
            "properties": {
                "sourceSalesloftCredentialsAuthenticateViaApiKey": {
                    "$ref": "#/types/airbyte:index/SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaApiKey:SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaApiKey"
                },
                "sourceSalesloftCredentialsAuthenticateViaOAuth": {
                    "$ref": "#/types/airbyte:index/SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaOAuth:SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaOAuth"
                },
                "sourceSalesloftUpdateCredentialsAuthenticateViaApiKey": {
                    "$ref": "#/types/airbyte:index/SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaApiKey:SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaApiKey"
                },
                "sourceSalesloftUpdateCredentialsAuthenticateViaOAuth": {
                    "$ref": "#/types/airbyte:index/SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaOAuth:SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaOAuth"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaApiKey:SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaApiKey": {
            "properties": {
                "apiKey": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "authType"
            ]
        },
        "airbyte:index/SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaOAuth:SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaOAuth": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken",
                "tokenExpiryDate"
            ]
        },
        "airbyte:index/SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaApiKey:SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaApiKey": {
            "properties": {
                "apiKey": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "authType"
            ]
        },
        "airbyte:index/SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaOAuth:SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaOAuth": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken",
                "tokenExpiryDate"
            ]
        },
        "airbyte:index/SourceSapFieldglassConfiguration:SourceSapFieldglassConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"sap-fieldglass\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ]
        },
        "airbyte:index/SourceSecodaConfiguration:SourceSecodaConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Your API Access Key. See \\n\\nhere\\n\\n. The key is case sensitive.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"secoda\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ]
        },
        "airbyte:index/SourceSendgridConfiguration:SourceSendgridConfiguration": {
            "properties": {
                "apikey": {
                    "type": "string",
                    "description": "API Key, use \\n\\nadmin\\n\\n to generate this key.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"sendgrid\"]\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "Start time in ISO8601 format. Any data before this time point will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "apikey",
                "sourceType"
            ]
        },
        "airbyte:index/SourceSendinblueConfiguration:SourceSendinblueConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Your API Key. See \\n\\nhere\\n\\n.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"sendinblue\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ]
        },
        "airbyte:index/SourceSenseforceConfiguration:SourceSenseforceConfiguration": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Your API access token. See \\n\\nhere\\n\\n. The toke is case sensitive.\n"
                },
                "backendUrl": {
                    "type": "string",
                    "description": "Your Senseforce API backend URL. This is the URL shown during the Login screen. See \\n\\nhere\\n\\n for more details. (Note: Most Senseforce backend APIs have the term 'galaxy' in their ULR)\n"
                },
                "datasetId": {
                    "type": "string",
                    "description": "The ID of the dataset you want to synchronize. The ID can be found in the URL when opening the dataset. See \\n\\nhere\\n\\n for more details. (Note: As the Senseforce API only allows to synchronize a specific dataset, each dataset you  want to synchronize needs to be implemented as a separate airbyte source).\n"
                },
                "sliceRange": {
                    "type": "integer",
                    "description": "The time increment used by the connector when requesting data from the Senseforce API. The bigger the value is, the less requests will be made and faster the sync will be. On the other hand, the more seldom the state is persisted and the more likely one could run into rate limites.  Furthermore, consider that large chunks of time might take a long time for the Senseforce query to return data - meaning it could take in effect longer than with more smaller time slices. If there are a lot of data per day, set this setting to 1. If there is only very little data per day, you might change the setting to 10 or more.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"senseforce\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25. Only data with \"Timestamp\" after this date will be replicated. Important note: This start date must be set to the first day of where your dataset provides data.  If your dataset has data from 2020-10-10 10:21:10, set the start_date to 2020-10-10 or later\n"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "backendUrl",
                "datasetId",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceSentryConfiguration:SourceSentryConfiguration": {
            "properties": {
                "authToken": {
                    "type": "string",
                    "description": "Log into Sentry and then \\n\\ncreate authentication tokens\\n\\n.For self-hosted, you can find or create authentication tokens by visiting \"{instance*url*prefix}/settings/account/api/auth-tokens/\"\n"
                },
                "discoverFields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Fields to retrieve when fetching discover events\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Host name of Sentry API server.For self-hosted, specify your host name here. Otherwise, leave it empty.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the groups belong to.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name (slug) of the Project you want to sync.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"sentry\"]\n"
                }
            },
            "type": "object",
            "required": [
                "authToken",
                "organization",
                "project",
                "sourceType"
            ]
        },
        "airbyte:index/SourceSftpBulkConfiguration:SourceSftpBulkConfiguration": {
            "properties": {
                "fileMostRecent": {
                    "type": "boolean",
                    "description": "Sync only the most recent file for the configured folder path and file pattern\n"
                },
                "filePattern": {
                    "type": "string",
                    "description": "The regular expression to specify files for sync in a chosen Folder Path\n"
                },
                "fileType": {
                    "type": "string",
                    "description": "must be one of [\"csv\", \"json\"]\nThe file type you want to sync. Currently only 'csv' and 'json' files are supported.\n"
                },
                "folderPath": {
                    "type": "string",
                    "description": "The directory to search files for sync\n"
                },
                "host": {
                    "type": "string",
                    "description": "The server host address\n"
                },
                "password": {
                    "type": "string",
                    "description": "OS-level password for logging into the jump server host\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The server port\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private key\n"
                },
                "separator": {
                    "type": "string",
                    "description": "The separator used in the CSV files. Define None if you want to use the Sniffer functionality\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"sftp-bulk\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data for all incremental streams, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.\n"
                },
                "streamName": {
                    "type": "string",
                    "description": "The name of the stream or table you want to create\n"
                },
                "username": {
                    "type": "string",
                    "description": "The server user\n"
                }
            },
            "type": "object",
            "required": [
                "folderPath",
                "host",
                "port",
                "sourceType",
                "startDate",
                "streamName",
                "username"
            ]
        },
        "airbyte:index/SourceSftpConfiguration:SourceSftpConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceSftpConfigurationCredentials:SourceSftpConfigurationCredentials",
                    "description": "The server authentication method\n"
                },
                "filePattern": {
                    "type": "string",
                    "description": "The regular expression to specify files for sync in a chosen Folder Path\n"
                },
                "fileTypes": {
                    "type": "string",
                    "description": "Coma separated file types. Currently only 'csv' and 'json' types are supported.\n"
                },
                "folderPath": {
                    "type": "string",
                    "description": "The directory to search files for sync\n"
                },
                "host": {
                    "type": "string",
                    "description": "The server host address\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The server port\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"sftp\"]\n"
                },
                "user": {
                    "type": "string",
                    "description": "The server user\n"
                }
            },
            "type": "object",
            "required": [
                "host",
                "port",
                "sourceType",
                "user"
            ]
        },
        "airbyte:index/SourceSftpConfigurationCredentials:SourceSftpConfigurationCredentials": {
            "properties": {
                "sourceSftpAuthenticationWildcardPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardPasswordAuthentication:SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardPasswordAuthentication"
                },
                "sourceSftpAuthenticationWildcardSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardSshKeyAuthentication:SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardSshKeyAuthentication"
                },
                "sourceSftpUpdateAuthenticationWildcardPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardPasswordAuthentication:SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardPasswordAuthentication"
                },
                "sourceSftpUpdateAuthenticationWildcardSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardSshKeyAuthentication:SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardSshKeyAuthentication"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardPasswordAuthentication:SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardPasswordAuthentication": {
            "properties": {
                "authMethod": {
                    "type": "string"
                },
                "authUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authMethod",
                "authUserPassword"
            ]
        },
        "airbyte:index/SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardSshKeyAuthentication:SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardSshKeyAuthentication": {
            "properties": {
                "authMethod": {
                    "type": "string"
                },
                "authSshKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authMethod",
                "authSshKey"
            ]
        },
        "airbyte:index/SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardPasswordAuthentication:SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardPasswordAuthentication": {
            "properties": {
                "authMethod": {
                    "type": "string"
                },
                "authUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authMethod",
                "authUserPassword"
            ]
        },
        "airbyte:index/SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardSshKeyAuthentication:SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardSshKeyAuthentication": {
            "properties": {
                "authMethod": {
                    "type": "string"
                },
                "authSshKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authMethod",
                "authSshKey"
            ]
        },
        "airbyte:index/SourceShopifyConfiguration:SourceShopifyConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceShopifyConfigurationCredentials:SourceShopifyConfigurationCredentials",
                    "description": "The authorization method to use to retrieve data from Shopify\n"
                },
                "shop": {
                    "type": "string",
                    "description": "The name of your Shopify store found in the URL. For example, if your URL was https://NAME.myshopify.com, then the name would be 'NAME' or 'NAME.myshopify.com'.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"shopify\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date you would like to replicate data from. Format: YYYY-MM-DD. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "shop",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceShopifyConfigurationCredentials:SourceShopifyConfigurationCredentials": {
            "properties": {
                "sourceShopifyShopifyAuthorizationMethodApiPassword": {
                    "$ref": "#/types/airbyte:index/SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodApiPassword:SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodApiPassword"
                },
                "sourceShopifyShopifyAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodOAuth20:SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodOAuth20"
                },
                "sourceShopifyUpdateShopifyAuthorizationMethodApiPassword": {
                    "$ref": "#/types/airbyte:index/SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodApiPassword:SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodApiPassword"
                },
                "sourceShopifyUpdateShopifyAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodOAuth20:SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodOAuth20"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodApiPassword:SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodApiPassword": {
            "properties": {
                "apiPassword": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiPassword",
                "authMethod"
            ]
        },
        "airbyte:index/SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodOAuth20:SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authMethod"
            ]
        },
        "airbyte:index/SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodApiPassword:SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodApiPassword": {
            "properties": {
                "apiPassword": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiPassword",
                "authMethod"
            ]
        },
        "airbyte:index/SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodOAuth20:SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authMethod"
            ]
        },
        "airbyte:index/SourceShortioConfiguration:SourceShortioConfiguration": {
            "properties": {
                "domainId": {
                    "type": "string"
                },
                "secretKey": {
                    "type": "string",
                    "description": "Short.io Secret Key\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"shortio\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "domainId",
                "secretKey",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceSlackConfiguration:SourceSlackConfiguration": {
            "properties": {
                "channelFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A channel name list (without leading '#' char) which limit the channels from which you'd like to sync. Empty list means no filter.\n"
                },
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceSlackConfigurationCredentials:SourceSlackConfigurationCredentials",
                    "description": "Choose how to authenticate into Slack\n"
                },
                "joinChannels": {
                    "type": "boolean",
                    "description": "Whether to join all channels or to sync data only from channels the bot is already in.  If false, you'll need to manually add the bot to all the channels from which you'd like to sync messages.\n"
                },
                "lookbackWindow": {
                    "type": "integer",
                    "description": "How far into the past to look for messages in threads, default is 0 days\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"slack\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "joinChannels",
                "lookbackWindow",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceSlackConfigurationCredentials:SourceSlackConfigurationCredentials": {
            "properties": {
                "sourceSlackAuthenticationMechanismApiToken": {
                    "$ref": "#/types/airbyte:index/SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismApiToken:SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismApiToken"
                },
                "sourceSlackAuthenticationMechanismSignInViaSlackOAuth": {
                    "$ref": "#/types/airbyte:index/SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismSignInViaSlackOAuth:SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismSignInViaSlackOAuth"
                },
                "sourceSlackUpdateAuthenticationMechanismApiToken": {
                    "$ref": "#/types/airbyte:index/SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismApiToken:SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismApiToken"
                },
                "sourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth": {
                    "$ref": "#/types/airbyte:index/SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth:SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismApiToken:SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismApiToken": {
            "properties": {
                "apiToken": {
                    "type": "string"
                },
                "optionTitle": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "optionTitle"
            ]
        },
        "airbyte:index/SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismSignInViaSlackOAuth:SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismSignInViaSlackOAuth": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "optionTitle": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "clientId",
                "clientSecret",
                "optionTitle"
            ]
        },
        "airbyte:index/SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismApiToken:SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismApiToken": {
            "properties": {
                "apiToken": {
                    "type": "string"
                },
                "optionTitle": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "optionTitle"
            ]
        },
        "airbyte:index/SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth:SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "optionTitle": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "clientId",
                "clientSecret",
                "optionTitle"
            ]
        },
        "airbyte:index/SourceSmailyConfiguration:SourceSmailyConfiguration": {
            "properties": {
                "apiPassword": {
                    "type": "string",
                    "description": "API user password. See https://smaily.com/help/api/general/create-api-user/\n"
                },
                "apiSubdomain": {
                    "type": "string",
                    "description": "API Subdomain. See https://smaily.com/help/api/general/create-api-user/\n"
                },
                "apiUsername": {
                    "type": "string",
                    "description": "API user username. See https://smaily.com/help/api/general/create-api-user/\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"smaily\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiPassword",
                "apiSubdomain",
                "apiUsername",
                "sourceType"
            ]
        },
        "airbyte:index/SourceSmartengageConfiguration:SourceSmartengageConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"smartengage\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ]
        },
        "airbyte:index/SourceSmartsheetsConfiguration:SourceSmartsheetsConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceSmartsheetsConfigurationCredentials:SourceSmartsheetsConfigurationCredentials"
                },
                "metadataFields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A List of available columns which metadata can be pulled from.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"smartsheets\"]\n"
                },
                "spreadsheetId": {
                    "type": "string",
                    "description": "The spreadsheet ID. Find it by opening the spreadsheet then navigating to File \u003e Properties\n"
                },
                "startDatetime": {
                    "type": "string",
                    "description": "Only rows modified after this date/time will be replicated. This should be an ISO 8601 string, for instance: `2000-01-01T13:00:00`\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "sourceType",
                "spreadsheetId"
            ]
        },
        "airbyte:index/SourceSmartsheetsConfigurationCredentials:SourceSmartsheetsConfigurationCredentials": {
            "properties": {
                "sourceSmartsheetsAuthorizationMethodApiAccessToken": {
                    "$ref": "#/types/airbyte:index/SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodApiAccessToken:SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodApiAccessToken"
                },
                "sourceSmartsheetsAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodOAuth20:SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodOAuth20"
                },
                "sourceSmartsheetsUpdateAuthorizationMethodApiAccessToken": {
                    "$ref": "#/types/airbyte:index/SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodApiAccessToken:SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodApiAccessToken"
                },
                "sourceSmartsheetsUpdateAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodOAuth20:SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodOAuth20"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodApiAccessToken:SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodApiAccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken"
            ]
        },
        "airbyte:index/SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodOAuth20:SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "clientId",
                "clientSecret",
                "refreshToken",
                "tokenExpiryDate"
            ]
        },
        "airbyte:index/SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodApiAccessToken:SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodApiAccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken"
            ]
        },
        "airbyte:index/SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodOAuth20:SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "clientId",
                "clientSecret",
                "refreshToken",
                "tokenExpiryDate"
            ]
        },
        "airbyte:index/SourceSnapchatMarketingConfiguration:SourceSnapchatMarketingConfiguration": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The Client ID of your Snapchat developer application.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The Client Secret of your Snapchat developer application.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "Date in the format 2017-01-25. Any data after this date will not be replicated.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "Refresh Token to renew the expired Access Token.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"snapchat-marketing\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Date in the format 2022-01-01. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "refreshToken",
                "sourceType"
            ]
        },
        "airbyte:index/SourceSnowflakeConfiguration:SourceSnowflakeConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceSnowflakeConfigurationCredentials:SourceSnowflakeConfigurationCredentials"
                },
                "database": {
                    "type": "string",
                    "description": "The database you created for Airbyte to access data.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The host domain of the snowflake instance (must include the account, region, cloud environment, and end with snowflakecomputing.com).\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '\u0026'. (example: key1=value1\u0026key2=value2\u0026key3=value3).\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role you created for Airbyte to access Snowflake.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The source Snowflake schema tables. Leave empty to access tables from multiple schemas.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"snowflake\"]\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse you created for Airbyte to access data.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "host",
                "role",
                "sourceType",
                "warehouse"
            ]
        },
        "airbyte:index/SourceSnowflakeConfigurationCredentials:SourceSnowflakeConfigurationCredentials": {
            "properties": {
                "sourceSnowflakeAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodOAuth20:SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodOAuth20"
                },
                "sourceSnowflakeAuthorizationMethodUsernameAndPassword": {
                    "$ref": "#/types/airbyte:index/SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodUsernameAndPassword:SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodUsernameAndPassword"
                },
                "sourceSnowflakeUpdateAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodOAuth20:SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodOAuth20"
                },
                "sourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword": {
                    "$ref": "#/types/airbyte:index/SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword:SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodOAuth20:SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId",
                "clientSecret"
            ]
        },
        "airbyte:index/SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodUsernameAndPassword:SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodUsernameAndPassword": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "password",
                "username"
            ]
        },
        "airbyte:index/SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodOAuth20:SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId",
                "clientSecret"
            ]
        },
        "airbyte:index/SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword:SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "password",
                "username"
            ]
        },
        "airbyte:index/SourceSonarCloudConfiguration:SourceSonarCloudConfiguration": {
            "properties": {
                "componentKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Comma-separated list of component keys.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "To retrieve issues created before the given date (inclusive).\n"
                },
                "organization": {
                    "type": "string",
                    "description": "Organization key. See \\n\\nhere\\n\\n.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"sonar-cloud\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "To retrieve issues created after the given date (inclusive).\n"
                },
                "userToken": {
                    "type": "string",
                    "description": "Your User Token. See \\n\\nhere\\n\\n. The token is case sensitive.\n"
                }
            },
            "type": "object",
            "required": [
                "componentKeys",
                "organization",
                "sourceType",
                "userToken"
            ]
        },
        "airbyte:index/SourceSpaceXApiConfiguration:SourceSpaceXApiConfiguration": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"spacex-api\"]\n"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceSquareConfiguration:SourceSquareConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceSquareConfigurationCredentials:SourceSquareConfigurationCredentials",
                    "description": "Choose how to authenticate to Square.\n"
                },
                "includeDeletedObjects": {
                    "type": "boolean",
                    "description": "In some streams there is an option to include deleted objects (Items, Categories, Discounts, Taxes)\n"
                },
                "isSandbox": {
                    "type": "boolean",
                    "description": "Determines whether to use the sandbox or production environment.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"square\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date in the format YYYY-MM-DD. Any data before this date will not be replicated. If not set, all data will be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "isSandbox",
                "sourceType"
            ]
        },
        "airbyte:index/SourceSquareConfigurationCredentials:SourceSquareConfigurationCredentials": {
            "properties": {
                "sourceSquareAuthenticationApiKey": {
                    "$ref": "#/types/airbyte:index/SourceSquareConfigurationCredentialsSourceSquareAuthenticationApiKey:SourceSquareConfigurationCredentialsSourceSquareAuthenticationApiKey"
                },
                "sourceSquareAuthenticationOauthAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceSquareConfigurationCredentialsSourceSquareAuthenticationOauthAuthentication:SourceSquareConfigurationCredentialsSourceSquareAuthenticationOauthAuthentication"
                },
                "sourceSquareUpdateAuthenticationApiKey": {
                    "$ref": "#/types/airbyte:index/SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationApiKey:SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationApiKey"
                },
                "sourceSquareUpdateAuthenticationOauthAuthentication": {
                    "$ref": "#/types/airbyte:index/SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationOauthAuthentication:SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationOauthAuthentication"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceSquareConfigurationCredentialsSourceSquareAuthenticationApiKey:SourceSquareConfigurationCredentialsSourceSquareAuthenticationApiKey": {
            "properties": {
                "apiKey": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "authType"
            ]
        },
        "airbyte:index/SourceSquareConfigurationCredentialsSourceSquareAuthenticationOauthAuthentication:SourceSquareConfigurationCredentialsSourceSquareAuthenticationOauthAuthentication": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationApiKey:SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationApiKey": {
            "properties": {
                "apiKey": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "authType"
            ]
        },
        "airbyte:index/SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationOauthAuthentication:SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationOauthAuthentication": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceStravaConfiguration:SourceStravaConfiguration": {
            "properties": {
                "athleteId": {
                    "type": "integer",
                    "description": "The Athlete ID of your Strava developer application.\n"
                },
                "authType": {
                    "type": "string",
                    "description": "must be one of [\"Client\"]\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The Client ID of your Strava developer application.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The Client Secret of your Strava developer application.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "The Refresh Token with the activity: read_all permissions.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"strava\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "athleteId",
                "clientId",
                "clientSecret",
                "refreshToken",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceStripeConfiguration:SourceStripeConfiguration": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Your Stripe account ID (starts with 'acct_', find yours \\n\\nhere\\n\\n).\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Stripe API key (usually starts with 'sk*live*'; find yours \\n\\nhere\\n\\n).\n"
                },
                "lookbackWindowDays": {
                    "type": "integer",
                    "description": "When set, the connector will always re-export data from the past N days, where N is the value set here. This is useful if your data is frequently updated after creation. More info \\n\\nhere\\n\\n\n"
                },
                "sliceRange": {
                    "type": "integer",
                    "description": "The time increment used by the connector when requesting data from the Stripe API. The bigger the value is, the less requests will be made and faster the sync will be. On the other hand, the more seldom the state is persisted.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"stripe\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Only data generated after this date will be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "clientSecret",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceSurveySparrowConfiguration:SourceSurveySparrowConfiguration": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Your access token. See \\n\\nhere\\n\\n. The key is case sensitive.\n"
                },
                "region": {
                    "$ref": "#/types/airbyte:index/SourceSurveySparrowConfigurationRegion:SourceSurveySparrowConfigurationRegion",
                    "description": "Is your account location is EU based? If yes, the base url to retrieve data will be different.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"survey-sparrow\"]\n"
                },
                "surveyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A List of your survey ids for survey-specific stream\n"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "sourceType"
            ]
        },
        "airbyte:index/SourceSurveySparrowConfigurationRegion:SourceSurveySparrowConfigurationRegion": {
            "properties": {
                "sourceSurveySparrowBaseUrlEuBasedAccount": {
                    "$ref": "#/types/airbyte:index/SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlEuBasedAccount:SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlEuBasedAccount"
                },
                "sourceSurveySparrowBaseUrlGlobalAccount": {
                    "$ref": "#/types/airbyte:index/SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlGlobalAccount:SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlGlobalAccount"
                },
                "sourceSurveySparrowUpdateBaseUrlEuBasedAccount": {
                    "$ref": "#/types/airbyte:index/SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlEuBasedAccount:SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlEuBasedAccount"
                },
                "sourceSurveySparrowUpdateBaseUrlGlobalAccount": {
                    "$ref": "#/types/airbyte:index/SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlGlobalAccount:SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlGlobalAccount"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlEuBasedAccount:SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlEuBasedAccount": {
            "properties": {
                "urlBase": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlGlobalAccount:SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlGlobalAccount": {
            "properties": {
                "urlBase": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlEuBasedAccount:SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlEuBasedAccount": {
            "properties": {
                "urlBase": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlGlobalAccount:SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlGlobalAccount": {
            "properties": {
                "urlBase": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceSurveymonkeyConfiguration:SourceSurveymonkeyConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceSurveymonkeyConfigurationCredentials:SourceSurveymonkeyConfigurationCredentials",
                    "description": "The authorization method to use to retrieve data from SurveyMonkey\n"
                },
                "origin": {
                    "type": "string",
                    "description": "must be one of [\"USA\", \"Europe\", \"Canada\"]\nDepending on the originating datacenter of the SurveyMonkey account, the API access URL may be different.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"surveymonkey\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                },
                "surveyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of the surveys from which you'd like to replicate data. If left empty, data from all boards to which you have access will be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceSurveymonkeyConfigurationCredentials:SourceSurveymonkeyConfigurationCredentials": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authMethod"
            ]
        },
        "airbyte:index/SourceTempoConfiguration:SourceTempoConfiguration": {
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "Tempo API Token. Go to Tempo\u003eSettings, scroll down to Data Access and select API integration.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"tempo\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "sourceType"
            ]
        },
        "airbyte:index/SourceTheGuardianApiConfiguration:SourceTheGuardianApiConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Your API Key. See \\n\\nhere\\n\\n. The key is case sensitive.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "(Optional) Use this to set the maximum date (YYYY-MM-DD) of the results. Results newer than the end_date will not be shown. Default is set to the current date (today) for incremental syncs.\n"
                },
                "query": {
                    "type": "string",
                    "description": "(Optional) The query (q) parameter filters the results to only those that include that search term. The q parameter supports AND, OR and NOT operators.\n"
                },
                "section": {
                    "type": "string",
                    "description": "(Optional) Use this to filter the results by a particular section. See \\n\\nhere\\n\\n for a list of all sections, and \\n\\nhere\\n\\n for the sections endpoint documentation.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"the-guardian-api\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Use this to set the minimum date (YYYY-MM-DD) of the results. Results older than the start_date will not be shown.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "(Optional) A tag is a piece of data that is used by The Guardian to categorise content. Use this parameter to filter results by showing only the ones matching the entered tag. See \\n\\nhere\\n\\n for a list of all tags, and \\n\\nhere\\n\\n for the tags endpoint documentation.\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceTiktokMarketingConfiguration:SourceTiktokMarketingConfiguration": {
            "properties": {
                "attributionWindow": {
                    "type": "integer",
                    "description": "The attribution window in days.\n"
                },
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceTiktokMarketingConfigurationCredentials:SourceTiktokMarketingConfigurationCredentials",
                    "description": "Authentication method\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "The date until which you'd like to replicate data for all incremental streams, in the format YYYY-MM-DD. All data generated between start_date and this date will be replicated. Not setting this option will result in always syncing the data till the current date.\n"
                },
                "includeDeleted": {
                    "type": "boolean",
                    "description": "Set to active if you want to include deleted data in reports.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"tiktok-marketing\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The Start Date in format: YYYY-MM-DD. Any data before this date will not be replicated. If this parameter is not set, all data will be replicated.\n"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceTiktokMarketingConfigurationCredentials:SourceTiktokMarketingConfigurationCredentials": {
            "properties": {
                "sourceTiktokMarketingAuthenticationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodOAuth20:SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodOAuth20"
                },
                "sourceTiktokMarketingAuthenticationMethodSandboxAccessToken": {
                    "$ref": "#/types/airbyte:index/SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodSandboxAccessToken:SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodSandboxAccessToken"
                },
                "sourceTiktokMarketingUpdateAuthenticationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodOAuth20:SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodOAuth20"
                },
                "sourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken": {
                    "$ref": "#/types/airbyte:index/SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken:SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodOAuth20:SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "advertiserId": {
                    "type": "string"
                },
                "appId": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "appId",
                "secret"
            ]
        },
        "airbyte:index/SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodSandboxAccessToken:SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodSandboxAccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "advertiserId": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "advertiserId"
            ]
        },
        "airbyte:index/SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodOAuth20:SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "advertiserId": {
                    "type": "string"
                },
                "appId": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "appId",
                "secret"
            ]
        },
        "airbyte:index/SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken:SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "advertiserId": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "advertiserId"
            ]
        },
        "airbyte:index/SourceTodoistConfiguration:SourceTodoistConfiguration": {
            "properties": {
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"todoist\"]\n"
                },
                "token": {
                    "type": "string",
                    "description": "Your API Token. See \\n\\nhere\\n\\n. The token is case sensitive.\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType",
                "token"
            ]
        },
        "airbyte:index/SourceTrelloConfiguration:SourceTrelloConfiguration": {
            "properties": {
                "boardIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of the boards to replicate data from. If left empty, data from all boards to which you have access will be replicated.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Trello API key. See the \\n\\ndocs\\n\\n for instructions on how to generate it.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"trello\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Trello API token. See the \\n\\ndocs\\n\\n for instructions on how to generate it.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "sourceType",
                "startDate",
                "token"
            ]
        },
        "airbyte:index/SourceTrustpilotConfiguration:SourceTrustpilotConfiguration": {
            "properties": {
                "businessUnits": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of business units which shall be synchronized. Some streams e.g. configured*business*units or private_reviews use this configuration.\n"
                },
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceTrustpilotConfigurationCredentials:SourceTrustpilotConfigurationCredentials"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"trustpilot\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "For streams with sync. method incremental the start date time to be used\n"
                }
            },
            "type": "object",
            "required": [
                "businessUnits",
                "credentials",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceTrustpilotConfigurationCredentials:SourceTrustpilotConfigurationCredentials": {
            "properties": {
                "sourceTrustpilotAuthorizationMethodApiKey": {
                    "$ref": "#/types/airbyte:index/SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodApiKey:SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodApiKey"
                },
                "sourceTrustpilotAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodOAuth20:SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodOAuth20"
                },
                "sourceTrustpilotUpdateAuthorizationMethodApiKey": {
                    "$ref": "#/types/airbyte:index/SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodApiKey:SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodApiKey"
                },
                "sourceTrustpilotUpdateAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodOAuth20:SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodOAuth20"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodApiKey:SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodApiKey": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId"
            ]
        },
        "airbyte:index/SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodOAuth20:SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "clientId",
                "clientSecret",
                "refreshToken",
                "tokenExpiryDate"
            ]
        },
        "airbyte:index/SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodApiKey:SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodApiKey": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId"
            ]
        },
        "airbyte:index/SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodOAuth20:SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "clientId",
                "clientSecret",
                "refreshToken",
                "tokenExpiryDate"
            ]
        },
        "airbyte:index/SourceTvmazeScheduleConfiguration:SourceTvmazeScheduleConfiguration": {
            "properties": {
                "domesticScheduleCountryCode": {
                    "type": "string",
                    "description": "Country code for domestic TV schedule retrieval.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "End date for TV schedule retrieval. May be in the future. Optional.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"tvmaze-schedule\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Start date for TV schedule retrieval. May be in the future.\n"
                },
                "webScheduleCountryCode": {
                    "type": "string",
                    "description": "ISO 3166-1 country code for web TV schedule retrieval. Leave blank for\nall countries plus global web channels (e.g. Netflix). Alternatively,\nset to 'global' for just global web channels.\n"
                }
            },
            "type": "object",
            "required": [
                "domesticScheduleCountryCode",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceTwilioConfiguration:SourceTwilioConfiguration": {
            "properties": {
                "accountSid": {
                    "type": "string",
                    "description": "Twilio account SID\n"
                },
                "authToken": {
                    "type": "string",
                    "description": "Twilio Auth Token.\n"
                },
                "lookbackWindow": {
                    "type": "integer",
                    "description": "How far into the past to look for records. (in minutes)\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"twilio\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2020-10-01T00:00:00Z. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "accountSid",
                "authToken",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceTwilioTaskrouterConfiguration:SourceTwilioTaskrouterConfiguration": {
            "properties": {
                "accountSid": {
                    "type": "string",
                    "description": "Twilio Account ID\n"
                },
                "authToken": {
                    "type": "string",
                    "description": "Twilio Auth Token\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"twilio-taskrouter\"]\n"
                }
            },
            "type": "object",
            "required": [
                "accountSid",
                "authToken",
                "sourceType"
            ]
        },
        "airbyte:index/SourceTwitterConfiguration:SourceTwitterConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "App only Bearer Token. See the \\n\\ndocs\\n\\n for more information on how to obtain this token.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "The end date for retrieving tweets must be a minimum of 10 seconds prior to the request time.\n"
                },
                "query": {
                    "type": "string",
                    "description": "Query for matching Tweets. You can learn how to build this query by reading \\n\\n build a query guide \\n\\n.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"twitter\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The start date for retrieving tweets cannot be more than 7 days in the past.\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "query",
                "sourceType"
            ]
        },
        "airbyte:index/SourceTypeformConfiguration:SourceTypeformConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceTypeformConfigurationCredentials:SourceTypeformConfigurationCredentials"
                },
                "formIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When this parameter is set, the connector will replicate data only from the input forms. Otherwise, all forms in your Typeform account will be replicated. You can find form IDs in your form URLs. For example, in the URL \"https://mysite.typeform.com/to/u6nXL7\" the form_id is u6nXL7. You can find form URLs on Share panel\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"typeform\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data for Typeform API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "sourceType"
            ]
        },
        "airbyte:index/SourceTypeformConfigurationCredentials:SourceTypeformConfigurationCredentials": {
            "properties": {
                "sourceTypeformAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodOAuth20:SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodOAuth20"
                },
                "sourceTypeformAuthorizationMethodPrivateToken": {
                    "$ref": "#/types/airbyte:index/SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodPrivateToken:SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodPrivateToken"
                },
                "sourceTypeformUpdateAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodOAuth20:SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodOAuth20"
                },
                "sourceTypeformUpdateAuthorizationMethodPrivateToken": {
                    "$ref": "#/types/airbyte:index/SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodPrivateToken:SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodPrivateToken"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodOAuth20:SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "clientId",
                "clientSecret",
                "refreshToken",
                "tokenExpiryDate"
            ]
        },
        "airbyte:index/SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodPrivateToken:SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodPrivateToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken"
            ]
        },
        "airbyte:index/SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodOAuth20:SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "clientId",
                "clientSecret",
                "refreshToken",
                "tokenExpiryDate"
            ]
        },
        "airbyte:index/SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodPrivateToken:SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodPrivateToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken"
            ]
        },
        "airbyte:index/SourceUsCensusConfiguration:SourceUsCensusConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Your API Key. Get your key \\n\\nhere\\n\\n.\n"
                },
                "queryParams": {
                    "type": "string",
                    "description": "The query parameters portion of the GET request, without the api key\n"
                },
                "queryPath": {
                    "type": "string",
                    "description": "The path portion of the GET request\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"us-census\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "queryPath",
                "sourceType"
            ]
        },
        "airbyte:index/SourceVantageConfiguration:SourceVantageConfiguration": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Your API Access token. See \\n\\nhere\\n\\n.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"vantage\"]\n"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "sourceType"
            ]
        },
        "airbyte:index/SourceWebflowConfiguration:SourceWebflowConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "The API token for authenticating to Webflow. See https://university.webflow.com/lesson/intro-to-the-webflow-api\n"
                },
                "siteId": {
                    "type": "string",
                    "description": "The id of the Webflow site you are requesting data from. See https://developers.webflow.com/#sites\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"webflow\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "siteId",
                "sourceType"
            ]
        },
        "airbyte:index/SourceWhiskyHunterConfiguration:SourceWhiskyHunterConfiguration": {
            "properties": {
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"whisky-hunter\"]\n"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceWikipediaPageviewsConfiguration:SourceWikipediaPageviewsConfiguration": {
            "properties": {
                "access": {
                    "type": "string",
                    "description": "If you want to filter by access method, use one of desktop, mobile-app or mobile-web. If you are interested in pageviews regardless of access method, use all-access.\n"
                },
                "agent": {
                    "type": "string",
                    "description": "If you want to filter by agent type, use one of user, automated or spider. If you are interested in pageviews regardless of agent type, use all-agents.\n"
                },
                "article": {
                    "type": "string",
                    "description": "The title of any article in the specified project. Any spaces should be replaced with underscores. It also should be URI-encoded, so that non-URI-safe characters like %, / or ? are accepted.\n"
                },
                "country": {
                    "type": "string",
                    "description": "The ISO 3166-1 alpha-2 code of a country for which to retrieve top articles.\n"
                },
                "end": {
                    "type": "string",
                    "description": "The date of the last day to include, in YYYYMMDD or YYYYMMDDHH format.\n"
                },
                "project": {
                    "type": "string",
                    "description": "If you want to filter by project, use the domain of any Wikimedia project.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"wikipedia-pageviews\"]\n"
                },
                "start": {
                    "type": "string",
                    "description": "The date of the first day to include, in YYYYMMDD or YYYYMMDDHH format.\n"
                }
            },
            "type": "object",
            "required": [
                "access",
                "agent",
                "article",
                "country",
                "end",
                "project",
                "sourceType",
                "start"
            ]
        },
        "airbyte:index/SourceWoocommerceConfiguration:SourceWoocommerceConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Customer Key for API in WooCommerce shop\n"
                },
                "apiSecret": {
                    "type": "string",
                    "description": "Customer Secret for API in WooCommerce shop\n"
                },
                "shop": {
                    "type": "string",
                    "description": "The name of the store. For https://EXAMPLE.com, the shop name is 'EXAMPLE.com'.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"woocommerce\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date you would like to replicate data from. Format: YYYY-MM-DD\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "apiSecret",
                "shop",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceXeroConfiguration:SourceXeroConfiguration": {
            "properties": {
                "authentication": {
                    "$ref": "#/types/airbyte:index/SourceXeroConfigurationAuthentication:SourceXeroConfigurationAuthentication"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"xero\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format YYYY-MM-DDTHH:mm:ssZ. Any data with created_at before this data will not be synced.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "Enter your Xero organization's Tenant ID\n"
                }
            },
            "type": "object",
            "required": [
                "authentication",
                "sourceType",
                "startDate",
                "tenantId"
            ]
        },
        "airbyte:index/SourceXeroConfigurationAuthentication:SourceXeroConfigurationAuthentication": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "clientId",
                "clientSecret",
                "refreshToken",
                "tokenExpiryDate"
            ]
        },
        "airbyte:index/SourceXkcdConfiguration:SourceXkcdConfiguration": {
            "properties": {
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"xkcd\"]\n"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceYandexMetricaConfiguration:SourceYandexMetricaConfiguration": {
            "properties": {
                "authToken": {
                    "type": "string",
                    "description": "Your Yandex Metrica API access token\n"
                },
                "counterId": {
                    "type": "string",
                    "description": "Counter ID\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "Starting point for your data replication, in format of \"YYYY-MM-DD\". If not provided will sync till most recent date.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"yandex-metrica\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Starting point for your data replication, in format of \"YYYY-MM-DD\".\n"
                }
            },
            "type": "object",
            "required": [
                "authToken",
                "counterId",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceYotpoConfiguration:SourceYotpoConfiguration": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token recieved as a result of API call to https://api.yotpo.com/oauth/token (Ref- https://apidocs.yotpo.com/reference/yotpo-authentication)\n"
                },
                "appKey": {
                    "type": "string",
                    "description": "App key found at settings (Ref- https://settings.yotpo.com/#/general_settings)\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email address registered with yotpo.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"yotpo\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Date time filter for incremental filter, Specify which date to extract from.\n"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "appKey",
                "email",
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceYouniumConfiguration:SourceYouniumConfiguration": {
            "properties": {
                "legalEntity": {
                    "type": "string",
                    "description": "Legal Entity that data should be pulled from\n"
                },
                "password": {
                    "type": "string",
                    "description": "Account password for younium account API key\n"
                },
                "playground": {
                    "type": "boolean",
                    "description": "Property defining if connector is used against playground or production environment\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"younium\"]\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for Younium account\n"
                }
            },
            "type": "object",
            "required": [
                "legalEntity",
                "password",
                "sourceType",
                "username"
            ]
        },
        "airbyte:index/SourceYoutubeAnalyticsConfiguration:SourceYoutubeAnalyticsConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceYoutubeAnalyticsConfigurationCredentials:SourceYoutubeAnalyticsConfigurationCredentials"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"youtube-analytics\"]\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "sourceType"
            ]
        },
        "airbyte:index/SourceYoutubeAnalyticsConfigurationCredentials:SourceYoutubeAnalyticsConfigurationCredentials": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "refreshToken"
            ]
        },
        "airbyte:index/SourceZendeskChatConfiguration:SourceZendeskChatConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceZendeskChatConfigurationCredentials:SourceZendeskChatConfigurationCredentials"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"zendesk-chat\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data for Zendesk Chat API, in the format YYYY-MM-DDT00:00:00Z.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Required if you access Zendesk Chat from a Zendesk Support subdomain.\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType",
                "startDate"
            ]
        },
        "airbyte:index/SourceZendeskChatConfigurationCredentials:SourceZendeskChatConfigurationCredentials": {
            "properties": {
                "sourceZendeskChatAuthorizationMethodAccessToken": {
                    "$ref": "#/types/airbyte:index/SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodAccessToken:SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodAccessToken"
                },
                "sourceZendeskChatAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodOAuth20:SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodOAuth20"
                },
                "sourceZendeskChatUpdateAuthorizationMethodAccessToken": {
                    "$ref": "#/types/airbyte:index/SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodAccessToken:SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodAccessToken"
                },
                "sourceZendeskChatUpdateAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodOAuth20:SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodOAuth20"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodAccessToken:SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodAccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "credentials": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "credentials"
            ]
        },
        "airbyte:index/SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodOAuth20:SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "credentials": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentials"
            ]
        },
        "airbyte:index/SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodAccessToken:SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodAccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "credentials": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "credentials"
            ]
        },
        "airbyte:index/SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodOAuth20:SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "credentials": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentials"
            ]
        },
        "airbyte:index/SourceZendeskSunshineConfiguration:SourceZendeskSunshineConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceZendeskSunshineConfigurationCredentials:SourceZendeskSunshineConfigurationCredentials"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"zendesk-sunshine\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data for Zendesk Sunshine API, in the format YYYY-MM-DDT00:00:00Z.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "The subdomain for your Zendesk Account.\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType",
                "startDate",
                "subdomain"
            ]
        },
        "airbyte:index/SourceZendeskSunshineConfigurationCredentials:SourceZendeskSunshineConfigurationCredentials": {
            "properties": {
                "sourceZendeskSunshineAuthorizationMethodApiToken": {
                    "$ref": "#/types/airbyte:index/SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodApiToken:SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodApiToken"
                },
                "sourceZendeskSunshineAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodOAuth20:SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodOAuth20"
                },
                "sourceZendeskSunshineUpdateAuthorizationMethodApiToken": {
                    "$ref": "#/types/airbyte:index/SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodApiToken:SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodApiToken"
                },
                "sourceZendeskSunshineUpdateAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodOAuth20:SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodOAuth20"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodApiToken:SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodApiToken": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "apiToken": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "authMethod",
                "email"
            ]
        },
        "airbyte:index/SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodOAuth20:SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "additionalProperties": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authMethod",
                "clientId",
                "clientSecret"
            ]
        },
        "airbyte:index/SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodApiToken:SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodApiToken": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "apiToken": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "authMethod",
                "email"
            ]
        },
        "airbyte:index/SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodOAuth20:SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "additionalProperties": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authMethod",
                "clientId",
                "clientSecret"
            ]
        },
        "airbyte:index/SourceZendeskSupportConfiguration:SourceZendeskSupportConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceZendeskSupportConfigurationCredentials:SourceZendeskSupportConfigurationCredentials",
                    "description": "Zendesk allows two authentication methods. We recommend using `OAuth2.0` for Airbyte Cloud users and `API token` for Airbyte Open Source users.\n"
                },
                "ignorePagination": {
                    "type": "boolean",
                    "description": "Makes each stream read a single page of data.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"zendesk-support\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The UTC date and time from which you'd like to replicate data, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "This is your unique Zendesk subdomain that can be found in your account URL. For example, in https://MY*SUBDOMAIN.zendesk.com/, MY*SUBDOMAIN is the value of your subdomain.\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType",
                "startDate",
                "subdomain"
            ]
        },
        "airbyte:index/SourceZendeskSupportConfigurationCredentials:SourceZendeskSupportConfigurationCredentials": {
            "properties": {
                "sourceZendeskSupportAuthenticationApiToken": {
                    "$ref": "#/types/airbyte:index/SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationApiToken:SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationApiToken"
                },
                "sourceZendeskSupportAuthenticationOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationOAuth20:SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationOAuth20"
                },
                "sourceZendeskSupportUpdateAuthenticationApiToken": {
                    "$ref": "#/types/airbyte:index/SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationApiToken:SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationApiToken"
                },
                "sourceZendeskSupportUpdateAuthenticationOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationOAuth20:SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationOAuth20"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationApiToken:SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationApiToken": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "apiToken": {
                    "type": "string"
                },
                "credentials": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "email"
            ]
        },
        "airbyte:index/SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationOAuth20:SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "additionalProperties": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "credentials": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken"
            ]
        },
        "airbyte:index/SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationApiToken:SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationApiToken": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "apiToken": {
                    "type": "string"
                },
                "credentials": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "email"
            ]
        },
        "airbyte:index/SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationOAuth20:SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "additionalProperties": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "credentials": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken"
            ]
        },
        "airbyte:index/SourceZendeskTalkConfiguration:SourceZendeskTalkConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/SourceZendeskTalkConfigurationCredentials:SourceZendeskTalkConfigurationCredentials",
                    "description": "Zendesk service provides two authentication methods. Choose between: `OAuth2.0` or `API token`.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"zendesk-talk\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data for Zendesk Talk API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "This is your Zendesk subdomain that can be found in your account URL. For example, in https://{MY*SUBDOMAIN}.zendesk.com/, where MY*SUBDOMAIN is the value of your subdomain.\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType",
                "startDate",
                "subdomain"
            ]
        },
        "airbyte:index/SourceZendeskTalkConfigurationCredentials:SourceZendeskTalkConfigurationCredentials": {
            "properties": {
                "sourceZendeskTalkAuthenticationApiToken": {
                    "$ref": "#/types/airbyte:index/SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationApiToken:SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationApiToken"
                },
                "sourceZendeskTalkAuthenticationOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationOAuth20:SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationOAuth20"
                },
                "sourceZendeskTalkUpdateAuthenticationApiToken": {
                    "$ref": "#/types/airbyte:index/SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationApiToken:SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationApiToken"
                },
                "sourceZendeskTalkUpdateAuthenticationOAuth20": {
                    "$ref": "#/types/airbyte:index/SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationOAuth20:SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationOAuth20"
                }
            },
            "type": "object"
        },
        "airbyte:index/SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationApiToken:SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationApiToken": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "apiToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "email"
            ]
        },
        "airbyte:index/SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationOAuth20:SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "additionalProperties": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken"
            ]
        },
        "airbyte:index/SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationApiToken:SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationApiToken": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "apiToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "email"
            ]
        },
        "airbyte:index/SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationOAuth20:SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "additionalProperties": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken"
            ]
        },
        "airbyte:index/SourceZenloopConfiguration:SourceZenloopConfiguration": {
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "Zenloop API Token. You can get the API token in settings page \\n\\nhere\\n\\n\n"
                },
                "dateFrom": {
                    "type": "string",
                    "description": "Zenloop date_from. Format: 2021-10-24T03:30:30Z or 2021-10-24. Leave empty if only data from current data should be synced\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"zenloop\"]\n"
                },
                "surveyGroupId": {
                    "type": "string",
                    "description": "Zenloop Survey Group ID. Can be found by pulling All Survey Groups via SurveyGroups stream. Leave empty to pull answers from all survey groups\n"
                },
                "surveyId": {
                    "type": "string",
                    "description": "Zenloop Survey ID. Can be found \\n\\nhere\\n\\n. Leave empty to pull answers from all surveys\n"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "sourceType"
            ]
        },
        "airbyte:index/SourceZohoCrmConfiguration:SourceZohoCrmConfiguration": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "OAuth2.0 Client ID\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "OAuth2.0 Client Secret\n"
                },
                "dcRegion": {
                    "type": "string",
                    "description": "must be one of [\"US\", \"AU\", \"EU\", \"IN\", \"CN\", \"JP\"]\nPlease choose the region of your Data Center location. More info by this \\n\\nLink\\n\\n\n"
                },
                "edition": {
                    "type": "string",
                    "description": "must be one of [\"Free\", \"Standard\", \"Professional\", \"Enterprise\", \"Ultimate\"]\nChoose your Edition of Zoho CRM to determine API Concurrency Limits\n"
                },
                "environment": {
                    "type": "string",
                    "description": "must be one of [\"Production\", \"Developer\", \"Sandbox\"]\nPlease choose the environment\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "OAuth2.0 Refresh Token\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"zoho-crm\"]\n"
                },
                "startDatetime": {
                    "type": "string",
                    "description": "ISO 8601, for instance: `YYYY-MM-DD`, `YYYY-MM-DD HH:MM:SS+HH:MM`\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "dcRegion",
                "edition",
                "environment",
                "refreshToken",
                "sourceType"
            ]
        },
        "airbyte:index/SourceZoomConfiguration:SourceZoomConfiguration": {
            "properties": {
                "jwtToken": {
                    "type": "string",
                    "description": "JWT Token\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"zoom\"]\n"
                }
            },
            "type": "object",
            "required": [
                "jwtToken",
                "sourceType"
            ]
        },
        "airbyte:index/SourceZuoraConfiguration:SourceZuoraConfiguration": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "Your OAuth user Client ID\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Your OAuth user Client Secret\n"
                },
                "dataQuery": {
                    "type": "string",
                    "description": "must be one of [\"Live\", \"Unlimited\"]\nChoose between `Live`, or `Unlimited` - the optimized, replicated database at 12 hours freshness for high volume extraction \\n\\nLink\\n\\n\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"zuora\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Start Date in format: YYYY-MM-DD\n"
                },
                "tenantEndpoint": {
                    "type": "string",
                    "description": "must be one of [\"US Production\", \"US Cloud Production\", \"US API Sandbox\", \"US Cloud API Sandbox\", \"US Central Sandbox\", \"US Performance Test\", \"EU Production\", \"EU API Sandbox\", \"EU Central Sandbox\"]\nPlease choose the right endpoint where your Tenant is located. More info by this \\n\\nLink\\n\\n\n"
                },
                "windowInDays": {
                    "type": "string",
                    "description": "The amount of days for each data-chunk begining from start_date. Bigger the value - faster the fetch. (0.1 - as for couple of hours, 1 - as for a Day; 364 - as for a Year).\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "dataQuery",
                "sourceType",
                "startDate",
                "tenantEndpoint"
            ]
        },
        "airbyte:index/getConnectionConfigurations:getConnectionConfigurations": {
            "properties": {
                "streams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/airbyte:index/getConnectionConfigurationsStream:getConnectionConfigurationsStream"
                    }
                }
            },
            "type": "object",
            "required": [
                "streams"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getConnectionConfigurationsStream:getConnectionConfigurationsStream": {
            "properties": {
                "cursorFields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Optional name of the connection\n"
                },
                "primaryKeys": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "syncMode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "cursorFields",
                "name",
                "primaryKeys",
                "syncMode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getConnectionSchedule:getConnectionSchedule": {
            "properties": {
                "basicTiming": {
                    "type": "string"
                },
                "cronExpression": {
                    "type": "string"
                },
                "scheduleType": {
                    "type": "string",
                    "description": "must be one of [\"manual\", \"cron\"]\n"
                }
            },
            "type": "object",
            "required": [
                "basicTiming",
                "cronExpression",
                "scheduleType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationAWSDatalakeConfiguration:getDestinationAWSDatalakeConfiguration": {
            "properties": {
                "awsAccountId": {
                    "type": "string",
                    "description": "target aws account id\n"
                },
                "bucketName": {
                    "type": "string",
                    "description": "The name of the S3 bucket. Read more \\n\\nhere\\n\\n.\n"
                },
                "bucketPrefix": {
                    "type": "string",
                    "description": "S3 prefix\n"
                },
                "credentials": {
                    "$ref": "#/types/airbyte:index/getDestinationAWSDatalakeConfigurationCredentials:getDestinationAWSDatalakeConfigurationCredentials",
                    "description": "Choose How to Authenticate to AWS.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"aws-datalake\"]\n"
                },
                "format": {
                    "$ref": "#/types/airbyte:index/getDestinationAWSDatalakeConfigurationFormat:getDestinationAWSDatalakeConfigurationFormat",
                    "description": "Format of the data output.\n"
                },
                "glueCatalogFloatAsDecimal": {
                    "type": "boolean",
                    "description": "Cast float/double as decimal(38,18). This can help achieve higher accuracy and represent numbers correctly as received from the source.\n"
                },
                "lakeformationDatabaseDefaultTagKey": {
                    "type": "string",
                    "description": "Add a default tag key to databases created by this destination\n"
                },
                "lakeformationDatabaseDefaultTagValues": {
                    "type": "string",
                    "description": "Add default values for the `Tag Key` to databases created by this destination. Comma separate for multiple values.\n"
                },
                "lakeformationDatabaseName": {
                    "type": "string",
                    "description": "The default database this destination will use to create tables in per stream. Can be changed per connection by customizing the namespace.\n"
                },
                "lakeformationGovernedTables": {
                    "type": "boolean",
                    "description": "Whether to create tables as LF governed tables.\n"
                },
                "partitioning": {
                    "type": "string",
                    "description": "must be one of [\"NO PARTITIONING\", \"DATE\", \"YEAR\", \"MONTH\", \"DAY\", \"YEAR/MONTH\", \"YEAR/MONTH/DAY\"]\nPartition data by cursor fields when a cursor field is a date\n"
                },
                "region": {
                    "type": "string",
                    "description": "must be one of [\"\", \"us-east-1\", \"us-east-2\", \"us-west-1\", \"us-west-2\", \"af-south-1\", \"ap-east-1\", \"ap-south-1\", \"ap-northeast-1\", \"ap-northeast-2\", \"ap-northeast-3\", \"ap-southeast-1\", \"ap-southeast-2\", \"ca-central-1\", \"cn-north-1\", \"cn-northwest-1\", \"eu-central-1\", \"eu-north-1\", \"eu-south-1\", \"eu-west-1\", \"eu-west-2\", \"eu-west-3\", \"sa-east-1\", \"me-south-1\", \"us-gov-east-1\", \"us-gov-west-1\"]\nThe region of the S3 bucket. See \\n\\nhere\\n\\n for all region codes.\n"
                }
            },
            "type": "object",
            "required": [
                "awsAccountId",
                "bucketName",
                "bucketPrefix",
                "credentials",
                "destinationType",
                "format",
                "glueCatalogFloatAsDecimal",
                "lakeformationDatabaseDefaultTagKey",
                "lakeformationDatabaseDefaultTagValues",
                "lakeformationDatabaseName",
                "lakeformationGovernedTables",
                "partitioning",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationAWSDatalakeConfigurationCredentials:getDestinationAWSDatalakeConfigurationCredentials": {
            "properties": {
                "destinationAwsDatalakeAuthenticationModeIamRole": {
                    "$ref": "#/types/airbyte:index/getDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamRole:getDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamRole"
                },
                "destinationAwsDatalakeAuthenticationModeIamUser": {
                    "$ref": "#/types/airbyte:index/getDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamUser:getDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamUser"
                },
                "destinationAwsDatalakeUpdateAuthenticationModeIamRole": {
                    "$ref": "#/types/airbyte:index/getDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamRole:getDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamRole"
                },
                "destinationAwsDatalakeUpdateAuthenticationModeIamUser": {
                    "$ref": "#/types/airbyte:index/getDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamUser:getDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamUser"
                }
            },
            "type": "object",
            "required": [
                "destinationAwsDatalakeAuthenticationModeIamRole",
                "destinationAwsDatalakeAuthenticationModeIamUser",
                "destinationAwsDatalakeUpdateAuthenticationModeIamRole",
                "destinationAwsDatalakeUpdateAuthenticationModeIamUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamRole:getDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamRole": {
            "properties": {
                "credentialsTitle": {
                    "type": "string"
                },
                "roleArn": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentialsTitle",
                "roleArn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamUser:getDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamUser": {
            "properties": {
                "awsAccessKeyId": {
                    "type": "string"
                },
                "awsSecretAccessKey": {
                    "type": "string"
                },
                "credentialsTitle": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "awsAccessKeyId",
                "awsSecretAccessKey",
                "credentialsTitle"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamRole:getDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamRole": {
            "properties": {
                "credentialsTitle": {
                    "type": "string"
                },
                "roleArn": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentialsTitle",
                "roleArn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamUser:getDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamUser": {
            "properties": {
                "awsAccessKeyId": {
                    "type": "string"
                },
                "awsSecretAccessKey": {
                    "type": "string"
                },
                "credentialsTitle": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "awsAccessKeyId",
                "awsSecretAccessKey",
                "credentialsTitle"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationAWSDatalakeConfigurationFormat:getDestinationAWSDatalakeConfigurationFormat": {
            "properties": {
                "destinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJson": {
                    "$ref": "#/types/airbyte:index/getDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJson:getDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJson"
                },
                "destinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage": {
                    "$ref": "#/types/airbyte:index/getDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage:getDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage"
                },
                "destinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJson": {
                    "$ref": "#/types/airbyte:index/getDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJson:getDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJson"
                },
                "destinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage": {
                    "$ref": "#/types/airbyte:index/getDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage:getDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage"
                }
            },
            "type": "object",
            "required": [
                "destinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJson",
                "destinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage",
                "destinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJson",
                "destinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJson:getDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJson": {
            "properties": {
                "compressionCodec": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionCodec",
                "formatType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage:getDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage": {
            "properties": {
                "compressionCodec": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionCodec",
                "formatType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJson:getDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJson": {
            "properties": {
                "compressionCodec": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionCodec",
                "formatType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage:getDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage": {
            "properties": {
                "compressionCodec": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionCodec",
                "formatType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationAzureBlobStorageConfiguration:getDestinationAzureBlobStorageConfiguration": {
            "properties": {
                "azureBlobStorageAccountKey": {
                    "type": "string",
                    "description": "The Azure blob storage account key.\n"
                },
                "azureBlobStorageAccountName": {
                    "type": "string",
                    "description": "The account's name of the Azure Blob Storage.\n"
                },
                "azureBlobStorageContainerName": {
                    "type": "string",
                    "description": "The name of the Azure blob storage container. If not exists - will be created automatically. May be empty, then will be created automatically airbytecontainer+timestamp\n"
                },
                "azureBlobStorageEndpointDomainName": {
                    "type": "string",
                    "description": "This is Azure Blob Storage endpoint domain name. Leave default value (or leave it empty if run container from command line) to use Microsoft native from example.\n"
                },
                "azureBlobStorageOutputBufferSize": {
                    "type": "integer",
                    "description": "The amount of megabytes to buffer for the output stream to Azure. This will impact memory footprint on workers, but may need adjustment for performance and appropriate block size in Azure.\n"
                },
                "azureBlobStorageSpillSize": {
                    "type": "integer",
                    "description": "The amount of megabytes after which the connector should spill the records in a new blob object. Make sure to configure size greater than individual records. Enter 0 if not applicable\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"azure-blob-storage\"]\n"
                },
                "format": {
                    "$ref": "#/types/airbyte:index/getDestinationAzureBlobStorageConfigurationFormat:getDestinationAzureBlobStorageConfigurationFormat",
                    "description": "Output data format\n"
                }
            },
            "type": "object",
            "required": [
                "azureBlobStorageAccountKey",
                "azureBlobStorageAccountName",
                "azureBlobStorageContainerName",
                "azureBlobStorageEndpointDomainName",
                "azureBlobStorageOutputBufferSize",
                "azureBlobStorageSpillSize",
                "destinationType",
                "format"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationAzureBlobStorageConfigurationFormat:getDestinationAzureBlobStorageConfigurationFormat": {
            "properties": {
                "destinationAzureBlobStorageOutputFormatCsvCommaSeparatedValues": {
                    "$ref": "#/types/airbyte:index/getDestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatCsvCommaSeparatedValues:getDestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatCsvCommaSeparatedValues"
                },
                "destinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJson": {
                    "$ref": "#/types/airbyte:index/getDestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJson:getDestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJson"
                },
                "destinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValues": {
                    "$ref": "#/types/airbyte:index/getDestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValues:getDestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValues"
                },
                "destinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJson": {
                    "$ref": "#/types/airbyte:index/getDestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJson:getDestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJson"
                }
            },
            "type": "object",
            "required": [
                "destinationAzureBlobStorageOutputFormatCsvCommaSeparatedValues",
                "destinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJson",
                "destinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValues",
                "destinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJson"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatCsvCommaSeparatedValues:getDestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatCsvCommaSeparatedValues": {
            "properties": {
                "flattening": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "flattening",
                "formatType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJson:getDestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJson": {
            "properties": {
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "formatType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValues:getDestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValues": {
            "properties": {
                "flattening": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "flattening",
                "formatType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJson:getDestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJson": {
            "properties": {
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "formatType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationBigqueryConfiguration:getDestinationBigqueryConfiguration": {
            "properties": {
                "bigQueryClientBufferSizeMb": {
                    "type": "integer",
                    "description": "Google BigQuery client's chunk (buffer) size (MIN=1, MAX = 15) for each table. The size that will be written by a single RPC. Written data will be buffered and only flushed upon reaching this size or closing the channel. The default 15MB value is used if not set explicitly. Read more \\n\\nhere\\n\\n.\n"
                },
                "credentialsJson": {
                    "type": "string",
                    "description": "The contents of the JSON service account key. Check out the \\n\\ndocs\\n\\n if you need help generating this key. Default credentials will be used if this field is left empty.\n"
                },
                "datasetId": {
                    "type": "string",
                    "description": "The default BigQuery Dataset ID that tables are replicated to if the source does not specify a namespace. Read more \\n\\nhere\\n\\n.\n"
                },
                "datasetLocation": {
                    "type": "string",
                    "description": "must be one of [\"US\", \"EU\", \"asia-east1\", \"asia-east2\", \"asia-northeast1\", \"asia-northeast2\", \"asia-northeast3\", \"asia-south1\", \"asia-south2\", \"asia-southeast1\", \"asia-southeast2\", \"australia-southeast1\", \"australia-southeast2\", \"europe-central1\", \"europe-central2\", \"europe-north1\", \"europe-southwest1\", \"europe-west1\", \"europe-west2\", \"europe-west3\", \"europe-west4\", \"europe-west6\", \"europe-west7\", \"europe-west8\", \"europe-west9\", \"me-west1\", \"northamerica-northeast1\", \"northamerica-northeast2\", \"southamerica-east1\", \"southamerica-west1\", \"us-central1\", \"us-east1\", \"us-east2\", \"us-east3\", \"us-east4\", \"us-east5\", \"us-west1\", \"us-west2\", \"us-west3\", \"us-west4\"]\nThe location of the dataset. Warning: Changes made after creation will not be applied. Read more \\n\\nhere\\n\\n.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"bigquery\"]\n"
                },
                "loadingMethod": {
                    "$ref": "#/types/airbyte:index/getDestinationBigqueryConfigurationLoadingMethod:getDestinationBigqueryConfigurationLoadingMethod",
                    "description": "Loading method used to send select the way data will be uploaded to BigQuery. \\n\\n\\n\\nStandard Inserts\\n\\n - Direct uploading using SQL INSERT statements. This method is extremely inefficient and provided only for quick testing. In almost all cases, you should use staging. \\n\\n\\n\\nGCS Staging\\n\\n - Writes large batches of records to a file, uploads the file to GCS, then uses \\n\\nCOPY INTO table\\n\\n to upload the file. Recommended for most workloads for better speed and scalability. Read more about GCS Staging \\n\\nhere\\n\\n.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The GCP project ID for the project containing the target BigQuery dataset. Read more \\n\\nhere\\n\\n.\n"
                },
                "rawDataDataset": {
                    "type": "string",
                    "description": "(Early Access) The dataset to write raw tables into\n"
                },
                "transformationPriority": {
                    "type": "string",
                    "description": "must be one of [\"interactive\", \"batch\"]\nInteractive run type means that the query is executed as soon as possible, and these queries count towards concurrent rate limit and daily limit. Read more about interactive run type \\n\\nhere\\n\\n. Batch queries are queued and started as soon as idle resources are available in the BigQuery shared resource pool, which usually occurs within a few minutes. Batch queries don’t count towards your concurrent rate limit. Read more about batch queries \\n\\nhere\\n\\n. The default \"interactive\" value is used if not set explicitly.\n"
                },
                "use1s1tFormat": {
                    "type": "boolean",
                    "description": "(Early Access) Use \\n\\nDestinations V2\\n\\n.\n"
                }
            },
            "type": "object",
            "required": [
                "bigQueryClientBufferSizeMb",
                "credentialsJson",
                "datasetId",
                "datasetLocation",
                "destinationType",
                "loadingMethod",
                "projectId",
                "rawDataDataset",
                "transformationPriority",
                "use1s1tFormat"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationBigqueryConfigurationLoadingMethod:getDestinationBigqueryConfigurationLoadingMethod": {
            "properties": {
                "destinationBigqueryLoadingMethodGcsStaging": {
                    "$ref": "#/types/airbyte:index/getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStaging:getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStaging"
                },
                "destinationBigqueryLoadingMethodStandardInserts": {
                    "$ref": "#/types/airbyte:index/getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodStandardInserts:getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodStandardInserts"
                },
                "destinationBigqueryUpdateLoadingMethodGcsStaging": {
                    "$ref": "#/types/airbyte:index/getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStaging:getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStaging"
                },
                "destinationBigqueryUpdateLoadingMethodStandardInserts": {
                    "$ref": "#/types/airbyte:index/getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodStandardInserts:getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodStandardInserts"
                }
            },
            "type": "object",
            "required": [
                "destinationBigqueryLoadingMethodGcsStaging",
                "destinationBigqueryLoadingMethodStandardInserts",
                "destinationBigqueryUpdateLoadingMethodGcsStaging",
                "destinationBigqueryUpdateLoadingMethodStandardInserts"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStaging:getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStaging": {
            "properties": {
                "credential": {
                    "$ref": "#/types/airbyte:index/getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredential:getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredential"
                },
                "fileBufferCount": {
                    "type": "integer"
                },
                "gcsBucketName": {
                    "type": "string"
                },
                "gcsBucketPath": {
                    "type": "string"
                },
                "keepFilesInGcsBucket": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credential",
                "fileBufferCount",
                "gcsBucketName",
                "gcsBucketPath",
                "keepFilesInGcsBucket",
                "method"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredential:getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredential": {
            "properties": {
                "destinationBigqueryLoadingMethodGcsStagingCredentialHmacKey": {
                    "$ref": "#/types/airbyte:index/getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialDestinationBigqueryLoadingMethodGcsStagingCredentialHmacKey:getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialDestinationBigqueryLoadingMethodGcsStagingCredentialHmacKey"
                }
            },
            "type": "object",
            "required": [
                "destinationBigqueryLoadingMethodGcsStagingCredentialHmacKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialDestinationBigqueryLoadingMethodGcsStagingCredentialHmacKey:getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialDestinationBigqueryLoadingMethodGcsStagingCredentialHmacKey": {
            "properties": {
                "credentialType": {
                    "type": "string"
                },
                "hmacKeyAccessId": {
                    "type": "string"
                },
                "hmacKeySecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentialType",
                "hmacKeyAccessId",
                "hmacKeySecret"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodStandardInserts:getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodStandardInserts": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStaging:getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStaging": {
            "properties": {
                "credential": {
                    "$ref": "#/types/airbyte:index/getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredential:getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredential"
                },
                "fileBufferCount": {
                    "type": "integer"
                },
                "gcsBucketName": {
                    "type": "string"
                },
                "gcsBucketPath": {
                    "type": "string"
                },
                "keepFilesInGcsBucket": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credential",
                "fileBufferCount",
                "gcsBucketName",
                "gcsBucketPath",
                "keepFilesInGcsBucket",
                "method"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredential:getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredential": {
            "properties": {
                "destinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKey": {
                    "$ref": "#/types/airbyte:index/getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKey:getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKey"
                }
            },
            "type": "object",
            "required": [
                "destinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKey:getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKey": {
            "properties": {
                "credentialType": {
                    "type": "string"
                },
                "hmacKeyAccessId": {
                    "type": "string"
                },
                "hmacKeySecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentialType",
                "hmacKeyAccessId",
                "hmacKeySecret"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodStandardInserts:getDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodStandardInserts": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationBigqueryDenormalizedConfiguration:getDestinationBigqueryDenormalizedConfiguration": {
            "properties": {
                "bigQueryClientBufferSizeMb": {
                    "type": "integer",
                    "description": "Google BigQuery client's chunk (buffer) size (MIN=1, MAX = 15) for each table. The size that will be written by a single RPC. Written data will be buffered and only flushed upon reaching this size or closing the channel. The default 15MB value is used if not set explicitly. Read more \\n\\nhere\\n\\n.\n"
                },
                "credentialsJson": {
                    "type": "string",
                    "description": "The contents of the JSON service account key. Check out the \\n\\ndocs\\n\\n if you need help generating this key. Default credentials will be used if this field is left empty.\n"
                },
                "datasetId": {
                    "type": "string",
                    "description": "The default BigQuery Dataset ID that tables are replicated to if the source does not specify a namespace. Read more \\n\\nhere\\n\\n.\n"
                },
                "datasetLocation": {
                    "type": "string",
                    "description": "must be one of [\"US\", \"EU\", \"asia-east1\", \"asia-east2\", \"asia-northeast1\", \"asia-northeast2\", \"asia-northeast3\", \"asia-south1\", \"asia-south2\", \"asia-southeast1\", \"asia-southeast2\", \"australia-southeast1\", \"australia-southeast2\", \"europe-central1\", \"europe-central2\", \"europe-north1\", \"europe-southwest1\", \"europe-west1\", \"europe-west2\", \"europe-west3\", \"europe-west4\", \"europe-west6\", \"europe-west7\", \"europe-west8\", \"europe-west9\", \"me-west1\", \"northamerica-northeast1\", \"northamerica-northeast2\", \"southamerica-east1\", \"southamerica-west1\", \"us-central1\", \"us-east1\", \"us-east2\", \"us-east3\", \"us-east4\", \"us-east5\", \"us-west1\", \"us-west2\", \"us-west3\", \"us-west4\"]\nThe location of the dataset. Warning: Changes made after creation will not be applied. The default \"US\" value is used if not set explicitly. Read more \\n\\nhere\\n\\n.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"bigquery-denormalized\"]\n"
                },
                "loadingMethod": {
                    "$ref": "#/types/airbyte:index/getDestinationBigqueryDenormalizedConfigurationLoadingMethod:getDestinationBigqueryDenormalizedConfigurationLoadingMethod",
                    "description": "Loading method used to send select the way data will be uploaded to BigQuery. \\n\\n\\n\\nStandard Inserts\\n\\n - Direct uploading using SQL INSERT statements. This method is extremely inefficient and provided only for quick testing. In almost all cases, you should use staging. \\n\\n\\n\\nGCS Staging\\n\\n - Writes large batches of records to a file, uploads the file to GCS, then uses \\n\\nCOPY INTO table\\n\\n to upload the file. Recommended for most workloads for better speed and scalability. Read more about GCS Staging \\n\\nhere\\n\\n.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The GCP project ID for the project containing the target BigQuery dataset. Read more \\n\\nhere\\n\\n.\n"
                }
            },
            "type": "object",
            "required": [
                "bigQueryClientBufferSizeMb",
                "credentialsJson",
                "datasetId",
                "datasetLocation",
                "destinationType",
                "loadingMethod",
                "projectId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationBigqueryDenormalizedConfigurationLoadingMethod:getDestinationBigqueryDenormalizedConfigurationLoadingMethod": {
            "properties": {
                "destinationBigqueryDenormalizedLoadingMethodGcsStaging": {
                    "$ref": "#/types/airbyte:index/getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStaging:getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStaging"
                },
                "destinationBigqueryDenormalizedLoadingMethodStandardInserts": {
                    "$ref": "#/types/airbyte:index/getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodStandardInserts:getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodStandardInserts"
                },
                "destinationBigqueryDenormalizedUpdateLoadingMethodGcsStaging": {
                    "$ref": "#/types/airbyte:index/getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStaging:getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStaging"
                },
                "destinationBigqueryDenormalizedUpdateLoadingMethodStandardInserts": {
                    "$ref": "#/types/airbyte:index/getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodStandardInserts:getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodStandardInserts"
                }
            },
            "type": "object",
            "required": [
                "destinationBigqueryDenormalizedLoadingMethodGcsStaging",
                "destinationBigqueryDenormalizedLoadingMethodStandardInserts",
                "destinationBigqueryDenormalizedUpdateLoadingMethodGcsStaging",
                "destinationBigqueryDenormalizedUpdateLoadingMethodStandardInserts"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStaging:getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStaging": {
            "properties": {
                "credential": {
                    "$ref": "#/types/airbyte:index/getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredential:getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredential"
                },
                "fileBufferCount": {
                    "type": "integer"
                },
                "gcsBucketName": {
                    "type": "string"
                },
                "gcsBucketPath": {
                    "type": "string"
                },
                "keepFilesInGcsBucket": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credential",
                "fileBufferCount",
                "gcsBucketName",
                "gcsBucketPath",
                "keepFilesInGcsBucket",
                "method"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredential:getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredential": {
            "properties": {
                "destinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKey": {
                    "$ref": "#/types/airbyte:index/getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKey:getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKey"
                }
            },
            "type": "object",
            "required": [
                "destinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKey:getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKey": {
            "properties": {
                "credentialType": {
                    "type": "string"
                },
                "hmacKeyAccessId": {
                    "type": "string"
                },
                "hmacKeySecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentialType",
                "hmacKeyAccessId",
                "hmacKeySecret"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodStandardInserts:getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodStandardInserts": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStaging:getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStaging": {
            "properties": {
                "credential": {
                    "$ref": "#/types/airbyte:index/getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredential:getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredential"
                },
                "fileBufferCount": {
                    "type": "integer"
                },
                "gcsBucketName": {
                    "type": "string"
                },
                "gcsBucketPath": {
                    "type": "string"
                },
                "keepFilesInGcsBucket": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credential",
                "fileBufferCount",
                "gcsBucketName",
                "gcsBucketPath",
                "keepFilesInGcsBucket",
                "method"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredential:getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredential": {
            "properties": {
                "destinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKey": {
                    "$ref": "#/types/airbyte:index/getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKey:getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKey"
                }
            },
            "type": "object",
            "required": [
                "destinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKey:getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKey": {
            "properties": {
                "credentialType": {
                    "type": "string"
                },
                "hmacKeyAccessId": {
                    "type": "string"
                },
                "hmacKeySecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentialType",
                "hmacKeyAccessId",
                "hmacKeySecret"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodStandardInserts:getDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodStandardInserts": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationClickhouseConfiguration:getDestinationClickhouseConfiguration": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"clickhouse\"]\n"
                },
                "host": {
                    "type": "string",
                    "description": "Hostname of the database.\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '\u0026'. (example: key1=value1\u0026key2=value2\u0026key3=value3).\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password associated with the username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "HTTP port of the database.\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/getDestinationClickhouseConfigurationTunnelMethod:getDestinationClickhouseConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "destinationType",
                "host",
                "jdbcUrlParams",
                "password",
                "port",
                "tunnelMethod",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationClickhouseConfigurationTunnelMethod:getDestinationClickhouseConfigurationTunnelMethod": {
            "properties": {
                "destinationClickhouseSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodNoTunnel:getDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodNoTunnel"
                },
                "destinationClickhouseSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodPasswordAuthentication:getDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodPasswordAuthentication"
                },
                "destinationClickhouseSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodSshKeyAuthentication:getDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodSshKeyAuthentication"
                },
                "destinationClickhouseUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodNoTunnel:getDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodNoTunnel"
                },
                "destinationClickhouseUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodPasswordAuthentication:getDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodPasswordAuthentication"
                },
                "destinationClickhouseUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodSshKeyAuthentication:getDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object",
            "required": [
                "destinationClickhouseSshTunnelMethodNoTunnel",
                "destinationClickhouseSshTunnelMethodPasswordAuthentication",
                "destinationClickhouseSshTunnelMethodSshKeyAuthentication",
                "destinationClickhouseUpdateSshTunnelMethodNoTunnel",
                "destinationClickhouseUpdateSshTunnelMethodPasswordAuthentication",
                "destinationClickhouseUpdateSshTunnelMethodSshKeyAuthentication"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodNoTunnel:getDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodPasswordAuthentication:getDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodSshKeyAuthentication:getDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodNoTunnel:getDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodPasswordAuthentication:getDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodSshKeyAuthentication:getDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationConvexConfiguration:getDestinationConvexConfiguration": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "API access key used to send data to a Convex deployment.\n"
                },
                "deploymentUrl": {
                    "type": "string",
                    "description": "URL of the Convex deployment that is the destination\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"convex\"]\n"
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "deploymentUrl",
                "destinationType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationCumulioConfiguration:getDestinationCumulioConfiguration": {
            "properties": {
                "apiHost": {
                    "type": "string",
                    "description": "URL of the Cumul.io API (e.g. 'https://api.cumul.io', 'https://api.us.cumul.io', or VPC-specific API url). Defaults to 'https://api.cumul.io'.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "An API key generated in Cumul.io's platform (can be generated here: https://app.cumul.io/start/profile/integration).\n"
                },
                "apiToken": {
                    "type": "string",
                    "description": "The corresponding API token generated in Cumul.io's platform (can be generated here: https://app.cumul.io/start/profile/integration).\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"cumulio\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiHost",
                "apiKey",
                "apiToken",
                "destinationType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationDatabendConfiguration:getDestinationDatabendConfiguration": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"databend\"]\n"
                },
                "host": {
                    "type": "string",
                    "description": "Hostname of the database.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password associated with the username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the database.\n"
                },
                "table": {
                    "type": "string",
                    "description": "The default  table was written to.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "destinationType",
                "host",
                "password",
                "port",
                "table",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationDatabricksConfiguration:getDestinationDatabricksConfiguration": {
            "properties": {
                "acceptTerms": {
                    "type": "boolean",
                    "description": "You must agree to the Databricks JDBC Driver \\n\\nTerms \u0026 Conditions\\n\\n to use this connector.\n"
                },
                "dataSource": {
                    "$ref": "#/types/airbyte:index/getDestinationDatabricksConfigurationDataSource:getDestinationDatabricksConfigurationDataSource",
                    "description": "Storage on which the delta lake is built.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The name of the catalog. If not specified otherwise, the \"hive_metastore\" will be used.\n"
                },
                "databricksHttpPath": {
                    "type": "string",
                    "description": "Databricks Cluster HTTP Path.\n"
                },
                "databricksPersonalAccessToken": {
                    "type": "string",
                    "description": "Databricks Personal Access Token for making authenticated requests.\n"
                },
                "databricksPort": {
                    "type": "string",
                    "description": "Databricks Cluster Port.\n"
                },
                "databricksServerHostname": {
                    "type": "string",
                    "description": "Databricks Cluster Server Hostname.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"databricks\"]\n"
                },
                "enableSchemaEvolution": {
                    "type": "boolean",
                    "description": "Support schema evolution for all streams. If \"false\", the connector might fail when a stream's schema changes.\n"
                },
                "purgeStagingData": {
                    "type": "boolean",
                    "description": "Default to 'true'. Switch it to 'false' for debugging purpose.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The default schema tables are written. If not specified otherwise, the \"default\" will be used.\n"
                }
            },
            "type": "object",
            "required": [
                "acceptTerms",
                "dataSource",
                "database",
                "databricksHttpPath",
                "databricksPersonalAccessToken",
                "databricksPort",
                "databricksServerHostname",
                "destinationType",
                "enableSchemaEvolution",
                "purgeStagingData",
                "schema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationDatabricksConfigurationDataSource:getDestinationDatabricksConfigurationDataSource": {
            "properties": {
                "destinationDatabricksDataSourceAmazonS3": {
                    "$ref": "#/types/airbyte:index/getDestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAmazonS3:getDestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAmazonS3"
                },
                "destinationDatabricksDataSourceAzureBlobStorage": {
                    "$ref": "#/types/airbyte:index/getDestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAzureBlobStorage:getDestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAzureBlobStorage"
                },
                "destinationDatabricksDataSourceRecommendedManagedTables": {
                    "$ref": "#/types/airbyte:index/getDestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceRecommendedManagedTables:getDestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceRecommendedManagedTables"
                },
                "destinationDatabricksUpdateDataSourceAmazonS3": {
                    "$ref": "#/types/airbyte:index/getDestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAmazonS3:getDestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAmazonS3"
                },
                "destinationDatabricksUpdateDataSourceAzureBlobStorage": {
                    "$ref": "#/types/airbyte:index/getDestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAzureBlobStorage:getDestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAzureBlobStorage"
                },
                "destinationDatabricksUpdateDataSourceRecommendedManagedTables": {
                    "$ref": "#/types/airbyte:index/getDestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceRecommendedManagedTables:getDestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceRecommendedManagedTables"
                }
            },
            "type": "object",
            "required": [
                "destinationDatabricksDataSourceAmazonS3",
                "destinationDatabricksDataSourceAzureBlobStorage",
                "destinationDatabricksDataSourceRecommendedManagedTables",
                "destinationDatabricksUpdateDataSourceAmazonS3",
                "destinationDatabricksUpdateDataSourceAzureBlobStorage",
                "destinationDatabricksUpdateDataSourceRecommendedManagedTables"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAmazonS3:getDestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAmazonS3": {
            "properties": {
                "dataSourceType": {
                    "type": "string"
                },
                "fileNamePattern": {
                    "type": "string"
                },
                "s3AccessKeyId": {
                    "type": "string"
                },
                "s3BucketName": {
                    "type": "string"
                },
                "s3BucketPath": {
                    "type": "string"
                },
                "s3BucketRegion": {
                    "type": "string"
                },
                "s3SecretAccessKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dataSourceType",
                "fileNamePattern",
                "s3AccessKeyId",
                "s3BucketName",
                "s3BucketPath",
                "s3BucketRegion",
                "s3SecretAccessKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAzureBlobStorage:getDestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAzureBlobStorage": {
            "properties": {
                "azureBlobStorageAccountName": {
                    "type": "string"
                },
                "azureBlobStorageContainerName": {
                    "type": "string"
                },
                "azureBlobStorageEndpointDomainName": {
                    "type": "string"
                },
                "azureBlobStorageSasToken": {
                    "type": "string"
                },
                "dataSourceType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "azureBlobStorageAccountName",
                "azureBlobStorageContainerName",
                "azureBlobStorageEndpointDomainName",
                "azureBlobStorageSasToken",
                "dataSourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceRecommendedManagedTables:getDestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceRecommendedManagedTables": {
            "properties": {
                "dataSourceType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dataSourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAmazonS3:getDestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAmazonS3": {
            "properties": {
                "dataSourceType": {
                    "type": "string"
                },
                "fileNamePattern": {
                    "type": "string"
                },
                "s3AccessKeyId": {
                    "type": "string"
                },
                "s3BucketName": {
                    "type": "string"
                },
                "s3BucketPath": {
                    "type": "string"
                },
                "s3BucketRegion": {
                    "type": "string"
                },
                "s3SecretAccessKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dataSourceType",
                "fileNamePattern",
                "s3AccessKeyId",
                "s3BucketName",
                "s3BucketPath",
                "s3BucketRegion",
                "s3SecretAccessKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAzureBlobStorage:getDestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAzureBlobStorage": {
            "properties": {
                "azureBlobStorageAccountName": {
                    "type": "string"
                },
                "azureBlobStorageContainerName": {
                    "type": "string"
                },
                "azureBlobStorageEndpointDomainName": {
                    "type": "string"
                },
                "azureBlobStorageSasToken": {
                    "type": "string"
                },
                "dataSourceType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "azureBlobStorageAccountName",
                "azureBlobStorageContainerName",
                "azureBlobStorageEndpointDomainName",
                "azureBlobStorageSasToken",
                "dataSourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceRecommendedManagedTables:getDestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceRecommendedManagedTables": {
            "properties": {
                "dataSourceType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dataSourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationDevNullConfiguration:getDestinationDevNullConfiguration": {
            "properties": {
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"dev-null\"]\n"
                },
                "testDestination": {
                    "$ref": "#/types/airbyte:index/getDestinationDevNullConfigurationTestDestination:getDestinationDevNullConfigurationTestDestination",
                    "description": "The type of destination to be used\n"
                }
            },
            "type": "object",
            "required": [
                "destinationType",
                "testDestination"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationDevNullConfigurationTestDestination:getDestinationDevNullConfigurationTestDestination": {
            "properties": {
                "destinationDevNullTestDestinationSilent": {
                    "$ref": "#/types/airbyte:index/getDestinationDevNullConfigurationTestDestinationDestinationDevNullTestDestinationSilent:getDestinationDevNullConfigurationTestDestinationDestinationDevNullTestDestinationSilent"
                },
                "destinationDevNullUpdateTestDestinationSilent": {
                    "$ref": "#/types/airbyte:index/getDestinationDevNullConfigurationTestDestinationDestinationDevNullUpdateTestDestinationSilent:getDestinationDevNullConfigurationTestDestinationDestinationDevNullUpdateTestDestinationSilent"
                }
            },
            "type": "object",
            "required": [
                "destinationDevNullTestDestinationSilent",
                "destinationDevNullUpdateTestDestinationSilent"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationDevNullConfigurationTestDestinationDestinationDevNullTestDestinationSilent:getDestinationDevNullConfigurationTestDestinationDestinationDevNullTestDestinationSilent": {
            "properties": {
                "testDestinationType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "testDestinationType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationDevNullConfigurationTestDestinationDestinationDevNullUpdateTestDestinationSilent:getDestinationDevNullConfigurationTestDestinationDestinationDevNullUpdateTestDestinationSilent": {
            "properties": {
                "testDestinationType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "testDestinationType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationDynamodbConfiguration:getDestinationDynamodbConfiguration": {
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The access key id to access the DynamoDB. Airbyte requires Read and Write permissions to the DynamoDB.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"dynamodb\"]\n"
                },
                "dynamodbEndpoint": {
                    "type": "string",
                    "description": "This is your DynamoDB endpoint url.(if you are working with AWS DynamoDB, just leave empty).\n"
                },
                "dynamodbRegion": {
                    "type": "string",
                    "description": "must be one of [\"\", \"us-east-1\", \"us-east-2\", \"us-west-1\", \"us-west-2\", \"af-south-1\", \"ap-east-1\", \"ap-south-1\", \"ap-northeast-1\", \"ap-northeast-2\", \"ap-northeast-3\", \"ap-southeast-1\", \"ap-southeast-2\", \"ca-central-1\", \"cn-north-1\", \"cn-northwest-1\", \"eu-central-1\", \"eu-north-1\", \"eu-south-1\", \"eu-west-1\", \"eu-west-2\", \"eu-west-3\", \"sa-east-1\", \"me-south-1\", \"us-gov-east-1\", \"us-gov-west-1\"]\nThe region of the DynamoDB.\n"
                },
                "dynamodbTableNamePrefix": {
                    "type": "string",
                    "description": "The prefix to use when naming DynamoDB tables.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The corresponding secret to the access key id.\n"
                }
            },
            "type": "object",
            "required": [
                "accessKeyId",
                "destinationType",
                "dynamodbEndpoint",
                "dynamodbRegion",
                "dynamodbTableNamePrefix",
                "secretAccessKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationElasticsearchConfiguration:getDestinationElasticsearchConfiguration": {
            "properties": {
                "authenticationMethod": {
                    "$ref": "#/types/airbyte:index/getDestinationElasticsearchConfigurationAuthenticationMethod:getDestinationElasticsearchConfigurationAuthenticationMethod",
                    "description": "The type of authentication to be used\n"
                },
                "caCertificate": {
                    "type": "string",
                    "description": "CA certificate\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"elasticsearch\"]\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The full url of the Elasticsearch server\n"
                },
                "upsert": {
                    "type": "boolean",
                    "description": "If a primary key identifier is defined in the source, an upsert will be performed using the primary key value as the elasticsearch doc id. Does not support composite primary keys.\n"
                }
            },
            "type": "object",
            "required": [
                "authenticationMethod",
                "caCertificate",
                "destinationType",
                "endpoint",
                "upsert"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationElasticsearchConfigurationAuthenticationMethod:getDestinationElasticsearchConfigurationAuthenticationMethod": {
            "properties": {
                "destinationElasticsearchAuthenticationMethodApiKeySecret": {
                    "$ref": "#/types/airbyte:index/getDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodApiKeySecret:getDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodApiKeySecret"
                },
                "destinationElasticsearchAuthenticationMethodUsernamePassword": {
                    "$ref": "#/types/airbyte:index/getDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodUsernamePassword:getDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodUsernamePassword"
                },
                "destinationElasticsearchUpdateAuthenticationMethodApiKeySecret": {
                    "$ref": "#/types/airbyte:index/getDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodApiKeySecret:getDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodApiKeySecret"
                },
                "destinationElasticsearchUpdateAuthenticationMethodUsernamePassword": {
                    "$ref": "#/types/airbyte:index/getDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodUsernamePassword:getDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodUsernamePassword"
                }
            },
            "type": "object",
            "required": [
                "destinationElasticsearchAuthenticationMethodApiKeySecret",
                "destinationElasticsearchAuthenticationMethodUsernamePassword",
                "destinationElasticsearchUpdateAuthenticationMethodApiKeySecret",
                "destinationElasticsearchUpdateAuthenticationMethodUsernamePassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodApiKeySecret:getDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodApiKeySecret": {
            "properties": {
                "apiKeyId": {
                    "type": "string"
                },
                "apiKeySecret": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiKeyId",
                "apiKeySecret",
                "method"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodUsernamePassword:getDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodUsernamePassword": {
            "properties": {
                "method": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method",
                "password",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodApiKeySecret:getDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodApiKeySecret": {
            "properties": {
                "apiKeyId": {
                    "type": "string"
                },
                "apiKeySecret": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiKeyId",
                "apiKeySecret",
                "method"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodUsernamePassword:getDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodUsernamePassword": {
            "properties": {
                "method": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method",
                "password",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationFireboltConfiguration:getDestinationFireboltConfiguration": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "Firebolt account to login.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database to connect to.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"firebolt\"]\n"
                },
                "engine": {
                    "type": "string",
                    "description": "Engine name or url to connect to.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The host name of your Firebolt database.\n"
                },
                "loadingMethod": {
                    "$ref": "#/types/airbyte:index/getDestinationFireboltConfigurationLoadingMethod:getDestinationFireboltConfigurationLoadingMethod",
                    "description": "Loading method used to select the way data will be uploaded to Firebolt\n"
                },
                "password": {
                    "type": "string",
                    "description": "Firebolt password.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Firebolt email address you use to login.\n"
                }
            },
            "type": "object",
            "required": [
                "account",
                "database",
                "destinationType",
                "engine",
                "host",
                "loadingMethod",
                "password",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationFireboltConfigurationLoadingMethod:getDestinationFireboltConfigurationLoadingMethod": {
            "properties": {
                "destinationFireboltLoadingMethodExternalTableViaS3": {
                    "$ref": "#/types/airbyte:index/getDestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodExternalTableViaS3:getDestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodExternalTableViaS3"
                },
                "destinationFireboltLoadingMethodSqlInserts": {
                    "$ref": "#/types/airbyte:index/getDestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodSqlInserts:getDestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodSqlInserts"
                },
                "destinationFireboltUpdateLoadingMethodExternalTableViaS3": {
                    "$ref": "#/types/airbyte:index/getDestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodExternalTableViaS3:getDestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodExternalTableViaS3"
                },
                "destinationFireboltUpdateLoadingMethodSqlInserts": {
                    "$ref": "#/types/airbyte:index/getDestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodSqlInserts:getDestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodSqlInserts"
                }
            },
            "type": "object",
            "required": [
                "destinationFireboltLoadingMethodExternalTableViaS3",
                "destinationFireboltLoadingMethodSqlInserts",
                "destinationFireboltUpdateLoadingMethodExternalTableViaS3",
                "destinationFireboltUpdateLoadingMethodSqlInserts"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodExternalTableViaS3:getDestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodExternalTableViaS3": {
            "properties": {
                "awsKeyId": {
                    "type": "string"
                },
                "awsKeySecret": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "s3Bucket": {
                    "type": "string"
                },
                "s3Region": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "awsKeyId",
                "awsKeySecret",
                "method",
                "s3Bucket",
                "s3Region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodSqlInserts:getDestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodSqlInserts": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodExternalTableViaS3:getDestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodExternalTableViaS3": {
            "properties": {
                "awsKeyId": {
                    "type": "string"
                },
                "awsKeySecret": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "s3Bucket": {
                    "type": "string"
                },
                "s3Region": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "awsKeyId",
                "awsKeySecret",
                "method",
                "s3Bucket",
                "s3Region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodSqlInserts:getDestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodSqlInserts": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationFirestoreConfiguration:getDestinationFirestoreConfiguration": {
            "properties": {
                "credentialsJson": {
                    "type": "string",
                    "description": "The contents of the JSON service account key. Check out the \\n\\ndocs\\n\\n if you need help generating this key. Default credentials will be used if this field is left empty.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"firestore\"]\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The GCP project ID for the project containing the target BigQuery dataset.\n"
                }
            },
            "type": "object",
            "required": [
                "credentialsJson",
                "destinationType",
                "projectId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfiguration:getDestinationGcsConfiguration": {
            "properties": {
                "credential": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationCredential:getDestinationGcsConfigurationCredential",
                    "description": "An HMAC key is a type of credential and can be associated with a service account or a user account in Cloud Storage. Read more \\n\\nhere\\n\\n.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"gcs\"]\n"
                },
                "format": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormat:getDestinationGcsConfigurationFormat",
                    "description": "Output data format. One of the following formats must be selected - \\n\\nAVRO\\n\\n format, \\n\\nPARQUET\\n\\n format, \\n\\nCSV\\n\\n format, or \\n\\nJSONL\\n\\n format.\n"
                },
                "gcsBucketName": {
                    "type": "string",
                    "description": "You can find the bucket name in the App Engine Admin console Application Settings page, under the label Google Cloud Storage Bucket. Read more \\n\\nhere\\n\\n.\n"
                },
                "gcsBucketPath": {
                    "type": "string",
                    "description": "GCS Bucket Path string Subdirectory under the above bucket to sync the data into.\n"
                },
                "gcsBucketRegion": {
                    "type": "string",
                    "description": "must be one of [\"northamerica-northeast1\", \"northamerica-northeast2\", \"us-central1\", \"us-east1\", \"us-east4\", \"us-west1\", \"us-west2\", \"us-west3\", \"us-west4\", \"southamerica-east1\", \"southamerica-west1\", \"europe-central2\", \"europe-north1\", \"europe-west1\", \"europe-west2\", \"europe-west3\", \"europe-west4\", \"europe-west6\", \"asia-east1\", \"asia-east2\", \"asia-northeast1\", \"asia-northeast2\", \"asia-northeast3\", \"asia-south1\", \"asia-south2\", \"asia-southeast1\", \"asia-southeast2\", \"australia-southeast1\", \"australia-southeast2\", \"asia\", \"eu\", \"us\", \"asia1\", \"eur4\", \"nam4\"]\nSelect a Region of the GCS Bucket. Read more \\n\\nhere\\n\\n.\n"
                }
            },
            "type": "object",
            "required": [
                "credential",
                "destinationType",
                "format",
                "gcsBucketName",
                "gcsBucketPath",
                "gcsBucketRegion"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationCredential:getDestinationGcsConfigurationCredential": {
            "properties": {
                "destinationGcsAuthenticationHmacKey": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationCredentialDestinationGcsAuthenticationHmacKey:getDestinationGcsConfigurationCredentialDestinationGcsAuthenticationHmacKey"
                },
                "destinationGcsUpdateAuthenticationHmacKey": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationCredentialDestinationGcsUpdateAuthenticationHmacKey:getDestinationGcsConfigurationCredentialDestinationGcsUpdateAuthenticationHmacKey"
                }
            },
            "type": "object",
            "required": [
                "destinationGcsAuthenticationHmacKey",
                "destinationGcsUpdateAuthenticationHmacKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationCredentialDestinationGcsAuthenticationHmacKey:getDestinationGcsConfigurationCredentialDestinationGcsAuthenticationHmacKey": {
            "properties": {
                "credentialType": {
                    "type": "string"
                },
                "hmacKeyAccessId": {
                    "type": "string"
                },
                "hmacKeySecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentialType",
                "hmacKeyAccessId",
                "hmacKeySecret"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationCredentialDestinationGcsUpdateAuthenticationHmacKey:getDestinationGcsConfigurationCredentialDestinationGcsUpdateAuthenticationHmacKey": {
            "properties": {
                "credentialType": {
                    "type": "string"
                },
                "hmacKeyAccessId": {
                    "type": "string"
                },
                "hmacKeySecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentialType",
                "hmacKeyAccessId",
                "hmacKeySecret"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormat:getDestinationGcsConfigurationFormat": {
            "properties": {
                "destinationGcsOutputFormatAvroApacheAvro": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvro:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvro"
                },
                "destinationGcsOutputFormatCsvCommaSeparatedValues": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValues:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValues"
                },
                "destinationGcsOutputFormatJsonLinesNewlineDelimitedJson": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJson:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJson"
                },
                "destinationGcsOutputFormatParquetColumnarStorage": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatParquetColumnarStorage:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatParquetColumnarStorage"
                },
                "destinationGcsUpdateOutputFormatAvroApacheAvro": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvro:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvro"
                },
                "destinationGcsUpdateOutputFormatCsvCommaSeparatedValues": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValues:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValues"
                },
                "destinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJson": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJson:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJson"
                },
                "destinationGcsUpdateOutputFormatParquetColumnarStorage": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatParquetColumnarStorage:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatParquetColumnarStorage"
                }
            },
            "type": "object",
            "required": [
                "destinationGcsOutputFormatAvroApacheAvro",
                "destinationGcsOutputFormatCsvCommaSeparatedValues",
                "destinationGcsOutputFormatJsonLinesNewlineDelimitedJson",
                "destinationGcsOutputFormatParquetColumnarStorage",
                "destinationGcsUpdateOutputFormatAvroApacheAvro",
                "destinationGcsUpdateOutputFormatCsvCommaSeparatedValues",
                "destinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJson",
                "destinationGcsUpdateOutputFormatParquetColumnarStorage"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvro:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvro": {
            "properties": {
                "compressionCodec": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodec:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodec"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionCodec",
                "formatType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodec:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodec": {
            "properties": {
                "destinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2"
                },
                "destinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate"
                },
                "destinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression"
                },
                "destinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy"
                },
                "destinationGcsOutputFormatAvroApacheAvroCompressionCodecXz": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz"
                },
                "destinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard"
                }
            },
            "type": "object",
            "required": [
                "destinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2",
                "destinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate",
                "destinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression",
                "destinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy",
                "destinationGcsOutputFormatAvroApacheAvroCompressionCodecXz",
                "destinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2": {
            "properties": {
                "codec": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate": {
            "properties": {
                "codec": {
                    "type": "string"
                },
                "compressionLevel": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "codec",
                "compressionLevel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression": {
            "properties": {
                "codec": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy": {
            "properties": {
                "codec": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz": {
            "properties": {
                "codec": {
                    "type": "string"
                },
                "compressionLevel": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "codec",
                "compressionLevel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard": {
            "properties": {
                "codec": {
                    "type": "string"
                },
                "compressionLevel": {
                    "type": "integer"
                },
                "includeChecksum": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "codec",
                "compressionLevel",
                "includeChecksum"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValues:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValues": {
            "properties": {
                "compression": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompression:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompression"
                },
                "flattening": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compression",
                "flattening",
                "formatType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompression:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompression": {
            "properties": {
                "destinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzip": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzip:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzip"
                },
                "destinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompression": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompression:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompression"
                }
            },
            "type": "object",
            "required": [
                "destinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzip",
                "destinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompression"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzip:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzip": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompression:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompression": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJson:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJson": {
            "properties": {
                "compression": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompression:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompression"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compression",
                "formatType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompression:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompression": {
            "properties": {
                "destinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip"
                },
                "destinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression"
                }
            },
            "type": "object",
            "required": [
                "destinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip",
                "destinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsOutputFormatParquetColumnarStorage:getDestinationGcsConfigurationFormatDestinationGcsOutputFormatParquetColumnarStorage": {
            "properties": {
                "blockSizeMb": {
                    "type": "integer"
                },
                "compressionCodec": {
                    "type": "string"
                },
                "dictionaryEncoding": {
                    "type": "boolean"
                },
                "dictionaryPageSizeKb": {
                    "type": "integer"
                },
                "formatType": {
                    "type": "string"
                },
                "maxPaddingSizeMb": {
                    "type": "integer"
                },
                "pageSizeKb": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "blockSizeMb",
                "compressionCodec",
                "dictionaryEncoding",
                "dictionaryPageSizeKb",
                "formatType",
                "maxPaddingSizeMb",
                "pageSizeKb"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvro:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvro": {
            "properties": {
                "compressionCodec": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodec:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodec"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionCodec",
                "formatType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodec:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodec": {
            "properties": {
                "destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecBzip2": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecBzip2:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecBzip2"
                },
                "destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflate": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflate:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflate"
                },
                "destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression"
                },
                "destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecSnappy": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecSnappy:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecSnappy"
                },
                "destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXz": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXz:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXz"
                },
                "destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandard": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandard:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandard"
                }
            },
            "type": "object",
            "required": [
                "destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecBzip2",
                "destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflate",
                "destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression",
                "destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecSnappy",
                "destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXz",
                "destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandard"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecBzip2:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecBzip2": {
            "properties": {
                "codec": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflate:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflate": {
            "properties": {
                "codec": {
                    "type": "string"
                },
                "compressionLevel": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "codec",
                "compressionLevel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression": {
            "properties": {
                "codec": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecSnappy:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecSnappy": {
            "properties": {
                "codec": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXz:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXz": {
            "properties": {
                "codec": {
                    "type": "string"
                },
                "compressionLevel": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "codec",
                "compressionLevel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandard:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandard": {
            "properties": {
                "codec": {
                    "type": "string"
                },
                "compressionLevel": {
                    "type": "integer"
                },
                "includeChecksum": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "codec",
                "compressionLevel",
                "includeChecksum"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValues:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValues": {
            "properties": {
                "compression": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompression:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompression"
                },
                "flattening": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compression",
                "flattening",
                "formatType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompression:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompression": {
            "properties": {
                "destinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip"
                },
                "destinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression"
                }
            },
            "type": "object",
            "required": [
                "destinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip",
                "destinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJson:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJson": {
            "properties": {
                "compression": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compression",
                "formatType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression": {
            "properties": {
                "destinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip"
                },
                "destinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression": {
                    "$ref": "#/types/airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression"
                }
            },
            "type": "object",
            "required": [
                "destinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip",
                "destinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatParquetColumnarStorage:getDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatParquetColumnarStorage": {
            "properties": {
                "blockSizeMb": {
                    "type": "integer"
                },
                "compressionCodec": {
                    "type": "string"
                },
                "dictionaryEncoding": {
                    "type": "boolean"
                },
                "dictionaryPageSizeKb": {
                    "type": "integer"
                },
                "formatType": {
                    "type": "string"
                },
                "maxPaddingSizeMb": {
                    "type": "integer"
                },
                "pageSizeKb": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "blockSizeMb",
                "compressionCodec",
                "dictionaryEncoding",
                "dictionaryPageSizeKb",
                "formatType",
                "maxPaddingSizeMb",
                "pageSizeKb"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGoogleSheetsConfiguration:getDestinationGoogleSheetsConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getDestinationGoogleSheetsConfigurationCredentials:getDestinationGoogleSheetsConfigurationCredentials",
                    "description": "Google API Credentials for connecting to Google Sheets and Google Drive APIs\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"google-sheets\"]\n"
                },
                "spreadsheetId": {
                    "type": "string",
                    "description": "The link to your spreadsheet. See \\n\\nthis guide\\n\\n for more details.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "destinationType",
                "spreadsheetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationGoogleSheetsConfigurationCredentials:getDestinationGoogleSheetsConfigurationCredentials": {
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationKeenConfiguration:getDestinationKeenConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "To get Keen Master API Key, navigate to the Access tab from the left-hand, side panel and check the Project Details section.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"keen\"]\n"
                },
                "inferTimestamp": {
                    "type": "boolean",
                    "description": "Allow connector to guess keen.timestamp value based on the streamed data.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "To get Keen Project ID, navigate to the Access tab from the left-hand, side panel and check the Project Details section.\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "destinationType",
                "inferTimestamp",
                "projectId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationKinesisConfiguration:getDestinationKinesisConfiguration": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Generate the AWS Access Key for current user.\n"
                },
                "bufferSize": {
                    "type": "integer",
                    "description": "Buffer size for storing kinesis records before being batch streamed.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"kinesis\"]\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "AWS Kinesis endpoint.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The AWS Private Key - a string of numbers and letters that are unique for each account, also known as a \"recovery phrase\".\n"
                },
                "region": {
                    "type": "string",
                    "description": "AWS region. Your account determines the Regions that are available to you.\n"
                },
                "shardCount": {
                    "type": "integer",
                    "description": "Number of shards to which the data should be streamed.\n"
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "bufferSize",
                "destinationType",
                "endpoint",
                "privateKey",
                "region",
                "shardCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationLangchainConfiguration:getDestinationLangchainConfiguration": {
            "properties": {
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"langchain\"]\n"
                },
                "embedding": {
                    "$ref": "#/types/airbyte:index/getDestinationLangchainConfigurationEmbedding:getDestinationLangchainConfigurationEmbedding",
                    "description": "Embedding configuration\n"
                },
                "indexing": {
                    "$ref": "#/types/airbyte:index/getDestinationLangchainConfigurationIndexing:getDestinationLangchainConfigurationIndexing",
                    "description": "Indexing configuration\n"
                },
                "processing": {
                    "$ref": "#/types/airbyte:index/getDestinationLangchainConfigurationProcessing:getDestinationLangchainConfigurationProcessing"
                }
            },
            "type": "object",
            "required": [
                "destinationType",
                "embedding",
                "indexing",
                "processing"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationLangchainConfigurationEmbedding:getDestinationLangchainConfigurationEmbedding": {
            "properties": {
                "destinationLangchainEmbeddingFake": {
                    "$ref": "#/types/airbyte:index/getDestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingFake:getDestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingFake"
                },
                "destinationLangchainEmbeddingOpenAi": {
                    "$ref": "#/types/airbyte:index/getDestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingOpenAi:getDestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingOpenAi"
                },
                "destinationLangchainUpdateEmbeddingFake": {
                    "$ref": "#/types/airbyte:index/getDestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingFake:getDestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingFake"
                },
                "destinationLangchainUpdateEmbeddingOpenAi": {
                    "$ref": "#/types/airbyte:index/getDestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingOpenAi:getDestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingOpenAi"
                }
            },
            "type": "object",
            "required": [
                "destinationLangchainEmbeddingFake",
                "destinationLangchainEmbeddingOpenAi",
                "destinationLangchainUpdateEmbeddingFake",
                "destinationLangchainUpdateEmbeddingOpenAi"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingFake:getDestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingFake": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingOpenAi:getDestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingOpenAi": {
            "properties": {
                "mode": {
                    "type": "string"
                },
                "openaiKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode",
                "openaiKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingFake:getDestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingFake": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingOpenAi:getDestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingOpenAi": {
            "properties": {
                "mode": {
                    "type": "string"
                },
                "openaiKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode",
                "openaiKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationLangchainConfigurationIndexing:getDestinationLangchainConfigurationIndexing": {
            "properties": {
                "destinationLangchainIndexingChromaLocalPersistance": {
                    "$ref": "#/types/airbyte:index/getDestinationLangchainConfigurationIndexingDestinationLangchainIndexingChromaLocalPersistance:getDestinationLangchainConfigurationIndexingDestinationLangchainIndexingChromaLocalPersistance"
                },
                "destinationLangchainIndexingDocArrayHnswSearch": {
                    "$ref": "#/types/airbyte:index/getDestinationLangchainConfigurationIndexingDestinationLangchainIndexingDocArrayHnswSearch:getDestinationLangchainConfigurationIndexingDestinationLangchainIndexingDocArrayHnswSearch"
                },
                "destinationLangchainIndexingPinecone": {
                    "$ref": "#/types/airbyte:index/getDestinationLangchainConfigurationIndexingDestinationLangchainIndexingPinecone:getDestinationLangchainConfigurationIndexingDestinationLangchainIndexingPinecone"
                },
                "destinationLangchainUpdateIndexingChromaLocalPersistance": {
                    "$ref": "#/types/airbyte:index/getDestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingChromaLocalPersistance:getDestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingChromaLocalPersistance"
                },
                "destinationLangchainUpdateIndexingDocArrayHnswSearch": {
                    "$ref": "#/types/airbyte:index/getDestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingDocArrayHnswSearch:getDestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingDocArrayHnswSearch"
                },
                "destinationLangchainUpdateIndexingPinecone": {
                    "$ref": "#/types/airbyte:index/getDestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingPinecone:getDestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingPinecone"
                }
            },
            "type": "object",
            "required": [
                "destinationLangchainIndexingChromaLocalPersistance",
                "destinationLangchainIndexingDocArrayHnswSearch",
                "destinationLangchainIndexingPinecone",
                "destinationLangchainUpdateIndexingChromaLocalPersistance",
                "destinationLangchainUpdateIndexingDocArrayHnswSearch",
                "destinationLangchainUpdateIndexingPinecone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationLangchainConfigurationIndexingDestinationLangchainIndexingChromaLocalPersistance:getDestinationLangchainConfigurationIndexingDestinationLangchainIndexingChromaLocalPersistance": {
            "properties": {
                "collectionName": {
                    "type": "string"
                },
                "destinationPath": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "collectionName",
                "destinationPath",
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationLangchainConfigurationIndexingDestinationLangchainIndexingDocArrayHnswSearch:getDestinationLangchainConfigurationIndexingDestinationLangchainIndexingDocArrayHnswSearch": {
            "properties": {
                "destinationPath": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "destinationPath",
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationLangchainConfigurationIndexingDestinationLangchainIndexingPinecone:getDestinationLangchainConfigurationIndexingDestinationLangchainIndexingPinecone": {
            "properties": {
                "index": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "pineconeEnvironment": {
                    "type": "string"
                },
                "pineconeKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "index",
                "mode",
                "pineconeEnvironment",
                "pineconeKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingChromaLocalPersistance:getDestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingChromaLocalPersistance": {
            "properties": {
                "collectionName": {
                    "type": "string"
                },
                "destinationPath": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "collectionName",
                "destinationPath",
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingDocArrayHnswSearch:getDestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingDocArrayHnswSearch": {
            "properties": {
                "destinationPath": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "destinationPath",
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingPinecone:getDestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingPinecone": {
            "properties": {
                "index": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "pineconeEnvironment": {
                    "type": "string"
                },
                "pineconeKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "index",
                "mode",
                "pineconeEnvironment",
                "pineconeKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationLangchainConfigurationProcessing:getDestinationLangchainConfigurationProcessing": {
            "properties": {
                "chunkOverlap": {
                    "type": "integer"
                },
                "chunkSize": {
                    "type": "integer"
                },
                "textFields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "chunkOverlap",
                "chunkSize",
                "textFields"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMSsqlConfiguration:getDestinationMSsqlConfiguration": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The name of the MSSQL database.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"mssql\"]\n"
                },
                "host": {
                    "type": "string",
                    "description": "The host name of the MSSQL database.\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '\u0026'. (example: key1=value1\u0026key2=value2\u0026key3=value3).\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password associated with this username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port of the MSSQL database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The default schema tables are written to if the source does not specify a namespace. The usual value for this field is \"public\".\n"
                },
                "sslMethod": {
                    "$ref": "#/types/airbyte:index/getDestinationMSsqlConfigurationSslMethod:getDestinationMSsqlConfigurationSslMethod",
                    "description": "The encryption method which is used to communicate with the database.\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/getDestinationMSsqlConfigurationTunnelMethod:getDestinationMSsqlConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username which is used to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "destinationType",
                "host",
                "jdbcUrlParams",
                "password",
                "port",
                "schema",
                "sslMethod",
                "tunnelMethod",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMSsqlConfigurationSslMethod:getDestinationMSsqlConfigurationSslMethod": {
            "properties": {
                "destinationMssqlSslMethodEncryptedTrustServerCertificate": {
                    "$ref": "#/types/airbyte:index/getDestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedTrustServerCertificate:getDestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedTrustServerCertificate"
                },
                "destinationMssqlSslMethodEncryptedVerifyCertificate": {
                    "$ref": "#/types/airbyte:index/getDestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedVerifyCertificate:getDestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedVerifyCertificate"
                },
                "destinationMssqlUpdateSslMethodEncryptedTrustServerCertificate": {
                    "$ref": "#/types/airbyte:index/getDestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedTrustServerCertificate:getDestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedTrustServerCertificate"
                },
                "destinationMssqlUpdateSslMethodEncryptedVerifyCertificate": {
                    "$ref": "#/types/airbyte:index/getDestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedVerifyCertificate:getDestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedVerifyCertificate"
                }
            },
            "type": "object",
            "required": [
                "destinationMssqlSslMethodEncryptedTrustServerCertificate",
                "destinationMssqlSslMethodEncryptedVerifyCertificate",
                "destinationMssqlUpdateSslMethodEncryptedTrustServerCertificate",
                "destinationMssqlUpdateSslMethodEncryptedVerifyCertificate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedTrustServerCertificate:getDestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedTrustServerCertificate": {
            "properties": {
                "sslMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sslMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedVerifyCertificate:getDestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedVerifyCertificate": {
            "properties": {
                "hostNameInCertificate": {
                    "type": "string"
                },
                "sslMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "hostNameInCertificate",
                "sslMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedTrustServerCertificate:getDestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedTrustServerCertificate": {
            "properties": {
                "sslMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sslMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedVerifyCertificate:getDestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedVerifyCertificate": {
            "properties": {
                "hostNameInCertificate": {
                    "type": "string"
                },
                "sslMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "hostNameInCertificate",
                "sslMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMSsqlConfigurationTunnelMethod:getDestinationMSsqlConfigurationTunnelMethod": {
            "properties": {
                "destinationMssqlSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getDestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodNoTunnel:getDestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodNoTunnel"
                },
                "destinationMssqlSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodPasswordAuthentication:getDestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodPasswordAuthentication"
                },
                "destinationMssqlSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodSshKeyAuthentication:getDestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodSshKeyAuthentication"
                },
                "destinationMssqlUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getDestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodNoTunnel:getDestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodNoTunnel"
                },
                "destinationMssqlUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodPasswordAuthentication:getDestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodPasswordAuthentication"
                },
                "destinationMssqlUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodSshKeyAuthentication:getDestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object",
            "required": [
                "destinationMssqlSshTunnelMethodNoTunnel",
                "destinationMssqlSshTunnelMethodPasswordAuthentication",
                "destinationMssqlSshTunnelMethodSshKeyAuthentication",
                "destinationMssqlUpdateSshTunnelMethodNoTunnel",
                "destinationMssqlUpdateSshTunnelMethodPasswordAuthentication",
                "destinationMssqlUpdateSshTunnelMethodSshKeyAuthentication"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodNoTunnel:getDestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodPasswordAuthentication:getDestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodSshKeyAuthentication:getDestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodNoTunnel:getDestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodPasswordAuthentication:getDestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodSshKeyAuthentication:getDestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMongodbConfiguration:getDestinationMongodbConfiguration": {
            "properties": {
                "authType": {
                    "$ref": "#/types/airbyte:index/getDestinationMongodbConfigurationAuthType:getDestinationMongodbConfigurationAuthType",
                    "description": "Authorization type.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Name of the database.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"mongodb\"]\n"
                },
                "instanceType": {
                    "$ref": "#/types/airbyte:index/getDestinationMongodbConfigurationInstanceType:getDestinationMongodbConfigurationInstanceType",
                    "description": "MongoDb instance to connect to. For MongoDB Atlas and Replica Set TLS connection is used by default.\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/getDestinationMongodbConfigurationTunnelMethod:getDestinationMongodbConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "database",
                "destinationType",
                "instanceType",
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMongodbConfigurationAuthType:getDestinationMongodbConfigurationAuthType": {
            "properties": {
                "destinationMongodbAuthorizationTypeLoginPassword": {
                    "$ref": "#/types/airbyte:index/getDestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeLoginPassword:getDestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeLoginPassword"
                },
                "destinationMongodbAuthorizationTypeNone": {
                    "$ref": "#/types/airbyte:index/getDestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeNone:getDestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeNone"
                },
                "destinationMongodbUpdateAuthorizationTypeLoginPassword": {
                    "$ref": "#/types/airbyte:index/getDestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeLoginPassword:getDestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeLoginPassword"
                },
                "destinationMongodbUpdateAuthorizationTypeNone": {
                    "$ref": "#/types/airbyte:index/getDestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeNone:getDestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeNone"
                }
            },
            "type": "object",
            "required": [
                "destinationMongodbAuthorizationTypeLoginPassword",
                "destinationMongodbAuthorizationTypeNone",
                "destinationMongodbUpdateAuthorizationTypeLoginPassword",
                "destinationMongodbUpdateAuthorizationTypeNone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeLoginPassword:getDestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeLoginPassword": {
            "properties": {
                "authorization": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authorization",
                "password",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeNone:getDestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeNone": {
            "properties": {
                "authorization": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authorization"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeLoginPassword:getDestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeLoginPassword": {
            "properties": {
                "authorization": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authorization",
                "password",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeNone:getDestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeNone": {
            "properties": {
                "authorization": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authorization"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMongodbConfigurationInstanceType:getDestinationMongodbConfigurationInstanceType": {
            "properties": {
                "destinationMongodbMongoDbInstanceTypeMongoDbAtlas": {
                    "$ref": "#/types/airbyte:index/getDestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeMongoDbAtlas:getDestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeMongoDbAtlas"
                },
                "destinationMongodbMongoDbInstanceTypeReplicaSet": {
                    "$ref": "#/types/airbyte:index/getDestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeReplicaSet:getDestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeReplicaSet"
                },
                "destinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance": {
                    "$ref": "#/types/airbyte:index/getDestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance:getDestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance"
                },
                "destinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlas": {
                    "$ref": "#/types/airbyte:index/getDestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlas:getDestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlas"
                },
                "destinationMongodbUpdateMongoDbInstanceTypeReplicaSet": {
                    "$ref": "#/types/airbyte:index/getDestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeReplicaSet:getDestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeReplicaSet"
                },
                "destinationMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance": {
                    "$ref": "#/types/airbyte:index/getDestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance:getDestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance"
                }
            },
            "type": "object",
            "required": [
                "destinationMongodbMongoDbInstanceTypeMongoDbAtlas",
                "destinationMongodbMongoDbInstanceTypeReplicaSet",
                "destinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance",
                "destinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlas",
                "destinationMongodbUpdateMongoDbInstanceTypeReplicaSet",
                "destinationMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeMongoDbAtlas:getDestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeMongoDbAtlas": {
            "properties": {
                "clusterUrl": {
                    "type": "string"
                },
                "instance": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clusterUrl",
                "instance"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeReplicaSet:getDestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeReplicaSet": {
            "properties": {
                "instance": {
                    "type": "string"
                },
                "replicaSet": {
                    "type": "string"
                },
                "serverAddresses": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "instance",
                "replicaSet",
                "serverAddresses"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance:getDestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "instance": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "host",
                "instance",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlas:getDestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlas": {
            "properties": {
                "clusterUrl": {
                    "type": "string"
                },
                "instance": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clusterUrl",
                "instance"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeReplicaSet:getDestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeReplicaSet": {
            "properties": {
                "instance": {
                    "type": "string"
                },
                "replicaSet": {
                    "type": "string"
                },
                "serverAddresses": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "instance",
                "replicaSet",
                "serverAddresses"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance:getDestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "instance": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "host",
                "instance",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMongodbConfigurationTunnelMethod:getDestinationMongodbConfigurationTunnelMethod": {
            "properties": {
                "destinationMongodbSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getDestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodNoTunnel:getDestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodNoTunnel"
                },
                "destinationMongodbSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodPasswordAuthentication:getDestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodPasswordAuthentication"
                },
                "destinationMongodbSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodSshKeyAuthentication:getDestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodSshKeyAuthentication"
                },
                "destinationMongodbUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getDestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodNoTunnel:getDestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodNoTunnel"
                },
                "destinationMongodbUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodPasswordAuthentication:getDestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodPasswordAuthentication"
                },
                "destinationMongodbUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodSshKeyAuthentication:getDestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object",
            "required": [
                "destinationMongodbSshTunnelMethodNoTunnel",
                "destinationMongodbSshTunnelMethodPasswordAuthentication",
                "destinationMongodbSshTunnelMethodSshKeyAuthentication",
                "destinationMongodbUpdateSshTunnelMethodNoTunnel",
                "destinationMongodbUpdateSshTunnelMethodPasswordAuthentication",
                "destinationMongodbUpdateSshTunnelMethodSshKeyAuthentication"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodNoTunnel:getDestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodPasswordAuthentication:getDestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodSshKeyAuthentication:getDestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodNoTunnel:getDestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodPasswordAuthentication:getDestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodSshKeyAuthentication:getDestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMysqlConfiguration:getDestinationMysqlConfiguration": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"mysql\"]\n"
                },
                "host": {
                    "type": "string",
                    "description": "Hostname of the database.\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '\u0026'. (example: key1=value1\u0026key2=value2\u0026key3=value3).\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password associated with the username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the database.\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/getDestinationMysqlConfigurationTunnelMethod:getDestinationMysqlConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "destinationType",
                "host",
                "jdbcUrlParams",
                "password",
                "port",
                "tunnelMethod",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMysqlConfigurationTunnelMethod:getDestinationMysqlConfigurationTunnelMethod": {
            "properties": {
                "destinationMysqlSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getDestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodNoTunnel:getDestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodNoTunnel"
                },
                "destinationMysqlSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodPasswordAuthentication:getDestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodPasswordAuthentication"
                },
                "destinationMysqlSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodSshKeyAuthentication:getDestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodSshKeyAuthentication"
                },
                "destinationMysqlUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getDestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodNoTunnel:getDestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodNoTunnel"
                },
                "destinationMysqlUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodPasswordAuthentication:getDestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodPasswordAuthentication"
                },
                "destinationMysqlUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodSshKeyAuthentication:getDestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object",
            "required": [
                "destinationMysqlSshTunnelMethodNoTunnel",
                "destinationMysqlSshTunnelMethodPasswordAuthentication",
                "destinationMysqlSshTunnelMethodSshKeyAuthentication",
                "destinationMysqlUpdateSshTunnelMethodNoTunnel",
                "destinationMysqlUpdateSshTunnelMethodPasswordAuthentication",
                "destinationMysqlUpdateSshTunnelMethodSshKeyAuthentication"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodNoTunnel:getDestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodPasswordAuthentication:getDestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodSshKeyAuthentication:getDestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodNoTunnel:getDestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodPasswordAuthentication:getDestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodSshKeyAuthentication:getDestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationOracleConfiguration:getDestinationOracleConfiguration": {
            "properties": {
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"oracle\"]\n"
                },
                "host": {
                    "type": "string",
                    "description": "The hostname of the database.\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '\u0026'. (example: key1=value1\u0026key2=value2\u0026key3=value3).\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password associated with the username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port of the database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The default schema is used as the target schema for all statements issued from the connection that do not explicitly specify a schema name. The usual value for this field is \"airbyte\".  In Oracle, schemas and users are the same thing, so the \"user\" parameter is used as the login credentials and this is used for the default Airbyte message schema.\n"
                },
                "sid": {
                    "type": "string",
                    "description": "The System Identifier uniquely distinguishes the instance from any other instance on the same computer.\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/getDestinationOracleConfigurationTunnelMethod:getDestinationOracleConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to access the database. This user must have CREATE USER privileges in the database.\n"
                }
            },
            "type": "object",
            "required": [
                "destinationType",
                "host",
                "jdbcUrlParams",
                "password",
                "port",
                "schema",
                "sid",
                "tunnelMethod",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationOracleConfigurationTunnelMethod:getDestinationOracleConfigurationTunnelMethod": {
            "properties": {
                "destinationOracleSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getDestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodNoTunnel:getDestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodNoTunnel"
                },
                "destinationOracleSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodPasswordAuthentication:getDestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodPasswordAuthentication"
                },
                "destinationOracleSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodSshKeyAuthentication:getDestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodSshKeyAuthentication"
                },
                "destinationOracleUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getDestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodNoTunnel:getDestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodNoTunnel"
                },
                "destinationOracleUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodPasswordAuthentication:getDestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodPasswordAuthentication"
                },
                "destinationOracleUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodSshKeyAuthentication:getDestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object",
            "required": [
                "destinationOracleSshTunnelMethodNoTunnel",
                "destinationOracleSshTunnelMethodPasswordAuthentication",
                "destinationOracleSshTunnelMethodSshKeyAuthentication",
                "destinationOracleUpdateSshTunnelMethodNoTunnel",
                "destinationOracleUpdateSshTunnelMethodPasswordAuthentication",
                "destinationOracleUpdateSshTunnelMethodSshKeyAuthentication"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodNoTunnel:getDestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodPasswordAuthentication:getDestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodSshKeyAuthentication:getDestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodNoTunnel:getDestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodPasswordAuthentication:getDestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodSshKeyAuthentication:getDestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationPostgresConfiguration:getDestinationPostgresConfiguration": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"postgres\"]\n"
                },
                "host": {
                    "type": "string",
                    "description": "Hostname of the database.\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '\u0026'. (example: key1=value1\u0026key2=value2\u0026key3=value3).\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password associated with the username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The default schema tables are written to if the source does not specify a namespace. The usual value for this field is \"public\".\n"
                },
                "sslMode": {
                    "$ref": "#/types/airbyte:index/getDestinationPostgresConfigurationSslMode:getDestinationPostgresConfigurationSslMode",
                    "description": "SSL connection modes.\n\\n\\ndisable\\n\\n - Chose this mode to disable encryption of communication between Airbyte and destination database\n\\n\\nallow\\n\\n - Chose this mode to enable encryption only when required by the source database\n\\n\\nprefer\\n\\n - Chose this mode to allow unencrypted connection only if the source database does not support encryption\n\\n\\nrequire\\n\\n - Chose this mode to always require encryption. If the source database server does not support encryption, connection will fail\n\\n\\nverify-ca\\n\\n - Chose this mode to always require encryption and to verify that the source database server has a valid SSL certificate\n\\n\\nverify-full\\n\\n - This is the most secure mode. Chose this mode to always require encryption and to verify the identity of the source database server\nSee more information - \\n\\n in the docs\\n\\n.\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/getDestinationPostgresConfigurationTunnelMethod:getDestinationPostgresConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "destinationType",
                "host",
                "jdbcUrlParams",
                "password",
                "port",
                "schema",
                "sslMode",
                "tunnelMethod",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationPostgresConfigurationSslMode:getDestinationPostgresConfigurationSslMode": {
            "properties": {
                "destinationPostgresSslModesAllow": {
                    "$ref": "#/types/airbyte:index/getDestinationPostgresConfigurationSslModeDestinationPostgresSslModesAllow:getDestinationPostgresConfigurationSslModeDestinationPostgresSslModesAllow"
                },
                "destinationPostgresSslModesDisable": {
                    "$ref": "#/types/airbyte:index/getDestinationPostgresConfigurationSslModeDestinationPostgresSslModesDisable:getDestinationPostgresConfigurationSslModeDestinationPostgresSslModesDisable"
                },
                "destinationPostgresSslModesPrefer": {
                    "$ref": "#/types/airbyte:index/getDestinationPostgresConfigurationSslModeDestinationPostgresSslModesPrefer:getDestinationPostgresConfigurationSslModeDestinationPostgresSslModesPrefer"
                },
                "destinationPostgresSslModesRequire": {
                    "$ref": "#/types/airbyte:index/getDestinationPostgresConfigurationSslModeDestinationPostgresSslModesRequire:getDestinationPostgresConfigurationSslModeDestinationPostgresSslModesRequire"
                },
                "destinationPostgresSslModesVerifyCa": {
                    "$ref": "#/types/airbyte:index/getDestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyCa:getDestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyCa"
                },
                "destinationPostgresSslModesVerifyFull": {
                    "$ref": "#/types/airbyte:index/getDestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyFull:getDestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyFull"
                },
                "destinationPostgresUpdateSslModesAllow": {
                    "$ref": "#/types/airbyte:index/getDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesAllow:getDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesAllow"
                },
                "destinationPostgresUpdateSslModesDisable": {
                    "$ref": "#/types/airbyte:index/getDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesDisable:getDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesDisable"
                },
                "destinationPostgresUpdateSslModesPrefer": {
                    "$ref": "#/types/airbyte:index/getDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesPrefer:getDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesPrefer"
                },
                "destinationPostgresUpdateSslModesRequire": {
                    "$ref": "#/types/airbyte:index/getDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesRequire:getDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesRequire"
                },
                "destinationPostgresUpdateSslModesVerifyCa": {
                    "$ref": "#/types/airbyte:index/getDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyCa:getDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyCa"
                },
                "destinationPostgresUpdateSslModesVerifyFull": {
                    "$ref": "#/types/airbyte:index/getDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyFull:getDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyFull"
                }
            },
            "type": "object",
            "required": [
                "destinationPostgresSslModesAllow",
                "destinationPostgresSslModesDisable",
                "destinationPostgresSslModesPrefer",
                "destinationPostgresSslModesRequire",
                "destinationPostgresSslModesVerifyCa",
                "destinationPostgresSslModesVerifyFull",
                "destinationPostgresUpdateSslModesAllow",
                "destinationPostgresUpdateSslModesDisable",
                "destinationPostgresUpdateSslModesPrefer",
                "destinationPostgresUpdateSslModesRequire",
                "destinationPostgresUpdateSslModesVerifyCa",
                "destinationPostgresUpdateSslModesVerifyFull"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationPostgresConfigurationSslModeDestinationPostgresSslModesAllow:getDestinationPostgresConfigurationSslModeDestinationPostgresSslModesAllow": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationPostgresConfigurationSslModeDestinationPostgresSslModesDisable:getDestinationPostgresConfigurationSslModeDestinationPostgresSslModesDisable": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationPostgresConfigurationSslModeDestinationPostgresSslModesPrefer:getDestinationPostgresConfigurationSslModeDestinationPostgresSslModesPrefer": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationPostgresConfigurationSslModeDestinationPostgresSslModesRequire:getDestinationPostgresConfigurationSslModeDestinationPostgresSslModesRequire": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyCa:getDestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyCa": {
            "properties": {
                "caCertificate": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "clientKeyPassword",
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyFull:getDestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyFull": {
            "properties": {
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "clientCertificate",
                "clientKey",
                "clientKeyPassword",
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesAllow:getDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesAllow": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesDisable:getDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesDisable": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesPrefer:getDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesPrefer": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesRequire:getDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesRequire": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyCa:getDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyCa": {
            "properties": {
                "caCertificate": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "clientKeyPassword",
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyFull:getDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyFull": {
            "properties": {
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "clientCertificate",
                "clientKey",
                "clientKeyPassword",
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationPostgresConfigurationTunnelMethod:getDestinationPostgresConfigurationTunnelMethod": {
            "properties": {
                "destinationPostgresSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getDestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodNoTunnel:getDestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodNoTunnel"
                },
                "destinationPostgresSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodPasswordAuthentication:getDestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodPasswordAuthentication"
                },
                "destinationPostgresSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodSshKeyAuthentication:getDestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodSshKeyAuthentication"
                },
                "destinationPostgresUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getDestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodNoTunnel:getDestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodNoTunnel"
                },
                "destinationPostgresUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodPasswordAuthentication:getDestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodPasswordAuthentication"
                },
                "destinationPostgresUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodSshKeyAuthentication:getDestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object",
            "required": [
                "destinationPostgresSshTunnelMethodNoTunnel",
                "destinationPostgresSshTunnelMethodPasswordAuthentication",
                "destinationPostgresSshTunnelMethodSshKeyAuthentication",
                "destinationPostgresUpdateSshTunnelMethodNoTunnel",
                "destinationPostgresUpdateSshTunnelMethodPasswordAuthentication",
                "destinationPostgresUpdateSshTunnelMethodSshKeyAuthentication"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodNoTunnel:getDestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodPasswordAuthentication:getDestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodSshKeyAuthentication:getDestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodNoTunnel:getDestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodPasswordAuthentication:getDestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodSshKeyAuthentication:getDestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationPubsubConfiguration:getDestinationPubsubConfiguration": {
            "properties": {
                "batchingDelayThreshold": {
                    "type": "integer",
                    "description": "Number of ms before the buffer is flushed\n"
                },
                "batchingElementCountThreshold": {
                    "type": "integer",
                    "description": "Number of messages before the buffer is flushed\n"
                },
                "batchingEnabled": {
                    "type": "boolean",
                    "description": "If TRUE messages will be buffered instead of sending them one by one\n"
                },
                "batchingRequestBytesThreshold": {
                    "type": "integer",
                    "description": "Number of bytes before the buffer is flushed\n"
                },
                "credentialsJson": {
                    "type": "string",
                    "description": "The contents of the JSON service account key. Check out the \\n\\ndocs\\n\\n if you need help generating this key.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"pubsub\"]\n"
                },
                "orderingEnabled": {
                    "type": "boolean",
                    "description": "If TRUE PubSub publisher will have \\n\\nmessage ordering\\n\\n enabled. Every message will have an ordering key of stream\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The GCP project ID for the project containing the target PubSub.\n"
                },
                "topicId": {
                    "type": "string",
                    "description": "The PubSub topic ID in the given GCP project ID.\n"
                }
            },
            "type": "object",
            "required": [
                "batchingDelayThreshold",
                "batchingElementCountThreshold",
                "batchingEnabled",
                "batchingRequestBytesThreshold",
                "credentialsJson",
                "destinationType",
                "orderingEnabled",
                "projectId",
                "topicId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedisConfiguration:getDestinationRedisConfiguration": {
            "properties": {
                "cacheType": {
                    "type": "string",
                    "description": "must be one of [\"hash\"]\nRedis cache type to store data in.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"redis\"]\n"
                },
                "host": {
                    "type": "string",
                    "description": "Redis host to connect to.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password associated with Redis.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of Redis.\n"
                },
                "ssl": {
                    "type": "boolean",
                    "description": "Indicates whether SSL encryption protocol will be used to connect to Redis. It is recommended to use SSL connection if possible.\n"
                },
                "sslMode": {
                    "$ref": "#/types/airbyte:index/getDestinationRedisConfigurationSslMode:getDestinationRedisConfigurationSslMode",
                    "description": "SSL connection modes.\n\\n\\n\\n\\nverify-full\\n\\n - This is the most secure mode. Always require encryption and verifies the identity of the source database server\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/getDestinationRedisConfigurationTunnelMethod:getDestinationRedisConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username associated with Redis.\n"
                }
            },
            "type": "object",
            "required": [
                "cacheType",
                "destinationType",
                "host",
                "password",
                "port",
                "ssl",
                "sslMode",
                "tunnelMethod",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedisConfigurationSslMode:getDestinationRedisConfigurationSslMode": {
            "properties": {
                "destinationRedisSslModesDisable": {
                    "$ref": "#/types/airbyte:index/getDestinationRedisConfigurationSslModeDestinationRedisSslModesDisable:getDestinationRedisConfigurationSslModeDestinationRedisSslModesDisable"
                },
                "destinationRedisSslModesVerifyFull": {
                    "$ref": "#/types/airbyte:index/getDestinationRedisConfigurationSslModeDestinationRedisSslModesVerifyFull:getDestinationRedisConfigurationSslModeDestinationRedisSslModesVerifyFull"
                },
                "destinationRedisUpdateSslModesDisable": {
                    "$ref": "#/types/airbyte:index/getDestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesDisable:getDestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesDisable"
                },
                "destinationRedisUpdateSslModesVerifyFull": {
                    "$ref": "#/types/airbyte:index/getDestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesVerifyFull:getDestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesVerifyFull"
                }
            },
            "type": "object",
            "required": [
                "destinationRedisSslModesDisable",
                "destinationRedisSslModesVerifyFull",
                "destinationRedisUpdateSslModesDisable",
                "destinationRedisUpdateSslModesVerifyFull"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedisConfigurationSslModeDestinationRedisSslModesDisable:getDestinationRedisConfigurationSslModeDestinationRedisSslModesDisable": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedisConfigurationSslModeDestinationRedisSslModesVerifyFull:getDestinationRedisConfigurationSslModeDestinationRedisSslModesVerifyFull": {
            "properties": {
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "clientCertificate",
                "clientKey",
                "clientKeyPassword",
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesDisable:getDestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesDisable": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesVerifyFull:getDestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesVerifyFull": {
            "properties": {
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "clientCertificate",
                "clientKey",
                "clientKeyPassword",
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedisConfigurationTunnelMethod:getDestinationRedisConfigurationTunnelMethod": {
            "properties": {
                "destinationRedisSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getDestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodNoTunnel:getDestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodNoTunnel"
                },
                "destinationRedisSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodPasswordAuthentication:getDestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodPasswordAuthentication"
                },
                "destinationRedisSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodSshKeyAuthentication:getDestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodSshKeyAuthentication"
                },
                "destinationRedisUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getDestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodNoTunnel:getDestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodNoTunnel"
                },
                "destinationRedisUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodPasswordAuthentication:getDestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodPasswordAuthentication"
                },
                "destinationRedisUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodSshKeyAuthentication:getDestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object",
            "required": [
                "destinationRedisSshTunnelMethodNoTunnel",
                "destinationRedisSshTunnelMethodPasswordAuthentication",
                "destinationRedisSshTunnelMethodSshKeyAuthentication",
                "destinationRedisUpdateSshTunnelMethodNoTunnel",
                "destinationRedisUpdateSshTunnelMethodPasswordAuthentication",
                "destinationRedisUpdateSshTunnelMethodSshKeyAuthentication"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodNoTunnel:getDestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodPasswordAuthentication:getDestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodSshKeyAuthentication:getDestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodNoTunnel:getDestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodPasswordAuthentication:getDestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodSshKeyAuthentication:getDestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedshiftConfiguration:getDestinationRedshiftConfiguration": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"redshift\"]\n"
                },
                "host": {
                    "type": "string",
                    "description": "Host Endpoint of the Redshift Cluster (must include the cluster-id, region and end with .redshift.amazonaws.com)\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '\u0026'. (example: key1=value1\u0026key2=value2\u0026key3=value3).\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password associated with the username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The default schema tables are written to if the source does not specify a namespace. Unless specifically configured, the usual value for this field is \"public\".\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/getDestinationRedshiftConfigurationTunnelMethod:getDestinationRedshiftConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                },
                "uploadingMethod": {
                    "$ref": "#/types/airbyte:index/getDestinationRedshiftConfigurationUploadingMethod:getDestinationRedshiftConfigurationUploadingMethod",
                    "description": "The method how the data will be uploaded to the database.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "destinationType",
                "host",
                "jdbcUrlParams",
                "password",
                "port",
                "schema",
                "tunnelMethod",
                "uploadingMethod",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedshiftConfigurationTunnelMethod:getDestinationRedshiftConfigurationTunnelMethod": {
            "properties": {
                "destinationRedshiftSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodNoTunnel:getDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodNoTunnel"
                },
                "destinationRedshiftSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodPasswordAuthentication:getDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodPasswordAuthentication"
                },
                "destinationRedshiftSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodSshKeyAuthentication:getDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodSshKeyAuthentication"
                },
                "destinationRedshiftUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodNoTunnel:getDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodNoTunnel"
                },
                "destinationRedshiftUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodPasswordAuthentication:getDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodPasswordAuthentication"
                },
                "destinationRedshiftUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodSshKeyAuthentication:getDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object",
            "required": [
                "destinationRedshiftSshTunnelMethodNoTunnel",
                "destinationRedshiftSshTunnelMethodPasswordAuthentication",
                "destinationRedshiftSshTunnelMethodSshKeyAuthentication",
                "destinationRedshiftUpdateSshTunnelMethodNoTunnel",
                "destinationRedshiftUpdateSshTunnelMethodPasswordAuthentication",
                "destinationRedshiftUpdateSshTunnelMethodSshKeyAuthentication"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodNoTunnel:getDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodPasswordAuthentication:getDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodSshKeyAuthentication:getDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodNoTunnel:getDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodPasswordAuthentication:getDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodSshKeyAuthentication:getDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedshiftConfigurationUploadingMethod:getDestinationRedshiftConfigurationUploadingMethod": {
            "properties": {
                "destinationRedshiftUpdateUploadingMethodS3Staging": {
                    "$ref": "#/types/airbyte:index/getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3Staging:getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3Staging"
                },
                "destinationRedshiftUpdateUploadingMethodStandard": {
                    "$ref": "#/types/airbyte:index/getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodStandard:getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodStandard"
                },
                "destinationRedshiftUploadingMethodS3Staging": {
                    "$ref": "#/types/airbyte:index/getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3Staging:getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3Staging"
                },
                "destinationRedshiftUploadingMethodStandard": {
                    "$ref": "#/types/airbyte:index/getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodStandard:getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodStandard"
                }
            },
            "type": "object",
            "required": [
                "destinationRedshiftUpdateUploadingMethodS3Staging",
                "destinationRedshiftUpdateUploadingMethodStandard",
                "destinationRedshiftUploadingMethodS3Staging",
                "destinationRedshiftUploadingMethodStandard"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3Staging:getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3Staging": {
            "properties": {
                "accessKeyId": {
                    "type": "string"
                },
                "encryption": {
                    "$ref": "#/types/airbyte:index/getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryption:getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryption"
                },
                "fileBufferCount": {
                    "type": "integer"
                },
                "fileNamePattern": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "purgeStagingData": {
                    "type": "boolean"
                },
                "s3BucketName": {
                    "type": "string"
                },
                "s3BucketPath": {
                    "type": "string"
                },
                "s3BucketRegion": {
                    "type": "string"
                },
                "secretAccessKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessKeyId",
                "encryption",
                "fileBufferCount",
                "fileNamePattern",
                "method",
                "purgeStagingData",
                "s3BucketName",
                "s3BucketPath",
                "s3BucketRegion",
                "secretAccessKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryption:getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryption": {
            "properties": {
                "destinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption": {
                    "$ref": "#/types/airbyte:index/getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption:getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption"
                },
                "destinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryption": {
                    "$ref": "#/types/airbyte:index/getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryption:getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryption"
                }
            },
            "type": "object",
            "required": [
                "destinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption",
                "destinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryption"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption:getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption": {
            "properties": {
                "encryptionType": {
                    "type": "string"
                },
                "keyEncryptingKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "encryptionType",
                "keyEncryptingKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryption:getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryption": {
            "properties": {
                "encryptionType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "encryptionType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodStandard:getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodStandard": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3Staging:getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3Staging": {
            "properties": {
                "accessKeyId": {
                    "type": "string"
                },
                "encryption": {
                    "$ref": "#/types/airbyte:index/getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryption:getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryption"
                },
                "fileBufferCount": {
                    "type": "integer"
                },
                "fileNamePattern": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "purgeStagingData": {
                    "type": "boolean"
                },
                "s3BucketName": {
                    "type": "string"
                },
                "s3BucketPath": {
                    "type": "string"
                },
                "s3BucketRegion": {
                    "type": "string"
                },
                "secretAccessKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessKeyId",
                "encryption",
                "fileBufferCount",
                "fileNamePattern",
                "method",
                "purgeStagingData",
                "s3BucketName",
                "s3BucketPath",
                "s3BucketRegion",
                "secretAccessKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryption:getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryption": {
            "properties": {
                "destinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption": {
                    "$ref": "#/types/airbyte:index/getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption:getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption"
                },
                "destinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption": {
                    "$ref": "#/types/airbyte:index/getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption:getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption"
                }
            },
            "type": "object",
            "required": [
                "destinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption",
                "destinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption:getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption": {
            "properties": {
                "encryptionType": {
                    "type": "string"
                },
                "keyEncryptingKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "encryptionType",
                "keyEncryptingKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption:getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption": {
            "properties": {
                "encryptionType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "encryptionType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodStandard:getDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodStandard": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3Configuration:getDestinationS3Configuration": {
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The access key ID to access the S3 bucket. Airbyte requires Read and Write permissions to the given bucket. Read more \\n\\nhere\\n\\n.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"s3\"]\n"
                },
                "fileNamePattern": {
                    "type": "string",
                    "description": "The pattern allows you to set the file-name format for the S3 staging file(s)\n"
                },
                "format": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormat:getDestinationS3ConfigurationFormat",
                    "description": "Format of the data output. See \\n\\nhere\\n\\n for more details\n"
                },
                "s3BucketName": {
                    "type": "string",
                    "description": "The name of the S3 bucket. Read more \\n\\nhere\\n\\n.\n"
                },
                "s3BucketPath": {
                    "type": "string",
                    "description": "Directory under the S3 bucket where data will be written. Read more \\n\\nhere\\n\\n\n"
                },
                "s3BucketRegion": {
                    "type": "string",
                    "description": "must be one of [\"\", \"us-east-1\", \"us-east-2\", \"us-west-1\", \"us-west-2\", \"af-south-1\", \"ap-east-1\", \"ap-south-1\", \"ap-northeast-1\", \"ap-northeast-2\", \"ap-northeast-3\", \"ap-southeast-1\", \"ap-southeast-2\", \"ca-central-1\", \"cn-north-1\", \"cn-northwest-1\", \"eu-central-1\", \"eu-north-1\", \"eu-south-1\", \"eu-west-1\", \"eu-west-2\", \"eu-west-3\", \"sa-east-1\", \"me-south-1\", \"us-gov-east-1\", \"us-gov-west-1\"]\nThe region of the S3 bucket. See \\n\\nhere\\n\\n for all region codes.\n"
                },
                "s3Endpoint": {
                    "type": "string",
                    "description": "Your S3 endpoint url. Read more \\n\\nhere\\n\\n\n"
                },
                "s3PathFormat": {
                    "type": "string",
                    "description": "Format string on how data will be organized inside the S3 bucket directory. Read more \\n\\nhere\\n\\n\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The corresponding secret to the access key ID. Read more \\n\\nhere\\n\\n\n"
                }
            },
            "type": "object",
            "required": [
                "accessKeyId",
                "destinationType",
                "fileNamePattern",
                "format",
                "s3BucketName",
                "s3BucketPath",
                "s3BucketRegion",
                "s3Endpoint",
                "s3PathFormat",
                "secretAccessKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormat:getDestinationS3ConfigurationFormat": {
            "properties": {
                "destinationS3OutputFormatAvroApacheAvro": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvro:getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvro"
                },
                "destinationS3OutputFormatCsvCommaSeparatedValues": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValues:getDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValues"
                },
                "destinationS3OutputFormatJsonLinesNewlineDelimitedJson": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJson:getDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJson"
                },
                "destinationS3OutputFormatParquetColumnarStorage": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatParquetColumnarStorage:getDestinationS3ConfigurationFormatDestinationS3OutputFormatParquetColumnarStorage"
                },
                "destinationS3UpdateOutputFormatAvroApacheAvro": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvro:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvro"
                },
                "destinationS3UpdateOutputFormatCsvCommaSeparatedValues": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValues:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValues"
                },
                "destinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJson": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJson:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJson"
                },
                "destinationS3UpdateOutputFormatParquetColumnarStorage": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatParquetColumnarStorage:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatParquetColumnarStorage"
                }
            },
            "type": "object",
            "required": [
                "destinationS3OutputFormatAvroApacheAvro",
                "destinationS3OutputFormatCsvCommaSeparatedValues",
                "destinationS3OutputFormatJsonLinesNewlineDelimitedJson",
                "destinationS3OutputFormatParquetColumnarStorage",
                "destinationS3UpdateOutputFormatAvroApacheAvro",
                "destinationS3UpdateOutputFormatCsvCommaSeparatedValues",
                "destinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJson",
                "destinationS3UpdateOutputFormatParquetColumnarStorage"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvro:getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvro": {
            "properties": {
                "compressionCodec": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodec:getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodec"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionCodec",
                "formatType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodec:getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodec": {
            "properties": {
                "destinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2:getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2"
                },
                "destinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate:getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate"
                },
                "destinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression:getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression"
                },
                "destinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy:getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy"
                },
                "destinationS3OutputFormatAvroApacheAvroCompressionCodecXz": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecXz:getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecXz"
                },
                "destinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard:getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard"
                }
            },
            "type": "object",
            "required": [
                "destinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2",
                "destinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate",
                "destinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression",
                "destinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy",
                "destinationS3OutputFormatAvroApacheAvroCompressionCodecXz",
                "destinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2:getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2": {
            "properties": {
                "codec": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate:getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate": {
            "properties": {
                "codec": {
                    "type": "string"
                },
                "compressionLevel": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "codec",
                "compressionLevel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression:getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression": {
            "properties": {
                "codec": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy:getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy": {
            "properties": {
                "codec": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecXz:getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecXz": {
            "properties": {
                "codec": {
                    "type": "string"
                },
                "compressionLevel": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "codec",
                "compressionLevel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard:getDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard": {
            "properties": {
                "codec": {
                    "type": "string"
                },
                "compressionLevel": {
                    "type": "integer"
                },
                "includeChecksum": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "codec",
                "compressionLevel",
                "includeChecksum"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValues:getDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValues": {
            "properties": {
                "compression": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompression:getDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompression"
                },
                "flattening": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compression",
                "flattening",
                "formatType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompression:getDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompression": {
            "properties": {
                "destinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzip": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzip:getDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzip"
                },
                "destinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompression": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompression:getDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompression"
                }
            },
            "type": "object",
            "required": [
                "destinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzip",
                "destinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompression"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzip:getDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzip": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompression:getDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompression": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJson:getDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJson": {
            "properties": {
                "compression": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompression:getDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompression"
                },
                "flattening": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compression",
                "flattening",
                "formatType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompression:getDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompression": {
            "properties": {
                "destinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip:getDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip"
                },
                "destinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression:getDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression"
                }
            },
            "type": "object",
            "required": [
                "destinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip",
                "destinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip:getDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression:getDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3OutputFormatParquetColumnarStorage:getDestinationS3ConfigurationFormatDestinationS3OutputFormatParquetColumnarStorage": {
            "properties": {
                "blockSizeMb": {
                    "type": "integer"
                },
                "compressionCodec": {
                    "type": "string"
                },
                "dictionaryEncoding": {
                    "type": "boolean"
                },
                "dictionaryPageSizeKb": {
                    "type": "integer"
                },
                "formatType": {
                    "type": "string"
                },
                "maxPaddingSizeMb": {
                    "type": "integer"
                },
                "pageSizeKb": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "blockSizeMb",
                "compressionCodec",
                "dictionaryEncoding",
                "dictionaryPageSizeKb",
                "formatType",
                "maxPaddingSizeMb",
                "pageSizeKb"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvro:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvro": {
            "properties": {
                "compressionCodec": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodec:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodec"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionCodec",
                "formatType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodec:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodec": {
            "properties": {
                "destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecBzip2": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecBzip2:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecBzip2"
                },
                "destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflate": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflate:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflate"
                },
                "destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression"
                },
                "destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecSnappy": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecSnappy:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecSnappy"
                },
                "destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXz": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXz:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXz"
                },
                "destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandard": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandard:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandard"
                }
            },
            "type": "object",
            "required": [
                "destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecBzip2",
                "destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflate",
                "destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression",
                "destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecSnappy",
                "destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXz",
                "destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandard"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecBzip2:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecBzip2": {
            "properties": {
                "codec": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflate:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflate": {
            "properties": {
                "codec": {
                    "type": "string"
                },
                "compressionLevel": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "codec",
                "compressionLevel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression": {
            "properties": {
                "codec": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecSnappy:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecSnappy": {
            "properties": {
                "codec": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "codec"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXz:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXz": {
            "properties": {
                "codec": {
                    "type": "string"
                },
                "compressionLevel": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "codec",
                "compressionLevel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandard:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandard": {
            "properties": {
                "codec": {
                    "type": "string"
                },
                "compressionLevel": {
                    "type": "integer"
                },
                "includeChecksum": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "codec",
                "compressionLevel",
                "includeChecksum"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValues:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValues": {
            "properties": {
                "compression": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompression:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompression"
                },
                "flattening": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compression",
                "flattening",
                "formatType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompression:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompression": {
            "properties": {
                "destinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip"
                },
                "destinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression"
                }
            },
            "type": "object",
            "required": [
                "destinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip",
                "destinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJson:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJson": {
            "properties": {
                "compression": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression"
                },
                "flattening": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compression",
                "flattening",
                "formatType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression": {
            "properties": {
                "destinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip"
                },
                "destinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression": {
                    "$ref": "#/types/airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression"
                }
            },
            "type": "object",
            "required": [
                "destinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip",
                "destinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatParquetColumnarStorage:getDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatParquetColumnarStorage": {
            "properties": {
                "blockSizeMb": {
                    "type": "integer"
                },
                "compressionCodec": {
                    "type": "string"
                },
                "dictionaryEncoding": {
                    "type": "boolean"
                },
                "dictionaryPageSizeKb": {
                    "type": "integer"
                },
                "formatType": {
                    "type": "string"
                },
                "maxPaddingSizeMb": {
                    "type": "integer"
                },
                "pageSizeKb": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "blockSizeMb",
                "compressionCodec",
                "dictionaryEncoding",
                "dictionaryPageSizeKb",
                "formatType",
                "maxPaddingSizeMb",
                "pageSizeKb"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3GlueConfiguration:getDestinationS3GlueConfiguration": {
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The access key ID to access the S3 bucket. Airbyte requires Read and Write permissions to the given bucket. Read more \\n\\nhere\\n\\n.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"s3-glue\"]\n"
                },
                "fileNamePattern": {
                    "type": "string",
                    "description": "The pattern allows you to set the file-name format for the S3 staging file(s)\n"
                },
                "format": {
                    "$ref": "#/types/airbyte:index/getDestinationS3GlueConfigurationFormat:getDestinationS3GlueConfigurationFormat",
                    "description": "Format of the data output. See \\n\\nhere\\n\\n for more details\n"
                },
                "glueDatabase": {
                    "type": "string",
                    "description": "Name of the glue database for creating the tables, leave blank if no integration\n"
                },
                "glueSerializationLibrary": {
                    "type": "string",
                    "description": "must be one of [\"org.openx.data.jsonserde.JsonSerDe\", \"org.apache.hive.hcatalog.data.JsonSerDe\"]\nThe library that your query engine will use for reading and writing data in your lake.\n"
                },
                "s3BucketName": {
                    "type": "string",
                    "description": "The name of the S3 bucket. Read more \\n\\nhere\\n\\n.\n"
                },
                "s3BucketPath": {
                    "type": "string",
                    "description": "Directory under the S3 bucket where data will be written. Read more \\n\\nhere\\n\\n\n"
                },
                "s3BucketRegion": {
                    "type": "string",
                    "description": "must be one of [\"\", \"us-east-1\", \"us-east-2\", \"us-west-1\", \"us-west-2\", \"af-south-1\", \"ap-east-1\", \"ap-south-1\", \"ap-northeast-1\", \"ap-northeast-2\", \"ap-northeast-3\", \"ap-southeast-1\", \"ap-southeast-2\", \"ca-central-1\", \"cn-north-1\", \"cn-northwest-1\", \"eu-central-1\", \"eu-north-1\", \"eu-south-1\", \"eu-west-1\", \"eu-west-2\", \"eu-west-3\", \"sa-east-1\", \"me-south-1\", \"us-gov-east-1\", \"us-gov-west-1\"]\nThe region of the S3 bucket. See \\n\\nhere\\n\\n for all region codes.\n"
                },
                "s3Endpoint": {
                    "type": "string",
                    "description": "Your S3 endpoint url. Read more \\n\\nhere\\n\\n\n"
                },
                "s3PathFormat": {
                    "type": "string",
                    "description": "Format string on how data will be organized inside the S3 bucket directory. Read more \\n\\nhere\\n\\n\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The corresponding secret to the access key ID. Read more \\n\\nhere\\n\\n\n"
                }
            },
            "type": "object",
            "required": [
                "accessKeyId",
                "destinationType",
                "fileNamePattern",
                "format",
                "glueDatabase",
                "glueSerializationLibrary",
                "s3BucketName",
                "s3BucketPath",
                "s3BucketRegion",
                "s3Endpoint",
                "s3PathFormat",
                "secretAccessKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3GlueConfigurationFormat:getDestinationS3GlueConfigurationFormat": {
            "properties": {
                "destinationS3GlueOutputFormatJsonLinesNewlineDelimitedJson": {
                    "$ref": "#/types/airbyte:index/getDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJson:getDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJson"
                },
                "destinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJson": {
                    "$ref": "#/types/airbyte:index/getDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJson:getDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJson"
                }
            },
            "type": "object",
            "required": [
                "destinationS3GlueOutputFormatJsonLinesNewlineDelimitedJson",
                "destinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJson"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJson:getDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJson": {
            "properties": {
                "compression": {
                    "$ref": "#/types/airbyte:index/getDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompression:getDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompression"
                },
                "flattening": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compression",
                "flattening",
                "formatType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompression:getDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompression": {
            "properties": {
                "destinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip": {
                    "$ref": "#/types/airbyte:index/getDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip:getDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip"
                },
                "destinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression": {
                    "$ref": "#/types/airbyte:index/getDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression:getDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression"
                }
            },
            "type": "object",
            "required": [
                "destinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip",
                "destinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip:getDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression:getDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJson:getDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJson": {
            "properties": {
                "compression": {
                    "$ref": "#/types/airbyte:index/getDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression:getDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression"
                },
                "flattening": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compression",
                "flattening",
                "formatType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression:getDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression": {
            "properties": {
                "destinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip": {
                    "$ref": "#/types/airbyte:index/getDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip:getDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip"
                },
                "destinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression": {
                    "$ref": "#/types/airbyte:index/getDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression:getDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression"
                }
            },
            "type": "object",
            "required": [
                "destinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip",
                "destinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip:getDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression:getDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression": {
            "properties": {
                "compressionType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compressionType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationSftpJsonConfiguration:getDestinationSftpJsonConfiguration": {
            "properties": {
                "destinationPath": {
                    "type": "string",
                    "description": "Path to the directory where json files will be written.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"sftp-json\"]\n"
                },
                "host": {
                    "type": "string",
                    "description": "Hostname of the SFTP server.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password associated with the username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the SFTP server.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use to access the SFTP server.\n"
                }
            },
            "type": "object",
            "required": [
                "destinationPath",
                "destinationType",
                "host",
                "password",
                "port",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationSnowflakeConfiguration:getDestinationSnowflakeConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getDestinationSnowflakeConfigurationCredentials:getDestinationSnowflakeConfigurationCredentials"
                },
                "database": {
                    "type": "string",
                    "description": "Enter the name of the \\n\\ndatabase\\n\\n you want to sync data into\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"snowflake\"]\n"
                },
                "host": {
                    "type": "string",
                    "description": "Enter your Snowflake account's \\n\\nlocator\\n\\n (in the format \\n\\n.\\n\\n.\\n\\n.snowflakecomputing.com)\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Enter the additional properties to pass to the JDBC URL string when connecting to the database (formatted as key=value pairs separated by the symbol \u0026). Example: key1=value1\u0026key2=value2\u0026key3=value3\n"
                },
                "rawDataSchema": {
                    "type": "string",
                    "description": "(Beta) The schema to write raw tables into\n"
                },
                "role": {
                    "type": "string",
                    "description": "Enter the \\n\\nrole\\n\\n that you want to use to access Snowflake\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Enter the name of the default \\n\\nschema\\n\\n\n"
                },
                "use1s1tFormat": {
                    "type": "boolean",
                    "description": "(Beta) Use \\n\\nDestinations V2\\n\\n. Contact Airbyte Support to participate in the beta program.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Enter the name of the user you want to use to access the database\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "Enter the name of the \\n\\nwarehouse\\n\\n that you want to sync data into\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "database",
                "destinationType",
                "host",
                "jdbcUrlParams",
                "rawDataSchema",
                "role",
                "schema",
                "use1s1tFormat",
                "username",
                "warehouse"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationSnowflakeConfigurationCredentials:getDestinationSnowflakeConfigurationCredentials": {
            "properties": {
                "destinationSnowflakeAuthorizationMethodKeyPairAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthentication:getDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthentication"
                },
                "destinationSnowflakeAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/getDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20:getDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20"
                },
                "destinationSnowflakeAuthorizationMethodUsernameAndPassword": {
                    "$ref": "#/types/airbyte:index/getDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPassword:getDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPassword"
                },
                "destinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication:getDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication"
                },
                "destinationSnowflakeUpdateAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/getDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20:getDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20"
                },
                "destinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword": {
                    "$ref": "#/types/airbyte:index/getDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword:getDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword"
                }
            },
            "type": "object",
            "required": [
                "destinationSnowflakeAuthorizationMethodKeyPairAuthentication",
                "destinationSnowflakeAuthorizationMethodOAuth20",
                "destinationSnowflakeAuthorizationMethodUsernameAndPassword",
                "destinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication",
                "destinationSnowflakeUpdateAuthorizationMethodOAuth20",
                "destinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthentication:getDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthentication": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "privateKey": {
                    "type": "string"
                },
                "privateKeyPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "privateKey",
                "privateKeyPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20:getDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPassword:getDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPassword": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "password"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication:getDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "privateKey": {
                    "type": "string"
                },
                "privateKeyPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "privateKey",
                "privateKeyPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20:getDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword:getDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "password"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationTimeplusConfiguration:getDestinationTimeplusConfiguration": {
            "properties": {
                "apikey": {
                    "type": "string",
                    "description": "Personal API key\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"timeplus\"]\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "Timeplus workspace endpoint\n"
                }
            },
            "type": "object",
            "required": [
                "apikey",
                "destinationType",
                "endpoint"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationTypesenseConfiguration:getDestinationTypesenseConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Typesense API Key\n"
                },
                "batchSize": {
                    "type": "string",
                    "description": "How many documents should be imported together. Default 1000\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"typesense\"]\n"
                },
                "host": {
                    "type": "string",
                    "description": "Hostname of the Typesense instance without protocol.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Port of the Typesense instance. Ex: 8108, 80, 443. Default is 443\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol of the Typesense instance. Ex: http or https. Default is https\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "batchSize",
                "destinationType",
                "host",
                "port",
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationVerticaConfiguration:getDestinationVerticaConfiguration": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"vertica\"]\n"
                },
                "host": {
                    "type": "string",
                    "description": "Hostname of the database.\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '\u0026'. (example: key1=value1\u0026key2=value2\u0026key3=value3).\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password associated with the username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Schema for vertica destination\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/getDestinationVerticaConfigurationTunnelMethod:getDestinationVerticaConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "destinationType",
                "host",
                "jdbcUrlParams",
                "password",
                "port",
                "schema",
                "tunnelMethod",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationVerticaConfigurationTunnelMethod:getDestinationVerticaConfigurationTunnelMethod": {
            "properties": {
                "destinationVerticaSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getDestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodNoTunnel:getDestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodNoTunnel"
                },
                "destinationVerticaSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodPasswordAuthentication:getDestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodPasswordAuthentication"
                },
                "destinationVerticaSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodSshKeyAuthentication:getDestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodSshKeyAuthentication"
                },
                "destinationVerticaUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getDestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodNoTunnel:getDestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodNoTunnel"
                },
                "destinationVerticaUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodPasswordAuthentication:getDestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodPasswordAuthentication"
                },
                "destinationVerticaUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getDestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodSshKeyAuthentication:getDestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object",
            "required": [
                "destinationVerticaSshTunnelMethodNoTunnel",
                "destinationVerticaSshTunnelMethodPasswordAuthentication",
                "destinationVerticaSshTunnelMethodSshKeyAuthentication",
                "destinationVerticaUpdateSshTunnelMethodNoTunnel",
                "destinationVerticaUpdateSshTunnelMethodPasswordAuthentication",
                "destinationVerticaUpdateSshTunnelMethodSshKeyAuthentication"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodNoTunnel:getDestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodPasswordAuthentication:getDestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodSshKeyAuthentication:getDestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodNoTunnel:getDestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodPasswordAuthentication:getDestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodSshKeyAuthentication:getDestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getDestinationXataConfiguration:getDestinationXataConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key to connect.\n"
                },
                "dbUrl": {
                    "type": "string",
                    "description": "URL pointing to your workspace.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "must be one of [\"xata\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "dbUrl",
                "destinationType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAhaConfiguration:getSourceAhaConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"aha\"]\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAircallConfiguration:getSourceAircallConfiguration": {
            "properties": {
                "apiId": {
                    "type": "string",
                    "description": "App ID found at settings https://dashboard.aircall.io/integrations/api-keys\n"
                },
                "apiToken": {
                    "type": "string",
                    "description": "App token found at settings (Ref- https://dashboard.aircall.io/integrations/api-keys)\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"aircall\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Date time filter for incremental filter, Specify which date to extract from.\n"
                }
            },
            "type": "object",
            "required": [
                "apiId",
                "apiToken",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAirtableConfiguration:getSourceAirtableConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceAirtableConfigurationCredentials:getSourceAirtableConfigurationCredentials"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"airtable\"]\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAirtableConfigurationCredentials:getSourceAirtableConfigurationCredentials": {
            "properties": {
                "sourceAirtableAuthenticationOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceAirtableConfigurationCredentialsSourceAirtableAuthenticationOAuth20:getSourceAirtableConfigurationCredentialsSourceAirtableAuthenticationOAuth20"
                },
                "sourceAirtableAuthenticationPersonalAccessToken": {
                    "$ref": "#/types/airbyte:index/getSourceAirtableConfigurationCredentialsSourceAirtableAuthenticationPersonalAccessToken:getSourceAirtableConfigurationCredentialsSourceAirtableAuthenticationPersonalAccessToken"
                },
                "sourceAirtableUpdateAuthenticationOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationOAuth20:getSourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationOAuth20"
                },
                "sourceAirtableUpdateAuthenticationPersonalAccessToken": {
                    "$ref": "#/types/airbyte:index/getSourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationPersonalAccessToken:getSourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationPersonalAccessToken"
                }
            },
            "type": "object",
            "required": [
                "sourceAirtableAuthenticationOAuth20",
                "sourceAirtableAuthenticationPersonalAccessToken",
                "sourceAirtableUpdateAuthenticationOAuth20",
                "sourceAirtableUpdateAuthenticationPersonalAccessToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAirtableConfigurationCredentialsSourceAirtableAuthenticationOAuth20:getSourceAirtableConfigurationCredentialsSourceAirtableAuthenticationOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authMethod",
                "clientId",
                "clientSecret",
                "refreshToken",
                "tokenExpiryDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAirtableConfigurationCredentialsSourceAirtableAuthenticationPersonalAccessToken:getSourceAirtableConfigurationCredentialsSourceAirtableAuthenticationPersonalAccessToken": {
            "properties": {
                "apiKey": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "authMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationOAuth20:getSourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authMethod",
                "clientId",
                "clientSecret",
                "refreshToken",
                "tokenExpiryDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationPersonalAccessToken:getSourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationPersonalAccessToken": {
            "properties": {
                "apiKey": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "authMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAlloydbConfiguration:getSourceAlloydbConfiguration": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database.\n"
                },
                "host": {
                    "type": "string",
                    "description": "Hostname of the database.\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '\u0026'. (Eg. key1=value1\u0026key2=value2\u0026key3=value3). For more information read about \\n\\nJDBC URL parameters\\n\\n.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password associated with the username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the database.\n"
                },
                "replicationMethod": {
                    "$ref": "#/types/airbyte:index/getSourceAlloydbConfigurationReplicationMethod:getSourceAlloydbConfigurationReplicationMethod",
                    "description": "Replication method for extracting data from the database.\n"
                },
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of schemas (case sensitive) to sync from. Defaults to public.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"alloydb\"]\n"
                },
                "sslMode": {
                    "$ref": "#/types/airbyte:index/getSourceAlloydbConfigurationSslMode:getSourceAlloydbConfigurationSslMode",
                    "description": "SSL connection modes.\nRead more \\n\\n in the docs\\n\\n.\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/getSourceAlloydbConfigurationTunnelMethod:getSourceAlloydbConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "host",
                "jdbcUrlParams",
                "password",
                "port",
                "replicationMethod",
                "schemas",
                "sourceType",
                "sslMode",
                "tunnelMethod",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAlloydbConfigurationReplicationMethod:getSourceAlloydbConfigurationReplicationMethod": {
            "properties": {
                "sourceAlloydbReplicationMethodLogicalReplicationCdc": {
                    "$ref": "#/types/airbyte:index/getSourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodLogicalReplicationCdc:getSourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodLogicalReplicationCdc"
                },
                "sourceAlloydbReplicationMethodStandard": {
                    "$ref": "#/types/airbyte:index/getSourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandard:getSourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandard"
                },
                "sourceAlloydbReplicationMethodStandardXmin": {
                    "$ref": "#/types/airbyte:index/getSourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardXmin:getSourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardXmin"
                },
                "sourceAlloydbUpdateReplicationMethodLogicalReplicationCdc": {
                    "$ref": "#/types/airbyte:index/getSourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodLogicalReplicationCdc:getSourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodLogicalReplicationCdc"
                },
                "sourceAlloydbUpdateReplicationMethodStandard": {
                    "$ref": "#/types/airbyte:index/getSourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandard:getSourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandard"
                },
                "sourceAlloydbUpdateReplicationMethodStandardXmin": {
                    "$ref": "#/types/airbyte:index/getSourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardXmin:getSourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardXmin"
                }
            },
            "type": "object",
            "required": [
                "sourceAlloydbReplicationMethodLogicalReplicationCdc",
                "sourceAlloydbReplicationMethodStandard",
                "sourceAlloydbReplicationMethodStandardXmin",
                "sourceAlloydbUpdateReplicationMethodLogicalReplicationCdc",
                "sourceAlloydbUpdateReplicationMethodStandard",
                "sourceAlloydbUpdateReplicationMethodStandardXmin"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodLogicalReplicationCdc:getSourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodLogicalReplicationCdc": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "initialWaitingSeconds": {
                    "type": "integer"
                },
                "lsnCommitBehaviour": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "plugin": {
                    "type": "string"
                },
                "publication": {
                    "type": "string"
                },
                "queueSize": {
                    "type": "integer"
                },
                "replicationSlot": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "initialWaitingSeconds",
                "lsnCommitBehaviour",
                "method",
                "plugin",
                "publication",
                "queueSize",
                "replicationSlot"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandard:getSourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandard": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardXmin:getSourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardXmin": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodLogicalReplicationCdc:getSourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodLogicalReplicationCdc": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "initialWaitingSeconds": {
                    "type": "integer"
                },
                "lsnCommitBehaviour": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "plugin": {
                    "type": "string"
                },
                "publication": {
                    "type": "string"
                },
                "queueSize": {
                    "type": "integer"
                },
                "replicationSlot": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "initialWaitingSeconds",
                "lsnCommitBehaviour",
                "method",
                "plugin",
                "publication",
                "queueSize",
                "replicationSlot"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandard:getSourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandard": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardXmin:getSourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardXmin": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAlloydbConfigurationSslMode:getSourceAlloydbConfigurationSslMode": {
            "properties": {
                "sourceAlloydbSslModesAllow": {
                    "$ref": "#/types/airbyte:index/getSourceAlloydbConfigurationSslModeSourceAlloydbSslModesAllow:getSourceAlloydbConfigurationSslModeSourceAlloydbSslModesAllow"
                },
                "sourceAlloydbSslModesDisable": {
                    "$ref": "#/types/airbyte:index/getSourceAlloydbConfigurationSslModeSourceAlloydbSslModesDisable:getSourceAlloydbConfigurationSslModeSourceAlloydbSslModesDisable"
                },
                "sourceAlloydbSslModesPrefer": {
                    "$ref": "#/types/airbyte:index/getSourceAlloydbConfigurationSslModeSourceAlloydbSslModesPrefer:getSourceAlloydbConfigurationSslModeSourceAlloydbSslModesPrefer"
                },
                "sourceAlloydbSslModesRequire": {
                    "$ref": "#/types/airbyte:index/getSourceAlloydbConfigurationSslModeSourceAlloydbSslModesRequire:getSourceAlloydbConfigurationSslModeSourceAlloydbSslModesRequire"
                },
                "sourceAlloydbSslModesVerifyCa": {
                    "$ref": "#/types/airbyte:index/getSourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyCa:getSourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyCa"
                },
                "sourceAlloydbSslModesVerifyFull": {
                    "$ref": "#/types/airbyte:index/getSourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyFull:getSourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyFull"
                },
                "sourceAlloydbUpdateSslModesAllow": {
                    "$ref": "#/types/airbyte:index/getSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesAllow:getSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesAllow"
                },
                "sourceAlloydbUpdateSslModesDisable": {
                    "$ref": "#/types/airbyte:index/getSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesDisable:getSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesDisable"
                },
                "sourceAlloydbUpdateSslModesPrefer": {
                    "$ref": "#/types/airbyte:index/getSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesPrefer:getSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesPrefer"
                },
                "sourceAlloydbUpdateSslModesRequire": {
                    "$ref": "#/types/airbyte:index/getSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesRequire:getSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesRequire"
                },
                "sourceAlloydbUpdateSslModesVerifyCa": {
                    "$ref": "#/types/airbyte:index/getSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyCa:getSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyCa"
                },
                "sourceAlloydbUpdateSslModesVerifyFull": {
                    "$ref": "#/types/airbyte:index/getSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyFull:getSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyFull"
                }
            },
            "type": "object",
            "required": [
                "sourceAlloydbSslModesAllow",
                "sourceAlloydbSslModesDisable",
                "sourceAlloydbSslModesPrefer",
                "sourceAlloydbSslModesRequire",
                "sourceAlloydbSslModesVerifyCa",
                "sourceAlloydbSslModesVerifyFull",
                "sourceAlloydbUpdateSslModesAllow",
                "sourceAlloydbUpdateSslModesDisable",
                "sourceAlloydbUpdateSslModesPrefer",
                "sourceAlloydbUpdateSslModesRequire",
                "sourceAlloydbUpdateSslModesVerifyCa",
                "sourceAlloydbUpdateSslModesVerifyFull"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAlloydbConfigurationSslModeSourceAlloydbSslModesAllow:getSourceAlloydbConfigurationSslModeSourceAlloydbSslModesAllow": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAlloydbConfigurationSslModeSourceAlloydbSslModesDisable:getSourceAlloydbConfigurationSslModeSourceAlloydbSslModesDisable": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAlloydbConfigurationSslModeSourceAlloydbSslModesPrefer:getSourceAlloydbConfigurationSslModeSourceAlloydbSslModesPrefer": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAlloydbConfigurationSslModeSourceAlloydbSslModesRequire:getSourceAlloydbConfigurationSslModeSourceAlloydbSslModesRequire": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyCa:getSourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyCa": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "clientCertificate",
                "clientKey",
                "clientKeyPassword",
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyFull:getSourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyFull": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "clientCertificate",
                "clientKey",
                "clientKeyPassword",
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesAllow:getSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesAllow": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesDisable:getSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesDisable": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesPrefer:getSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesPrefer": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesRequire:getSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesRequire": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyCa:getSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyCa": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "clientCertificate",
                "clientKey",
                "clientKeyPassword",
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyFull:getSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyFull": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "clientCertificate",
                "clientKey",
                "clientKeyPassword",
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAlloydbConfigurationTunnelMethod:getSourceAlloydbConfigurationTunnelMethod": {
            "properties": {
                "sourceAlloydbSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getSourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodNoTunnel:getSourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodNoTunnel"
                },
                "sourceAlloydbSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodPasswordAuthentication:getSourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodPasswordAuthentication"
                },
                "sourceAlloydbSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodSshKeyAuthentication:getSourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodSshKeyAuthentication"
                },
                "sourceAlloydbUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getSourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodNoTunnel:getSourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodNoTunnel"
                },
                "sourceAlloydbUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodPasswordAuthentication:getSourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodPasswordAuthentication"
                },
                "sourceAlloydbUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodSshKeyAuthentication:getSourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object",
            "required": [
                "sourceAlloydbSshTunnelMethodNoTunnel",
                "sourceAlloydbSshTunnelMethodPasswordAuthentication",
                "sourceAlloydbSshTunnelMethodSshKeyAuthentication",
                "sourceAlloydbUpdateSshTunnelMethodNoTunnel",
                "sourceAlloydbUpdateSshTunnelMethodPasswordAuthentication",
                "sourceAlloydbUpdateSshTunnelMethodSshKeyAuthentication"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodNoTunnel:getSourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodPasswordAuthentication:getSourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodSshKeyAuthentication:getSourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodNoTunnel:getSourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodPasswordAuthentication:getSourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodSshKeyAuthentication:getSourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAmazonAdsConfiguration:getSourceAmazonAdsConfiguration": {
            "properties": {
                "authType": {
                    "type": "string",
                    "description": "must be one of [\"oauth2.0\"]\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The client ID of your Amazon Ads developer application. See the \\n\\ndocs\\n\\n for more information.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The client secret of your Amazon Ads developer application. See the \\n\\ndocs\\n\\n for more information.\n"
                },
                "lookBackWindow": {
                    "type": "integer",
                    "description": "The amount of days to go back in time to get the updated data from Amazon Ads\n"
                },
                "profiles": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Profile IDs you want to fetch data for. See \\n\\ndocs\\n\\n for more details.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "Amazon Ads refresh token. See the \\n\\ndocs\\n\\n for more information on how to obtain this token.\n"
                },
                "region": {
                    "type": "string",
                    "description": "must be one of [\"NA\", \"EU\", \"FE\"]\nRegion to pull data from (EU/NA/FE). See \\n\\ndocs\\n\\n for more details.\n"
                },
                "reportRecordTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Optional configuration which accepts an array of string of record types. Leave blank for default behaviour to pull all report types. Use this config option only if you want to pull specific report type(s). See \\n\\ndocs\\n\\n for more details\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"amazon-ads\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The Start date for collecting reports, should not be more than 60 days in the past. In YYYY-MM-DD format\n"
                },
                "stateFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Reflects the state of the Display, Product, and Brand Campaign streams as enabled, paused, or archived. If you do not populate this field, it will be ignored completely.\n"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId",
                "clientSecret",
                "lookBackWindow",
                "profiles",
                "refreshToken",
                "region",
                "reportRecordTypes",
                "sourceType",
                "startDate",
                "stateFilters"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAmazonSellerPartnerConfiguration:getSourceAmazonSellerPartnerConfiguration": {
            "properties": {
                "advancedStreamOptions": {
                    "type": "string",
                    "description": "Additional information to configure report options. This varies by report type, not every report implement this kind of feature. Must be a valid json string.\n"
                },
                "authType": {
                    "type": "string",
                    "description": "must be one of [\"oauth2.0\"]\n"
                },
                "awsAccessKey": {
                    "type": "string",
                    "description": "Specifies the AWS access key used as part of the credentials to authenticate the user.\n"
                },
                "awsEnvironment": {
                    "type": "string",
                    "description": "must be one of [\"PRODUCTION\", \"SANDBOX\"]\nSelect the AWS Environment.\n"
                },
                "awsSecretKey": {
                    "type": "string",
                    "description": "Specifies the AWS secret key used as part of the credentials to authenticate the user.\n"
                },
                "lwaAppId": {
                    "type": "string",
                    "description": "Your Login with Amazon Client ID.\n"
                },
                "lwaClientSecret": {
                    "type": "string",
                    "description": "Your Login with Amazon Client Secret.\n"
                },
                "maxWaitSeconds": {
                    "type": "integer",
                    "description": "Sometimes report can take up to 30 minutes to generate. This will set the limit for how long to wait for a successful report.\n"
                },
                "periodInDays": {
                    "type": "integer",
                    "description": "Will be used for stream slicing for initial full_refresh sync when no updated state is present for reports that support sliced incremental sync.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "The Refresh Token obtained via OAuth flow authorization.\n"
                },
                "region": {
                    "type": "string",
                    "description": "must be one of [\"AE\", \"AU\", \"BE\", \"BR\", \"CA\", \"DE\", \"EG\", \"ES\", \"FR\", \"GB\", \"IN\", \"IT\", \"JP\", \"MX\", \"NL\", \"PL\", \"SA\", \"SE\", \"SG\", \"TR\", \"UK\", \"US\"]\nSelect the AWS Region.\n"
                },
                "replicationEndDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data after this date will not be replicated.\n"
                },
                "replicationStartDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                },
                "reportOptions": {
                    "type": "string",
                    "description": "Additional information passed to reports. This varies by report type. Must be a valid json string.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "Specifies the Amazon Resource Name (ARN) of an IAM role that you want to use to perform operations requested using this profile. (Needs permission to 'Assume Role' STS).\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"amazon-seller-partner\"]\n"
                }
            },
            "type": "object",
            "required": [
                "advancedStreamOptions",
                "authType",
                "awsAccessKey",
                "awsEnvironment",
                "awsSecretKey",
                "lwaAppId",
                "lwaClientSecret",
                "maxWaitSeconds",
                "periodInDays",
                "refreshToken",
                "region",
                "replicationEndDate",
                "replicationStartDate",
                "reportOptions",
                "roleArn",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAmazonSqsConfiguration:getSourceAmazonSqsConfiguration": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The Access Key ID of the AWS IAM Role to use for pulling messages\n"
                },
                "attributesToReturn": {
                    "type": "string",
                    "description": "Comma separated list of Mesage Attribute names to return\n"
                },
                "deleteMessages": {
                    "type": "boolean",
                    "description": "If Enabled, messages will be deleted from the SQS Queue after being read. If Disabled, messages are left in the queue and can be read more than once. WARNING: Enabling this option can result in data loss in cases of failure, use with caution, see documentation for more detail.\n"
                },
                "maxBatchSize": {
                    "type": "integer",
                    "description": "Max amount of messages to get in one batch (10 max)\n"
                },
                "maxWaitTime": {
                    "type": "integer",
                    "description": "Max amount of time in seconds to wait for messages in a single poll (20 max)\n"
                },
                "queueUrl": {
                    "type": "string",
                    "description": "URL of the SQS Queue\n"
                },
                "region": {
                    "type": "string",
                    "description": "must be one of [\"us-east-1\", \"us-east-2\", \"us-west-1\", \"us-west-2\", \"af-south-1\", \"ap-east-1\", \"ap-south-1\", \"ap-northeast-1\", \"ap-northeast-2\", \"ap-northeast-3\", \"ap-southeast-1\", \"ap-southeast-2\", \"ca-central-1\", \"cn-north-1\", \"cn-northwest-1\", \"eu-central-1\", \"eu-north-1\", \"eu-south-1\", \"eu-west-1\", \"eu-west-2\", \"eu-west-3\", \"sa-east-1\", \"me-south-1\", \"us-gov-east-1\", \"us-gov-west-1\"]\nAWS Region of the SQS Queue\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The Secret Key of the AWS IAM Role to use for pulling messages\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"amazon-sqs\"]\n"
                },
                "visibilityTimeout": {
                    "type": "integer",
                    "description": "Modify the Visibility Timeout of the individual message from the Queue's default (seconds).\n"
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "attributesToReturn",
                "deleteMessages",
                "maxBatchSize",
                "maxWaitTime",
                "queueUrl",
                "region",
                "secretKey",
                "sourceType",
                "visibilityTimeout"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAmplitudeConfiguration:getSourceAmplitudeConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Amplitude API Key. See the \\n\\nsetup guide\\n\\n for more information on how to obtain this key.\n"
                },
                "dataRegion": {
                    "type": "string",
                    "description": "must be one of [\"Standard Server\", \"EU Residency Server\"]\nAmplitude data region server\n"
                },
                "requestTimeRange": {
                    "type": "integer",
                    "description": "According to \\n\\nConsiderations\\n\\n too big time range in request can cause a timeout error. In this case, set shorter time interval in hours.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "Amplitude Secret Key. See the \\n\\nsetup guide\\n\\n for more information on how to obtain this key.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"amplitude\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2021-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "dataRegion",
                "requestTimeRange",
                "secretKey",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceApifyDatasetConfiguration:getSourceApifyDatasetConfiguration": {
            "properties": {
                "clean": {
                    "type": "boolean",
                    "description": "If set to true, only clean items will be downloaded from the dataset. See description of what clean means in \\n\\nApify API docs\\n\\n. If not sure, set clean to false.\n"
                },
                "datasetId": {
                    "type": "string",
                    "description": "ID of the dataset you would like to load to Airbyte.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"apify-dataset\"]\n"
                }
            },
            "type": "object",
            "required": [
                "clean",
                "datasetId",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAppfollowConfiguration:getSourceAppfollowConfiguration": {
            "properties": {
                "apiSecret": {
                    "type": "string",
                    "description": "API Key provided by Appfollow\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"appfollow\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiSecret",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAsanaConfiguration:getSourceAsanaConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceAsanaConfigurationCredentials:getSourceAsanaConfigurationCredentials",
                    "description": "Choose how to authenticate to Github\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"asana\"]\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAsanaConfigurationCredentials:getSourceAsanaConfigurationCredentials": {
            "properties": {
                "sourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth": {
                    "$ref": "#/types/airbyte:index/getSourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth:getSourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth"
                },
                "sourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken": {
                    "$ref": "#/types/airbyte:index/getSourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken:getSourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken"
                },
                "sourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauth": {
                    "$ref": "#/types/airbyte:index/getSourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauth:getSourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauth"
                },
                "sourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken": {
                    "$ref": "#/types/airbyte:index/getSourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken:getSourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken"
                }
            },
            "type": "object",
            "required": [
                "sourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth",
                "sourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken",
                "sourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauth",
                "sourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth:getSourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth": {
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "optionTitle": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "optionTitle",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken:getSourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken": {
            "properties": {
                "optionTitle": {
                    "type": "string"
                },
                "personalAccessToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "optionTitle",
                "personalAccessToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauth:getSourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauth": {
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "optionTitle": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "optionTitle",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken:getSourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken": {
            "properties": {
                "optionTitle": {
                    "type": "string"
                },
                "personalAccessToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "optionTitle",
                "personalAccessToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAuth0Configuration:getSourceAuth0Configuration": {
            "properties": {
                "baseUrl": {
                    "type": "string",
                    "description": "The Authentication API is served over HTTPS. All URLs referenced in the documentation have the following base `https://YOUR_DOMAIN`\n"
                },
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceAuth0ConfigurationCredentials:getSourceAuth0ConfigurationCredentials"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"auth0\"]\n"
                }
            },
            "type": "object",
            "required": [
                "baseUrl",
                "credentials",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAuth0ConfigurationCredentials:getSourceAuth0ConfigurationCredentials": {
            "properties": {
                "sourceAuth0AuthenticationMethodOAuth2AccessToken": {
                    "$ref": "#/types/airbyte:index/getSourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2AccessToken:getSourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2AccessToken"
                },
                "sourceAuth0AuthenticationMethodOAuth2ConfidentialApplication": {
                    "$ref": "#/types/airbyte:index/getSourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2ConfidentialApplication:getSourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2ConfidentialApplication"
                },
                "sourceAuth0UpdateAuthenticationMethodOAuth2AccessToken": {
                    "$ref": "#/types/airbyte:index/getSourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2AccessToken:getSourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2AccessToken"
                },
                "sourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication": {
                    "$ref": "#/types/airbyte:index/getSourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication:getSourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication"
                }
            },
            "type": "object",
            "required": [
                "sourceAuth0AuthenticationMethodOAuth2AccessToken",
                "sourceAuth0AuthenticationMethodOAuth2ConfidentialApplication",
                "sourceAuth0UpdateAuthenticationMethodOAuth2AccessToken",
                "sourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2AccessToken:getSourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2AccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2ConfidentialApplication:getSourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2ConfidentialApplication": {
            "properties": {
                "audience": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "audience",
                "authType",
                "clientId",
                "clientSecret"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2AccessToken:getSourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2AccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication:getSourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication": {
            "properties": {
                "audience": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "audience",
                "authType",
                "clientId",
                "clientSecret"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAwsCloudtrailConfiguration:getSourceAwsCloudtrailConfiguration": {
            "properties": {
                "awsKeyId": {
                    "type": "string",
                    "description": "AWS CloudTrail Access Key ID. See the \\n\\ndocs\\n\\n for more information on how to obtain this key.\n"
                },
                "awsRegionName": {
                    "type": "string",
                    "description": "The default AWS Region to use, for example, us-west-1 or us-west-2. When specifying a Region inline during client initialization, this property is named region_name.\n"
                },
                "awsSecretKey": {
                    "type": "string",
                    "description": "AWS CloudTrail Access Key ID. See the \\n\\ndocs\\n\\n for more information on how to obtain this key.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"aws-cloudtrail\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date you would like to replicate data. Data in AWS CloudTrail is available for last 90 days only. Format: YYYY-MM-DD.\n"
                }
            },
            "type": "object",
            "required": [
                "awsKeyId",
                "awsRegionName",
                "awsSecretKey",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAzureBlobStorageConfiguration:getSourceAzureBlobStorageConfiguration": {
            "properties": {
                "azureBlobStorageAccountKey": {
                    "type": "string",
                    "description": "The Azure blob storage account key.\n"
                },
                "azureBlobStorageAccountName": {
                    "type": "string",
                    "description": "The account's name of the Azure Blob Storage.\n"
                },
                "azureBlobStorageBlobsPrefix": {
                    "type": "string",
                    "description": "The Azure blob storage prefix to be applied\n"
                },
                "azureBlobStorageContainerName": {
                    "type": "string",
                    "description": "The name of the Azure blob storage container.\n"
                },
                "azureBlobStorageEndpoint": {
                    "type": "string",
                    "description": "This is Azure Blob Storage endpoint domain name. Leave default value (or leave it empty if run container from command line) to use Microsoft native from example.\n"
                },
                "azureBlobStorageSchemaInferenceLimit": {
                    "type": "integer",
                    "description": "The Azure blob storage blobs to scan for inferring the schema, useful on large amounts of data with consistent structure\n"
                },
                "format": {
                    "$ref": "#/types/airbyte:index/getSourceAzureBlobStorageConfigurationFormat:getSourceAzureBlobStorageConfigurationFormat",
                    "description": "Input data format\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"azure-blob-storage\"]\n"
                }
            },
            "type": "object",
            "required": [
                "azureBlobStorageAccountKey",
                "azureBlobStorageAccountName",
                "azureBlobStorageBlobsPrefix",
                "azureBlobStorageContainerName",
                "azureBlobStorageEndpoint",
                "azureBlobStorageSchemaInferenceLimit",
                "format",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAzureBlobStorageConfigurationFormat:getSourceAzureBlobStorageConfigurationFormat": {
            "properties": {
                "sourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJson": {
                    "$ref": "#/types/airbyte:index/getSourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJson:getSourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJson"
                },
                "sourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJson": {
                    "$ref": "#/types/airbyte:index/getSourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJson:getSourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJson"
                }
            },
            "type": "object",
            "required": [
                "sourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJson",
                "sourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJson"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJson:getSourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJson": {
            "properties": {
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "formatType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJson:getSourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJson": {
            "properties": {
                "formatType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "formatType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceAzureTableConfiguration:getSourceAzureTableConfiguration": {
            "properties": {
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"azure-table\"]\n"
                },
                "storageAccessKey": {
                    "type": "string",
                    "description": "Azure Table Storage Access Key. See the \\n\\ndocs\\n\\n for more information on how to obtain this key.\n"
                },
                "storageAccountName": {
                    "type": "string",
                    "description": "The name of your storage account.\n"
                },
                "storageEndpointSuffix": {
                    "type": "string",
                    "description": "Azure Table Storage service account URL suffix. See the \\n\\ndocs\\n\\n for more information on how to obtain endpoint suffix\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType",
                "storageAccessKey",
                "storageAccountName",
                "storageEndpointSuffix"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceBambooHrConfiguration:getSourceBambooHrConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Api key of bamboo hr\n"
                },
                "customReportsFields": {
                    "type": "string",
                    "description": "Comma-separated list of fields to include in custom reports.\n"
                },
                "customReportsIncludeDefaultFields": {
                    "type": "boolean",
                    "description": "If true, the custom reports endpoint will include the default fields defined here: https://documentation.bamboohr.com/docs/list-of-field-names.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"bamboo-hr\"]\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Sub Domain of bamboo hr\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "customReportsFields",
                "customReportsIncludeDefaultFields",
                "sourceType",
                "subdomain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceBigcommerceConfiguration:getSourceBigcommerceConfiguration": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access Token for making authenticated requests.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"bigcommerce\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date you would like to replicate data. Format: YYYY-MM-DD.\n"
                },
                "storeHash": {
                    "type": "string",
                    "description": "The hash code of the store. For https://api.bigcommerce.com/stores/HASH*CODE/v3/, The store's hash code is 'HASH*CODE'.\n"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "sourceType",
                "startDate",
                "storeHash"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceBigqueryConfiguration:getSourceBigqueryConfiguration": {
            "properties": {
                "credentialsJson": {
                    "type": "string",
                    "description": "The contents of your Service Account Key JSON file. See the \\n\\ndocs\\n\\n for more information on how to obtain this key.\n"
                },
                "datasetId": {
                    "type": "string",
                    "description": "The dataset ID to search for tables and views. If you are only loading data from one dataset, setting this option could result in much faster schema discovery.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The GCP project ID for the project containing the target BigQuery dataset.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"bigquery\"]\n"
                }
            },
            "type": "object",
            "required": [
                "credentialsJson",
                "datasetId",
                "projectId",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceBingAdsConfiguration:getSourceBingAdsConfiguration": {
            "properties": {
                "authMethod": {
                    "type": "string",
                    "description": "must be one of [\"oauth2.0\"]\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The Client ID of your Microsoft Advertising developer application.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The Client Secret of your Microsoft Advertising developer application.\n"
                },
                "developerToken": {
                    "type": "string",
                    "description": "Developer token associated with user. See more info \\n\\n in the docs\\n\\n.\n"
                },
                "lookbackWindow": {
                    "type": "integer",
                    "description": "Also known as attribution or conversion window. How far into the past to look for records (in days). If your conversion window has an hours/minutes granularity, round it up to the number of days exceeding. Used only for performance report streams in incremental mode.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "Refresh Token to renew the expired Access Token.\n"
                },
                "reportsStartDate": {
                    "type": "string",
                    "description": "The start date from which to begin replicating report data. Any data generated before this date will not be replicated in reports. This is a UTC date in YYYY-MM-DD format.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"bing-ads\"]\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The Tenant ID of your Microsoft Advertising developer application. Set this to \"common\" unless you know you need a different value.\n"
                }
            },
            "type": "object",
            "required": [
                "authMethod",
                "clientId",
                "clientSecret",
                "developerToken",
                "lookbackWindow",
                "refreshToken",
                "reportsStartDate",
                "sourceType",
                "tenantId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceBraintreeConfiguration:getSourceBraintreeConfiguration": {
            "properties": {
                "environment": {
                    "type": "string",
                    "description": "must be one of [\"Development\", \"Sandbox\", \"Qa\", \"Production\"]\nEnvironment specifies where the data will come from.\n"
                },
                "merchantId": {
                    "type": "string",
                    "description": "The unique identifier for your entire gateway account. See the \\n\\ndocs\\n\\n for more information on how to obtain this ID.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "Braintree Private Key. See the \\n\\ndocs\\n\\n for more information on how to obtain this key.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "Braintree Public Key. See the \\n\\ndocs\\n\\n for more information on how to obtain this key.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"braintree\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "environment",
                "merchantId",
                "privateKey",
                "publicKey",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceBrazeConfiguration:getSourceBrazeConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Braze REST API key\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"braze\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Rows after this date will be synced\n"
                },
                "url": {
                    "type": "string",
                    "description": "Braze REST API endpoint\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType",
                "startDate",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceChargebeeConfiguration:getSourceChargebeeConfiguration": {
            "properties": {
                "productCatalog": {
                    "type": "string",
                    "description": "must be one of [\"1.0\", \"2.0\"]\nProduct Catalog version of your Chargebee site. Instructions on how to find your version you may find \\n\\nhere\\n\\n under `API Version` section.\n"
                },
                "site": {
                    "type": "string",
                    "description": "The site prefix for your Chargebee instance.\n"
                },
                "siteApiKey": {
                    "type": "string",
                    "description": "Chargebee API Key. See the \\n\\ndocs\\n\\n for more information on how to obtain this key.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"chargebee\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2021-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "productCatalog",
                "site",
                "siteApiKey",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceChartmogulConfiguration:getSourceChartmogulConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Your Chartmogul API key. See \\n\\n the docs \\n\\n for info on how to obtain this.\n"
                },
                "interval": {
                    "type": "string",
                    "description": "must be one of [\"day\", \"week\", \"month\", \"quarter\"]\nSome APIs such as \\n\\nMetrics\\n\\n require intervals to cluster data.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"chartmogul\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. When feasible, any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "interval",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceClickhouseConfiguration:getSourceClickhouseConfiguration": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The name of the database.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The host endpoint of the Clickhouse cluster.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password associated with this username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port of the database.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"clickhouse\"]\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/getSourceClickhouseConfigurationTunnelMethod:getSourceClickhouseConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username which is used to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "host",
                "password",
                "port",
                "sourceType",
                "tunnelMethod",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceClickhouseConfigurationTunnelMethod:getSourceClickhouseConfigurationTunnelMethod": {
            "properties": {
                "sourceClickhouseSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getSourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodNoTunnel:getSourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodNoTunnel"
                },
                "sourceClickhouseSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodPasswordAuthentication:getSourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodPasswordAuthentication"
                },
                "sourceClickhouseSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodSshKeyAuthentication:getSourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodSshKeyAuthentication"
                },
                "sourceClickhouseUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getSourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodNoTunnel:getSourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodNoTunnel"
                },
                "sourceClickhouseUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodPasswordAuthentication:getSourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodPasswordAuthentication"
                },
                "sourceClickhouseUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodSshKeyAuthentication:getSourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object",
            "required": [
                "sourceClickhouseSshTunnelMethodNoTunnel",
                "sourceClickhouseSshTunnelMethodPasswordAuthentication",
                "sourceClickhouseSshTunnelMethodSshKeyAuthentication",
                "sourceClickhouseUpdateSshTunnelMethodNoTunnel",
                "sourceClickhouseUpdateSshTunnelMethodPasswordAuthentication",
                "sourceClickhouseUpdateSshTunnelMethodSshKeyAuthentication"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodNoTunnel:getSourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodPasswordAuthentication:getSourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodSshKeyAuthentication:getSourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodNoTunnel:getSourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodPasswordAuthentication:getSourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodSshKeyAuthentication:getSourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceClickupApiConfiguration:getSourceClickupApiConfiguration": {
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "Every ClickUp API call required authentication. This field is your personal API token. See \\n\\nhere\\n\\n.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of your folder in your space. Retrieve it from the `/space/{space_id}/folder` of the ClickUp API. See \\n\\nhere\\n\\n.\n"
                },
                "includeClosedTasks": {
                    "type": "boolean",
                    "description": "Include or exclude closed tasks. By default, they are excluded. See \\n\\nhere\\n\\n.\n"
                },
                "listId": {
                    "type": "string",
                    "description": "The ID of your list in your folder. Retrieve it from the `/folder/{folder_id}/list` of the ClickUp API. See \\n\\nhere\\n\\n.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"clickup-api\"]\n"
                },
                "spaceId": {
                    "type": "string",
                    "description": "The ID of your space in your workspace. Retrieve it from the `/team/{team_id}/space` of the ClickUp API. See \\n\\nhere\\n\\n.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of your team in ClickUp. Retrieve it from the `/team` of the ClickUp API. See \\n\\nhere\\n\\n.\n"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "folderId",
                "includeClosedTasks",
                "listId",
                "sourceType",
                "spaceId",
                "teamId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceClockifyConfiguration:getSourceClockifyConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "You can get your api access_key \\n\\nhere\\n\\n This API is Case Sensitive.\n"
                },
                "apiUrl": {
                    "type": "string",
                    "description": "The URL for the Clockify API. This should only need to be modified if connecting to an enterprise version of Clockify.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"clockify\"]\n"
                },
                "workspaceId": {
                    "type": "string",
                    "description": "WorkSpace Id\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "apiUrl",
                "sourceType",
                "workspaceId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceCloseComConfiguration:getSourceCloseComConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Close.com API key (usually starts with 'api_'; find yours \\n\\nhere\\n\\n).\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"close-com\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The start date to sync data; all data after this date will be replicated. Leave blank to retrieve all the data available in the account. Format: YYYY-MM-DD.\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceCodaConfiguration:getSourceCodaConfiguration": {
            "properties": {
                "authToken": {
                    "type": "string",
                    "description": "Bearer token\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"coda\"]\n"
                }
            },
            "type": "object",
            "required": [
                "authToken",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceCoinApiConfiguration:getSourceCoinApiConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "The end date in ISO 8601 format. If not supplied, data will be returned\nfrom the start date to the current time, or when the count of result\nelements reaches its limit.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "must be one of [\"sandbox\", \"production\"]\nThe environment to use. Either sandbox or production.\n"
                },
                "limit": {
                    "type": "integer",
                    "description": "The maximum number of elements to return. If not supplied, the default\nis 100. For numbers larger than 100, each 100 items is counted as one\nrequest for pricing purposes. Maximum value is 100000.\n"
                },
                "period": {
                    "type": "string",
                    "description": "The period to use. See the documentation for a list. https://docs.coinapi.io/#list-all-periods-get\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"coin-api\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The start date in ISO 8601 format.\n"
                },
                "symbolId": {
                    "type": "string",
                    "description": "The symbol ID to use. See the documentation for a list.\nhttps://docs.coinapi.io/#list-all-symbols-get\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "endDate",
                "environment",
                "limit",
                "period",
                "sourceType",
                "startDate",
                "symbolId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceCoinmarketcapConfiguration:getSourceCoinmarketcapConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Your API Key. See \\n\\nhere\\n\\n. The token is case sensitive.\n"
                },
                "dataType": {
                    "type": "string",
                    "description": "must be one of [\"latest\", \"historical\"]\n/latest: Latest market ticker quotes and averages for cryptocurrencies and exchanges. /historical: Intervals of historic market data like OHLCV data or data for use in charting libraries. See \\n\\nhere\\n\\n.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"coinmarketcap\"]\n"
                },
                "symbols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Cryptocurrency symbols. (only used for quotes stream)\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "dataType",
                "sourceType",
                "symbols"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceConfigcatConfiguration:getSourceConfigcatConfiguration": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "Basic auth password. See \\n\\nhere\\n\\n.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"configcat\"]\n"
                },
                "username": {
                    "type": "string",
                    "description": "Basic auth user name. See \\n\\nhere\\n\\n.\n"
                }
            },
            "type": "object",
            "required": [
                "password",
                "sourceType",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceConfluenceConfiguration:getSourceConfluenceConfiguration": {
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "Please follow the Jira confluence for generating an API token: \\n\\ngenerating an API token\\n\\n.\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "Your Confluence domain name\n"
                },
                "email": {
                    "type": "string",
                    "description": "Your Confluence login email\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"confluence\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "domainName",
                "email",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceConvexConfiguration:getSourceConvexConfiguration": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "API access key used to retrieve data from Convex.\n"
                },
                "deploymentUrl": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"convex\"]\n"
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "deploymentUrl",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceDatadogConfiguration:getSourceDatadogConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Datadog API key\n"
                },
                "applicationKey": {
                    "type": "string",
                    "description": "Datadog application key\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Data after this date will  not be replicated. An empty value will represent the current datetime for each  execution. This just applies to Incremental syncs.\n"
                },
                "maxRecordsPerRequest": {
                    "type": "integer",
                    "description": "Maximum number of records to collect per request.\n"
                },
                "queries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/airbyte:index/getSourceDatadogConfigurationQuery:getSourceDatadogConfigurationQuery"
                    },
                    "description": "List of queries to be run and used as inputs.\n"
                },
                "query": {
                    "type": "string",
                    "description": "The search query. This just applies to Incremental syncs. If empty, it'll collect all logs.\n"
                },
                "site": {
                    "type": "string",
                    "description": "must be one of [\"datadoghq.com\", \"us3.datadoghq.com\", \"us5.datadoghq.com\", \"datadoghq.eu\", \"ddog-gov.com\"]\nThe site where Datadog data resides in.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"datadog\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated. This just applies to Incremental syncs.\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "applicationKey",
                "endDate",
                "maxRecordsPerRequest",
                "queries",
                "query",
                "site",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceDatadogConfigurationQuery:getSourceDatadogConfigurationQuery": {
            "properties": {
                "dataSource": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "query": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dataSource",
                "name",
                "query"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceDatascopeConfiguration:getSourceDatascopeConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"datascope\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Start date for the data to be replicated\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceDelightedConfiguration:getSourceDelightedConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "A Delighted API key.\n"
                },
                "since": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate the data\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"delighted\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "since",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceDixaConfiguration:getSourceDixaConfiguration": {
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "Dixa API token\n"
                },
                "batchSize": {
                    "type": "integer",
                    "description": "Number of days to batch into one request. Max 31.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"dixa\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The connector pulls records updated from this date onwards.\n"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "batchSize",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceDockerhubConfiguration:getSourceDockerhubConfiguration": {
            "properties": {
                "dockerUsername": {
                    "type": "string",
                    "description": "Username of DockerHub person or organization (for https://hub.docker.com/v2/repositories/USERNAME/ API call)\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"dockerhub\"]\n"
                }
            },
            "type": "object",
            "required": [
                "dockerUsername",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceDremioConfiguration:getSourceDremioConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key that is generated when you authenticate to Dremio API\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "URL of your Dremio instance\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"dremio\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "baseUrl",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceDynamodbConfiguration:getSourceDynamodbConfiguration": {
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The access key id to access Dynamodb. Airbyte requires read permissions to the database\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "the URL of the Dynamodb database\n"
                },
                "region": {
                    "type": "string",
                    "description": "must be one of [\"\", \"us-east-1\", \"us-east-2\", \"us-west-1\", \"us-west-2\", \"af-south-1\", \"ap-east-1\", \"ap-south-1\", \"ap-northeast-1\", \"ap-northeast-2\", \"ap-northeast-3\", \"ap-southeast-1\", \"ap-southeast-2\", \"ca-central-1\", \"cn-north-1\", \"cn-northwest-1\", \"eu-central-1\", \"eu-north-1\", \"eu-south-1\", \"eu-west-1\", \"eu-west-2\", \"eu-west-3\", \"sa-east-1\", \"me-south-1\", \"us-gov-east-1\", \"us-gov-west-1\"]\nThe region of the Dynamodb database\n"
                },
                "reservedAttributeNames": {
                    "type": "string",
                    "description": "Comma separated reserved attribute names present in your tables\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The corresponding secret to the access key id.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"dynamodb\"]\n"
                }
            },
            "type": "object",
            "required": [
                "accessKeyId",
                "endpoint",
                "region",
                "reservedAttributeNames",
                "secretAccessKey",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceE2eTestCloudConfiguration:getSourceE2eTestCloudConfiguration": {
            "properties": {
                "maxMessages": {
                    "type": "integer",
                    "description": "Number of records to emit per stream. Min 1. Max 100 billion.\n"
                },
                "messageIntervalMs": {
                    "type": "integer",
                    "description": "Interval between messages in ms. Min 0 ms. Max 60000 ms (1 minute).\n"
                },
                "mockCatalog": {
                    "$ref": "#/types/airbyte:index/getSourceE2eTestCloudConfigurationMockCatalog:getSourceE2eTestCloudConfigurationMockCatalog"
                },
                "seed": {
                    "type": "integer",
                    "description": "When the seed is unspecified, the current time millis will be used as the seed. Range: [0, 1000000].\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"e2e-test-cloud\"]\n"
                },
                "type": {
                    "type": "string",
                    "description": "must be one of [\"CONTINUOUS_FEED\"]\n"
                }
            },
            "type": "object",
            "required": [
                "maxMessages",
                "messageIntervalMs",
                "mockCatalog",
                "seed",
                "sourceType",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceE2eTestCloudConfigurationMockCatalog:getSourceE2eTestCloudConfigurationMockCatalog": {
            "properties": {
                "sourceE2eTestCloudMockCatalogMultiSchema": {
                    "$ref": "#/types/airbyte:index/getSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogMultiSchema:getSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogMultiSchema"
                },
                "sourceE2eTestCloudMockCatalogSingleSchema": {
                    "$ref": "#/types/airbyte:index/getSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogSingleSchema:getSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogSingleSchema"
                },
                "sourceE2eTestCloudUpdateMockCatalogMultiSchema": {
                    "$ref": "#/types/airbyte:index/getSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogMultiSchema:getSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogMultiSchema"
                },
                "sourceE2eTestCloudUpdateMockCatalogSingleSchema": {
                    "$ref": "#/types/airbyte:index/getSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogSingleSchema:getSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogSingleSchema"
                }
            },
            "type": "object",
            "required": [
                "sourceE2eTestCloudMockCatalogMultiSchema",
                "sourceE2eTestCloudMockCatalogSingleSchema",
                "sourceE2eTestCloudUpdateMockCatalogMultiSchema",
                "sourceE2eTestCloudUpdateMockCatalogSingleSchema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogMultiSchema:getSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogMultiSchema": {
            "properties": {
                "streamSchemas": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "streamSchemas",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogSingleSchema:getSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogSingleSchema": {
            "properties": {
                "streamDuplication": {
                    "type": "integer"
                },
                "streamName": {
                    "type": "string"
                },
                "streamSchema": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "streamDuplication",
                "streamName",
                "streamSchema",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogMultiSchema:getSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogMultiSchema": {
            "properties": {
                "streamSchemas": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "streamSchemas",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogSingleSchema:getSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogSingleSchema": {
            "properties": {
                "streamDuplication": {
                    "type": "integer"
                },
                "streamName": {
                    "type": "string"
                },
                "streamSchema": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "streamDuplication",
                "streamName",
                "streamSchema",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceEmailoctopusConfiguration:getSourceEmailoctopusConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "EmailOctopus API Key. See the \\n\\ndocs\\n\\n for information on how to generate this key.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"emailoctopus\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceExchangeRatesConfiguration:getSourceExchangeRatesConfiguration": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Your API Key. See \\n\\nhere\\n\\n. The key is case sensitive.\n"
                },
                "base": {
                    "type": "string",
                    "description": "ISO reference currency. See \\n\\nhere\\n\\n. Free plan doesn't support Source Currency Switching, default base currency is EUR\n"
                },
                "ignoreWeekends": {
                    "type": "boolean",
                    "description": "Ignore weekends? (Exchanges don't run on weekends)\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"exchange-rates\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Start getting data from that date.\n"
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "base",
                "ignoreWeekends",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFacebookMarketingConfiguration:getSourceFacebookMarketingConfiguration": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "The value of the generated access token. From your App’s Dashboard, click on \"Marketing API\" then \"Tools\". Select permissions \\n\\nads*management, ads*read, read*insights, business*management\\n\\n. Then click on \"Get token\". See the \\n\\ndocs\\n\\n for more information.\n"
                },
                "accountId": {
                    "type": "string",
                    "description": "The Facebook Ad account ID to use when pulling data from the Facebook Marketing API. Open your Meta Ads Manager. The Ad account ID number is in the account dropdown menu or in your browser's address bar. See the \\n\\ndocs\\n\\n for more information.\n"
                },
                "actionBreakdownsAllowEmpty": {
                    "type": "boolean",
                    "description": "Allows action_breakdowns to be an empty list\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The Client Id for your OAuth app\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The Client Secret for your OAuth app\n"
                },
                "customInsights": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/airbyte:index/getSourceFacebookMarketingConfigurationCustomInsight:getSourceFacebookMarketingConfigurationCustomInsight"
                    },
                    "description": "A list which contains ad statistics entries, each entry must have a name and can contains fields, breakdowns or action*breakdowns. Click on \"add\" to fill this field.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "The date until which you'd like to replicate data for all incremental streams, in the format YYYY-MM-DDT00:00:00Z. All data generated between the start date and this end date will be replicated. Not setting this option will result in always syncing the latest data.\n"
                },
                "fetchThumbnailImages": {
                    "type": "boolean",
                    "description": "Set to active if you want to fetch the thumbnail*url and store the result in thumbnail*data_url for each Ad Creative.\n"
                },
                "includeDeleted": {
                    "type": "boolean",
                    "description": "Set to active if you want to include data from deleted Campaigns, Ads, and AdSets.\n"
                },
                "insightsLookbackWindow": {
                    "type": "integer",
                    "description": "The attribution window. Facebook freezes insight data 28 days after it was generated, which means that all data from the past 28 days may have changed since we last emitted it, so you can retrieve refreshed insights from the past by setting this parameter. If you set a custom lookback window value in Facebook account, please provide the same value here.\n"
                },
                "maxBatchSize": {
                    "type": "integer",
                    "description": "Maximum batch size used when sending batch requests to Facebook API. Most users do not need to set this field unless they specifically need to tune the connector to address specific issues or use cases.\n"
                },
                "pageSize": {
                    "type": "integer",
                    "description": "Page size used when sending requests to Facebook API to specify number of records per page when response has pagination. Most users do not need to set this field unless they specifically need to tune the connector to address specific issues or use cases.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"facebook-marketing\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data for all incremental streams, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "accountId",
                "actionBreakdownsAllowEmpty",
                "clientId",
                "clientSecret",
                "customInsights",
                "endDate",
                "fetchThumbnailImages",
                "includeDeleted",
                "insightsLookbackWindow",
                "maxBatchSize",
                "pageSize",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFacebookMarketingConfigurationCustomInsight:getSourceFacebookMarketingConfigurationCustomInsight": {
            "properties": {
                "actionBreakdowns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "actionReportTime": {
                    "type": "string"
                },
                "breakdowns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "endDate": {
                    "type": "string"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "insightsLookbackWindow": {
                    "type": "integer"
                },
                "level": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string"
                },
                "timeIncrement": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "actionBreakdowns",
                "actionReportTime",
                "breakdowns",
                "endDate",
                "fields",
                "insightsLookbackWindow",
                "level",
                "name",
                "startDate",
                "timeIncrement"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFacebookPagesConfiguration:getSourceFacebookPagesConfiguration": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Facebook Page Access Token\n"
                },
                "pageId": {
                    "type": "string",
                    "description": "Page ID\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"facebook-pages\"]\n"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "pageId",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFakerConfiguration:getSourceFakerConfiguration": {
            "properties": {
                "alwaysUpdated": {
                    "type": "boolean",
                    "description": "Should the updated_at values for every record be new each sync?  Setting this to false will case the source to stop emitting records after COUNT records have been emitted.\n"
                },
                "count": {
                    "type": "integer",
                    "description": "How many users should be generated in total.  This setting does not apply to the purchases or products stream.\n"
                },
                "parallelism": {
                    "type": "integer",
                    "description": "How many parallel workers should we use to generate fake data?  Choose a value equal to the number of CPUs you will allocate to this source.\n"
                },
                "recordsPerSlice": {
                    "type": "integer",
                    "description": "How many fake records will be in each page (stream slice), before a state message is emitted?\n"
                },
                "seed": {
                    "type": "integer",
                    "description": "Manually control the faker random seed to return the same values on subsequent runs (leave -1 for random)\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"faker\"]\n"
                }
            },
            "type": "object",
            "required": [
                "alwaysUpdated",
                "count",
                "parallelism",
                "recordsPerSlice",
                "seed",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFaunaConfiguration:getSourceFaunaConfiguration": {
            "properties": {
                "collection": {
                    "$ref": "#/types/airbyte:index/getSourceFaunaConfigurationCollection:getSourceFaunaConfigurationCollection",
                    "description": "Settings for the Fauna Collection.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Domain of Fauna to query. Defaults db.fauna.com. See \\n\\nthe docs\\n\\n.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Endpoint port.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "URL scheme.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "Fauna secret, used when authenticating with the database.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"fauna\"]\n"
                }
            },
            "type": "object",
            "required": [
                "collection",
                "domain",
                "port",
                "scheme",
                "secret",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFaunaConfigurationCollection:getSourceFaunaConfigurationCollection": {
            "properties": {
                "deletions": {
                    "$ref": "#/types/airbyte:index/getSourceFaunaConfigurationCollectionDeletions:getSourceFaunaConfigurationCollectionDeletions"
                },
                "pageSize": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "deletions",
                "pageSize"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFaunaConfigurationCollectionDeletions:getSourceFaunaConfigurationCollectionDeletions": {
            "properties": {
                "sourceFaunaCollectionDeletionModeDisabled": {
                    "$ref": "#/types/airbyte:index/getSourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeDisabled:getSourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeDisabled"
                },
                "sourceFaunaCollectionDeletionModeEnabled": {
                    "$ref": "#/types/airbyte:index/getSourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeEnabled:getSourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeEnabled"
                },
                "sourceFaunaUpdateCollectionDeletionModeDisabled": {
                    "$ref": "#/types/airbyte:index/getSourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeDisabled:getSourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeDisabled"
                },
                "sourceFaunaUpdateCollectionDeletionModeEnabled": {
                    "$ref": "#/types/airbyte:index/getSourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeEnabled:getSourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeEnabled"
                }
            },
            "type": "object",
            "required": [
                "sourceFaunaCollectionDeletionModeDisabled",
                "sourceFaunaCollectionDeletionModeEnabled",
                "sourceFaunaUpdateCollectionDeletionModeDisabled",
                "sourceFaunaUpdateCollectionDeletionModeEnabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeDisabled:getSourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeDisabled": {
            "properties": {
                "deletionMode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "deletionMode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeEnabled:getSourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeEnabled": {
            "properties": {
                "column": {
                    "type": "string"
                },
                "deletionMode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "column",
                "deletionMode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeDisabled:getSourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeDisabled": {
            "properties": {
                "deletionMode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "deletionMode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeEnabled:getSourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeEnabled": {
            "properties": {
                "column": {
                    "type": "string"
                },
                "deletionMode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "column",
                "deletionMode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFileSecureConfiguration:getSourceFileSecureConfiguration": {
            "properties": {
                "datasetName": {
                    "type": "string",
                    "description": "The Name of the final table to replicate this file into (should include letters, numbers dash and underscores only).\n"
                },
                "format": {
                    "type": "string",
                    "description": "must be one of [\"csv\", \"json\", \"jsonl\", \"excel\", \"excel_binary\", \"feather\", \"parquet\", \"yaml\"]\nThe Format of the file which should be replicated (Warning: some formats may be experimental, please refer to the docs).\n"
                },
                "provider": {
                    "$ref": "#/types/airbyte:index/getSourceFileSecureConfigurationProvider:getSourceFileSecureConfigurationProvider",
                    "description": "The storage Provider or Location of the file(s) which should be replicated.\n"
                },
                "readerOptions": {
                    "type": "string",
                    "description": "This should be a string in JSON format. It depends on the chosen file format to provide additional options and tune its behavior.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"file-secure\"]\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL path to access the file which should be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "datasetName",
                "format",
                "provider",
                "readerOptions",
                "sourceType",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFileSecureConfigurationProvider:getSourceFileSecureConfigurationProvider": {
            "properties": {
                "sourceFileSecureStorageProviderAzBlobAzureBlobStorage": {
                    "$ref": "#/types/airbyte:index/getSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderAzBlobAzureBlobStorage:getSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderAzBlobAzureBlobStorage"
                },
                "sourceFileSecureStorageProviderGcsGoogleCloudStorage": {
                    "$ref": "#/types/airbyte:index/getSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderGcsGoogleCloudStorage:getSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderGcsGoogleCloudStorage"
                },
                "sourceFileSecureStorageProviderHttpsPublicWeb": {
                    "$ref": "#/types/airbyte:index/getSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderHttpsPublicWeb:getSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderHttpsPublicWeb"
                },
                "sourceFileSecureStorageProviderS3AmazonWebServices": {
                    "$ref": "#/types/airbyte:index/getSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderS3AmazonWebServices:getSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderS3AmazonWebServices"
                },
                "sourceFileSecureStorageProviderScpSecureCopyProtocol": {
                    "$ref": "#/types/airbyte:index/getSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderScpSecureCopyProtocol:getSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderScpSecureCopyProtocol"
                },
                "sourceFileSecureStorageProviderSftpSecureFileTransferProtocol": {
                    "$ref": "#/types/airbyte:index/getSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSftpSecureFileTransferProtocol:getSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSftpSecureFileTransferProtocol"
                },
                "sourceFileSecureStorageProviderSshSecureShell": {
                    "$ref": "#/types/airbyte:index/getSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSshSecureShell:getSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSshSecureShell"
                },
                "sourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorage": {
                    "$ref": "#/types/airbyte:index/getSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorage:getSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorage"
                },
                "sourceFileSecureUpdateStorageProviderGcsGoogleCloudStorage": {
                    "$ref": "#/types/airbyte:index/getSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderGcsGoogleCloudStorage:getSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderGcsGoogleCloudStorage"
                },
                "sourceFileSecureUpdateStorageProviderHttpsPublicWeb": {
                    "$ref": "#/types/airbyte:index/getSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderHttpsPublicWeb:getSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderHttpsPublicWeb"
                },
                "sourceFileSecureUpdateStorageProviderS3AmazonWebServices": {
                    "$ref": "#/types/airbyte:index/getSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderS3AmazonWebServices:getSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderS3AmazonWebServices"
                },
                "sourceFileSecureUpdateStorageProviderScpSecureCopyProtocol": {
                    "$ref": "#/types/airbyte:index/getSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderScpSecureCopyProtocol:getSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderScpSecureCopyProtocol"
                },
                "sourceFileSecureUpdateStorageProviderSftpSecureFileTransferProtocol": {
                    "$ref": "#/types/airbyte:index/getSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSftpSecureFileTransferProtocol:getSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSftpSecureFileTransferProtocol"
                },
                "sourceFileSecureUpdateStorageProviderSshSecureShell": {
                    "$ref": "#/types/airbyte:index/getSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSshSecureShell:getSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSshSecureShell"
                }
            },
            "type": "object",
            "required": [
                "sourceFileSecureStorageProviderAzBlobAzureBlobStorage",
                "sourceFileSecureStorageProviderGcsGoogleCloudStorage",
                "sourceFileSecureStorageProviderHttpsPublicWeb",
                "sourceFileSecureStorageProviderS3AmazonWebServices",
                "sourceFileSecureStorageProviderScpSecureCopyProtocol",
                "sourceFileSecureStorageProviderSftpSecureFileTransferProtocol",
                "sourceFileSecureStorageProviderSshSecureShell",
                "sourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorage",
                "sourceFileSecureUpdateStorageProviderGcsGoogleCloudStorage",
                "sourceFileSecureUpdateStorageProviderHttpsPublicWeb",
                "sourceFileSecureUpdateStorageProviderS3AmazonWebServices",
                "sourceFileSecureUpdateStorageProviderScpSecureCopyProtocol",
                "sourceFileSecureUpdateStorageProviderSftpSecureFileTransferProtocol",
                "sourceFileSecureUpdateStorageProviderSshSecureShell"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderAzBlobAzureBlobStorage:getSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderAzBlobAzureBlobStorage": {
            "properties": {
                "sasToken": {
                    "type": "string"
                },
                "sharedKey": {
                    "type": "string"
                },
                "storage": {
                    "type": "string"
                },
                "storageAccount": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sasToken",
                "sharedKey",
                "storage",
                "storageAccount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderGcsGoogleCloudStorage:getSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderGcsGoogleCloudStorage": {
            "properties": {
                "serviceAccountJson": {
                    "type": "string"
                },
                "storage": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "serviceAccountJson",
                "storage"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderHttpsPublicWeb:getSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderHttpsPublicWeb": {
            "properties": {
                "storage": {
                    "type": "string"
                },
                "userAgent": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "storage",
                "userAgent"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderS3AmazonWebServices:getSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderS3AmazonWebServices": {
            "properties": {
                "awsAccessKeyId": {
                    "type": "string"
                },
                "awsSecretAccessKey": {
                    "type": "string"
                },
                "storage": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "awsAccessKeyId",
                "awsSecretAccessKey",
                "storage"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderScpSecureCopyProtocol:getSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderScpSecureCopyProtocol": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "storage": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "host",
                "password",
                "port",
                "storage",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSftpSecureFileTransferProtocol:getSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSftpSecureFileTransferProtocol": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "storage": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "host",
                "password",
                "port",
                "storage",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSshSecureShell:getSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSshSecureShell": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "storage": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "host",
                "password",
                "port",
                "storage",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorage:getSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorage": {
            "properties": {
                "sasToken": {
                    "type": "string"
                },
                "sharedKey": {
                    "type": "string"
                },
                "storage": {
                    "type": "string"
                },
                "storageAccount": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sasToken",
                "sharedKey",
                "storage",
                "storageAccount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderGcsGoogleCloudStorage:getSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderGcsGoogleCloudStorage": {
            "properties": {
                "serviceAccountJson": {
                    "type": "string"
                },
                "storage": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "serviceAccountJson",
                "storage"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderHttpsPublicWeb:getSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderHttpsPublicWeb": {
            "properties": {
                "storage": {
                    "type": "string"
                },
                "userAgent": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "storage",
                "userAgent"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderS3AmazonWebServices:getSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderS3AmazonWebServices": {
            "properties": {
                "awsAccessKeyId": {
                    "type": "string"
                },
                "awsSecretAccessKey": {
                    "type": "string"
                },
                "storage": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "awsAccessKeyId",
                "awsSecretAccessKey",
                "storage"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderScpSecureCopyProtocol:getSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderScpSecureCopyProtocol": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "storage": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "host",
                "password",
                "port",
                "storage",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSftpSecureFileTransferProtocol:getSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSftpSecureFileTransferProtocol": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "storage": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "host",
                "password",
                "port",
                "storage",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSshSecureShell:getSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSshSecureShell": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "storage": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "host",
                "password",
                "port",
                "storage",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFireboltConfiguration:getSourceFireboltConfiguration": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "Firebolt account to login.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database to connect to.\n"
                },
                "engine": {
                    "type": "string",
                    "description": "Engine name or url to connect to.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The host name of your Firebolt database.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Firebolt password.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"firebolt\"]\n"
                },
                "username": {
                    "type": "string",
                    "description": "Firebolt email address you use to login.\n"
                }
            },
            "type": "object",
            "required": [
                "account",
                "database",
                "engine",
                "host",
                "password",
                "sourceType",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFreshcallerConfiguration:getSourceFreshcallerConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Freshcaller API Key. See the \\n\\ndocs\\n\\n for more information on how to obtain this key.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Used to construct Base URL for the Freshcaller APIs\n"
                },
                "requestsPerMinute": {
                    "type": "integer",
                    "description": "The number of requests per minute that this source allowed to use. There is a rate limit of 50 requests per minute per app per account.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"freshcaller\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time. Any data created after this date will be replicated.\n"
                },
                "syncLagMinutes": {
                    "type": "integer",
                    "description": "Lag in minutes for each sync, i.e., at time T, data for the time range [prev*sync*time, T-30] will be fetched\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "domain",
                "requestsPerMinute",
                "sourceType",
                "startDate",
                "syncLagMinutes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFreshdeskConfiguration:getSourceFreshdeskConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Freshdesk API Key. See the \\n\\ndocs\\n\\n for more information on how to obtain this key.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Freshdesk domain\n"
                },
                "requestsPerMinute": {
                    "type": "integer",
                    "description": "The number of requests per minute that this source allowed to use. There is a rate limit of 50 requests per minute per app per account.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"freshdesk\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time. Any data created after this date will be replicated. If this parameter is not set, all data will be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "domain",
                "requestsPerMinute",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceFreshsalesConfiguration:getSourceFreshsalesConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Freshsales API Key. See \\n\\nhere\\n\\n. The key is case sensitive.\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "The Name of your Freshsales domain\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"freshsales\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "domainName",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGainsightPxConfiguration:getSourceGainsightPxConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "The Aptrinsic API Key which is recieved from the dashboard settings (ref - https://app.aptrinsic.com/settings/api-keys)\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"gainsight-px\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGcsConfiguration:getSourceGcsConfiguration": {
            "properties": {
                "gcsBucket": {
                    "type": "string",
                    "description": "GCS bucket name\n"
                },
                "gcsPath": {
                    "type": "string",
                    "description": "GCS path to data\n"
                },
                "serviceAccount": {
                    "type": "string",
                    "description": "Enter your Google Cloud \\n\\nservice account key\\n\\n in JSON format\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"gcs\"]\n"
                }
            },
            "type": "object",
            "required": [
                "gcsBucket",
                "gcsPath",
                "serviceAccount",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGetlagoConfiguration:getSourceGetlagoConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Your API Key. See \\n\\nhere\\n\\n.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"getlago\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGithubConfiguration:getSourceGithubConfiguration": {
            "properties": {
                "branch": {
                    "type": "string",
                    "description": "Space-delimited list of GitHub repository branches to pull commits for, e.g. `airbytehq/airbyte/master`. If no branches are specified for a repository, the default branch will be pulled.\n"
                },
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceGithubConfigurationCredentials:getSourceGithubConfigurationCredentials",
                    "description": "Choose how to authenticate to GitHub\n"
                },
                "repository": {
                    "type": "string",
                    "description": "Space-delimited list of GitHub organizations/repositories, e.g. `airbytehq/airbyte` for single repository, `airbytehq/*` for get all repositories from organization and `airbytehq/airbyte airbytehq/another-repo` for multiple repositories.\n"
                },
                "requestsPerHour": {
                    "type": "integer",
                    "description": "The GitHub API allows for a maximum of 5000 requests per hour (15000 for Github Enterprise). You can specify a lower value to limit your use of the API quota.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"github\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data from GitHub in the format YYYY-MM-DDT00:00:00Z. For the streams which support this configuration, only data generated on or after the start date will be replicated. This field doesn't apply to all streams, see the \\n\\ndocs\\n\\n for more info\n"
                }
            },
            "type": "object",
            "required": [
                "branch",
                "credentials",
                "repository",
                "requestsPerHour",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGithubConfigurationCredentials:getSourceGithubConfigurationCredentials": {
            "properties": {
                "sourceGithubAuthenticationOAuth": {
                    "$ref": "#/types/airbyte:index/getSourceGithubConfigurationCredentialsSourceGithubAuthenticationOAuth:getSourceGithubConfigurationCredentialsSourceGithubAuthenticationOAuth"
                },
                "sourceGithubAuthenticationPersonalAccessToken": {
                    "$ref": "#/types/airbyte:index/getSourceGithubConfigurationCredentialsSourceGithubAuthenticationPersonalAccessToken:getSourceGithubConfigurationCredentialsSourceGithubAuthenticationPersonalAccessToken"
                },
                "sourceGithubUpdateAuthenticationOAuth": {
                    "$ref": "#/types/airbyte:index/getSourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationOAuth:getSourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationOAuth"
                },
                "sourceGithubUpdateAuthenticationPersonalAccessToken": {
                    "$ref": "#/types/airbyte:index/getSourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationPersonalAccessToken:getSourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationPersonalAccessToken"
                }
            },
            "type": "object",
            "required": [
                "sourceGithubAuthenticationOAuth",
                "sourceGithubAuthenticationPersonalAccessToken",
                "sourceGithubUpdateAuthenticationOAuth",
                "sourceGithubUpdateAuthenticationPersonalAccessToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGithubConfigurationCredentialsSourceGithubAuthenticationOAuth:getSourceGithubConfigurationCredentialsSourceGithubAuthenticationOAuth": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "optionTitle": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "clientId",
                "clientSecret",
                "optionTitle"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGithubConfigurationCredentialsSourceGithubAuthenticationPersonalAccessToken:getSourceGithubConfigurationCredentialsSourceGithubAuthenticationPersonalAccessToken": {
            "properties": {
                "optionTitle": {
                    "type": "string"
                },
                "personalAccessToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "optionTitle",
                "personalAccessToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationOAuth:getSourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationOAuth": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "optionTitle": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "clientId",
                "clientSecret",
                "optionTitle"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationPersonalAccessToken:getSourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationPersonalAccessToken": {
            "properties": {
                "optionTitle": {
                    "type": "string"
                },
                "personalAccessToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "optionTitle",
                "personalAccessToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGitlabConfiguration:getSourceGitlabConfiguration": {
            "properties": {
                "apiUrl": {
                    "type": "string",
                    "description": "Please enter your basic URL from GitLab instance.\n"
                },
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceGitlabConfigurationCredentials:getSourceGitlabConfigurationCredentials"
                },
                "groups": {
                    "type": "string",
                    "description": "Space-delimited list of groups. e.g. airbyte.io.\n"
                },
                "projects": {
                    "type": "string",
                    "description": "Space-delimited list of projects. e.g. airbyte.io/documentation meltano/tap-gitlab.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"gitlab\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data for GitLab API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "apiUrl",
                "credentials",
                "groups",
                "projects",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGitlabConfigurationCredentials:getSourceGitlabConfigurationCredentials": {
            "properties": {
                "sourceGitlabAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodOAuth20:getSourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodOAuth20"
                },
                "sourceGitlabAuthorizationMethodPrivateToken": {
                    "$ref": "#/types/airbyte:index/getSourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodPrivateToken:getSourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodPrivateToken"
                },
                "sourceGitlabUpdateAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodOAuth20:getSourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodOAuth20"
                },
                "sourceGitlabUpdateAuthorizationMethodPrivateToken": {
                    "$ref": "#/types/airbyte:index/getSourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodPrivateToken:getSourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodPrivateToken"
                }
            },
            "type": "object",
            "required": [
                "sourceGitlabAuthorizationMethodOAuth20",
                "sourceGitlabAuthorizationMethodPrivateToken",
                "sourceGitlabUpdateAuthorizationMethodOAuth20",
                "sourceGitlabUpdateAuthorizationMethodPrivateToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodOAuth20:getSourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken",
                "tokenExpiryDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodPrivateToken:getSourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodPrivateToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodOAuth20:getSourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken",
                "tokenExpiryDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodPrivateToken:getSourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodPrivateToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGlassfrogConfiguration:getSourceGlassfrogConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key provided by Glassfrog\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"glassfrog\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGnewsConfiguration:getSourceGnewsConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "endDate": {
                    "type": "string"
                },
                "ins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "language": {
                    "type": "string"
                },
                "nullables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "query": {
                    "type": "string"
                },
                "sortby": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string"
                },
                "topHeadlinesQuery": {
                    "type": "string"
                },
                "topHeadlinesTopic": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "country",
                "endDate",
                "ins",
                "language",
                "nullables",
                "query",
                "sortby",
                "sourceType",
                "startDate",
                "topHeadlinesQuery",
                "topHeadlinesTopic"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleAdsConfiguration:getSourceGoogleAdsConfiguration": {
            "properties": {
                "conversionWindowDays": {
                    "type": "integer",
                    "description": "A conversion window is the number of days after an ad interaction (such as an ad click or video view) during which a conversion, such as a purchase, is recorded in Google Ads. For more information, see \\n\\nGoogle's documentation\\n\\n.\n"
                },
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceGoogleAdsConfigurationCredentials:getSourceGoogleAdsConfigurationCredentials"
                },
                "customQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/airbyte:index/getSourceGoogleAdsConfigurationCustomQuery:getSourceGoogleAdsConfigurationCustomQuery"
                    }
                },
                "customerId": {
                    "type": "string",
                    "description": "Comma-separated list of (client) customer IDs. Each customer ID must be specified as a 10-digit number without dashes. For detailed instructions on finding this value, refer to our \\n\\ndocumentation\\n\\n.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "UTC date in the format YYYY-MM-DD. Any data after this date will not be replicated.\n"
                },
                "loginCustomerId": {
                    "type": "string",
                    "description": "If your access to the customer account is through a manager account, this field is required, and must be set to the 10-digit customer ID of the manager account. For more information about this field, refer to \\n\\nGoogle's documentation\\n\\n.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"google-ads\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date in the format YYYY-MM-DD. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "conversionWindowDays",
                "credentials",
                "customQueries",
                "customerId",
                "endDate",
                "loginCustomerId",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleAdsConfigurationCredentials:getSourceGoogleAdsConfigurationCredentials": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "developerToken": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "clientId",
                "clientSecret",
                "developerToken",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleAdsConfigurationCustomQuery:getSourceGoogleAdsConfigurationCustomQuery": {
            "properties": {
                "query": {
                    "type": "string"
                },
                "tableName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "query",
                "tableName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleAnalyticsDataApiConfiguration:getSourceGoogleAnalyticsDataApiConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceGoogleAnalyticsDataApiConfigurationCredentials:getSourceGoogleAnalyticsDataApiConfigurationCredentials",
                    "description": "Credentials for the service\n"
                },
                "customReports": {
                    "type": "string",
                    "description": "A JSON array describing the custom reports you want to sync from Google Analytics. See \\n\\nthe documentation\\n\\n for more information about the exact format you can use to fill out this field.\n"
                },
                "dateRangesStartDate": {
                    "type": "string",
                    "description": "The start date from which to replicate report data in the format YYYY-MM-DD. Data generated before this date will not be included in the report. Not applied to custom Cohort reports.\n"
                },
                "propertyId": {
                    "type": "string",
                    "description": "The Property ID is a unique number assigned to each property in Google Analytics, found in your GA4 property URL. This ID allows the connector to track the specific events associated with your property. Refer to the \\n\\nGoogle Analytics documentation\\n\\n to locate your property ID.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"google-analytics-data-api\"]\n"
                },
                "windowInDays": {
                    "type": "integer",
                    "description": "The interval in days for each data request made to the Google Analytics API. A larger value speeds up data sync, but increases the chance of data sampling, which may result in inaccuracies. We recommend a value of 1 to minimize sampling, unless speed is an absolute priority over accuracy. Acceptable values range from 1 to 364. Does not apply to custom Cohort reports. More information is available in \\n\\nthe documentation\\n\\n.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "customReports",
                "dateRangesStartDate",
                "propertyId",
                "sourceType",
                "windowInDays"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleAnalyticsDataApiConfigurationCredentials:getSourceGoogleAnalyticsDataApiConfigurationCredentials": {
            "properties": {
                "sourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauth": {
                    "$ref": "#/types/airbyte:index/getSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauth:getSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauth"
                },
                "sourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthentication:getSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthentication"
                },
                "sourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauth": {
                    "$ref": "#/types/airbyte:index/getSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauth:getSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauth"
                },
                "sourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthentication:getSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthentication"
                }
            },
            "type": "object",
            "required": [
                "sourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauth",
                "sourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthentication",
                "sourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauth",
                "sourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthentication"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauth:getSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauth": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthentication:getSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthentication": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "credentialsJson": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "credentialsJson"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauth:getSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauth": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthentication:getSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthentication": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "credentialsJson": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "credentialsJson"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleAnalyticsV4Configuration:getSourceGoogleAnalyticsV4Configuration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceGoogleAnalyticsV4ConfigurationCredentials:getSourceGoogleAnalyticsV4ConfigurationCredentials",
                    "description": "Credentials for the service\n"
                },
                "customReports": {
                    "type": "string",
                    "description": "A JSON array describing the custom reports you want to sync from Google Analytics. See \\n\\nthe docs\\n\\n for more information about the exact format you can use to fill out this field.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"google-analytics-v4\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date in the format YYYY-MM-DD. Any data before this date will not be replicated.\n"
                },
                "viewId": {
                    "type": "string",
                    "description": "The ID for the Google Analytics View you want to fetch data from. This can be found from the \\n\\nGoogle Analytics Account Explorer\\n\\n.\n"
                },
                "windowInDays": {
                    "type": "integer",
                    "description": "The time increment used by the connector when requesting data from the Google Analytics API. More information is available in the \\n\\nthe docs\\n\\n. The bigger this value is, the faster the sync will be, but the more likely that sampling will be applied to your data, potentially causing inaccuracies in the returned results. We recommend setting this to 1 unless you have a hard requirement to make the sync faster at the expense of accuracy. The minimum allowed value for this field is 1, and the maximum is 364.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "customReports",
                "sourceType",
                "startDate",
                "viewId",
                "windowInDays"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleAnalyticsV4ConfigurationCredentials:getSourceGoogleAnalyticsV4ConfigurationCredentials": {
            "properties": {
                "sourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth": {
                    "$ref": "#/types/airbyte:index/getSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth:getSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth"
                },
                "sourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication:getSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication"
                },
                "sourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth": {
                    "$ref": "#/types/airbyte:index/getSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth:getSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth"
                },
                "sourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication:getSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication"
                }
            },
            "type": "object",
            "required": [
                "sourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth",
                "sourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication",
                "sourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth",
                "sourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth:getSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication:getSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "credentialsJson": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "credentialsJson"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth:getSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication:getSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "credentialsJson": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "credentialsJson"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleDirectoryConfiguration:getSourceGoogleDirectoryConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceGoogleDirectoryConfigurationCredentials:getSourceGoogleDirectoryConfigurationCredentials",
                    "description": "Google APIs use the OAuth 2.0 protocol for authentication and authorization. The Source supports \\n\\nWeb server application\\n\\n and \\n\\nService accounts\\n\\n scenarios.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"google-directory\"]\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleDirectoryConfigurationCredentials:getSourceGoogleDirectoryConfigurationCredentials": {
            "properties": {
                "sourceGoogleDirectoryGoogleCredentialsServiceAccountKey": {
                    "$ref": "#/types/airbyte:index/getSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsServiceAccountKey:getSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsServiceAccountKey"
                },
                "sourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuth": {
                    "$ref": "#/types/airbyte:index/getSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuth:getSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuth"
                },
                "sourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey": {
                    "$ref": "#/types/airbyte:index/getSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey:getSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey"
                },
                "sourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth": {
                    "$ref": "#/types/airbyte:index/getSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth:getSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth"
                }
            },
            "type": "object",
            "required": [
                "sourceGoogleDirectoryGoogleCredentialsServiceAccountKey",
                "sourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuth",
                "sourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey",
                "sourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsServiceAccountKey:getSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsServiceAccountKey": {
            "properties": {
                "credentialsJson": {
                    "type": "string"
                },
                "credentialsTitle": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentialsJson",
                "credentialsTitle",
                "email"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuth:getSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuth": {
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "credentialsTitle": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "credentialsTitle",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey:getSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey": {
            "properties": {
                "credentialsJson": {
                    "type": "string"
                },
                "credentialsTitle": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentialsJson",
                "credentialsTitle",
                "email"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth:getSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth": {
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "credentialsTitle": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "credentialsTitle",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGooglePagespeedInsightsConfiguration:getSourceGooglePagespeedInsightsConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Google PageSpeed API Key. See \\n\\nhere\\n\\n. The key is optional - however the API is heavily rate limited when using without API Key. Creating and using the API key therefore is recommended. The key is case sensitive.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines which Lighthouse category to run. One or many of: \"accessibility\", \"best-practices\", \"performance\", \"pwa\", \"seo\".\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"google-pagespeed-insights\"]\n"
                },
                "strategies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The analyses strategy to use. Either \"desktop\" or \"mobile\".\n"
                },
                "urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The URLs to retrieve pagespeed information from. The connector will attempt to sync PageSpeed reports for all the defined URLs. Format: https://(www.)url.domain\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "categories",
                "sourceType",
                "strategies",
                "urls"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleSearchConsoleConfiguration:getSourceGoogleSearchConsoleConfiguration": {
            "properties": {
                "authorization": {
                    "$ref": "#/types/airbyte:index/getSourceGoogleSearchConsoleConfigurationAuthorization:getSourceGoogleSearchConsoleConfigurationAuthorization"
                },
                "customReports": {
                    "type": "string",
                    "description": "A JSON array describing the custom reports you want to sync from Google Search Console. See \\n\\nthe docs\\n\\n for more information about the exact format you can use to fill out this field.\n"
                },
                "dataState": {
                    "type": "string",
                    "description": "must be one of [\"final\", \"all\"]\nIf \"final\" or if this parameter is omitted, the returned data will include only finalized data. Setting this parameter to \"all\" should not be used with Incremental Sync mode as it may cause data loss. If \"all\", data will include fresh data.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "UTC date in the format 2017-01-25. Any data after this date will not be replicated. Must be greater or equal to the start date field.\n"
                },
                "siteUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The URLs of the website property attached to your GSC account. Read more \\n\\nhere\\n\\n.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"google-search-console\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date in the format 2017-01-25. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "authorization",
                "customReports",
                "dataState",
                "endDate",
                "siteUrls",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleSearchConsoleConfigurationAuthorization:getSourceGoogleSearchConsoleConfigurationAuthorization": {
            "properties": {
                "sourceGoogleSearchConsoleAuthenticationTypeOAuth": {
                    "$ref": "#/types/airbyte:index/getSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeOAuth:getSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeOAuth"
                },
                "sourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication:getSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication"
                },
                "sourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth": {
                    "$ref": "#/types/airbyte:index/getSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth:getSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth"
                },
                "sourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication:getSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication"
                }
            },
            "type": "object",
            "required": [
                "sourceGoogleSearchConsoleAuthenticationTypeOAuth",
                "sourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication",
                "sourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth",
                "sourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeOAuth:getSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeOAuth": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication:getSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "serviceAccountInfo": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "email",
                "serviceAccountInfo"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth:getSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication:getSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "serviceAccountInfo": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "email",
                "serviceAccountInfo"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleSheetsConfiguration:getSourceGoogleSheetsConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceGoogleSheetsConfigurationCredentials:getSourceGoogleSheetsConfigurationCredentials",
                    "description": "Credentials for connecting to the Google Sheets API\n"
                },
                "namesConversion": {
                    "type": "boolean",
                    "description": "Enables the conversion of column names to a standardized, SQL-compliant format. For example, 'My Name' \u003e 'my_name'. Enable this option if your destination is SQL-based.\n"
                },
                "rowBatchSize": {
                    "type": "integer",
                    "description": "The number of rows fetched when making a Google Sheet API call. Defaults to 200.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"google-sheets\"]\n"
                },
                "spreadsheetId": {
                    "type": "string",
                    "description": "Enter the link to the Google spreadsheet you want to sync. To copy the link, click the 'Share' button in the top-right corner of the spreadsheet, then click 'Copy link'.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "namesConversion",
                "rowBatchSize",
                "sourceType",
                "spreadsheetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleSheetsConfigurationCredentials:getSourceGoogleSheetsConfigurationCredentials": {
            "properties": {
                "sourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth": {
                    "$ref": "#/types/airbyte:index/getSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth:getSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth"
                },
                "sourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication:getSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication"
                },
                "sourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth": {
                    "$ref": "#/types/airbyte:index/getSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth:getSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth"
                },
                "sourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication:getSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication"
                }
            },
            "type": "object",
            "required": [
                "sourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth",
                "sourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication",
                "sourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth",
                "sourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth:getSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication:getSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "serviceAccountInfo": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "serviceAccountInfo"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth:getSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication:getSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "serviceAccountInfo": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "serviceAccountInfo"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleWebfontsConfiguration:getSourceGoogleWebfontsConfiguration": {
            "properties": {
                "alt": {
                    "type": "string",
                    "description": "Optional, Available params- json, media, proto\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key is required to access google apis, For getting your's goto google console and generate api key for Webfonts\n"
                },
                "prettyPrint": {
                    "type": "string",
                    "description": "Optional, boolean type\n"
                },
                "sort": {
                    "type": "string",
                    "description": "Optional, to find how to sort\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"google-webfonts\"]\n"
                }
            },
            "type": "object",
            "required": [
                "alt",
                "apiKey",
                "prettyPrint",
                "sort",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGoogleWorkspaceAdminReportsConfiguration:getSourceGoogleWorkspaceAdminReportsConfiguration": {
            "properties": {
                "credentialsJson": {
                    "type": "string",
                    "description": "The contents of the JSON service account key. See the \\n\\ndocs\\n\\n for more information on how to generate this key.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email of the user, which has permissions to access the Google Workspace Admin APIs.\n"
                },
                "lookback": {
                    "type": "integer",
                    "description": "Sets the range of time shown in the report. Reports API allows from up to 180 days ago.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"google-workspace-admin-reports\"]\n"
                }
            },
            "type": "object",
            "required": [
                "credentialsJson",
                "email",
                "lookback",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGreenhouseConfiguration:getSourceGreenhouseConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Greenhouse API Key. See the \\n\\ndocs\\n\\n for more information on how to generate this key.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"greenhouse\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceGridlyConfiguration:getSourceGridlyConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string"
                },
                "gridId": {
                    "type": "string",
                    "description": "ID of a grid, or can be ID of a branch\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"gridly\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "gridId",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceHarvestConfiguration:getSourceHarvestConfiguration": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Harvest account ID. Required for all Harvest requests in pair with Personal Access Token\n"
                },
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceHarvestConfigurationCredentials:getSourceHarvestConfigurationCredentials",
                    "description": "Choose how to authenticate to Harvest.\n"
                },
                "replicationEndDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data after this date will not be replicated.\n"
                },
                "replicationStartDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"harvest\"]\n"
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "credentials",
                "replicationEndDate",
                "replicationStartDate",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceHarvestConfigurationCredentials:getSourceHarvestConfigurationCredentials": {
            "properties": {
                "sourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth": {
                    "$ref": "#/types/airbyte:index/getSourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth:getSourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth"
                },
                "sourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken": {
                    "$ref": "#/types/airbyte:index/getSourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken:getSourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken"
                },
                "sourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth": {
                    "$ref": "#/types/airbyte:index/getSourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth:getSourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth"
                },
                "sourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken": {
                    "$ref": "#/types/airbyte:index/getSourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken:getSourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken"
                }
            },
            "type": "object",
            "required": [
                "sourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth",
                "sourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken",
                "sourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth",
                "sourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth:getSourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken:getSourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "apiToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "authType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth:getSourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken:getSourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "apiToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "authType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceHubplannerConfiguration:getSourceHubplannerConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Hubplanner API key. See https://github.com/hubplanner/API#authentication for more details.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"hubplanner\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceHubspotConfiguration:getSourceHubspotConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceHubspotConfigurationCredentials:getSourceHubspotConfigurationCredentials",
                    "description": "Choose how to authenticate to HubSpot.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"hubspot\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceHubspotConfigurationCredentials:getSourceHubspotConfigurationCredentials": {
            "properties": {
                "sourceHubspotAuthenticationOAuth": {
                    "$ref": "#/types/airbyte:index/getSourceHubspotConfigurationCredentialsSourceHubspotAuthenticationOAuth:getSourceHubspotConfigurationCredentialsSourceHubspotAuthenticationOAuth"
                },
                "sourceHubspotAuthenticationPrivateApp": {
                    "$ref": "#/types/airbyte:index/getSourceHubspotConfigurationCredentialsSourceHubspotAuthenticationPrivateApp:getSourceHubspotConfigurationCredentialsSourceHubspotAuthenticationPrivateApp"
                },
                "sourceHubspotUpdateAuthenticationOAuth": {
                    "$ref": "#/types/airbyte:index/getSourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationOAuth:getSourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationOAuth"
                },
                "sourceHubspotUpdateAuthenticationPrivateApp": {
                    "$ref": "#/types/airbyte:index/getSourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationPrivateApp:getSourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationPrivateApp"
                }
            },
            "type": "object",
            "required": [
                "sourceHubspotAuthenticationOAuth",
                "sourceHubspotAuthenticationPrivateApp",
                "sourceHubspotUpdateAuthenticationOAuth",
                "sourceHubspotUpdateAuthenticationPrivateApp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceHubspotConfigurationCredentialsSourceHubspotAuthenticationOAuth:getSourceHubspotConfigurationCredentialsSourceHubspotAuthenticationOAuth": {
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "credentialsTitle": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "credentialsTitle",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceHubspotConfigurationCredentialsSourceHubspotAuthenticationPrivateApp:getSourceHubspotConfigurationCredentialsSourceHubspotAuthenticationPrivateApp": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "credentialsTitle": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "credentialsTitle"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationOAuth:getSourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationOAuth": {
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "credentialsTitle": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "credentialsTitle",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationPrivateApp:getSourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationPrivateApp": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "credentialsTitle": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "credentialsTitle"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceInsightlyConfiguration:getSourceInsightlyConfiguration": {
            "properties": {
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"insightly\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data for Insightly in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated. Note that it will be used only for incremental streams.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Your Insightly API token.\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType",
                "startDate",
                "token"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceInstagramConfiguration:getSourceInstagramConfiguration": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "The value of the access token generated with \\n\\ninstagram*basic, instagram*manage*insights, pages*show*list, pages*read_engagement, Instagram Public Content Access\\n\\n permissions. See the \\n\\ndocs\\n\\n for more information\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The Client ID for your Oauth application\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The Client Secret for your Oauth application\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"instagram\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data for User Insights, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "clientId",
                "clientSecret",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceInstatusConfiguration:getSourceInstatusConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Instatus REST API key\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"instatus\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceIntercomConfiguration:getSourceIntercomConfiguration": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token for making authenticated requests. See the \\n\\nIntercom docs\\n\\n for more information.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"intercom\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceIp2whoisConfiguration:getSourceIp2whoisConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Your API Key. See \\n\\nhere\\n\\n.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Domain name. See \\n\\nhere\\n\\n.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"ip2whois\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "domain",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceIterableConfiguration:getSourceIterableConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Iterable API Key. See the \\n\\ndocs\\n\\n for more information on how to obtain this key.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"iterable\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data for Iterable, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceJiraConfiguration:getSourceJiraConfiguration": {
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "Jira API Token. See the \\n\\ndocs\\n\\n for more information on how to generate this key. API Token is used for Authorization to your account by BasicAuth.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The Domain for your Jira account, e.g. airbyteio.atlassian.net, airbyteio.jira.com, jira.your-domain.com\n"
                },
                "email": {
                    "type": "string",
                    "description": "The user email for your Jira account which you used to generate the API token. This field is used for Authorization to your account by BasicAuth.\n"
                },
                "enableExperimentalStreams": {
                    "type": "boolean",
                    "description": "Allow the use of experimental streams which rely on undocumented Jira API endpoints. See https://docs.airbyte.com/integrations/sources/jira#experimental-tables for more info.\n"
                },
                "expandIssueChangelog": {
                    "type": "boolean",
                    "description": "Expand the changelog when replicating issues.\n"
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Jira project keys to replicate data for, or leave it empty if you want to replicate data for all projects.\n"
                },
                "renderFields": {
                    "type": "boolean",
                    "description": "Render issue fields in HTML format in addition to Jira JSON-like format.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"jira\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you want to replicate data from Jira, use the format YYYY-MM-DDT00:00:00Z. Note that this field only applies to certain streams, and only data generated on or after the start date will be replicated. Or leave it empty if you want to replicate all data. For more information, refer to the \\n\\ndocumentation\\n\\n.\n"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "domain",
                "email",
                "enableExperimentalStreams",
                "expandIssueChangelog",
                "projects",
                "renderFields",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceK6CloudConfiguration:getSourceK6CloudConfiguration": {
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "Your API Token. See \\n\\nhere\\n\\n. The key is case sensitive.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"k6-cloud\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceKlarnaConfiguration:getSourceKlarnaConfiguration": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "A string which is associated with your Merchant ID and is used to authorize use of Klarna's APIs (https://developers.klarna.com/api/#authentication)\n"
                },
                "playground": {
                    "type": "boolean",
                    "description": "Propertie defining if connector is used against playground or production environment\n"
                },
                "region": {
                    "type": "string",
                    "description": "must be one of [\"eu\", \"us\", \"oc\"]\nBase url region (For playground eu https://docs.klarna.com/klarna-payments/api/payments-api/#tag/API-URLs). Supported 'eu', 'us', 'oc'\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"klarna\"]\n"
                },
                "username": {
                    "type": "string",
                    "description": "Consists of your Merchant ID (eid) - a unique number that identifies your e-store, combined with a random string (https://developers.klarna.com/api/#authentication)\n"
                }
            },
            "type": "object",
            "required": [
                "password",
                "playground",
                "region",
                "sourceType",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceKlaviyoConfiguration:getSourceKlaviyoConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Klaviyo API Key. See our \\n\\ndocs\\n\\n if you need help finding this key.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"klaviyo\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceKustomerSingerConfiguration:getSourceKustomerSingerConfiguration": {
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "Kustomer API Token. See the \\n\\ndocs\\n\\n on how to obtain this\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"kustomer-singer\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate the data\n"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceKyveConfiguration:getSourceKyveConfiguration": {
            "properties": {
                "maxPages": {
                    "type": "integer",
                    "description": "The maximum amount of pages to go trough. Set to 'null' for all pages.\n"
                },
                "pageSize": {
                    "type": "integer",
                    "description": "The pagesize for pagination, smaller numbers are used in integration tests.\n"
                },
                "poolIds": {
                    "type": "string",
                    "description": "The IDs of the KYVE storage pool you want to archive. (Comma separated)\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"kyve\"]\n"
                },
                "startIds": {
                    "type": "string",
                    "description": "The start-id defines, from which bundle id the pipeline should start to extract the data (Comma separated)\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "URL to the KYVE Chain API.\n"
                }
            },
            "type": "object",
            "required": [
                "maxPages",
                "pageSize",
                "poolIds",
                "sourceType",
                "startIds",
                "urlBase"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceLaunchdarklyConfiguration:getSourceLaunchdarklyConfiguration": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Your Access token. See \\n\\nhere\\n\\n.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"launchdarkly\"]\n"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceLemlistConfiguration:getSourceLemlistConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Lemlist API key.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"lemlist\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceLeverHiringConfiguration:getSourceLeverHiringConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceLeverHiringConfigurationCredentials:getSourceLeverHiringConfigurationCredentials",
                    "description": "Choose how to authenticate to Lever Hiring.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "must be one of [\"Production\", \"Sandbox\"]\nThe environment in which you'd like to replicate data for Lever. This is used to determine which Lever API endpoint to use.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"lever-hiring\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated. Note that it will be used only in the following incremental streams: comments, commits, and issues.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "environment",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceLeverHiringConfigurationCredentials:getSourceLeverHiringConfigurationCredentials": {
            "properties": {
                "sourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKey": {
                    "$ref": "#/types/airbyte:index/getSourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKey:getSourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKey"
                },
                "sourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth": {
                    "$ref": "#/types/airbyte:index/getSourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth:getSourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth"
                },
                "sourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKey": {
                    "$ref": "#/types/airbyte:index/getSourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKey:getSourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKey"
                },
                "sourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth": {
                    "$ref": "#/types/airbyte:index/getSourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth:getSourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth"
                }
            },
            "type": "object",
            "required": [
                "sourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKey",
                "sourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth",
                "sourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKey",
                "sourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKey:getSourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKey": {
            "properties": {
                "apiKey": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "authType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth:getSourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKey:getSourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKey": {
            "properties": {
                "apiKey": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "authType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth:getSourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceLinkedinAdsConfiguration:getSourceLinkedinAdsConfiguration": {
            "properties": {
                "accountIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Specify the account IDs separated by a space, to pull the data from. Leave empty, if you want to pull the data from all associated accounts. See the \\n\\nLinkedIn Ads docs\\n\\n for more info.\n"
                },
                "adAnalyticsReports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/airbyte:index/getSourceLinkedinAdsConfigurationAdAnalyticsReport:getSourceLinkedinAdsConfigurationAdAnalyticsReport"
                    }
                },
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceLinkedinAdsConfigurationCredentials:getSourceLinkedinAdsConfigurationCredentials"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"linkedin-ads\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date in the format 2020-09-17. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "accountIds",
                "adAnalyticsReports",
                "credentials",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceLinkedinAdsConfigurationAdAnalyticsReport:getSourceLinkedinAdsConfigurationAdAnalyticsReport": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "pivotBy": {
                    "type": "string"
                },
                "timeGranularity": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "pivotBy",
                "timeGranularity"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceLinkedinAdsConfigurationCredentials:getSourceLinkedinAdsConfigurationCredentials": {
            "properties": {
                "sourceLinkedinAdsAuthenticationAccessToken": {
                    "$ref": "#/types/airbyte:index/getSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationAccessToken:getSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationAccessToken"
                },
                "sourceLinkedinAdsAuthenticationOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationOAuth20:getSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationOAuth20"
                },
                "sourceLinkedinAdsUpdateAuthenticationAccessToken": {
                    "$ref": "#/types/airbyte:index/getSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationAccessToken:getSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationAccessToken"
                },
                "sourceLinkedinAdsUpdateAuthenticationOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationOAuth20:getSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationOAuth20"
                }
            },
            "type": "object",
            "required": [
                "sourceLinkedinAdsAuthenticationAccessToken",
                "sourceLinkedinAdsAuthenticationOAuth20",
                "sourceLinkedinAdsUpdateAuthenticationAccessToken",
                "sourceLinkedinAdsUpdateAuthenticationOAuth20"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationAccessToken:getSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationAccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationOAuth20:getSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationOAuth20": {
            "properties": {
                "authMethod": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authMethod",
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationAccessToken:getSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationAccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationOAuth20:getSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationOAuth20": {
            "properties": {
                "authMethod": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authMethod",
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceLinkedinPagesConfiguration:getSourceLinkedinPagesConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceLinkedinPagesConfigurationCredentials:getSourceLinkedinPagesConfigurationCredentials"
                },
                "orgId": {
                    "type": "string",
                    "description": "Specify the Organization ID\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"linkedin-pages\"]\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "orgId",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceLinkedinPagesConfigurationCredentials:getSourceLinkedinPagesConfigurationCredentials": {
            "properties": {
                "sourceLinkedinPagesAuthenticationAccessToken": {
                    "$ref": "#/types/airbyte:index/getSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationAccessToken:getSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationAccessToken"
                },
                "sourceLinkedinPagesAuthenticationOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationOAuth20:getSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationOAuth20"
                },
                "sourceLinkedinPagesUpdateAuthenticationAccessToken": {
                    "$ref": "#/types/airbyte:index/getSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationAccessToken:getSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationAccessToken"
                },
                "sourceLinkedinPagesUpdateAuthenticationOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationOAuth20:getSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationOAuth20"
                }
            },
            "type": "object",
            "required": [
                "sourceLinkedinPagesAuthenticationAccessToken",
                "sourceLinkedinPagesAuthenticationOAuth20",
                "sourceLinkedinPagesUpdateAuthenticationAccessToken",
                "sourceLinkedinPagesUpdateAuthenticationOAuth20"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationAccessToken:getSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationAccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationOAuth20:getSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationOAuth20": {
            "properties": {
                "authMethod": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authMethod",
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationAccessToken:getSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationAccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationOAuth20:getSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationOAuth20": {
            "properties": {
                "authMethod": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authMethod",
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceLinnworksConfiguration:getSourceLinnworksConfiguration": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Linnworks Application ID\n"
                },
                "applicationSecret": {
                    "type": "string",
                    "description": "Linnworks Application Secret\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"linnworks\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                },
                "token": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "applicationId",
                "applicationSecret",
                "sourceType",
                "startDate",
                "token"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceLokaliseConfiguration:getSourceLokaliseConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Lokalise API Key with read-access. Available at Profile settings \u003e API tokens. See \\n\\nhere\\n\\n.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Lokalise project ID. Available at Project Settings \u003e General.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"lokalise\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "projectId",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMailchimpConfiguration:getSourceMailchimpConfiguration": {
            "properties": {
                "campaignId": {
                    "type": "string"
                },
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceMailchimpConfigurationCredentials:getSourceMailchimpConfigurationCredentials"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"mailchimp\"]\n"
                }
            },
            "type": "object",
            "required": [
                "campaignId",
                "credentials",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMailchimpConfigurationCredentials:getSourceMailchimpConfigurationCredentials": {
            "properties": {
                "sourceMailchimpAuthenticationApiKey": {
                    "$ref": "#/types/airbyte:index/getSourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationApiKey:getSourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationApiKey"
                },
                "sourceMailchimpAuthenticationOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationOAuth20:getSourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationOAuth20"
                },
                "sourceMailchimpUpdateAuthenticationApiKey": {
                    "$ref": "#/types/airbyte:index/getSourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationApiKey:getSourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationApiKey"
                },
                "sourceMailchimpUpdateAuthenticationOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationOAuth20:getSourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationOAuth20"
                }
            },
            "type": "object",
            "required": [
                "sourceMailchimpAuthenticationApiKey",
                "sourceMailchimpAuthenticationOAuth20",
                "sourceMailchimpUpdateAuthenticationApiKey",
                "sourceMailchimpUpdateAuthenticationOAuth20"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationApiKey:getSourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationApiKey": {
            "properties": {
                "apikey": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apikey",
                "authType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationOAuth20:getSourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationApiKey:getSourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationApiKey": {
            "properties": {
                "apikey": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apikey",
                "authType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationOAuth20:getSourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMailgunConfiguration:getSourceMailgunConfiguration": {
            "properties": {
                "domainRegion": {
                    "type": "string",
                    "description": "Domain region code. 'EU' or 'US' are possible values. The default is 'US'.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "Primary account API key to access your Mailgun data.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"mailgun\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2020-10-01 00:00:00. Any data before this date will not be replicated. If omitted, defaults to 3 days ago.\n"
                }
            },
            "type": "object",
            "required": [
                "domainRegion",
                "privateKey",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMailjetSmsConfiguration:getSourceMailjetSmsConfiguration": {
            "properties": {
                "endDate": {
                    "type": "integer",
                    "description": "Retrieve SMS messages created before the specified timestamp. Required format - Unix timestamp.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"mailjet-sms\"]\n"
                },
                "startDate": {
                    "type": "integer",
                    "description": "Retrieve SMS messages created after the specified timestamp. Required format - Unix timestamp.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Your access token. See \\n\\nhere\\n\\n.\n"
                }
            },
            "type": "object",
            "required": [
                "endDate",
                "sourceType",
                "startDate",
                "token"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMarketoConfiguration:getSourceMarketoConfiguration": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The Client ID of your Marketo developer application. See \\n\\n the docs \\n\\n for info on how to obtain this.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The Client Secret of your Marketo developer application. See \\n\\n the docs \\n\\n for info on how to obtain this.\n"
                },
                "domainUrl": {
                    "type": "string",
                    "description": "Your Marketo Base URL. See \\n\\n the docs \\n\\n for info on how to obtain this.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"marketo\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "domainUrl",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMetabaseConfiguration:getSourceMetabaseConfiguration": {
            "properties": {
                "instanceApiUrl": {
                    "type": "string",
                    "description": "URL to your metabase instance API\n"
                },
                "password": {
                    "type": "string"
                },
                "sessionToken": {
                    "type": "string",
                    "description": "To generate your session token, you need to run the following command: `curl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d '{\"username\": \"person@metabase.com\", \"password\": \"fakepassword\"}' \\\nhttp://localhost:3000/api/session\n` Then copy the value of the `id` field returned by a successful call to that API.\nNote that by default, sessions are good for 14 days and needs to be regenerated.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"metabase\"]\n"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "instanceApiUrl",
                "password",
                "sessionToken",
                "sourceType",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMicrosoftTeamsConfiguration:getSourceMicrosoftTeamsConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceMicrosoftTeamsConfigurationCredentials:getSourceMicrosoftTeamsConfigurationCredentials",
                    "description": "Choose how to authenticate to Microsoft\n"
                },
                "period": {
                    "type": "string",
                    "description": "Specifies the length of time over which the Team Device Report stream is aggregated. The supported values are: D7, D30, D90, and D180.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"microsoft-teams\"]\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "period",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMicrosoftTeamsConfigurationCredentials:getSourceMicrosoftTeamsConfigurationCredentials": {
            "properties": {
                "sourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft": {
                    "$ref": "#/types/airbyte:index/getSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft:getSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft"
                },
                "sourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20:getSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20"
                },
                "sourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoft": {
                    "$ref": "#/types/airbyte:index/getSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoft:getSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoft"
                },
                "sourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20:getSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20"
                }
            },
            "type": "object",
            "required": [
                "sourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft",
                "sourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20",
                "sourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoft",
                "sourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft:getSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "tenantId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId",
                "clientSecret",
                "tenantId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20:getSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tenantId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken",
                "tenantId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoft:getSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoft": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "tenantId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId",
                "clientSecret",
                "tenantId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20:getSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tenantId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken",
                "tenantId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMixpanelConfiguration:getSourceMixpanelConfiguration": {
            "properties": {
                "attributionWindow": {
                    "type": "integer",
                    "description": "A period of time for attributing results to ads and the lookback period after those actions occur during which ad results are counted. Default attribution window is 5 days.\n"
                },
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceMixpanelConfigurationCredentials:getSourceMixpanelConfigurationCredentials",
                    "description": "Choose how to authenticate to Mixpanel\n"
                },
                "dateWindowSize": {
                    "type": "integer",
                    "description": "Defines window size in days, that used to slice through data. You can reduce it, if amount of data in each window is too big for your environment.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "The date in the format YYYY-MM-DD. Any data after this date will not be replicated. Left empty to always sync to most recent date\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Your project ID number. See the \\n\\ndocs\\n\\n for more information on how to obtain this.\n"
                },
                "projectTimezone": {
                    "type": "string",
                    "description": "Time zone in which integer date times are stored. The project timezone may be found in the project settings in the \\n\\nMixpanel console\\n\\n.\n"
                },
                "region": {
                    "type": "string",
                    "description": "must be one of [\"US\", \"EU\"]\nThe region of mixpanel domain instance either US or EU.\n"
                },
                "selectPropertiesByDefault": {
                    "type": "boolean",
                    "description": "Setting this config parameter to TRUE ensures that new properties on events and engage records are captured. Otherwise new properties will be ignored.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"mixpanel\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date in the format YYYY-MM-DD. Any data before this date will not be replicated. If this option is not set, the connector will replicate data from up to one year ago by default.\n"
                }
            },
            "type": "object",
            "required": [
                "attributionWindow",
                "credentials",
                "dateWindowSize",
                "endDate",
                "projectId",
                "projectTimezone",
                "region",
                "selectPropertiesByDefault",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMixpanelConfigurationCredentials:getSourceMixpanelConfigurationCredentials": {
            "properties": {
                "sourceMixpanelAuthenticationWildcardProjectSecret": {
                    "$ref": "#/types/airbyte:index/getSourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecret:getSourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecret"
                },
                "sourceMixpanelAuthenticationWildcardServiceAccount": {
                    "$ref": "#/types/airbyte:index/getSourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccount:getSourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccount"
                },
                "sourceMixpanelUpdateAuthenticationWildcardProjectSecret": {
                    "$ref": "#/types/airbyte:index/getSourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecret:getSourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecret"
                },
                "sourceMixpanelUpdateAuthenticationWildcardServiceAccount": {
                    "$ref": "#/types/airbyte:index/getSourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccount:getSourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccount"
                }
            },
            "type": "object",
            "required": [
                "sourceMixpanelAuthenticationWildcardProjectSecret",
                "sourceMixpanelAuthenticationWildcardServiceAccount",
                "sourceMixpanelUpdateAuthenticationWildcardProjectSecret",
                "sourceMixpanelUpdateAuthenticationWildcardServiceAccount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecret:getSourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecret": {
            "properties": {
                "apiSecret": {
                    "type": "string"
                },
                "optionTitle": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiSecret",
                "optionTitle"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccount:getSourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccount": {
            "properties": {
                "optionTitle": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "optionTitle",
                "secret",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecret:getSourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecret": {
            "properties": {
                "apiSecret": {
                    "type": "string"
                },
                "optionTitle": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiSecret",
                "optionTitle"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccount:getSourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccount": {
            "properties": {
                "optionTitle": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "optionTitle",
                "secret",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMondayConfiguration:getSourceMondayConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceMondayConfigurationCredentials:getSourceMondayConfigurationCredentials"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"monday\"]\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMondayConfigurationCredentials:getSourceMondayConfigurationCredentials": {
            "properties": {
                "sourceMondayAuthorizationMethodApiToken": {
                    "$ref": "#/types/airbyte:index/getSourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodApiToken:getSourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodApiToken"
                },
                "sourceMondayAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodOAuth20:getSourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodOAuth20"
                },
                "sourceMondayUpdateAuthorizationMethodApiToken": {
                    "$ref": "#/types/airbyte:index/getSourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodApiToken:getSourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodApiToken"
                },
                "sourceMondayUpdateAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodOAuth20:getSourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodOAuth20"
                }
            },
            "type": "object",
            "required": [
                "sourceMondayAuthorizationMethodApiToken",
                "sourceMondayAuthorizationMethodOAuth20",
                "sourceMondayUpdateAuthorizationMethodApiToken",
                "sourceMondayUpdateAuthorizationMethodOAuth20"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodApiToken:getSourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodApiToken": {
            "properties": {
                "apiToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "authType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodOAuth20:getSourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "subdomain": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret",
                "subdomain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodApiToken:getSourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodApiToken": {
            "properties": {
                "apiToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "authType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodOAuth20:getSourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "subdomain": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret",
                "subdomain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMongodbConfiguration:getSourceMongodbConfiguration": {
            "properties": {
                "authSource": {
                    "type": "string",
                    "description": "The authentication source where the user information is stored.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database you want to replicate.\n"
                },
                "instanceType": {
                    "$ref": "#/types/airbyte:index/getSourceMongodbConfigurationInstanceType:getSourceMongodbConfigurationInstanceType",
                    "description": "The MongoDb instance to connect to. For MongoDB Atlas and Replica Set TLS connection is used by default.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password associated with this username.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"mongodb\"]\n"
                },
                "user": {
                    "type": "string",
                    "description": "The username which is used to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "authSource",
                "database",
                "instanceType",
                "password",
                "sourceType",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMongodbConfigurationInstanceType:getSourceMongodbConfigurationInstanceType": {
            "properties": {
                "sourceMongodbMongoDbInstanceTypeMongoDbAtlas": {
                    "$ref": "#/types/airbyte:index/getSourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeMongoDbAtlas:getSourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeMongoDbAtlas"
                },
                "sourceMongodbMongoDbInstanceTypeReplicaSet": {
                    "$ref": "#/types/airbyte:index/getSourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeReplicaSet:getSourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeReplicaSet"
                },
                "sourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance": {
                    "$ref": "#/types/airbyte:index/getSourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance:getSourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance"
                },
                "sourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlas": {
                    "$ref": "#/types/airbyte:index/getSourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlas:getSourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlas"
                },
                "sourceMongodbUpdateMongoDbInstanceTypeReplicaSet": {
                    "$ref": "#/types/airbyte:index/getSourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSet:getSourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSet"
                },
                "sourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance": {
                    "$ref": "#/types/airbyte:index/getSourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance:getSourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance"
                }
            },
            "type": "object",
            "required": [
                "sourceMongodbMongoDbInstanceTypeMongoDbAtlas",
                "sourceMongodbMongoDbInstanceTypeReplicaSet",
                "sourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance",
                "sourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlas",
                "sourceMongodbUpdateMongoDbInstanceTypeReplicaSet",
                "sourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeMongoDbAtlas:getSourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeMongoDbAtlas": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "clusterUrl": {
                    "type": "string"
                },
                "instance": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clusterUrl",
                "instance"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeReplicaSet:getSourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeReplicaSet": {
            "properties": {
                "instance": {
                    "type": "string"
                },
                "replicaSet": {
                    "type": "string"
                },
                "serverAddresses": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "instance",
                "replicaSet",
                "serverAddresses"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance:getSourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "instance": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "host",
                "instance",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlas:getSourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlas": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "clusterUrl": {
                    "type": "string"
                },
                "instance": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clusterUrl",
                "instance"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSet:getSourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSet": {
            "properties": {
                "instance": {
                    "type": "string"
                },
                "replicaSet": {
                    "type": "string"
                },
                "serverAddresses": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "instance",
                "replicaSet",
                "serverAddresses"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance:getSourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "instance": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "host",
                "instance",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMongodbInternalPocConfiguration:getSourceMongodbInternalPocConfiguration": {
            "properties": {
                "authSource": {
                    "type": "string",
                    "description": "The authentication source where the user information is stored.\n"
                },
                "connectionString": {
                    "type": "string",
                    "description": "The connection string of the database that you want to replicate..\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password associated with this username.\n"
                },
                "replicaSet": {
                    "type": "string",
                    "description": "The name of the replica set to be replicated.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"mongodb-internal-poc\"]\n"
                },
                "user": {
                    "type": "string",
                    "description": "The username which is used to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "authSource",
                "connectionString",
                "password",
                "replicaSet",
                "sourceType",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMssqlConfiguration:getSourceMssqlConfiguration": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The name of the database.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The hostname of the database.\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '\u0026'. (example: key1=value1\u0026key2=value2\u0026key3=value3).\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password associated with the username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port of the database.\n"
                },
                "replicationMethod": {
                    "$ref": "#/types/airbyte:index/getSourceMssqlConfigurationReplicationMethod:getSourceMssqlConfigurationReplicationMethod",
                    "description": "The replication method used for extracting data from the database. STANDARD replication requires no setup on the DB side but will not be able to represent deletions incrementally. CDC uses {TBC} to detect inserts, updates, and deletes. This needs to be configured on the source database itself.\n"
                },
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of schemas to sync from. Defaults to user. Case sensitive.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"mssql\"]\n"
                },
                "sslMethod": {
                    "$ref": "#/types/airbyte:index/getSourceMssqlConfigurationSslMethod:getSourceMssqlConfigurationSslMethod",
                    "description": "The encryption method which is used when communicating with the database.\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/getSourceMssqlConfigurationTunnelMethod:getSourceMssqlConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username which is used to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "host",
                "jdbcUrlParams",
                "password",
                "port",
                "replicationMethod",
                "schemas",
                "sourceType",
                "sslMethod",
                "tunnelMethod",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMssqlConfigurationReplicationMethod:getSourceMssqlConfigurationReplicationMethod": {
            "properties": {
                "sourceMssqlReplicationMethodLogicalReplicationCdc": {
                    "$ref": "#/types/airbyte:index/getSourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodLogicalReplicationCdc:getSourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodLogicalReplicationCdc"
                },
                "sourceMssqlReplicationMethodStandard": {
                    "$ref": "#/types/airbyte:index/getSourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodStandard:getSourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodStandard"
                },
                "sourceMssqlUpdateReplicationMethodLogicalReplicationCdc": {
                    "$ref": "#/types/airbyte:index/getSourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodLogicalReplicationCdc:getSourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodLogicalReplicationCdc"
                },
                "sourceMssqlUpdateReplicationMethodStandard": {
                    "$ref": "#/types/airbyte:index/getSourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodStandard:getSourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodStandard"
                }
            },
            "type": "object",
            "required": [
                "sourceMssqlReplicationMethodLogicalReplicationCdc",
                "sourceMssqlReplicationMethodStandard",
                "sourceMssqlUpdateReplicationMethodLogicalReplicationCdc",
                "sourceMssqlUpdateReplicationMethodStandard"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodLogicalReplicationCdc:getSourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodLogicalReplicationCdc": {
            "properties": {
                "dataToSync": {
                    "type": "string"
                },
                "initialWaitingSeconds": {
                    "type": "integer"
                },
                "method": {
                    "type": "string"
                },
                "snapshotIsolation": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dataToSync",
                "initialWaitingSeconds",
                "method",
                "snapshotIsolation"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodStandard:getSourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodStandard": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodLogicalReplicationCdc:getSourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodLogicalReplicationCdc": {
            "properties": {
                "dataToSync": {
                    "type": "string"
                },
                "initialWaitingSeconds": {
                    "type": "integer"
                },
                "method": {
                    "type": "string"
                },
                "snapshotIsolation": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dataToSync",
                "initialWaitingSeconds",
                "method",
                "snapshotIsolation"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodStandard:getSourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodStandard": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMssqlConfigurationSslMethod:getSourceMssqlConfigurationSslMethod": {
            "properties": {
                "sourceMssqlSslMethodEncryptedTrustServerCertificate": {
                    "$ref": "#/types/airbyte:index/getSourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedTrustServerCertificate:getSourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedTrustServerCertificate"
                },
                "sourceMssqlSslMethodEncryptedVerifyCertificate": {
                    "$ref": "#/types/airbyte:index/getSourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedVerifyCertificate:getSourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedVerifyCertificate"
                },
                "sourceMssqlUpdateSslMethodEncryptedTrustServerCertificate": {
                    "$ref": "#/types/airbyte:index/getSourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedTrustServerCertificate:getSourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedTrustServerCertificate"
                },
                "sourceMssqlUpdateSslMethodEncryptedVerifyCertificate": {
                    "$ref": "#/types/airbyte:index/getSourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedVerifyCertificate:getSourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedVerifyCertificate"
                }
            },
            "type": "object",
            "required": [
                "sourceMssqlSslMethodEncryptedTrustServerCertificate",
                "sourceMssqlSslMethodEncryptedVerifyCertificate",
                "sourceMssqlUpdateSslMethodEncryptedTrustServerCertificate",
                "sourceMssqlUpdateSslMethodEncryptedVerifyCertificate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedTrustServerCertificate:getSourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedTrustServerCertificate": {
            "properties": {
                "sslMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sslMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedVerifyCertificate:getSourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedVerifyCertificate": {
            "properties": {
                "hostNameInCertificate": {
                    "type": "string"
                },
                "sslMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "hostNameInCertificate",
                "sslMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedTrustServerCertificate:getSourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedTrustServerCertificate": {
            "properties": {
                "sslMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sslMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedVerifyCertificate:getSourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedVerifyCertificate": {
            "properties": {
                "hostNameInCertificate": {
                    "type": "string"
                },
                "sslMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "hostNameInCertificate",
                "sslMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMssqlConfigurationTunnelMethod:getSourceMssqlConfigurationTunnelMethod": {
            "properties": {
                "sourceMssqlSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getSourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodNoTunnel:getSourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodNoTunnel"
                },
                "sourceMssqlSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodPasswordAuthentication:getSourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodPasswordAuthentication"
                },
                "sourceMssqlSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodSshKeyAuthentication:getSourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodSshKeyAuthentication"
                },
                "sourceMssqlUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getSourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodNoTunnel:getSourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodNoTunnel"
                },
                "sourceMssqlUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodPasswordAuthentication:getSourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodPasswordAuthentication"
                },
                "sourceMssqlUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodSshKeyAuthentication:getSourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object",
            "required": [
                "sourceMssqlSshTunnelMethodNoTunnel",
                "sourceMssqlSshTunnelMethodPasswordAuthentication",
                "sourceMssqlSshTunnelMethodSshKeyAuthentication",
                "sourceMssqlUpdateSshTunnelMethodNoTunnel",
                "sourceMssqlUpdateSshTunnelMethodPasswordAuthentication",
                "sourceMssqlUpdateSshTunnelMethodSshKeyAuthentication"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodNoTunnel:getSourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodPasswordAuthentication:getSourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodSshKeyAuthentication:getSourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodNoTunnel:getSourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodPasswordAuthentication:getSourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodSshKeyAuthentication:getSourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMyHoursConfiguration:getSourceMyHoursConfiguration": {
            "properties": {
                "email": {
                    "type": "string",
                    "description": "Your My Hours username\n"
                },
                "logsBatchSize": {
                    "type": "integer",
                    "description": "Pagination size used for retrieving logs in days\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password associated to the username\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"my-hours\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Start date for collecting time logs\n"
                }
            },
            "type": "object",
            "required": [
                "email",
                "logsBatchSize",
                "password",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMysqlConfiguration:getSourceMysqlConfiguration": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The database name.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The host name of the database.\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '\u0026'. (example: key1=value1\u0026key2=value2\u0026key3=value3). For more information read about \\n\\nJDBC URL parameters\\n\\n.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password associated with the username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to connect to.\n"
                },
                "replicationMethod": {
                    "$ref": "#/types/airbyte:index/getSourceMysqlConfigurationReplicationMethod:getSourceMysqlConfigurationReplicationMethod",
                    "description": "Configures how data is extracted from the database.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"mysql\"]\n"
                },
                "sslMode": {
                    "$ref": "#/types/airbyte:index/getSourceMysqlConfigurationSslMode:getSourceMysqlConfigurationSslMode",
                    "description": "SSL connection modes. Read more \\n\\n in the docs\\n\\n.\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/getSourceMysqlConfigurationTunnelMethod:getSourceMysqlConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username which is used to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "host",
                "jdbcUrlParams",
                "password",
                "port",
                "replicationMethod",
                "sourceType",
                "sslMode",
                "tunnelMethod",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMysqlConfigurationReplicationMethod:getSourceMysqlConfigurationReplicationMethod": {
            "properties": {
                "sourceMysqlUpdateMethodReadChangesUsingBinaryLogCdc": {
                    "$ref": "#/types/airbyte:index/getSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodReadChangesUsingBinaryLogCdc:getSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodReadChangesUsingBinaryLogCdc"
                },
                "sourceMysqlUpdateMethodScanChangesWithUserDefinedCursor": {
                    "$ref": "#/types/airbyte:index/getSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodScanChangesWithUserDefinedCursor:getSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodScanChangesWithUserDefinedCursor"
                },
                "sourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdc": {
                    "$ref": "#/types/airbyte:index/getSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdc:getSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdc"
                },
                "sourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursor": {
                    "$ref": "#/types/airbyte:index/getSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursor:getSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursor"
                }
            },
            "type": "object",
            "required": [
                "sourceMysqlUpdateMethodReadChangesUsingBinaryLogCdc",
                "sourceMysqlUpdateMethodScanChangesWithUserDefinedCursor",
                "sourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdc",
                "sourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursor"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodReadChangesUsingBinaryLogCdc:getSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodReadChangesUsingBinaryLogCdc": {
            "properties": {
                "initialWaitingSeconds": {
                    "type": "integer"
                },
                "method": {
                    "type": "string"
                },
                "serverTimeZone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "initialWaitingSeconds",
                "method",
                "serverTimeZone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodScanChangesWithUserDefinedCursor:getSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodScanChangesWithUserDefinedCursor": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdc:getSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdc": {
            "properties": {
                "initialWaitingSeconds": {
                    "type": "integer"
                },
                "method": {
                    "type": "string"
                },
                "serverTimeZone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "initialWaitingSeconds",
                "method",
                "serverTimeZone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursor:getSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursor": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMysqlConfigurationSslMode:getSourceMysqlConfigurationSslMode": {
            "properties": {
                "sourceMysqlSslModesPreferred": {
                    "$ref": "#/types/airbyte:index/getSourceMysqlConfigurationSslModeSourceMysqlSslModesPreferred:getSourceMysqlConfigurationSslModeSourceMysqlSslModesPreferred"
                },
                "sourceMysqlSslModesRequired": {
                    "$ref": "#/types/airbyte:index/getSourceMysqlConfigurationSslModeSourceMysqlSslModesRequired:getSourceMysqlConfigurationSslModeSourceMysqlSslModesRequired"
                },
                "sourceMysqlSslModesVerifyCa": {
                    "$ref": "#/types/airbyte:index/getSourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyCa:getSourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyCa"
                },
                "sourceMysqlSslModesVerifyIdentity": {
                    "$ref": "#/types/airbyte:index/getSourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyIdentity:getSourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyIdentity"
                },
                "sourceMysqlUpdateSslModesPreferred": {
                    "$ref": "#/types/airbyte:index/getSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesPreferred:getSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesPreferred"
                },
                "sourceMysqlUpdateSslModesRequired": {
                    "$ref": "#/types/airbyte:index/getSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesRequired:getSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesRequired"
                },
                "sourceMysqlUpdateSslModesVerifyCa": {
                    "$ref": "#/types/airbyte:index/getSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyCa:getSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyCa"
                },
                "sourceMysqlUpdateSslModesVerifyIdentity": {
                    "$ref": "#/types/airbyte:index/getSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyIdentity:getSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyIdentity"
                }
            },
            "type": "object",
            "required": [
                "sourceMysqlSslModesPreferred",
                "sourceMysqlSslModesRequired",
                "sourceMysqlSslModesVerifyCa",
                "sourceMysqlSslModesVerifyIdentity",
                "sourceMysqlUpdateSslModesPreferred",
                "sourceMysqlUpdateSslModesRequired",
                "sourceMysqlUpdateSslModesVerifyCa",
                "sourceMysqlUpdateSslModesVerifyIdentity"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMysqlConfigurationSslModeSourceMysqlSslModesPreferred:getSourceMysqlConfigurationSslModeSourceMysqlSslModesPreferred": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMysqlConfigurationSslModeSourceMysqlSslModesRequired:getSourceMysqlConfigurationSslModeSourceMysqlSslModesRequired": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyCa:getSourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyCa": {
            "properties": {
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "clientCertificate",
                "clientKey",
                "clientKeyPassword",
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyIdentity:getSourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyIdentity": {
            "properties": {
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "clientCertificate",
                "clientKey",
                "clientKeyPassword",
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesPreferred:getSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesPreferred": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesRequired:getSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesRequired": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyCa:getSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyCa": {
            "properties": {
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "clientCertificate",
                "clientKey",
                "clientKeyPassword",
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyIdentity:getSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyIdentity": {
            "properties": {
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "clientCertificate",
                "clientKey",
                "clientKeyPassword",
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMysqlConfigurationTunnelMethod:getSourceMysqlConfigurationTunnelMethod": {
            "properties": {
                "sourceMysqlSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getSourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodNoTunnel:getSourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodNoTunnel"
                },
                "sourceMysqlSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodPasswordAuthentication:getSourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodPasswordAuthentication"
                },
                "sourceMysqlSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodSshKeyAuthentication:getSourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodSshKeyAuthentication"
                },
                "sourceMysqlUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getSourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodNoTunnel:getSourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodNoTunnel"
                },
                "sourceMysqlUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodPasswordAuthentication:getSourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodPasswordAuthentication"
                },
                "sourceMysqlUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodSshKeyAuthentication:getSourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object",
            "required": [
                "sourceMysqlSshTunnelMethodNoTunnel",
                "sourceMysqlSshTunnelMethodPasswordAuthentication",
                "sourceMysqlSshTunnelMethodSshKeyAuthentication",
                "sourceMysqlUpdateSshTunnelMethodNoTunnel",
                "sourceMysqlUpdateSshTunnelMethodPasswordAuthentication",
                "sourceMysqlUpdateSshTunnelMethodSshKeyAuthentication"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodNoTunnel:getSourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodPasswordAuthentication:getSourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodSshKeyAuthentication:getSourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodNoTunnel:getSourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodPasswordAuthentication:getSourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodSshKeyAuthentication:getSourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceNetsuiteConfiguration:getSourceNetsuiteConfiguration": {
            "properties": {
                "consumerKey": {
                    "type": "string",
                    "description": "Consumer key associated with your integration\n"
                },
                "consumerSecret": {
                    "type": "string",
                    "description": "Consumer secret associated with your integration\n"
                },
                "objectTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The API names of the Netsuite objects you want to sync. Setting this speeds up the connection setup process by limiting the number of schemas that need to be retrieved from Netsuite.\n"
                },
                "realm": {
                    "type": "string",
                    "description": "Netsuite realm e.g. 2344535, as for `production` or 2344535_SB1, as for the `sandbox`\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"netsuite\"]\n"
                },
                "startDatetime": {
                    "type": "string",
                    "description": "Starting point for your data replication, in format of \"YYYY-MM-DDTHH:mm:ssZ\"\n"
                },
                "tokenKey": {
                    "type": "string",
                    "description": "Access token key\n"
                },
                "tokenSecret": {
                    "type": "string",
                    "description": "Access token secret\n"
                },
                "windowInDays": {
                    "type": "integer",
                    "description": "The amount of days used to query the data with date chunks. Set smaller value, if you have lots of data.\n"
                }
            },
            "type": "object",
            "required": [
                "consumerKey",
                "consumerSecret",
                "objectTypes",
                "realm",
                "sourceType",
                "startDatetime",
                "tokenKey",
                "tokenSecret",
                "windowInDays"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceNotionConfiguration:getSourceNotionConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceNotionConfigurationCredentials:getSourceNotionConfigurationCredentials",
                    "description": "Pick an authentication method.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"notion\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00.000Z. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceNotionConfigurationCredentials:getSourceNotionConfigurationCredentials": {
            "properties": {
                "sourceNotionAuthenticateUsingAccessToken": {
                    "$ref": "#/types/airbyte:index/getSourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingAccessToken:getSourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingAccessToken"
                },
                "sourceNotionAuthenticateUsingOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingOAuth20:getSourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingOAuth20"
                },
                "sourceNotionUpdateAuthenticateUsingAccessToken": {
                    "$ref": "#/types/airbyte:index/getSourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingAccessToken:getSourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingAccessToken"
                },
                "sourceNotionUpdateAuthenticateUsingOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingOAuth20:getSourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingOAuth20"
                }
            },
            "type": "object",
            "required": [
                "sourceNotionAuthenticateUsingAccessToken",
                "sourceNotionAuthenticateUsingOAuth20",
                "sourceNotionUpdateAuthenticateUsingAccessToken",
                "sourceNotionUpdateAuthenticateUsingOAuth20"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingAccessToken:getSourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingAccessToken": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "token"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingOAuth20:getSourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingAccessToken:getSourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingAccessToken": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "token"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingOAuth20:getSourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceNytimesConfiguration:getSourceNytimesConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "End date to stop the article retrieval (format YYYY-MM)\n"
                },
                "period": {
                    "type": "integer",
                    "description": "must be one of [\"1\", \"7\", \"30\"]\nPeriod of time (in days)\n"
                },
                "shareType": {
                    "type": "string",
                    "description": "must be one of [\"facebook\"]\nShare Type\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"nytimes\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Start date to begin the article retrieval (format YYYY-MM)\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "endDate",
                "period",
                "shareType",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOktaConfiguration:getSourceOktaConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceOktaConfigurationCredentials:getSourceOktaConfigurationCredentials"
                },
                "domain": {
                    "type": "string",
                    "description": "The Okta domain. See the \\n\\ndocs\\n\\n for instructions on how to find it.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"okta\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format YYYY-MM-DDTHH:MM:SSZ. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "domain",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOktaConfigurationCredentials:getSourceOktaConfigurationCredentials": {
            "properties": {
                "sourceOktaAuthorizationMethodApiToken": {
                    "$ref": "#/types/airbyte:index/getSourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodApiToken:getSourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodApiToken"
                },
                "sourceOktaAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodOAuth20:getSourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodOAuth20"
                },
                "sourceOktaUpdateAuthorizationMethodApiToken": {
                    "$ref": "#/types/airbyte:index/getSourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodApiToken:getSourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodApiToken"
                },
                "sourceOktaUpdateAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodOAuth20:getSourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodOAuth20"
                }
            },
            "type": "object",
            "required": [
                "sourceOktaAuthorizationMethodApiToken",
                "sourceOktaAuthorizationMethodOAuth20",
                "sourceOktaUpdateAuthorizationMethodApiToken",
                "sourceOktaUpdateAuthorizationMethodOAuth20"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodApiToken:getSourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodApiToken": {
            "properties": {
                "apiToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "authType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodOAuth20:getSourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodOAuth20": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodApiToken:getSourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodApiToken": {
            "properties": {
                "apiToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "authType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodOAuth20:getSourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodOAuth20": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOmnisendConfiguration:getSourceOmnisendConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"omnisend\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOnesignalConfiguration:getSourceOnesignalConfiguration": {
            "properties": {
                "applications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/airbyte:index/getSourceOnesignalConfigurationApplication:getSourceOnesignalConfigurationApplication"
                    },
                    "description": "Applications keys, see the \\n\\ndocs\\n\\n for more information on how to obtain this data\n"
                },
                "outcomeNames": {
                    "type": "string",
                    "description": "Comma-separated list of names and the value (sum/count) for the returned outcome data. See the \\n\\ndocs\\n\\n for more details\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"onesignal\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data for OneSignal API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.\n"
                },
                "userAuthKey": {
                    "type": "string",
                    "description": "OneSignal User Auth Key, see the \\n\\ndocs\\n\\n for more information on how to obtain this key.\n"
                }
            },
            "type": "object",
            "required": [
                "applications",
                "outcomeNames",
                "sourceType",
                "startDate",
                "userAuthKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOnesignalConfigurationApplication:getSourceOnesignalConfigurationApplication": {
            "properties": {
                "appApiKey": {
                    "type": "string"
                },
                "appId": {
                    "type": "string"
                },
                "appName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "appApiKey",
                "appId",
                "appName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOpenweatherConfiguration:getSourceOpenweatherConfiguration": {
            "properties": {
                "appid": {
                    "type": "string",
                    "description": "Your OpenWeather API Key. See \\n\\nhere\\n\\n. The key is case sensitive.\n"
                },
                "lang": {
                    "type": "string",
                    "description": "must be one of [\"af\", \"al\", \"ar\", \"az\", \"bg\", \"ca\", \"cz\", \"da\", \"de\", \"el\", \"en\", \"eu\", \"fa\", \"fi\", \"fr\", \"gl\", \"he\", \"hi\", \"hr\", \"hu\", \"id\", \"it\", \"ja\", \"kr\", \"la\", \"lt\", \"mk\", \"no\", \"nl\", \"pl\", \"pt\", \"pt*br\", \"ro\", \"ru\", \"sv\", \"se\", \"sk\", \"sl\", \"sp\", \"es\", \"sr\", \"th\", \"tr\", \"ua\", \"uk\", \"vi\", \"zh*cn\", \"zh_tw\", \"zu\"]\nYou can use lang parameter to get the output in your language. The contents of the description field will be translated. See \\n\\nhere\\n\\n for the list of supported languages.\n"
                },
                "lat": {
                    "type": "string",
                    "description": "Latitude for which you want to get weather condition from. (min -90, max 90)\n"
                },
                "lon": {
                    "type": "string",
                    "description": "Longitude for which you want to get weather condition from. (min -180, max 180)\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"openweather\"]\n"
                },
                "units": {
                    "type": "string",
                    "description": "must be one of [\"standard\", \"metric\", \"imperial\"]\nUnits of measurement. standard, metric and imperial units are available. If you do not use the units parameter, standard units will be applied by default.\n"
                }
            },
            "type": "object",
            "required": [
                "appid",
                "lang",
                "lat",
                "lon",
                "sourceType",
                "units"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOracleConfiguration:getSourceOracleConfiguration": {
            "properties": {
                "connectionData": {
                    "$ref": "#/types/airbyte:index/getSourceOracleConfigurationConnectionData:getSourceOracleConfigurationConnectionData",
                    "description": "Connect data that will be used for DB connection\n"
                },
                "encryption": {
                    "$ref": "#/types/airbyte:index/getSourceOracleConfigurationEncryption:getSourceOracleConfigurationEncryption",
                    "description": "The encryption method with is used when communicating with the database.\n"
                },
                "host": {
                    "type": "string",
                    "description": "Hostname of the database.\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '\u0026'. (example: key1=value1\u0026key2=value2\u0026key3=value3).\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password associated with the username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the database.\nOracle Corporations recommends the following port numbers:\n1521 - Default listening port for client connections to the listener.\n2484 - Recommended and officially registered listening port for client connections to the listener using TCP/IP with SSL\n"
                },
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of schemas to sync from. Defaults to user. Case sensitive.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"oracle\"]\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/getSourceOracleConfigurationTunnelMethod:getSourceOracleConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username which is used to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "connectionData",
                "encryption",
                "host",
                "jdbcUrlParams",
                "password",
                "port",
                "schemas",
                "sourceType",
                "tunnelMethod",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOracleConfigurationConnectionData:getSourceOracleConfigurationConnectionData": {
            "properties": {
                "sourceOracleConnectByServiceName": {
                    "$ref": "#/types/airbyte:index/getSourceOracleConfigurationConnectionDataSourceOracleConnectByServiceName:getSourceOracleConfigurationConnectionDataSourceOracleConnectByServiceName"
                },
                "sourceOracleConnectBySystemIdSid": {
                    "$ref": "#/types/airbyte:index/getSourceOracleConfigurationConnectionDataSourceOracleConnectBySystemIdSid:getSourceOracleConfigurationConnectionDataSourceOracleConnectBySystemIdSid"
                },
                "sourceOracleUpdateConnectByServiceName": {
                    "$ref": "#/types/airbyte:index/getSourceOracleConfigurationConnectionDataSourceOracleUpdateConnectByServiceName:getSourceOracleConfigurationConnectionDataSourceOracleUpdateConnectByServiceName"
                },
                "sourceOracleUpdateConnectBySystemIdSid": {
                    "$ref": "#/types/airbyte:index/getSourceOracleConfigurationConnectionDataSourceOracleUpdateConnectBySystemIdSid:getSourceOracleConfigurationConnectionDataSourceOracleUpdateConnectBySystemIdSid"
                }
            },
            "type": "object",
            "required": [
                "sourceOracleConnectByServiceName",
                "sourceOracleConnectBySystemIdSid",
                "sourceOracleUpdateConnectByServiceName",
                "sourceOracleUpdateConnectBySystemIdSid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOracleConfigurationConnectionDataSourceOracleConnectByServiceName:getSourceOracleConfigurationConnectionDataSourceOracleConnectByServiceName": {
            "properties": {
                "connectionType": {
                    "type": "string"
                },
                "serviceName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "connectionType",
                "serviceName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOracleConfigurationConnectionDataSourceOracleConnectBySystemIdSid:getSourceOracleConfigurationConnectionDataSourceOracleConnectBySystemIdSid": {
            "properties": {
                "connectionType": {
                    "type": "string"
                },
                "sid": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "connectionType",
                "sid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOracleConfigurationConnectionDataSourceOracleUpdateConnectByServiceName:getSourceOracleConfigurationConnectionDataSourceOracleUpdateConnectByServiceName": {
            "properties": {
                "connectionType": {
                    "type": "string"
                },
                "serviceName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "connectionType",
                "serviceName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOracleConfigurationConnectionDataSourceOracleUpdateConnectBySystemIdSid:getSourceOracleConfigurationConnectionDataSourceOracleUpdateConnectBySystemIdSid": {
            "properties": {
                "connectionType": {
                    "type": "string"
                },
                "sid": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "connectionType",
                "sid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOracleConfigurationEncryption:getSourceOracleConfigurationEncryption": {
            "properties": {
                "sourceOracleEncryptionNativeNetworkEncryptionNne": {
                    "$ref": "#/types/airbyte:index/getSourceOracleConfigurationEncryptionSourceOracleEncryptionNativeNetworkEncryptionNne:getSourceOracleConfigurationEncryptionSourceOracleEncryptionNativeNetworkEncryptionNne"
                },
                "sourceOracleEncryptionTlsEncryptedVerifyCertificate": {
                    "$ref": "#/types/airbyte:index/getSourceOracleConfigurationEncryptionSourceOracleEncryptionTlsEncryptedVerifyCertificate:getSourceOracleConfigurationEncryptionSourceOracleEncryptionTlsEncryptedVerifyCertificate"
                },
                "sourceOracleUpdateEncryptionNativeNetworkEncryptionNne": {
                    "$ref": "#/types/airbyte:index/getSourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionNativeNetworkEncryptionNne:getSourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionNativeNetworkEncryptionNne"
                },
                "sourceOracleUpdateEncryptionTlsEncryptedVerifyCertificate": {
                    "$ref": "#/types/airbyte:index/getSourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionTlsEncryptedVerifyCertificate:getSourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionTlsEncryptedVerifyCertificate"
                }
            },
            "type": "object",
            "required": [
                "sourceOracleEncryptionNativeNetworkEncryptionNne",
                "sourceOracleEncryptionTlsEncryptedVerifyCertificate",
                "sourceOracleUpdateEncryptionNativeNetworkEncryptionNne",
                "sourceOracleUpdateEncryptionTlsEncryptedVerifyCertificate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOracleConfigurationEncryptionSourceOracleEncryptionNativeNetworkEncryptionNne:getSourceOracleConfigurationEncryptionSourceOracleEncryptionNativeNetworkEncryptionNne": {
            "properties": {
                "encryptionAlgorithm": {
                    "type": "string"
                },
                "encryptionMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "encryptionAlgorithm",
                "encryptionMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOracleConfigurationEncryptionSourceOracleEncryptionTlsEncryptedVerifyCertificate:getSourceOracleConfigurationEncryptionSourceOracleEncryptionTlsEncryptedVerifyCertificate": {
            "properties": {
                "encryptionMethod": {
                    "type": "string"
                },
                "sslCertificate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "encryptionMethod",
                "sslCertificate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionNativeNetworkEncryptionNne:getSourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionNativeNetworkEncryptionNne": {
            "properties": {
                "encryptionAlgorithm": {
                    "type": "string"
                },
                "encryptionMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "encryptionAlgorithm",
                "encryptionMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionTlsEncryptedVerifyCertificate:getSourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionTlsEncryptedVerifyCertificate": {
            "properties": {
                "encryptionMethod": {
                    "type": "string"
                },
                "sslCertificate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "encryptionMethod",
                "sslCertificate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOracleConfigurationTunnelMethod:getSourceOracleConfigurationTunnelMethod": {
            "properties": {
                "sourceOracleSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getSourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodNoTunnel:getSourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodNoTunnel"
                },
                "sourceOracleSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodPasswordAuthentication:getSourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodPasswordAuthentication"
                },
                "sourceOracleSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodSshKeyAuthentication:getSourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodSshKeyAuthentication"
                },
                "sourceOracleUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getSourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodNoTunnel:getSourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodNoTunnel"
                },
                "sourceOracleUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodPasswordAuthentication:getSourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodPasswordAuthentication"
                },
                "sourceOracleUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodSshKeyAuthentication:getSourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object",
            "required": [
                "sourceOracleSshTunnelMethodNoTunnel",
                "sourceOracleSshTunnelMethodPasswordAuthentication",
                "sourceOracleSshTunnelMethodSshKeyAuthentication",
                "sourceOracleUpdateSshTunnelMethodNoTunnel",
                "sourceOracleUpdateSshTunnelMethodPasswordAuthentication",
                "sourceOracleUpdateSshTunnelMethodSshKeyAuthentication"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodNoTunnel:getSourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodPasswordAuthentication:getSourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodSshKeyAuthentication:getSourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodNoTunnel:getSourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodPasswordAuthentication:getSourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodSshKeyAuthentication:getSourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOrbConfiguration:getSourceOrbConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Orb API Key, issued from the Orb admin console.\n"
                },
                "lookbackWindowDays": {
                    "type": "integer",
                    "description": "When set to N, the connector will always refresh resources created within the past N days. By default, updated objects that are not newly created are not incrementally synced.\n"
                },
                "numericEventPropertiesKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Property key names to extract from all events, in order to enrich ledger entries corresponding to an event deduction.\n"
                },
                "planId": {
                    "type": "string",
                    "description": "Orb Plan ID to filter subscriptions that should have usage fetched.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"orb\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2022-03-01T00:00:00Z. Any data with created_at before this data will not be synced. For Subscription Usage, this becomes the `timeframe_start` API parameter.\n"
                },
                "stringEventPropertiesKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Property key names to extract from all events, in order to enrich ledger entries corresponding to an event deduction.\n"
                },
                "subscriptionUsageGroupingKey": {
                    "type": "string",
                    "description": "Property key name to group subscription usage by.\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "lookbackWindowDays",
                "numericEventPropertiesKeys",
                "planId",
                "sourceType",
                "startDate",
                "stringEventPropertiesKeys",
                "subscriptionUsageGroupingKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOrbitConfiguration:getSourceOrbitConfiguration": {
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "Authorizes you to work with Orbit workspaces associated with the token.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"orbit\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Date in the format 2022-06-26. Only load members whose last activities are after this date.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "The unique name of the workspace that your API token is associated with.\n"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "sourceType",
                "startDate",
                "workspace"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOutbrainAmplifyConfiguration:getSourceOutbrainAmplifyConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceOutbrainAmplifyConfigurationCredentials:getSourceOutbrainAmplifyConfigurationCredentials",
                    "description": "Credentials for making authenticated requests requires either username/password or access_token.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "Date in the format YYYY-MM-DD.\n"
                },
                "geoLocationBreakdown": {
                    "type": "string",
                    "description": "must be one of [\"country\", \"region\", \"subregion\"]\nThe granularity used for geo location data in reports.\n"
                },
                "reportGranularity": {
                    "type": "string",
                    "description": "must be one of [\"daily\", \"weekly\", \"monthly\"]\nThe granularity used for periodic data in reports. See \\n\\nthe docs\\n\\n.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"outbrain-amplify\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Date in the format YYYY-MM-DD eg. 2017-01-25. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "endDate",
                "geoLocationBreakdown",
                "reportGranularity",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOutbrainAmplifyConfigurationCredentials:getSourceOutbrainAmplifyConfigurationCredentials": {
            "properties": {
                "sourceOutbrainAmplifyAuthenticationMethodAccessToken": {
                    "$ref": "#/types/airbyte:index/getSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodAccessToken:getSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodAccessToken"
                },
                "sourceOutbrainAmplifyAuthenticationMethodUsernamePassword": {
                    "$ref": "#/types/airbyte:index/getSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodUsernamePassword:getSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodUsernamePassword"
                },
                "sourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken": {
                    "$ref": "#/types/airbyte:index/getSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken:getSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken"
                },
                "sourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword": {
                    "$ref": "#/types/airbyte:index/getSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword:getSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword"
                }
            },
            "type": "object",
            "required": [
                "sourceOutbrainAmplifyAuthenticationMethodAccessToken",
                "sourceOutbrainAmplifyAuthenticationMethodUsernamePassword",
                "sourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken",
                "sourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodAccessToken:getSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodAccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodUsernamePassword:getSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodUsernamePassword": {
            "properties": {
                "password": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "password",
                "type",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken:getSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword:getSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword": {
            "properties": {
                "password": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "password",
                "type",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceOutreachConfiguration:getSourceOutreachConfiguration": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The Client ID of your Outreach developer application.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The Client Secret of your Outreach developer application.\n"
                },
                "redirectUri": {
                    "type": "string",
                    "description": "A Redirect URI is the location where the authorization server sends the user once the app has been successfully authorized and granted an authorization code or access token.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "The token for obtaining the new access token.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"outreach\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data for Outreach API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "redirectUri",
                "refreshToken",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePaypalTransactionConfiguration:getSourcePaypalTransactionConfiguration": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The Client ID of your Paypal developer application.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The Client Secret of your Paypal developer application.\n"
                },
                "isSandbox": {
                    "type": "boolean",
                    "description": "Determines whether to use the sandbox or production environment.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "The key to refresh the expired access token.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"paypal-transaction\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Start Date for data extraction in \\n\\nISO format\\n\\n. Date must be in range from 3 years till 12 hrs before present time.\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "isSandbox",
                "refreshToken",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePaystackConfiguration:getSourcePaystackConfiguration": {
            "properties": {
                "lookbackWindowDays": {
                    "type": "integer",
                    "description": "When set, the connector will always reload data from the past N days, where N is the value set here. This is useful if your data is updated after creation.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The Paystack API key (usually starts with 'sk*live*'; find yours \\n\\nhere\\n\\n).\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"paystack\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "lookbackWindowDays",
                "secretKey",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePendoConfiguration:getSourcePendoConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"pendo\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePersistiqConfiguration:getSourcePersistiqConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "PersistIq API Key. See the \\n\\ndocs\\n\\n for more information on where to find that key.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"persistiq\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePexelsApiConfiguration:getSourcePexelsApiConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key is required to access pexels api, For getting your's goto https://www.pexels.com/api/documentation and create account for free.\n"
                },
                "color": {
                    "type": "string",
                    "description": "Optional, Desired photo color. Supported colors red, orange, yellow, green, turquoise, blue, violet, pink, brown, black, gray, white or any hexidecimal color code.\n"
                },
                "locale": {
                    "type": "string",
                    "description": "Optional, The locale of the search you are performing. The current supported locales are 'en-US' 'pt-BR' 'es-ES' 'ca-ES' 'de-DE' 'it-IT' 'fr-FR' 'sv-SE' 'id-ID' 'pl-PL' 'ja-JP' 'zh-TW' 'zh-CN' 'ko-KR' 'th-TH' 'nl-NL' 'hu-HU' 'vi-VN' 'cs-CZ' 'da-DK' 'fi-FI' 'uk-UA' 'el-GR' 'ro-RO' 'nb-NO' 'sk-SK' 'tr-TR' 'ru-RU'.\n"
                },
                "orientation": {
                    "type": "string",
                    "description": "Optional, Desired photo orientation. The current supported orientations are landscape, portrait or square\n"
                },
                "query": {
                    "type": "string",
                    "description": "Optional, the search query, Example Ocean, Tigers, Pears, etc.\n"
                },
                "size": {
                    "type": "string",
                    "description": "Optional, Minimum photo size. The current supported sizes are large(24MP), medium(12MP) or small(4MP).\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"pexels-api\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "color",
                "locale",
                "orientation",
                "query",
                "size",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePinterestConfiguration:getSourcePinterestConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourcePinterestConfigurationCredentials:getSourcePinterestConfigurationCredentials"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"pinterest\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "A date in the format YYYY-MM-DD. If you have not set a date, it would be defaulted to latest allowed date by api (89 days from today).\n"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Entity statuses based off of campaigns, ad_groups, and ads. If you do not have a status set, it will be ignored completely.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "sourceType",
                "startDate",
                "statuses"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePinterestConfigurationCredentials:getSourcePinterestConfigurationCredentials": {
            "properties": {
                "sourcePinterestAuthorizationMethodAccessToken": {
                    "$ref": "#/types/airbyte:index/getSourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodAccessToken:getSourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodAccessToken"
                },
                "sourcePinterestAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodOAuth20:getSourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodOAuth20"
                },
                "sourcePinterestUpdateAuthorizationMethodAccessToken": {
                    "$ref": "#/types/airbyte:index/getSourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodAccessToken:getSourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodAccessToken"
                },
                "sourcePinterestUpdateAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodOAuth20:getSourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodOAuth20"
                }
            },
            "type": "object",
            "required": [
                "sourcePinterestAuthorizationMethodAccessToken",
                "sourcePinterestAuthorizationMethodOAuth20",
                "sourcePinterestUpdateAuthorizationMethodAccessToken",
                "sourcePinterestUpdateAuthorizationMethodOAuth20"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodAccessToken:getSourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodAccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodOAuth20:getSourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodOAuth20": {
            "properties": {
                "authMethod": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authMethod",
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodAccessToken:getSourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodAccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodOAuth20:getSourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodOAuth20": {
            "properties": {
                "authMethod": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authMethod",
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePipedriveConfiguration:getSourcePipedriveConfiguration": {
            "properties": {
                "authorization": {
                    "$ref": "#/types/airbyte:index/getSourcePipedriveConfigurationAuthorization:getSourcePipedriveConfigurationAuthorization"
                },
                "replicationStartDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated. When specified and not None, then stream will behave as incremental\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"pipedrive\"]\n"
                }
            },
            "type": "object",
            "required": [
                "authorization",
                "replicationStartDate",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePipedriveConfigurationAuthorization:getSourcePipedriveConfigurationAuthorization": {
            "properties": {
                "apiToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "authType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePocketConfiguration:getSourcePocketConfiguration": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "The user's Pocket access token.\n"
                },
                "consumerKey": {
                    "type": "string",
                    "description": "Your application's Consumer Key.\n"
                },
                "contentType": {
                    "type": "string",
                    "description": "must be one of [\"article\", \"video\", \"image\"]\nSelect the content type of the items to retrieve.\n"
                },
                "detailType": {
                    "type": "string",
                    "description": "must be one of [\"simple\", \"complete\"]\nSelect the granularity of the information about each item.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Only return items from a particular `domain`.\n"
                },
                "favorite": {
                    "type": "boolean",
                    "description": "Retrieve only favorited items.\n"
                },
                "search": {
                    "type": "string",
                    "description": "Only return items whose title or url contain the `search` string.\n"
                },
                "since": {
                    "type": "string",
                    "description": "Only return items modified since the given timestamp.\n"
                },
                "sort": {
                    "type": "string",
                    "description": "must be one of [\"newest\", \"oldest\", \"title\", \"site\"]\nSort retrieved items by the given criteria.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"pocket\"]\n"
                },
                "state": {
                    "type": "string",
                    "description": "must be one of [\"unread\", \"archive\", \"all\"]\nSelect the state of the items to retrieve.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "Return only items tagged with this tag name. Use *untagged* for retrieving only untagged items.\n"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "consumerKey",
                "contentType",
                "detailType",
                "domain",
                "favorite",
                "search",
                "since",
                "sort",
                "sourceType",
                "state",
                "tag"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePokeapiConfiguration:getSourcePokeapiConfiguration": {
            "properties": {
                "pokemonName": {
                    "type": "string",
                    "description": "Pokemon requested from the API.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"pokeapi\"]\n"
                }
            },
            "type": "object",
            "required": [
                "pokemonName",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePolygonStockApiConfiguration:getSourcePolygonStockApiConfiguration": {
            "properties": {
                "adjusted": {
                    "type": "string",
                    "description": "Determines whether or not the results are adjusted for splits. By default, results are adjusted and set to true. Set this to false to get results that are NOT adjusted for splits.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "Your API ACCESS Key\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "The target date for the aggregate window.\n"
                },
                "limit": {
                    "type": "integer",
                    "description": "The target date for the aggregate window.\n"
                },
                "multiplier": {
                    "type": "integer",
                    "description": "The size of the timespan multiplier.\n"
                },
                "sort": {
                    "type": "string",
                    "description": "Sort the results by timestamp. asc will return results in ascending order (oldest at the top), desc will return results in descending order (newest at the top).\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"polygon-stock-api\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The beginning date for the aggregate window.\n"
                },
                "stocksTicker": {
                    "type": "string",
                    "description": "The exchange symbol that this item is traded under.\n"
                },
                "timespan": {
                    "type": "string",
                    "description": "The size of the time window.\n"
                }
            },
            "type": "object",
            "required": [
                "adjusted",
                "apiKey",
                "endDate",
                "limit",
                "multiplier",
                "sort",
                "sourceType",
                "startDate",
                "stocksTicker",
                "timespan"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePostgresConfiguration:getSourcePostgresConfiguration": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database.\n"
                },
                "host": {
                    "type": "string",
                    "description": "Hostname of the database.\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '\u0026'. (Eg. key1=value1\u0026key2=value2\u0026key3=value3). For more information read about \\n\\nJDBC URL parameters\\n\\n.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password associated with the username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the database.\n"
                },
                "replicationMethod": {
                    "$ref": "#/types/airbyte:index/getSourcePostgresConfigurationReplicationMethod:getSourcePostgresConfigurationReplicationMethod",
                    "description": "Replication method for extracting data from the database.\n"
                },
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of schemas (case sensitive) to sync from. Defaults to public.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"postgres\"]\n"
                },
                "sslMode": {
                    "$ref": "#/types/airbyte:index/getSourcePostgresConfigurationSslMode:getSourcePostgresConfigurationSslMode",
                    "description": "SSL connection modes.\nRead more \\n\\n in the docs\\n\\n.\n"
                },
                "tunnelMethod": {
                    "$ref": "#/types/airbyte:index/getSourcePostgresConfigurationTunnelMethod:getSourcePostgresConfigurationTunnelMethod",
                    "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "host",
                "jdbcUrlParams",
                "password",
                "port",
                "replicationMethod",
                "schemas",
                "sourceType",
                "sslMode",
                "tunnelMethod",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePostgresConfigurationReplicationMethod:getSourcePostgresConfigurationReplicationMethod": {
            "properties": {
                "sourcePostgresReplicationMethodLogicalReplicationCdc": {
                    "$ref": "#/types/airbyte:index/getSourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodLogicalReplicationCdc:getSourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodLogicalReplicationCdc"
                },
                "sourcePostgresReplicationMethodStandard": {
                    "$ref": "#/types/airbyte:index/getSourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandard:getSourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandard"
                },
                "sourcePostgresReplicationMethodStandardXmin": {
                    "$ref": "#/types/airbyte:index/getSourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardXmin:getSourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardXmin"
                },
                "sourcePostgresUpdateReplicationMethodLogicalReplicationCdc": {
                    "$ref": "#/types/airbyte:index/getSourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodLogicalReplicationCdc:getSourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodLogicalReplicationCdc"
                },
                "sourcePostgresUpdateReplicationMethodStandard": {
                    "$ref": "#/types/airbyte:index/getSourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandard:getSourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandard"
                },
                "sourcePostgresUpdateReplicationMethodStandardXmin": {
                    "$ref": "#/types/airbyte:index/getSourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardXmin:getSourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardXmin"
                }
            },
            "type": "object",
            "required": [
                "sourcePostgresReplicationMethodLogicalReplicationCdc",
                "sourcePostgresReplicationMethodStandard",
                "sourcePostgresReplicationMethodStandardXmin",
                "sourcePostgresUpdateReplicationMethodLogicalReplicationCdc",
                "sourcePostgresUpdateReplicationMethodStandard",
                "sourcePostgresUpdateReplicationMethodStandardXmin"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodLogicalReplicationCdc:getSourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodLogicalReplicationCdc": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "initialWaitingSeconds": {
                    "type": "integer"
                },
                "lsnCommitBehaviour": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "plugin": {
                    "type": "string"
                },
                "publication": {
                    "type": "string"
                },
                "queueSize": {
                    "type": "integer"
                },
                "replicationSlot": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "initialWaitingSeconds",
                "lsnCommitBehaviour",
                "method",
                "plugin",
                "publication",
                "queueSize",
                "replicationSlot"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandard:getSourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandard": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardXmin:getSourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardXmin": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodLogicalReplicationCdc:getSourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodLogicalReplicationCdc": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "initialWaitingSeconds": {
                    "type": "integer"
                },
                "lsnCommitBehaviour": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "plugin": {
                    "type": "string"
                },
                "publication": {
                    "type": "string"
                },
                "queueSize": {
                    "type": "integer"
                },
                "replicationSlot": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "initialWaitingSeconds",
                "lsnCommitBehaviour",
                "method",
                "plugin",
                "publication",
                "queueSize",
                "replicationSlot"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandard:getSourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandard": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardXmin:getSourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardXmin": {
            "properties": {
                "method": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "method"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePostgresConfigurationSslMode:getSourcePostgresConfigurationSslMode": {
            "properties": {
                "sourcePostgresSslModesAllow": {
                    "$ref": "#/types/airbyte:index/getSourcePostgresConfigurationSslModeSourcePostgresSslModesAllow:getSourcePostgresConfigurationSslModeSourcePostgresSslModesAllow"
                },
                "sourcePostgresSslModesDisable": {
                    "$ref": "#/types/airbyte:index/getSourcePostgresConfigurationSslModeSourcePostgresSslModesDisable:getSourcePostgresConfigurationSslModeSourcePostgresSslModesDisable"
                },
                "sourcePostgresSslModesPrefer": {
                    "$ref": "#/types/airbyte:index/getSourcePostgresConfigurationSslModeSourcePostgresSslModesPrefer:getSourcePostgresConfigurationSslModeSourcePostgresSslModesPrefer"
                },
                "sourcePostgresSslModesRequire": {
                    "$ref": "#/types/airbyte:index/getSourcePostgresConfigurationSslModeSourcePostgresSslModesRequire:getSourcePostgresConfigurationSslModeSourcePostgresSslModesRequire"
                },
                "sourcePostgresSslModesVerifyCa": {
                    "$ref": "#/types/airbyte:index/getSourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyCa:getSourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyCa"
                },
                "sourcePostgresSslModesVerifyFull": {
                    "$ref": "#/types/airbyte:index/getSourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyFull:getSourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyFull"
                },
                "sourcePostgresUpdateSslModesAllow": {
                    "$ref": "#/types/airbyte:index/getSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesAllow:getSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesAllow"
                },
                "sourcePostgresUpdateSslModesDisable": {
                    "$ref": "#/types/airbyte:index/getSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesDisable:getSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesDisable"
                },
                "sourcePostgresUpdateSslModesPrefer": {
                    "$ref": "#/types/airbyte:index/getSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesPrefer:getSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesPrefer"
                },
                "sourcePostgresUpdateSslModesRequire": {
                    "$ref": "#/types/airbyte:index/getSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesRequire:getSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesRequire"
                },
                "sourcePostgresUpdateSslModesVerifyCa": {
                    "$ref": "#/types/airbyte:index/getSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyCa:getSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyCa"
                },
                "sourcePostgresUpdateSslModesVerifyFull": {
                    "$ref": "#/types/airbyte:index/getSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyFull:getSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyFull"
                }
            },
            "type": "object",
            "required": [
                "sourcePostgresSslModesAllow",
                "sourcePostgresSslModesDisable",
                "sourcePostgresSslModesPrefer",
                "sourcePostgresSslModesRequire",
                "sourcePostgresSslModesVerifyCa",
                "sourcePostgresSslModesVerifyFull",
                "sourcePostgresUpdateSslModesAllow",
                "sourcePostgresUpdateSslModesDisable",
                "sourcePostgresUpdateSslModesPrefer",
                "sourcePostgresUpdateSslModesRequire",
                "sourcePostgresUpdateSslModesVerifyCa",
                "sourcePostgresUpdateSslModesVerifyFull"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePostgresConfigurationSslModeSourcePostgresSslModesAllow:getSourcePostgresConfigurationSslModeSourcePostgresSslModesAllow": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePostgresConfigurationSslModeSourcePostgresSslModesDisable:getSourcePostgresConfigurationSslModeSourcePostgresSslModesDisable": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePostgresConfigurationSslModeSourcePostgresSslModesPrefer:getSourcePostgresConfigurationSslModeSourcePostgresSslModesPrefer": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePostgresConfigurationSslModeSourcePostgresSslModesRequire:getSourcePostgresConfigurationSslModeSourcePostgresSslModesRequire": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyCa:getSourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyCa": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "clientCertificate",
                "clientKey",
                "clientKeyPassword",
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyFull:getSourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyFull": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "clientCertificate",
                "clientKey",
                "clientKeyPassword",
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesAllow:getSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesAllow": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesDisable:getSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesDisable": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesPrefer:getSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesPrefer": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesRequire:getSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesRequire": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyCa:getSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyCa": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "clientCertificate",
                "clientKey",
                "clientKeyPassword",
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyFull:getSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyFull": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "caCertificate": {
                    "type": "string"
                },
                "clientCertificate": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "clientKeyPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertificate",
                "clientCertificate",
                "clientKey",
                "clientKeyPassword",
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePostgresConfigurationTunnelMethod:getSourcePostgresConfigurationTunnelMethod": {
            "properties": {
                "sourcePostgresSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getSourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodNoTunnel:getSourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodNoTunnel"
                },
                "sourcePostgresSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodPasswordAuthentication:getSourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodPasswordAuthentication"
                },
                "sourcePostgresSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodSshKeyAuthentication:getSourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodSshKeyAuthentication"
                },
                "sourcePostgresUpdateSshTunnelMethodNoTunnel": {
                    "$ref": "#/types/airbyte:index/getSourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodNoTunnel:getSourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodNoTunnel"
                },
                "sourcePostgresUpdateSshTunnelMethodPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodPasswordAuthentication:getSourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodPasswordAuthentication"
                },
                "sourcePostgresUpdateSshTunnelMethodSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodSshKeyAuthentication:getSourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodSshKeyAuthentication"
                }
            },
            "type": "object",
            "required": [
                "sourcePostgresSshTunnelMethodNoTunnel",
                "sourcePostgresSshTunnelMethodPasswordAuthentication",
                "sourcePostgresSshTunnelMethodSshKeyAuthentication",
                "sourcePostgresUpdateSshTunnelMethodNoTunnel",
                "sourcePostgresUpdateSshTunnelMethodPasswordAuthentication",
                "sourcePostgresUpdateSshTunnelMethodSshKeyAuthentication"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodNoTunnel:getSourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodPasswordAuthentication:getSourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodSshKeyAuthentication:getSourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodNoTunnel:getSourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodNoTunnel": {
            "properties": {
                "tunnelMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodPasswordAuthentication:getSourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodPasswordAuthentication": {
            "properties": {
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                },
                "tunnelUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser",
                "tunnelUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodSshKeyAuthentication:getSourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodSshKeyAuthentication": {
            "properties": {
                "sshKey": {
                    "type": "string"
                },
                "tunnelHost": {
                    "type": "string"
                },
                "tunnelMethod": {
                    "type": "string"
                },
                "tunnelPort": {
                    "type": "integer"
                },
                "tunnelUser": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKey",
                "tunnelHost",
                "tunnelMethod",
                "tunnelPort",
                "tunnelUser"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePosthogConfiguration:getSourcePosthogConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key. See the \\n\\ndocs\\n\\n for information on how to generate this key.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base PostHog url. Defaults to PostHog Cloud (https://app.posthog.com).\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"posthog\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate the data. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "baseUrl",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePostmarkappConfiguration:getSourcePostmarkappConfiguration": {
            "properties": {
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"postmarkapp\"]\n"
                },
                "xPostmarkAccountToken": {
                    "type": "string",
                    "description": "API Key for account\n"
                },
                "xPostmarkServerToken": {
                    "type": "string",
                    "description": "API Key for server\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType",
                "xPostmarkAccountToken",
                "xPostmarkServerToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePrestashopConfiguration:getSourcePrestashopConfiguration": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Your PrestaShop access key. See \\n\\n the docs \\n\\n for info on how to obtain this.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"prestashop\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The Start date in the format YYYY-MM-DD.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Shop URL without trailing slash.\n"
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "sourceType",
                "startDate",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePublicApisConfiguration:getSourcePublicApisConfiguration": {
            "properties": {
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"public-apis\"]\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePunkApiConfiguration:getSourcePunkApiConfiguration": {
            "properties": {
                "brewedAfter": {
                    "type": "string",
                    "description": "To extract specific data with Unique ID\n"
                },
                "brewedBefore": {
                    "type": "string",
                    "description": "To extract specific data with Unique ID\n"
                },
                "id": {
                    "type": "string",
                    "description": "To extract specific data with Unique ID\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"punk-api\"]\n"
                }
            },
            "type": "object",
            "required": [
                "brewedAfter",
                "brewedBefore",
                "id",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourcePypiConfiguration:getSourcePypiConfiguration": {
            "properties": {
                "projectName": {
                    "type": "string",
                    "description": "Name of the project/package. Can only be in lowercase with hyphen. This is the name used using pip command for installing the package.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"pypi\"]\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of the project/package.  Use it to find a particular release instead of all releases.\n"
                }
            },
            "type": "object",
            "required": [
                "projectName",
                "sourceType",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceQualarooConfiguration:getSourceQualarooConfiguration": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "A Qualaroo token. See the \\n\\ndocs\\n\\n for instructions on how to generate it.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"qualaroo\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                },
                "surveyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of the surveys from which you'd like to replicate data. If left empty, data from all surveys to which you have access will be replicated.\n"
                },
                "token": {
                    "type": "string",
                    "description": "A Qualaroo token. See the \\n\\ndocs\\n\\n for instructions on how to generate it.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "sourceType",
                "startDate",
                "surveyIds",
                "token"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceQuickbooksConfiguration:getSourceQuickbooksConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceQuickbooksConfigurationCredentials:getSourceQuickbooksConfigurationCredentials"
                },
                "sandbox": {
                    "type": "boolean",
                    "description": "Determines whether to use the sandbox or production environment.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"quickbooks\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The default value to use if no bookmark exists for an endpoint (rfc3339 date string). E.g, 2021-03-20T00:00:00Z. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "sandbox",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceQuickbooksConfigurationCredentials:getSourceQuickbooksConfigurationCredentials": {
            "properties": {
                "sourceQuickbooksAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceQuickbooksConfigurationCredentialsSourceQuickbooksAuthorizationMethodOAuth20:getSourceQuickbooksConfigurationCredentialsSourceQuickbooksAuthorizationMethodOAuth20"
                },
                "sourceQuickbooksUpdateAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceQuickbooksConfigurationCredentialsSourceQuickbooksUpdateAuthorizationMethodOAuth20:getSourceQuickbooksConfigurationCredentialsSourceQuickbooksUpdateAuthorizationMethodOAuth20"
                }
            },
            "type": "object",
            "required": [
                "sourceQuickbooksAuthorizationMethodOAuth20",
                "sourceQuickbooksUpdateAuthorizationMethodOAuth20"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceQuickbooksConfigurationCredentialsSourceQuickbooksAuthorizationMethodOAuth20:getSourceQuickbooksConfigurationCredentialsSourceQuickbooksAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "realmId": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret",
                "realmId",
                "refreshToken",
                "tokenExpiryDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceQuickbooksConfigurationCredentialsSourceQuickbooksUpdateAuthorizationMethodOAuth20:getSourceQuickbooksConfigurationCredentialsSourceQuickbooksUpdateAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "realmId": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret",
                "realmId",
                "refreshToken",
                "tokenExpiryDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceRailzConfiguration:getSourceRailzConfiguration": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "Client ID (client_id)\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "Secret key (secret_key)\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"railz\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Start date\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "secretKey",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceRechargeConfiguration:getSourceRechargeConfiguration": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "The value of the Access Token generated. See the \\n\\ndocs\\n\\n for more information.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"recharge\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data for Recharge API, in the format YYYY-MM-DDT00:00:00Z. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceRecreationConfiguration:getSourceRecreationConfiguration": {
            "properties": {
                "apikey": {
                    "type": "string",
                    "description": "API Key\n"
                },
                "queryCampsites": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"recreation\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apikey",
                "queryCampsites",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceRecruiteeConfiguration:getSourceRecruiteeConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Recruitee API Key. See \\n\\nhere\\n\\n.\n"
                },
                "companyId": {
                    "type": "integer",
                    "description": "Recruitee Company ID. You can also find this ID on the \\n\\nRecruitee API tokens page\\n\\n.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"recruitee\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "companyId",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceRecurlyConfiguration:getSourceRecurlyConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Recurly API Key. See the  \\n\\ndocs\\n\\n for more information on how to generate this key.\n"
                },
                "beginTime": {
                    "type": "string",
                    "description": "ISO8601 timestamp from which the replication from Recurly API will start from.\n"
                },
                "endTime": {
                    "type": "string",
                    "description": "ISO8601 timestamp to which the replication from Recurly API will stop. Records after that date won't be imported.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"recurly\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "beginTime",
                "endTime",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceRedshiftConfiguration:getSourceRedshiftConfiguration": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database.\n"
                },
                "host": {
                    "type": "string",
                    "description": "Host Endpoint of the Redshift Cluster (must include the cluster-id, region and end with .redshift.amazonaws.com).\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '\u0026'. (example: key1=value1\u0026key2=value2\u0026key3=value3).\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password associated with the username.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the database.\n"
                },
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of schemas to sync from. Specify one or more explicitly or keep empty to process all schemas. Schema names are case sensitive.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"redshift\"]\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use to access the database.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "host",
                "jdbcUrlParams",
                "password",
                "port",
                "schemas",
                "sourceType",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceRetentlyConfiguration:getSourceRetentlyConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceRetentlyConfigurationCredentials:getSourceRetentlyConfigurationCredentials",
                    "description": "Choose how to authenticate to Retently\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"retently\"]\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceRetentlyConfigurationCredentials:getSourceRetentlyConfigurationCredentials": {
            "properties": {
                "sourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth": {
                    "$ref": "#/types/airbyte:index/getSourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth:getSourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth"
                },
                "sourceRetentlyAuthenticationMechanismAuthenticateWithApiToken": {
                    "$ref": "#/types/airbyte:index/getSourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateWithApiToken:getSourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateWithApiToken"
                },
                "sourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth": {
                    "$ref": "#/types/airbyte:index/getSourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth:getSourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth"
                },
                "sourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiToken": {
                    "$ref": "#/types/airbyte:index/getSourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiToken:getSourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiToken"
                }
            },
            "type": "object",
            "required": [
                "sourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth",
                "sourceRetentlyAuthenticationMechanismAuthenticateWithApiToken",
                "sourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth",
                "sourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth:getSourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateWithApiToken:getSourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateWithApiToken": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "apiKey": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "authType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth:getSourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiToken:getSourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiToken": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "apiKey": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "authType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceRkiCovidConfiguration:getSourceRkiCovidConfiguration": {
            "properties": {
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"rki-covid\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date in the format 2017-01-25. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceRssConfiguration:getSourceRssConfiguration": {
            "properties": {
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"rss\"]\n"
                },
                "url": {
                    "type": "string",
                    "description": "RSS Feed URL\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceS3Configuration:getSourceS3Configuration": {
            "properties": {
                "dataset": {
                    "type": "string",
                    "description": "The name of the stream you would like this source to output. Can contain letters, numbers, or underscores.\n"
                },
                "format": {
                    "$ref": "#/types/airbyte:index/getSourceS3ConfigurationFormat:getSourceS3ConfigurationFormat",
                    "description": "The format of the files you'd like to replicate\n"
                },
                "pathPattern": {
                    "type": "string",
                    "description": "A regular expression which tells the connector which files to replicate. All files which match this pattern will be replicated. Use | to separate multiple patterns. See \\n\\nthis page\\n\\n to understand pattern syntax (GLOBSTAR and SPLIT flags are enabled). Use pattern \\n\\n**\\n\\n to pick up all files.\n"
                },
                "provider": {
                    "$ref": "#/types/airbyte:index/getSourceS3ConfigurationProvider:getSourceS3ConfigurationProvider",
                    "description": "Use this to load files from S3 or S3-compatible services\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Optionally provide a schema to enforce, as a valid JSON string. Ensure this is a mapping of \\n\\n{ \"column\" : \"type\" }\\n\\n, where types are valid \\n\\nJSON Schema datatypes\\n\\n. Leave as {} to auto-infer the schema.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"s3\"]\n"
                }
            },
            "type": "object",
            "required": [
                "dataset",
                "format",
                "pathPattern",
                "provider",
                "schema",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceS3ConfigurationFormat:getSourceS3ConfigurationFormat": {
            "properties": {
                "sourceS3FileFormatAvro": {
                    "$ref": "#/types/airbyte:index/getSourceS3ConfigurationFormatSourceS3FileFormatAvro:getSourceS3ConfigurationFormatSourceS3FileFormatAvro"
                },
                "sourceS3FileFormatCsv": {
                    "$ref": "#/types/airbyte:index/getSourceS3ConfigurationFormatSourceS3FileFormatCsv:getSourceS3ConfigurationFormatSourceS3FileFormatCsv"
                },
                "sourceS3FileFormatJsonl": {
                    "$ref": "#/types/airbyte:index/getSourceS3ConfigurationFormatSourceS3FileFormatJsonl:getSourceS3ConfigurationFormatSourceS3FileFormatJsonl"
                },
                "sourceS3FileFormatParquet": {
                    "$ref": "#/types/airbyte:index/getSourceS3ConfigurationFormatSourceS3FileFormatParquet:getSourceS3ConfigurationFormatSourceS3FileFormatParquet"
                },
                "sourceS3UpdateFileFormatAvro": {
                    "$ref": "#/types/airbyte:index/getSourceS3ConfigurationFormatSourceS3UpdateFileFormatAvro:getSourceS3ConfigurationFormatSourceS3UpdateFileFormatAvro"
                },
                "sourceS3UpdateFileFormatCsv": {
                    "$ref": "#/types/airbyte:index/getSourceS3ConfigurationFormatSourceS3UpdateFileFormatCsv:getSourceS3ConfigurationFormatSourceS3UpdateFileFormatCsv"
                },
                "sourceS3UpdateFileFormatJsonl": {
                    "$ref": "#/types/airbyte:index/getSourceS3ConfigurationFormatSourceS3UpdateFileFormatJsonl:getSourceS3ConfigurationFormatSourceS3UpdateFileFormatJsonl"
                },
                "sourceS3UpdateFileFormatParquet": {
                    "$ref": "#/types/airbyte:index/getSourceS3ConfigurationFormatSourceS3UpdateFileFormatParquet:getSourceS3ConfigurationFormatSourceS3UpdateFileFormatParquet"
                }
            },
            "type": "object",
            "required": [
                "sourceS3FileFormatAvro",
                "sourceS3FileFormatCsv",
                "sourceS3FileFormatJsonl",
                "sourceS3FileFormatParquet",
                "sourceS3UpdateFileFormatAvro",
                "sourceS3UpdateFileFormatCsv",
                "sourceS3UpdateFileFormatJsonl",
                "sourceS3UpdateFileFormatParquet"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceS3ConfigurationFormatSourceS3FileFormatAvro:getSourceS3ConfigurationFormatSourceS3FileFormatAvro": {
            "properties": {
                "filetype": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "filetype"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceS3ConfigurationFormatSourceS3FileFormatCsv:getSourceS3ConfigurationFormatSourceS3FileFormatCsv": {
            "properties": {
                "additionalReaderOptions": {
                    "type": "string"
                },
                "advancedOptions": {
                    "type": "string"
                },
                "blockSize": {
                    "type": "integer"
                },
                "delimiter": {
                    "type": "string"
                },
                "doubleQuote": {
                    "type": "boolean"
                },
                "encoding": {
                    "type": "string"
                },
                "escapeChar": {
                    "type": "string"
                },
                "filetype": {
                    "type": "string"
                },
                "inferDatatypes": {
                    "type": "boolean"
                },
                "newlinesInValues": {
                    "type": "boolean"
                },
                "quoteChar": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "additionalReaderOptions",
                "advancedOptions",
                "blockSize",
                "delimiter",
                "doubleQuote",
                "encoding",
                "escapeChar",
                "filetype",
                "inferDatatypes",
                "newlinesInValues",
                "quoteChar"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceS3ConfigurationFormatSourceS3FileFormatJsonl:getSourceS3ConfigurationFormatSourceS3FileFormatJsonl": {
            "properties": {
                "blockSize": {
                    "type": "integer"
                },
                "filetype": {
                    "type": "string"
                },
                "newlinesInValues": {
                    "type": "boolean"
                },
                "unexpectedFieldBehavior": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "blockSize",
                "filetype",
                "newlinesInValues",
                "unexpectedFieldBehavior"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceS3ConfigurationFormatSourceS3FileFormatParquet:getSourceS3ConfigurationFormatSourceS3FileFormatParquet": {
            "properties": {
                "batchSize": {
                    "type": "integer"
                },
                "bufferSize": {
                    "type": "integer"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filetype": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "batchSize",
                "bufferSize",
                "columns",
                "filetype"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceS3ConfigurationFormatSourceS3UpdateFileFormatAvro:getSourceS3ConfigurationFormatSourceS3UpdateFileFormatAvro": {
            "properties": {
                "filetype": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "filetype"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceS3ConfigurationFormatSourceS3UpdateFileFormatCsv:getSourceS3ConfigurationFormatSourceS3UpdateFileFormatCsv": {
            "properties": {
                "additionalReaderOptions": {
                    "type": "string"
                },
                "advancedOptions": {
                    "type": "string"
                },
                "blockSize": {
                    "type": "integer"
                },
                "delimiter": {
                    "type": "string"
                },
                "doubleQuote": {
                    "type": "boolean"
                },
                "encoding": {
                    "type": "string"
                },
                "escapeChar": {
                    "type": "string"
                },
                "filetype": {
                    "type": "string"
                },
                "inferDatatypes": {
                    "type": "boolean"
                },
                "newlinesInValues": {
                    "type": "boolean"
                },
                "quoteChar": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "additionalReaderOptions",
                "advancedOptions",
                "blockSize",
                "delimiter",
                "doubleQuote",
                "encoding",
                "escapeChar",
                "filetype",
                "inferDatatypes",
                "newlinesInValues",
                "quoteChar"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceS3ConfigurationFormatSourceS3UpdateFileFormatJsonl:getSourceS3ConfigurationFormatSourceS3UpdateFileFormatJsonl": {
            "properties": {
                "blockSize": {
                    "type": "integer"
                },
                "filetype": {
                    "type": "string"
                },
                "newlinesInValues": {
                    "type": "boolean"
                },
                "unexpectedFieldBehavior": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "blockSize",
                "filetype",
                "newlinesInValues",
                "unexpectedFieldBehavior"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceS3ConfigurationFormatSourceS3UpdateFileFormatParquet:getSourceS3ConfigurationFormatSourceS3UpdateFileFormatParquet": {
            "properties": {
                "batchSize": {
                    "type": "integer"
                },
                "bufferSize": {
                    "type": "integer"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filetype": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "batchSize",
                "bufferSize",
                "columns",
                "filetype"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceS3ConfigurationProvider:getSourceS3ConfigurationProvider": {
            "properties": {
                "awsAccessKeyId": {
                    "type": "string"
                },
                "awsSecretAccessKey": {
                    "type": "string"
                },
                "bucket": {
                    "type": "string"
                },
                "endpoint": {
                    "type": "string"
                },
                "pathPrefix": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "awsAccessKeyId",
                "awsSecretAccessKey",
                "bucket",
                "endpoint",
                "pathPrefix",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSalesforceConfiguration:getSourceSalesforceConfiguration": {
            "properties": {
                "authType": {
                    "type": "string",
                    "description": "must be one of [\"Client\"]\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "Enter your Salesforce developer application's \\n\\nClient ID\\n\\n\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Enter your Salesforce developer application's \\n\\nClient secret\\n\\n\n"
                },
                "forceUseBulkApi": {
                    "type": "boolean",
                    "description": "Toggle to use Bulk API (this might cause empty fields for some streams)\n"
                },
                "isSandbox": {
                    "type": "boolean",
                    "description": "Toggle if you're using a \\n\\nSalesforce Sandbox\\n\\n\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "Enter your application's \\n\\nSalesforce Refresh Token\\n\\n used for Airbyte to access your Salesforce account.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"salesforce\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Enter the date (or date-time) in the YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. Airbyte will replicate the data updated on and after this date. If this field is blank, Airbyte will replicate the data for last two years.\n"
                },
                "streamsCriterias": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/airbyte:index/getSourceSalesforceConfigurationStreamsCriteria:getSourceSalesforceConfigurationStreamsCriteria"
                    },
                    "description": "Add filters to select only required stream based on `SObject` name. Use this field to filter which tables are displayed by this connector. This is useful if your Salesforce account has a large number of tables (\u003e1000), in which case you may find it easier to navigate the UI and speed up the connector's performance if you restrict the tables displayed by this connector.\n"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId",
                "clientSecret",
                "forceUseBulkApi",
                "isSandbox",
                "refreshToken",
                "sourceType",
                "startDate",
                "streamsCriterias"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSalesforceConfigurationStreamsCriteria:getSourceSalesforceConfigurationStreamsCriteria": {
            "properties": {
                "criteria": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "criteria",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSalesloftConfiguration:getSourceSalesloftConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceSalesloftConfigurationCredentials:getSourceSalesloftConfigurationCredentials"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"salesloft\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data for Salesloft API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSalesloftConfigurationCredentials:getSourceSalesloftConfigurationCredentials": {
            "properties": {
                "sourceSalesloftCredentialsAuthenticateViaApiKey": {
                    "$ref": "#/types/airbyte:index/getSourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaApiKey:getSourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaApiKey"
                },
                "sourceSalesloftCredentialsAuthenticateViaOAuth": {
                    "$ref": "#/types/airbyte:index/getSourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaOAuth:getSourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaOAuth"
                },
                "sourceSalesloftUpdateCredentialsAuthenticateViaApiKey": {
                    "$ref": "#/types/airbyte:index/getSourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaApiKey:getSourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaApiKey"
                },
                "sourceSalesloftUpdateCredentialsAuthenticateViaOAuth": {
                    "$ref": "#/types/airbyte:index/getSourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaOAuth:getSourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaOAuth"
                }
            },
            "type": "object",
            "required": [
                "sourceSalesloftCredentialsAuthenticateViaApiKey",
                "sourceSalesloftCredentialsAuthenticateViaOAuth",
                "sourceSalesloftUpdateCredentialsAuthenticateViaApiKey",
                "sourceSalesloftUpdateCredentialsAuthenticateViaOAuth"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaApiKey:getSourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaApiKey": {
            "properties": {
                "apiKey": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "authType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaOAuth:getSourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaOAuth": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken",
                "tokenExpiryDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaApiKey:getSourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaApiKey": {
            "properties": {
                "apiKey": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "authType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaOAuth:getSourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaOAuth": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken",
                "tokenExpiryDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSapFieldglassConfiguration:getSourceSapFieldglassConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"sap-fieldglass\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSecodaConfiguration:getSourceSecodaConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Your API Access Key. See \\n\\nhere\\n\\n. The key is case sensitive.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"secoda\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSendgridConfiguration:getSourceSendgridConfiguration": {
            "properties": {
                "apikey": {
                    "type": "string",
                    "description": "API Key, use \\n\\nadmin\\n\\n to generate this key.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"sendgrid\"]\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "Start time in ISO8601 format. Any data before this time point will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "apikey",
                "sourceType",
                "startTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSendinblueConfiguration:getSourceSendinblueConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Your API Key. See \\n\\nhere\\n\\n.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"sendinblue\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSenseforceConfiguration:getSourceSenseforceConfiguration": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Your API access token. See \\n\\nhere\\n\\n. The toke is case sensitive.\n"
                },
                "backendUrl": {
                    "type": "string",
                    "description": "Your Senseforce API backend URL. This is the URL shown during the Login screen. See \\n\\nhere\\n\\n for more details. (Note: Most Senseforce backend APIs have the term 'galaxy' in their ULR)\n"
                },
                "datasetId": {
                    "type": "string",
                    "description": "The ID of the dataset you want to synchronize. The ID can be found in the URL when opening the dataset. See \\n\\nhere\\n\\n for more details. (Note: As the Senseforce API only allows to synchronize a specific dataset, each dataset you  want to synchronize needs to be implemented as a separate airbyte source).\n"
                },
                "sliceRange": {
                    "type": "integer",
                    "description": "The time increment used by the connector when requesting data from the Senseforce API. The bigger the value is, the less requests will be made and faster the sync will be. On the other hand, the more seldom the state is persisted and the more likely one could run into rate limites.  Furthermore, consider that large chunks of time might take a long time for the Senseforce query to return data - meaning it could take in effect longer than with more smaller time slices. If there are a lot of data per day, set this setting to 1. If there is only very little data per day, you might change the setting to 10 or more.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"senseforce\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25. Only data with \"Timestamp\" after this date will be replicated. Important note: This start date must be set to the first day of where your dataset provides data.  If your dataset has data from 2020-10-10 10:21:10, set the start_date to 2020-10-10 or later\n"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "backendUrl",
                "datasetId",
                "sliceRange",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSentryConfiguration:getSourceSentryConfiguration": {
            "properties": {
                "authToken": {
                    "type": "string",
                    "description": "Log into Sentry and then \\n\\ncreate authentication tokens\\n\\n.For self-hosted, you can find or create authentication tokens by visiting \"{instance*url*prefix}/settings/account/api/auth-tokens/\"\n"
                },
                "discoverFields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Fields to retrieve when fetching discover events\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Host name of Sentry API server.For self-hosted, specify your host name here. Otherwise, leave it empty.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the groups belong to.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name (slug) of the Project you want to sync.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"sentry\"]\n"
                }
            },
            "type": "object",
            "required": [
                "authToken",
                "discoverFields",
                "hostname",
                "organization",
                "project",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSftpBulkConfiguration:getSourceSftpBulkConfiguration": {
            "properties": {
                "fileMostRecent": {
                    "type": "boolean",
                    "description": "Sync only the most recent file for the configured folder path and file pattern\n"
                },
                "filePattern": {
                    "type": "string",
                    "description": "The regular expression to specify files for sync in a chosen Folder Path\n"
                },
                "fileType": {
                    "type": "string",
                    "description": "must be one of [\"csv\", \"json\"]\nThe file type you want to sync. Currently only 'csv' and 'json' files are supported.\n"
                },
                "folderPath": {
                    "type": "string",
                    "description": "The directory to search files for sync\n"
                },
                "host": {
                    "type": "string",
                    "description": "The server host address\n"
                },
                "password": {
                    "type": "string",
                    "description": "OS-level password for logging into the jump server host\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The server port\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private key\n"
                },
                "separator": {
                    "type": "string",
                    "description": "The separator used in the CSV files. Define None if you want to use the Sniffer functionality\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"sftp-bulk\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data for all incremental streams, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.\n"
                },
                "streamName": {
                    "type": "string",
                    "description": "The name of the stream or table you want to create\n"
                },
                "username": {
                    "type": "string",
                    "description": "The server user\n"
                }
            },
            "type": "object",
            "required": [
                "fileMostRecent",
                "filePattern",
                "fileType",
                "folderPath",
                "host",
                "password",
                "port",
                "privateKey",
                "separator",
                "sourceType",
                "startDate",
                "streamName",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSftpConfiguration:getSourceSftpConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceSftpConfigurationCredentials:getSourceSftpConfigurationCredentials",
                    "description": "The server authentication method\n"
                },
                "filePattern": {
                    "type": "string",
                    "description": "The regular expression to specify files for sync in a chosen Folder Path\n"
                },
                "fileTypes": {
                    "type": "string",
                    "description": "Coma separated file types. Currently only 'csv' and 'json' types are supported.\n"
                },
                "folderPath": {
                    "type": "string",
                    "description": "The directory to search files for sync\n"
                },
                "host": {
                    "type": "string",
                    "description": "The server host address\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The server port\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"sftp\"]\n"
                },
                "user": {
                    "type": "string",
                    "description": "The server user\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "filePattern",
                "fileTypes",
                "folderPath",
                "host",
                "port",
                "sourceType",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSftpConfigurationCredentials:getSourceSftpConfigurationCredentials": {
            "properties": {
                "sourceSftpAuthenticationWildcardPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardPasswordAuthentication:getSourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardPasswordAuthentication"
                },
                "sourceSftpAuthenticationWildcardSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardSshKeyAuthentication:getSourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardSshKeyAuthentication"
                },
                "sourceSftpUpdateAuthenticationWildcardPasswordAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardPasswordAuthentication:getSourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardPasswordAuthentication"
                },
                "sourceSftpUpdateAuthenticationWildcardSshKeyAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardSshKeyAuthentication:getSourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardSshKeyAuthentication"
                }
            },
            "type": "object",
            "required": [
                "sourceSftpAuthenticationWildcardPasswordAuthentication",
                "sourceSftpAuthenticationWildcardSshKeyAuthentication",
                "sourceSftpUpdateAuthenticationWildcardPasswordAuthentication",
                "sourceSftpUpdateAuthenticationWildcardSshKeyAuthentication"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardPasswordAuthentication:getSourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardPasswordAuthentication": {
            "properties": {
                "authMethod": {
                    "type": "string"
                },
                "authUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authMethod",
                "authUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardSshKeyAuthentication:getSourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardSshKeyAuthentication": {
            "properties": {
                "authMethod": {
                    "type": "string"
                },
                "authSshKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authMethod",
                "authSshKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardPasswordAuthentication:getSourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardPasswordAuthentication": {
            "properties": {
                "authMethod": {
                    "type": "string"
                },
                "authUserPassword": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authMethod",
                "authUserPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardSshKeyAuthentication:getSourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardSshKeyAuthentication": {
            "properties": {
                "authMethod": {
                    "type": "string"
                },
                "authSshKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authMethod",
                "authSshKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceShopifyConfiguration:getSourceShopifyConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceShopifyConfigurationCredentials:getSourceShopifyConfigurationCredentials",
                    "description": "The authorization method to use to retrieve data from Shopify\n"
                },
                "shop": {
                    "type": "string",
                    "description": "The name of your Shopify store found in the URL. For example, if your URL was https://NAME.myshopify.com, then the name would be 'NAME' or 'NAME.myshopify.com'.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"shopify\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date you would like to replicate data from. Format: YYYY-MM-DD. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "shop",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceShopifyConfigurationCredentials:getSourceShopifyConfigurationCredentials": {
            "properties": {
                "sourceShopifyShopifyAuthorizationMethodApiPassword": {
                    "$ref": "#/types/airbyte:index/getSourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodApiPassword:getSourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodApiPassword"
                },
                "sourceShopifyShopifyAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodOAuth20:getSourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodOAuth20"
                },
                "sourceShopifyUpdateShopifyAuthorizationMethodApiPassword": {
                    "$ref": "#/types/airbyte:index/getSourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodApiPassword:getSourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodApiPassword"
                },
                "sourceShopifyUpdateShopifyAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodOAuth20:getSourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodOAuth20"
                }
            },
            "type": "object",
            "required": [
                "sourceShopifyShopifyAuthorizationMethodApiPassword",
                "sourceShopifyShopifyAuthorizationMethodOAuth20",
                "sourceShopifyUpdateShopifyAuthorizationMethodApiPassword",
                "sourceShopifyUpdateShopifyAuthorizationMethodOAuth20"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodApiPassword:getSourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodApiPassword": {
            "properties": {
                "apiPassword": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiPassword",
                "authMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodOAuth20:getSourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authMethod",
                "clientId",
                "clientSecret"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodApiPassword:getSourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodApiPassword": {
            "properties": {
                "apiPassword": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiPassword",
                "authMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodOAuth20:getSourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authMethod",
                "clientId",
                "clientSecret"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceShortioConfiguration:getSourceShortioConfiguration": {
            "properties": {
                "domainId": {
                    "type": "string"
                },
                "secretKey": {
                    "type": "string",
                    "description": "Short.io Secret Key\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"shortio\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "domainId",
                "secretKey",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSlackConfiguration:getSourceSlackConfiguration": {
            "properties": {
                "channelFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A channel name list (without leading '#' char) which limit the channels from which you'd like to sync. Empty list means no filter.\n"
                },
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceSlackConfigurationCredentials:getSourceSlackConfigurationCredentials",
                    "description": "Choose how to authenticate into Slack\n"
                },
                "joinChannels": {
                    "type": "boolean",
                    "description": "Whether to join all channels or to sync data only from channels the bot is already in.  If false, you'll need to manually add the bot to all the channels from which you'd like to sync messages.\n"
                },
                "lookbackWindow": {
                    "type": "integer",
                    "description": "How far into the past to look for messages in threads, default is 0 days\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"slack\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "channelFilters",
                "credentials",
                "joinChannels",
                "lookbackWindow",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSlackConfigurationCredentials:getSourceSlackConfigurationCredentials": {
            "properties": {
                "sourceSlackAuthenticationMechanismApiToken": {
                    "$ref": "#/types/airbyte:index/getSourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismApiToken:getSourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismApiToken"
                },
                "sourceSlackAuthenticationMechanismSignInViaSlackOAuth": {
                    "$ref": "#/types/airbyte:index/getSourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismSignInViaSlackOAuth:getSourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismSignInViaSlackOAuth"
                },
                "sourceSlackUpdateAuthenticationMechanismApiToken": {
                    "$ref": "#/types/airbyte:index/getSourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismApiToken:getSourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismApiToken"
                },
                "sourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth": {
                    "$ref": "#/types/airbyte:index/getSourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth:getSourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth"
                }
            },
            "type": "object",
            "required": [
                "sourceSlackAuthenticationMechanismApiToken",
                "sourceSlackAuthenticationMechanismSignInViaSlackOAuth",
                "sourceSlackUpdateAuthenticationMechanismApiToken",
                "sourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismApiToken:getSourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismApiToken": {
            "properties": {
                "apiToken": {
                    "type": "string"
                },
                "optionTitle": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "optionTitle"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismSignInViaSlackOAuth:getSourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismSignInViaSlackOAuth": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "optionTitle": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "clientId",
                "clientSecret",
                "optionTitle"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismApiToken:getSourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismApiToken": {
            "properties": {
                "apiToken": {
                    "type": "string"
                },
                "optionTitle": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "optionTitle"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth:getSourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "optionTitle": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "clientId",
                "clientSecret",
                "optionTitle"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSmailyConfiguration:getSourceSmailyConfiguration": {
            "properties": {
                "apiPassword": {
                    "type": "string",
                    "description": "API user password. See https://smaily.com/help/api/general/create-api-user/\n"
                },
                "apiSubdomain": {
                    "type": "string",
                    "description": "API Subdomain. See https://smaily.com/help/api/general/create-api-user/\n"
                },
                "apiUsername": {
                    "type": "string",
                    "description": "API user username. See https://smaily.com/help/api/general/create-api-user/\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"smaily\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiPassword",
                "apiSubdomain",
                "apiUsername",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSmartengageConfiguration:getSourceSmartengageConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"smartengage\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSmartsheetsConfiguration:getSourceSmartsheetsConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceSmartsheetsConfigurationCredentials:getSourceSmartsheetsConfigurationCredentials"
                },
                "metadataFields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A List of available columns which metadata can be pulled from.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"smartsheets\"]\n"
                },
                "spreadsheetId": {
                    "type": "string",
                    "description": "The spreadsheet ID. Find it by opening the spreadsheet then navigating to File \u003e Properties\n"
                },
                "startDatetime": {
                    "type": "string",
                    "description": "Only rows modified after this date/time will be replicated. This should be an ISO 8601 string, for instance: `2000-01-01T13:00:00`\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "metadataFields",
                "sourceType",
                "spreadsheetId",
                "startDatetime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSmartsheetsConfigurationCredentials:getSourceSmartsheetsConfigurationCredentials": {
            "properties": {
                "sourceSmartsheetsAuthorizationMethodApiAccessToken": {
                    "$ref": "#/types/airbyte:index/getSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodApiAccessToken:getSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodApiAccessToken"
                },
                "sourceSmartsheetsAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodOAuth20:getSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodOAuth20"
                },
                "sourceSmartsheetsUpdateAuthorizationMethodApiAccessToken": {
                    "$ref": "#/types/airbyte:index/getSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodApiAccessToken:getSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodApiAccessToken"
                },
                "sourceSmartsheetsUpdateAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodOAuth20:getSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodOAuth20"
                }
            },
            "type": "object",
            "required": [
                "sourceSmartsheetsAuthorizationMethodApiAccessToken",
                "sourceSmartsheetsAuthorizationMethodOAuth20",
                "sourceSmartsheetsUpdateAuthorizationMethodApiAccessToken",
                "sourceSmartsheetsUpdateAuthorizationMethodOAuth20"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodApiAccessToken:getSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodApiAccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodOAuth20:getSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken",
                "tokenExpiryDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodApiAccessToken:getSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodApiAccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodOAuth20:getSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken",
                "tokenExpiryDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSnapchatMarketingConfiguration:getSourceSnapchatMarketingConfiguration": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The Client ID of your Snapchat developer application.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The Client Secret of your Snapchat developer application.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "Date in the format 2017-01-25. Any data after this date will not be replicated.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "Refresh Token to renew the expired Access Token.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"snapchat-marketing\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Date in the format 2022-01-01. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "endDate",
                "refreshToken",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSnowflakeConfiguration:getSourceSnowflakeConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceSnowflakeConfigurationCredentials:getSourceSnowflakeConfigurationCredentials"
                },
                "database": {
                    "type": "string",
                    "description": "The database you created for Airbyte to access data.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The host domain of the snowflake instance (must include the account, region, cloud environment, and end with snowflakecomputing.com).\n"
                },
                "jdbcUrlParams": {
                    "type": "string",
                    "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '\u0026'. (example: key1=value1\u0026key2=value2\u0026key3=value3).\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role you created for Airbyte to access Snowflake.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The source Snowflake schema tables. Leave empty to access tables from multiple schemas.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"snowflake\"]\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse you created for Airbyte to access data.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "database",
                "host",
                "jdbcUrlParams",
                "role",
                "schema",
                "sourceType",
                "warehouse"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSnowflakeConfigurationCredentials:getSourceSnowflakeConfigurationCredentials": {
            "properties": {
                "sourceSnowflakeAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodOAuth20:getSourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodOAuth20"
                },
                "sourceSnowflakeAuthorizationMethodUsernameAndPassword": {
                    "$ref": "#/types/airbyte:index/getSourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodUsernameAndPassword:getSourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodUsernameAndPassword"
                },
                "sourceSnowflakeUpdateAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodOAuth20:getSourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodOAuth20"
                },
                "sourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword": {
                    "$ref": "#/types/airbyte:index/getSourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword:getSourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword"
                }
            },
            "type": "object",
            "required": [
                "sourceSnowflakeAuthorizationMethodOAuth20",
                "sourceSnowflakeAuthorizationMethodUsernameAndPassword",
                "sourceSnowflakeUpdateAuthorizationMethodOAuth20",
                "sourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodOAuth20:getSourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodUsernameAndPassword:getSourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodUsernameAndPassword": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "password",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodOAuth20:getSourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword:getSourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "password",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSonarCloudConfiguration:getSourceSonarCloudConfiguration": {
            "properties": {
                "componentKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Comma-separated list of component keys.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "To retrieve issues created before the given date (inclusive).\n"
                },
                "organization": {
                    "type": "string",
                    "description": "Organization key. See \\n\\nhere\\n\\n.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"sonar-cloud\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "To retrieve issues created after the given date (inclusive).\n"
                },
                "userToken": {
                    "type": "string",
                    "description": "Your User Token. See \\n\\nhere\\n\\n. The token is case sensitive.\n"
                }
            },
            "type": "object",
            "required": [
                "componentKeys",
                "endDate",
                "organization",
                "sourceType",
                "startDate",
                "userToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSpaceXApiConfiguration:getSourceSpaceXApiConfiguration": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"spacex-api\"]\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "options",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSquareConfiguration:getSourceSquareConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceSquareConfigurationCredentials:getSourceSquareConfigurationCredentials",
                    "description": "Choose how to authenticate to Square.\n"
                },
                "includeDeletedObjects": {
                    "type": "boolean",
                    "description": "In some streams there is an option to include deleted objects (Items, Categories, Discounts, Taxes)\n"
                },
                "isSandbox": {
                    "type": "boolean",
                    "description": "Determines whether to use the sandbox or production environment.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"square\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date in the format YYYY-MM-DD. Any data before this date will not be replicated. If not set, all data will be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "includeDeletedObjects",
                "isSandbox",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSquareConfigurationCredentials:getSourceSquareConfigurationCredentials": {
            "properties": {
                "sourceSquareAuthenticationApiKey": {
                    "$ref": "#/types/airbyte:index/getSourceSquareConfigurationCredentialsSourceSquareAuthenticationApiKey:getSourceSquareConfigurationCredentialsSourceSquareAuthenticationApiKey"
                },
                "sourceSquareAuthenticationOauthAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceSquareConfigurationCredentialsSourceSquareAuthenticationOauthAuthentication:getSourceSquareConfigurationCredentialsSourceSquareAuthenticationOauthAuthentication"
                },
                "sourceSquareUpdateAuthenticationApiKey": {
                    "$ref": "#/types/airbyte:index/getSourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationApiKey:getSourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationApiKey"
                },
                "sourceSquareUpdateAuthenticationOauthAuthentication": {
                    "$ref": "#/types/airbyte:index/getSourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationOauthAuthentication:getSourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationOauthAuthentication"
                }
            },
            "type": "object",
            "required": [
                "sourceSquareAuthenticationApiKey",
                "sourceSquareAuthenticationOauthAuthentication",
                "sourceSquareUpdateAuthenticationApiKey",
                "sourceSquareUpdateAuthenticationOauthAuthentication"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSquareConfigurationCredentialsSourceSquareAuthenticationApiKey:getSourceSquareConfigurationCredentialsSourceSquareAuthenticationApiKey": {
            "properties": {
                "apiKey": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "authType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSquareConfigurationCredentialsSourceSquareAuthenticationOauthAuthentication:getSourceSquareConfigurationCredentialsSourceSquareAuthenticationOauthAuthentication": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationApiKey:getSourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationApiKey": {
            "properties": {
                "apiKey": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "authType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationOauthAuthentication:getSourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationOauthAuthentication": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceStravaConfiguration:getSourceStravaConfiguration": {
            "properties": {
                "athleteId": {
                    "type": "integer",
                    "description": "The Athlete ID of your Strava developer application.\n"
                },
                "authType": {
                    "type": "string",
                    "description": "must be one of [\"Client\"]\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The Client ID of your Strava developer application.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The Client Secret of your Strava developer application.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "The Refresh Token with the activity: read_all permissions.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"strava\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "athleteId",
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceStripeConfiguration:getSourceStripeConfiguration": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Your Stripe account ID (starts with 'acct_', find yours \\n\\nhere\\n\\n).\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Stripe API key (usually starts with 'sk*live*'; find yours \\n\\nhere\\n\\n).\n"
                },
                "lookbackWindowDays": {
                    "type": "integer",
                    "description": "When set, the connector will always re-export data from the past N days, where N is the value set here. This is useful if your data is frequently updated after creation. More info \\n\\nhere\\n\\n\n"
                },
                "sliceRange": {
                    "type": "integer",
                    "description": "The time increment used by the connector when requesting data from the Stripe API. The bigger the value is, the less requests will be made and faster the sync will be. On the other hand, the more seldom the state is persisted.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"stripe\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Only data generated after this date will be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "clientSecret",
                "lookbackWindowDays",
                "sliceRange",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSurveySparrowConfiguration:getSourceSurveySparrowConfiguration": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Your access token. See \\n\\nhere\\n\\n. The key is case sensitive.\n"
                },
                "region": {
                    "$ref": "#/types/airbyte:index/getSourceSurveySparrowConfigurationRegion:getSourceSurveySparrowConfigurationRegion",
                    "description": "Is your account location is EU based? If yes, the base url to retrieve data will be different.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"survey-sparrow\"]\n"
                },
                "surveyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A List of your survey ids for survey-specific stream\n"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "region",
                "sourceType",
                "surveyIds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSurveySparrowConfigurationRegion:getSourceSurveySparrowConfigurationRegion": {
            "properties": {
                "sourceSurveySparrowBaseUrlEuBasedAccount": {
                    "$ref": "#/types/airbyte:index/getSourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlEuBasedAccount:getSourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlEuBasedAccount"
                },
                "sourceSurveySparrowBaseUrlGlobalAccount": {
                    "$ref": "#/types/airbyte:index/getSourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlGlobalAccount:getSourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlGlobalAccount"
                },
                "sourceSurveySparrowUpdateBaseUrlEuBasedAccount": {
                    "$ref": "#/types/airbyte:index/getSourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlEuBasedAccount:getSourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlEuBasedAccount"
                },
                "sourceSurveySparrowUpdateBaseUrlGlobalAccount": {
                    "$ref": "#/types/airbyte:index/getSourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlGlobalAccount:getSourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlGlobalAccount"
                }
            },
            "type": "object",
            "required": [
                "sourceSurveySparrowBaseUrlEuBasedAccount",
                "sourceSurveySparrowBaseUrlGlobalAccount",
                "sourceSurveySparrowUpdateBaseUrlEuBasedAccount",
                "sourceSurveySparrowUpdateBaseUrlGlobalAccount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlEuBasedAccount:getSourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlEuBasedAccount": {
            "properties": {
                "urlBase": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "urlBase"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlGlobalAccount:getSourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlGlobalAccount": {
            "properties": {
                "urlBase": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "urlBase"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlEuBasedAccount:getSourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlEuBasedAccount": {
            "properties": {
                "urlBase": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "urlBase"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlGlobalAccount:getSourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlGlobalAccount": {
            "properties": {
                "urlBase": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "urlBase"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSurveymonkeyConfiguration:getSourceSurveymonkeyConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceSurveymonkeyConfigurationCredentials:getSourceSurveymonkeyConfigurationCredentials",
                    "description": "The authorization method to use to retrieve data from SurveyMonkey\n"
                },
                "origin": {
                    "type": "string",
                    "description": "must be one of [\"USA\", \"Europe\", \"Canada\"]\nDepending on the originating datacenter of the SurveyMonkey account, the API access URL may be different.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"surveymonkey\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                },
                "surveyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of the surveys from which you'd like to replicate data. If left empty, data from all boards to which you have access will be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "origin",
                "sourceType",
                "startDate",
                "surveyIds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceSurveymonkeyConfigurationCredentials:getSourceSurveymonkeyConfigurationCredentials": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authMethod",
                "clientId",
                "clientSecret"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceTempoConfiguration:getSourceTempoConfiguration": {
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "Tempo API Token. Go to Tempo\u003eSettings, scroll down to Data Access and select API integration.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"tempo\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceTheGuardianApiConfiguration:getSourceTheGuardianApiConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Your API Key. See \\n\\nhere\\n\\n. The key is case sensitive.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "(Optional) Use this to set the maximum date (YYYY-MM-DD) of the results. Results newer than the end_date will not be shown. Default is set to the current date (today) for incremental syncs.\n"
                },
                "query": {
                    "type": "string",
                    "description": "(Optional) The query (q) parameter filters the results to only those that include that search term. The q parameter supports AND, OR and NOT operators.\n"
                },
                "section": {
                    "type": "string",
                    "description": "(Optional) Use this to filter the results by a particular section. See \\n\\nhere\\n\\n for a list of all sections, and \\n\\nhere\\n\\n for the sections endpoint documentation.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"the-guardian-api\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Use this to set the minimum date (YYYY-MM-DD) of the results. Results older than the start_date will not be shown.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "(Optional) A tag is a piece of data that is used by The Guardian to categorise content. Use this parameter to filter results by showing only the ones matching the entered tag. See \\n\\nhere\\n\\n for a list of all tags, and \\n\\nhere\\n\\n for the tags endpoint documentation.\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "endDate",
                "query",
                "section",
                "sourceType",
                "startDate",
                "tag"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceTiktokMarketingConfiguration:getSourceTiktokMarketingConfiguration": {
            "properties": {
                "attributionWindow": {
                    "type": "integer",
                    "description": "The attribution window in days.\n"
                },
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceTiktokMarketingConfigurationCredentials:getSourceTiktokMarketingConfigurationCredentials",
                    "description": "Authentication method\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "The date until which you'd like to replicate data for all incremental streams, in the format YYYY-MM-DD. All data generated between start_date and this date will be replicated. Not setting this option will result in always syncing the data till the current date.\n"
                },
                "includeDeleted": {
                    "type": "boolean",
                    "description": "Set to active if you want to include deleted data in reports.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"tiktok-marketing\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The Start Date in format: YYYY-MM-DD. Any data before this date will not be replicated. If this parameter is not set, all data will be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "attributionWindow",
                "credentials",
                "endDate",
                "includeDeleted",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceTiktokMarketingConfigurationCredentials:getSourceTiktokMarketingConfigurationCredentials": {
            "properties": {
                "sourceTiktokMarketingAuthenticationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodOAuth20:getSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodOAuth20"
                },
                "sourceTiktokMarketingAuthenticationMethodSandboxAccessToken": {
                    "$ref": "#/types/airbyte:index/getSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodSandboxAccessToken:getSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodSandboxAccessToken"
                },
                "sourceTiktokMarketingUpdateAuthenticationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodOAuth20:getSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodOAuth20"
                },
                "sourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken": {
                    "$ref": "#/types/airbyte:index/getSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken:getSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken"
                }
            },
            "type": "object",
            "required": [
                "sourceTiktokMarketingAuthenticationMethodOAuth20",
                "sourceTiktokMarketingAuthenticationMethodSandboxAccessToken",
                "sourceTiktokMarketingUpdateAuthenticationMethodOAuth20",
                "sourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodOAuth20:getSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "advertiserId": {
                    "type": "string"
                },
                "appId": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "advertiserId",
                "appId",
                "authType",
                "secret"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodSandboxAccessToken:getSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodSandboxAccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "advertiserId": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "advertiserId",
                "authType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodOAuth20:getSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "advertiserId": {
                    "type": "string"
                },
                "appId": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "advertiserId",
                "appId",
                "authType",
                "secret"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken:getSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "advertiserId": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "advertiserId",
                "authType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceTodoistConfiguration:getSourceTodoistConfiguration": {
            "properties": {
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"todoist\"]\n"
                },
                "token": {
                    "type": "string",
                    "description": "Your API Token. See \\n\\nhere\\n\\n. The token is case sensitive.\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType",
                "token"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceTrelloConfiguration:getSourceTrelloConfiguration": {
            "properties": {
                "boardIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of the boards to replicate data from. If left empty, data from all boards to which you have access will be replicated.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Trello API key. See the \\n\\ndocs\\n\\n for instructions on how to generate it.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"trello\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Trello API token. See the \\n\\ndocs\\n\\n for instructions on how to generate it.\n"
                }
            },
            "type": "object",
            "required": [
                "boardIds",
                "key",
                "sourceType",
                "startDate",
                "token"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceTrustpilotConfiguration:getSourceTrustpilotConfiguration": {
            "properties": {
                "businessUnits": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of business units which shall be synchronized. Some streams e.g. configured*business*units or private_reviews use this configuration.\n"
                },
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceTrustpilotConfigurationCredentials:getSourceTrustpilotConfigurationCredentials"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"trustpilot\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "For streams with sync. method incremental the start date time to be used\n"
                }
            },
            "type": "object",
            "required": [
                "businessUnits",
                "credentials",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceTrustpilotConfigurationCredentials:getSourceTrustpilotConfigurationCredentials": {
            "properties": {
                "sourceTrustpilotAuthorizationMethodApiKey": {
                    "$ref": "#/types/airbyte:index/getSourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodApiKey:getSourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodApiKey"
                },
                "sourceTrustpilotAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodOAuth20:getSourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodOAuth20"
                },
                "sourceTrustpilotUpdateAuthorizationMethodApiKey": {
                    "$ref": "#/types/airbyte:index/getSourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodApiKey:getSourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodApiKey"
                },
                "sourceTrustpilotUpdateAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodOAuth20:getSourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodOAuth20"
                }
            },
            "type": "object",
            "required": [
                "sourceTrustpilotAuthorizationMethodApiKey",
                "sourceTrustpilotAuthorizationMethodOAuth20",
                "sourceTrustpilotUpdateAuthorizationMethodApiKey",
                "sourceTrustpilotUpdateAuthorizationMethodOAuth20"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodApiKey:getSourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodApiKey": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodOAuth20:getSourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken",
                "tokenExpiryDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodApiKey:getSourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodApiKey": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "clientId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodOAuth20:getSourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken",
                "tokenExpiryDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceTvmazeScheduleConfiguration:getSourceTvmazeScheduleConfiguration": {
            "properties": {
                "domesticScheduleCountryCode": {
                    "type": "string",
                    "description": "Country code for domestic TV schedule retrieval.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "End date for TV schedule retrieval. May be in the future. Optional.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"tvmaze-schedule\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Start date for TV schedule retrieval. May be in the future.\n"
                },
                "webScheduleCountryCode": {
                    "type": "string",
                    "description": "ISO 3166-1 country code for web TV schedule retrieval. Leave blank for\nall countries plus global web channels (e.g. Netflix). Alternatively,\nset to 'global' for just global web channels.\n"
                }
            },
            "type": "object",
            "required": [
                "domesticScheduleCountryCode",
                "endDate",
                "sourceType",
                "startDate",
                "webScheduleCountryCode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceTwilioConfiguration:getSourceTwilioConfiguration": {
            "properties": {
                "accountSid": {
                    "type": "string",
                    "description": "Twilio account SID\n"
                },
                "authToken": {
                    "type": "string",
                    "description": "Twilio Auth Token.\n"
                },
                "lookbackWindow": {
                    "type": "integer",
                    "description": "How far into the past to look for records. (in minutes)\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"twilio\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format 2020-10-01T00:00:00Z. Any data before this date will not be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "accountSid",
                "authToken",
                "lookbackWindow",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceTwilioTaskrouterConfiguration:getSourceTwilioTaskrouterConfiguration": {
            "properties": {
                "accountSid": {
                    "type": "string",
                    "description": "Twilio Account ID\n"
                },
                "authToken": {
                    "type": "string",
                    "description": "Twilio Auth Token\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"twilio-taskrouter\"]\n"
                }
            },
            "type": "object",
            "required": [
                "accountSid",
                "authToken",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceTwitterConfiguration:getSourceTwitterConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "App only Bearer Token. See the \\n\\ndocs\\n\\n for more information on how to obtain this token.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "The end date for retrieving tweets must be a minimum of 10 seconds prior to the request time.\n"
                },
                "query": {
                    "type": "string",
                    "description": "Query for matching Tweets. You can learn how to build this query by reading \\n\\n build a query guide \\n\\n.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"twitter\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The start date for retrieving tweets cannot be more than 7 days in the past.\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "endDate",
                "query",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceTypeformConfiguration:getSourceTypeformConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceTypeformConfigurationCredentials:getSourceTypeformConfigurationCredentials"
                },
                "formIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When this parameter is set, the connector will replicate data only from the input forms. Otherwise, all forms in your Typeform account will be replicated. You can find form IDs in your form URLs. For example, in the URL \"https://mysite.typeform.com/to/u6nXL7\" the form_id is u6nXL7. You can find form URLs on Share panel\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"typeform\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data for Typeform API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "formIds",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceTypeformConfigurationCredentials:getSourceTypeformConfigurationCredentials": {
            "properties": {
                "sourceTypeformAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodOAuth20:getSourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodOAuth20"
                },
                "sourceTypeformAuthorizationMethodPrivateToken": {
                    "$ref": "#/types/airbyte:index/getSourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodPrivateToken:getSourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodPrivateToken"
                },
                "sourceTypeformUpdateAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodOAuth20:getSourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodOAuth20"
                },
                "sourceTypeformUpdateAuthorizationMethodPrivateToken": {
                    "$ref": "#/types/airbyte:index/getSourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodPrivateToken:getSourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodPrivateToken"
                }
            },
            "type": "object",
            "required": [
                "sourceTypeformAuthorizationMethodOAuth20",
                "sourceTypeformAuthorizationMethodPrivateToken",
                "sourceTypeformUpdateAuthorizationMethodOAuth20",
                "sourceTypeformUpdateAuthorizationMethodPrivateToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodOAuth20:getSourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken",
                "tokenExpiryDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodPrivateToken:getSourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodPrivateToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodOAuth20:getSourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret",
                "refreshToken",
                "tokenExpiryDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodPrivateToken:getSourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodPrivateToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceUsCensusConfiguration:getSourceUsCensusConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Your API Key. Get your key \\n\\nhere\\n\\n.\n"
                },
                "queryParams": {
                    "type": "string",
                    "description": "The query parameters portion of the GET request, without the api key\n"
                },
                "queryPath": {
                    "type": "string",
                    "description": "The path portion of the GET request\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"us-census\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "queryParams",
                "queryPath",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceVantageConfiguration:getSourceVantageConfiguration": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Your API Access token. See \\n\\nhere\\n\\n.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"vantage\"]\n"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceWebflowConfiguration:getSourceWebflowConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "The API token for authenticating to Webflow. See https://university.webflow.com/lesson/intro-to-the-webflow-api\n"
                },
                "siteId": {
                    "type": "string",
                    "description": "The id of the Webflow site you are requesting data from. See https://developers.webflow.com/#sites\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"webflow\"]\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "siteId",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceWhiskyHunterConfiguration:getSourceWhiskyHunterConfiguration": {
            "properties": {
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"whisky-hunter\"]\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceWikipediaPageviewsConfiguration:getSourceWikipediaPageviewsConfiguration": {
            "properties": {
                "access": {
                    "type": "string",
                    "description": "If you want to filter by access method, use one of desktop, mobile-app or mobile-web. If you are interested in pageviews regardless of access method, use all-access.\n"
                },
                "agent": {
                    "type": "string",
                    "description": "If you want to filter by agent type, use one of user, automated or spider. If you are interested in pageviews regardless of agent type, use all-agents.\n"
                },
                "article": {
                    "type": "string",
                    "description": "The title of any article in the specified project. Any spaces should be replaced with underscores. It also should be URI-encoded, so that non-URI-safe characters like %, / or ? are accepted.\n"
                },
                "country": {
                    "type": "string",
                    "description": "The ISO 3166-1 alpha-2 code of a country for which to retrieve top articles.\n"
                },
                "end": {
                    "type": "string",
                    "description": "The date of the last day to include, in YYYYMMDD or YYYYMMDDHH format.\n"
                },
                "project": {
                    "type": "string",
                    "description": "If you want to filter by project, use the domain of any Wikimedia project.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"wikipedia-pageviews\"]\n"
                },
                "start": {
                    "type": "string",
                    "description": "The date of the first day to include, in YYYYMMDD or YYYYMMDDHH format.\n"
                }
            },
            "type": "object",
            "required": [
                "access",
                "agent",
                "article",
                "country",
                "end",
                "project",
                "sourceType",
                "start"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceWoocommerceConfiguration:getSourceWoocommerceConfiguration": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Customer Key for API in WooCommerce shop\n"
                },
                "apiSecret": {
                    "type": "string",
                    "description": "Customer Secret for API in WooCommerce shop\n"
                },
                "shop": {
                    "type": "string",
                    "description": "The name of the store. For https://EXAMPLE.com, the shop name is 'EXAMPLE.com'.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"woocommerce\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date you would like to replicate data from. Format: YYYY-MM-DD\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "apiSecret",
                "shop",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceXeroConfiguration:getSourceXeroConfiguration": {
            "properties": {
                "authentication": {
                    "$ref": "#/types/airbyte:index/getSourceXeroConfigurationAuthentication:getSourceXeroConfigurationAuthentication"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"xero\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "UTC date and time in the format YYYY-MM-DDTHH:mm:ssZ. Any data with created_at before this data will not be synced.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "Enter your Xero organization's Tenant ID\n"
                }
            },
            "type": "object",
            "required": [
                "authentication",
                "sourceType",
                "startDate",
                "tenantId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceXeroConfigurationAuthentication:getSourceXeroConfigurationAuthentication": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "tokenExpiryDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "clientId",
                "clientSecret",
                "refreshToken",
                "tokenExpiryDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceXkcdConfiguration:getSourceXkcdConfiguration": {
            "properties": {
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"xkcd\"]\n"
                }
            },
            "type": "object",
            "required": [
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceYandexMetricaConfiguration:getSourceYandexMetricaConfiguration": {
            "properties": {
                "authToken": {
                    "type": "string",
                    "description": "Your Yandex Metrica API access token\n"
                },
                "counterId": {
                    "type": "string",
                    "description": "Counter ID\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "Starting point for your data replication, in format of \"YYYY-MM-DD\". If not provided will sync till most recent date.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"yandex-metrica\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Starting point for your data replication, in format of \"YYYY-MM-DD\".\n"
                }
            },
            "type": "object",
            "required": [
                "authToken",
                "counterId",
                "endDate",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceYotpoConfiguration:getSourceYotpoConfiguration": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token recieved as a result of API call to https://api.yotpo.com/oauth/token (Ref- https://apidocs.yotpo.com/reference/yotpo-authentication)\n"
                },
                "appKey": {
                    "type": "string",
                    "description": "App key found at settings (Ref- https://settings.yotpo.com/#/general_settings)\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email address registered with yotpo.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"yotpo\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Date time filter for incremental filter, Specify which date to extract from.\n"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "appKey",
                "email",
                "sourceType",
                "startDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceYouniumConfiguration:getSourceYouniumConfiguration": {
            "properties": {
                "legalEntity": {
                    "type": "string",
                    "description": "Legal Entity that data should be pulled from\n"
                },
                "password": {
                    "type": "string",
                    "description": "Account password for younium account API key\n"
                },
                "playground": {
                    "type": "boolean",
                    "description": "Property defining if connector is used against playground or production environment\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"younium\"]\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for Younium account\n"
                }
            },
            "type": "object",
            "required": [
                "legalEntity",
                "password",
                "playground",
                "sourceType",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceYoutubeAnalyticsConfiguration:getSourceYoutubeAnalyticsConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceYoutubeAnalyticsConfigurationCredentials:getSourceYoutubeAnalyticsConfigurationCredentials"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"youtube-analytics\"]\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceYoutubeAnalyticsConfigurationCredentials:getSourceYoutubeAnalyticsConfigurationCredentials": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceZendeskChatConfiguration:getSourceZendeskChatConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceZendeskChatConfigurationCredentials:getSourceZendeskChatConfigurationCredentials"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"zendesk-chat\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data for Zendesk Chat API, in the format YYYY-MM-DDT00:00:00Z.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Required if you access Zendesk Chat from a Zendesk Support subdomain.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "sourceType",
                "startDate",
                "subdomain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceZendeskChatConfigurationCredentials:getSourceZendeskChatConfigurationCredentials": {
            "properties": {
                "sourceZendeskChatAuthorizationMethodAccessToken": {
                    "$ref": "#/types/airbyte:index/getSourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodAccessToken:getSourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodAccessToken"
                },
                "sourceZendeskChatAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodOAuth20:getSourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodOAuth20"
                },
                "sourceZendeskChatUpdateAuthorizationMethodAccessToken": {
                    "$ref": "#/types/airbyte:index/getSourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodAccessToken:getSourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodAccessToken"
                },
                "sourceZendeskChatUpdateAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodOAuth20:getSourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodOAuth20"
                }
            },
            "type": "object",
            "required": [
                "sourceZendeskChatAuthorizationMethodAccessToken",
                "sourceZendeskChatAuthorizationMethodOAuth20",
                "sourceZendeskChatUpdateAuthorizationMethodAccessToken",
                "sourceZendeskChatUpdateAuthorizationMethodOAuth20"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodAccessToken:getSourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodAccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "credentials": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "credentials"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodOAuth20:getSourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "credentials": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "clientId",
                "clientSecret",
                "credentials",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodAccessToken:getSourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodAccessToken": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "credentials": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "credentials"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodOAuth20:getSourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "credentials": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "clientId",
                "clientSecret",
                "credentials",
                "refreshToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceZendeskSunshineConfiguration:getSourceZendeskSunshineConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceZendeskSunshineConfigurationCredentials:getSourceZendeskSunshineConfigurationCredentials"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"zendesk-sunshine\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data for Zendesk Sunshine API, in the format YYYY-MM-DDT00:00:00Z.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "The subdomain for your Zendesk Account.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "sourceType",
                "startDate",
                "subdomain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceZendeskSunshineConfigurationCredentials:getSourceZendeskSunshineConfigurationCredentials": {
            "properties": {
                "sourceZendeskSunshineAuthorizationMethodApiToken": {
                    "$ref": "#/types/airbyte:index/getSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodApiToken:getSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodApiToken"
                },
                "sourceZendeskSunshineAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodOAuth20:getSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodOAuth20"
                },
                "sourceZendeskSunshineUpdateAuthorizationMethodApiToken": {
                    "$ref": "#/types/airbyte:index/getSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodApiToken:getSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodApiToken"
                },
                "sourceZendeskSunshineUpdateAuthorizationMethodOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodOAuth20:getSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodOAuth20"
                }
            },
            "type": "object",
            "required": [
                "sourceZendeskSunshineAuthorizationMethodApiToken",
                "sourceZendeskSunshineAuthorizationMethodOAuth20",
                "sourceZendeskSunshineUpdateAuthorizationMethodApiToken",
                "sourceZendeskSunshineUpdateAuthorizationMethodOAuth20"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodApiToken:getSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodApiToken": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "apiToken": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "authMethod",
                "email"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodOAuth20:getSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "additionalProperties": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authMethod",
                "clientId",
                "clientSecret"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodApiToken:getSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodApiToken": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "apiToken": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "authMethod",
                "email"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodOAuth20:getSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "additionalProperties": {
                    "type": "string"
                },
                "authMethod": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authMethod",
                "clientId",
                "clientSecret"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceZendeskSupportConfiguration:getSourceZendeskSupportConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceZendeskSupportConfigurationCredentials:getSourceZendeskSupportConfigurationCredentials",
                    "description": "Zendesk allows two authentication methods. We recommend using `OAuth2.0` for Airbyte Cloud users and `API token` for Airbyte Open Source users.\n"
                },
                "ignorePagination": {
                    "type": "boolean",
                    "description": "Makes each stream read a single page of data.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"zendesk-support\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The UTC date and time from which you'd like to replicate data, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "This is your unique Zendesk subdomain that can be found in your account URL. For example, in https://MY*SUBDOMAIN.zendesk.com/, MY*SUBDOMAIN is the value of your subdomain.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "ignorePagination",
                "sourceType",
                "startDate",
                "subdomain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceZendeskSupportConfigurationCredentials:getSourceZendeskSupportConfigurationCredentials": {
            "properties": {
                "sourceZendeskSupportAuthenticationApiToken": {
                    "$ref": "#/types/airbyte:index/getSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationApiToken:getSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationApiToken"
                },
                "sourceZendeskSupportAuthenticationOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationOAuth20:getSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationOAuth20"
                },
                "sourceZendeskSupportUpdateAuthenticationApiToken": {
                    "$ref": "#/types/airbyte:index/getSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationApiToken:getSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationApiToken"
                },
                "sourceZendeskSupportUpdateAuthenticationOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationOAuth20:getSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationOAuth20"
                }
            },
            "type": "object",
            "required": [
                "sourceZendeskSupportAuthenticationApiToken",
                "sourceZendeskSupportAuthenticationOAuth20",
                "sourceZendeskSupportUpdateAuthenticationApiToken",
                "sourceZendeskSupportUpdateAuthenticationOAuth20"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationApiToken:getSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationApiToken": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "apiToken": {
                    "type": "string"
                },
                "credentials": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "credentials",
                "email"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationOAuth20:getSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "additionalProperties": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "credentials": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "clientId",
                "clientSecret",
                "credentials"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationApiToken:getSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationApiToken": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "apiToken": {
                    "type": "string"
                },
                "credentials": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "credentials",
                "email"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationOAuth20:getSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "additionalProperties": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "credentials": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "clientId",
                "clientSecret",
                "credentials"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceZendeskTalkConfiguration:getSourceZendeskTalkConfiguration": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/airbyte:index/getSourceZendeskTalkConfigurationCredentials:getSourceZendeskTalkConfigurationCredentials",
                    "description": "Zendesk service provides two authentication methods. Choose between: `OAuth2.0` or `API token`.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"zendesk-talk\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date from which you'd like to replicate data for Zendesk Talk API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "This is your Zendesk subdomain that can be found in your account URL. For example, in https://{MY*SUBDOMAIN}.zendesk.com/, where MY*SUBDOMAIN is the value of your subdomain.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "sourceType",
                "startDate",
                "subdomain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceZendeskTalkConfigurationCredentials:getSourceZendeskTalkConfigurationCredentials": {
            "properties": {
                "sourceZendeskTalkAuthenticationApiToken": {
                    "$ref": "#/types/airbyte:index/getSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationApiToken:getSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationApiToken"
                },
                "sourceZendeskTalkAuthenticationOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationOAuth20:getSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationOAuth20"
                },
                "sourceZendeskTalkUpdateAuthenticationApiToken": {
                    "$ref": "#/types/airbyte:index/getSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationApiToken:getSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationApiToken"
                },
                "sourceZendeskTalkUpdateAuthenticationOAuth20": {
                    "$ref": "#/types/airbyte:index/getSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationOAuth20:getSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationOAuth20"
                }
            },
            "type": "object",
            "required": [
                "sourceZendeskTalkAuthenticationApiToken",
                "sourceZendeskTalkAuthenticationOAuth20",
                "sourceZendeskTalkUpdateAuthenticationApiToken",
                "sourceZendeskTalkUpdateAuthenticationOAuth20"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationApiToken:getSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationApiToken": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "apiToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "authType",
                "email"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationOAuth20:getSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "additionalProperties": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationApiToken:getSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationApiToken": {
            "properties": {
                "additionalProperties": {
                    "type": "string"
                },
                "apiToken": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "authType",
                "email"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationOAuth20:getSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationOAuth20": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "additionalProperties": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "authType",
                "clientId",
                "clientSecret"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceZenloopConfiguration:getSourceZenloopConfiguration": {
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "Zenloop API Token. You can get the API token in settings page \\n\\nhere\\n\\n\n"
                },
                "dateFrom": {
                    "type": "string",
                    "description": "Zenloop date_from. Format: 2021-10-24T03:30:30Z or 2021-10-24. Leave empty if only data from current data should be synced\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"zenloop\"]\n"
                },
                "surveyGroupId": {
                    "type": "string",
                    "description": "Zenloop Survey Group ID. Can be found by pulling All Survey Groups via SurveyGroups stream. Leave empty to pull answers from all survey groups\n"
                },
                "surveyId": {
                    "type": "string",
                    "description": "Zenloop Survey ID. Can be found \\n\\nhere\\n\\n. Leave empty to pull answers from all surveys\n"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "dateFrom",
                "sourceType",
                "surveyGroupId",
                "surveyId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceZohoCrmConfiguration:getSourceZohoCrmConfiguration": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "OAuth2.0 Client ID\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "OAuth2.0 Client Secret\n"
                },
                "dcRegion": {
                    "type": "string",
                    "description": "must be one of [\"US\", \"AU\", \"EU\", \"IN\", \"CN\", \"JP\"]\nPlease choose the region of your Data Center location. More info by this \\n\\nLink\\n\\n\n"
                },
                "edition": {
                    "type": "string",
                    "description": "must be one of [\"Free\", \"Standard\", \"Professional\", \"Enterprise\", \"Ultimate\"]\nChoose your Edition of Zoho CRM to determine API Concurrency Limits\n"
                },
                "environment": {
                    "type": "string",
                    "description": "must be one of [\"Production\", \"Developer\", \"Sandbox\"]\nPlease choose the environment\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "OAuth2.0 Refresh Token\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"zoho-crm\"]\n"
                },
                "startDatetime": {
                    "type": "string",
                    "description": "ISO 8601, for instance: `YYYY-MM-DD`, `YYYY-MM-DD HH:MM:SS+HH:MM`\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "dcRegion",
                "edition",
                "environment",
                "refreshToken",
                "sourceType",
                "startDatetime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceZoomConfiguration:getSourceZoomConfiguration": {
            "properties": {
                "jwtToken": {
                    "type": "string",
                    "description": "JWT Token\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"zoom\"]\n"
                }
            },
            "type": "object",
            "required": [
                "jwtToken",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "airbyte:index/getSourceZuoraConfiguration:getSourceZuoraConfiguration": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "Your OAuth user Client ID\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Your OAuth user Client Secret\n"
                },
                "dataQuery": {
                    "type": "string",
                    "description": "must be one of [\"Live\", \"Unlimited\"]\nChoose between `Live`, or `Unlimited` - the optimized, replicated database at 12 hours freshness for high volume extraction \\n\\nLink\\n\\n\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "must be one of [\"zuora\"]\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Start Date in format: YYYY-MM-DD\n"
                },
                "tenantEndpoint": {
                    "type": "string",
                    "description": "must be one of [\"US Production\", \"US Cloud Production\", \"US API Sandbox\", \"US Cloud API Sandbox\", \"US Central Sandbox\", \"US Performance Test\", \"EU Production\", \"EU API Sandbox\", \"EU Central Sandbox\"]\nPlease choose the right endpoint where your Tenant is located. More info by this \\n\\nLink\\n\\n\n"
                },
                "windowInDays": {
                    "type": "string",
                    "description": "The amount of days for each data-chunk begining from start_date. Bigger the value - faster the fetch. (0.1 - as for couple of hours, 1 - as for a Day; 364 - as for a Year).\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "dataQuery",
                "sourceType",
                "startDate",
                "tenantEndpoint",
                "windowInDays"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the airbyte package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "bearerAuth": {
                "type": "string",
                "secret": true
            },
            "password": {
                "type": "string",
                "secret": true
            },
            "serverUrl": {
                "type": "string",
                "description": "Server URL (defaults to https://api.airbyte.com/v1)\n"
            },
            "username": {
                "type": "string",
                "secret": true
            }
        },
        "inputProperties": {
            "bearerAuth": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "AIRBYTE_BEARER_AUTH"
                    ]
                },
                "secret": true
            },
            "password": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "AIRBYTE_PASSWORD"
                    ]
                },
                "secret": true
            },
            "serverUrl": {
                "type": "string",
                "description": "Server URL (defaults to https://api.airbyte.com/v1)\n",
                "default": "https://api.airbyte.com/v1",
                "defaultInfo": {
                    "environment": [
                        "AIRBYTE_SERVER_URL"
                    ]
                }
            },
            "username": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "AIRBYTE_USERNAME"
                    ]
                },
                "secret": true
            }
        }
    },
    "resources": {
        "airbyte:index/connection:Connection": {
            "description": "Connection Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.Connection;\nimport com.pulumi.airbyte.ConnectionArgs;\nimport com.pulumi.airbyte.inputs.ConnectionConfigurationsArgs;\nimport com.pulumi.airbyte.inputs.ConnectionScheduleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myConnection = new Connection(\"myConnection\", ConnectionArgs.builder()        \n            .configurations(ConnectionConfigurationsArgs.builder()\n                .streams(ConnectionConfigurationsStreamArgs.builder()\n                    .cursorField(\"...\")\n                    .name(\"Terrence Rau\")\n                    .primaryKey(\"...\")\n                    .syncMode(\"incremental_deduped_history\")\n                    .build())\n                .build())\n            .dataResidency(\"us\")\n            .destinationId(\"d69a674e-0f46-47cc-8796-ed151a05dfc2\")\n            .name(\"Wilfred Wolff\")\n            .namespaceDefinition(\"custom_format\")\n            .namespaceFormat(SOURCE_NAMESPACE)\n            .nonBreakingSchemaUpdatesBehavior(\"disable_connection\")\n            .prefix(\"...my_prefix...\")\n            .schedule(ConnectionScheduleArgs.builder()\n                .basic_timing(\"...my_basic_timing...\")\n                .cron_expression(\"...my_cron_expression...\")\n                .schedule_type(\"cron\")\n                .build())\n            .sourceId(\"ca1ba928-fc81-4674-acb7-39205929396f\")\n            .status(\"deprecated\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myConnection:\n    type: airbyte:Connection\n    properties:\n      configurations:\n        streams:\n          - cursorField:\n              - '...'\n            name: Terrence Rau\n            primaryKey:\n              - - '...'\n            syncMode: incremental_deduped_history\n      dataResidency: us\n      destinationId: d69a674e-0f46-47cc-8796-ed151a05dfc2\n      name: Wilfred Wolff\n      namespaceDefinition: custom_format\n      namespaceFormat: ${SOURCE_NAMESPACE}\n      nonBreakingSchemaUpdatesBehavior: disable_connection\n      prefix: '...my_prefix...'\n      schedule:\n        basic_timing: '...my_basic_timing...'\n        cron_expression: '...my_cron_expression...'\n        schedule_type: cron\n      sourceId: ca1ba928-fc81-4674-acb7-39205929396f\n      status: deprecated\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configurations": {
                    "$ref": "#/types/airbyte:index/ConnectionConfigurations:ConnectionConfigurations",
                    "description": "A list of configured stream options for a connection.\n"
                },
                "connectionId": {
                    "type": "string"
                },
                "dataResidency": {
                    "type": "string",
                    "description": "must be one of [\"auto\", \"us\", \"eu\"]\n"
                },
                "destinationId": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Optional name of the connection\n"
                },
                "namespaceDefinition": {
                    "type": "string",
                    "description": "must be one of [\"source\", \"destination\", \"custom_format\"]\nDefine the location where the data will be stored in the destination\n"
                },
                "namespaceFormat": {
                    "type": "string",
                    "description": "Used when namespaceDefinition is 'custom*format'. If blank then behaves like namespaceDefinition = 'destination'. If \"${SOURCE*NAMESPACE}\" then behaves like namespaceDefinition = 'source'.\n"
                },
                "nonBreakingSchemaUpdatesBehavior": {
                    "type": "string",
                    "description": "must be one of [\"ignore\", \"disable*connection\", \"propagate*columns\", \"propagate_fully\"]\nSet how Airbyte handles syncs when it detects a non-breaking schema change in the source\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "Prefix that will be prepended to the name of each stream when it is written to the destination (ex. “airbyte*” causes “projects” =\u003e “airbyte*projects”).\n"
                },
                "schedule": {
                    "$ref": "#/types/airbyte:index/ConnectionSchedule:ConnectionSchedule",
                    "description": "schedule for when the the connection should run, per the schedule type\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "must be one of [\"active\", \"inactive\", \"deprecated\"]\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configurations",
                "connectionId",
                "dataResidency",
                "destinationId",
                "name",
                "namespaceDefinition",
                "namespaceFormat",
                "nonBreakingSchemaUpdatesBehavior",
                "prefix",
                "schedule",
                "sourceId",
                "status",
                "workspaceId"
            ],
            "inputProperties": {
                "configurations": {
                    "$ref": "#/types/airbyte:index/ConnectionConfigurations:ConnectionConfigurations",
                    "description": "A list of configured stream options for a connection.\n"
                },
                "dataResidency": {
                    "type": "string",
                    "description": "must be one of [\"auto\", \"us\", \"eu\"]\n"
                },
                "destinationId": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Optional name of the connection\n"
                },
                "namespaceDefinition": {
                    "type": "string",
                    "description": "must be one of [\"source\", \"destination\", \"custom_format\"]\nDefine the location where the data will be stored in the destination\n"
                },
                "namespaceFormat": {
                    "type": "string",
                    "description": "Used when namespaceDefinition is 'custom*format'. If blank then behaves like namespaceDefinition = 'destination'. If \"${SOURCE*NAMESPACE}\" then behaves like namespaceDefinition = 'source'.\n"
                },
                "nonBreakingSchemaUpdatesBehavior": {
                    "type": "string",
                    "description": "must be one of [\"ignore\", \"disable*connection\", \"propagate*columns\", \"propagate_fully\"]\nSet how Airbyte handles syncs when it detects a non-breaking schema change in the source\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "Prefix that will be prepended to the name of each stream when it is written to the destination (ex. “airbyte*” causes “projects” =\u003e “airbyte*projects”).\n"
                },
                "schedule": {
                    "$ref": "#/types/airbyte:index/ConnectionSchedule:ConnectionSchedule",
                    "description": "schedule for when the the connection should run, per the schedule type\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "must be one of [\"active\", \"inactive\", \"deprecated\"]\n"
                }
            },
            "requiredInputs": [
                "destinationId",
                "sourceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Connection resources.\n",
                "properties": {
                    "configurations": {
                        "$ref": "#/types/airbyte:index/ConnectionConfigurations:ConnectionConfigurations",
                        "description": "A list of configured stream options for a connection.\n"
                    },
                    "connectionId": {
                        "type": "string"
                    },
                    "dataResidency": {
                        "type": "string",
                        "description": "must be one of [\"auto\", \"us\", \"eu\"]\n"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Optional name of the connection\n"
                    },
                    "namespaceDefinition": {
                        "type": "string",
                        "description": "must be one of [\"source\", \"destination\", \"custom_format\"]\nDefine the location where the data will be stored in the destination\n"
                    },
                    "namespaceFormat": {
                        "type": "string",
                        "description": "Used when namespaceDefinition is 'custom*format'. If blank then behaves like namespaceDefinition = 'destination'. If \"${SOURCE*NAMESPACE}\" then behaves like namespaceDefinition = 'source'.\n"
                    },
                    "nonBreakingSchemaUpdatesBehavior": {
                        "type": "string",
                        "description": "must be one of [\"ignore\", \"disable*connection\", \"propagate*columns\", \"propagate_fully\"]\nSet how Airbyte handles syncs when it detects a non-breaking schema change in the source\n"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "Prefix that will be prepended to the name of each stream when it is written to the destination (ex. “airbyte*” causes “projects” =\u003e “airbyte*projects”).\n"
                    },
                    "schedule": {
                        "$ref": "#/types/airbyte:index/ConnectionSchedule:ConnectionSchedule",
                        "description": "schedule for when the the connection should run, per the schedule type\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "must be one of [\"active\", \"inactive\", \"deprecated\"]\n"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationAWSDatalake:DestinationAWSDatalake": {
            "description": "DestinationAwsDatalake Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationAWSDatalake;\nimport com.pulumi.airbyte.DestinationAWSDatalakeArgs;\nimport com.pulumi.airbyte.inputs.DestinationAWSDatalakeConfigurationArgs;\nimport com.pulumi.airbyte.inputs.DestinationAWSDatalakeConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamRoleArgs;\nimport com.pulumi.airbyte.inputs.DestinationAWSDatalakeConfigurationFormatArgs;\nimport com.pulumi.airbyte.inputs.DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJsonArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationAwsdatalake = new DestinationAWSDatalake(\"myDestinationAwsdatalake\", DestinationAWSDatalakeArgs.builder()        \n            .configuration(DestinationAWSDatalakeConfigurationArgs.builder()\n                .aws_account_id(\"111111111111\")\n                .bucket_name(\"...my_bucket_name...\")\n                .bucket_prefix(\"...my_bucket_prefix...\")\n                .credentials(DestinationAWSDatalakeConfigurationCredentialsArgs.builder()\n                    .destinationAwsDatalakeAuthenticationModeIamRole(DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamRoleArgs.builder()\n                        .credentialsTitle(\"IAM Role\")\n                        .roleArn(\"...my_role_arn...\")\n                        .build())\n                    .build())\n                .destination_type(\"aws-datalake\")\n                .format(DestinationAWSDatalakeConfigurationFormatArgs.builder()\n                    .destinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJson(DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJsonArgs.builder()\n                        .compressionCodec(\"GZIP\")\n                        .formatType(\"JSONL\")\n                        .build())\n                    .build())\n                .glue_catalog_float_as_decimal(true)\n                .lakeformation_database_default_tag_key(\"pii_level\")\n                .lakeformation_database_default_tag_values(\"private,public\")\n                .lakeformation_database_name(\"...my_lakeformation_database_name...\")\n                .lakeformation_governed_tables(true)\n                .partitioning(\"DAY\")\n                .region(\"ap-southeast-1\")\n                .build())\n            .name(\"Dr. Rickey Boyle\")\n            .workspaceId(\"aa2352c5-9559-407a-bf1a-3a2fa9467739\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationAwsdatalake:\n    type: airbyte:DestinationAWSDatalake\n    properties:\n      configuration:\n        aws_account_id: '111111111111'\n        bucket_name: '...my_bucket_name...'\n        bucket_prefix: '...my_bucket_prefix...'\n        credentials:\n          destinationAwsDatalakeAuthenticationModeIamRole:\n            credentialsTitle: IAM Role\n            roleArn: '...my_role_arn...'\n        destination_type: aws-datalake\n        format:\n          destinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJson:\n            compressionCodec: GZIP\n            formatType: JSONL\n        glue_catalog_float_as_decimal: true\n        lakeformation_database_default_tag_key: pii_level\n        lakeformation_database_default_tag_values: private,public\n        lakeformation_database_name: '...my_lakeformation_database_name...'\n        lakeformation_governed_tables: true\n        partitioning: DAY\n        region: ap-southeast-1\n      name: Dr. Rickey Boyle\n      workspaceId: aa2352c5-9559-407a-bf1a-3a2fa9467739\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationAWSDatalakeConfiguration:DestinationAWSDatalakeConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationAWSDatalakeConfiguration:DestinationAWSDatalakeConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationAWSDatalake resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationAWSDatalakeConfiguration:DestinationAWSDatalakeConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationAzureBlobStorage:DestinationAzureBlobStorage": {
            "description": "DestinationAzureBlobStorage Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationAzureBlobStorage;\nimport com.pulumi.airbyte.DestinationAzureBlobStorageArgs;\nimport com.pulumi.airbyte.inputs.DestinationAzureBlobStorageConfigurationArgs;\nimport com.pulumi.airbyte.inputs.DestinationAzureBlobStorageConfigurationFormatArgs;\nimport com.pulumi.airbyte.inputs.DestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatCsvCommaSeparatedValuesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationAzureblobstorage = new DestinationAzureBlobStorage(\"myDestinationAzureblobstorage\", DestinationAzureBlobStorageArgs.builder()        \n            .configuration(DestinationAzureBlobStorageConfigurationArgs.builder()\n                .azure_blob_storage_account_key(\"Z8ZkZpteggFx394vm+PJHnGTvdRncaYS+JhLKdj789YNmD+iyGTnG+PV+POiuYNhBg/ACS+LKjd%4FG3FHGN12Nd==\")\n                .azure_blob_storage_account_name(\"airbyte5storage\")\n                .azure_blob_storage_container_name(\"airbytetescontainername\")\n                .azure_blob_storage_endpoint_domain_name(\"blob.core.windows.net\")\n                .azure_blob_storage_output_buffer_size(5)\n                .azure_blob_storage_spill_size(500)\n                .destination_type(\"azure-blob-storage\")\n                .format(DestinationAzureBlobStorageConfigurationFormatArgs.builder()\n                    .destinationAzureBlobStorageOutputFormatCsvCommaSeparatedValues(DestinationAzureBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatCsvCommaSeparatedValuesArgs.builder()\n                        .flattening(\"No flattening\")\n                        .formatType(\"CSV\")\n                        .build())\n                    .build())\n                .build())\n            .name(\"Matt Hamill\")\n            .workspaceId(\"3f5ad019-da1f-4fe7-8f09-7b0074f15471\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationAzureblobstorage:\n    type: airbyte:DestinationAzureBlobStorage\n    properties:\n      configuration:\n        azure_blob_storage_account_key: Z8ZkZpteggFx394vm+PJHnGTvdRncaYS+JhLKdj789YNmD+iyGTnG+PV+POiuYNhBg/ACS+LKjd%4FG3FHGN12Nd==\n        azure_blob_storage_account_name: airbyte5storage\n        azure_blob_storage_container_name: airbytetescontainername\n        azure_blob_storage_endpoint_domain_name: blob.core.windows.net\n        azure_blob_storage_output_buffer_size: 5\n        azure_blob_storage_spill_size: 500\n        destination_type: azure-blob-storage\n        format:\n          destinationAzureBlobStorageOutputFormatCsvCommaSeparatedValues:\n            flattening: No flattening\n            formatType: CSV\n      name: Matt Hamill\n      workspaceId: 3f5ad019-da1f-4fe7-8f09-7b0074f15471\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationAzureBlobStorageConfiguration:DestinationAzureBlobStorageConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationAzureBlobStorageConfiguration:DestinationAzureBlobStorageConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationAzureBlobStorage resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationAzureBlobStorageConfiguration:DestinationAzureBlobStorageConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationBigquery:DestinationBigquery": {
            "description": "DestinationBigquery Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationBigquery;\nimport com.pulumi.airbyte.DestinationBigqueryArgs;\nimport com.pulumi.airbyte.inputs.DestinationBigqueryConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationBigquery = new DestinationBigquery(\"myDestinationBigquery\", DestinationBigqueryArgs.builder()        \n            .configuration(DestinationBigqueryConfigurationArgs.builder()\n                .big_query_client_buffer_size_mb(15)\n                .credentials_json(\"...my_credentials_json...\")\n                .dataset_id(\"...my_dataset_id...\")\n                .dataset_location(\"australia-southeast2\")\n                .destination_type(\"bigquery\")\n                .loading_method(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .project_id(\"...my_project_id...\")\n                .raw_data_dataset(\"...my_raw_data_dataset...\")\n                .transformation_priority(\"batch\")\n                .use_1s1t_format(false)\n                .build())\n            .name(\"Alison Mann\")\n            .workspaceId(\"488e1e91-e450-4ad2-abd4-4269802d502a\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationBigquery:\n    type: airbyte:DestinationBigquery\n    properties:\n      configuration:\n        big_query_client_buffer_size_mb: 15\n        credentials_json: '...my_credentials_json...'\n        dataset_id: '...my_dataset_id...'\n        dataset_location: australia-southeast2\n        destination_type: bigquery\n        loading_method:\n          destinationBigqueryLoadingMethodGcsStaging:\n            credential:\n              destinationBigqueryLoadingMethodGcsStagingCredentialHmacKey:\n                credentialType: HMAC_KEY\n                hmacKeyAccessId: 1234567890abcdefghij1234\n                hmacKeySecret: 1234567890abcdefghij1234567890ABCDEFGHIJ\n            fileBufferCount: 10\n            gcsBucketName: airbyte_sync\n            gcsBucketPath: data_sync/test\n            keepFilesInGcsBucket: Delete all tmp files from GCS\n            method: GCS Staging\n        project_id: '...my_project_id...'\n        raw_data_dataset: '...my_raw_data_dataset...'\n        transformation_priority: batch\n        use_1s1t_format: false\n      name: Alison Mann\n      workspaceId: 488e1e91-e450-4ad2-abd4-4269802d502a\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationBigqueryConfiguration:DestinationBigqueryConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationBigqueryConfiguration:DestinationBigqueryConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationBigquery resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationBigqueryConfiguration:DestinationBigqueryConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationBigqueryDenormalized:DestinationBigqueryDenormalized": {
            "description": "DestinationBigqueryDenormalized Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationBigqueryDenormalized;\nimport com.pulumi.airbyte.DestinationBigqueryDenormalizedArgs;\nimport com.pulumi.airbyte.inputs.DestinationBigqueryDenormalizedConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationBigquerydenormalized = new DestinationBigqueryDenormalized(\"myDestinationBigquerydenormalized\", DestinationBigqueryDenormalizedArgs.builder()        \n            .configuration(DestinationBigqueryDenormalizedConfigurationArgs.builder()\n                .big_query_client_buffer_size_mb(15)\n                .credentials_json(\"...my_credentials_json...\")\n                .dataset_id(\"...my_dataset_id...\")\n                .dataset_location(\"asia-southeast2\")\n                .destination_type(\"bigquery-denormalized\")\n                .loading_method(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .project_id(\"...my_project_id...\")\n                .build())\n            .name(\"Lucia Kemmer\")\n            .workspaceId(\"969e9a3e-fa77-4dfb-94cd-66ae395efb9b\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationBigquerydenormalized:\n    type: airbyte:DestinationBigqueryDenormalized\n    properties:\n      configuration:\n        big_query_client_buffer_size_mb: 15\n        credentials_json: '...my_credentials_json...'\n        dataset_id: '...my_dataset_id...'\n        dataset_location: asia-southeast2\n        destination_type: bigquery-denormalized\n        loading_method:\n          destinationBigqueryDenormalizedLoadingMethodGcsStaging:\n            credential:\n              destinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKey:\n                credentialType: HMAC_KEY\n                hmacKeyAccessId: 1234567890abcdefghij1234\n                hmacKeySecret: 1234567890abcdefghij1234567890ABCDEFGHIJ\n            fileBufferCount: 10\n            gcsBucketName: airbyte_sync\n            gcsBucketPath: data_sync/test\n            keepFilesInGcsBucket: Keep all tmp files in GCS\n            method: GCS Staging\n        project_id: '...my_project_id...'\n      name: Lucia Kemmer\n      workspaceId: 969e9a3e-fa77-4dfb-94cd-66ae395efb9b\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationBigqueryDenormalizedConfiguration:DestinationBigqueryDenormalizedConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationBigqueryDenormalizedConfiguration:DestinationBigqueryDenormalizedConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationBigqueryDenormalized resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationBigqueryDenormalizedConfiguration:DestinationBigqueryDenormalizedConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationClickhouse:DestinationClickhouse": {
            "description": "DestinationClickhouse Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationClickhouse;\nimport com.pulumi.airbyte.DestinationClickhouseArgs;\nimport com.pulumi.airbyte.inputs.DestinationClickhouseConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationClickhouse = new DestinationClickhouse(\"myDestinationClickhouse\", DestinationClickhouseArgs.builder()        \n            .configuration(DestinationClickhouseConfigurationArgs.builder()\n                .database(\"...my_database...\")\n                .destination_type(\"clickhouse\")\n                .host(\"...my_host...\")\n                .jdbc_url_params(\"...my_jdbc_url_params...\")\n                .password(\"...my_password...\")\n                .port(8123)\n                .tunnel_method(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .username(\"Jewell.Lesch64\")\n                .build())\n            .name(\"Wilma Mosciski\")\n            .workspaceId(\"074ba446-9b6e-4214-9959-890afa563e25\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationClickhouse:\n    type: airbyte:DestinationClickhouse\n    properties:\n      configuration:\n        database: '...my_database...'\n        destination_type: clickhouse\n        host: '...my_host...'\n        jdbc_url_params: '...my_jdbc_url_params...'\n        password: '...my_password...'\n        port: 8123\n        tunnel_method:\n          destinationClickhouseSshTunnelMethodNoTunnel:\n            tunnelMethod: NO_TUNNEL\n        username: Jewell.Lesch64\n      name: Wilma Mosciski\n      workspaceId: 074ba446-9b6e-4214-9959-890afa563e25\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationClickhouseConfiguration:DestinationClickhouseConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationClickhouseConfiguration:DestinationClickhouseConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationClickhouse resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationClickhouseConfiguration:DestinationClickhouseConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationConvex:DestinationConvex": {
            "description": "DestinationConvex Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationConvex;\nimport com.pulumi.airbyte.DestinationConvexArgs;\nimport com.pulumi.airbyte.inputs.DestinationConvexConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationConvex = new DestinationConvex(\"myDestinationConvex\", DestinationConvexArgs.builder()        \n            .configuration(DestinationConvexConfigurationArgs.builder()\n                .access_key(\"...my_access_key...\")\n                .deployment_url(\"https://murky-swan-635.convex.cloud\")\n                .destination_type(\"convex\")\n                .build())\n            .name(\"Melba Toy\")\n            .workspaceId(\"8b711e5b-7fd2-4ed0-a892-1cddc692601f\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationConvex:\n    type: airbyte:DestinationConvex\n    properties:\n      configuration:\n        access_key: '...my_access_key...'\n        deployment_url: https://murky-swan-635.convex.cloud\n        destination_type: convex\n      name: Melba Toy\n      workspaceId: 8b711e5b-7fd2-4ed0-a892-1cddc692601f\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationConvexConfiguration:DestinationConvexConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationConvexConfiguration:DestinationConvexConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationConvex resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationConvexConfiguration:DestinationConvexConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationCumulio:DestinationCumulio": {
            "description": "DestinationCumulio Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationCumulio;\nimport com.pulumi.airbyte.DestinationCumulioArgs;\nimport com.pulumi.airbyte.inputs.DestinationCumulioConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationCumulio = new DestinationCumulio(\"myDestinationCumulio\", DestinationCumulioArgs.builder()        \n            .configuration(DestinationCumulioConfigurationArgs.builder()\n                .api_host(\"...my_api_host...\")\n                .api_key(\"...my_api_key...\")\n                .api_token(\"...my_api_token...\")\n                .destination_type(\"cumulio\")\n                .build())\n            .name(\"Clyde Kling\")\n            .workspaceId(\"0d5f0d30-c5fb-4b25-8705-3202c73d5fe9\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationCumulio:\n    type: airbyte:DestinationCumulio\n    properties:\n      configuration:\n        api_host: '...my_api_host...'\n        api_key: '...my_api_key...'\n        api_token: '...my_api_token...'\n        destination_type: cumulio\n      name: Clyde Kling\n      workspaceId: 0d5f0d30-c5fb-4b25-8705-3202c73d5fe9\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationCumulioConfiguration:DestinationCumulioConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationCumulioConfiguration:DestinationCumulioConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationCumulio resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationCumulioConfiguration:DestinationCumulioConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationDatabend:DestinationDatabend": {
            "description": "DestinationDatabend Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationDatabend;\nimport com.pulumi.airbyte.DestinationDatabendArgs;\nimport com.pulumi.airbyte.inputs.DestinationDatabendConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationDatabend = new DestinationDatabend(\"myDestinationDatabend\", DestinationDatabendArgs.builder()        \n            .configuration(DestinationDatabendConfigurationArgs.builder()\n                .database(\"...my_database...\")\n                .destination_type(\"databend\")\n                .host(\"...my_host...\")\n                .password(\"...my_password...\")\n                .port(443)\n                .table(\"default\")\n                .username(\"Lauryn.Bartoletti50\")\n                .build())\n            .name(\"Gary Mayert\")\n            .workspaceId(\"fe49a8d9-cbf4-4863-b323-f9b77f3a4100\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationDatabend:\n    type: airbyte:DestinationDatabend\n    properties:\n      configuration:\n        database: '...my_database...'\n        destination_type: databend\n        host: '...my_host...'\n        password: '...my_password...'\n        port: 443\n        table: default\n        username: Lauryn.Bartoletti50\n      name: Gary Mayert\n      workspaceId: fe49a8d9-cbf4-4863-b323-f9b77f3a4100\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationDatabendConfiguration:DestinationDatabendConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationDatabendConfiguration:DestinationDatabendConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationDatabend resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationDatabendConfiguration:DestinationDatabendConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationDatabricks:DestinationDatabricks": {
            "description": "DestinationDatabricks Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationDatabricks;\nimport com.pulumi.airbyte.DestinationDatabricksArgs;\nimport com.pulumi.airbyte.inputs.DestinationDatabricksConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationDatabricks = new DestinationDatabricks(\"myDestinationDatabricks\", DestinationDatabricksArgs.builder()        \n            .configuration(DestinationDatabricksConfigurationArgs.builder()\n                .accept_terms(false)\n                .data_source(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .database(\"...my_database...\")\n                .databricks_http_path(\"sql/protocolvx/o/1234567489/0000-1111111-abcd90\")\n                .databricks_personal_access_token(\"dapi0123456789abcdefghij0123456789AB\")\n                .databricks_port(\"443\")\n                .databricks_server_hostname(\"abc-12345678-wxyz.cloud.databricks.com\")\n                .destination_type(\"databricks\")\n                .enable_schema_evolution(true)\n                .purge_staging_data(true)\n                .schema(\"default\")\n                .build())\n            .name(\"Rickey Wolf\")\n            .workspaceId(\"280d1ba7-7a89-4ebf-b37a-e4203ce5e6a9\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationDatabricks:\n    type: airbyte:DestinationDatabricks\n    properties:\n      configuration:\n        accept_terms: false\n        data_source:\n          destinationDatabricksDataSourceRecommendedManagedTables:\n            dataSourceType: MANAGED_TABLES_STORAGE\n        database: '...my_database...'\n        databricks_http_path: sql/protocolvx/o/1234567489/0000-1111111-abcd90\n        databricks_personal_access_token: dapi0123456789abcdefghij0123456789AB\n        databricks_port: '443'\n        databricks_server_hostname: abc-12345678-wxyz.cloud.databricks.com\n        destination_type: databricks\n        enable_schema_evolution: true\n        purge_staging_data: true\n        schema: default\n      name: Rickey Wolf\n      workspaceId: 280d1ba7-7a89-4ebf-b37a-e4203ce5e6a9\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationDatabricksConfiguration:DestinationDatabricksConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationDatabricksConfiguration:DestinationDatabricksConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationDatabricks resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationDatabricksConfiguration:DestinationDatabricksConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationDevNull:DestinationDevNull": {
            "description": "DestinationDevNull Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationDevNull;\nimport com.pulumi.airbyte.DestinationDevNullArgs;\nimport com.pulumi.airbyte.inputs.DestinationDevNullConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationDevnull = new DestinationDevNull(\"myDestinationDevnull\", DestinationDevNullArgs.builder()        \n            .configuration(DestinationDevNullConfigurationArgs.builder()\n                .destination_type(\"dev-null\")\n                .test_destination(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .build())\n            .name(\"Kari Leannon PhD\")\n            .workspaceId(\"446ce2af-7a73-4cf3-be45-3f870b326b5a\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationDevnull:\n    type: airbyte:DestinationDevNull\n    properties:\n      configuration:\n        destination_type: dev-null\n        test_destination:\n          destinationDevNullTestDestinationSilent:\n            testDestinationType: SILENT\n      name: Kari Leannon PhD\n      workspaceId: 446ce2af-7a73-4cf3-be45-3f870b326b5a\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationDevNullConfiguration:DestinationDevNullConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationDevNullConfiguration:DestinationDevNullConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationDevNull resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationDevNullConfiguration:DestinationDevNullConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationDynamodb:DestinationDynamodb": {
            "description": "DestinationDynamodb Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationDynamodb;\nimport com.pulumi.airbyte.DestinationDynamodbArgs;\nimport com.pulumi.airbyte.inputs.DestinationDynamodbConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationDynamodb = new DestinationDynamodb(\"myDestinationDynamodb\", DestinationDynamodbArgs.builder()        \n            .configuration(DestinationDynamodbConfigurationArgs.builder()\n                .access_key_id(\"A012345678910EXAMPLE\")\n                .destination_type(\"dynamodb\")\n                .dynamodb_endpoint(\"http://localhost:9000\")\n                .dynamodb_region(\"ap-southeast-2\")\n                .dynamodb_table_name_prefix(\"airbyte_sync\")\n                .secret_access_key(\"a012345678910ABCDEFGH/AbCdEfGhEXAMPLEKEY\")\n                .build())\n            .name(\"Amber Dibbert\")\n            .workspaceId(\"db1a8422-bb67-49d2-b227-15bf0cbb1e31\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationDynamodb:\n    type: airbyte:DestinationDynamodb\n    properties:\n      configuration:\n        access_key_id: A012345678910EXAMPLE\n        destination_type: dynamodb\n        dynamodb_endpoint: http://localhost:9000\n        dynamodb_region: ap-southeast-2\n        dynamodb_table_name_prefix: airbyte_sync\n        secret_access_key: a012345678910ABCDEFGH/AbCdEfGhEXAMPLEKEY\n      name: Amber Dibbert\n      workspaceId: db1a8422-bb67-49d2-b227-15bf0cbb1e31\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationDynamodbConfiguration:DestinationDynamodbConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationDynamodbConfiguration:DestinationDynamodbConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationDynamodb resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationDynamodbConfiguration:DestinationDynamodbConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationElasticsearch:DestinationElasticsearch": {
            "description": "DestinationElasticsearch Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationElasticsearch;\nimport com.pulumi.airbyte.DestinationElasticsearchArgs;\nimport com.pulumi.airbyte.inputs.DestinationElasticsearchConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationElasticsearch = new DestinationElasticsearch(\"myDestinationElasticsearch\", DestinationElasticsearchArgs.builder()        \n            .configuration(DestinationElasticsearchConfigurationArgs.builder()\n                .authentication_method(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .ca_certificate(\"...my_ca_certificate...\")\n                .destination_type(\"elasticsearch\")\n                .endpoint(\"...my_endpoint...\")\n                .upsert(false)\n                .build())\n            .name(\"Dr. Randolph McDermott\")\n            .workspaceId(\"443a1108-e0ad-4cf4-b921-879fce953f73\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationElasticsearch:\n    type: airbyte:DestinationElasticsearch\n    properties:\n      configuration:\n        authentication_method:\n          destinationElasticsearchAuthenticationMethodApiKeySecret:\n            apiKeyId: '...my_api_key_id...'\n            apiKeySecret: '...my_api_key_secret...'\n            method: secret\n        ca_certificate: '...my_ca_certificate...'\n        destination_type: elasticsearch\n        endpoint: '...my_endpoint...'\n        upsert: false\n      name: Dr. Randolph McDermott\n      workspaceId: 443a1108-e0ad-4cf4-b921-879fce953f73\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationElasticsearchConfiguration:DestinationElasticsearchConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationElasticsearchConfiguration:DestinationElasticsearchConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationElasticsearch resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationElasticsearchConfiguration:DestinationElasticsearchConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationFirebolt:DestinationFirebolt": {
            "description": "DestinationFirebolt Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationFirebolt;\nimport com.pulumi.airbyte.DestinationFireboltArgs;\nimport com.pulumi.airbyte.inputs.DestinationFireboltConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationFirebolt = new DestinationFirebolt(\"myDestinationFirebolt\", DestinationFireboltArgs.builder()        \n            .configuration(DestinationFireboltConfigurationArgs.builder()\n                .account(\"...my_account...\")\n                .database(\"...my_database...\")\n                .destination_type(\"firebolt\")\n                .engine(\"...my_engine...\")\n                .host(\"api.app.firebolt.io\")\n                .loading_method(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .password(\"...my_password...\")\n                .username(\"username@email.com\")\n                .build())\n            .name(\"Jermaine Kuhic\")\n            .workspaceId(\"d74dd39c-0f5d-42cf-b7c7-0a45626d4368\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationFirebolt:\n    type: airbyte:DestinationFirebolt\n    properties:\n      configuration:\n        account: '...my_account...'\n        database: '...my_database...'\n        destination_type: firebolt\n        engine: '...my_engine...'\n        host: api.app.firebolt.io\n        loading_method:\n          destinationFireboltLoadingMethodExternalTableViaS3:\n            awsKeyId: '...my_aws_key_id...'\n            awsKeySecret: '...my_aws_key_secret...'\n            method: S3\n            s3Bucket: '...my_s3_bucket...'\n            s3Region: us-east-1\n        password: '...my_password...'\n        username: username@email.com\n      name: Jermaine Kuhic\n      workspaceId: d74dd39c-0f5d-42cf-b7c7-0a45626d4368\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationFireboltConfiguration:DestinationFireboltConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationFireboltConfiguration:DestinationFireboltConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationFirebolt resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationFireboltConfiguration:DestinationFireboltConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationFirestore:DestinationFirestore": {
            "description": "DestinationFirestore Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationFirestore;\nimport com.pulumi.airbyte.DestinationFirestoreArgs;\nimport com.pulumi.airbyte.inputs.DestinationFirestoreConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationFirestore = new DestinationFirestore(\"myDestinationFirestore\", DestinationFirestoreArgs.builder()        \n            .configuration(DestinationFirestoreConfigurationArgs.builder()\n                .credentials_json(\"...my_credentials_json...\")\n                .destination_type(\"firestore\")\n                .project_id(\"...my_project_id...\")\n                .build())\n            .name(\"Ms. Cindy Wuckert\")\n            .workspaceId(\"9f5fce6c-5561-446c-be25-0fb008c42e14\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationFirestore:\n    type: airbyte:DestinationFirestore\n    properties:\n      configuration:\n        credentials_json: '...my_credentials_json...'\n        destination_type: firestore\n        project_id: '...my_project_id...'\n      name: Ms. Cindy Wuckert\n      workspaceId: 9f5fce6c-5561-446c-be25-0fb008c42e14\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationFirestoreConfiguration:DestinationFirestoreConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationFirestoreConfiguration:DestinationFirestoreConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationFirestore resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationFirestoreConfiguration:DestinationFirestoreConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationGcs:DestinationGcs": {
            "description": "DestinationGcs Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationGcs;\nimport com.pulumi.airbyte.DestinationGcsArgs;\nimport com.pulumi.airbyte.inputs.DestinationGcsConfigurationArgs;\nimport com.pulumi.airbyte.inputs.DestinationGcsConfigurationCredentialArgs;\nimport com.pulumi.airbyte.inputs.DestinationGcsConfigurationCredentialDestinationGcsAuthenticationHmacKeyArgs;\nimport com.pulumi.airbyte.inputs.DestinationGcsConfigurationFormatArgs;\nimport com.pulumi.airbyte.inputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroArgs;\nimport com.pulumi.airbyte.inputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecArgs;\nimport com.pulumi.airbyte.inputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationGcs = new DestinationGcs(\"myDestinationGcs\", DestinationGcsArgs.builder()        \n            .configuration(DestinationGcsConfigurationArgs.builder()\n                .credential(DestinationGcsConfigurationCredentialArgs.builder()\n                    .destinationGcsAuthenticationHmacKey(DestinationGcsConfigurationCredentialDestinationGcsAuthenticationHmacKeyArgs.builder()\n                        .credentialType(\"HMAC_KEY\")\n                        .hmacKeyAccessId(\"1234567890abcdefghij1234\")\n                        .hmacKeySecret(\"1234567890abcdefghij1234567890ABCDEFGHIJ\")\n                        .build())\n                    .build())\n                .destination_type(\"gcs\")\n                .format(DestinationGcsConfigurationFormatArgs.builder()\n                    .destinationGcsOutputFormatAvroApacheAvro(DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroArgs.builder()\n                        .compressionCodec(DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecArgs.builder()\n                            .destinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2(DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2Args.builder()\n                                .codec(\"bzip2\")\n                                .build())\n                            .build())\n                        .formatType(\"Avro\")\n                        .build())\n                    .build())\n                .gcs_bucket_name(\"airbyte_sync\")\n                .gcs_bucket_path(\"data_sync/test\")\n                .gcs_bucket_region(\"us-east1\")\n                .build())\n            .name(\"Neal Schroeder\")\n            .workspaceId(\"6c8dd6b1-4429-4074-b477-8a7bd466d28c\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationGcs:\n    type: airbyte:DestinationGcs\n    properties:\n      configuration:\n        credential:\n          destinationGcsAuthenticationHmacKey:\n            credentialType: HMAC_KEY\n            hmacKeyAccessId: 1234567890abcdefghij1234\n            hmacKeySecret: 1234567890abcdefghij1234567890ABCDEFGHIJ\n        destination_type: gcs\n        format:\n          destinationGcsOutputFormatAvroApacheAvro:\n            compressionCodec:\n              destinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2:\n                codec: bzip2\n            formatType: Avro\n        gcs_bucket_name: airbyte_sync\n        gcs_bucket_path: data_sync/test\n        gcs_bucket_region: us-east1\n      name: Neal Schroeder\n      workspaceId: 6c8dd6b1-4429-4074-b477-8a7bd466d28c\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfiguration:DestinationGcsConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationGcsConfiguration:DestinationGcsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationGcs resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationGcsConfiguration:DestinationGcsConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationGoogleSheets:DestinationGoogleSheets": {
            "description": "DestinationGoogleSheets Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationGoogleSheets;\nimport com.pulumi.airbyte.DestinationGoogleSheetsArgs;\nimport com.pulumi.airbyte.inputs.DestinationGoogleSheetsConfigurationArgs;\nimport com.pulumi.airbyte.inputs.DestinationGoogleSheetsConfigurationCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationGooglesheets = new DestinationGoogleSheets(\"myDestinationGooglesheets\", DestinationGoogleSheetsArgs.builder()        \n            .configuration(DestinationGoogleSheetsConfigurationArgs.builder()\n                .credentials(DestinationGoogleSheetsConfigurationCredentialsArgs.builder()\n                    .clientId(\"...my_client_id...\")\n                    .clientSecret(\"...my_client_secret...\")\n                    .refreshToken(\"...my_refresh_token...\")\n                    .build())\n                .destination_type(\"google-sheets\")\n                .spreadsheet_id(\"https://docs.google.com/spreadsheets/d/1hLd9Qqti3UyLXZB2aFfUWDT7BG/edit\")\n                .build())\n            .name(\"Angela Olson\")\n            .workspaceId(\"cdca4251-904e-4523-87e0-bc7178e4796f\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationGooglesheets:\n    type: airbyte:DestinationGoogleSheets\n    properties:\n      configuration:\n        credentials:\n          clientId: '...my_client_id...'\n          clientSecret: '...my_client_secret...'\n          refreshToken: '...my_refresh_token...'\n        destination_type: google-sheets\n        spreadsheet_id: https://docs.google.com/spreadsheets/d/1hLd9Qqti3UyLXZB2aFfUWDT7BG/edit\n      name: Angela Olson\n      workspaceId: cdca4251-904e-4523-87e0-bc7178e4796f\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationGoogleSheetsConfiguration:DestinationGoogleSheetsConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationGoogleSheetsConfiguration:DestinationGoogleSheetsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationGoogleSheets resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationGoogleSheetsConfiguration:DestinationGoogleSheetsConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationKeen:DestinationKeen": {
            "description": "DestinationKeen Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationKeen;\nimport com.pulumi.airbyte.DestinationKeenArgs;\nimport com.pulumi.airbyte.inputs.DestinationKeenConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationKeen = new DestinationKeen(\"myDestinationKeen\", DestinationKeenArgs.builder()        \n            .configuration(DestinationKeenConfigurationArgs.builder()\n                .api_key(\"ABCDEFGHIJKLMNOPRSTUWXYZ\")\n                .destination_type(\"keen\")\n                .infer_timestamp(true)\n                .project_id(\"58b4acc22ba938934e888322e\")\n                .build())\n            .name(\"Fernando Barton\")\n            .workspaceId(\"88282aa4-8256-42f2-a2e9-817ee17cbe61\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationKeen:\n    type: airbyte:DestinationKeen\n    properties:\n      configuration:\n        api_key: ABCDEFGHIJKLMNOPRSTUWXYZ\n        destination_type: keen\n        infer_timestamp: true\n        project_id: 58b4acc22ba938934e888322e\n      name: Fernando Barton\n      workspaceId: 88282aa4-8256-42f2-a2e9-817ee17cbe61\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationKeenConfiguration:DestinationKeenConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationKeenConfiguration:DestinationKeenConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationKeen resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationKeenConfiguration:DestinationKeenConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationKinesis:DestinationKinesis": {
            "description": "DestinationKinesis Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationKinesis;\nimport com.pulumi.airbyte.DestinationKinesisArgs;\nimport com.pulumi.airbyte.inputs.DestinationKinesisConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationKinesis = new DestinationKinesis(\"myDestinationKinesis\", DestinationKinesisArgs.builder()        \n            .configuration(DestinationKinesisConfigurationArgs.builder()\n                .access_key(\"...my_access_key...\")\n                .buffer_size(9)\n                .destination_type(\"kinesis\")\n                .endpoint(\"kinesis.us‑west‑1.amazonaws.com\")\n                .private_key(\"...my_private_key...\")\n                .region(\"us‑west‑1\")\n                .shard_count(4)\n                .build())\n            .name(\"Javier Price\")\n            .workspaceId(\"bc0ab3c2-0c4f-4378-9fd8-71f99dd2efd1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationKinesis:\n    type: airbyte:DestinationKinesis\n    properties:\n      configuration:\n        access_key: '...my_access_key...'\n        buffer_size: 9\n        destination_type: kinesis\n        endpoint: kinesis.us‑west‑1.amazonaws.com\n        private_key: '...my_private_key...'\n        region: us‑west‑1\n        shard_count: 4\n      name: Javier Price\n      workspaceId: bc0ab3c2-0c4f-4378-9fd8-71f99dd2efd1\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationKinesisConfiguration:DestinationKinesisConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationKinesisConfiguration:DestinationKinesisConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationKinesis resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationKinesisConfiguration:DestinationKinesisConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationLangchain:DestinationLangchain": {
            "description": "DestinationLangchain Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationLangchain;\nimport com.pulumi.airbyte.DestinationLangchainArgs;\nimport com.pulumi.airbyte.inputs.DestinationLangchainConfigurationArgs;\nimport com.pulumi.airbyte.inputs.DestinationLangchainConfigurationEmbeddingArgs;\nimport com.pulumi.airbyte.inputs.DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingFakeArgs;\nimport com.pulumi.airbyte.inputs.DestinationLangchainConfigurationIndexingArgs;\nimport com.pulumi.airbyte.inputs.DestinationLangchainConfigurationProcessingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationLangchain = new DestinationLangchain(\"myDestinationLangchain\", DestinationLangchainArgs.builder()        \n            .configuration(DestinationLangchainConfigurationArgs.builder()\n                .destination_type(\"langchain\")\n                .embedding(DestinationLangchainConfigurationEmbeddingArgs.builder()\n                    .destinationLangchainEmbeddingFake(DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingFakeArgs.builder()\n                        .mode(\"fake\")\n                        .build())\n                    .build())\n                .indexing(DestinationLangchainConfigurationIndexingArgs.builder()\n                    .destinationLangchainIndexingChromaLocalPersistance_(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .build())\n                .processing(DestinationLangchainConfigurationProcessingArgs.builder()\n                    .chunkOverlap(1)\n                    .chunkSize(1)\n                    .textFields(\"...\")\n                    .build())\n                .build())\n            .name(\"Shannon Jacobi DVM\")\n            .workspaceId(\"674bdb04-f157-4560-82d6-8ea19f1d1705\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationLangchain:\n    type: airbyte:DestinationLangchain\n    properties:\n      configuration:\n        destination_type: langchain\n        embedding:\n          destinationLangchainEmbeddingFake:\n            mode: fake\n        indexing:\n          destinationLangchainIndexingChromaLocalPersistance_:\n            - collectionName: '...my_collection_name...'\n              destinationPath: /local/my_chroma_db\n              mode: chroma_local\n        processing:\n          chunkOverlap: 1\n          chunkSize: 1\n          textFields:\n            - '...'\n      name: Shannon Jacobi DVM\n      workspaceId: 674bdb04-f157-4560-82d6-8ea19f1d1705\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationLangchainConfiguration:DestinationLangchainConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationLangchainConfiguration:DestinationLangchainConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationLangchain resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationLangchainConfiguration:DestinationLangchainConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationMSsql:DestinationMSsql": {
            "description": "DestinationMssql Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationMSsql;\nimport com.pulumi.airbyte.DestinationMSsqlArgs;\nimport com.pulumi.airbyte.inputs.DestinationMSsqlConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationMssql = new DestinationMSsql(\"myDestinationMssql\", DestinationMSsqlArgs.builder()        \n            .configuration(DestinationMSsqlConfigurationArgs.builder()\n                .database(\"...my_database...\")\n                .destination_type(\"mssql\")\n                .host(\"...my_host...\")\n                .jdbc_url_params(\"...my_jdbc_url_params...\")\n                .password(\"...my_password...\")\n                .port(1433)\n                .schema(\"public\")\n                .ssl_method(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .tunnel_method(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .username(\"Elwyn.Sawayn7\")\n                .build())\n            .name(\"Kristine Ondricka\")\n            .workspaceId(\"aae8d678-64db-4b67-9fd5-e60b375ed4f6\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationMssql:\n    type: airbyte:DestinationMSsql\n    properties:\n      configuration:\n        database: '...my_database...'\n        destination_type: mssql\n        host: '...my_host...'\n        jdbc_url_params: '...my_jdbc_url_params...'\n        password: '...my_password...'\n        port: 1433\n        schema: public\n        ssl_method:\n          destinationMssqlSslMethodEncryptedTrustServerCertificate_:\n            - sslMethod: encrypted_trust_server_certificate\n        tunnel_method:\n          destinationMssqlSshTunnelMethodNoTunnel:\n            tunnelMethod: NO_TUNNEL\n        username: Elwyn.Sawayn7\n      name: Kristine Ondricka\n      workspaceId: aae8d678-64db-4b67-9fd5-e60b375ed4f6\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationMSsqlConfiguration:DestinationMSsqlConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationMSsqlConfiguration:DestinationMSsqlConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationMSsql resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationMSsqlConfiguration:DestinationMSsqlConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationMongodb:DestinationMongodb": {
            "description": "DestinationMongodb Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationMongodb;\nimport com.pulumi.airbyte.DestinationMongodbArgs;\nimport com.pulumi.airbyte.inputs.DestinationMongodbConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationMongodb = new DestinationMongodb(\"myDestinationMongodb\", DestinationMongodbArgs.builder()        \n            .configuration(DestinationMongodbConfigurationArgs.builder()\n                .auth_type(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .database(\"...my_database...\")\n                .destination_type(\"mongodb\")\n                .instance_type(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .tunnel_method(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .build())\n            .name(\"Ms. Kenneth Ledner\")\n            .workspaceId(\"a1840394-c260-471f-93f5-f0642dac7af5\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationMongodb:\n    type: airbyte:DestinationMongodb\n    properties:\n      configuration:\n        auth_type:\n          destinationMongodbAuthorizationTypeLoginPassword:\n            authorization: login/password\n            password: '...my_password...'\n            username: Asha61\n        database: '...my_database...'\n        destination_type: mongodb\n        instance_type:\n          destinationMongodbMongoDbInstanceTypeMongoDbAtlas:\n            clusterUrl: '...my_cluster_url...'\n            instance: atlas\n        tunnel_method:\n          destinationMongodbSshTunnelMethodNoTunnel:\n            tunnelMethod: NO_TUNNEL\n      name: Ms. Kenneth Ledner\n      workspaceId: a1840394-c260-471f-93f5-f0642dac7af5\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationMongodbConfiguration:DestinationMongodbConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationMongodbConfiguration:DestinationMongodbConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationMongodb resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationMongodbConfiguration:DestinationMongodbConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationMysql:DestinationMysql": {
            "description": "DestinationMysql Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationMysql;\nimport com.pulumi.airbyte.DestinationMysqlArgs;\nimport com.pulumi.airbyte.inputs.DestinationMysqlConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationMysql = new DestinationMysql(\"myDestinationMysql\", DestinationMysqlArgs.builder()        \n            .configuration(DestinationMysqlConfigurationArgs.builder()\n                .database(\"...my_database...\")\n                .destination_type(\"mysql\")\n                .host(\"...my_host...\")\n                .jdbc_url_params(\"...my_jdbc_url_params...\")\n                .password(\"...my_password...\")\n                .port(3306)\n                .tunnel_method(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .username(\"Mavis.Ullrich12\")\n                .build())\n            .name(\"Chad Franey IV\")\n            .workspaceId(\"fe35b60e-b1ea-4426-955b-a3c28744ed53\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationMysql:\n    type: airbyte:DestinationMysql\n    properties:\n      configuration:\n        database: '...my_database...'\n        destination_type: mysql\n        host: '...my_host...'\n        jdbc_url_params: '...my_jdbc_url_params...'\n        password: '...my_password...'\n        port: 3306\n        tunnel_method:\n          destinationMysqlSshTunnelMethodNoTunnel:\n            tunnelMethod: NO_TUNNEL\n        username: Mavis.Ullrich12\n      name: Chad Franey IV\n      workspaceId: fe35b60e-b1ea-4426-955b-a3c28744ed53\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationMysqlConfiguration:DestinationMysqlConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationMysqlConfiguration:DestinationMysqlConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationMysql resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationMysqlConfiguration:DestinationMysqlConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationOracle:DestinationOracle": {
            "description": "DestinationOracle Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationOracle;\nimport com.pulumi.airbyte.DestinationOracleArgs;\nimport com.pulumi.airbyte.inputs.DestinationOracleConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationOracle = new DestinationOracle(\"myDestinationOracle\", DestinationOracleArgs.builder()        \n            .configuration(DestinationOracleConfigurationArgs.builder()\n                .destination_type(\"oracle\")\n                .host(\"...my_host...\")\n                .jdbc_url_params(\"...my_jdbc_url_params...\")\n                .password(\"...my_password...\")\n                .port(1521)\n                .schema(\"airbyte\")\n                .sid(\"...my_sid...\")\n                .tunnel_method(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .username(\"Jimmy.Luettgen63\")\n                .build())\n            .name(\"Dewey Leannon\")\n            .workspaceId(\"c0b2f2fb-7b19-44a2-b6b2-6916fe1f08f4\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationOracle:\n    type: airbyte:DestinationOracle\n    properties:\n      configuration:\n        destination_type: oracle\n        host: '...my_host...'\n        jdbc_url_params: '...my_jdbc_url_params...'\n        password: '...my_password...'\n        port: 1521\n        schema: airbyte\n        sid: '...my_sid...'\n        tunnel_method:\n          destinationOracleSshTunnelMethodNoTunnel:\n            tunnelMethod: NO_TUNNEL\n        username: Jimmy.Luettgen63\n      name: Dewey Leannon\n      workspaceId: c0b2f2fb-7b19-44a2-b6b2-6916fe1f08f4\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationOracleConfiguration:DestinationOracleConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationOracleConfiguration:DestinationOracleConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationOracle resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationOracleConfiguration:DestinationOracleConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationPostgres:DestinationPostgres": {
            "description": "DestinationPostgres Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationPostgres;\nimport com.pulumi.airbyte.DestinationPostgresArgs;\nimport com.pulumi.airbyte.inputs.DestinationPostgresConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationPostgres = new DestinationPostgres(\"myDestinationPostgres\", DestinationPostgresArgs.builder()        \n            .configuration(DestinationPostgresConfigurationArgs.builder()\n                .database(\"...my_database...\")\n                .destination_type(\"postgres\")\n                .host(\"...my_host...\")\n                .jdbc_url_params(\"...my_jdbc_url_params...\")\n                .password(\"...my_password...\")\n                .port(5432)\n                .schema(\"public\")\n                .ssl_mode(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .tunnel_method(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .username(\"Laron.Gerlach40\")\n                .build())\n            .name(\"Isaac Wolf\")\n            .workspaceId(\"7f603e8b-445e-480c-a55e-fd20e457e185\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationPostgres:\n    type: airbyte:DestinationPostgres\n    properties:\n      configuration:\n        database: '...my_database...'\n        destination_type: postgres\n        host: '...my_host...'\n        jdbc_url_params: '...my_jdbc_url_params...'\n        password: '...my_password...'\n        port: 5432\n        schema: public\n        ssl_mode:\n          destinationPostgresSslModesAllow:\n            mode: allow\n        tunnel_method:\n          destinationPostgresSshTunnelMethodNoTunnel:\n            tunnelMethod: NO_TUNNEL\n        username: Laron.Gerlach40\n      name: Isaac Wolf\n      workspaceId: 7f603e8b-445e-480c-a55e-fd20e457e185\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationPostgresConfiguration:DestinationPostgresConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationPostgresConfiguration:DestinationPostgresConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationPostgres resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationPostgresConfiguration:DestinationPostgresConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationPubsub:DestinationPubsub": {
            "description": "DestinationPubsub Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationPubsub;\nimport com.pulumi.airbyte.DestinationPubsubArgs;\nimport com.pulumi.airbyte.inputs.DestinationPubsubConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationPubsub = new DestinationPubsub(\"myDestinationPubsub\", DestinationPubsubArgs.builder()        \n            .configuration(DestinationPubsubConfigurationArgs.builder()\n                .batching_delay_threshold(5)\n                .batching_element_count_threshold(8)\n                .batching_enabled(false)\n                .batching_request_bytes_threshold(7)\n                .credentials_json(\"...my_credentials_json...\")\n                .destination_type(\"pubsub\")\n                .ordering_enabled(false)\n                .project_id(\"...my_project_id...\")\n                .topic_id(\"...my_topic_id...\")\n                .build())\n            .name(\"Irvin Rath\")\n            .workspaceId(\"a5aa8e48-24d0-4ab4-8750-88e51862065e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationPubsub:\n    type: airbyte:DestinationPubsub\n    properties:\n      configuration:\n        batching_delay_threshold: 5\n        batching_element_count_threshold: 8\n        batching_enabled: false\n        batching_request_bytes_threshold: 7\n        credentials_json: '...my_credentials_json...'\n        destination_type: pubsub\n        ordering_enabled: false\n        project_id: '...my_project_id...'\n        topic_id: '...my_topic_id...'\n      name: Irvin Rath\n      workspaceId: a5aa8e48-24d0-4ab4-8750-88e51862065e\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationPubsubConfiguration:DestinationPubsubConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationPubsubConfiguration:DestinationPubsubConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationPubsub resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationPubsubConfiguration:DestinationPubsubConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationRedis:DestinationRedis": {
            "description": "DestinationRedis Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationRedis;\nimport com.pulumi.airbyte.DestinationRedisArgs;\nimport com.pulumi.airbyte.inputs.DestinationRedisConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationRedis = new DestinationRedis(\"myDestinationRedis\", DestinationRedisArgs.builder()        \n            .configuration(DestinationRedisConfigurationArgs.builder()\n                .cache_type(\"hash\")\n                .destination_type(\"redis\")\n                .host(\"localhost,127.0.0.1\")\n                .password(\"...my_password...\")\n                .port(6)\n                .ssl(false)\n                .ssl_mode(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .tunnel_method(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .username(\"Duncan69\")\n                .build())\n            .name(\"Diane Mayer\")\n            .workspaceId(\"8abf603a-79f9-4dfe-8ab7-da8a50ce187f\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationRedis:\n    type: airbyte:DestinationRedis\n    properties:\n      configuration:\n        cache_type: hash\n        destination_type: redis\n        host: localhost,127.0.0.1\n        password: '...my_password...'\n        port: 6\n        ssl: false\n        ssl_mode:\n          destinationRedisSslModesDisable:\n            mode: disable\n        tunnel_method:\n          destinationRedisSshTunnelMethodNoTunnel:\n            tunnelMethod: NO_TUNNEL\n        username: Duncan69\n      name: Diane Mayer\n      workspaceId: 8abf603a-79f9-4dfe-8ab7-da8a50ce187f\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationRedisConfiguration:DestinationRedisConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationRedisConfiguration:DestinationRedisConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationRedis resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationRedisConfiguration:DestinationRedisConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationRedshift:DestinationRedshift": {
            "description": "DestinationRedshift Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationRedshift;\nimport com.pulumi.airbyte.DestinationRedshiftArgs;\nimport com.pulumi.airbyte.inputs.DestinationRedshiftConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationRedshift = new DestinationRedshift(\"myDestinationRedshift\", DestinationRedshiftArgs.builder()        \n            .configuration(DestinationRedshiftConfigurationArgs.builder()\n                .database(\"...my_database...\")\n                .destination_type(\"redshift\")\n                .host(\"...my_host...\")\n                .jdbc_url_params(\"...my_jdbc_url_params...\")\n                .password(\"...my_password...\")\n                .port(5439)\n                .schema(\"public\")\n                .tunnel_method(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .uploading_method(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .username(\"Jairo.Farrell53\")\n                .build())\n            .name(\"Frankie Torphy\")\n            .workspaceId(\"526f8d98-6e88-41ea-94f0-e1012563f94e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationRedshift:\n    type: airbyte:DestinationRedshift\n    properties:\n      configuration:\n        database: '...my_database...'\n        destination_type: redshift\n        host: '...my_host...'\n        jdbc_url_params: '...my_jdbc_url_params...'\n        password: '...my_password...'\n        port: 5439\n        schema: public\n        tunnel_method:\n          destinationRedshiftSshTunnelMethodNoTunnel:\n            tunnelMethod: NO_TUNNEL\n        uploading_method:\n          destinationRedshiftUploadingMethodS3Staging:\n            accessKeyId: '...my_access_key_id...'\n            encryption:\n              destinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption:\n                encryptionType: aes_cbc_envelope\n                keyEncryptingKey: '...my_key_encrypting_key...'\n            fileBufferCount: 10\n            fileNamePattern: '{part_number}'\n            method: S3 Staging\n            purgeStagingData: true\n            s3BucketName: airbyte.staging\n            s3BucketPath: data_sync/test\n            s3BucketRegion: us-east-2\n            secretAccessKey: '...my_secret_access_key...'\n        username: Jairo.Farrell53\n      name: Frankie Torphy\n      workspaceId: 526f8d98-6e88-41ea-94f0-e1012563f94e\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationRedshiftConfiguration:DestinationRedshiftConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationRedshiftConfiguration:DestinationRedshiftConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationRedshift resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationRedshiftConfiguration:DestinationRedshiftConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationS3:DestinationS3": {
            "description": "DestinationS3 Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationS3;\nimport com.pulumi.airbyte.DestinationS3Args;\nimport com.pulumi.airbyte.inputs.DestinationS3ConfigurationArgs;\nimport com.pulumi.airbyte.inputs.DestinationS3ConfigurationFormatArgs;\nimport com.pulumi.airbyte.inputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroArgs;\nimport com.pulumi.airbyte.inputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecArgs;\nimport com.pulumi.airbyte.inputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationS3 = new DestinationS3(\"myDestinationS3\", DestinationS3Args.builder()        \n            .configuration(DestinationS3ConfigurationArgs.builder()\n                .access_key_id(\"A012345678910EXAMPLE\")\n                .destination_type(\"s3\")\n                .file_name_pattern(\"{date}\")\n                .format(DestinationS3ConfigurationFormatArgs.builder()\n                    .destinationS3OutputFormatAvroApacheAvro(DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroArgs.builder()\n                        .compressionCodec(DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecArgs.builder()\n                            .destinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2(DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2Args.builder()\n                                .codec(\"bzip2\")\n                                .build())\n                            .build())\n                        .formatType(\"Avro\")\n                        .build())\n                    .build())\n                .s3_bucket_name(\"airbyte_sync\")\n                .s3_bucket_path(\"data_sync/test\")\n                .s3_bucket_region(\"cn-northwest-1\")\n                .s3_endpoint(\"http://localhost:9000\")\n                .s3_path_format(String.format(\"%s/%s/%s_%s_%s_%s_\", NAMESPACE,STREAM_NAME,YEAR,MONTH,DAY,EPOCH))\n                .secret_access_key(\"a012345678910ABCDEFGH/AbCdEfGhEXAMPLEKEY\")\n                .build())\n            .name(\"Freddie King\")\n            .workspaceId(\"922a57a1-5be3-4e06-8807-e2b6e3ab8845\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationS3:\n    type: airbyte:DestinationS3\n    properties:\n      configuration:\n        access_key_id: A012345678910EXAMPLE\n        destination_type: s3\n        file_name_pattern: '{date}'\n        format:\n          destinationS3OutputFormatAvroApacheAvro:\n            compressionCodec:\n              destinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2:\n                codec: bzip2\n            formatType: Avro\n        s3_bucket_name: airbyte_sync\n        s3_bucket_path: data_sync/test\n        s3_bucket_region: cn-northwest-1\n        s3_endpoint: http://localhost:9000\n        s3_path_format: ${NAMESPACE}/${STREAM_NAME}/${YEAR}_${MONTH}_${DAY}_${EPOCH}_\n        secret_access_key: a012345678910ABCDEFGH/AbCdEfGhEXAMPLEKEY\n      name: Freddie King\n      workspaceId: 922a57a1-5be3-4e06-8807-e2b6e3ab8845\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationS3Configuration:DestinationS3Configuration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationS3Configuration:DestinationS3Configuration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationS3 resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationS3Configuration:DestinationS3Configuration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationS3Glue:DestinationS3Glue": {
            "description": "DestinationS3Glue Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationS3Glue;\nimport com.pulumi.airbyte.DestinationS3GlueArgs;\nimport com.pulumi.airbyte.inputs.DestinationS3GlueConfigurationArgs;\nimport com.pulumi.airbyte.inputs.DestinationS3GlueConfigurationFormatArgs;\nimport com.pulumi.airbyte.inputs.DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonArgs;\nimport com.pulumi.airbyte.inputs.DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs;\nimport com.pulumi.airbyte.inputs.DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationS3glue = new DestinationS3Glue(\"myDestinationS3glue\", DestinationS3GlueArgs.builder()        \n            .configuration(DestinationS3GlueConfigurationArgs.builder()\n                .access_key_id(\"A012345678910EXAMPLE\")\n                .destination_type(\"s3-glue\")\n                .file_name_pattern(\"{sync_id}\")\n                .format(DestinationS3GlueConfigurationFormatArgs.builder()\n                    .destinationS3GlueOutputFormatJsonLinesNewlineDelimitedJson(DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonArgs.builder()\n                        .compression(DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs.builder()\n                            .destinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip(DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs.builder()\n                                .compressionType(\"GZIP\")\n                                .build())\n                            .build())\n                        .flattening(\"No flattening\")\n                        .formatType(\"JSONL\")\n                        .build())\n                    .build())\n                .glue_database(\"airbyte_database\")\n                .glue_serialization_library(\"org.openx.data.jsonserde.JsonSerDe\")\n                .s3_bucket_name(\"airbyte_sync\")\n                .s3_bucket_path(\"data_sync/test\")\n                .s3_bucket_region(\"cn-northwest-1\")\n                .s3_endpoint(\"http://localhost:9000\")\n                .s3_path_format(String.format(\"%s/%s/%s_%s_%s_%s_\", NAMESPACE,STREAM_NAME,YEAR,MONTH,DAY,EPOCH))\n                .secret_access_key(\"a012345678910ABCDEFGH/AbCdEfGhEXAMPLEKEY\")\n                .build())\n            .name(\"Dr. Iris Hodkiewicz\")\n            .workspaceId(\"2a54a31e-9476-44a3-a865-e7956f9251a5\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationS3glue:\n    type: airbyte:DestinationS3Glue\n    properties:\n      configuration:\n        access_key_id: A012345678910EXAMPLE\n        destination_type: s3-glue\n        file_name_pattern: '{sync_id}'\n        format:\n          destinationS3GlueOutputFormatJsonLinesNewlineDelimitedJson:\n            compression:\n              destinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip:\n                compressionType: GZIP\n            flattening: No flattening\n            formatType: JSONL\n        glue_database: airbyte_database\n        glue_serialization_library: org.openx.data.jsonserde.JsonSerDe\n        s3_bucket_name: airbyte_sync\n        s3_bucket_path: data_sync/test\n        s3_bucket_region: cn-northwest-1\n        s3_endpoint: http://localhost:9000\n        s3_path_format: ${NAMESPACE}/${STREAM_NAME}/${YEAR}_${MONTH}_${DAY}_${EPOCH}_\n        secret_access_key: a012345678910ABCDEFGH/AbCdEfGhEXAMPLEKEY\n      name: Dr. Iris Hodkiewicz\n      workspaceId: 2a54a31e-9476-44a3-a865-e7956f9251a5\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationS3GlueConfiguration:DestinationS3GlueConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationS3GlueConfiguration:DestinationS3GlueConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationS3Glue resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationS3GlueConfiguration:DestinationS3GlueConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationSftpJson:DestinationSftpJson": {
            "description": "DestinationSftpJSON Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationSftpJson;\nimport com.pulumi.airbyte.DestinationSftpJsonArgs;\nimport com.pulumi.airbyte.inputs.DestinationSftpJsonConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationSftpjson = new DestinationSftpJson(\"myDestinationSftpjson\", DestinationSftpJsonArgs.builder()        \n            .configuration(DestinationSftpJsonConfigurationArgs.builder()\n                .destination_path(\"/json_data\")\n                .destination_type(\"sftp-json\")\n                .host(\"...my_host...\")\n                .password(\"...my_password...\")\n                .port(22)\n                .username(\"Lane.Schuster\")\n                .build())\n            .name(\"Ruth Zulauf\")\n            .workspaceId(\"7bfaad4f-9efc-41b4-912c-1032648dc2f6\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationSftpjson:\n    type: airbyte:DestinationSftpJson\n    properties:\n      configuration:\n        destination_path: /json_data\n        destination_type: sftp-json\n        host: '...my_host...'\n        password: '...my_password...'\n        port: 22\n        username: Lane.Schuster\n      name: Ruth Zulauf\n      workspaceId: 7bfaad4f-9efc-41b4-912c-1032648dc2f6\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationSftpJsonConfiguration:DestinationSftpJsonConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationSftpJsonConfiguration:DestinationSftpJsonConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationSftpJson resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationSftpJsonConfiguration:DestinationSftpJsonConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationSnowflake:DestinationSnowflake": {
            "description": "DestinationSnowflake Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationSnowflake;\nimport com.pulumi.airbyte.DestinationSnowflakeArgs;\nimport com.pulumi.airbyte.inputs.DestinationSnowflakeConfigurationArgs;\nimport com.pulumi.airbyte.inputs.DestinationSnowflakeConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthenticationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationSnowflake = new DestinationSnowflake(\"myDestinationSnowflake\", DestinationSnowflakeArgs.builder()        \n            .configuration(DestinationSnowflakeConfigurationArgs.builder()\n                .credentials(DestinationSnowflakeConfigurationCredentialsArgs.builder()\n                    .destinationSnowflakeAuthorizationMethodKeyPairAuthentication(DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthenticationArgs.builder()\n                        .authType(\"Key Pair Authentication\")\n                        .privateKey(\"...my_private_key...\")\n                        .privateKeyPassword(\"...my_private_key_password...\")\n                        .build())\n                    .build())\n                .database(\"AIRBYTE_DATABASE\")\n                .destination_type(\"snowflake\")\n                .host(\"accountname.us-east-2.aws.snowflakecomputing.com\")\n                .jdbc_url_params(\"...my_jdbc_url_params...\")\n                .raw_data_schema(\"...my_raw_data_schema...\")\n                .role(\"AIRBYTE_ROLE\")\n                .schema(\"AIRBYTE_SCHEMA\")\n                .use_1s1t_format(true)\n                .username(\"AIRBYTE_USER\")\n                .warehouse(\"AIRBYTE_WAREHOUSE\")\n                .build())\n            .name(\"Dr. Terrell Stanton\")\n            .workspaceId(\"fe6c632c-a3ae-4d01-9799-6312fde04771\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationSnowflake:\n    type: airbyte:DestinationSnowflake\n    properties:\n      configuration:\n        credentials:\n          destinationSnowflakeAuthorizationMethodKeyPairAuthentication:\n            authType: Key Pair Authentication\n            privateKey: '...my_private_key...'\n            privateKeyPassword: '...my_private_key_password...'\n        database: AIRBYTE_DATABASE\n        destination_type: snowflake\n        host: accountname.us-east-2.aws.snowflakecomputing.com\n        jdbc_url_params: '...my_jdbc_url_params...'\n        raw_data_schema: '...my_raw_data_schema...'\n        role: AIRBYTE_ROLE\n        schema: AIRBYTE_SCHEMA\n        use_1s1t_format: true\n        username: AIRBYTE_USER\n        warehouse: AIRBYTE_WAREHOUSE\n      name: Dr. Terrell Stanton\n      workspaceId: fe6c632c-a3ae-4d01-9799-6312fde04771\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationSnowflakeConfiguration:DestinationSnowflakeConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationSnowflakeConfiguration:DestinationSnowflakeConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationSnowflake resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationSnowflakeConfiguration:DestinationSnowflakeConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationTimeplus:DestinationTimeplus": {
            "description": "DestinationTimeplus Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationTimeplus;\nimport com.pulumi.airbyte.DestinationTimeplusArgs;\nimport com.pulumi.airbyte.inputs.DestinationTimeplusConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationTimeplus = new DestinationTimeplus(\"myDestinationTimeplus\", DestinationTimeplusArgs.builder()        \n            .configuration(DestinationTimeplusConfigurationArgs.builder()\n                .apikey(\"...my_apikey...\")\n                .destination_type(\"timeplus\")\n                .endpoint(\"https://us.timeplus.cloud/workspace_id\")\n                .build())\n            .name(\"Tamara Lang\")\n            .workspaceId(\"61d01747-6360-4a15-9b6a-660659a1adea\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationTimeplus:\n    type: airbyte:DestinationTimeplus\n    properties:\n      configuration:\n        apikey: '...my_apikey...'\n        destination_type: timeplus\n        endpoint: https://us.timeplus.cloud/workspace_id\n      name: Tamara Lang\n      workspaceId: 61d01747-6360-4a15-9b6a-660659a1adea\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationTimeplusConfiguration:DestinationTimeplusConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationTimeplusConfiguration:DestinationTimeplusConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationTimeplus resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationTimeplusConfiguration:DestinationTimeplusConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationTypesense:DestinationTypesense": {
            "description": "DestinationTypesense Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationTypesense;\nimport com.pulumi.airbyte.DestinationTypesenseArgs;\nimport com.pulumi.airbyte.inputs.DestinationTypesenseConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationTypesense = new DestinationTypesense(\"myDestinationTypesense\", DestinationTypesenseArgs.builder()        \n            .configuration(DestinationTypesenseConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .batch_size(\"...my_batch_size...\")\n                .destination_type(\"typesense\")\n                .host(\"...my_host...\")\n                .port(\"...my_port...\")\n                .protocol(\"...my_protocol...\")\n                .build())\n            .name(\"Wm Hane\")\n            .workspaceId(\"1d6c645b-08b6-4189-9baa-0fe1ade008e6\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationTypesense:\n    type: airbyte:DestinationTypesense\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        batch_size: '...my_batch_size...'\n        destination_type: typesense\n        host: '...my_host...'\n        port: '...my_port...'\n        protocol: '...my_protocol...'\n      name: Wm Hane\n      workspaceId: 1d6c645b-08b6-4189-9baa-0fe1ade008e6\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationTypesenseConfiguration:DestinationTypesenseConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationTypesenseConfiguration:DestinationTypesenseConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationTypesense resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationTypesenseConfiguration:DestinationTypesenseConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationVertica:DestinationVertica": {
            "description": "DestinationVertica Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationVertica;\nimport com.pulumi.airbyte.DestinationVerticaArgs;\nimport com.pulumi.airbyte.inputs.DestinationVerticaConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationVertica = new DestinationVertica(\"myDestinationVertica\", DestinationVerticaArgs.builder()        \n            .configuration(DestinationVerticaConfigurationArgs.builder()\n                .database(\"...my_database...\")\n                .destination_type(\"vertica\")\n                .host(\"...my_host...\")\n                .jdbc_url_params(\"...my_jdbc_url_params...\")\n                .password(\"...my_password...\")\n                .port(5433)\n                .schema(\"...my_schema...\")\n                .tunnel_method(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .username(\"Judge_Schinner\")\n                .build())\n            .name(\"Marion Aufderhar\")\n            .workspaceId(\"cdb5a341-8143-4010-8218-13d5208ece7e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationVertica:\n    type: airbyte:DestinationVertica\n    properties:\n      configuration:\n        database: '...my_database...'\n        destination_type: vertica\n        host: '...my_host...'\n        jdbc_url_params: '...my_jdbc_url_params...'\n        password: '...my_password...'\n        port: 5433\n        schema: '...my_schema...'\n        tunnel_method:\n          destinationVerticaSshTunnelMethodNoTunnel:\n            tunnelMethod: NO_TUNNEL\n        username: Judge_Schinner\n      name: Marion Aufderhar\n      workspaceId: cdb5a341-8143-4010-8218-13d5208ece7e\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationVerticaConfiguration:DestinationVerticaConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationVerticaConfiguration:DestinationVerticaConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationVertica resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationVerticaConfiguration:DestinationVerticaConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/destinationXata:DestinationXata": {
            "description": "DestinationXata Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.DestinationXata;\nimport com.pulumi.airbyte.DestinationXataArgs;\nimport com.pulumi.airbyte.inputs.DestinationXataConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDestinationXata = new DestinationXata(\"myDestinationXata\", DestinationXataArgs.builder()        \n            .configuration(DestinationXataConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .db_url(\"https://my-workspace-abc123.us-east-1.xata.sh/db/nyc-taxi-fares:main\")\n                .destination_type(\"xata\")\n                .build())\n            .name(\"Sally Dooley\")\n            .workspaceId(\"68451c6c-6e20-45e1-adea-b3fec9578a64\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDestinationXata:\n    type: airbyte:DestinationXata\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        db_url: https://my-workspace-abc123.us-east-1.xata.sh/db/nyc-taxi-fares:main\n        destination_type: xata\n      name: Sally Dooley\n      workspaceId: 68451c6c-6e20-45e1-adea-b3fec9578a64\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationXataConfiguration:DestinationXataConfiguration"
                },
                "destinationId": {
                    "type": "string"
                },
                "destinationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "destinationId",
                "destinationType",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/DestinationXataConfiguration:DestinationXataConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DestinationXata resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/DestinationXataConfiguration:DestinationXataConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "destinationType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceAha:SourceAha": {
            "description": "SourceAha Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceAha;\nimport com.pulumi.airbyte.SourceAhaArgs;\nimport com.pulumi.airbyte.inputs.SourceAhaConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceAha = new SourceAha(\"mySourceAha\", SourceAhaArgs.builder()        \n            .configuration(SourceAhaConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .source_type(\"aha\")\n                .url(\"...my_url...\")\n                .build())\n            .name(\"Brandy Gibson\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"3a8418d1-6230-49fb-8929-921aefb9f58c\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceAha:\n    type: airbyte:SourceAha\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        source_type: aha\n        url: '...my_url...'\n      name: Brandy Gibson\n      secretId: '...my_secret_id...'\n      workspaceId: 3a8418d1-6230-49fb-8929-921aefb9f58c\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceAhaConfiguration:SourceAhaConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceAhaConfiguration:SourceAhaConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceAha resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceAhaConfiguration:SourceAhaConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceAircall:SourceAircall": {
            "description": "SourceAircall Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceAircall;\nimport com.pulumi.airbyte.SourceAircallArgs;\nimport com.pulumi.airbyte.inputs.SourceAircallConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceAircall = new SourceAircall(\"mySourceAircall\", SourceAircallArgs.builder()        \n            .configuration(SourceAircallConfigurationArgs.builder()\n                .api_id(\"...my_api_id...\")\n                .api_token(\"...my_api_token...\")\n                .source_type(\"aircall\")\n                .start_date(\"2022-03-01T00:00:00.000Z\")\n                .build())\n            .name(\"Leslie Waters\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"e4be0560-13f5-49da-b57a-59ecfef66ef1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceAircall:\n    type: airbyte:SourceAircall\n    properties:\n      configuration:\n        api_id: '...my_api_id...'\n        api_token: '...my_api_token...'\n        source_type: aircall\n        start_date: 2022-03-01T00:00:00.000Z\n      name: Leslie Waters\n      secretId: '...my_secret_id...'\n      workspaceId: e4be0560-13f5-49da-b57a-59ecfef66ef1\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceAircallConfiguration:SourceAircallConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceAircallConfiguration:SourceAircallConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceAircall resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceAircallConfiguration:SourceAircallConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceAirtable:SourceAirtable": {
            "description": "SourceAirtable Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceAirtable;\nimport com.pulumi.airbyte.SourceAirtableArgs;\nimport com.pulumi.airbyte.inputs.SourceAirtableConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceAirtableConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationOAuth20Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceAirtable = new SourceAirtable(\"mySourceAirtable\", SourceAirtableArgs.builder()        \n            .configuration(SourceAirtableConfigurationArgs.builder()\n                .credentials(SourceAirtableConfigurationCredentialsArgs.builder()\n                    .sourceAirtableAuthenticationOAuth20(SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationOAuth20Args.builder()\n                        .accessToken(\"...my_access_token...\")\n                        .authMethod(\"oauth2.0\")\n                        .clientId(\"...my_client_id...\")\n                        .clientSecret(\"...my_client_secret...\")\n                        .refreshToken(\"...my_refresh_token...\")\n                        .tokenExpiryDate(\"2020-12-11T09:39:15.481Z\")\n                        .build())\n                    .build())\n                .source_type(\"airtable\")\n                .build())\n            .name(\"Vincent Frami\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"c2beb477-373c-48d7-af64-d1db1f2c4310\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceAirtable:\n    type: airbyte:SourceAirtable\n    properties:\n      configuration:\n        credentials:\n          sourceAirtableAuthenticationOAuth20:\n            accessToken: '...my_access_token...'\n            authMethod: oauth2.0\n            clientId: '...my_client_id...'\n            clientSecret: '...my_client_secret...'\n            refreshToken: '...my_refresh_token...'\n            tokenExpiryDate: 2020-12-11T09:39:15.481Z\n        source_type: airtable\n      name: Vincent Frami\n      secretId: '...my_secret_id...'\n      workspaceId: c2beb477-373c-48d7-af64-d1db1f2c4310\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceAirtableConfiguration:SourceAirtableConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceAirtableConfiguration:SourceAirtableConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceAirtable resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceAirtableConfiguration:SourceAirtableConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceAlloydb:SourceAlloydb": {
            "description": "SourceAlloydb Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceAlloydb;\nimport com.pulumi.airbyte.SourceAlloydbArgs;\nimport com.pulumi.airbyte.inputs.SourceAlloydbConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceAlloydb = new SourceAlloydb(\"mySourceAlloydb\", SourceAlloydbArgs.builder()        \n            .configuration(SourceAlloydbConfigurationArgs.builder()\n                .database(\"...my_database...\")\n                .host(\"...my_host...\")\n                .jdbc_url_params(\"...my_jdbc_url_params...\")\n                .password(\"...my_password...\")\n                .port(5432)\n                .replication_method(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .schemas(\"...\")\n                .source_type(\"alloydb\")\n                .ssl_mode(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .tunnel_method(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .username(\"Keon28\")\n                .build())\n            .name(\"Merle Carroll\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"9e06e3a4-3700-40ae-ab6b-c9b8f759eac5\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceAlloydb:\n    type: airbyte:SourceAlloydb\n    properties:\n      configuration:\n        database: '...my_database...'\n        host: '...my_host...'\n        jdbc_url_params: '...my_jdbc_url_params...'\n        password: '...my_password...'\n        port: 5432\n        replication_method:\n          sourceAlloydbReplicationMethodLogicalReplicationCdc_:\n            - initialWaitingSeconds: 4\n              lsnCommitBehaviour: While reading Data\n              method: CDC\n              plugin: pgoutput\n              publication: '...my_publication...'\n              queueSize: 9\n              replicationSlot: '...my_replication_slot...'\n        schemas:\n          - '...'\n        source_type: alloydb\n        ssl_mode:\n          sourceAlloydbSslModesAllow:\n            mode: allow\n        tunnel_method:\n          sourceAlloydbSshTunnelMethodNoTunnel:\n            tunnelMethod: NO_TUNNEL\n        username: Keon28\n      name: Merle Carroll\n      secretId: '...my_secret_id...'\n      workspaceId: 9e06e3a4-3700-40ae-ab6b-c9b8f759eac5\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceAlloydbConfiguration:SourceAlloydbConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceAlloydbConfiguration:SourceAlloydbConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceAlloydb resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceAlloydbConfiguration:SourceAlloydbConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceAmazonAds:SourceAmazonAds": {
            "description": "SourceAmazonAds Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceAmazonAds;\nimport com.pulumi.airbyte.SourceAmazonAdsArgs;\nimport com.pulumi.airbyte.inputs.SourceAmazonAdsConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceAmazonads = new SourceAmazonAds(\"mySourceAmazonads\", SourceAmazonAdsArgs.builder()        \n            .configuration(SourceAmazonAdsConfigurationArgs.builder()\n                .auth_type(\"oauth2.0\")\n                .client_id(\"...my_client_id...\")\n                .client_secret(\"...my_client_secret...\")\n                .look_back_window(3)\n                .profiles(6)\n                .refresh_token(\"...my_refresh_token...\")\n                .region(\"EU\")\n                .report_record_types(\"asins_keywords\")\n                .source_type(\"amazon-ads\")\n                .start_date(\"2022-10-10\")\n                .state_filter(\"archived\")\n                .build())\n            .name(\"Evelyn Bode\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"2965bb8a-7202-4611-835e-139dbc2259b1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceAmazonads:\n    type: airbyte:SourceAmazonAds\n    properties:\n      configuration:\n        auth_type: oauth2.0\n        client_id: '...my_client_id...'\n        client_secret: '...my_client_secret...'\n        look_back_window: 3\n        profiles:\n          - 6\n        refresh_token: '...my_refresh_token...'\n        region: EU\n        report_record_types:\n          - asins_keywords\n        source_type: amazon-ads\n        start_date: 2022-10-10\n        state_filter:\n          - archived\n      name: Evelyn Bode\n      secretId: '...my_secret_id...'\n      workspaceId: 2965bb8a-7202-4611-835e-139dbc2259b1\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceAmazonAdsConfiguration:SourceAmazonAdsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceAmazonAdsConfiguration:SourceAmazonAdsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceAmazonAds resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceAmazonAdsConfiguration:SourceAmazonAdsConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceAmazonSellerPartner:SourceAmazonSellerPartner": {
            "description": "SourceAmazonSellerPartner Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceAmazonSellerPartner;\nimport com.pulumi.airbyte.SourceAmazonSellerPartnerArgs;\nimport com.pulumi.airbyte.inputs.SourceAmazonSellerPartnerConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceAmazonsellerpartner = new SourceAmazonSellerPartner(\"mySourceAmazonsellerpartner\", SourceAmazonSellerPartnerArgs.builder()        \n            .configuration(SourceAmazonSellerPartnerConfigurationArgs.builder()\n                .advanced_stream_options(\"{\\\"GET_SOME_REPORT\\\": {\\\"custom\\\": \\\"true\\\"}}\")\n                .auth_type(\"oauth2.0\")\n                .aws_access_key(\"...my_aws_access_key...\")\n                .aws_environment(\"SANDBOX\")\n                .aws_secret_key(\"...my_aws_secret_key...\")\n                .lwa_app_id(\"...my_lwa_app_id...\")\n                .lwa_client_secret(\"...my_lwa_client_secret...\")\n                .max_wait_seconds(1980)\n                .period_in_days(6)\n                .refresh_token(\"...my_refresh_token...\")\n                .region(\"SE\")\n                .replication_end_date(\"2017-01-25T00:00:00Z\")\n                .replication_start_date(\"2017-01-25T00:00:00Z\")\n                .report_options(\"{\\\"GET_BRAND_ANALYTICS_SEARCH_TERMS_REPORT\\\": {\\\"reportPeriod\\\": \\\"WEEK\\\"}}\")\n                .role_arn(\"...my_role_arn...\")\n                .source_type(\"amazon-seller-partner\")\n                .build())\n            .name(\"Mr. Angela Volkman\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"4cb0672d-1ad8-479e-ab96-65b85efbd02b\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceAmazonsellerpartner:\n    type: airbyte:SourceAmazonSellerPartner\n    properties:\n      configuration:\n        advanced_stream_options: '{\"GET_SOME_REPORT\": {\"custom\": \"true\"}}'\n        auth_type: oauth2.0\n        aws_access_key: '...my_aws_access_key...'\n        aws_environment: SANDBOX\n        aws_secret_key: '...my_aws_secret_key...'\n        lwa_app_id: '...my_lwa_app_id...'\n        lwa_client_secret: '...my_lwa_client_secret...'\n        max_wait_seconds: 1980\n        period_in_days: 6\n        refresh_token: '...my_refresh_token...'\n        region: SE\n        replication_end_date: 2017-01-25T00:00:00Z\n        replication_start_date: 2017-01-25T00:00:00Z\n        report_options: '{\"GET_BRAND_ANALYTICS_SEARCH_TERMS_REPORT\": {\"reportPeriod\": \"WEEK\"}}'\n        role_arn: '...my_role_arn...'\n        source_type: amazon-seller-partner\n      name: Mr. Angela Volkman\n      secretId: '...my_secret_id...'\n      workspaceId: 4cb0672d-1ad8-479e-ab96-65b85efbd02b\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceAmazonSellerPartnerConfiguration:SourceAmazonSellerPartnerConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceAmazonSellerPartnerConfiguration:SourceAmazonSellerPartnerConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceAmazonSellerPartner resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceAmazonSellerPartnerConfiguration:SourceAmazonSellerPartnerConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceAmazonSqs:SourceAmazonSqs": {
            "description": "SourceAmazonSqs Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceAmazonSqs;\nimport com.pulumi.airbyte.SourceAmazonSqsArgs;\nimport com.pulumi.airbyte.inputs.SourceAmazonSqsConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceAmazonsqs = new SourceAmazonSqs(\"mySourceAmazonsqs\", SourceAmazonSqsArgs.builder()        \n            .configuration(SourceAmazonSqsConfigurationArgs.builder()\n                .access_key(\"xxxxxHRNxxx3TBxxxxxx\")\n                .attributes_to_return(\"attr1,attr2\")\n                .delete_messages(true)\n                .max_batch_size(5)\n                .max_wait_time(5)\n                .queue_url(\"https://sqs.eu-west-1.amazonaws.com/1234567890/my-example-queue\")\n                .region(\"eu-south-1\")\n                .secret_key(\"hu+qE5exxxxT6o/ZrKsxxxxxxBhxxXLexxxxxVKz\")\n                .source_type(\"amazon-sqs\")\n                .visibility_timeout(15)\n                .build())\n            .name(\"Rosemarie Kub\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"259e3ea4-b519-47f9-a443-da7ce52b895c\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceAmazonsqs:\n    type: airbyte:SourceAmazonSqs\n    properties:\n      configuration:\n        access_key: xxxxxHRNxxx3TBxxxxxx\n        attributes_to_return: attr1,attr2\n        delete_messages: true\n        max_batch_size: 5\n        max_wait_time: 5\n        queue_url: https://sqs.eu-west-1.amazonaws.com/1234567890/my-example-queue\n        region: eu-south-1\n        secret_key: hu+qE5exxxxT6o/ZrKsxxxxxxBhxxXLexxxxxVKz\n        source_type: amazon-sqs\n        visibility_timeout: 15\n      name: Rosemarie Kub\n      secretId: '...my_secret_id...'\n      workspaceId: 259e3ea4-b519-47f9-a443-da7ce52b895c\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceAmazonSqsConfiguration:SourceAmazonSqsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceAmazonSqsConfiguration:SourceAmazonSqsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceAmazonSqs resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceAmazonSqsConfiguration:SourceAmazonSqsConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceAmplitude:SourceAmplitude": {
            "description": "SourceAmplitude Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceAmplitude;\nimport com.pulumi.airbyte.SourceAmplitudeArgs;\nimport com.pulumi.airbyte.inputs.SourceAmplitudeConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceAmplitude = new SourceAmplitude(\"mySourceAmplitude\", SourceAmplitudeArgs.builder()        \n            .configuration(SourceAmplitudeConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .data_region(\"Standard Server\")\n                .request_time_range(2)\n                .secret_key(\"...my_secret_key...\")\n                .source_type(\"amplitude\")\n                .start_date(\"2021-01-25T00:00:00Z\")\n                .build())\n            .name(\"Sadie Kemmer\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"4efb0b34-896c-43ca-9acf-be2fd5707577\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceAmplitude:\n    type: airbyte:SourceAmplitude\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        data_region: Standard Server\n        request_time_range: 2\n        secret_key: '...my_secret_key...'\n        source_type: amplitude\n        start_date: 2021-01-25T00:00:00Z\n      name: Sadie Kemmer\n      secretId: '...my_secret_id...'\n      workspaceId: 4efb0b34-896c-43ca-9acf-be2fd5707577\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceAmplitudeConfiguration:SourceAmplitudeConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceAmplitudeConfiguration:SourceAmplitudeConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceAmplitude resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceAmplitudeConfiguration:SourceAmplitudeConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceApifyDataset:SourceApifyDataset": {
            "description": "SourceApifyDataset Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceApifyDataset;\nimport com.pulumi.airbyte.SourceApifyDatasetArgs;\nimport com.pulumi.airbyte.inputs.SourceApifyDatasetConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceApifydataset = new SourceApifyDataset(\"mySourceApifydataset\", SourceApifyDatasetArgs.builder()        \n            .configuration(SourceApifyDatasetConfigurationArgs.builder()\n                .clean(true)\n                .dataset_id(\"...my_dataset_id...\")\n                .source_type(\"apify-dataset\")\n                .build())\n            .name(\"Natasha Bogan\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"deac646e-cb57-4340-9e3e-b1e5a2b12eb0\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceApifydataset:\n    type: airbyte:SourceApifyDataset\n    properties:\n      configuration:\n        clean: true\n        dataset_id: '...my_dataset_id...'\n        source_type: apify-dataset\n      name: Natasha Bogan\n      secretId: '...my_secret_id...'\n      workspaceId: deac646e-cb57-4340-9e3e-b1e5a2b12eb0\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceApifyDatasetConfiguration:SourceApifyDatasetConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceApifyDatasetConfiguration:SourceApifyDatasetConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceApifyDataset resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceApifyDatasetConfiguration:SourceApifyDatasetConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceAppfollow:SourceAppfollow": {
            "description": "SourceAppfollow Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceAppfollow;\nimport com.pulumi.airbyte.SourceAppfollowArgs;\nimport com.pulumi.airbyte.inputs.SourceAppfollowConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceAppfollow = new SourceAppfollow(\"mySourceAppfollow\", SourceAppfollowArgs.builder()        \n            .configuration(SourceAppfollowConfigurationArgs.builder()\n                .api_secret(\"...my_api_secret...\")\n                .source_type(\"appfollow\")\n                .build())\n            .name(\"Mrs. Elisa Bogisich\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"b99545fc-95fa-4889-b0e1-89dbb30fcb33\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceAppfollow:\n    type: airbyte:SourceAppfollow\n    properties:\n      configuration:\n        api_secret: '...my_api_secret...'\n        source_type: appfollow\n      name: Mrs. Elisa Bogisich\n      secretId: '...my_secret_id...'\n      workspaceId: b99545fc-95fa-4889-b0e1-89dbb30fcb33\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceAppfollowConfiguration:SourceAppfollowConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceAppfollowConfiguration:SourceAppfollowConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceAppfollow resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceAppfollowConfiguration:SourceAppfollowConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceAsana:SourceAsana": {
            "description": "SourceAsana Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceAsana;\nimport com.pulumi.airbyte.SourceAsanaArgs;\nimport com.pulumi.airbyte.inputs.SourceAsanaConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceAsanaConfigurationCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceAsana = new SourceAsana(\"mySourceAsana\", SourceAsanaArgs.builder()        \n            .configuration(SourceAsanaConfigurationArgs.builder()\n                .credentials(SourceAsanaConfigurationCredentialsArgs.builder()\n                    .sourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth_(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .build())\n                .source_type(\"asana\")\n                .build())\n            .name(\"Doug Baumbach\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"b197cd44-e2f5-42d8-ad35-13bb6f48b656\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceAsana:\n    type: airbyte:SourceAsana\n    properties:\n      configuration:\n        credentials:\n          sourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth_:\n            - clientId: '...my_client_id...'\n              clientSecret: '...my_client_secret...'\n              optionTitle: OAuth Credentials\n              refreshToken: '...my_refresh_token...'\n        source_type: asana\n      name: Doug Baumbach\n      secretId: '...my_secret_id...'\n      workspaceId: b197cd44-e2f5-42d8-ad35-13bb6f48b656\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceAsanaConfiguration:SourceAsanaConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceAsanaConfiguration:SourceAsanaConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceAsana resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceAsanaConfiguration:SourceAsanaConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceAuth0:SourceAuth0": {
            "description": "SourceAuth0 Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceAuth0;\nimport com.pulumi.airbyte.SourceAuth0Args;\nimport com.pulumi.airbyte.inputs.SourceAuth0ConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceAuth0ConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2AccessTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceAuth0 = new SourceAuth0(\"mySourceAuth0\", SourceAuth0Args.builder()        \n            .configuration(SourceAuth0ConfigurationArgs.builder()\n                .base_url(\"https://dev-yourOrg.us.auth0.com/\")\n                .credentials(SourceAuth0ConfigurationCredentialsArgs.builder()\n                    .sourceAuth0AuthenticationMethodOAuth2AccessToken(SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2AccessTokenArgs.builder()\n                        .accessToken(\"...my_access_token...\")\n                        .authType(\"oauth2_access_token\")\n                        .build())\n                    .build())\n                .source_type(\"auth0\")\n                .build())\n            .name(\"Roosevelt Schultz\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"5ff2e4b2-7537-4a8c-99e7-319c177d525f\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceAuth0:\n    type: airbyte:SourceAuth0\n    properties:\n      configuration:\n        base_url: https://dev-yourOrg.us.auth0.com/\n        credentials:\n          sourceAuth0AuthenticationMethodOAuth2AccessToken:\n            accessToken: '...my_access_token...'\n            authType: oauth2_access_token\n        source_type: auth0\n      name: Roosevelt Schultz\n      secretId: '...my_secret_id...'\n      workspaceId: 5ff2e4b2-7537-4a8c-99e7-319c177d525f\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceAuth0Configuration:SourceAuth0Configuration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceAuth0Configuration:SourceAuth0Configuration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceAuth0 resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceAuth0Configuration:SourceAuth0Configuration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceAwsCloudtrail:SourceAwsCloudtrail": {
            "description": "SourceAwsCloudtrail Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceAwsCloudtrail;\nimport com.pulumi.airbyte.SourceAwsCloudtrailArgs;\nimport com.pulumi.airbyte.inputs.SourceAwsCloudtrailConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceAwscloudtrail = new SourceAwsCloudtrail(\"mySourceAwscloudtrail\", SourceAwsCloudtrailArgs.builder()        \n            .configuration(SourceAwsCloudtrailConfigurationArgs.builder()\n                .aws_key_id(\"...my_aws_key_id...\")\n                .aws_region_name(\"...my_aws_region_name...\")\n                .aws_secret_key(\"...my_aws_secret_key...\")\n                .source_type(\"aws-cloudtrail\")\n                .start_date(\"2021-01-01\")\n                .build())\n            .name(\"Gregory Bernhard\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"eb52ff78-5fc3-4781-8d4c-98e0c2bb89eb\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceAwscloudtrail:\n    type: airbyte:SourceAwsCloudtrail\n    properties:\n      configuration:\n        aws_key_id: '...my_aws_key_id...'\n        aws_region_name: '...my_aws_region_name...'\n        aws_secret_key: '...my_aws_secret_key...'\n        source_type: aws-cloudtrail\n        start_date: 2021-01-01\n      name: Gregory Bernhard\n      secretId: '...my_secret_id...'\n      workspaceId: eb52ff78-5fc3-4781-8d4c-98e0c2bb89eb\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceAwsCloudtrailConfiguration:SourceAwsCloudtrailConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceAwsCloudtrailConfiguration:SourceAwsCloudtrailConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceAwsCloudtrail resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceAwsCloudtrailConfiguration:SourceAwsCloudtrailConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceAzureBlobStorage:SourceAzureBlobStorage": {
            "description": "SourceAzureBlobStorage Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceAzureBlobStorage;\nimport com.pulumi.airbyte.SourceAzureBlobStorageArgs;\nimport com.pulumi.airbyte.inputs.SourceAzureBlobStorageConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceAzureBlobStorageConfigurationFormatArgs;\nimport com.pulumi.airbyte.inputs.SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJsonArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceAzureblobstorage = new SourceAzureBlobStorage(\"mySourceAzureblobstorage\", SourceAzureBlobStorageArgs.builder()        \n            .configuration(SourceAzureBlobStorageConfigurationArgs.builder()\n                .azure_blob_storage_account_key(\"Z8ZkZpteggFx394vm+PJHnGTvdRncaYS+JhLKdj789YNmD+iyGTnG+PV+POiuYNhBg/ACS+LKjd%4FG3FHGN12Nd==\")\n                .azure_blob_storage_account_name(\"airbyte5storage\")\n                .azure_blob_storage_blobs_prefix(\"FolderA/FolderB/\")\n                .azure_blob_storage_container_name(\"airbytetescontainername\")\n                .azure_blob_storage_endpoint(\"blob.core.windows.net\")\n                .azure_blob_storage_schema_inference_limit(500)\n                .format(SourceAzureBlobStorageConfigurationFormatArgs.builder()\n                    .sourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJson(SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJsonArgs.builder()\n                        .formatType(\"JSONL\")\n                        .build())\n                    .build())\n                .source_type(\"azure-blob-storage\")\n                .build())\n            .name(\"Cristina Murphy\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"36c60050-3d8b-4b31-980f-739ae9e057eb\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceAzureblobstorage:\n    type: airbyte:SourceAzureBlobStorage\n    properties:\n      configuration:\n        azure_blob_storage_account_key: Z8ZkZpteggFx394vm+PJHnGTvdRncaYS+JhLKdj789YNmD+iyGTnG+PV+POiuYNhBg/ACS+LKjd%4FG3FHGN12Nd==\n        azure_blob_storage_account_name: airbyte5storage\n        azure_blob_storage_blobs_prefix: FolderA/FolderB/\n        azure_blob_storage_container_name: airbytetescontainername\n        azure_blob_storage_endpoint: blob.core.windows.net\n        azure_blob_storage_schema_inference_limit: 500\n        format:\n          sourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJson:\n            formatType: JSONL\n        source_type: azure-blob-storage\n      name: Cristina Murphy\n      secretId: '...my_secret_id...'\n      workspaceId: 36c60050-3d8b-4b31-980f-739ae9e057eb\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceAzureBlobStorageConfiguration:SourceAzureBlobStorageConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceAzureBlobStorageConfiguration:SourceAzureBlobStorageConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceAzureBlobStorage resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceAzureBlobStorageConfiguration:SourceAzureBlobStorageConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceAzureTable:SourceAzureTable": {
            "description": "SourceAzureTable Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceAzureTable;\nimport com.pulumi.airbyte.SourceAzureTableArgs;\nimport com.pulumi.airbyte.inputs.SourceAzureTableConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceAzuretable = new SourceAzureTable(\"mySourceAzuretable\", SourceAzureTableArgs.builder()        \n            .configuration(SourceAzureTableConfigurationArgs.builder()\n                .source_type(\"azure-table\")\n                .storage_access_key(\"...my_storage_access_key...\")\n                .storage_account_name(\"...my_storage_account_name...\")\n                .storage_endpoint_suffix(\"core.chinacloudapi.cn\")\n                .build())\n            .name(\"Bobbie Thompson\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"10331f39-81d4-4c70-8b60-7f3c93c73b9d\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceAzuretable:\n    type: airbyte:SourceAzureTable\n    properties:\n      configuration:\n        source_type: azure-table\n        storage_access_key: '...my_storage_access_key...'\n        storage_account_name: '...my_storage_account_name...'\n        storage_endpoint_suffix: core.chinacloudapi.cn\n      name: Bobbie Thompson\n      secretId: '...my_secret_id...'\n      workspaceId: 10331f39-81d4-4c70-8b60-7f3c93c73b9d\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceAzureTableConfiguration:SourceAzureTableConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceAzureTableConfiguration:SourceAzureTableConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceAzureTable resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceAzureTableConfiguration:SourceAzureTableConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceBambooHr:SourceBambooHr": {
            "description": "SourceBambooHr Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceBambooHr;\nimport com.pulumi.airbyte.SourceBambooHrArgs;\nimport com.pulumi.airbyte.inputs.SourceBambooHrConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceBamboohr = new SourceBambooHr(\"mySourceBamboohr\", SourceBambooHrArgs.builder()        \n            .configuration(SourceBambooHrConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .custom_reports_fields(\"...my_custom_reports_fields...\")\n                .custom_reports_include_default_fields(true)\n                .source_type(\"bamboo-hr\")\n                .subdomain(\"...my_subdomain...\")\n                .build())\n            .name(\"Mandy Collier\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"da7e23f2-2574-411f-af4b-7544e472e802\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceBamboohr:\n    type: airbyte:SourceBambooHr\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        custom_reports_fields: '...my_custom_reports_fields...'\n        custom_reports_include_default_fields: true\n        source_type: bamboo-hr\n        subdomain: '...my_subdomain...'\n      name: Mandy Collier\n      secretId: '...my_secret_id...'\n      workspaceId: da7e23f2-2574-411f-af4b-7544e472e802\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceBambooHrConfiguration:SourceBambooHrConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceBambooHrConfiguration:SourceBambooHrConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceBambooHr resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceBambooHrConfiguration:SourceBambooHrConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceBigcommerce:SourceBigcommerce": {
            "description": "SourceBigcommerce Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceBigcommerce;\nimport com.pulumi.airbyte.SourceBigcommerceArgs;\nimport com.pulumi.airbyte.inputs.SourceBigcommerceConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceBigcommerce = new SourceBigcommerce(\"mySourceBigcommerce\", SourceBigcommerceArgs.builder()        \n            .configuration(SourceBigcommerceConfigurationArgs.builder()\n                .access_token(\"...my_access_token...\")\n                .source_type(\"bigcommerce\")\n                .start_date(\"2021-01-01\")\n                .store_hash(\"...my_store_hash...\")\n                .build())\n            .name(\"Bill Kling\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"b40463a7-d575-4f14-80e7-64ad7334ec1b\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceBigcommerce:\n    type: airbyte:SourceBigcommerce\n    properties:\n      configuration:\n        access_token: '...my_access_token...'\n        source_type: bigcommerce\n        start_date: 2021-01-01\n        store_hash: '...my_store_hash...'\n      name: Bill Kling\n      secretId: '...my_secret_id...'\n      workspaceId: b40463a7-d575-4f14-80e7-64ad7334ec1b\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceBigcommerceConfiguration:SourceBigcommerceConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceBigcommerceConfiguration:SourceBigcommerceConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceBigcommerce resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceBigcommerceConfiguration:SourceBigcommerceConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceBigquery:SourceBigquery": {
            "description": "SourceBigquery Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceBigquery;\nimport com.pulumi.airbyte.SourceBigqueryArgs;\nimport com.pulumi.airbyte.inputs.SourceBigqueryConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceBigquery = new SourceBigquery(\"mySourceBigquery\", SourceBigqueryArgs.builder()        \n            .configuration(SourceBigqueryConfigurationArgs.builder()\n                .credentials_json(\"...my_credentials_json...\")\n                .dataset_id(\"...my_dataset_id...\")\n                .project_id(\"...my_project_id...\")\n                .source_type(\"bigquery\")\n                .build())\n            .name(\"Tracey Bosco\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"6a08088d-100e-4fad-a200-ef0422eb2164\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceBigquery:\n    type: airbyte:SourceBigquery\n    properties:\n      configuration:\n        credentials_json: '...my_credentials_json...'\n        dataset_id: '...my_dataset_id...'\n        project_id: '...my_project_id...'\n        source_type: bigquery\n      name: Tracey Bosco\n      secretId: '...my_secret_id...'\n      workspaceId: 6a08088d-100e-4fad-a200-ef0422eb2164\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceBigqueryConfiguration:SourceBigqueryConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceBigqueryConfiguration:SourceBigqueryConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceBigquery resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceBigqueryConfiguration:SourceBigqueryConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceBingAds:SourceBingAds": {
            "description": "SourceBingAds Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceBingAds;\nimport com.pulumi.airbyte.SourceBingAdsArgs;\nimport com.pulumi.airbyte.inputs.SourceBingAdsConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceBingads = new SourceBingAds(\"mySourceBingads\", SourceBingAdsArgs.builder()        \n            .configuration(SourceBingAdsConfigurationArgs.builder()\n                .auth_method(\"oauth2.0\")\n                .client_id(\"...my_client_id...\")\n                .client_secret(\"...my_client_secret...\")\n                .developer_token(\"...my_developer_token...\")\n                .lookback_window(8)\n                .refresh_token(\"...my_refresh_token...\")\n                .reports_start_date(\"2021-04-24\")\n                .source_type(\"bing-ads\")\n                .tenant_id(\"...my_tenant_id...\")\n                .build())\n            .name(\"Randolph Lebsack\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"6c723ffd-a9e0-46be-a482-5c1fc0e115c8\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceBingads:\n    type: airbyte:SourceBingAds\n    properties:\n      configuration:\n        auth_method: oauth2.0\n        client_id: '...my_client_id...'\n        client_secret: '...my_client_secret...'\n        developer_token: '...my_developer_token...'\n        lookback_window: 8\n        refresh_token: '...my_refresh_token...'\n        reports_start_date: 2021-04-24\n        source_type: bing-ads\n        tenant_id: '...my_tenant_id...'\n      name: Randolph Lebsack\n      secretId: '...my_secret_id...'\n      workspaceId: 6c723ffd-a9e0-46be-a482-5c1fc0e115c8\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceBingAdsConfiguration:SourceBingAdsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceBingAdsConfiguration:SourceBingAdsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceBingAds resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceBingAdsConfiguration:SourceBingAdsConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceBraintree:SourceBraintree": {
            "description": "SourceBraintree Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceBraintree;\nimport com.pulumi.airbyte.SourceBraintreeArgs;\nimport com.pulumi.airbyte.inputs.SourceBraintreeConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceBraintree = new SourceBraintree(\"mySourceBraintree\", SourceBraintreeArgs.builder()        \n            .configuration(SourceBraintreeConfigurationArgs.builder()\n                .environment(\"Qa\")\n                .merchant_id(\"...my_merchant_id...\")\n                .private_key(\"...my_private_key...\")\n                .public_key(\"...my_public_key...\")\n                .source_type(\"braintree\")\n                .start_date(\"2020-11-22 20:20:05\")\n                .build())\n            .name(\"Olga Hermiston\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"ec42defc-ce8f-4197-b773-e63562a7b408\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceBraintree:\n    type: airbyte:SourceBraintree\n    properties:\n      configuration:\n        environment: Qa\n        merchant_id: '...my_merchant_id...'\n        private_key: '...my_private_key...'\n        public_key: '...my_public_key...'\n        source_type: braintree\n        start_date: 2020-11-22 20:20:05\n      name: Olga Hermiston\n      secretId: '...my_secret_id...'\n      workspaceId: ec42defc-ce8f-4197-b773-e63562a7b408\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceBraintreeConfiguration:SourceBraintreeConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceBraintreeConfiguration:SourceBraintreeConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceBraintree resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceBraintreeConfiguration:SourceBraintreeConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceBraze:SourceBraze": {
            "description": "SourceBraze Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceBraze;\nimport com.pulumi.airbyte.SourceBrazeArgs;\nimport com.pulumi.airbyte.inputs.SourceBrazeConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceBraze = new SourceBraze(\"mySourceBraze\", SourceBrazeArgs.builder()        \n            .configuration(SourceBrazeConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .source_type(\"braze\")\n                .start_date(\"2022-11-23\")\n                .url(\"...my_url...\")\n                .build())\n            .name(\"Tricia DuBuque\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"8fdaf313-a1f5-4fd9-8259-c0b36f25ea94\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceBraze:\n    type: airbyte:SourceBraze\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        source_type: braze\n        start_date: 2022-11-23\n        url: '...my_url...'\n      name: Tricia DuBuque\n      secretId: '...my_secret_id...'\n      workspaceId: 8fdaf313-a1f5-4fd9-8259-c0b36f25ea94\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceBrazeConfiguration:SourceBrazeConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceBrazeConfiguration:SourceBrazeConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceBraze resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceBrazeConfiguration:SourceBrazeConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceChargebee:SourceChargebee": {
            "description": "SourceChargebee Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceChargebee;\nimport com.pulumi.airbyte.SourceChargebeeArgs;\nimport com.pulumi.airbyte.inputs.SourceChargebeeConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceChargebee = new SourceChargebee(\"mySourceChargebee\", SourceChargebeeArgs.builder()        \n            .configuration(SourceChargebeeConfigurationArgs.builder()\n                .product_catalog(\"1.0\")\n                .site(\"airbyte-test\")\n                .site_api_key(\"...my_site_api_key...\")\n                .source_type(\"chargebee\")\n                .start_date(\"2021-01-25T00:00:00Z\")\n                .build())\n            .name(\"Harvey Harber\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"11f6c37a-5126-4243-835b-bc05a23a45ce\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceChargebee:\n    type: airbyte:SourceChargebee\n    properties:\n      configuration:\n        product_catalog: '1.0'\n        site: airbyte-test\n        site_api_key: '...my_site_api_key...'\n        source_type: chargebee\n        start_date: 2021-01-25T00:00:00Z\n      name: Harvey Harber\n      secretId: '...my_secret_id...'\n      workspaceId: 11f6c37a-5126-4243-835b-bc05a23a45ce\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceChargebeeConfiguration:SourceChargebeeConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceChargebeeConfiguration:SourceChargebeeConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceChargebee resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceChargebeeConfiguration:SourceChargebeeConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceChartmogul:SourceChartmogul": {
            "description": "SourceChartmogul Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceChartmogul;\nimport com.pulumi.airbyte.SourceChartmogulArgs;\nimport com.pulumi.airbyte.inputs.SourceChartmogulConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceChartmogul = new SourceChartmogul(\"mySourceChartmogul\", SourceChartmogulArgs.builder()        \n            .configuration(SourceChartmogulConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .interval(\"quarter\")\n                .source_type(\"chartmogul\")\n                .start_date(\"2017-01-25T00:00:00Z\")\n                .build())\n            .name(\"Mr. Kristopher Torphy\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"0ce2169e-5100-419c-adc5-e34762799bfb\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceChartmogul:\n    type: airbyte:SourceChartmogul\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        interval: quarter\n        source_type: chartmogul\n        start_date: 2017-01-25T00:00:00Z\n      name: Mr. Kristopher Torphy\n      secretId: '...my_secret_id...'\n      workspaceId: 0ce2169e-5100-419c-adc5-e34762799bfb\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceChartmogulConfiguration:SourceChartmogulConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceChartmogulConfiguration:SourceChartmogulConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceChartmogul resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceChartmogulConfiguration:SourceChartmogulConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceClickhouse:SourceClickhouse": {
            "description": "SourceClickhouse Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceClickhouse;\nimport com.pulumi.airbyte.SourceClickhouseArgs;\nimport com.pulumi.airbyte.inputs.SourceClickhouseConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceClickhouse = new SourceClickhouse(\"mySourceClickhouse\", SourceClickhouseArgs.builder()        \n            .configuration(SourceClickhouseConfigurationArgs.builder()\n                .database(\"default\")\n                .host(\"...my_host...\")\n                .password(\"...my_password...\")\n                .port(8123)\n                .source_type(\"clickhouse\")\n                .tunnel_method(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .username(\"Toni.Hudson\")\n                .build())\n            .name(\"Irvin Rippin\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"b4ecae6c-3d5d-4b3a-9ebd-5daea4c506a8\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceClickhouse:\n    type: airbyte:SourceClickhouse\n    properties:\n      configuration:\n        database: default\n        host: '...my_host...'\n        password: '...my_password...'\n        port: 8123\n        source_type: clickhouse\n        tunnel_method:\n          sourceClickhouseSshTunnelMethodNoTunnel:\n            tunnelMethod: NO_TUNNEL\n        username: Toni.Hudson\n      name: Irvin Rippin\n      secretId: '...my_secret_id...'\n      workspaceId: b4ecae6c-3d5d-4b3a-9ebd-5daea4c506a8\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceClickhouseConfiguration:SourceClickhouseConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceClickhouseConfiguration:SourceClickhouseConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceClickhouse resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceClickhouseConfiguration:SourceClickhouseConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceClickupApi:SourceClickupApi": {
            "description": "SourceClickupAPI Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceClickupApi;\nimport com.pulumi.airbyte.SourceClickupApiArgs;\nimport com.pulumi.airbyte.inputs.SourceClickupApiConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceClickupapi = new SourceClickupApi(\"mySourceClickupapi\", SourceClickupApiArgs.builder()        \n            .configuration(SourceClickupApiConfigurationArgs.builder()\n                .api_token(\"...my_api_token...\")\n                .folder_id(\"...my_folder_id...\")\n                .include_closed_tasks(false)\n                .list_id(\"...my_list_id...\")\n                .source_type(\"clickup-api\")\n                .space_id(\"...my_space_id...\")\n                .team_id(\"...my_team_id...\")\n                .build())\n            .name(\"Sergio Grant Sr.\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"644cf5e9-d9a4-4578-adc1-ac600dec001a\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceClickupapi:\n    type: airbyte:SourceClickupApi\n    properties:\n      configuration:\n        api_token: '...my_api_token...'\n        folder_id: '...my_folder_id...'\n        include_closed_tasks: false\n        list_id: '...my_list_id...'\n        source_type: clickup-api\n        space_id: '...my_space_id...'\n        team_id: '...my_team_id...'\n      name: Sergio Grant Sr.\n      secretId: '...my_secret_id...'\n      workspaceId: 644cf5e9-d9a4-4578-adc1-ac600dec001a\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceClickupApiConfiguration:SourceClickupApiConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceClickupApiConfiguration:SourceClickupApiConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceClickupApi resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceClickupApiConfiguration:SourceClickupApiConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceClockify:SourceClockify": {
            "description": "SourceClockify Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceClockify;\nimport com.pulumi.airbyte.SourceClockifyArgs;\nimport com.pulumi.airbyte.inputs.SourceClockifyConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceClockify = new SourceClockify(\"mySourceClockify\", SourceClockifyArgs.builder()        \n            .configuration(SourceClockifyConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .api_url(\"...my_api_url...\")\n                .source_type(\"clockify\")\n                .workspace_id(\"...my_workspace_id...\")\n                .build())\n            .name(\"Guy Beier\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"2ec09ff8-f0f8-416f-b347-7c13e902c141\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceClockify:\n    type: airbyte:SourceClockify\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        api_url: '...my_api_url...'\n        source_type: clockify\n        workspace_id: '...my_workspace_id...'\n      name: Guy Beier\n      secretId: '...my_secret_id...'\n      workspaceId: 2ec09ff8-f0f8-416f-b347-7c13e902c141\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceClockifyConfiguration:SourceClockifyConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceClockifyConfiguration:SourceClockifyConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceClockify resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceClockifyConfiguration:SourceClockifyConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceCloseCom:SourceCloseCom": {
            "description": "SourceCloseCom Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceCloseCom;\nimport com.pulumi.airbyte.SourceCloseComArgs;\nimport com.pulumi.airbyte.inputs.SourceCloseComConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceClosecom = new SourceCloseCom(\"mySourceClosecom\", SourceCloseComArgs.builder()        \n            .configuration(SourceCloseComConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .source_type(\"close-com\")\n                .start_date(\"2021-01-01\")\n                .build())\n            .name(\"Robert Muller MD\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"668151a4-72af-4923-8594-9f83f350cf87\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceClosecom:\n    type: airbyte:SourceCloseCom\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        source_type: close-com\n        start_date: 2021-01-01\n      name: Robert Muller MD\n      secretId: '...my_secret_id...'\n      workspaceId: 668151a4-72af-4923-8594-9f83f350cf87\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceCloseComConfiguration:SourceCloseComConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceCloseComConfiguration:SourceCloseComConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceCloseCom resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceCloseComConfiguration:SourceCloseComConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceCoda:SourceCoda": {
            "description": "SourceCoda Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceCoda;\nimport com.pulumi.airbyte.SourceCodaArgs;\nimport com.pulumi.airbyte.inputs.SourceCodaConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceCoda = new SourceCoda(\"mySourceCoda\", SourceCodaArgs.builder()        \n            .configuration(SourceCodaConfigurationArgs.builder()\n                .auth_token(\"...my_auth_token...\")\n                .source_type(\"coda\")\n                .build())\n            .name(\"Nettie Wilkinson\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"01c6ecbb-4e24-43cf-b89f-fafeda53e5ae\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceCoda:\n    type: airbyte:SourceCoda\n    properties:\n      configuration:\n        auth_token: '...my_auth_token...'\n        source_type: coda\n      name: Nettie Wilkinson\n      secretId: '...my_secret_id...'\n      workspaceId: 01c6ecbb-4e24-43cf-b89f-fafeda53e5ae\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceCodaConfiguration:SourceCodaConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceCodaConfiguration:SourceCodaConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceCoda resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceCodaConfiguration:SourceCodaConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceCoinApi:SourceCoinApi": {
            "description": "SourceCoinAPI Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceCoinApi;\nimport com.pulumi.airbyte.SourceCoinApiArgs;\nimport com.pulumi.airbyte.inputs.SourceCoinApiConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceCoinapi = new SourceCoinApi(\"mySourceCoinapi\", SourceCoinApiArgs.builder()        \n            .configuration(SourceCoinApiConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .end_date(\"2019-01-01T00:00:00\")\n                .environment(\"sandbox\")\n                .limit(10)\n                .period(\"5SEC\")\n                .source_type(\"coin-api\")\n                .start_date(\"2019-01-01T00:00:00\")\n                .symbol_id(\"...my_symbol_id...\")\n                .build())\n            .name(\"Myron Boyle\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"c2b9c247-c883-473a-80e1-942f32e55055\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceCoinapi:\n    type: airbyte:SourceCoinApi\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        end_date: 2019-01-01T00:00:00\n        environment: sandbox\n        limit: 10\n        period: 5SEC\n        source_type: coin-api\n        start_date: 2019-01-01T00:00:00\n        symbol_id: '...my_symbol_id...'\n      name: Myron Boyle\n      secretId: '...my_secret_id...'\n      workspaceId: c2b9c247-c883-473a-80e1-942f32e55055\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceCoinApiConfiguration:SourceCoinApiConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceCoinApiConfiguration:SourceCoinApiConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceCoinApi resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceCoinApiConfiguration:SourceCoinApiConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceCoinmarketcap:SourceCoinmarketcap": {
            "description": "SourceCoinmarketcap Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceCoinmarketcap;\nimport com.pulumi.airbyte.SourceCoinmarketcapArgs;\nimport com.pulumi.airbyte.inputs.SourceCoinmarketcapConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceCoinmarketcap = new SourceCoinmarketcap(\"mySourceCoinmarketcap\", SourceCoinmarketcapArgs.builder()        \n            .configuration(SourceCoinmarketcapConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .data_type(\"latest\")\n                .source_type(\"coinmarketcap\")\n                .symbols(\"...\")\n                .build())\n            .name(\"Elsie West\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"56d0bd0a-f2df-4e13-9b4f-62cba3f8941a\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceCoinmarketcap:\n    type: airbyte:SourceCoinmarketcap\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        data_type: latest\n        source_type: coinmarketcap\n        symbols:\n          - '...'\n      name: Elsie West\n      secretId: '...my_secret_id...'\n      workspaceId: 56d0bd0a-f2df-4e13-9b4f-62cba3f8941a\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceCoinmarketcapConfiguration:SourceCoinmarketcapConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceCoinmarketcapConfiguration:SourceCoinmarketcapConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceCoinmarketcap resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceCoinmarketcapConfiguration:SourceCoinmarketcapConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceConfigcat:SourceConfigcat": {
            "description": "SourceConfigcat Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceConfigcat;\nimport com.pulumi.airbyte.SourceConfigcatArgs;\nimport com.pulumi.airbyte.inputs.SourceConfigcatConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceConfigcat = new SourceConfigcat(\"mySourceConfigcat\", SourceConfigcatArgs.builder()        \n            .configuration(SourceConfigcatConfigurationArgs.builder()\n                .password(\"...my_password...\")\n                .source_type(\"configcat\")\n                .username(\"Shaylee.Pfeffer71\")\n                .build())\n            .name(\"Timothy Nolan\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"24d3b2ec-fcc8-4f89-9010-f5dd3d6fa180\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceConfigcat:\n    type: airbyte:SourceConfigcat\n    properties:\n      configuration:\n        password: '...my_password...'\n        source_type: configcat\n        username: Shaylee.Pfeffer71\n      name: Timothy Nolan\n      secretId: '...my_secret_id...'\n      workspaceId: 24d3b2ec-fcc8-4f89-9010-f5dd3d6fa180\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceConfigcatConfiguration:SourceConfigcatConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceConfigcatConfiguration:SourceConfigcatConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceConfigcat resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceConfigcatConfiguration:SourceConfigcatConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceConfluence:SourceConfluence": {
            "description": "SourceConfluence Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceConfluence;\nimport com.pulumi.airbyte.SourceConfluenceArgs;\nimport com.pulumi.airbyte.inputs.SourceConfluenceConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceConfluence = new SourceConfluence(\"mySourceConfluence\", SourceConfluenceArgs.builder()        \n            .configuration(SourceConfluenceConfigurationArgs.builder()\n                .api_token(\"...my_api_token...\")\n                .domain_name(\"...my_domain_name...\")\n                .email(\"abc@example.com\")\n                .source_type(\"confluence\")\n                .build())\n            .name(\"Ms. Russell Wunsch\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"a363c887-3e48-4438-8b1f-6b8ca275a60a\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceConfluence:\n    type: airbyte:SourceConfluence\n    properties:\n      configuration:\n        api_token: '...my_api_token...'\n        domain_name: '...my_domain_name...'\n        email: abc@example.com\n        source_type: confluence\n      name: Ms. Russell Wunsch\n      secretId: '...my_secret_id...'\n      workspaceId: a363c887-3e48-4438-8b1f-6b8ca275a60a\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceConfluenceConfiguration:SourceConfluenceConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceConfluenceConfiguration:SourceConfluenceConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceConfluence resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceConfluenceConfiguration:SourceConfluenceConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceConvex:SourceConvex": {
            "description": "SourceConvex Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceConvex;\nimport com.pulumi.airbyte.SourceConvexArgs;\nimport com.pulumi.airbyte.inputs.SourceConvexConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceConvex = new SourceConvex(\"mySourceConvex\", SourceConvexArgs.builder()        \n            .configuration(SourceConvexConfigurationArgs.builder()\n                .access_key(\"...my_access_key...\")\n                .deployment_url(\"https://murky-swan-635.convex.cloud\")\n                .source_type(\"convex\")\n                .build())\n            .name(\"Jody Gutmann\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"cc699171-b51c-41bd-b1cf-4b888ebdfc4c\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceConvex:\n    type: airbyte:SourceConvex\n    properties:\n      configuration:\n        access_key: '...my_access_key...'\n        deployment_url: https://murky-swan-635.convex.cloud\n        source_type: convex\n      name: Jody Gutmann\n      secretId: '...my_secret_id...'\n      workspaceId: cc699171-b51c-41bd-b1cf-4b888ebdfc4c\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceConvexConfiguration:SourceConvexConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceConvexConfiguration:SourceConvexConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceConvex resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceConvexConfiguration:SourceConvexConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceDatadog:SourceDatadog": {
            "description": "SourceDatadog Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceDatadog;\nimport com.pulumi.airbyte.SourceDatadogArgs;\nimport com.pulumi.airbyte.inputs.SourceDatadogConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceDatadog = new SourceDatadog(\"mySourceDatadog\", SourceDatadogArgs.builder()        \n            .configuration(SourceDatadogConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .application_key(\"...my_application_key...\")\n                .end_date(\"2022-10-01T00:00:00Z\")\n                .max_records_per_request(8)\n                .queries(SourceDatadogConfigurationQueryArgs.builder()\n                    .dataSource(\"rum\")\n                    .name(\"Marshall McClure\")\n                    .query(\"...my_query...\")\n                    .build())\n                .query(\"...my_query...\")\n                .site(\"us5.datadoghq.com\")\n                .source_type(\"datadog\")\n                .start_date(\"2022-10-01T00:00:00Z\")\n                .build())\n            .name(\"Wilbert Bashirian\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"dce10873-e42b-4006-9678-878ba8581a58\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceDatadog:\n    type: airbyte:SourceDatadog\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        application_key: '...my_application_key...'\n        end_date: 2022-10-01T00:00:00Z\n        max_records_per_request: 8\n        queries:\n          - dataSource: rum\n            name: Marshall McClure\n            query: '...my_query...'\n        query: '...my_query...'\n        site: us5.datadoghq.com\n        source_type: datadog\n        start_date: 2022-10-01T00:00:00Z\n      name: Wilbert Bashirian\n      secretId: '...my_secret_id...'\n      workspaceId: dce10873-e42b-4006-9678-878ba8581a58\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceDatadogConfiguration:SourceDatadogConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceDatadogConfiguration:SourceDatadogConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceDatadog resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceDatadogConfiguration:SourceDatadogConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceDatascope:SourceDatascope": {
            "description": "SourceDatascope Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceDatascope;\nimport com.pulumi.airbyte.SourceDatascopeArgs;\nimport com.pulumi.airbyte.inputs.SourceDatascopeConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceDatascope = new SourceDatascope(\"mySourceDatascope\", SourceDatascopeArgs.builder()        \n            .configuration(SourceDatascopeConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .source_type(\"datascope\")\n                .start_date(\"dd/mm/YYYY HH:MM\")\n                .build())\n            .name(\"Amy Lynch\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"4fefa9c9-5f2e-4ac5-965d-307cfee81206\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceDatascope:\n    type: airbyte:SourceDatascope\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        source_type: datascope\n        start_date: dd/mm/YYYY HH:MM\n      name: Amy Lynch\n      secretId: '...my_secret_id...'\n      workspaceId: 4fefa9c9-5f2e-4ac5-965d-307cfee81206\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceDatascopeConfiguration:SourceDatascopeConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceDatascopeConfiguration:SourceDatascopeConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceDatascope resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceDatascopeConfiguration:SourceDatascopeConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceDelighted:SourceDelighted": {
            "description": "SourceDelighted Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceDelighted;\nimport com.pulumi.airbyte.SourceDelightedArgs;\nimport com.pulumi.airbyte.inputs.SourceDelightedConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceDelighted = new SourceDelighted(\"mySourceDelighted\", SourceDelightedArgs.builder()        \n            .configuration(SourceDelightedConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .since(\"2022-05-30 04:50:23\")\n                .source_type(\"delighted\")\n                .build())\n            .name(\"Peggy Windler\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"a41c480d-3f21-432a-b031-02d514f4cc6f\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceDelighted:\n    type: airbyte:SourceDelighted\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        since: 2022-05-30 04:50:23\n        source_type: delighted\n      name: Peggy Windler\n      secretId: '...my_secret_id...'\n      workspaceId: a41c480d-3f21-432a-b031-02d514f4cc6f\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceDelightedConfiguration:SourceDelightedConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceDelightedConfiguration:SourceDelightedConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceDelighted resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceDelightedConfiguration:SourceDelightedConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceDixa:SourceDixa": {
            "description": "SourceDixa Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceDixa;\nimport com.pulumi.airbyte.SourceDixaArgs;\nimport com.pulumi.airbyte.inputs.SourceDixaConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceDixa = new SourceDixa(\"mySourceDixa\", SourceDixaArgs.builder()        \n            .configuration(SourceDixaConfigurationArgs.builder()\n                .api_token(\"...my_api_token...\")\n                .batch_size(1)\n                .source_type(\"dixa\")\n                .start_date(\"YYYY-MM-DD\")\n                .build())\n            .name(\"Irvin Marks\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"1a6a4f77-a87e-4e3e-8be7-52c65b34418e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceDixa:\n    type: airbyte:SourceDixa\n    properties:\n      configuration:\n        api_token: '...my_api_token...'\n        batch_size: 1\n        source_type: dixa\n        start_date: YYYY-MM-DD\n      name: Irvin Marks\n      secretId: '...my_secret_id...'\n      workspaceId: 1a6a4f77-a87e-4e3e-8be7-52c65b34418e\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceDixaConfiguration:SourceDixaConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceDixaConfiguration:SourceDixaConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceDixa resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceDixaConfiguration:SourceDixaConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceDockerhub:SourceDockerhub": {
            "description": "SourceDockerhub Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceDockerhub;\nimport com.pulumi.airbyte.SourceDockerhubArgs;\nimport com.pulumi.airbyte.inputs.SourceDockerhubConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceDockerhub = new SourceDockerhub(\"mySourceDockerhub\", SourceDockerhubArgs.builder()        \n            .configuration(SourceDockerhubConfigurationArgs.builder()\n                .docker_username(\"airbyte\")\n                .source_type(\"dockerhub\")\n                .build())\n            .name(\"Kristy Renner DDS\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"8d975e0e-8419-4d8f-84f1-44f3e07edcc4\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceDockerhub:\n    type: airbyte:SourceDockerhub\n    properties:\n      configuration:\n        docker_username: airbyte\n        source_type: dockerhub\n      name: Kristy Renner DDS\n      secretId: '...my_secret_id...'\n      workspaceId: 8d975e0e-8419-4d8f-84f1-44f3e07edcc4\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceDockerhubConfiguration:SourceDockerhubConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceDockerhubConfiguration:SourceDockerhubConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceDockerhub resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceDockerhubConfiguration:SourceDockerhubConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceDremio:SourceDremio": {
            "description": "SourceDremio Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceDremio;\nimport com.pulumi.airbyte.SourceDremioArgs;\nimport com.pulumi.airbyte.inputs.SourceDremioConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceDremio = new SourceDremio(\"mySourceDremio\", SourceDremioArgs.builder()        \n            .configuration(SourceDremioConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .base_url(\"...my_base_url...\")\n                .source_type(\"dremio\")\n                .build())\n            .name(\"Doug Hammes\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"cabd905a-972e-4056-b282-27b2d309470b\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceDremio:\n    type: airbyte:SourceDremio\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        base_url: '...my_base_url...'\n        source_type: dremio\n      name: Doug Hammes\n      secretId: '...my_secret_id...'\n      workspaceId: cabd905a-972e-4056-b282-27b2d309470b\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceDremioConfiguration:SourceDremioConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceDremioConfiguration:SourceDremioConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceDremio resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceDremioConfiguration:SourceDremioConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceDynamodb:SourceDynamodb": {
            "description": "SourceDynamodb Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceDynamodb;\nimport com.pulumi.airbyte.SourceDynamodbArgs;\nimport com.pulumi.airbyte.inputs.SourceDynamodbConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceDynamodb = new SourceDynamodb(\"mySourceDynamodb\", SourceDynamodbArgs.builder()        \n            .configuration(SourceDynamodbConfigurationArgs.builder()\n                .access_key_id(\"A012345678910EXAMPLE\")\n                .endpoint(\"https://{aws_dynamo_db_url}.com\")\n                .region(\"us-gov-east-1\")\n                .reserved_attribute_names(\"name, field_name, field-name\")\n                .secret_access_key(\"a012345678910ABCDEFGH/AbCdEfGhEXAMPLEKEY\")\n                .source_type(\"dynamodb\")\n                .build())\n            .name(\"Monique Hackett\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"87cf535a-6fae-454e-bf60-c321f023b75d\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceDynamodb:\n    type: airbyte:SourceDynamodb\n    properties:\n      configuration:\n        access_key_id: A012345678910EXAMPLE\n        endpoint: https://{aws_dynamo_db_url}.com\n        region: us-gov-east-1\n        reserved_attribute_names: name, field_name, field-name\n        secret_access_key: a012345678910ABCDEFGH/AbCdEfGhEXAMPLEKEY\n        source_type: dynamodb\n      name: Monique Hackett\n      secretId: '...my_secret_id...'\n      workspaceId: 87cf535a-6fae-454e-bf60-c321f023b75d\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceDynamodbConfiguration:SourceDynamodbConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceDynamodbConfiguration:SourceDynamodbConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceDynamodb resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceDynamodbConfiguration:SourceDynamodbConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceE2eTestCloud:SourceE2eTestCloud": {
            "description": "SourceE2eTestCloud Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceE2eTestCloud;\nimport com.pulumi.airbyte.SourceE2eTestCloudArgs;\nimport com.pulumi.airbyte.inputs.SourceE2eTestCloudConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceE2etestcloud = new SourceE2eTestCloud(\"mySourceE2etestcloud\", SourceE2eTestCloudArgs.builder()        \n            .configuration(SourceE2eTestCloudConfigurationArgs.builder()\n                .max_messages(2)\n                .message_interval_ms(2)\n                .mock_catalog(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .seed(42)\n                .source_type(\"e2e-test-cloud\")\n                .type(\"CONTINUOUS_FEED\")\n                .build())\n            .name(\"Miss Johanna Ward DDS\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"c8df79f0-a396-4d90-8364-b7c15dfbace1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceE2etestcloud:\n    type: airbyte:SourceE2eTestCloud\n    properties:\n      configuration:\n        max_messages: 2\n        message_interval_ms: 2\n        mock_catalog:\n          sourceE2eTestCloudMockCatalogMultiSchema:\n            streamSchemas: '...my_stream_schemas...'\n            type: MULTI_STREAM\n        seed: 42\n        source_type: e2e-test-cloud\n        type: CONTINUOUS_FEED\n      name: Miss Johanna Ward DDS\n      secretId: '...my_secret_id...'\n      workspaceId: c8df79f0-a396-4d90-8364-b7c15dfbace1\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceE2eTestCloudConfiguration:SourceE2eTestCloudConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceE2eTestCloudConfiguration:SourceE2eTestCloudConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceE2eTestCloud resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceE2eTestCloudConfiguration:SourceE2eTestCloudConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceEmailoctopus:SourceEmailoctopus": {
            "description": "SourceEmailoctopus Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceEmailoctopus;\nimport com.pulumi.airbyte.SourceEmailoctopusArgs;\nimport com.pulumi.airbyte.inputs.SourceEmailoctopusConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceEmailoctopus = new SourceEmailoctopus(\"mySourceEmailoctopus\", SourceEmailoctopusArgs.builder()        \n            .configuration(SourceEmailoctopusConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .source_type(\"emailoctopus\")\n                .build())\n            .name(\"Miss Nelson Robel\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"ee2c8c6c-e611-4fee-b1c7-cbdb6eec7437\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceEmailoctopus:\n    type: airbyte:SourceEmailoctopus\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        source_type: emailoctopus\n      name: Miss Nelson Robel\n      secretId: '...my_secret_id...'\n      workspaceId: ee2c8c6c-e611-4fee-b1c7-cbdb6eec7437\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceEmailoctopusConfiguration:SourceEmailoctopusConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceEmailoctopusConfiguration:SourceEmailoctopusConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceEmailoctopus resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceEmailoctopusConfiguration:SourceEmailoctopusConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceExchangeRates:SourceExchangeRates": {
            "description": "SourceExchangeRates Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceExchangeRates;\nimport com.pulumi.airbyte.SourceExchangeRatesArgs;\nimport com.pulumi.airbyte.inputs.SourceExchangeRatesConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceExchangerates = new SourceExchangeRates(\"mySourceExchangerates\", SourceExchangeRatesArgs.builder()        \n            .configuration(SourceExchangeRatesConfigurationArgs.builder()\n                .access_key(\"...my_access_key...\")\n                .base(\"USD\")\n                .ignore_weekends(true)\n                .source_type(\"exchange-rates\")\n                .start_date(\"YYYY-MM-DD\")\n                .build())\n            .name(\"Annie Breitenberg\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"47dc915a-d2ca-4f5d-9672-3dc0f5ae2f3a\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceExchangerates:\n    type: airbyte:SourceExchangeRates\n    properties:\n      configuration:\n        access_key: '...my_access_key...'\n        base: USD\n        ignore_weekends: true\n        source_type: exchange-rates\n        start_date: YYYY-MM-DD\n      name: Annie Breitenberg\n      secretId: '...my_secret_id...'\n      workspaceId: 47dc915a-d2ca-4f5d-9672-3dc0f5ae2f3a\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceExchangeRatesConfiguration:SourceExchangeRatesConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceExchangeRatesConfiguration:SourceExchangeRatesConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceExchangeRates resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceExchangeRatesConfiguration:SourceExchangeRatesConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceFacebookMarketing:SourceFacebookMarketing": {
            "description": "SourceFacebookMarketing Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceFacebookMarketing;\nimport com.pulumi.airbyte.SourceFacebookMarketingArgs;\nimport com.pulumi.airbyte.inputs.SourceFacebookMarketingConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceFacebookmarketing = new SourceFacebookMarketing(\"mySourceFacebookmarketing\", SourceFacebookMarketingArgs.builder()        \n            .configuration(SourceFacebookMarketingConfigurationArgs.builder()\n                .access_token(\"...my_access_token...\")\n                .account_id(\"111111111111111\")\n                .action_breakdowns_allow_empty(false)\n                .client_id(\"...my_client_id...\")\n                .client_secret(\"...my_client_secret...\")\n                .custom_insights(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .end_date(\"2017-01-26T00:00:00Z\")\n                .fetch_thumbnail_images(false)\n                .include_deleted(false)\n                .insights_lookback_window(7)\n                .max_batch_size(4)\n                .page_size(3)\n                .source_type(\"facebook-marketing\")\n                .start_date(\"2017-01-25T00:00:00Z\")\n                .build())\n            .name(\"Dr. Dorothy Lockman\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"0bcacc6c-bd6b-45f3-ac90-9304f926bad2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceFacebookmarketing:\n    type: airbyte:SourceFacebookMarketing\n    properties:\n      configuration:\n        access_token: '...my_access_token...'\n        account_id: '111111111111111'\n        action_breakdowns_allow_empty: false\n        client_id: '...my_client_id...'\n        client_secret: '...my_client_secret...'\n        custom_insights:\n          - actionBreakdowns:\n              - action_target_id\n            actionReportTime: impression\n            breakdowns:\n              - age\n            endDate: 2017-01-26T00:00:00Z\n            fields:\n              - estimated_ad_recall_rate_lower_bound\n            insightsLookbackWindow: 6\n            level: adset\n            name: Vera Bernhard\n            startDate: 2017-01-25T00:00:00Z\n            timeIncrement: 7\n        end_date: 2017-01-26T00:00:00Z\n        fetch_thumbnail_images: false\n        include_deleted: false\n        insights_lookback_window: 7\n        max_batch_size: 4\n        page_size: 3\n        source_type: facebook-marketing\n        start_date: 2017-01-25T00:00:00Z\n      name: Dr. Dorothy Lockman\n      secretId: '...my_secret_id...'\n      workspaceId: 0bcacc6c-bd6b-45f3-ac90-9304f926bad2\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceFacebookMarketingConfiguration:SourceFacebookMarketingConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceFacebookMarketingConfiguration:SourceFacebookMarketingConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceFacebookMarketing resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceFacebookMarketingConfiguration:SourceFacebookMarketingConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceFacebookPages:SourceFacebookPages": {
            "description": "SourceFacebookPages Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceFacebookPages;\nimport com.pulumi.airbyte.SourceFacebookPagesArgs;\nimport com.pulumi.airbyte.inputs.SourceFacebookPagesConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceFacebookpages = new SourceFacebookPages(\"mySourceFacebookpages\", SourceFacebookPagesArgs.builder()        \n            .configuration(SourceFacebookPagesConfigurationArgs.builder()\n                .access_token(\"...my_access_token...\")\n                .page_id(\"...my_page_id...\")\n                .source_type(\"facebook-pages\")\n                .build())\n            .name(\"Bernice Donnelly V\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"b474b0ed-20e5-4624-8fff-639a910abdca\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceFacebookpages:\n    type: airbyte:SourceFacebookPages\n    properties:\n      configuration:\n        access_token: '...my_access_token...'\n        page_id: '...my_page_id...'\n        source_type: facebook-pages\n      name: Bernice Donnelly V\n      secretId: '...my_secret_id...'\n      workspaceId: b474b0ed-20e5-4624-8fff-639a910abdca\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceFacebookPagesConfiguration:SourceFacebookPagesConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceFacebookPagesConfiguration:SourceFacebookPagesConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceFacebookPages resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceFacebookPagesConfiguration:SourceFacebookPagesConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceFaker:SourceFaker": {
            "description": "SourceFaker Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceFaker;\nimport com.pulumi.airbyte.SourceFakerArgs;\nimport com.pulumi.airbyte.inputs.SourceFakerConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceFaker = new SourceFaker(\"mySourceFaker\", SourceFakerArgs.builder()        \n            .configuration(SourceFakerConfigurationArgs.builder()\n                .always_updated(false)\n                .count(4)\n                .parallelism(1)\n                .records_per_slice(4)\n                .seed(4)\n                .source_type(\"faker\")\n                .build())\n            .name(\"Beth McKenzie\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"1ec00221-b335-4d89-acb3-ecfda8d0c549\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceFaker:\n    type: airbyte:SourceFaker\n    properties:\n      configuration:\n        always_updated: false\n        count: 4\n        parallelism: 1\n        records_per_slice: 4\n        seed: 4\n        source_type: faker\n      name: Beth McKenzie\n      secretId: '...my_secret_id...'\n      workspaceId: 1ec00221-b335-4d89-acb3-ecfda8d0c549\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceFakerConfiguration:SourceFakerConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceFakerConfiguration:SourceFakerConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceFaker resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceFakerConfiguration:SourceFakerConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceFauna:SourceFauna": {
            "description": "SourceFauna Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceFauna;\nimport com.pulumi.airbyte.SourceFaunaArgs;\nimport com.pulumi.airbyte.inputs.SourceFaunaConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceFaunaConfigurationCollectionArgs;\nimport com.pulumi.airbyte.inputs.SourceFaunaConfigurationCollectionDeletionsArgs;\nimport com.pulumi.airbyte.inputs.SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeDisabledArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceFauna = new SourceFauna(\"mySourceFauna\", SourceFaunaArgs.builder()        \n            .configuration(SourceFaunaConfigurationArgs.builder()\n                .collection(SourceFaunaConfigurationCollectionArgs.builder()\n                    .deletions(SourceFaunaConfigurationCollectionDeletionsArgs.builder()\n                        .sourceFaunaCollectionDeletionModeDisabled(SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeDisabledArgs.builder()\n                            .deletionMode(\"ignore\")\n                            .build())\n                        .build())\n                    .pageSize(9)\n                    .build())\n                .domain(\"...my_domain...\")\n                .port(10)\n                .scheme(\"...my_scheme...\")\n                .secret(\"...my_secret...\")\n                .source_type(\"fauna\")\n                .build())\n            .name(\"Mrs. Edna Abbott\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"78a61fa1-cf20-4688-b77c-1ffc71dca163\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceFauna:\n    type: airbyte:SourceFauna\n    properties:\n      configuration:\n        collection:\n          deletions:\n            sourceFaunaCollectionDeletionModeDisabled:\n              deletionMode: ignore\n          pageSize: 9\n        domain: '...my_domain...'\n        port: 10\n        scheme: '...my_scheme...'\n        secret: '...my_secret...'\n        source_type: fauna\n      name: Mrs. Edna Abbott\n      secretId: '...my_secret_id...'\n      workspaceId: 78a61fa1-cf20-4688-b77c-1ffc71dca163\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceFaunaConfiguration:SourceFaunaConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceFaunaConfiguration:SourceFaunaConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceFauna resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceFaunaConfiguration:SourceFaunaConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceFileSecure:SourceFileSecure": {
            "description": "SourceFileSecure Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceFileSecure;\nimport com.pulumi.airbyte.SourceFileSecureArgs;\nimport com.pulumi.airbyte.inputs.SourceFileSecureConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceFileSecureConfigurationProviderArgs;\nimport com.pulumi.airbyte.inputs.SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderAzBlobAzureBlobStorageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceFilesecure = new SourceFileSecure(\"mySourceFilesecure\", SourceFileSecureArgs.builder()        \n            .configuration(SourceFileSecureConfigurationArgs.builder()\n                .dataset_name(\"...my_dataset_name...\")\n                .format(\"yaml\")\n                .provider(SourceFileSecureConfigurationProviderArgs.builder()\n                    .sourceFileSecureStorageProviderAzBlobAzureBlobStorage(SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderAzBlobAzureBlobStorageArgs.builder()\n                        .sasToken(\"...my_sas_token...\")\n                        .sharedKey(\"...my_shared_key...\")\n                        .storage(\"AzBlob\")\n                        .storageAccount(\"...my_storage_account...\")\n                        .build())\n                    .build())\n                .reader_options(\"{}\")\n                .source_type(\"file-secure\")\n                .url(\"gs://my-google-bucket/data.csv\")\n                .build())\n            .name(\"Miss Sheri Legros\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"7ff334cd-df85-47a9-a618-76c6ab21d29d\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceFilesecure:\n    type: airbyte:SourceFileSecure\n    properties:\n      configuration:\n        dataset_name: '...my_dataset_name...'\n        format: yaml\n        provider:\n          sourceFileSecureStorageProviderAzBlobAzureBlobStorage:\n            sasToken: '...my_sas_token...'\n            sharedKey: '...my_shared_key...'\n            storage: AzBlob\n            storageAccount: '...my_storage_account...'\n        reader_options: '{}'\n        source_type: file-secure\n        url: gs://my-google-bucket/data.csv\n      name: Miss Sheri Legros\n      secretId: '...my_secret_id...'\n      workspaceId: 7ff334cd-df85-47a9-a618-76c6ab21d29d\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceFileSecureConfiguration:SourceFileSecureConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceFileSecureConfiguration:SourceFileSecureConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceFileSecure resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceFileSecureConfiguration:SourceFileSecureConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceFirebolt:SourceFirebolt": {
            "description": "SourceFirebolt Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceFirebolt;\nimport com.pulumi.airbyte.SourceFireboltArgs;\nimport com.pulumi.airbyte.inputs.SourceFireboltConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceFirebolt = new SourceFirebolt(\"mySourceFirebolt\", SourceFireboltArgs.builder()        \n            .configuration(SourceFireboltConfigurationArgs.builder()\n                .account(\"...my_account...\")\n                .database(\"...my_database...\")\n                .engine(\"...my_engine...\")\n                .host(\"api.app.firebolt.io\")\n                .password(\"...my_password...\")\n                .source_type(\"firebolt\")\n                .username(\"username@email.com\")\n                .build())\n            .name(\"Hector Yundt\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"d7993900-66a6-4d2d-8003-55338cec086f\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceFirebolt:\n    type: airbyte:SourceFirebolt\n    properties:\n      configuration:\n        account: '...my_account...'\n        database: '...my_database...'\n        engine: '...my_engine...'\n        host: api.app.firebolt.io\n        password: '...my_password...'\n        source_type: firebolt\n        username: username@email.com\n      name: Hector Yundt\n      secretId: '...my_secret_id...'\n      workspaceId: d7993900-66a6-4d2d-8003-55338cec086f\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceFireboltConfiguration:SourceFireboltConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceFireboltConfiguration:SourceFireboltConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceFirebolt resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceFireboltConfiguration:SourceFireboltConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceFreshcaller:SourceFreshcaller": {
            "description": "SourceFreshcaller Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceFreshcaller;\nimport com.pulumi.airbyte.SourceFreshcallerArgs;\nimport com.pulumi.airbyte.inputs.SourceFreshcallerConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceFreshcaller = new SourceFreshcaller(\"mySourceFreshcaller\", SourceFreshcallerArgs.builder()        \n            .configuration(SourceFreshcallerConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .domain(\"snaptravel\")\n                .requests_per_minute(7)\n                .source_type(\"freshcaller\")\n                .start_date(\"2022-01-01T12:00:00Z\")\n                .sync_lag_minutes(9)\n                .build())\n            .name(\"Keith Hills\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"b3119167-b8e3-4c8d-b034-08d6d364ffd4\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceFreshcaller:\n    type: airbyte:SourceFreshcaller\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        domain: snaptravel\n        requests_per_minute: 7\n        source_type: freshcaller\n        start_date: 2022-01-01T12:00:00Z\n        sync_lag_minutes: 9\n      name: Keith Hills\n      secretId: '...my_secret_id...'\n      workspaceId: b3119167-b8e3-4c8d-b034-08d6d364ffd4\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceFreshcallerConfiguration:SourceFreshcallerConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceFreshcallerConfiguration:SourceFreshcallerConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceFreshcaller resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceFreshcallerConfiguration:SourceFreshcallerConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceFreshdesk:SourceFreshdesk": {
            "description": "SourceFreshdesk Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceFreshdesk;\nimport com.pulumi.airbyte.SourceFreshdeskArgs;\nimport com.pulumi.airbyte.inputs.SourceFreshdeskConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceFreshdesk = new SourceFreshdesk(\"mySourceFreshdesk\", SourceFreshdeskArgs.builder()        \n            .configuration(SourceFreshdeskConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .domain(\"myaccount.freshdesk.com\")\n                .requests_per_minute(3)\n                .source_type(\"freshdesk\")\n                .start_date(\"2020-12-01T00:00:00Z\")\n                .build())\n            .name(\"Mr. Tara Sporer\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"3d48e935-c2c9-4e81-b30b-e3e43202d721\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceFreshdesk:\n    type: airbyte:SourceFreshdesk\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        domain: myaccount.freshdesk.com\n        requests_per_minute: 3\n        source_type: freshdesk\n        start_date: 2020-12-01T00:00:00Z\n      name: Mr. Tara Sporer\n      secretId: '...my_secret_id...'\n      workspaceId: 3d48e935-c2c9-4e81-b30b-e3e43202d721\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceFreshdeskConfiguration:SourceFreshdeskConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceFreshdeskConfiguration:SourceFreshdeskConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceFreshdesk resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceFreshdeskConfiguration:SourceFreshdeskConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceFreshsales:SourceFreshsales": {
            "description": "SourceFreshsales Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceFreshsales;\nimport com.pulumi.airbyte.SourceFreshsalesArgs;\nimport com.pulumi.airbyte.inputs.SourceFreshsalesConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceFreshsales = new SourceFreshsales(\"mySourceFreshsales\", SourceFreshsalesArgs.builder()        \n            .configuration(SourceFreshsalesConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .domain_name(\"mydomain.myfreshworks.com\")\n                .source_type(\"freshsales\")\n                .build())\n            .name(\"Geraldine Kling\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"06641870-d9d2-41f9-ad03-0c4ecc11a083\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceFreshsales:\n    type: airbyte:SourceFreshsales\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        domain_name: mydomain.myfreshworks.com\n        source_type: freshsales\n      name: Geraldine Kling\n      secretId: '...my_secret_id...'\n      workspaceId: 06641870-d9d2-41f9-ad03-0c4ecc11a083\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceFreshsalesConfiguration:SourceFreshsalesConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceFreshsalesConfiguration:SourceFreshsalesConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceFreshsales resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceFreshsalesConfiguration:SourceFreshsalesConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceGainsightPx:SourceGainsightPx": {
            "description": "SourceGainsightPx Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceGainsightPx;\nimport com.pulumi.airbyte.SourceGainsightPxArgs;\nimport com.pulumi.airbyte.inputs.SourceGainsightPxConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceGainsightpx = new SourceGainsightPx(\"mySourceGainsightpx\", SourceGainsightPxArgs.builder()        \n            .configuration(SourceGainsightPxConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .source_type(\"gainsight-px\")\n                .build())\n            .name(\"Anita Dare III\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"8b8502a5-5e7f-473b-8845-e320a319f4ba\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceGainsightpx:\n    type: airbyte:SourceGainsightPx\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        source_type: gainsight-px\n      name: Anita Dare III\n      secretId: '...my_secret_id...'\n      workspaceId: 8b8502a5-5e7f-473b-8845-e320a319f4ba\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGainsightPxConfiguration:SourceGainsightPxConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGainsightPxConfiguration:SourceGainsightPxConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceGainsightPx resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceGainsightPxConfiguration:SourceGainsightPxConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceGcs:SourceGcs": {
            "description": "SourceGcs Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceGcs;\nimport com.pulumi.airbyte.SourceGcsArgs;\nimport com.pulumi.airbyte.inputs.SourceGcsConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceGcs = new SourceGcs(\"mySourceGcs\", SourceGcsArgs.builder()        \n            .configuration(SourceGcsConfigurationArgs.builder()\n                .gcs_bucket(\"...my_gcs_bucket...\")\n                .gcs_path(\"...my_gcs_path...\")\n                .service_account(\"{ \\\"type\\\": \\\"service_account\\\", \\\"project_id\\\": YOUR_PROJECT_ID, \\\"private_key_id\\\": YOUR_PRIVATE_KEY, ... }\")\n                .source_type(\"gcs\")\n                .build())\n            .name(\"Darin Mante\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"c9a867bc-4242-4666-9816-ddca8ef51fcb\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceGcs:\n    type: airbyte:SourceGcs\n    properties:\n      configuration:\n        gcs_bucket: '...my_gcs_bucket...'\n        gcs_path: '...my_gcs_path...'\n        service_account: '{ \"type\": \"service_account\", \"project_id\": YOUR_PROJECT_ID, \"private_key_id\": YOUR_PRIVATE_KEY, ... }'\n        source_type: gcs\n      name: Darin Mante\n      secretId: '...my_secret_id...'\n      workspaceId: c9a867bc-4242-4666-9816-ddca8ef51fcb\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGcsConfiguration:SourceGcsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGcsConfiguration:SourceGcsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceGcs resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceGcsConfiguration:SourceGcsConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceGetlago:SourceGetlago": {
            "description": "SourceGetlago Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceGetlago;\nimport com.pulumi.airbyte.SourceGetlagoArgs;\nimport com.pulumi.airbyte.inputs.SourceGetlagoConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceGetlago = new SourceGetlago(\"mySourceGetlago\", SourceGetlagoArgs.builder()        \n            .configuration(SourceGetlagoConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .source_type(\"getlago\")\n                .build())\n            .name(\"Myra Hills\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"ec12cdaa-d0ec-47af-adbd-80df448a47f9\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceGetlago:\n    type: airbyte:SourceGetlago\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        source_type: getlago\n      name: Myra Hills\n      secretId: '...my_secret_id...'\n      workspaceId: ec12cdaa-d0ec-47af-adbd-80df448a47f9\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGetlagoConfiguration:SourceGetlagoConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGetlagoConfiguration:SourceGetlagoConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceGetlago resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceGetlagoConfiguration:SourceGetlagoConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceGithub:SourceGithub": {
            "description": "SourceGithub Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceGithub;\nimport com.pulumi.airbyte.SourceGithubArgs;\nimport com.pulumi.airbyte.inputs.SourceGithubConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceGithubConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceGithubConfigurationCredentialsSourceGithubAuthenticationOAuthArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceGithub = new SourceGithub(\"mySourceGithub\", SourceGithubArgs.builder()        \n            .configuration(SourceGithubConfigurationArgs.builder()\n                .branch(\"airbytehq/airbyte/master airbytehq/airbyte/my-branch\")\n                .credentials(SourceGithubConfigurationCredentialsArgs.builder()\n                    .sourceGithubAuthenticationOAuth(SourceGithubConfigurationCredentialsSourceGithubAuthenticationOAuthArgs.builder()\n                        .accessToken(\"...my_access_token...\")\n                        .clientId(\"...my_client_id...\")\n                        .clientSecret(\"...my_client_secret...\")\n                        .optionTitle(\"OAuth Credentials\")\n                        .build())\n                    .build())\n                .repository(\"airbytehq/airbyte airbytehq/another-repo\")\n                .requests_per_hour(6)\n                .source_type(\"github\")\n                .start_date(\"2021-03-01T00:00:00Z\")\n                .build())\n            .name(\"Brandy Kuvalis V\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"83dabf9e-f3ff-4dd9-b7f0-79af4d35724c\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceGithub:\n    type: airbyte:SourceGithub\n    properties:\n      configuration:\n        branch: airbytehq/airbyte/master airbytehq/airbyte/my-branch\n        credentials:\n          sourceGithubAuthenticationOAuth:\n            accessToken: '...my_access_token...'\n            clientId: '...my_client_id...'\n            clientSecret: '...my_client_secret...'\n            optionTitle: OAuth Credentials\n        repository: airbytehq/airbyte airbytehq/another-repo\n        requests_per_hour: 6\n        source_type: github\n        start_date: 2021-03-01T00:00:00Z\n      name: Brandy Kuvalis V\n      secretId: '...my_secret_id...'\n      workspaceId: 83dabf9e-f3ff-4dd9-b7f0-79af4d35724c\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGithubConfiguration:SourceGithubConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGithubConfiguration:SourceGithubConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceGithub resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceGithubConfiguration:SourceGithubConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceGitlab:SourceGitlab": {
            "description": "SourceGitlab Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceGitlab;\nimport com.pulumi.airbyte.SourceGitlabArgs;\nimport com.pulumi.airbyte.inputs.SourceGitlabConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceGitlabConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodOAuth20Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceGitlab = new SourceGitlab(\"mySourceGitlab\", SourceGitlabArgs.builder()        \n            .configuration(SourceGitlabConfigurationArgs.builder()\n                .api_url(\"https://gitlab.company.org\")\n                .credentials(SourceGitlabConfigurationCredentialsArgs.builder()\n                    .sourceGitlabAuthorizationMethodOAuth20(SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodOAuth20Args.builder()\n                        .accessToken(\"...my_access_token...\")\n                        .authType(\"oauth2.0\")\n                        .clientId(\"...my_client_id...\")\n                        .clientSecret(\"...my_client_secret...\")\n                        .refreshToken(\"...my_refresh_token...\")\n                        .tokenExpiryDate(\"2022-11-19T07:42:45.478Z\")\n                        .build())\n                    .build())\n                .groups(\"airbyte.io\")\n                .projects(\"airbyte.io/documentation\")\n                .source_type(\"gitlab\")\n                .start_date(\"2021-03-01T00:00:00Z\")\n                .build())\n            .name(\"Mr. Jesse Luettgen\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"7d56844e-ded8-45a9-865e-628bdfc2032b\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceGitlab:\n    type: airbyte:SourceGitlab\n    properties:\n      configuration:\n        api_url: https://gitlab.company.org\n        credentials:\n          sourceGitlabAuthorizationMethodOAuth20:\n            accessToken: '...my_access_token...'\n            authType: oauth2.0\n            clientId: '...my_client_id...'\n            clientSecret: '...my_client_secret...'\n            refreshToken: '...my_refresh_token...'\n            tokenExpiryDate: 2022-11-19T07:42:45.478Z\n        groups: airbyte.io\n        projects: airbyte.io/documentation\n        source_type: gitlab\n        start_date: 2021-03-01T00:00:00Z\n      name: Mr. Jesse Luettgen\n      secretId: '...my_secret_id...'\n      workspaceId: 7d56844e-ded8-45a9-865e-628bdfc2032b\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGitlabConfiguration:SourceGitlabConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGitlabConfiguration:SourceGitlabConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceGitlab resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceGitlabConfiguration:SourceGitlabConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceGlassfrog:SourceGlassfrog": {
            "description": "SourceGlassfrog Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceGlassfrog;\nimport com.pulumi.airbyte.SourceGlassfrogArgs;\nimport com.pulumi.airbyte.inputs.SourceGlassfrogConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceGlassfrog = new SourceGlassfrog(\"mySourceGlassfrog\", SourceGlassfrogArgs.builder()        \n            .configuration(SourceGlassfrogConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .source_type(\"glassfrog\")\n                .build())\n            .name(\"Angelica Langworth\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"923b7e13-584f-47ae-92c6-891f82ce1157\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceGlassfrog:\n    type: airbyte:SourceGlassfrog\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        source_type: glassfrog\n      name: Angelica Langworth\n      secretId: '...my_secret_id...'\n      workspaceId: 923b7e13-584f-47ae-92c6-891f82ce1157\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGlassfrogConfiguration:SourceGlassfrogConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGlassfrogConfiguration:SourceGlassfrogConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceGlassfrog resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceGlassfrogConfiguration:SourceGlassfrogConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceGnews:SourceGnews": {
            "description": "SourceGnews Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceGnews;\nimport com.pulumi.airbyte.SourceGnewsArgs;\nimport com.pulumi.airbyte.inputs.SourceGnewsConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceGnews = new SourceGnews(\"mySourceGnews\", SourceGnewsArgs.builder()        \n            .configuration(SourceGnewsConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .country(\"ca\")\n                .end_date(\"2022-08-21 16:27:09\")\n                .in(\"description\")\n                .language(\"en\")\n                .nullable(\"title\")\n                .query(\"Microsoft Windows 10\")\n                .sortby(\"publishedAt\")\n                .source_type(\"gnews\")\n                .start_date(\"2022-08-21 16:27:09\")\n                .top_headlines_query(\"Apple OR Microsoft\")\n                .top_headlines_topic(\"technology\")\n                .build())\n            .name(\"Mercedes Schiller\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"89df975e-3566-4860-92e9-c3ddc5f111de\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceGnews:\n    type: airbyte:SourceGnews\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        country: ca\n        end_date: 2022-08-21 16:27:09\n        in:\n          - description\n        language: en\n        nullable:\n          - title\n        query: Microsoft Windows 10\n        sortby: publishedAt\n        source_type: gnews\n        start_date: 2022-08-21 16:27:09\n        top_headlines_query: Apple OR Microsoft\n        top_headlines_topic: technology\n      name: Mercedes Schiller\n      secretId: '...my_secret_id...'\n      workspaceId: 89df975e-3566-4860-92e9-c3ddc5f111de\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGnewsConfiguration:SourceGnewsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGnewsConfiguration:SourceGnewsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceGnews resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceGnewsConfiguration:SourceGnewsConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceGoogleAds:SourceGoogleAds": {
            "description": "SourceGoogleAds Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceGoogleAds;\nimport com.pulumi.airbyte.SourceGoogleAdsArgs;\nimport com.pulumi.airbyte.inputs.SourceGoogleAdsConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceGoogleAdsConfigurationCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceGoogleads = new SourceGoogleAds(\"mySourceGoogleads\", SourceGoogleAdsArgs.builder()        \n            .configuration(SourceGoogleAdsConfigurationArgs.builder()\n                .conversion_window_days(14)\n                .credentials(SourceGoogleAdsConfigurationCredentialsArgs.builder()\n                    .accessToken(\"...my_access_token...\")\n                    .clientId(\"...my_client_id...\")\n                    .clientSecret(\"...my_client_secret...\")\n                    .developerToken(\"...my_developer_token...\")\n                    .refreshToken(\"...my_refresh_token...\")\n                    .build())\n                .custom_queries(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .customer_id(\"6783948572,5839201945\")\n                .end_date(\"2017-01-30\")\n                .login_customer_id(\"7349206847\")\n                .source_type(\"google-ads\")\n                .start_date(\"2017-01-25\")\n                .build())\n            .name(\"Miss Lloyd Funk\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"d190feb2-1780-4bcc-80db-bddb484708fb\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceGoogleads:\n    type: airbyte:SourceGoogleAds\n    properties:\n      configuration:\n        conversion_window_days: 14\n        credentials:\n          accessToken: '...my_access_token...'\n          clientId: '...my_client_id...'\n          clientSecret: '...my_client_secret...'\n          developerToken: '...my_developer_token...'\n          refreshToken: '...my_refresh_token...'\n        custom_queries:\n          - query: SELECT segments.ad_destination_type, campaign.advertising_channel_sub_type FROM campaign WHERE campaign.status = 'PAUSED'\n            tableName: '...my_table_name...'\n        customer_id: 6783948572,5839201945\n        end_date: 2017-01-30\n        login_customer_id: '7349206847'\n        source_type: google-ads\n        start_date: 2017-01-25\n      name: Miss Lloyd Funk\n      secretId: '...my_secret_id...'\n      workspaceId: d190feb2-1780-4bcc-80db-bddb484708fb\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGoogleAdsConfiguration:SourceGoogleAdsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGoogleAdsConfiguration:SourceGoogleAdsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceGoogleAds resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceGoogleAdsConfiguration:SourceGoogleAdsConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceGoogleAnalyticsDataApi:SourceGoogleAnalyticsDataApi": {
            "description": "SourceGoogleAnalyticsDataAPI Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceGoogleAnalyticsDataApi;\nimport com.pulumi.airbyte.SourceGoogleAnalyticsDataApiArgs;\nimport com.pulumi.airbyte.inputs.SourceGoogleAnalyticsDataApiConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceGoogleAnalyticsDataApiConfigurationCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceGoogleanalyticsdataapi = new SourceGoogleAnalyticsDataApi(\"mySourceGoogleanalyticsdataapi\", SourceGoogleAnalyticsDataApiArgs.builder()        \n            .configuration(SourceGoogleAnalyticsDataApiConfigurationArgs.builder()\n                .credentials(SourceGoogleAnalyticsDataApiConfigurationCredentialsArgs.builder()\n                    .sourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauth_(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .build())\n                .custom_reports(\"...my_custom_reports...\")\n                .date_ranges_start_date(\"2021-01-01\")\n                .property_id(\"1738294\")\n                .source_type(\"google-analytics-data-api\")\n                .window_in_days(120)\n                .build())\n            .name(\"Duane Prohaska II\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"8c4c4e54-599e-4a34-a260-e9b200ce78a1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceGoogleanalyticsdataapi:\n    type: airbyte:SourceGoogleAnalyticsDataApi\n    properties:\n      configuration:\n        credentials:\n          sourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauth_:\n            - accessToken: '...my_access_token...'\n              authType: Client\n              clientId: '...my_client_id...'\n              clientSecret: '...my_client_secret...'\n              refreshToken: '...my_refresh_token...'\n        custom_reports: '...my_custom_reports...'\n        date_ranges_start_date: 2021-01-01\n        property_id: '1738294'\n        source_type: google-analytics-data-api\n        window_in_days: 120\n      name: Duane Prohaska II\n      secretId: '...my_secret_id...'\n      workspaceId: 8c4c4e54-599e-4a34-a260-e9b200ce78a1\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGoogleAnalyticsDataApiConfiguration:SourceGoogleAnalyticsDataApiConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGoogleAnalyticsDataApiConfiguration:SourceGoogleAnalyticsDataApiConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceGoogleAnalyticsDataApi resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceGoogleAnalyticsDataApiConfiguration:SourceGoogleAnalyticsDataApiConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceGoogleAnalyticsV4:SourceGoogleAnalyticsV4": {
            "description": "SourceGoogleAnalyticsV4 Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceGoogleAnalyticsV4;\nimport com.pulumi.airbyte.SourceGoogleAnalyticsV4Args;\nimport com.pulumi.airbyte.inputs.SourceGoogleAnalyticsV4ConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceGoogleAnalyticsV4ConfigurationCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceGoogleanalyticsv4 = new SourceGoogleAnalyticsV4(\"mySourceGoogleanalyticsv4\", SourceGoogleAnalyticsV4Args.builder()        \n            .configuration(SourceGoogleAnalyticsV4ConfigurationArgs.builder()\n                .credentials(SourceGoogleAnalyticsV4ConfigurationCredentialsArgs.builder()\n                    .sourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth_(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .build())\n                .custom_reports(\"...my_custom_reports...\")\n                .source_type(\"google-analytics-v4\")\n                .start_date(\"2020-06-01\")\n                .view_id(\"...my_view_id...\")\n                .window_in_days(120)\n                .build())\n            .name(\"Miss Harvey Nicolas Sr.\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"6ce723d4-097f-4a30-a9af-725b29122030\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceGoogleanalyticsv4:\n    type: airbyte:SourceGoogleAnalyticsV4\n    properties:\n      configuration:\n        credentials:\n          sourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth_:\n            - accessToken: '...my_access_token...'\n              authType: Client\n              clientId: '...my_client_id...'\n              clientSecret: '...my_client_secret...'\n              refreshToken: '...my_refresh_token...'\n        custom_reports: '...my_custom_reports...'\n        source_type: google-analytics-v4\n        start_date: 2020-06-01\n        view_id: '...my_view_id...'\n        window_in_days: 120\n      name: Miss Harvey Nicolas Sr.\n      secretId: '...my_secret_id...'\n      workspaceId: 6ce723d4-097f-4a30-a9af-725b29122030\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGoogleAnalyticsV4Configuration:SourceGoogleAnalyticsV4Configuration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGoogleAnalyticsV4Configuration:SourceGoogleAnalyticsV4Configuration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceGoogleAnalyticsV4 resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceGoogleAnalyticsV4Configuration:SourceGoogleAnalyticsV4Configuration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceGoogleDirectory:SourceGoogleDirectory": {
            "description": "SourceGoogleDirectory Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceGoogleDirectory;\nimport com.pulumi.airbyte.SourceGoogleDirectoryArgs;\nimport com.pulumi.airbyte.inputs.SourceGoogleDirectoryConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceGoogleDirectoryConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsServiceAccountKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceGoogledirectory = new SourceGoogleDirectory(\"mySourceGoogledirectory\", SourceGoogleDirectoryArgs.builder()        \n            .configuration(SourceGoogleDirectoryConfigurationArgs.builder()\n                .credentials(SourceGoogleDirectoryConfigurationCredentialsArgs.builder()\n                    .sourceGoogleDirectoryGoogleCredentialsServiceAccountKey(SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsServiceAccountKeyArgs.builder()\n                        .credentialsJson(\"...my_credentials_json...\")\n                        .credentialsTitle(\"Service accounts\")\n                        .email(\"Juvenal.Frami64@hotmail.com\")\n                        .build())\n                    .build())\n                .source_type(\"google-directory\")\n                .build())\n            .name(\"Kelvin Kshlerin\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"9d22e8c1-f849-4382-9fdc-42c876c2c2df\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceGoogledirectory:\n    type: airbyte:SourceGoogleDirectory\n    properties:\n      configuration:\n        credentials:\n          sourceGoogleDirectoryGoogleCredentialsServiceAccountKey:\n            credentialsJson: '...my_credentials_json...'\n            credentialsTitle: Service accounts\n            email: Juvenal.Frami64@hotmail.com\n        source_type: google-directory\n      name: Kelvin Kshlerin\n      secretId: '...my_secret_id...'\n      workspaceId: 9d22e8c1-f849-4382-9fdc-42c876c2c2df\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGoogleDirectoryConfiguration:SourceGoogleDirectoryConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGoogleDirectoryConfiguration:SourceGoogleDirectoryConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceGoogleDirectory resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceGoogleDirectoryConfiguration:SourceGoogleDirectoryConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceGooglePagespeedInsights:SourceGooglePagespeedInsights": {
            "description": "SourceGooglePagespeedInsights Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceGooglePagespeedInsights;\nimport com.pulumi.airbyte.SourceGooglePagespeedInsightsArgs;\nimport com.pulumi.airbyte.inputs.SourceGooglePagespeedInsightsConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceGooglepagespeedinsights = new SourceGooglePagespeedInsights(\"mySourceGooglepagespeedinsights\", SourceGooglePagespeedInsightsArgs.builder()        \n            .configuration(SourceGooglePagespeedInsightsConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .categories(\"pwa\")\n                .source_type(\"google-pagespeed-insights\")\n                .strategies(\"desktop\")\n                .urls(\"...\")\n                .build())\n            .name(\"Miss Terrell Satterfield\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"6230f841-fb1b-4d23-bdb1-4db6be5a6859\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceGooglepagespeedinsights:\n    type: airbyte:SourceGooglePagespeedInsights\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        categories:\n          - pwa\n        source_type: google-pagespeed-insights\n        strategies:\n          - desktop\n        urls:\n          - '...'\n      name: Miss Terrell Satterfield\n      secretId: '...my_secret_id...'\n      workspaceId: 6230f841-fb1b-4d23-bdb1-4db6be5a6859\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGooglePagespeedInsightsConfiguration:SourceGooglePagespeedInsightsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGooglePagespeedInsightsConfiguration:SourceGooglePagespeedInsightsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceGooglePagespeedInsights resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceGooglePagespeedInsightsConfiguration:SourceGooglePagespeedInsightsConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceGoogleSearchConsole:SourceGoogleSearchConsole": {
            "description": "SourceGoogleSearchConsole Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceGoogleSearchConsole;\nimport com.pulumi.airbyte.SourceGoogleSearchConsoleArgs;\nimport com.pulumi.airbyte.inputs.SourceGoogleSearchConsoleConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceGoogleSearchConsoleConfigurationAuthorizationArgs;\nimport com.pulumi.airbyte.inputs.SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeOAuthArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceGooglesearchconsole = new SourceGoogleSearchConsole(\"mySourceGooglesearchconsole\", SourceGoogleSearchConsoleArgs.builder()        \n            .configuration(SourceGoogleSearchConsoleConfigurationArgs.builder()\n                .authorization(SourceGoogleSearchConsoleConfigurationAuthorizationArgs.builder()\n                    .sourceGoogleSearchConsoleAuthenticationTypeOAuth(SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeOAuthArgs.builder()\n                        .accessToken(\"...my_access_token...\")\n                        .authType(\"Client\")\n                        .clientId(\"...my_client_id...\")\n                        .clientSecret(\"...my_client_secret...\")\n                        .refreshToken(\"...my_refresh_token...\")\n                        .build())\n                    .build())\n                .custom_reports(\"...my_custom_reports...\")\n                .data_state(\"final\")\n                .end_date(\"2021-12-12\")\n                .site_urls(\"...\")\n                .source_type(\"google-search-console\")\n                .start_date(\"2021-01-01\")\n                .build())\n            .name(\"Janie Swift PhD\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"a16fc2b2-71a2-489c-97e8-54e90439d222\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceGooglesearchconsole:\n    type: airbyte:SourceGoogleSearchConsole\n    properties:\n      configuration:\n        authorization:\n          sourceGoogleSearchConsoleAuthenticationTypeOAuth:\n            accessToken: '...my_access_token...'\n            authType: Client\n            clientId: '...my_client_id...'\n            clientSecret: '...my_client_secret...'\n            refreshToken: '...my_refresh_token...'\n        custom_reports: '...my_custom_reports...'\n        data_state: final\n        end_date: 2021-12-12\n        site_urls:\n          - '...'\n        source_type: google-search-console\n        start_date: 2021-01-01\n      name: Janie Swift PhD\n      secretId: '...my_secret_id...'\n      workspaceId: a16fc2b2-71a2-489c-97e8-54e90439d222\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGoogleSearchConsoleConfiguration:SourceGoogleSearchConsoleConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGoogleSearchConsoleConfiguration:SourceGoogleSearchConsoleConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceGoogleSearchConsole resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceGoogleSearchConsoleConfiguration:SourceGoogleSearchConsoleConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceGoogleSheets:SourceGoogleSheets": {
            "description": "SourceGoogleSheets Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceGoogleSheets;\nimport com.pulumi.airbyte.SourceGoogleSheetsArgs;\nimport com.pulumi.airbyte.inputs.SourceGoogleSheetsConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceGoogleSheetsConfigurationCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceGooglesheets = new SourceGoogleSheets(\"mySourceGooglesheets\", SourceGoogleSheetsArgs.builder()        \n            .configuration(SourceGoogleSheetsConfigurationArgs.builder()\n                .credentials(SourceGoogleSheetsConfigurationCredentialsArgs.builder()\n                    .sourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth_(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .build())\n                .names_conversion(true)\n                .row_batch_size(100)\n                .source_type(\"google-sheets\")\n                .spreadsheet_id(\"https://docs.google.com/spreadsheets/d/1hLd9Qqti3UyLXZB2aFfUWDT7BG-arw2xy4HR3D-dwUb/edit\")\n                .build())\n            .name(\"Mae Gleichner\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"407084f7-ab37-4cef-8222-5194db55410a\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceGooglesheets:\n    type: airbyte:SourceGoogleSheets\n    properties:\n      configuration:\n        credentials:\n          sourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth_:\n            - authType: Client\n              clientId: '...my_client_id...'\n              clientSecret: '...my_client_secret...'\n              refreshToken: '...my_refresh_token...'\n        names_conversion: true\n        row_batch_size: 100\n        source_type: google-sheets\n        spreadsheet_id: https://docs.google.com/spreadsheets/d/1hLd9Qqti3UyLXZB2aFfUWDT7BG-arw2xy4HR3D-dwUb/edit\n      name: Mae Gleichner\n      secretId: '...my_secret_id...'\n      workspaceId: 407084f7-ab37-4cef-8222-5194db55410a\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGoogleSheetsConfiguration:SourceGoogleSheetsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGoogleSheetsConfiguration:SourceGoogleSheetsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceGoogleSheets resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceGoogleSheetsConfiguration:SourceGoogleSheetsConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceGoogleWebfonts:SourceGoogleWebfonts": {
            "description": "SourceGoogleWebfonts Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceGoogleWebfonts;\nimport com.pulumi.airbyte.SourceGoogleWebfontsArgs;\nimport com.pulumi.airbyte.inputs.SourceGoogleWebfontsConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceGooglewebfonts = new SourceGoogleWebfonts(\"mySourceGooglewebfonts\", SourceGoogleWebfontsArgs.builder()        \n            .configuration(SourceGoogleWebfontsConfigurationArgs.builder()\n                .alt(\"...my_alt...\")\n                .api_key(\"...my_api_key...\")\n                .pretty_print(\"...my_pretty_print...\")\n                .sort(\"...my_sort...\")\n                .source_type(\"google-webfonts\")\n                .build())\n            .name(\"Garrett Hoeger\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"af90a26c-7cdc-4981-b068-981d6bb33cfa\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceGooglewebfonts:\n    type: airbyte:SourceGoogleWebfonts\n    properties:\n      configuration:\n        alt: '...my_alt...'\n        api_key: '...my_api_key...'\n        pretty_print: '...my_pretty_print...'\n        sort: '...my_sort...'\n        source_type: google-webfonts\n      name: Garrett Hoeger\n      secretId: '...my_secret_id...'\n      workspaceId: af90a26c-7cdc-4981-b068-981d6bb33cfa\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGoogleWebfontsConfiguration:SourceGoogleWebfontsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGoogleWebfontsConfiguration:SourceGoogleWebfontsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceGoogleWebfonts resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceGoogleWebfontsConfiguration:SourceGoogleWebfontsConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceGoogleWorkspaceAdminReports:SourceGoogleWorkspaceAdminReports": {
            "description": "SourceGoogleWorkspaceAdminReports Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceGoogleWorkspaceAdminReports;\nimport com.pulumi.airbyte.SourceGoogleWorkspaceAdminReportsArgs;\nimport com.pulumi.airbyte.inputs.SourceGoogleWorkspaceAdminReportsConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceGoogleworkspaceadminreports = new SourceGoogleWorkspaceAdminReports(\"mySourceGoogleworkspaceadminreports\", SourceGoogleWorkspaceAdminReportsArgs.builder()        \n            .configuration(SourceGoogleWorkspaceAdminReportsConfigurationArgs.builder()\n                .credentials_json(\"...my_credentials_json...\")\n                .email(\"Daron_Green@hotmail.com\")\n                .lookback(2)\n                .source_type(\"google-workspace-admin-reports\")\n                .build())\n            .name(\"Antoinette Wolf IV\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"ee4fcf0c-42b7-48f1-9626-398a0dc76632\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceGoogleworkspaceadminreports:\n    type: airbyte:SourceGoogleWorkspaceAdminReports\n    properties:\n      configuration:\n        credentials_json: '...my_credentials_json...'\n        email: Daron_Green@hotmail.com\n        lookback: 2\n        source_type: google-workspace-admin-reports\n      name: Antoinette Wolf IV\n      secretId: '...my_secret_id...'\n      workspaceId: ee4fcf0c-42b7-48f1-9626-398a0dc76632\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGoogleWorkspaceAdminReportsConfiguration:SourceGoogleWorkspaceAdminReportsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGoogleWorkspaceAdminReportsConfiguration:SourceGoogleWorkspaceAdminReportsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceGoogleWorkspaceAdminReports resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceGoogleWorkspaceAdminReportsConfiguration:SourceGoogleWorkspaceAdminReportsConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceGreenhouse:SourceGreenhouse": {
            "description": "SourceGreenhouse Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceGreenhouse;\nimport com.pulumi.airbyte.SourceGreenhouseArgs;\nimport com.pulumi.airbyte.inputs.SourceGreenhouseConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceGreenhouse = new SourceGreenhouse(\"mySourceGreenhouse\", SourceGreenhouseArgs.builder()        \n            .configuration(SourceGreenhouseConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .source_type(\"greenhouse\")\n                .build())\n            .name(\"Kendra Schmitt III\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"c8ca12d0-2529-4270-b8d5-722dd895b8bc\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceGreenhouse:\n    type: airbyte:SourceGreenhouse\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        source_type: greenhouse\n      name: Kendra Schmitt III\n      secretId: '...my_secret_id...'\n      workspaceId: c8ca12d0-2529-4270-b8d5-722dd895b8bc\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGreenhouseConfiguration:SourceGreenhouseConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGreenhouseConfiguration:SourceGreenhouseConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceGreenhouse resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceGreenhouseConfiguration:SourceGreenhouseConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceGridly:SourceGridly": {
            "description": "SourceGridly Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceGridly;\nimport com.pulumi.airbyte.SourceGridlyArgs;\nimport com.pulumi.airbyte.inputs.SourceGridlyConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceGridly = new SourceGridly(\"mySourceGridly\", SourceGridlyArgs.builder()        \n            .configuration(SourceGridlyConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .grid_id(\"...my_grid_id...\")\n                .source_type(\"gridly\")\n                .build())\n            .name(\"Ernest Grimes\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"95969335-2f74-4533-994d-78de3b6e9389\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceGridly:\n    type: airbyte:SourceGridly\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        grid_id: '...my_grid_id...'\n        source_type: gridly\n      name: Ernest Grimes\n      secretId: '...my_secret_id...'\n      workspaceId: 95969335-2f74-4533-994d-78de3b6e9389\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGridlyConfiguration:SourceGridlyConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceGridlyConfiguration:SourceGridlyConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceGridly resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceGridlyConfiguration:SourceGridlyConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceHarvest:SourceHarvest": {
            "description": "SourceHarvest Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceHarvest;\nimport com.pulumi.airbyte.SourceHarvestArgs;\nimport com.pulumi.airbyte.inputs.SourceHarvestConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceHarvestConfigurationCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceHarvest = new SourceHarvest(\"mySourceHarvest\", SourceHarvestArgs.builder()        \n            .configuration(SourceHarvestConfigurationArgs.builder()\n                .account_id(\"...my_account_id...\")\n                .credentials(SourceHarvestConfigurationCredentialsArgs.builder()\n                    .sourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth_(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .build())\n                .replication_end_date(\"2017-01-25T00:00:00Z\")\n                .replication_start_date(\"2017-01-25T00:00:00Z\")\n                .source_type(\"harvest\")\n                .build())\n            .name(\"Harvey Wisoky\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"2550a283-82ac-4483-afd2-315bba650164\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceHarvest:\n    type: airbyte:SourceHarvest\n    properties:\n      configuration:\n        account_id: '...my_account_id...'\n        credentials:\n          sourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth_:\n            - authType: Client\n              clientId: '...my_client_id...'\n              clientSecret: '...my_client_secret...'\n              refreshToken: '...my_refresh_token...'\n        replication_end_date: 2017-01-25T00:00:00Z\n        replication_start_date: 2017-01-25T00:00:00Z\n        source_type: harvest\n      name: Harvey Wisoky\n      secretId: '...my_secret_id...'\n      workspaceId: 2550a283-82ac-4483-afd2-315bba650164\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceHarvestConfiguration:SourceHarvestConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceHarvestConfiguration:SourceHarvestConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceHarvest resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceHarvestConfiguration:SourceHarvestConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceHubplanner:SourceHubplanner": {
            "description": "SourceHubplanner Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceHubplanner;\nimport com.pulumi.airbyte.SourceHubplannerArgs;\nimport com.pulumi.airbyte.inputs.SourceHubplannerConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceHubplanner = new SourceHubplanner(\"mySourceHubplanner\", SourceHubplannerArgs.builder()        \n            .configuration(SourceHubplannerConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .source_type(\"hubplanner\")\n                .build())\n            .name(\"Scott Jast\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"bf6ae591-bc8b-4def-b612-b63c205fda84\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceHubplanner:\n    type: airbyte:SourceHubplanner\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        source_type: hubplanner\n      name: Scott Jast\n      secretId: '...my_secret_id...'\n      workspaceId: bf6ae591-bc8b-4def-b612-b63c205fda84\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceHubplannerConfiguration:SourceHubplannerConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceHubplannerConfiguration:SourceHubplannerConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceHubplanner resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceHubplannerConfiguration:SourceHubplannerConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceHubspot:SourceHubspot": {
            "description": "SourceHubspot Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceHubspot;\nimport com.pulumi.airbyte.SourceHubspotArgs;\nimport com.pulumi.airbyte.inputs.SourceHubspotConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceHubspotConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationOAuthArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceHubspot = new SourceHubspot(\"mySourceHubspot\", SourceHubspotArgs.builder()        \n            .configuration(SourceHubspotConfigurationArgs.builder()\n                .credentials(SourceHubspotConfigurationCredentialsArgs.builder()\n                    .sourceHubspotAuthenticationOAuth(SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationOAuthArgs.builder()\n                        .clientId(\"123456789000\")\n                        .clientSecret(\"secret\")\n                        .credentialsTitle(\"OAuth Credentials\")\n                        .refreshToken(\"refresh_token\")\n                        .build())\n                    .build())\n                .source_type(\"hubspot\")\n                .start_date(\"2017-01-25T00:00:00Z\")\n                .build())\n            .name(\"Pauline Paucek\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"a9a35d08-6b6f-466f-af02-0e9f443b4257\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceHubspot:\n    type: airbyte:SourceHubspot\n    properties:\n      configuration:\n        credentials:\n          sourceHubspotAuthenticationOAuth:\n            clientId: '123456789000'\n            clientSecret: secret\n            credentialsTitle: OAuth Credentials\n            refreshToken: refresh_token\n        source_type: hubspot\n        start_date: 2017-01-25T00:00:00Z\n      name: Pauline Paucek\n      secretId: '...my_secret_id...'\n      workspaceId: a9a35d08-6b6f-466f-af02-0e9f443b4257\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceHubspotConfiguration:SourceHubspotConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceHubspotConfiguration:SourceHubspotConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceHubspot resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceHubspotConfiguration:SourceHubspotConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceInsightly:SourceInsightly": {
            "description": "SourceInsightly Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceInsightly;\nimport com.pulumi.airbyte.SourceInsightlyArgs;\nimport com.pulumi.airbyte.inputs.SourceInsightlyConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceInsightly = new SourceInsightly(\"mySourceInsightly\", SourceInsightlyArgs.builder()        \n            .configuration(SourceInsightlyConfigurationArgs.builder()\n                .source_type(\"insightly\")\n                .start_date(\"2021-03-01T00:00:00Z\")\n                .token(\"...my_token...\")\n                .build())\n            .name(\"Arturo Marks\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"8dbda6a6-1efa-4219-8258-fd0a9eba47f7\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceInsightly:\n    type: airbyte:SourceInsightly\n    properties:\n      configuration:\n        source_type: insightly\n        start_date: 2021-03-01T00:00:00Z\n        token: '...my_token...'\n      name: Arturo Marks\n      secretId: '...my_secret_id...'\n      workspaceId: 8dbda6a6-1efa-4219-8258-fd0a9eba47f7\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceInsightlyConfiguration:SourceInsightlyConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceInsightlyConfiguration:SourceInsightlyConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceInsightly resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceInsightlyConfiguration:SourceInsightlyConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceInstagram:SourceInstagram": {
            "description": "SourceInstagram Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceInstagram;\nimport com.pulumi.airbyte.SourceInstagramArgs;\nimport com.pulumi.airbyte.inputs.SourceInstagramConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceInstagram = new SourceInstagram(\"mySourceInstagram\", SourceInstagramArgs.builder()        \n            .configuration(SourceInstagramConfigurationArgs.builder()\n                .access_token(\"...my_access_token...\")\n                .client_id(\"...my_client_id...\")\n                .client_secret(\"...my_client_secret...\")\n                .source_type(\"instagram\")\n                .start_date(\"2017-01-25T00:00:00Z\")\n                .build())\n            .name(\"Randal Aufderhar\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"640d6a18-31c8-47ad-b596-fdf1ad837ae8\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceInstagram:\n    type: airbyte:SourceInstagram\n    properties:\n      configuration:\n        access_token: '...my_access_token...'\n        client_id: '...my_client_id...'\n        client_secret: '...my_client_secret...'\n        source_type: instagram\n        start_date: 2017-01-25T00:00:00Z\n      name: Randal Aufderhar\n      secretId: '...my_secret_id...'\n      workspaceId: 640d6a18-31c8-47ad-b596-fdf1ad837ae8\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceInstagramConfiguration:SourceInstagramConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceInstagramConfiguration:SourceInstagramConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceInstagram resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceInstagramConfiguration:SourceInstagramConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceInstatus:SourceInstatus": {
            "description": "SourceInstatus Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceInstatus;\nimport com.pulumi.airbyte.SourceInstatusArgs;\nimport com.pulumi.airbyte.inputs.SourceInstatusConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceInstatus = new SourceInstatus(\"mySourceInstatus\", SourceInstatusArgs.builder()        \n            .configuration(SourceInstatusConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .source_type(\"instatus\")\n                .build())\n            .name(\"Rosalie Bruen V\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"c95ba998-678f-4a3f-a969-91af388ce036\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceInstatus:\n    type: airbyte:SourceInstatus\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        source_type: instatus\n      name: Rosalie Bruen V\n      secretId: '...my_secret_id...'\n      workspaceId: c95ba998-678f-4a3f-a969-91af388ce036\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceInstatusConfiguration:SourceInstatusConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceInstatusConfiguration:SourceInstatusConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceInstatus resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceInstatusConfiguration:SourceInstatusConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceIntercom:SourceIntercom": {
            "description": "SourceIntercom Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceIntercom;\nimport com.pulumi.airbyte.SourceIntercomArgs;\nimport com.pulumi.airbyte.inputs.SourceIntercomConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceIntercom = new SourceIntercom(\"mySourceIntercom\", SourceIntercomArgs.builder()        \n            .configuration(SourceIntercomConfigurationArgs.builder()\n                .access_token(\"...my_access_token...\")\n                .source_type(\"intercom\")\n                .start_date(\"2020-11-16T00:00:00Z\")\n                .build())\n            .name(\"Emma Lueilwitz\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"977a0ef2-f536-4028-afee-f934152ed7e2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceIntercom:\n    type: airbyte:SourceIntercom\n    properties:\n      configuration:\n        access_token: '...my_access_token...'\n        source_type: intercom\n        start_date: 2020-11-16T00:00:00Z\n      name: Emma Lueilwitz\n      secretId: '...my_secret_id...'\n      workspaceId: 977a0ef2-f536-4028-afee-f934152ed7e2\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceIntercomConfiguration:SourceIntercomConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceIntercomConfiguration:SourceIntercomConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceIntercom resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceIntercomConfiguration:SourceIntercomConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceIp2whois:SourceIp2whois": {
            "description": "SourceIp2whois Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceIp2whois;\nimport com.pulumi.airbyte.SourceIp2whoisArgs;\nimport com.pulumi.airbyte.inputs.SourceIp2whoisConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceIp2whois = new SourceIp2whois(\"mySourceIp2whois\", SourceIp2whoisArgs.builder()        \n            .configuration(SourceIp2whoisConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .domain(\"www.google.com\")\n                .source_type(\"ip2whois\")\n                .build())\n            .name(\"Lucia Gorczany II\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"7deaa717-0f44-45ac-8f66-7aaf9bbad185\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceIp2whois:\n    type: airbyte:SourceIp2whois\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        domain: www.google.com\n        source_type: ip2whois\n      name: Lucia Gorczany II\n      secretId: '...my_secret_id...'\n      workspaceId: 7deaa717-0f44-45ac-8f66-7aaf9bbad185\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceIp2whoisConfiguration:SourceIp2whoisConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceIp2whoisConfiguration:SourceIp2whoisConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceIp2whois resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceIp2whoisConfiguration:SourceIp2whoisConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceIterable:SourceIterable": {
            "description": "SourceIterable Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceIterable;\nimport com.pulumi.airbyte.SourceIterableArgs;\nimport com.pulumi.airbyte.inputs.SourceIterableConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceIterable = new SourceIterable(\"mySourceIterable\", SourceIterableArgs.builder()        \n            .configuration(SourceIterableConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .source_type(\"iterable\")\n                .start_date(\"2021-04-01T00:00:00Z\")\n                .build())\n            .name(\"Peggy Bergstrom\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"bf5c838f-bb8c-420c-b67f-c4b425e99e62\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceIterable:\n    type: airbyte:SourceIterable\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        source_type: iterable\n        start_date: 2021-04-01T00:00:00Z\n      name: Peggy Bergstrom\n      secretId: '...my_secret_id...'\n      workspaceId: bf5c838f-bb8c-420c-b67f-c4b425e99e62\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceIterableConfiguration:SourceIterableConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceIterableConfiguration:SourceIterableConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceIterable resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceIterableConfiguration:SourceIterableConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceJira:SourceJira": {
            "description": "SourceJira Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceJira;\nimport com.pulumi.airbyte.SourceJiraArgs;\nimport com.pulumi.airbyte.inputs.SourceJiraConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceJira = new SourceJira(\"mySourceJira\", SourceJiraArgs.builder()        \n            .configuration(SourceJiraConfigurationArgs.builder()\n                .api_token(\"...my_api_token...\")\n                .domain(\"\u003cyour-domain\u003e.atlassian.net\")\n                .email(\"Ottilie.McCullough73@gmail.com\")\n                .enable_experimental_streams(false)\n                .expand_issue_changelog(true)\n                .projects(\"...\")\n                .render_fields(false)\n                .source_type(\"jira\")\n                .start_date(\"2021-03-01T00:00:00Z\")\n                .build())\n            .name(\"Mathew Klocko\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"c38d4baf-91e5-406e-b890-a54b475f16f5\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceJira:\n    type: airbyte:SourceJira\n    properties:\n      configuration:\n        api_token: '...my_api_token...'\n        domain: \u003cyour-domain\u003e.atlassian.net\n        email: Ottilie.McCullough73@gmail.com\n        enable_experimental_streams: false\n        expand_issue_changelog: true\n        projects:\n          - '...'\n        render_fields: false\n        source_type: jira\n        start_date: 2021-03-01T00:00:00Z\n      name: Mathew Klocko\n      secretId: '...my_secret_id...'\n      workspaceId: c38d4baf-91e5-406e-b890-a54b475f16f5\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceJiraConfiguration:SourceJiraConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceJiraConfiguration:SourceJiraConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceJira resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceJiraConfiguration:SourceJiraConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceK6Cloud:SourceK6Cloud": {
            "description": "SourceK6Cloud Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceK6Cloud;\nimport com.pulumi.airbyte.SourceK6CloudArgs;\nimport com.pulumi.airbyte.inputs.SourceK6CloudConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceK6cloud = new SourceK6Cloud(\"mySourceK6cloud\", SourceK6CloudArgs.builder()        \n            .configuration(SourceK6CloudConfigurationArgs.builder()\n                .api_token(\"...my_api_token...\")\n                .source_type(\"k6-cloud\")\n                .build())\n            .name(\"Marcella Dooley\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"a3c4ac63-1b99-4e26-8ed8-f9fdb9410f63\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceK6cloud:\n    type: airbyte:SourceK6Cloud\n    properties:\n      configuration:\n        api_token: '...my_api_token...'\n        source_type: k6-cloud\n      name: Marcella Dooley\n      secretId: '...my_secret_id...'\n      workspaceId: a3c4ac63-1b99-4e26-8ed8-f9fdb9410f63\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceK6CloudConfiguration:SourceK6CloudConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceK6CloudConfiguration:SourceK6CloudConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceK6Cloud resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceK6CloudConfiguration:SourceK6CloudConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceKlarna:SourceKlarna": {
            "description": "SourceKlarna Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceKlarna;\nimport com.pulumi.airbyte.SourceKlarnaArgs;\nimport com.pulumi.airbyte.inputs.SourceKlarnaConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceKlarna = new SourceKlarna(\"mySourceKlarna\", SourceKlarnaArgs.builder()        \n            .configuration(SourceKlarnaConfigurationArgs.builder()\n                .password(\"...my_password...\")\n                .playground(false)\n                .region(\"oc\")\n                .source_type(\"klarna\")\n                .username(\"Tristin47\")\n                .build())\n            .name(\"Jacob Krajcik Sr.\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"afdd7886-2418-49eb-8487-3f5033f19dbf\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceKlarna:\n    type: airbyte:SourceKlarna\n    properties:\n      configuration:\n        password: '...my_password...'\n        playground: false\n        region: oc\n        source_type: klarna\n        username: Tristin47\n      name: Jacob Krajcik Sr.\n      secretId: '...my_secret_id...'\n      workspaceId: afdd7886-2418-49eb-8487-3f5033f19dbf\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceKlarnaConfiguration:SourceKlarnaConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceKlarnaConfiguration:SourceKlarnaConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceKlarna resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceKlarnaConfiguration:SourceKlarnaConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceKlaviyo:SourceKlaviyo": {
            "description": "SourceKlaviyo Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceKlaviyo;\nimport com.pulumi.airbyte.SourceKlaviyoArgs;\nimport com.pulumi.airbyte.inputs.SourceKlaviyoConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceKlaviyo = new SourceKlaviyo(\"mySourceKlaviyo\", SourceKlaviyoArgs.builder()        \n            .configuration(SourceKlaviyoConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .source_type(\"klaviyo\")\n                .start_date(\"2017-01-25T00:00:00Z\")\n                .build())\n            .name(\"Della Trantow II\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"2eab9cd7-e522-44a6-a0e1-23b7847ec59e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceKlaviyo:\n    type: airbyte:SourceKlaviyo\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        source_type: klaviyo\n        start_date: 2017-01-25T00:00:00Z\n      name: Della Trantow II\n      secretId: '...my_secret_id...'\n      workspaceId: 2eab9cd7-e522-44a6-a0e1-23b7847ec59e\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceKlaviyoConfiguration:SourceKlaviyoConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceKlaviyoConfiguration:SourceKlaviyoConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceKlaviyo resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceKlaviyoConfiguration:SourceKlaviyoConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceKustomerSinger:SourceKustomerSinger": {
            "description": "SourceKustomerSinger Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceKustomerSinger;\nimport com.pulumi.airbyte.SourceKustomerSingerArgs;\nimport com.pulumi.airbyte.inputs.SourceKustomerSingerConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceKustomersinger = new SourceKustomerSinger(\"mySourceKustomersinger\", SourceKustomerSingerArgs.builder()        \n            .configuration(SourceKustomerSingerConfigurationArgs.builder()\n                .api_token(\"...my_api_token...\")\n                .source_type(\"kustomer-singer\")\n                .start_date(\"2019-01-01T00:00:00Z\")\n                .build())\n            .name(\"Camille Johnston\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"3c4cce4b-6d76-496f-b3c5-747501357e44\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceKustomersinger:\n    type: airbyte:SourceKustomerSinger\n    properties:\n      configuration:\n        api_token: '...my_api_token...'\n        source_type: kustomer-singer\n        start_date: 2019-01-01T00:00:00Z\n      name: Camille Johnston\n      secretId: '...my_secret_id...'\n      workspaceId: 3c4cce4b-6d76-496f-b3c5-747501357e44\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceKustomerSingerConfiguration:SourceKustomerSingerConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceKustomerSingerConfiguration:SourceKustomerSingerConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceKustomerSinger resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceKustomerSingerConfiguration:SourceKustomerSingerConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceKyve:SourceKyve": {
            "description": "SourceKyve Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceKyve;\nimport com.pulumi.airbyte.SourceKyveArgs;\nimport com.pulumi.airbyte.inputs.SourceKyveConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceKyve = new SourceKyve(\"mySourceKyve\", SourceKyveArgs.builder()        \n            .configuration(SourceKyveConfigurationArgs.builder()\n                .max_pages(10)\n                .page_size(4)\n                .pool_ids(\"0\")\n                .source_type(\"kyve\")\n                .start_ids(\"0,0\")\n                .url_base(\"https://api.beta.kyve.network/\")\n                .build())\n            .name(\"William Larson\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"3197e193-a245-4467-b948-74c2d5cc4972\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceKyve:\n    type: airbyte:SourceKyve\n    properties:\n      configuration:\n        max_pages: 10\n        page_size: 4\n        pool_ids: '0'\n        source_type: kyve\n        start_ids: 0,0\n        url_base: https://api.beta.kyve.network/\n      name: William Larson\n      secretId: '...my_secret_id...'\n      workspaceId: 3197e193-a245-4467-b948-74c2d5cc4972\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceKyveConfiguration:SourceKyveConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceKyveConfiguration:SourceKyveConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceKyve resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceKyveConfiguration:SourceKyveConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceLaunchdarkly:SourceLaunchdarkly": {
            "description": "SourceLaunchdarkly Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceLaunchdarkly;\nimport com.pulumi.airbyte.SourceLaunchdarklyArgs;\nimport com.pulumi.airbyte.inputs.SourceLaunchdarklyConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceLaunchdarkly = new SourceLaunchdarkly(\"mySourceLaunchdarkly\", SourceLaunchdarklyArgs.builder()        \n            .configuration(SourceLaunchdarklyConfigurationArgs.builder()\n                .access_token(\"...my_access_token...\")\n                .source_type(\"launchdarkly\")\n                .build())\n            .name(\"Edith Dickens\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"6bd8fe5d-00b9-479e-b203-87320590ccc1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceLaunchdarkly:\n    type: airbyte:SourceLaunchdarkly\n    properties:\n      configuration:\n        access_token: '...my_access_token...'\n        source_type: launchdarkly\n      name: Edith Dickens\n      secretId: '...my_secret_id...'\n      workspaceId: 6bd8fe5d-00b9-479e-b203-87320590ccc1\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceLaunchdarklyConfiguration:SourceLaunchdarklyConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceLaunchdarklyConfiguration:SourceLaunchdarklyConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceLaunchdarkly resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceLaunchdarklyConfiguration:SourceLaunchdarklyConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceLemlist:SourceLemlist": {
            "description": "SourceLemlist Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceLemlist;\nimport com.pulumi.airbyte.SourceLemlistArgs;\nimport com.pulumi.airbyte.inputs.SourceLemlistConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceLemlist = new SourceLemlist(\"mySourceLemlist\", SourceLemlistArgs.builder()        \n            .configuration(SourceLemlistConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .source_type(\"lemlist\")\n                .build())\n            .name(\"Erika Jaskolski Jr.\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"313b3e50-44f6-45fe-b2dc-4077d0cc3f40\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceLemlist:\n    type: airbyte:SourceLemlist\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        source_type: lemlist\n      name: Erika Jaskolski Jr.\n      secretId: '...my_secret_id...'\n      workspaceId: 313b3e50-44f6-45fe-b2dc-4077d0cc3f40\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceLemlistConfiguration:SourceLemlistConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceLemlistConfiguration:SourceLemlistConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceLemlist resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceLemlistConfiguration:SourceLemlistConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceLeverHiring:SourceLeverHiring": {
            "description": "SourceLeverHiring Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceLeverHiring;\nimport com.pulumi.airbyte.SourceLeverHiringArgs;\nimport com.pulumi.airbyte.inputs.SourceLeverHiringConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceLeverHiringConfigurationCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceLeverhiring = new SourceLeverHiring(\"mySourceLeverhiring\", SourceLeverHiringArgs.builder()        \n            .configuration(SourceLeverHiringConfigurationArgs.builder()\n                .credentials(SourceLeverHiringConfigurationCredentialsArgs.builder()\n                    .sourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKey_(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .build())\n                .environment(\"Sandbox\")\n                .source_type(\"lever-hiring\")\n                .start_date(\"2021-03-01T00:00:00Z\")\n                .build())\n            .name(\"Mrs. Amos Ryan\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"eb4d6e1e-ae0f-475a-adf2-acab58b991c9\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceLeverhiring:\n    type: airbyte:SourceLeverHiring\n    properties:\n      configuration:\n        credentials:\n          sourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKey_:\n            - apiKey: '...my_api_key...'\n              authType: Api Key\n        environment: Sandbox\n        source_type: lever-hiring\n        start_date: 2021-03-01T00:00:00Z\n      name: Mrs. Amos Ryan\n      secretId: '...my_secret_id...'\n      workspaceId: eb4d6e1e-ae0f-475a-adf2-acab58b991c9\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceLeverHiringConfiguration:SourceLeverHiringConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceLeverHiringConfiguration:SourceLeverHiringConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceLeverHiring resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceLeverHiringConfiguration:SourceLeverHiringConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceLinkedinAds:SourceLinkedinAds": {
            "description": "SourceLinkedinAds Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceLinkedinAds;\nimport com.pulumi.airbyte.SourceLinkedinAdsArgs;\nimport com.pulumi.airbyte.inputs.SourceLinkedinAdsConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceLinkedinAdsConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationAccessTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceLinkedinads = new SourceLinkedinAds(\"mySourceLinkedinads\", SourceLinkedinAdsArgs.builder()        \n            .configuration(SourceLinkedinAdsConfigurationArgs.builder()\n                .account_ids(1)\n                .ad_analytics_reports(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .credentials(SourceLinkedinAdsConfigurationCredentialsArgs.builder()\n                    .sourceLinkedinAdsAuthenticationAccessToken(SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationAccessTokenArgs.builder()\n                        .accessToken(\"...my_access_token...\")\n                        .authMethod(\"access_token\")\n                        .build())\n                    .build())\n                .source_type(\"linkedin-ads\")\n                .start_date(\"2021-05-17\")\n                .build())\n            .name(\"Leigh Kuhic\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"1cbe6d95-02f0-4ea9-b0b6-9f7ac2f72f88\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceLinkedinads:\n    type: airbyte:SourceLinkedinAds\n    properties:\n      configuration:\n        account_ids:\n          - 1\n        ad_analytics_reports:\n          - name: Mable Stroman\n            pivotBy: MEMBER_COMPANY_SIZE\n            timeGranularity: MONTHLY\n        credentials:\n          sourceLinkedinAdsAuthenticationAccessToken:\n            accessToken: '...my_access_token...'\n            authMethod: access_token\n        source_type: linkedin-ads\n        start_date: 2021-05-17\n      name: Leigh Kuhic\n      secretId: '...my_secret_id...'\n      workspaceId: 1cbe6d95-02f0-4ea9-b0b6-9f7ac2f72f88\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceLinkedinAdsConfiguration:SourceLinkedinAdsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceLinkedinAdsConfiguration:SourceLinkedinAdsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceLinkedinAds resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceLinkedinAdsConfiguration:SourceLinkedinAdsConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceLinkedinPages:SourceLinkedinPages": {
            "description": "SourceLinkedinPages Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceLinkedinPages;\nimport com.pulumi.airbyte.SourceLinkedinPagesArgs;\nimport com.pulumi.airbyte.inputs.SourceLinkedinPagesConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceLinkedinPagesConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationAccessTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceLinkedinpages = new SourceLinkedinPages(\"mySourceLinkedinpages\", SourceLinkedinPagesArgs.builder()        \n            .configuration(SourceLinkedinPagesConfigurationArgs.builder()\n                .credentials(SourceLinkedinPagesConfigurationCredentialsArgs.builder()\n                    .sourceLinkedinPagesAuthenticationAccessToken(SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationAccessTokenArgs.builder()\n                        .accessToken(\"...my_access_token...\")\n                        .authMethod(\"access_token\")\n                        .build())\n                    .build())\n                .org_id(\"123456789\")\n                .source_type(\"linkedin-pages\")\n                .build())\n            .name(\"Karen Barrows I\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"91160820-7888-4ec6-a183-bfe9659eb40e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceLinkedinpages:\n    type: airbyte:SourceLinkedinPages\n    properties:\n      configuration:\n        credentials:\n          sourceLinkedinPagesAuthenticationAccessToken:\n            accessToken: '...my_access_token...'\n            authMethod: access_token\n        org_id: '123456789'\n        source_type: linkedin-pages\n      name: Karen Barrows I\n      secretId: '...my_secret_id...'\n      workspaceId: 91160820-7888-4ec6-a183-bfe9659eb40e\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceLinkedinPagesConfiguration:SourceLinkedinPagesConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceLinkedinPagesConfiguration:SourceLinkedinPagesConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceLinkedinPages resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceLinkedinPagesConfiguration:SourceLinkedinPagesConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceLinnworks:SourceLinnworks": {
            "description": "SourceLinnworks Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceLinnworks;\nimport com.pulumi.airbyte.SourceLinnworksArgs;\nimport com.pulumi.airbyte.inputs.SourceLinnworksConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceLinnworks = new SourceLinnworks(\"mySourceLinnworks\", SourceLinnworksArgs.builder()        \n            .configuration(SourceLinnworksConfigurationArgs.builder()\n                .application_id(\"...my_application_id...\")\n                .application_secret(\"...my_application_secret...\")\n                .source_type(\"linnworks\")\n                .start_date(\"2022-08-21T08:36:18.969Z\")\n                .token(\"...my_token...\")\n                .build())\n            .name(\"Lana Osinski\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"5b0b532a-4da3-47cb-aaf4-452c4842c9b2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceLinnworks:\n    type: airbyte:SourceLinnworks\n    properties:\n      configuration:\n        application_id: '...my_application_id...'\n        application_secret: '...my_application_secret...'\n        source_type: linnworks\n        start_date: 2022-08-21T08:36:18.969Z\n        token: '...my_token...'\n      name: Lana Osinski\n      secretId: '...my_secret_id...'\n      workspaceId: 5b0b532a-4da3-47cb-aaf4-452c4842c9b2\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceLinnworksConfiguration:SourceLinnworksConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceLinnworksConfiguration:SourceLinnworksConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceLinnworks resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceLinnworksConfiguration:SourceLinnworksConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceLokalise:SourceLokalise": {
            "description": "SourceLokalise Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceLokalise;\nimport com.pulumi.airbyte.SourceLokaliseArgs;\nimport com.pulumi.airbyte.inputs.SourceLokaliseConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceLokalise = new SourceLokalise(\"mySourceLokalise\", SourceLokaliseArgs.builder()        \n            .configuration(SourceLokaliseConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .project_id(\"...my_project_id...\")\n                .source_type(\"lokalise\")\n                .build())\n            .name(\"Al Emmerich\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"afe81a88-f444-4457-bfec-d47353f63c82\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceLokalise:\n    type: airbyte:SourceLokalise\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        project_id: '...my_project_id...'\n        source_type: lokalise\n      name: Al Emmerich\n      secretId: '...my_secret_id...'\n      workspaceId: afe81a88-f444-4457-bfec-d47353f63c82\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceLokaliseConfiguration:SourceLokaliseConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceLokaliseConfiguration:SourceLokaliseConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceLokalise resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceLokaliseConfiguration:SourceLokaliseConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceMailchimp:SourceMailchimp": {
            "description": "SourceMailchimp Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceMailchimp;\nimport com.pulumi.airbyte.SourceMailchimpArgs;\nimport com.pulumi.airbyte.inputs.SourceMailchimpConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceMailchimpConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationApiKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceMailchimp = new SourceMailchimp(\"mySourceMailchimp\", SourceMailchimpArgs.builder()        \n            .configuration(SourceMailchimpConfigurationArgs.builder()\n                .campaign_id(\"...my_campaign_id...\")\n                .credentials(SourceMailchimpConfigurationCredentialsArgs.builder()\n                    .sourceMailchimpAuthenticationApiKey(SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationApiKeyArgs.builder()\n                        .apikey(\"...my_apikey...\")\n                        .authType(\"apikey\")\n                        .build())\n                    .build())\n                .source_type(\"mailchimp\")\n                .build())\n            .name(\"Faye Dicki\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"aa69cd5f-bcf7-49da-98a7-822bf95894e6\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceMailchimp:\n    type: airbyte:SourceMailchimp\n    properties:\n      configuration:\n        campaign_id: '...my_campaign_id...'\n        credentials:\n          sourceMailchimpAuthenticationApiKey:\n            apikey: '...my_apikey...'\n            authType: apikey\n        source_type: mailchimp\n      name: Faye Dicki\n      secretId: '...my_secret_id...'\n      workspaceId: aa69cd5f-bcf7-49da-98a7-822bf95894e6\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceMailchimpConfiguration:SourceMailchimpConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceMailchimpConfiguration:SourceMailchimpConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceMailchimp resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceMailchimpConfiguration:SourceMailchimpConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceMailgun:SourceMailgun": {
            "description": "SourceMailgun Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceMailgun;\nimport com.pulumi.airbyte.SourceMailgunArgs;\nimport com.pulumi.airbyte.inputs.SourceMailgunConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceMailgun = new SourceMailgun(\"mySourceMailgun\", SourceMailgunArgs.builder()        \n            .configuration(SourceMailgunConfigurationArgs.builder()\n                .domain_region(\"...my_domain_region...\")\n                .private_key(\"...my_private_key...\")\n                .source_type(\"mailgun\")\n                .start_date(\"2023-08-01T00:00:00Z\")\n                .build())\n            .name(\"Lynda Schuppe\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"5f9e5d75-1c9f-4e8f-b502-bfdc3450841f\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceMailgun:\n    type: airbyte:SourceMailgun\n    properties:\n      configuration:\n        domain_region: '...my_domain_region...'\n        private_key: '...my_private_key...'\n        source_type: mailgun\n        start_date: 2023-08-01T00:00:00Z\n      name: Lynda Schuppe\n      secretId: '...my_secret_id...'\n      workspaceId: 5f9e5d75-1c9f-4e8f-b502-bfdc3450841f\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceMailgunConfiguration:SourceMailgunConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceMailgunConfiguration:SourceMailgunConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceMailgun resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceMailgunConfiguration:SourceMailgunConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceMailjetSms:SourceMailjetSms": {
            "description": "SourceMailjetSms Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceMailjetSms;\nimport com.pulumi.airbyte.SourceMailjetSmsArgs;\nimport com.pulumi.airbyte.inputs.SourceMailjetSmsConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceMailjetsms = new SourceMailjetSms(\"mySourceMailjetsms\", SourceMailjetSmsArgs.builder()        \n            .configuration(SourceMailjetSmsConfigurationArgs.builder()\n                .end_date(1666281656)\n                .source_type(\"mailjet-sms\")\n                .start_date(1666261656)\n                .token(\"...my_token...\")\n                .build())\n            .name(\"Eleanor Gibson\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"379f3fb2-7e21-4f86-a657-b36fc6b9f587\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceMailjetsms:\n    type: airbyte:SourceMailjetSms\n    properties:\n      configuration:\n        end_date: 1.666281656e+09\n        source_type: mailjet-sms\n        start_date: 1.666261656e+09\n        token: '...my_token...'\n      name: Eleanor Gibson\n      secretId: '...my_secret_id...'\n      workspaceId: 379f3fb2-7e21-4f86-a657-b36fc6b9f587\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceMailjetSmsConfiguration:SourceMailjetSmsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceMailjetSmsConfiguration:SourceMailjetSmsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceMailjetSms resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceMailjetSmsConfiguration:SourceMailjetSmsConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceMarketo:SourceMarketo": {
            "description": "SourceMarketo Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceMarketo;\nimport com.pulumi.airbyte.SourceMarketoArgs;\nimport com.pulumi.airbyte.inputs.SourceMarketoConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceMarketo = new SourceMarketo(\"mySourceMarketo\", SourceMarketoArgs.builder()        \n            .configuration(SourceMarketoConfigurationArgs.builder()\n                .client_id(\"...my_client_id...\")\n                .client_secret(\"...my_client_secret...\")\n                .domain_url(\"https://000-AAA-000.mktorest.com\")\n                .source_type(\"marketo\")\n                .start_date(\"2020-09-25T00:00:00Z\")\n                .build())\n            .name(\"Sara Hegmann\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"7641a831-2e50-447b-8c21-ccb423abcdc9\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceMarketo:\n    type: airbyte:SourceMarketo\n    properties:\n      configuration:\n        client_id: '...my_client_id...'\n        client_secret: '...my_client_secret...'\n        domain_url: https://000-AAA-000.mktorest.com\n        source_type: marketo\n        start_date: 2020-09-25T00:00:00Z\n      name: Sara Hegmann\n      secretId: '...my_secret_id...'\n      workspaceId: 7641a831-2e50-447b-8c21-ccb423abcdc9\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceMarketoConfiguration:SourceMarketoConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceMarketoConfiguration:SourceMarketoConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceMarketo resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceMarketoConfiguration:SourceMarketoConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceMetabase:SourceMetabase": {
            "description": "SourceMetabase Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceMetabase;\nimport com.pulumi.airbyte.SourceMetabaseArgs;\nimport com.pulumi.airbyte.inputs.SourceMetabaseConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceMetabase = new SourceMetabase(\"mySourceMetabase\", SourceMetabaseArgs.builder()        \n            .configuration(SourceMetabaseConfigurationArgs.builder()\n                .instance_api_url(\"https://localhost:3000/api/\")\n                .password(\"...my_password...\")\n                .session_token(\"...my_session_token...\")\n                .source_type(\"metabase\")\n                .username(\"Audrey_Weimann71\")\n                .build())\n            .name(\"Jody Lebsack\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"71f6c482-52d7-4771-a7fd-074009ef8d29\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceMetabase:\n    type: airbyte:SourceMetabase\n    properties:\n      configuration:\n        instance_api_url: https://localhost:3000/api/\n        password: '...my_password...'\n        session_token: '...my_session_token...'\n        source_type: metabase\n        username: Audrey_Weimann71\n      name: Jody Lebsack\n      secretId: '...my_secret_id...'\n      workspaceId: 71f6c482-52d7-4771-a7fd-074009ef8d29\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceMetabaseConfiguration:SourceMetabaseConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceMetabaseConfiguration:SourceMetabaseConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceMetabase resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceMetabaseConfiguration:SourceMetabaseConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceMicrosoftTeams:SourceMicrosoftTeams": {
            "description": "SourceMicrosoftTeams Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceMicrosoftTeams;\nimport com.pulumi.airbyte.SourceMicrosoftTeamsArgs;\nimport com.pulumi.airbyte.inputs.SourceMicrosoftTeamsConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceMicrosoftTeamsConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceMicrosoftteams = new SourceMicrosoftTeams(\"mySourceMicrosoftteams\", SourceMicrosoftTeamsArgs.builder()        \n            .configuration(SourceMicrosoftTeamsConfigurationArgs.builder()\n                .credentials(SourceMicrosoftTeamsConfigurationCredentialsArgs.builder()\n                    .sourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft(SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftArgs.builder()\n                        .authType(\"Token\")\n                        .clientId(\"...my_client_id...\")\n                        .clientSecret(\"...my_client_secret...\")\n                        .tenantId(\"...my_tenant_id...\")\n                        .build())\n                    .build())\n                .period(\"D7\")\n                .source_type(\"microsoft-teams\")\n                .build())\n            .name(\"Noah Bernier\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"7097b5da-08c5-47fa-ac78-a216e19bafec\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceMicrosoftteams:\n    type: airbyte:SourceMicrosoftTeams\n    properties:\n      configuration:\n        credentials:\n          sourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft:\n            authType: Token\n            clientId: '...my_client_id...'\n            clientSecret: '...my_client_secret...'\n            tenantId: '...my_tenant_id...'\n        period: D7\n        source_type: microsoft-teams\n      name: Noah Bernier\n      secretId: '...my_secret_id...'\n      workspaceId: 7097b5da-08c5-47fa-ac78-a216e19bafec\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceMicrosoftTeamsConfiguration:SourceMicrosoftTeamsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceMicrosoftTeamsConfiguration:SourceMicrosoftTeamsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceMicrosoftTeams resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceMicrosoftTeamsConfiguration:SourceMicrosoftTeamsConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceMixpanel:SourceMixpanel": {
            "description": "SourceMixpanel Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceMixpanel;\nimport com.pulumi.airbyte.SourceMixpanelArgs;\nimport com.pulumi.airbyte.inputs.SourceMixpanelConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceMixpanelConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceMixpanel = new SourceMixpanel(\"mySourceMixpanel\", SourceMixpanelArgs.builder()        \n            .configuration(SourceMixpanelConfigurationArgs.builder()\n                .attribution_window(7)\n                .credentials(SourceMixpanelConfigurationCredentialsArgs.builder()\n                    .sourceMixpanelAuthenticationWildcardProjectSecret(SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecretArgs.builder()\n                        .apiSecret(\"...my_api_secret...\")\n                        .optionTitle(\"Project Secret\")\n                        .build())\n                    .build())\n                .date_window_size(4)\n                .end_date(\"2021-11-16\")\n                .project_id(0)\n                .project_timezone(\"US/Pacific\")\n                .region(\"EU\")\n                .select_properties_by_default(true)\n                .source_type(\"mixpanel\")\n                .start_date(\"2021-11-16\")\n                .build())\n            .name(\"Karla Hoppe\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"f8ae170e-f03b-45f3-be4a-a86855596673\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceMixpanel:\n    type: airbyte:SourceMixpanel\n    properties:\n      configuration:\n        attribution_window: 7\n        credentials:\n          sourceMixpanelAuthenticationWildcardProjectSecret:\n            apiSecret: '...my_api_secret...'\n            optionTitle: Project Secret\n        date_window_size: 4\n        end_date: 2021-11-16\n        project_id: 0\n        project_timezone: US/Pacific\n        region: EU\n        select_properties_by_default: true\n        source_type: mixpanel\n        start_date: 2021-11-16\n      name: Karla Hoppe\n      secretId: '...my_secret_id...'\n      workspaceId: f8ae170e-f03b-45f3-be4a-a86855596673\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceMixpanelConfiguration:SourceMixpanelConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceMixpanelConfiguration:SourceMixpanelConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceMixpanel resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceMixpanelConfiguration:SourceMixpanelConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceMonday:SourceMonday": {
            "description": "SourceMonday Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceMonday;\nimport com.pulumi.airbyte.SourceMondayArgs;\nimport com.pulumi.airbyte.inputs.SourceMondayConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceMondayConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodApiTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceMonday = new SourceMonday(\"mySourceMonday\", SourceMondayArgs.builder()        \n            .configuration(SourceMondayConfigurationArgs.builder()\n                .credentials(SourceMondayConfigurationCredentialsArgs.builder()\n                    .sourceMondayAuthorizationMethodApiToken(SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodApiTokenArgs.builder()\n                        .apiToken(\"...my_api_token...\")\n                        .authType(\"api_token\")\n                        .build())\n                    .build())\n                .source_type(\"monday\")\n                .build())\n            .name(\"Lynda Padberg\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"cb6682cb-70f8-4cfd-9fb6-e91b9a9f7484\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceMonday:\n    type: airbyte:SourceMonday\n    properties:\n      configuration:\n        credentials:\n          sourceMondayAuthorizationMethodApiToken:\n            apiToken: '...my_api_token...'\n            authType: api_token\n        source_type: monday\n      name: Lynda Padberg\n      secretId: '...my_secret_id...'\n      workspaceId: cb6682cb-70f8-4cfd-9fb6-e91b9a9f7484\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceMondayConfiguration:SourceMondayConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceMondayConfiguration:SourceMondayConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceMonday resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceMondayConfiguration:SourceMondayConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceMongodb:SourceMongodb": {
            "description": "SourceMongodb Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceMongodb;\nimport com.pulumi.airbyte.SourceMongodbArgs;\nimport com.pulumi.airbyte.inputs.SourceMongodbConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceMongodb = new SourceMongodb(\"mySourceMongodb\", SourceMongodbArgs.builder()        \n            .configuration(SourceMongodbConfigurationArgs.builder()\n                .auth_source(\"admin\")\n                .database(\"...my_database...\")\n                .instance_type(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .password(\"...my_password...\")\n                .source_type(\"mongodb\")\n                .user(\"...my_user...\")\n                .build())\n            .name(\"Elvira Collins\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"309db053-6d9e-475c-a006-f5392c11a25a\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceMongodb:\n    type: airbyte:SourceMongodb\n    properties:\n      configuration:\n        auth_source: admin\n        database: '...my_database...'\n        instance_type:\n          sourceMongodbMongoDbInstanceTypeMongoDbAtlas:\n            clusterUrl: '...my_cluster_url...'\n            instance: atlas\n        password: '...my_password...'\n        source_type: mongodb\n        user: '...my_user...'\n      name: Elvira Collins\n      secretId: '...my_secret_id...'\n      workspaceId: 309db053-6d9e-475c-a006-f5392c11a25a\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceMongodbConfiguration:SourceMongodbConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceMongodbConfiguration:SourceMongodbConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceMongodb resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceMongodbConfiguration:SourceMongodbConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceMongodbInternalPoc:SourceMongodbInternalPoc": {
            "description": "SourceMongodbInternalPoc Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceMongodbInternalPoc;\nimport com.pulumi.airbyte.SourceMongodbInternalPocArgs;\nimport com.pulumi.airbyte.inputs.SourceMongodbInternalPocConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceMongodbinternalpoc = new SourceMongodbInternalPoc(\"mySourceMongodbinternalpoc\", SourceMongodbInternalPocArgs.builder()        \n            .configuration(SourceMongodbInternalPocConfigurationArgs.builder()\n                .auth_source(\"admin\")\n                .connection_string(\"mongodb://example1.host.com:27017,example2.host.com:27017,example3.host.com:27017\")\n                .password(\"...my_password...\")\n                .replica_set(\"...my_replica_set...\")\n                .source_type(\"mongodb-internal-poc\")\n                .user(\"...my_user...\")\n                .build())\n            .name(\"Dr. Cary McKenzie\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"7428ad9a-9f8b-4f82-a112-5359d98387f7\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceMongodbinternalpoc:\n    type: airbyte:SourceMongodbInternalPoc\n    properties:\n      configuration:\n        auth_source: admin\n        connection_string: mongodb://example1.host.com:27017,example2.host.com:27017,example3.host.com:27017\n        password: '...my_password...'\n        replica_set: '...my_replica_set...'\n        source_type: mongodb-internal-poc\n        user: '...my_user...'\n      name: Dr. Cary McKenzie\n      secretId: '...my_secret_id...'\n      workspaceId: 7428ad9a-9f8b-4f82-a112-5359d98387f7\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceMongodbInternalPocConfiguration:SourceMongodbInternalPocConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceMongodbInternalPocConfiguration:SourceMongodbInternalPocConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceMongodbInternalPoc resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceMongodbInternalPocConfiguration:SourceMongodbInternalPocConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceMssql:SourceMssql": {
            "description": "SourceMssql Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceMssql;\nimport com.pulumi.airbyte.SourceMssqlArgs;\nimport com.pulumi.airbyte.inputs.SourceMssqlConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceMssql = new SourceMssql(\"mySourceMssql\", SourceMssqlArgs.builder()        \n            .configuration(SourceMssqlConfigurationArgs.builder()\n                .database(\"master\")\n                .host(\"...my_host...\")\n                .jdbc_url_params(\"...my_jdbc_url_params...\")\n                .password(\"...my_password...\")\n                .port(1433)\n                .replication_method(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .schemas(\"...\")\n                .source_type(\"mssql\")\n                .ssl_method(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .tunnel_method(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .username(\"Rhianna75\")\n                .build())\n            .name(\"Victor Gleason\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"da21729f-2ac4-41ef-9725-f1169ac1e41d\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceMssql:\n    type: airbyte:SourceMssql\n    properties:\n      configuration:\n        database: master\n        host: '...my_host...'\n        jdbc_url_params: '...my_jdbc_url_params...'\n        password: '...my_password...'\n        port: 1433\n        replication_method:\n          sourceMssqlReplicationMethodLogicalReplicationCdc_:\n            - dataToSync: Existing and New\n              initialWaitingSeconds: 6\n              method: CDC\n              snapshotIsolation: Read Committed\n        schemas:\n          - '...'\n        source_type: mssql\n        ssl_method:\n          sourceMssqlSslMethodEncryptedTrustServerCertificate_:\n            - sslMethod: encrypted_trust_server_certificate\n        tunnel_method:\n          sourceMssqlSshTunnelMethodNoTunnel:\n            tunnelMethod: NO_TUNNEL\n        username: Rhianna75\n      name: Victor Gleason\n      secretId: '...my_secret_id...'\n      workspaceId: da21729f-2ac4-41ef-9725-f1169ac1e41d\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceMssqlConfiguration:SourceMssqlConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceMssqlConfiguration:SourceMssqlConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceMssql resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceMssqlConfiguration:SourceMssqlConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceMyHours:SourceMyHours": {
            "description": "SourceMyHours Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceMyHours;\nimport com.pulumi.airbyte.SourceMyHoursArgs;\nimport com.pulumi.airbyte.inputs.SourceMyHoursConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceMyhours = new SourceMyHours(\"mySourceMyhours\", SourceMyHoursArgs.builder()        \n            .configuration(SourceMyHoursConfigurationArgs.builder()\n                .email(\"john@doe.com\")\n                .logs_batch_size(30)\n                .password(\"...my_password...\")\n                .source_type(\"my-hours\")\n                .start_date(\"%Y-%m-%d\")\n                .build())\n            .name(\"Allen Grant\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"dfa4a197-f6de-4922-951f-e1712099853e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceMyhours:\n    type: airbyte:SourceMyHours\n    properties:\n      configuration:\n        email: john@doe.com\n        logs_batch_size: 30\n        password: '...my_password...'\n        source_type: my-hours\n        start_date: '%Y-%m-%d'\n      name: Allen Grant\n      secretId: '...my_secret_id...'\n      workspaceId: dfa4a197-f6de-4922-951f-e1712099853e\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceMyHoursConfiguration:SourceMyHoursConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceMyHoursConfiguration:SourceMyHoursConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceMyHours resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceMyHoursConfiguration:SourceMyHoursConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceMysql:SourceMysql": {
            "description": "SourceMysql Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceMysql;\nimport com.pulumi.airbyte.SourceMysqlArgs;\nimport com.pulumi.airbyte.inputs.SourceMysqlConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceMysql = new SourceMysql(\"mySourceMysql\", SourceMysqlArgs.builder()        \n            .configuration(SourceMysqlConfigurationArgs.builder()\n                .database(\"...my_database...\")\n                .host(\"...my_host...\")\n                .jdbc_url_params(\"...my_jdbc_url_params...\")\n                .password(\"...my_password...\")\n                .port(3306)\n                .replication_method(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .source_type(\"mysql\")\n                .ssl_mode(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .tunnel_method(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .username(\"Eusebio86\")\n                .build())\n            .name(\"Herman Greenfelder\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"9ee22446-0443-4bc1-9418-8c2f56e85da7\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceMysql:\n    type: airbyte:SourceMysql\n    properties:\n      configuration:\n        database: '...my_database...'\n        host: '...my_host...'\n        jdbc_url_params: '...my_jdbc_url_params...'\n        password: '...my_password...'\n        port: 3306\n        replication_method:\n          sourceMysqlUpdateMethodReadChangesUsingBinaryLogCdc_:\n            - initialWaitingSeconds: 10\n              method: CDC\n              serverTimeZone: '...my_server_time_zone...'\n        source_type: mysql\n        ssl_mode:\n          sourceMysqlSslModesPreferred:\n            mode: preferred\n        tunnel_method:\n          sourceMysqlSshTunnelMethodNoTunnel:\n            tunnelMethod: NO_TUNNEL\n        username: Eusebio86\n      name: Herman Greenfelder\n      secretId: '...my_secret_id...'\n      workspaceId: 9ee22446-0443-4bc1-9418-8c2f56e85da7\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceMysqlConfiguration:SourceMysqlConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceMysqlConfiguration:SourceMysqlConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceMysql resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceMysqlConfiguration:SourceMysqlConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceNetsuite:SourceNetsuite": {
            "description": "SourceNetsuite Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceNetsuite;\nimport com.pulumi.airbyte.SourceNetsuiteArgs;\nimport com.pulumi.airbyte.inputs.SourceNetsuiteConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceNetsuite = new SourceNetsuite(\"mySourceNetsuite\", SourceNetsuiteArgs.builder()        \n            .configuration(SourceNetsuiteConfigurationArgs.builder()\n                .consumer_key(\"...my_consumer_key...\")\n                .consumer_secret(\"...my_consumer_secret...\")\n                .object_types(\"...\")\n                .realm(\"...my_realm...\")\n                .source_type(\"netsuite\")\n                .start_datetime(\"2017-01-25T00:00:00Z\")\n                .token_key(\"...my_token_key...\")\n                .token_secret(\"...my_token_secret...\")\n                .window_in_days(5)\n                .build())\n            .name(\"Judy Towne\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"d617c3b0-d51a-444b-b01b-ad8706d46082\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceNetsuite:\n    type: airbyte:SourceNetsuite\n    properties:\n      configuration:\n        consumer_key: '...my_consumer_key...'\n        consumer_secret: '...my_consumer_secret...'\n        object_types:\n          - '...'\n        realm: '...my_realm...'\n        source_type: netsuite\n        start_datetime: 2017-01-25T00:00:00Z\n        token_key: '...my_token_key...'\n        token_secret: '...my_token_secret...'\n        window_in_days: 5\n      name: Judy Towne\n      secretId: '...my_secret_id...'\n      workspaceId: d617c3b0-d51a-444b-b01b-ad8706d46082\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceNetsuiteConfiguration:SourceNetsuiteConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceNetsuiteConfiguration:SourceNetsuiteConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceNetsuite resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceNetsuiteConfiguration:SourceNetsuiteConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceNotion:SourceNotion": {
            "description": "SourceNotion Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceNotion;\nimport com.pulumi.airbyte.SourceNotionArgs;\nimport com.pulumi.airbyte.inputs.SourceNotionConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceNotionConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingAccessTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceNotion = new SourceNotion(\"mySourceNotion\", SourceNotionArgs.builder()        \n            .configuration(SourceNotionConfigurationArgs.builder()\n                .credentials(SourceNotionConfigurationCredentialsArgs.builder()\n                    .sourceNotionAuthenticateUsingAccessToken(SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingAccessTokenArgs.builder()\n                        .authType(\"token\")\n                        .token(\"...my_token...\")\n                        .build())\n                    .build())\n                .source_type(\"notion\")\n                .start_date(\"2020-11-16T00:00:00.000Z\")\n                .build())\n            .name(\"Dewey Schmeler DVM\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"f5d4e2ae-4fb5-4cb3-9d17-638f1edb7835\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceNotion:\n    type: airbyte:SourceNotion\n    properties:\n      configuration:\n        credentials:\n          sourceNotionAuthenticateUsingAccessToken:\n            authType: token\n            token: '...my_token...'\n        source_type: notion\n        start_date: 2020-11-16T00:00:00.000Z\n      name: Dewey Schmeler DVM\n      secretId: '...my_secret_id...'\n      workspaceId: f5d4e2ae-4fb5-4cb3-9d17-638f1edb7835\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceNotionConfiguration:SourceNotionConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceNotionConfiguration:SourceNotionConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceNotion resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceNotionConfiguration:SourceNotionConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceNytimes:SourceNytimes": {
            "description": "SourceNytimes Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceNytimes;\nimport com.pulumi.airbyte.SourceNytimesArgs;\nimport com.pulumi.airbyte.inputs.SourceNytimesConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceNytimes = new SourceNytimes(\"mySourceNytimes\", SourceNytimesArgs.builder()        \n            .configuration(SourceNytimesConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .end_date(\"1851-01\")\n                .period(\"30\")\n                .share_type(\"facebook\")\n                .source_type(\"nytimes\")\n                .start_date(\"2022-08\")\n                .build())\n            .name(\"Cecil Bauch\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"cd580ba7-3810-4e4f-a444-7297cd3b1dd3\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceNytimes:\n    type: airbyte:SourceNytimes\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        end_date: 1851-01\n        period: '30'\n        share_type: facebook\n        source_type: nytimes\n        start_date: 2022-08\n      name: Cecil Bauch\n      secretId: '...my_secret_id...'\n      workspaceId: cd580ba7-3810-4e4f-a444-7297cd3b1dd3\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceNytimesConfiguration:SourceNytimesConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceNytimesConfiguration:SourceNytimesConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceNytimes resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceNytimesConfiguration:SourceNytimesConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceOkta:SourceOkta": {
            "description": "SourceOkta Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceOkta;\nimport com.pulumi.airbyte.SourceOktaArgs;\nimport com.pulumi.airbyte.inputs.SourceOktaConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceOktaConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodApiTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceOkta = new SourceOkta(\"mySourceOkta\", SourceOktaArgs.builder()        \n            .configuration(SourceOktaConfigurationArgs.builder()\n                .credentials(SourceOktaConfigurationCredentialsArgs.builder()\n                    .sourceOktaAuthorizationMethodApiToken(SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodApiTokenArgs.builder()\n                        .apiToken(\"...my_api_token...\")\n                        .authType(\"api_token\")\n                        .build())\n                    .build())\n                .domain(\"...my_domain...\")\n                .source_type(\"okta\")\n                .start_date(\"2022-07-22T00:00:00Z\")\n                .build())\n            .name(\"Randolph Russel\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"47b7684e-ff50-4126-971c-ffbd0eb74b84\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceOkta:\n    type: airbyte:SourceOkta\n    properties:\n      configuration:\n        credentials:\n          sourceOktaAuthorizationMethodApiToken:\n            apiToken: '...my_api_token...'\n            authType: api_token\n        domain: '...my_domain...'\n        source_type: okta\n        start_date: 2022-07-22T00:00:00Z\n      name: Randolph Russel\n      secretId: '...my_secret_id...'\n      workspaceId: 47b7684e-ff50-4126-971c-ffbd0eb74b84\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceOktaConfiguration:SourceOktaConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceOktaConfiguration:SourceOktaConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceOkta resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceOktaConfiguration:SourceOktaConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceOmnisend:SourceOmnisend": {
            "description": "SourceOmnisend Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceOmnisend;\nimport com.pulumi.airbyte.SourceOmnisendArgs;\nimport com.pulumi.airbyte.inputs.SourceOmnisendConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceOmnisend = new SourceOmnisend(\"mySourceOmnisend\", SourceOmnisendArgs.builder()        \n            .configuration(SourceOmnisendConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .source_type(\"omnisend\")\n                .build())\n            .name(\"Virginia Mitchell\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"b44bd3c4-3159-4d33-a595-3c001139863a\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceOmnisend:\n    type: airbyte:SourceOmnisend\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        source_type: omnisend\n      name: Virginia Mitchell\n      secretId: '...my_secret_id...'\n      workspaceId: b44bd3c4-3159-4d33-a595-3c001139863a\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceOmnisendConfiguration:SourceOmnisendConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceOmnisendConfiguration:SourceOmnisendConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceOmnisend resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceOmnisendConfiguration:SourceOmnisendConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceOnesignal:SourceOnesignal": {
            "description": "SourceOnesignal Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceOnesignal;\nimport com.pulumi.airbyte.SourceOnesignalArgs;\nimport com.pulumi.airbyte.inputs.SourceOnesignalConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceOnesignal = new SourceOnesignal(\"mySourceOnesignal\", SourceOnesignalArgs.builder()        \n            .configuration(SourceOnesignalConfigurationArgs.builder()\n                .applications(SourceOnesignalConfigurationApplicationArgs.builder()\n                    .appApiKey(\"...my_app_api_key...\")\n                    .appId(\"...my_app_id...\")\n                    .appName(\"...my_app_name...\")\n                    .build())\n                .outcome_names(\"os__session_duration.count,os__click.count,CustomOutcomeName.sum\")\n                .source_type(\"onesignal\")\n                .start_date(\"2020-11-16T00:00:00Z\")\n                .user_auth_key(\"...my_user_auth_key...\")\n                .build())\n            .name(\"Laverne Jacobs\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"1cc2f1fc-b51c-49a4-9ffb-e9cbd795ee65\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceOnesignal:\n    type: airbyte:SourceOnesignal\n    properties:\n      configuration:\n        applications:\n          - appApiKey: '...my_app_api_key...'\n            appId: '...my_app_id...'\n            appName: '...my_app_name...'\n        outcome_names: os__session_duration.count,os__click.count,CustomOutcomeName.sum\n        source_type: onesignal\n        start_date: 2020-11-16T00:00:00Z\n        user_auth_key: '...my_user_auth_key...'\n      name: Laverne Jacobs\n      secretId: '...my_secret_id...'\n      workspaceId: 1cc2f1fc-b51c-49a4-9ffb-e9cbd795ee65\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceOnesignalConfiguration:SourceOnesignalConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceOnesignalConfiguration:SourceOnesignalConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceOnesignal resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceOnesignalConfiguration:SourceOnesignalConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceOpenweather:SourceOpenweather": {
            "description": "SourceOpenweather Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceOpenweather;\nimport com.pulumi.airbyte.SourceOpenweatherArgs;\nimport com.pulumi.airbyte.inputs.SourceOpenweatherConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceOpenweather = new SourceOpenweather(\"mySourceOpenweather\", SourceOpenweatherArgs.builder()        \n            .configuration(SourceOpenweatherConfigurationArgs.builder()\n                .appid(\"...my_appid...\")\n                .lang(\"zh_tw\")\n                .lat(\"45.7603\")\n                .lon(\"4.835659\")\n                .source_type(\"openweather\")\n                .units(\"metric\")\n                .build())\n            .name(\"Sylvester Krajcik\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"f616ea5c-7164-4193-8b90-f2e09d19d2fc\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceOpenweather:\n    type: airbyte:SourceOpenweather\n    properties:\n      configuration:\n        appid: '...my_appid...'\n        lang: zh_tw\n        lat: '45.7603'\n        lon: '4.835659'\n        source_type: openweather\n        units: metric\n      name: Sylvester Krajcik\n      secretId: '...my_secret_id...'\n      workspaceId: f616ea5c-7164-4193-8b90-f2e09d19d2fc\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceOpenweatherConfiguration:SourceOpenweatherConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceOpenweatherConfiguration:SourceOpenweatherConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceOpenweather resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceOpenweatherConfiguration:SourceOpenweatherConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceOracle:SourceOracle": {
            "description": "SourceOracle Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceOracle;\nimport com.pulumi.airbyte.SourceOracleArgs;\nimport com.pulumi.airbyte.inputs.SourceOracleConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceOracleConfigurationEncryptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceOracle = new SourceOracle(\"mySourceOracle\", SourceOracleArgs.builder()        \n            .configuration(SourceOracleConfigurationArgs.builder()\n                .connection_data(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .encryption(SourceOracleConfigurationEncryptionArgs.builder()\n                    .sourceOracleEncryptionNativeNetworkEncryptionNne_(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .build())\n                .host(\"...my_host...\")\n                .jdbc_url_params(\"...my_jdbc_url_params...\")\n                .password(\"...my_password...\")\n                .port(10)\n                .schemas(\"...\")\n                .source_type(\"oracle\")\n                .tunnel_method(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .username(\"Lila92\")\n                .build())\n            .name(\"Barbara Hilll\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"4b935d23-7a72-4f90-849d-6aed4aecb753\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceOracle:\n    type: airbyte:SourceOracle\n    properties:\n      configuration:\n        connection_data:\n          sourceOracleConnectByServiceName:\n            connectionType: service_name\n            serviceName: '...my_service_name...'\n        encryption:\n          sourceOracleEncryptionNativeNetworkEncryptionNne_:\n            - encryptionAlgorithm: AES256\n              encryptionMethod: client_nne\n        host: '...my_host...'\n        jdbc_url_params: '...my_jdbc_url_params...'\n        password: '...my_password...'\n        port: 10\n        schemas:\n          - '...'\n        source_type: oracle\n        tunnel_method:\n          sourceOracleSshTunnelMethodNoTunnel:\n            tunnelMethod: NO_TUNNEL\n        username: Lila92\n      name: Barbara Hilll\n      secretId: '...my_secret_id...'\n      workspaceId: 4b935d23-7a72-4f90-849d-6aed4aecb753\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceOracleConfiguration:SourceOracleConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceOracleConfiguration:SourceOracleConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceOracle resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceOracleConfiguration:SourceOracleConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceOrb:SourceOrb": {
            "description": "SourceOrb Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceOrb;\nimport com.pulumi.airbyte.SourceOrbArgs;\nimport com.pulumi.airbyte.inputs.SourceOrbConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceOrb = new SourceOrb(\"mySourceOrb\", SourceOrbArgs.builder()        \n            .configuration(SourceOrbConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .lookback_window_days(5)\n                .numeric_event_properties_keys(\"...\")\n                .plan_id(\"...my_plan_id...\")\n                .source_type(\"orb\")\n                .start_date(\"2022-03-01T00:00:00Z\")\n                .string_event_properties_keys(\"...\")\n                .subscription_usage_grouping_key(\"...my_subscription_usage_grouping_key...\")\n                .build())\n            .name(\"Josh Mante\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"2c9ff574-91aa-4bfa-ae76-1f0ca4d456ef\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceOrb:\n    type: airbyte:SourceOrb\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        lookback_window_days: 5\n        numeric_event_properties_keys:\n          - '...'\n        plan_id: '...my_plan_id...'\n        source_type: orb\n        start_date: 2022-03-01T00:00:00Z\n        string_event_properties_keys:\n          - '...'\n        subscription_usage_grouping_key: '...my_subscription_usage_grouping_key...'\n      name: Josh Mante\n      secretId: '...my_secret_id...'\n      workspaceId: 2c9ff574-91aa-4bfa-ae76-1f0ca4d456ef\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceOrbConfiguration:SourceOrbConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceOrbConfiguration:SourceOrbConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceOrb resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceOrbConfiguration:SourceOrbConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceOrbit:SourceOrbit": {
            "description": "SourceOrbit Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceOrbit;\nimport com.pulumi.airbyte.SourceOrbitArgs;\nimport com.pulumi.airbyte.inputs.SourceOrbitConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceOrbit = new SourceOrbit(\"mySourceOrbit\", SourceOrbitArgs.builder()        \n            .configuration(SourceOrbitConfigurationArgs.builder()\n                .api_token(\"...my_api_token...\")\n                .source_type(\"orbit\")\n                .start_date(\"...my_start_date...\")\n                .workspace(\"...my_workspace...\")\n                .build())\n            .name(\"Dr. Nancy Ferry\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"899f0c20-01e2-42cd-95cc-0584a184d76d\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceOrbit:\n    type: airbyte:SourceOrbit\n    properties:\n      configuration:\n        api_token: '...my_api_token...'\n        source_type: orbit\n        start_date: '...my_start_date...'\n        workspace: '...my_workspace...'\n      name: Dr. Nancy Ferry\n      secretId: '...my_secret_id...'\n      workspaceId: 899f0c20-01e2-42cd-95cc-0584a184d76d\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceOrbitConfiguration:SourceOrbitConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceOrbitConfiguration:SourceOrbitConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceOrbit resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceOrbitConfiguration:SourceOrbitConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceOutbrainAmplify:SourceOutbrainAmplify": {
            "description": "SourceOutbrainAmplify Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceOutbrainAmplify;\nimport com.pulumi.airbyte.SourceOutbrainAmplifyArgs;\nimport com.pulumi.airbyte.inputs.SourceOutbrainAmplifyConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceOutbrainAmplifyConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodAccessTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceOutbrainamplify = new SourceOutbrainAmplify(\"mySourceOutbrainamplify\", SourceOutbrainAmplifyArgs.builder()        \n            .configuration(SourceOutbrainAmplifyConfigurationArgs.builder()\n                .credentials(SourceOutbrainAmplifyConfigurationCredentialsArgs.builder()\n                    .sourceOutbrainAmplifyAuthenticationMethodAccessToken(SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodAccessTokenArgs.builder()\n                        .accessToken(\"...my_access_token...\")\n                        .type(\"access_token\")\n                        .build())\n                    .build())\n                .end_date(\"...my_end_date...\")\n                .geo_location_breakdown(\"region\")\n                .report_granularity(\"weekly\")\n                .source_type(\"outbrain-amplify\")\n                .start_date(\"...my_start_date...\")\n                .build())\n            .name(\"Johanna Runolfsson Jr.\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"c65b037b-b8e0-4cc8-8518-7e4de04af28c\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceOutbrainamplify:\n    type: airbyte:SourceOutbrainAmplify\n    properties:\n      configuration:\n        credentials:\n          sourceOutbrainAmplifyAuthenticationMethodAccessToken:\n            accessToken: '...my_access_token...'\n            type: access_token\n        end_date: '...my_end_date...'\n        geo_location_breakdown: region\n        report_granularity: weekly\n        source_type: outbrain-amplify\n        start_date: '...my_start_date...'\n      name: Johanna Runolfsson Jr.\n      secretId: '...my_secret_id...'\n      workspaceId: c65b037b-b8e0-4cc8-8518-7e4de04af28c\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceOutbrainAmplifyConfiguration:SourceOutbrainAmplifyConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceOutbrainAmplifyConfiguration:SourceOutbrainAmplifyConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceOutbrainAmplify resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceOutbrainAmplifyConfiguration:SourceOutbrainAmplifyConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceOutreach:SourceOutreach": {
            "description": "SourceOutreach Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceOutreach;\nimport com.pulumi.airbyte.SourceOutreachArgs;\nimport com.pulumi.airbyte.inputs.SourceOutreachConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceOutreach = new SourceOutreach(\"mySourceOutreach\", SourceOutreachArgs.builder()        \n            .configuration(SourceOutreachConfigurationArgs.builder()\n                .client_id(\"...my_client_id...\")\n                .client_secret(\"...my_client_secret...\")\n                .redirect_uri(\"...my_redirect_uri...\")\n                .refresh_token(\"...my_refresh_token...\")\n                .source_type(\"outreach\")\n                .start_date(\"2020-11-16T00:00:00Z\")\n                .build())\n            .name(\"Rosemarie Schulist\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"46aa1cfd-6d82-48da-8131-91129646645c\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceOutreach:\n    type: airbyte:SourceOutreach\n    properties:\n      configuration:\n        client_id: '...my_client_id...'\n        client_secret: '...my_client_secret...'\n        redirect_uri: '...my_redirect_uri...'\n        refresh_token: '...my_refresh_token...'\n        source_type: outreach\n        start_date: 2020-11-16T00:00:00Z\n      name: Rosemarie Schulist\n      secretId: '...my_secret_id...'\n      workspaceId: 46aa1cfd-6d82-48da-8131-91129646645c\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceOutreachConfiguration:SourceOutreachConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceOutreachConfiguration:SourceOutreachConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceOutreach resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceOutreachConfiguration:SourceOutreachConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourcePaypalTransaction:SourcePaypalTransaction": {
            "description": "SourcePaypalTransaction Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourcePaypalTransaction;\nimport com.pulumi.airbyte.SourcePaypalTransactionArgs;\nimport com.pulumi.airbyte.inputs.SourcePaypalTransactionConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourcePaypaltransaction = new SourcePaypalTransaction(\"mySourcePaypaltransaction\", SourcePaypalTransactionArgs.builder()        \n            .configuration(SourcePaypalTransactionConfigurationArgs.builder()\n                .client_id(\"...my_client_id...\")\n                .client_secret(\"...my_client_secret...\")\n                .is_sandbox(false)\n                .refresh_token(\"...my_refresh_token...\")\n                .source_type(\"paypal-transaction\")\n                .start_date(\"2021-06-11T23:59:59+00:00\")\n                .build())\n            .name(\"Mrs. Roy Moore\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"f569b7af-f0ea-4221-acbe-071bc163e279\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourcePaypaltransaction:\n    type: airbyte:SourcePaypalTransaction\n    properties:\n      configuration:\n        client_id: '...my_client_id...'\n        client_secret: '...my_client_secret...'\n        is_sandbox: false\n        refresh_token: '...my_refresh_token...'\n        source_type: paypal-transaction\n        start_date: 2021-06-11T23:59:59+00:00\n      name: Mrs. Roy Moore\n      secretId: '...my_secret_id...'\n      workspaceId: f569b7af-f0ea-4221-acbe-071bc163e279\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePaypalTransactionConfiguration:SourcePaypalTransactionConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePaypalTransactionConfiguration:SourcePaypalTransactionConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourcePaypalTransaction resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourcePaypalTransactionConfiguration:SourcePaypalTransactionConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourcePaystack:SourcePaystack": {
            "description": "SourcePaystack Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourcePaystack;\nimport com.pulumi.airbyte.SourcePaystackArgs;\nimport com.pulumi.airbyte.inputs.SourcePaystackConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourcePaystack = new SourcePaystack(\"mySourcePaystack\", SourcePaystackArgs.builder()        \n            .configuration(SourcePaystackConfigurationArgs.builder()\n                .lookback_window_days(7)\n                .secret_key(\"...my_secret_key...\")\n                .source_type(\"paystack\")\n                .start_date(\"2017-01-25T00:00:00Z\")\n                .build())\n            .name(\"Mattie Gutkowski\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"99257d04-f408-447a-b42d-84496cbdeecf\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourcePaystack:\n    type: airbyte:SourcePaystack\n    properties:\n      configuration:\n        lookback_window_days: 7\n        secret_key: '...my_secret_key...'\n        source_type: paystack\n        start_date: 2017-01-25T00:00:00Z\n      name: Mattie Gutkowski\n      secretId: '...my_secret_id...'\n      workspaceId: 99257d04-f408-447a-b42d-84496cbdeecf\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePaystackConfiguration:SourcePaystackConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePaystackConfiguration:SourcePaystackConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourcePaystack resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourcePaystackConfiguration:SourcePaystackConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourcePendo:SourcePendo": {
            "description": "SourcePendo Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourcePendo;\nimport com.pulumi.airbyte.SourcePendoArgs;\nimport com.pulumi.airbyte.inputs.SourcePendoConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourcePendo = new SourcePendo(\"mySourcePendo\", SourcePendoArgs.builder()        \n            .configuration(SourcePendoConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .source_type(\"pendo\")\n                .build())\n            .name(\"Bridget Medhurst\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"c63562eb-fdf5-45c2-94c0-60b06a128776\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourcePendo:\n    type: airbyte:SourcePendo\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        source_type: pendo\n      name: Bridget Medhurst\n      secretId: '...my_secret_id...'\n      workspaceId: c63562eb-fdf5-45c2-94c0-60b06a128776\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePendoConfiguration:SourcePendoConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePendoConfiguration:SourcePendoConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourcePendo resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourcePendoConfiguration:SourcePendoConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourcePersistiq:SourcePersistiq": {
            "description": "SourcePersistiq Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourcePersistiq;\nimport com.pulumi.airbyte.SourcePersistiqArgs;\nimport com.pulumi.airbyte.inputs.SourcePersistiqConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourcePersistiq = new SourcePersistiq(\"mySourcePersistiq\", SourcePersistiqArgs.builder()        \n            .configuration(SourcePersistiqConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .source_type(\"persistiq\")\n                .build())\n            .name(\"Silvia Toy\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"d0c6d6ed-9c73-4dd6-b457-1509a8e870d3\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourcePersistiq:\n    type: airbyte:SourcePersistiq\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        source_type: persistiq\n      name: Silvia Toy\n      secretId: '...my_secret_id...'\n      workspaceId: d0c6d6ed-9c73-4dd6-b457-1509a8e870d3\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePersistiqConfiguration:SourcePersistiqConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePersistiqConfiguration:SourcePersistiqConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourcePersistiq resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourcePersistiqConfiguration:SourcePersistiqConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourcePexelsApi:SourcePexelsApi": {
            "description": "SourcePexelsAPI Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourcePexelsApi;\nimport com.pulumi.airbyte.SourcePexelsApiArgs;\nimport com.pulumi.airbyte.inputs.SourcePexelsApiConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourcePexelsapi = new SourcePexelsApi(\"mySourcePexelsapi\", SourcePexelsApiArgs.builder()        \n            .configuration(SourcePexelsApiConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .color(\"orange\")\n                .locale(\"en-US\")\n                .orientation(\"landscape\")\n                .query(\"people\")\n                .size(\"small\")\n                .source_type(\"pexels-api\")\n                .build())\n            .name(\"Wilbert Cummings\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"c7b66a1f-30c7-43df-9b67-19890f42a4bb\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourcePexelsapi:\n    type: airbyte:SourcePexelsApi\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        color: orange\n        locale: en-US\n        orientation: landscape\n        query: people\n        size: small\n        source_type: pexels-api\n      name: Wilbert Cummings\n      secretId: '...my_secret_id...'\n      workspaceId: c7b66a1f-30c7-43df-9b67-19890f42a4bb\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePexelsApiConfiguration:SourcePexelsApiConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePexelsApiConfiguration:SourcePexelsApiConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourcePexelsApi resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourcePexelsApiConfiguration:SourcePexelsApiConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourcePinterest:SourcePinterest": {
            "description": "SourcePinterest Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourcePinterest;\nimport com.pulumi.airbyte.SourcePinterestArgs;\nimport com.pulumi.airbyte.inputs.SourcePinterestConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourcePinterestConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodAccessTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourcePinterest = new SourcePinterest(\"mySourcePinterest\", SourcePinterestArgs.builder()        \n            .configuration(SourcePinterestConfigurationArgs.builder()\n                .credentials(SourcePinterestConfigurationCredentialsArgs.builder()\n                    .sourcePinterestAuthorizationMethodAccessToken(SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodAccessTokenArgs.builder()\n                        .accessToken(\"...my_access_token...\")\n                        .authMethod(\"access_token\")\n                        .build())\n                    .build())\n                .source_type(\"pinterest\")\n                .start_date(\"2022-07-28\")\n                .status(\"PAUSED\")\n                .build())\n            .name(\"Jordan Hegmann\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"60591d74-5e3c-4205-9c9c-3f567e0e2527\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourcePinterest:\n    type: airbyte:SourcePinterest\n    properties:\n      configuration:\n        credentials:\n          sourcePinterestAuthorizationMethodAccessToken:\n            accessToken: '...my_access_token...'\n            authMethod: access_token\n        source_type: pinterest\n        start_date: 2022-07-28\n        status:\n          - PAUSED\n      name: Jordan Hegmann\n      secretId: '...my_secret_id...'\n      workspaceId: 60591d74-5e3c-4205-9c9c-3f567e0e2527\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePinterestConfiguration:SourcePinterestConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePinterestConfiguration:SourcePinterestConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourcePinterest resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourcePinterestConfiguration:SourcePinterestConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourcePipedrive:SourcePipedrive": {
            "description": "SourcePipedrive Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourcePipedrive;\nimport com.pulumi.airbyte.SourcePipedriveArgs;\nimport com.pulumi.airbyte.inputs.SourcePipedriveConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourcePipedriveConfigurationAuthorizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourcePipedrive = new SourcePipedrive(\"mySourcePipedrive\", SourcePipedriveArgs.builder()        \n            .configuration(SourcePipedriveConfigurationArgs.builder()\n                .authorization(SourcePipedriveConfigurationAuthorizationArgs.builder()\n                    .apiToken(\"...my_api_token...\")\n                    .authType(\"Token\")\n                    .build())\n                .replication_start_date(\"2017-01-25T00:00:00Z\")\n                .source_type(\"pipedrive\")\n                .build())\n            .name(\"Albert Sipes\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"fcdace1f-0121-46ce-a239-e8f25cd0d19d\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourcePipedrive:\n    type: airbyte:SourcePipedrive\n    properties:\n      configuration:\n        authorization:\n          apiToken: '...my_api_token...'\n          authType: Token\n        replication_start_date: 2017-01-25T00:00:00Z\n        source_type: pipedrive\n      name: Albert Sipes\n      secretId: '...my_secret_id...'\n      workspaceId: fcdace1f-0121-46ce-a239-e8f25cd0d19d\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePipedriveConfiguration:SourcePipedriveConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePipedriveConfiguration:SourcePipedriveConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourcePipedrive resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourcePipedriveConfiguration:SourcePipedriveConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourcePocket:SourcePocket": {
            "description": "SourcePocket Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourcePocket;\nimport com.pulumi.airbyte.SourcePocketArgs;\nimport com.pulumi.airbyte.inputs.SourcePocketConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourcePocket = new SourcePocket(\"mySourcePocket\", SourcePocketArgs.builder()        \n            .configuration(SourcePocketConfigurationArgs.builder()\n                .access_token(\"...my_access_token...\")\n                .consumer_key(\"...my_consumer_key...\")\n                .content_type(\"video\")\n                .detail_type(\"simple\")\n                .domain(\"...my_domain...\")\n                .favorite(true)\n                .search(\"...my_search...\")\n                .since(\"2022-10-20 14:14:14\")\n                .sort(\"site\")\n                .source_type(\"pocket\")\n                .state(\"unread\")\n                .tag(\"...my_tag...\")\n                .build())\n            .name(\"Ada Tromp\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"266cbd95-f7aa-42b2-8113-695d1e6698fc\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourcePocket:\n    type: airbyte:SourcePocket\n    properties:\n      configuration:\n        access_token: '...my_access_token...'\n        consumer_key: '...my_consumer_key...'\n        content_type: video\n        detail_type: simple\n        domain: '...my_domain...'\n        favorite: true\n        search: '...my_search...'\n        since: 2022-10-20 14:14:14\n        sort: site\n        source_type: pocket\n        state: unread\n        tag: '...my_tag...'\n      name: Ada Tromp\n      secretId: '...my_secret_id...'\n      workspaceId: 266cbd95-f7aa-42b2-8113-695d1e6698fc\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePocketConfiguration:SourcePocketConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePocketConfiguration:SourcePocketConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourcePocket resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourcePocketConfiguration:SourcePocketConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourcePokeapi:SourcePokeapi": {
            "description": "SourcePokeapi Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourcePokeapi;\nimport com.pulumi.airbyte.SourcePokeapiArgs;\nimport com.pulumi.airbyte.inputs.SourcePokeapiConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourcePokeapi = new SourcePokeapi(\"mySourcePokeapi\", SourcePokeapiArgs.builder()        \n            .configuration(SourcePokeapiConfigurationArgs.builder()\n                .pokemon_name(\"snorlax\")\n                .source_type(\"pokeapi\")\n                .build())\n            .name(\"Lynn Mertz\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"17c29776-7633-4425-8038-bfb5971e9819\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourcePokeapi:\n    type: airbyte:SourcePokeapi\n    properties:\n      configuration:\n        pokemon_name: snorlax\n        source_type: pokeapi\n      name: Lynn Mertz\n      secretId: '...my_secret_id...'\n      workspaceId: 17c29776-7633-4425-8038-bfb5971e9819\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePokeapiConfiguration:SourcePokeapiConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePokeapiConfiguration:SourcePokeapiConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourcePokeapi resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourcePokeapiConfiguration:SourcePokeapiConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourcePolygonStockApi:SourcePolygonStockApi": {
            "description": "SourcePolygonStockAPI Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourcePolygonStockApi;\nimport com.pulumi.airbyte.SourcePolygonStockApiArgs;\nimport com.pulumi.airbyte.inputs.SourcePolygonStockApiConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourcePolygonstockapi = new SourcePolygonStockApi(\"mySourcePolygonstockapi\", SourcePolygonStockApiArgs.builder()        \n            .configuration(SourcePolygonStockApiConfigurationArgs.builder()\n                .adjusted(\"true\")\n                .api_key(\"...my_api_key...\")\n                .end_date(\"2020-10-14\")\n                .limit(100)\n                .multiplier(2)\n                .sort(\"desc\")\n                .source_type(\"polygon-stock-api\")\n                .start_date(\"2020-10-14\")\n                .stocks_ticker(\"MSFT\")\n                .timespan(\"day\")\n                .build())\n            .name(\"Spencer Kirlin\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"a39594d6-6bc2-4ae4-8063-2b9954b6fa22\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourcePolygonstockapi:\n    type: airbyte:SourcePolygonStockApi\n    properties:\n      configuration:\n        adjusted: 'true'\n        api_key: '...my_api_key...'\n        end_date: 2020-10-14\n        limit: 100\n        multiplier: 2\n        sort: desc\n        source_type: polygon-stock-api\n        start_date: 2020-10-14\n        stocks_ticker: MSFT\n        timespan: day\n      name: Spencer Kirlin\n      secretId: '...my_secret_id...'\n      workspaceId: a39594d6-6bc2-4ae4-8063-2b9954b6fa22\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePolygonStockApiConfiguration:SourcePolygonStockApiConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePolygonStockApiConfiguration:SourcePolygonStockApiConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourcePolygonStockApi resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourcePolygonStockApiConfiguration:SourcePolygonStockApiConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourcePostgres:SourcePostgres": {
            "description": "SourcePostgres Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourcePostgres;\nimport com.pulumi.airbyte.SourcePostgresArgs;\nimport com.pulumi.airbyte.inputs.SourcePostgresConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourcePostgres = new SourcePostgres(\"mySourcePostgres\", SourcePostgresArgs.builder()        \n            .configuration(SourcePostgresConfigurationArgs.builder()\n                .database(\"...my_database...\")\n                .host(\"...my_host...\")\n                .jdbc_url_params(\"...my_jdbc_url_params...\")\n                .password(\"...my_password...\")\n                .port(5432)\n                .replication_method(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .schemas(\"...\")\n                .source_type(\"postgres\")\n                .ssl_mode(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .tunnel_method(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .username(\"Kendrick52\")\n                .build())\n            .name(\"Vivian Dietrich\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"10006bef-4921-4ec2-853b-749366ac8ee0\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourcePostgres:\n    type: airbyte:SourcePostgres\n    properties:\n      configuration:\n        database: '...my_database...'\n        host: '...my_host...'\n        jdbc_url_params: '...my_jdbc_url_params...'\n        password: '...my_password...'\n        port: 5432\n        replication_method:\n          sourcePostgresReplicationMethodLogicalReplicationCdc_:\n            - initialWaitingSeconds: 4\n              lsnCommitBehaviour: While reading Data\n              method: CDC\n              plugin: pgoutput\n              publication: '...my_publication...'\n              queueSize: 4\n              replicationSlot: '...my_replication_slot...'\n        schemas:\n          - '...'\n        source_type: postgres\n        ssl_mode:\n          sourcePostgresSslModesAllow:\n            mode: allow\n        tunnel_method:\n          sourcePostgresSshTunnelMethodNoTunnel:\n            tunnelMethod: NO_TUNNEL\n        username: Kendrick52\n      name: Vivian Dietrich\n      secretId: '...my_secret_id...'\n      workspaceId: 10006bef-4921-4ec2-853b-749366ac8ee0\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePostgresConfiguration:SourcePostgresConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePostgresConfiguration:SourcePostgresConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourcePostgres resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourcePostgresConfiguration:SourcePostgresConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourcePosthog:SourcePosthog": {
            "description": "SourcePosthog Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourcePosthog;\nimport com.pulumi.airbyte.SourcePosthogArgs;\nimport com.pulumi.airbyte.inputs.SourcePosthogConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourcePosthog = new SourcePosthog(\"mySourcePosthog\", SourcePosthogArgs.builder()        \n            .configuration(SourcePosthogConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .base_url(\"https://posthog.example.com\")\n                .source_type(\"posthog\")\n                .start_date(\"2021-01-01T00:00:00Z\")\n                .build())\n            .name(\"Darrin Bogisich\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"88d40d03-f3de-4ba2-97be-3e90bc40df86\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourcePosthog:\n    type: airbyte:SourcePosthog\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        base_url: https://posthog.example.com\n        source_type: posthog\n        start_date: 2021-01-01T00:00:00Z\n      name: Darrin Bogisich\n      secretId: '...my_secret_id...'\n      workspaceId: 88d40d03-f3de-4ba2-97be-3e90bc40df86\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePosthogConfiguration:SourcePosthogConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePosthogConfiguration:SourcePosthogConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourcePosthog resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourcePosthogConfiguration:SourcePosthogConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourcePostmarkapp:SourcePostmarkapp": {
            "description": "SourcePostmarkapp Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourcePostmarkapp;\nimport com.pulumi.airbyte.SourcePostmarkappArgs;\nimport com.pulumi.airbyte.inputs.SourcePostmarkappConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourcePostmarkapp = new SourcePostmarkapp(\"mySourcePostmarkapp\", SourcePostmarkappArgs.builder()        \n            .configuration(SourcePostmarkappConfigurationArgs.builder()\n                .source_type(\"postmarkapp\")\n                .x_postmark_account_token(\"...my_x_postmark_account_token...\")\n                .x_postmark_server_token(\"...my_x_postmark_server_token...\")\n                .build())\n            .name(\"Boyd Stoltenberg\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"405cb331-d492-4f4f-927f-b0e0bf1f8217\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourcePostmarkapp:\n    type: airbyte:SourcePostmarkapp\n    properties:\n      configuration:\n        source_type: postmarkapp\n        x_postmark_account_token: '...my_x_postmark_account_token...'\n        x_postmark_server_token: '...my_x_postmark_server_token...'\n      name: Boyd Stoltenberg\n      secretId: '...my_secret_id...'\n      workspaceId: 405cb331-d492-4f4f-927f-b0e0bf1f8217\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePostmarkappConfiguration:SourcePostmarkappConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePostmarkappConfiguration:SourcePostmarkappConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourcePostmarkapp resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourcePostmarkappConfiguration:SourcePostmarkappConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourcePrestashop:SourcePrestashop": {
            "description": "SourcePrestashop Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourcePrestashop;\nimport com.pulumi.airbyte.SourcePrestashopArgs;\nimport com.pulumi.airbyte.inputs.SourcePrestashopConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourcePrestashop = new SourcePrestashop(\"mySourcePrestashop\", SourcePrestashopArgs.builder()        \n            .configuration(SourcePrestashopConfigurationArgs.builder()\n                .access_key(\"...my_access_key...\")\n                .source_type(\"prestashop\")\n                .start_date(\"2022-01-01\")\n                .url(\"...my_url...\")\n                .build())\n            .name(\"Drew Adams\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"ca77aeb7-b702-41a5-a046-b64e99fb0e67\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourcePrestashop:\n    type: airbyte:SourcePrestashop\n    properties:\n      configuration:\n        access_key: '...my_access_key...'\n        source_type: prestashop\n        start_date: 2022-01-01\n        url: '...my_url...'\n      name: Drew Adams\n      secretId: '...my_secret_id...'\n      workspaceId: ca77aeb7-b702-41a5-a046-b64e99fb0e67\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePrestashopConfiguration:SourcePrestashopConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePrestashopConfiguration:SourcePrestashopConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourcePrestashop resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourcePrestashopConfiguration:SourcePrestashopConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourcePublicApis:SourcePublicApis": {
            "description": "SourcePublicApis Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourcePublicApis;\nimport com.pulumi.airbyte.SourcePublicApisArgs;\nimport com.pulumi.airbyte.inputs.SourcePublicApisConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourcePublicapis = new SourcePublicApis(\"mySourcePublicapis\", SourcePublicApisArgs.builder()        \n            .configuration(SourcePublicApisConfigurationArgs.builder()\n                .source_type(\"public-apis\")\n                .build())\n            .name(\"James McLaughlin\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"dfed5540-ef53-4a34-a1b8-fe99731adc05\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourcePublicapis:\n    type: airbyte:SourcePublicApis\n    properties:\n      configuration:\n        source_type: public-apis\n      name: James McLaughlin\n      secretId: '...my_secret_id...'\n      workspaceId: dfed5540-ef53-4a34-a1b8-fe99731adc05\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePublicApisConfiguration:SourcePublicApisConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePublicApisConfiguration:SourcePublicApisConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourcePublicApis resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourcePublicApisConfiguration:SourcePublicApisConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourcePunkApi:SourcePunkApi": {
            "description": "SourcePunkAPI Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourcePunkApi;\nimport com.pulumi.airbyte.SourcePunkApiArgs;\nimport com.pulumi.airbyte.inputs.SourcePunkApiConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourcePunkapi = new SourcePunkApi(\"mySourcePunkapi\", SourcePunkApiArgs.builder()        \n            .configuration(SourcePunkApiConfigurationArgs.builder()\n                .brewed_after(\"MM-YYYY\")\n                .brewed_before(\"MM-YYYY\")\n                .id(22)\n                .source_type(\"punk-api\")\n                .build())\n            .name(\"Santos Langosh\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"51bd76ee-eb51-48c4-9a1f-ad35512f06d4\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourcePunkapi:\n    type: airbyte:SourcePunkApi\n    properties:\n      configuration:\n        brewed_after: MM-YYYY\n        brewed_before: MM-YYYY\n        id: 22\n        source_type: punk-api\n      name: Santos Langosh\n      secretId: '...my_secret_id...'\n      workspaceId: 51bd76ee-eb51-48c4-9a1f-ad35512f06d4\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePunkApiConfiguration:SourcePunkApiConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePunkApiConfiguration:SourcePunkApiConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourcePunkApi resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourcePunkApiConfiguration:SourcePunkApiConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourcePypi:SourcePypi": {
            "description": "SourcePypi Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourcePypi;\nimport com.pulumi.airbyte.SourcePypiArgs;\nimport com.pulumi.airbyte.inputs.SourcePypiConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourcePypi = new SourcePypi(\"mySourcePypi\", SourcePypiArgs.builder()        \n            .configuration(SourcePypiConfigurationArgs.builder()\n                .project_name(\"sampleproject\")\n                .source_type(\"pypi\")\n                .version(\"1.2.0\")\n                .build())\n            .name(\"Bill Reichert\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"f0f54856-8a04-424e-80a1-d6eb9434645d\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourcePypi:\n    type: airbyte:SourcePypi\n    properties:\n      configuration:\n        project_name: sampleproject\n        source_type: pypi\n        version: 1.2.0\n      name: Bill Reichert\n      secretId: '...my_secret_id...'\n      workspaceId: f0f54856-8a04-424e-80a1-d6eb9434645d\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePypiConfiguration:SourcePypiConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourcePypiConfiguration:SourcePypiConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourcePypi resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourcePypiConfiguration:SourcePypiConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceQualaroo:SourceQualaroo": {
            "description": "SourceQualaroo Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceQualaroo;\nimport com.pulumi.airbyte.SourceQualarooArgs;\nimport com.pulumi.airbyte.inputs.SourceQualarooConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceQualaroo = new SourceQualaroo(\"mySourceQualaroo\", SourceQualarooArgs.builder()        \n            .configuration(SourceQualarooConfigurationArgs.builder()\n                .key(\"...my_key...\")\n                .source_type(\"qualaroo\")\n                .start_date(\"2021-03-01T00:00:00.000Z\")\n                .survey_ids(\"...\")\n                .token(\"...my_token...\")\n                .build())\n            .name(\"Grace Ankunding\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"fbba5cce-ff5c-4b01-be51-e528a45ac82b\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceQualaroo:\n    type: airbyte:SourceQualaroo\n    properties:\n      configuration:\n        key: '...my_key...'\n        source_type: qualaroo\n        start_date: 2021-03-01T00:00:00.000Z\n        survey_ids:\n          - '...'\n        token: '...my_token...'\n      name: Grace Ankunding\n      secretId: '...my_secret_id...'\n      workspaceId: fbba5cce-ff5c-4b01-be51-e528a45ac82b\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceQualarooConfiguration:SourceQualarooConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceQualarooConfiguration:SourceQualarooConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceQualaroo resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceQualarooConfiguration:SourceQualarooConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceQuickbooks:SourceQuickbooks": {
            "description": "SourceQuickbooks Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceQuickbooks;\nimport com.pulumi.airbyte.SourceQuickbooksArgs;\nimport com.pulumi.airbyte.inputs.SourceQuickbooksConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceQuickbooksConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceQuickbooksConfigurationCredentialsSourceQuickbooksAuthorizationMethodOAuth20Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceQuickbooks = new SourceQuickbooks(\"mySourceQuickbooks\", SourceQuickbooksArgs.builder()        \n            .configuration(SourceQuickbooksConfigurationArgs.builder()\n                .credentials(SourceQuickbooksConfigurationCredentialsArgs.builder()\n                    .sourceQuickbooksAuthorizationMethodOAuth20(SourceQuickbooksConfigurationCredentialsSourceQuickbooksAuthorizationMethodOAuth20Args.builder()\n                        .accessToken(\"...my_access_token...\")\n                        .authType(\"oauth2.0\")\n                        .clientId(\"...my_client_id...\")\n                        .clientSecret(\"...my_client_secret...\")\n                        .realmId(\"...my_realm_id...\")\n                        .refreshToken(\"...my_refresh_token...\")\n                        .tokenExpiryDate(\"2022-04-17T11:28:41.720Z\")\n                        .build())\n                    .build())\n                .sandbox(false)\n                .source_type(\"quickbooks\")\n                .start_date(\"2021-03-20T00:00:00Z\")\n                .build())\n            .name(\"Nicholas Schroeder\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"a8da4127-dd59-47ff-8711-aa1bc74b86ce\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceQuickbooks:\n    type: airbyte:SourceQuickbooks\n    properties:\n      configuration:\n        credentials:\n          sourceQuickbooksAuthorizationMethodOAuth20:\n            accessToken: '...my_access_token...'\n            authType: oauth2.0\n            clientId: '...my_client_id...'\n            clientSecret: '...my_client_secret...'\n            realmId: '...my_realm_id...'\n            refreshToken: '...my_refresh_token...'\n            tokenExpiryDate: 2022-04-17T11:28:41.720Z\n        sandbox: false\n        source_type: quickbooks\n        start_date: 2021-03-20T00:00:00Z\n      name: Nicholas Schroeder\n      secretId: '...my_secret_id...'\n      workspaceId: a8da4127-dd59-47ff-8711-aa1bc74b86ce\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceQuickbooksConfiguration:SourceQuickbooksConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceQuickbooksConfiguration:SourceQuickbooksConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceQuickbooks resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceQuickbooksConfiguration:SourceQuickbooksConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceRailz:SourceRailz": {
            "description": "SourceRailz Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceRailz;\nimport com.pulumi.airbyte.SourceRailzArgs;\nimport com.pulumi.airbyte.inputs.SourceRailzConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceRailz = new SourceRailz(\"mySourceRailz\", SourceRailzArgs.builder()        \n            .configuration(SourceRailzConfigurationArgs.builder()\n                .client_id(\"...my_client_id...\")\n                .secret_key(\"...my_secret_key...\")\n                .source_type(\"railz\")\n                .start_date(\"...my_start_date...\")\n                .build())\n            .name(\"Myron Kunze\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"77b4848b-d6a6-4f04-81d2-c3b808094373\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceRailz:\n    type: airbyte:SourceRailz\n    properties:\n      configuration:\n        client_id: '...my_client_id...'\n        secret_key: '...my_secret_key...'\n        source_type: railz\n        start_date: '...my_start_date...'\n      name: Myron Kunze\n      secretId: '...my_secret_id...'\n      workspaceId: 77b4848b-d6a6-4f04-81d2-c3b808094373\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceRailzConfiguration:SourceRailzConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceRailzConfiguration:SourceRailzConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceRailz resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceRailzConfiguration:SourceRailzConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceRecharge:SourceRecharge": {
            "description": "SourceRecharge Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceRecharge;\nimport com.pulumi.airbyte.SourceRechargeArgs;\nimport com.pulumi.airbyte.inputs.SourceRechargeConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceRecharge = new SourceRecharge(\"mySourceRecharge\", SourceRechargeArgs.builder()        \n            .configuration(SourceRechargeConfigurationArgs.builder()\n                .access_token(\"...my_access_token...\")\n                .source_type(\"recharge\")\n                .start_date(\"2021-05-14T00:00:00Z\")\n                .build())\n            .name(\"Karen Green\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"bebbad02-f258-46bc-b152-558daa95be6c\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceRecharge:\n    type: airbyte:SourceRecharge\n    properties:\n      configuration:\n        access_token: '...my_access_token...'\n        source_type: recharge\n        start_date: 2021-05-14T00:00:00Z\n      name: Karen Green\n      secretId: '...my_secret_id...'\n      workspaceId: bebbad02-f258-46bc-b152-558daa95be6c\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceRechargeConfiguration:SourceRechargeConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceRechargeConfiguration:SourceRechargeConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceRecharge resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceRechargeConfiguration:SourceRechargeConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceRecreation:SourceRecreation": {
            "description": "SourceRecreation Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceRecreation;\nimport com.pulumi.airbyte.SourceRecreationArgs;\nimport com.pulumi.airbyte.inputs.SourceRecreationConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceRecreation = new SourceRecreation(\"mySourceRecreation\", SourceRecreationArgs.builder()        \n            .configuration(SourceRecreationConfigurationArgs.builder()\n                .apikey(\"...my_apikey...\")\n                .query_campsites(\"...my_query_campsites...\")\n                .source_type(\"recreation\")\n                .build())\n            .name(\"David Deckow\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"6c354aa4-32b4-47e1-b63c-5208c23e9802\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceRecreation:\n    type: airbyte:SourceRecreation\n    properties:\n      configuration:\n        apikey: '...my_apikey...'\n        query_campsites: '...my_query_campsites...'\n        source_type: recreation\n      name: David Deckow\n      secretId: '...my_secret_id...'\n      workspaceId: 6c354aa4-32b4-47e1-b63c-5208c23e9802\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceRecreationConfiguration:SourceRecreationConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceRecreationConfiguration:SourceRecreationConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceRecreation resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceRecreationConfiguration:SourceRecreationConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceRecruitee:SourceRecruitee": {
            "description": "SourceRecruitee Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceRecruitee;\nimport com.pulumi.airbyte.SourceRecruiteeArgs;\nimport com.pulumi.airbyte.inputs.SourceRecruiteeConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceRecruitee = new SourceRecruitee(\"mySourceRecruitee\", SourceRecruiteeArgs.builder()        \n            .configuration(SourceRecruiteeConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .company_id(9)\n                .source_type(\"recruitee\")\n                .build())\n            .name(\"Dr. Sean Williamson\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"5eb4a8b6-74ee-45cf-818e-dc7f787e32e0\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceRecruitee:\n    type: airbyte:SourceRecruitee\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        company_id: 9\n        source_type: recruitee\n      name: Dr. Sean Williamson\n      secretId: '...my_secret_id...'\n      workspaceId: 5eb4a8b6-74ee-45cf-818e-dc7f787e32e0\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceRecruiteeConfiguration:SourceRecruiteeConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceRecruiteeConfiguration:SourceRecruiteeConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceRecruitee resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceRecruiteeConfiguration:SourceRecruiteeConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceRecurly:SourceRecurly": {
            "description": "SourceRecurly Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceRecurly;\nimport com.pulumi.airbyte.SourceRecurlyArgs;\nimport com.pulumi.airbyte.inputs.SourceRecurlyConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceRecurly = new SourceRecurly(\"mySourceRecurly\", SourceRecurlyArgs.builder()        \n            .configuration(SourceRecurlyConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .begin_time(\"2021-12-01T00:00:00\")\n                .end_time(\"2021-12-01T00:00:00\")\n                .source_type(\"recurly\")\n                .build())\n            .name(\"Susie Donnelly\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"ed0c5670-ef42-4bd3-89f1-cc503f6c39bc\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceRecurly:\n    type: airbyte:SourceRecurly\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        begin_time: 2021-12-01T00:00:00\n        end_time: 2021-12-01T00:00:00\n        source_type: recurly\n      name: Susie Donnelly\n      secretId: '...my_secret_id...'\n      workspaceId: ed0c5670-ef42-4bd3-89f1-cc503f6c39bc\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceRecurlyConfiguration:SourceRecurlyConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceRecurlyConfiguration:SourceRecurlyConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceRecurly resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceRecurlyConfiguration:SourceRecurlyConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceRedshift:SourceRedshift": {
            "description": "SourceRedshift Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceRedshift;\nimport com.pulumi.airbyte.SourceRedshiftArgs;\nimport com.pulumi.airbyte.inputs.SourceRedshiftConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceRedshift = new SourceRedshift(\"mySourceRedshift\", SourceRedshiftArgs.builder()        \n            .configuration(SourceRedshiftConfigurationArgs.builder()\n                .database(\"master\")\n                .host(\"...my_host...\")\n                .jdbc_url_params(\"...my_jdbc_url_params...\")\n                .password(\"...my_password...\")\n                .port(5439)\n                .schemas(\"...\")\n                .source_type(\"redshift\")\n                .username(\"Abdullah.Oberbrunner\")\n                .build())\n            .name(\"Edward Wolf\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"7f385189-ad7e-4f80-baae-03f33ca79fb9\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceRedshift:\n    type: airbyte:SourceRedshift\n    properties:\n      configuration:\n        database: master\n        host: '...my_host...'\n        jdbc_url_params: '...my_jdbc_url_params...'\n        password: '...my_password...'\n        port: 5439\n        schemas:\n          - '...'\n        source_type: redshift\n        username: Abdullah.Oberbrunner\n      name: Edward Wolf\n      secretId: '...my_secret_id...'\n      workspaceId: 7f385189-ad7e-4f80-baae-03f33ca79fb9\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceRedshiftConfiguration:SourceRedshiftConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceRedshiftConfiguration:SourceRedshiftConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceRedshift resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceRedshiftConfiguration:SourceRedshiftConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceRetently:SourceRetently": {
            "description": "SourceRetently Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceRetently;\nimport com.pulumi.airbyte.SourceRetentlyArgs;\nimport com.pulumi.airbyte.inputs.SourceRetentlyConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceRetentlyConfigurationCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceRetently = new SourceRetently(\"mySourceRetently\", SourceRetentlyArgs.builder()        \n            .configuration(SourceRetentlyConfigurationArgs.builder()\n                .credentials(SourceRetentlyConfigurationCredentialsArgs.builder()\n                    .sourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth_(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .build())\n                .source_type(\"retently\")\n                .build())\n            .name(\"Mrs. Lamar Fritsch\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"ba26fd36-8ba9-4216-bcb4-15835c736417\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceRetently:\n    type: airbyte:SourceRetently\n    properties:\n      configuration:\n        credentials:\n          sourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth_:\n            - authType: Client\n              clientId: '...my_client_id...'\n              clientSecret: '...my_client_secret...'\n              refreshToken: '...my_refresh_token...'\n        source_type: retently\n      name: Mrs. Lamar Fritsch\n      secretId: '...my_secret_id...'\n      workspaceId: ba26fd36-8ba9-4216-bcb4-15835c736417\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceRetentlyConfiguration:SourceRetentlyConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceRetentlyConfiguration:SourceRetentlyConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceRetently resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceRetentlyConfiguration:SourceRetentlyConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceRkiCovid:SourceRkiCovid": {
            "description": "SourceRkiCovid Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceRkiCovid;\nimport com.pulumi.airbyte.SourceRkiCovidArgs;\nimport com.pulumi.airbyte.inputs.SourceRkiCovidConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceRkicovid = new SourceRkiCovid(\"mySourceRkicovid\", SourceRkiCovidArgs.builder()        \n            .configuration(SourceRkiCovidConfigurationArgs.builder()\n                .source_type(\"rki-covid\")\n                .start_date(\"...my_start_date...\")\n                .build())\n            .name(\"Diana Bogisich\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"edc046bc-5163-4bbc-a492-27c42c22c553\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceRkicovid:\n    type: airbyte:SourceRkiCovid\n    properties:\n      configuration:\n        source_type: rki-covid\n        start_date: '...my_start_date...'\n      name: Diana Bogisich\n      secretId: '...my_secret_id...'\n      workspaceId: edc046bc-5163-4bbc-a492-27c42c22c553\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceRkiCovidConfiguration:SourceRkiCovidConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceRkiCovidConfiguration:SourceRkiCovidConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceRkiCovid resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceRkiCovidConfiguration:SourceRkiCovidConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceRss:SourceRss": {
            "description": "SourceRss Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceRss;\nimport com.pulumi.airbyte.SourceRssArgs;\nimport com.pulumi.airbyte.inputs.SourceRssConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceRss = new SourceRss(\"mySourceRss\", SourceRssArgs.builder()        \n            .configuration(SourceRssConfigurationArgs.builder()\n                .source_type(\"rss\")\n                .url(\"...my_url...\")\n                .build())\n            .name(\"Donna Gottlieb\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"c5dbb3c5-7c1e-4498-9e8a-a257ddc1912e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceRss:\n    type: airbyte:SourceRss\n    properties:\n      configuration:\n        source_type: rss\n        url: '...my_url...'\n      name: Donna Gottlieb\n      secretId: '...my_secret_id...'\n      workspaceId: c5dbb3c5-7c1e-4498-9e8a-a257ddc1912e\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceRssConfiguration:SourceRssConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceRssConfiguration:SourceRssConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceRss resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceRssConfiguration:SourceRssConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceS3:SourceS3": {
            "description": "SourceS3 Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceS3;\nimport com.pulumi.airbyte.SourceS3Args;\nimport com.pulumi.airbyte.inputs.SourceS3ConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceS3ConfigurationFormatArgs;\nimport com.pulumi.airbyte.inputs.SourceS3ConfigurationFormatSourceS3FileFormatAvroArgs;\nimport com.pulumi.airbyte.inputs.SourceS3ConfigurationProviderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceS3 = new SourceS3(\"mySourceS3\", SourceS3Args.builder()        \n            .configuration(SourceS3ConfigurationArgs.builder()\n                .dataset(\"...my_dataset...\")\n                .format(SourceS3ConfigurationFormatArgs.builder()\n                    .sourceS3FileFormatAvro(SourceS3ConfigurationFormatSourceS3FileFormatAvroArgs.builder()\n                        .filetype(\"avro\")\n                        .build())\n                    .build())\n                .path_pattern(\"myFolder/myTableFiles/*.csv|myFolder/myOtherTableFiles/*.csv\")\n                .provider(SourceS3ConfigurationProviderArgs.builder()\n                    .awsAccessKeyId(\"...my_aws_access_key_id...\")\n                    .awsSecretAccessKey(\"...my_aws_secret_access_key...\")\n                    .bucket(\"...my_bucket...\")\n                    .endpoint(\"...my_endpoint...\")\n                    .pathPrefix(\"...my_path_prefix...\")\n                    .startDate(\"2021-01-01T00:00:00Z\")\n                    .build())\n                .schema(\"{\\\"column_1\\\": \\\"number\\\", \\\"column_2\\\": \\\"string\\\", \\\"column_3\\\": \\\"array\\\", \\\"column_4\\\": \\\"object\\\", \\\"column_5\\\": \\\"boolean\\\"}\")\n                .source_type(\"s3\")\n                .build())\n            .name(\"Ellen Reilly\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"c5469d40-15df-4a79-a206-bef2b0a3e42c\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceS3:\n    type: airbyte:SourceS3\n    properties:\n      configuration:\n        dataset: '...my_dataset...'\n        format:\n          sourceS3FileFormatAvro:\n            filetype: avro\n        path_pattern: myFolder/myTableFiles/*.csv|myFolder/myOtherTableFiles/*.csv\n        provider:\n          awsAccessKeyId: '...my_aws_access_key_id...'\n          awsSecretAccessKey: '...my_aws_secret_access_key...'\n          bucket: '...my_bucket...'\n          endpoint: '...my_endpoint...'\n          pathPrefix: '...my_path_prefix...'\n          startDate: 2021-01-01T00:00:00Z\n        schema: '{\"column_1\": \"number\", \"column_2\": \"string\", \"column_3\": \"array\", \"column_4\": \"object\", \"column_5\": \"boolean\"}'\n        source_type: s3\n      name: Ellen Reilly\n      secretId: '...my_secret_id...'\n      workspaceId: c5469d40-15df-4a79-a206-bef2b0a3e42c\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceS3Configuration:SourceS3Configuration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceS3Configuration:SourceS3Configuration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceS3 resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceS3Configuration:SourceS3Configuration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceSalesforce:SourceSalesforce": {
            "description": "SourceSalesforce Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceSalesforce;\nimport com.pulumi.airbyte.SourceSalesforceArgs;\nimport com.pulumi.airbyte.inputs.SourceSalesforceConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceSalesforce = new SourceSalesforce(\"mySourceSalesforce\", SourceSalesforceArgs.builder()        \n            .configuration(SourceSalesforceConfigurationArgs.builder()\n                .auth_type(\"Client\")\n                .client_id(\"...my_client_id...\")\n                .client_secret(\"...my_client_secret...\")\n                .force_use_bulk_api(true)\n                .is_sandbox(true)\n                .refresh_token(\"...my_refresh_token...\")\n                .source_type(\"salesforce\")\n                .start_date(\"2021-07-25T00:00:00Z\")\n                .streams_criteria(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .build())\n            .name(\"Andy Paucek\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"2e913558-6d18-4f9f-97a4-bfad2bf7d67c\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceSalesforce:\n    type: airbyte:SourceSalesforce\n    properties:\n      configuration:\n        auth_type: Client\n        client_id: '...my_client_id...'\n        client_secret: '...my_client_secret...'\n        force_use_bulk_api: true\n        is_sandbox: true\n        refresh_token: '...my_refresh_token...'\n        source_type: salesforce\n        start_date: 2021-07-25T00:00:00Z\n        streams_criteria:\n          - criteria: starts with\n            value: '...my_value...'\n      name: Andy Paucek\n      secretId: '...my_secret_id...'\n      workspaceId: 2e913558-6d18-4f9f-97a4-bfad2bf7d67c\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSalesforceConfiguration:SourceSalesforceConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSalesforceConfiguration:SourceSalesforceConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceSalesforce resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceSalesforceConfiguration:SourceSalesforceConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceSalesloft:SourceSalesloft": {
            "description": "SourceSalesloft Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceSalesloft;\nimport com.pulumi.airbyte.SourceSalesloftArgs;\nimport com.pulumi.airbyte.inputs.SourceSalesloftConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceSalesloftConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaApiKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceSalesloft = new SourceSalesloft(\"mySourceSalesloft\", SourceSalesloftArgs.builder()        \n            .configuration(SourceSalesloftConfigurationArgs.builder()\n                .credentials(SourceSalesloftConfigurationCredentialsArgs.builder()\n                    .sourceSalesloftCredentialsAuthenticateViaApiKey(SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaApiKeyArgs.builder()\n                        .apiKey(\"...my_api_key...\")\n                        .authType(\"api_key\")\n                        .build())\n                    .build())\n                .source_type(\"salesloft\")\n                .start_date(\"2020-11-16T00:00:00Z\")\n                .build())\n            .name(\"Amelia Simonis\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"b41d6124-3531-4870-8f68-b03ad421bd43\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceSalesloft:\n    type: airbyte:SourceSalesloft\n    properties:\n      configuration:\n        credentials:\n          sourceSalesloftCredentialsAuthenticateViaApiKey:\n            apiKey: '...my_api_key...'\n            authType: api_key\n        source_type: salesloft\n        start_date: 2020-11-16T00:00:00Z\n      name: Amelia Simonis\n      secretId: '...my_secret_id...'\n      workspaceId: b41d6124-3531-4870-8f68-b03ad421bd43\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSalesloftConfiguration:SourceSalesloftConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSalesloftConfiguration:SourceSalesloftConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceSalesloft resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceSalesloftConfiguration:SourceSalesloftConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceSapFieldglass:SourceSapFieldglass": {
            "description": "SourceSapFieldglass Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceSapFieldglass;\nimport com.pulumi.airbyte.SourceSapFieldglassArgs;\nimport com.pulumi.airbyte.inputs.SourceSapFieldglassConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceSapfieldglass = new SourceSapFieldglass(\"mySourceSapfieldglass\", SourceSapFieldglassArgs.builder()        \n            .configuration(SourceSapFieldglassConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .source_type(\"sap-fieldglass\")\n                .build())\n            .name(\"Miss Jack Wintheiser\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"0a0003eb-22d9-4b3a-b0d9-4faa741c57d1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceSapfieldglass:\n    type: airbyte:SourceSapFieldglass\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        source_type: sap-fieldglass\n      name: Miss Jack Wintheiser\n      secretId: '...my_secret_id...'\n      workspaceId: 0a0003eb-22d9-4b3a-b0d9-4faa741c57d1\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSapFieldglassConfiguration:SourceSapFieldglassConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSapFieldglassConfiguration:SourceSapFieldglassConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceSapFieldglass resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceSapFieldglassConfiguration:SourceSapFieldglassConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceSecoda:SourceSecoda": {
            "description": "SourceSecoda Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceSecoda;\nimport com.pulumi.airbyte.SourceSecodaArgs;\nimport com.pulumi.airbyte.inputs.SourceSecodaConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceSecoda = new SourceSecoda(\"mySourceSecoda\", SourceSecodaArgs.builder()        \n            .configuration(SourceSecodaConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .source_type(\"secoda\")\n                .build())\n            .name(\"Ignacio Sporer\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"050d38dc-3ce1-4854-b2f9-ee69166a8be3\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceSecoda:\n    type: airbyte:SourceSecoda\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        source_type: secoda\n      name: Ignacio Sporer\n      secretId: '...my_secret_id...'\n      workspaceId: 050d38dc-3ce1-4854-b2f9-ee69166a8be3\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSecodaConfiguration:SourceSecodaConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSecodaConfiguration:SourceSecodaConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceSecoda resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceSecodaConfiguration:SourceSecodaConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceSendgrid:SourceSendgrid": {
            "description": "SourceSendgrid Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceSendgrid;\nimport com.pulumi.airbyte.SourceSendgridArgs;\nimport com.pulumi.airbyte.inputs.SourceSendgridConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceSendgrid = new SourceSendgrid(\"mySourceSendgrid\", SourceSendgridArgs.builder()        \n            .configuration(SourceSendgridConfigurationArgs.builder()\n                .apikey(\"...my_apikey...\")\n                .source_type(\"sendgrid\")\n                .start_time(\"2020-01-01T01:01:01Z\")\n                .build())\n            .name(\"Dana Sauer\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"3a2875c6-c1fe-4606-907d-2a9c87ae50c1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceSendgrid:\n    type: airbyte:SourceSendgrid\n    properties:\n      configuration:\n        apikey: '...my_apikey...'\n        source_type: sendgrid\n        start_time: 2020-01-01T01:01:01Z\n      name: Dana Sauer\n      secretId: '...my_secret_id...'\n      workspaceId: 3a2875c6-c1fe-4606-907d-2a9c87ae50c1\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSendgridConfiguration:SourceSendgridConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSendgridConfiguration:SourceSendgridConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceSendgrid resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceSendgridConfiguration:SourceSendgridConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceSendinblue:SourceSendinblue": {
            "description": "SourceSendinblue Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceSendinblue;\nimport com.pulumi.airbyte.SourceSendinblueArgs;\nimport com.pulumi.airbyte.inputs.SourceSendinblueConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceSendinblue = new SourceSendinblue(\"mySourceSendinblue\", SourceSendinblueArgs.builder()        \n            .configuration(SourceSendinblueConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .source_type(\"sendinblue\")\n                .build())\n            .name(\"Miss Loretta Howell PhD\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"9136a7e8-d532-413f-bf65-8752db764c59\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceSendinblue:\n    type: airbyte:SourceSendinblue\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        source_type: sendinblue\n      name: Miss Loretta Howell PhD\n      secretId: '...my_secret_id...'\n      workspaceId: 9136a7e8-d532-413f-bf65-8752db764c59\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSendinblueConfiguration:SourceSendinblueConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSendinblueConfiguration:SourceSendinblueConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceSendinblue resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceSendinblueConfiguration:SourceSendinblueConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceSenseforce:SourceSenseforce": {
            "description": "SourceSenseforce Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceSenseforce;\nimport com.pulumi.airbyte.SourceSenseforceArgs;\nimport com.pulumi.airbyte.inputs.SourceSenseforceConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceSenseforce = new SourceSenseforce(\"mySourceSenseforce\", SourceSenseforceArgs.builder()        \n            .configuration(SourceSenseforceConfigurationArgs.builder()\n                .access_token(\"...my_access_token...\")\n                .backend_url(\"https://galaxyapi.senseforce.io\")\n                .dataset_id(\"8f418098-ca28-4df5-9498-0df9fe78eda7\")\n                .slice_range(360)\n                .source_type(\"senseforce\")\n                .start_date(\"2017-01-25\")\n                .build())\n            .name(\"Nichole Treutel\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"ada29ca7-9181-4c95-a716-63c530b56651\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceSenseforce:\n    type: airbyte:SourceSenseforce\n    properties:\n      configuration:\n        access_token: '...my_access_token...'\n        backend_url: https://galaxyapi.senseforce.io\n        dataset_id: 8f418098-ca28-4df5-9498-0df9fe78eda7\n        slice_range: 360\n        source_type: senseforce\n        start_date: 2017-01-25\n      name: Nichole Treutel\n      secretId: '...my_secret_id...'\n      workspaceId: ada29ca7-9181-4c95-a716-63c530b56651\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSenseforceConfiguration:SourceSenseforceConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSenseforceConfiguration:SourceSenseforceConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceSenseforce resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceSenseforceConfiguration:SourceSenseforceConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceSentry:SourceSentry": {
            "description": "SourceSentry Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceSentry;\nimport com.pulumi.airbyte.SourceSentryArgs;\nimport com.pulumi.airbyte.inputs.SourceSentryConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceSentry = new SourceSentry(\"mySourceSentry\", SourceSentryArgs.builder()        \n            .configuration(SourceSentryConfigurationArgs.builder()\n                .auth_token(\"...my_auth_token...\")\n                .discover_fields(\"{ \\\"see\\\": \\\"documentation\\\" }\")\n                .hostname(\"imperfect-creator.name\")\n                .organization(\"...my_organization...\")\n                .project(\"...my_project...\")\n                .source_type(\"sentry\")\n                .build())\n            .name(\"Laurie Farrell\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"12ab2521-b9f2-4e07-a467-b8a40bc05fab\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceSentry:\n    type: airbyte:SourceSentry\n    properties:\n      configuration:\n        auth_token: '...my_auth_token...'\n        discover_fields:\n          - '{ \"see\": \"documentation\" }'\n        hostname: imperfect-creator.name\n        organization: '...my_organization...'\n        project: '...my_project...'\n        source_type: sentry\n      name: Laurie Farrell\n      secretId: '...my_secret_id...'\n      workspaceId: 12ab2521-b9f2-4e07-a467-b8a40bc05fab\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSentryConfiguration:SourceSentryConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSentryConfiguration:SourceSentryConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceSentry resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceSentryConfiguration:SourceSentryConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceSftp:SourceSftp": {
            "description": "SourceSftp Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceSftp;\nimport com.pulumi.airbyte.SourceSftpArgs;\nimport com.pulumi.airbyte.inputs.SourceSftpConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceSftpConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardPasswordAuthenticationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceSftp = new SourceSftp(\"mySourceSftp\", SourceSftpArgs.builder()        \n            .configuration(SourceSftpConfigurationArgs.builder()\n                .credentials(SourceSftpConfigurationCredentialsArgs.builder()\n                    .sourceSftpAuthenticationWildcardPasswordAuthentication(SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardPasswordAuthenticationArgs.builder()\n                        .authMethod(\"SSH_PASSWORD_AUTH\")\n                        .authUserPassword(\"...my_auth_user_password...\")\n                        .build())\n                    .build())\n                .file_pattern(\"log-([0-9]{4})([0-9]{2})([0-9]{2}) - This will filter files which  `log-yearmmdd`\")\n                .file_types(\"csv,json\")\n                .folder_path(\"/logs/2022\")\n                .host(\"192.0.2.1\")\n                .port(22)\n                .source_type(\"sftp\")\n                .user(\"...my_user...\")\n                .build())\n            .name(\"Dorothy Waters\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"22a94d20-ec90-4ea4-9d1f-465e85156fff\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceSftp:\n    type: airbyte:SourceSftp\n    properties:\n      configuration:\n        credentials:\n          sourceSftpAuthenticationWildcardPasswordAuthentication:\n            authMethod: SSH_PASSWORD_AUTH\n            authUserPassword: '...my_auth_user_password...'\n        file_pattern: log-([0-9]{4})([0-9]{2})([0-9]{2}) - This will filter files which  `log-yearmmdd`\n        file_types: csv,json\n        folder_path: /logs/2022\n        host: 192.0.2.1\n        port: 22\n        source_type: sftp\n        user: '...my_user...'\n      name: Dorothy Waters\n      secretId: '...my_secret_id...'\n      workspaceId: 22a94d20-ec90-4ea4-9d1f-465e85156fff\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSftpConfiguration:SourceSftpConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSftpConfiguration:SourceSftpConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceSftp resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceSftpConfiguration:SourceSftpConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceSftpBulk:SourceSftpBulk": {
            "description": "SourceSftpBulk Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceSftpBulk;\nimport com.pulumi.airbyte.SourceSftpBulkArgs;\nimport com.pulumi.airbyte.inputs.SourceSftpBulkConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceSftpbulk = new SourceSftpBulk(\"mySourceSftpbulk\", SourceSftpBulkArgs.builder()        \n            .configuration(SourceSftpBulkConfigurationArgs.builder()\n                .file_most_recent(true)\n                .file_pattern(\"log-([0-9]{4})([0-9]{2})([0-9]{2}) - This will filter files which  `log-yearmmdd`\")\n                .file_type(\"csv\")\n                .folder_path(\"/logs/2022\")\n                .host(\"192.0.2.1\")\n                .password(\"...my_password...\")\n                .port(22)\n                .private_key(\"...my_private_key...\")\n                .separator(\",\")\n                .source_type(\"sftp-bulk\")\n                .start_date(\"2017-01-25T00:00:00Z\")\n                .stream_name(\"ftp_contacts\")\n                .username(\"Donny_Wuckert34\")\n                .build())\n            .name(\"Doug Marvin\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"3398dafb-42a8-4d63-b88e-4d8039ea5f9b\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceSftpbulk:\n    type: airbyte:SourceSftpBulk\n    properties:\n      configuration:\n        file_most_recent: true\n        file_pattern: log-([0-9]{4})([0-9]{2})([0-9]{2}) - This will filter files which  `log-yearmmdd`\n        file_type: csv\n        folder_path: /logs/2022\n        host: 192.0.2.1\n        password: '...my_password...'\n        port: 22\n        private_key: '...my_private_key...'\n        separator: ','\n        source_type: sftp-bulk\n        start_date: 2017-01-25T00:00:00Z\n        stream_name: ftp_contacts\n        username: Donny_Wuckert34\n      name: Doug Marvin\n      secretId: '...my_secret_id...'\n      workspaceId: 3398dafb-42a8-4d63-b88e-4d8039ea5f9b\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSftpBulkConfiguration:SourceSftpBulkConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSftpBulkConfiguration:SourceSftpBulkConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceSftpBulk resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceSftpBulkConfiguration:SourceSftpBulkConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceShopify:SourceShopify": {
            "description": "SourceShopify Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceShopify;\nimport com.pulumi.airbyte.SourceShopifyArgs;\nimport com.pulumi.airbyte.inputs.SourceShopifyConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceShopifyConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodApiPasswordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceShopify = new SourceShopify(\"mySourceShopify\", SourceShopifyArgs.builder()        \n            .configuration(SourceShopifyConfigurationArgs.builder()\n                .credentials(SourceShopifyConfigurationCredentialsArgs.builder()\n                    .sourceShopifyShopifyAuthorizationMethodApiPassword(SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodApiPasswordArgs.builder()\n                        .apiPassword(\"...my_api_password...\")\n                        .authMethod(\"api_password\")\n                        .build())\n                    .build())\n                .shop(\"my-store\")\n                .source_type(\"shopify\")\n                .start_date(\"2021-01-01\")\n                .build())\n            .name(\"Rhonda Gislason\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"619039da-cd38-4ed0-9c67-1dc7f1e3af15\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceShopify:\n    type: airbyte:SourceShopify\n    properties:\n      configuration:\n        credentials:\n          sourceShopifyShopifyAuthorizationMethodApiPassword:\n            apiPassword: '...my_api_password...'\n            authMethod: api_password\n        shop: my-store\n        source_type: shopify\n        start_date: 2021-01-01\n      name: Rhonda Gislason\n      secretId: '...my_secret_id...'\n      workspaceId: 619039da-cd38-4ed0-9c67-1dc7f1e3af15\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceShopifyConfiguration:SourceShopifyConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceShopifyConfiguration:SourceShopifyConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceShopify resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceShopifyConfiguration:SourceShopifyConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceShortio:SourceShortio": {
            "description": "SourceShortio Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceShortio;\nimport com.pulumi.airbyte.SourceShortioArgs;\nimport com.pulumi.airbyte.inputs.SourceShortioConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceShortio = new SourceShortio(\"mySourceShortio\", SourceShortioArgs.builder()        \n            .configuration(SourceShortioConfigurationArgs.builder()\n                .domain_id(\"...my_domain_id...\")\n                .secret_key(\"...my_secret_key...\")\n                .source_type(\"shortio\")\n                .start_date(\"2023-07-30T03:43:59.244Z\")\n                .build())\n            .name(\"Carlos Armstrong\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"0d1b4901-f2bd-489c-8a32-639da5b7b690\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceShortio:\n    type: airbyte:SourceShortio\n    properties:\n      configuration:\n        domain_id: '...my_domain_id...'\n        secret_key: '...my_secret_key...'\n        source_type: shortio\n        start_date: 2023-07-30T03:43:59.244Z\n      name: Carlos Armstrong\n      secretId: '...my_secret_id...'\n      workspaceId: 0d1b4901-f2bd-489c-8a32-639da5b7b690\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceShortioConfiguration:SourceShortioConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceShortioConfiguration:SourceShortioConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceShortio resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceShortioConfiguration:SourceShortioConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceSlack:SourceSlack": {
            "description": "SourceSlack Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceSlack;\nimport com.pulumi.airbyte.SourceSlackArgs;\nimport com.pulumi.airbyte.inputs.SourceSlackConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceSlackConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismApiTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceSlack = new SourceSlack(\"mySourceSlack\", SourceSlackArgs.builder()        \n            .configuration(SourceSlackConfigurationArgs.builder()\n                .channel_filter(\"...\")\n                .credentials(SourceSlackConfigurationCredentialsArgs.builder()\n                    .sourceSlackAuthenticationMechanismApiToken(SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismApiTokenArgs.builder()\n                        .apiToken(\"...my_api_token...\")\n                        .optionTitle(\"API Token Credentials\")\n                        .build())\n                    .build())\n                .join_channels(true)\n                .lookback_window(14)\n                .source_type(\"slack\")\n                .start_date(\"2017-01-25T00:00:00Z\")\n                .build())\n            .name(\"Eduardo Gottlieb\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"43664a8f-0af8-4c69-9d73-2d9fbaf9476a\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceSlack:\n    type: airbyte:SourceSlack\n    properties:\n      configuration:\n        channel_filter:\n          - '...'\n        credentials:\n          sourceSlackAuthenticationMechanismApiToken:\n            apiToken: '...my_api_token...'\n            optionTitle: API Token Credentials\n        join_channels: true\n        lookback_window: 14\n        source_type: slack\n        start_date: 2017-01-25T00:00:00Z\n      name: Eduardo Gottlieb\n      secretId: '...my_secret_id...'\n      workspaceId: 43664a8f-0af8-4c69-9d73-2d9fbaf9476a\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSlackConfiguration:SourceSlackConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSlackConfiguration:SourceSlackConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceSlack resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceSlackConfiguration:SourceSlackConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceSmaily:SourceSmaily": {
            "description": "SourceSmaily Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceSmaily;\nimport com.pulumi.airbyte.SourceSmailyArgs;\nimport com.pulumi.airbyte.inputs.SourceSmailyConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceSmaily = new SourceSmaily(\"mySourceSmaily\", SourceSmailyArgs.builder()        \n            .configuration(SourceSmailyConfigurationArgs.builder()\n                .api_password(\"...my_api_password...\")\n                .api_subdomain(\"...my_api_subdomain...\")\n                .api_username(\"...my_api_username...\")\n                .source_type(\"smaily\")\n                .build())\n            .name(\"Lynda Thiel\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"cc50c8a3-512c-4737-8489-30750a00e966\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceSmaily:\n    type: airbyte:SourceSmaily\n    properties:\n      configuration:\n        api_password: '...my_api_password...'\n        api_subdomain: '...my_api_subdomain...'\n        api_username: '...my_api_username...'\n        source_type: smaily\n      name: Lynda Thiel\n      secretId: '...my_secret_id...'\n      workspaceId: cc50c8a3-512c-4737-8489-30750a00e966\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSmailyConfiguration:SourceSmailyConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSmailyConfiguration:SourceSmailyConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceSmaily resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceSmailyConfiguration:SourceSmailyConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceSmartengage:SourceSmartengage": {
            "description": "SourceSmartengage Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceSmartengage;\nimport com.pulumi.airbyte.SourceSmartengageArgs;\nimport com.pulumi.airbyte.inputs.SourceSmartengageConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceSmartengage = new SourceSmartengage(\"mySourceSmartengage\", SourceSmartengageArgs.builder()        \n            .configuration(SourceSmartengageConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .source_type(\"smartengage\")\n                .build())\n            .name(\"Guillermo Kunze\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"d4319439-8c78-43c9-a398-ed3d3ab7ca3c\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceSmartengage:\n    type: airbyte:SourceSmartengage\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        source_type: smartengage\n      name: Guillermo Kunze\n      secretId: '...my_secret_id...'\n      workspaceId: d4319439-8c78-43c9-a398-ed3d3ab7ca3c\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSmartengageConfiguration:SourceSmartengageConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSmartengageConfiguration:SourceSmartengageConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceSmartengage resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceSmartengageConfiguration:SourceSmartengageConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceSmartsheets:SourceSmartsheets": {
            "description": "SourceSmartsheets Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceSmartsheets;\nimport com.pulumi.airbyte.SourceSmartsheetsArgs;\nimport com.pulumi.airbyte.inputs.SourceSmartsheetsConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceSmartsheetsConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodApiAccessTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceSmartsheets = new SourceSmartsheets(\"mySourceSmartsheets\", SourceSmartsheetsArgs.builder()        \n            .configuration(SourceSmartsheetsConfigurationArgs.builder()\n                .credentials(SourceSmartsheetsConfigurationCredentialsArgs.builder()\n                    .sourceSmartsheetsAuthorizationMethodApiAccessToken(SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodApiAccessTokenArgs.builder()\n                        .accessToken(\"...my_access_token...\")\n                        .authType(\"access_token\")\n                        .build())\n                    .build())\n                .metadata_fields(\"sheetversion\")\n                .source_type(\"smartsheets\")\n                .spreadsheet_id(\"...my_spreadsheet_id...\")\n                .start_datetime(\"2000-01-01T13:00:00-07:00\")\n                .build())\n            .name(\"Michele Muller\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"0cfd5d69-89b7-4206-8510-77d19ea83d49\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceSmartsheets:\n    type: airbyte:SourceSmartsheets\n    properties:\n      configuration:\n        credentials:\n          sourceSmartsheetsAuthorizationMethodApiAccessToken:\n            accessToken: '...my_access_token...'\n            authType: access_token\n        metadata_fields:\n          - sheetversion\n        source_type: smartsheets\n        spreadsheet_id: '...my_spreadsheet_id...'\n        start_datetime: 2000-01-01T13:00:00-07:00\n      name: Michele Muller\n      secretId: '...my_secret_id...'\n      workspaceId: 0cfd5d69-89b7-4206-8510-77d19ea83d49\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSmartsheetsConfiguration:SourceSmartsheetsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSmartsheetsConfiguration:SourceSmartsheetsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceSmartsheets resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceSmartsheetsConfiguration:SourceSmartsheetsConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceSnapchatMarketing:SourceSnapchatMarketing": {
            "description": "SourceSnapchatMarketing Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceSnapchatMarketing;\nimport com.pulumi.airbyte.SourceSnapchatMarketingArgs;\nimport com.pulumi.airbyte.inputs.SourceSnapchatMarketingConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceSnapchatmarketing = new SourceSnapchatMarketing(\"mySourceSnapchatmarketing\", SourceSnapchatMarketingArgs.builder()        \n            .configuration(SourceSnapchatMarketingConfigurationArgs.builder()\n                .client_id(\"...my_client_id...\")\n                .client_secret(\"...my_client_secret...\")\n                .end_date(\"2022-01-30\")\n                .refresh_token(\"...my_refresh_token...\")\n                .source_type(\"snapchat-marketing\")\n                .start_date(\"2022-01-01\")\n                .build())\n            .name(\"Hannah MacGyver\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"c1954545-e955-4dcc-985e-a4901c7c43ad\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceSnapchatmarketing:\n    type: airbyte:SourceSnapchatMarketing\n    properties:\n      configuration:\n        client_id: '...my_client_id...'\n        client_secret: '...my_client_secret...'\n        end_date: 2022-01-30\n        refresh_token: '...my_refresh_token...'\n        source_type: snapchat-marketing\n        start_date: 2022-01-01\n      name: Hannah MacGyver\n      secretId: '...my_secret_id...'\n      workspaceId: c1954545-e955-4dcc-985e-a4901c7c43ad\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSnapchatMarketingConfiguration:SourceSnapchatMarketingConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSnapchatMarketingConfiguration:SourceSnapchatMarketingConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceSnapchatMarketing resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceSnapchatMarketingConfiguration:SourceSnapchatMarketingConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceSnowflake:SourceSnowflake": {
            "description": "SourceSnowflake Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceSnowflake;\nimport com.pulumi.airbyte.SourceSnowflakeArgs;\nimport com.pulumi.airbyte.inputs.SourceSnowflakeConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceSnowflakeConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodOAuth20Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceSnowflake = new SourceSnowflake(\"mySourceSnowflake\", SourceSnowflakeArgs.builder()        \n            .configuration(SourceSnowflakeConfigurationArgs.builder()\n                .credentials(SourceSnowflakeConfigurationCredentialsArgs.builder()\n                    .sourceSnowflakeAuthorizationMethodOAuth20(SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodOAuth20Args.builder()\n                        .accessToken(\"...my_access_token...\")\n                        .authType(\"OAuth\")\n                        .clientId(\"...my_client_id...\")\n                        .clientSecret(\"...my_client_secret...\")\n                        .refreshToken(\"...my_refresh_token...\")\n                        .build())\n                    .build())\n                .database(\"AIRBYTE_DATABASE\")\n                .host(\"accountname.us-east-2.aws.snowflakecomputing.com\")\n                .jdbc_url_params(\"...my_jdbc_url_params...\")\n                .role(\"AIRBYTE_ROLE\")\n                .schema(\"AIRBYTE_SCHEMA\")\n                .source_type(\"snowflake\")\n                .warehouse(\"AIRBYTE_WAREHOUSE\")\n                .build())\n            .name(\"Betsy Osinski\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"84aba3d2-30ed-4f73-811a-115382bd7ed5\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceSnowflake:\n    type: airbyte:SourceSnowflake\n    properties:\n      configuration:\n        credentials:\n          sourceSnowflakeAuthorizationMethodOAuth20:\n            accessToken: '...my_access_token...'\n            authType: OAuth\n            clientId: '...my_client_id...'\n            clientSecret: '...my_client_secret...'\n            refreshToken: '...my_refresh_token...'\n        database: AIRBYTE_DATABASE\n        host: accountname.us-east-2.aws.snowflakecomputing.com\n        jdbc_url_params: '...my_jdbc_url_params...'\n        role: AIRBYTE_ROLE\n        schema: AIRBYTE_SCHEMA\n        source_type: snowflake\n        warehouse: AIRBYTE_WAREHOUSE\n      name: Betsy Osinski\n      secretId: '...my_secret_id...'\n      workspaceId: 84aba3d2-30ed-4f73-811a-115382bd7ed5\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSnowflakeConfiguration:SourceSnowflakeConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSnowflakeConfiguration:SourceSnowflakeConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceSnowflake resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceSnowflakeConfiguration:SourceSnowflakeConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceSonarCloud:SourceSonarCloud": {
            "description": "SourceSonarCloud Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceSonarCloud;\nimport com.pulumi.airbyte.SourceSonarCloudArgs;\nimport com.pulumi.airbyte.inputs.SourceSonarCloudConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceSonarcloud = new SourceSonarCloud(\"mySourceSonarcloud\", SourceSonarCloudArgs.builder()        \n            .configuration(SourceSonarCloudConfigurationArgs.builder()\n                .component_keys(\"{ \\\"see\\\": \\\"documentation\\\" }\")\n                .end_date(\"YYYY-MM-DD\")\n                .organization(\"airbyte\")\n                .source_type(\"sonar-cloud\")\n                .start_date(\"YYYY-MM-DD\")\n                .user_token(\"...my_user_token...\")\n                .build())\n            .name(\"Judy Bogan\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"8f4d7396-564c-420a-8711-a961d24a7dbb\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceSonarcloud:\n    type: airbyte:SourceSonarCloud\n    properties:\n      configuration:\n        component_keys:\n          - '{ \"see\": \"documentation\" }'\n        end_date: YYYY-MM-DD\n        organization: airbyte\n        source_type: sonar-cloud\n        start_date: YYYY-MM-DD\n        user_token: '...my_user_token...'\n      name: Judy Bogan\n      secretId: '...my_secret_id...'\n      workspaceId: 8f4d7396-564c-420a-8711-a961d24a7dbb\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSonarCloudConfiguration:SourceSonarCloudConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSonarCloudConfiguration:SourceSonarCloudConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceSonarCloud resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceSonarCloudConfiguration:SourceSonarCloudConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceSpaceXApi:SourceSpaceXApi": {
            "description": "SourceSpacexAPI Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceSpaceXApi;\nimport com.pulumi.airbyte.SourceSpaceXApiArgs;\nimport com.pulumi.airbyte.inputs.SourceSpaceXApiConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceSpacexapi = new SourceSpaceXApi(\"mySourceSpacexapi\", SourceSpaceXApiArgs.builder()        \n            .configuration(SourceSpaceXApiConfigurationArgs.builder()\n                .id(\"8f532d89-2cf7-4812-8b51-2c878240bf54\")\n                .options(\"...my_options...\")\n                .source_type(\"spacex-api\")\n                .build())\n            .name(\"Randal Lockman\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"8f1bf0bc-8e1f-4206-95d8-31d0081090f6\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceSpacexapi:\n    type: airbyte:SourceSpaceXApi\n    properties:\n      configuration:\n        id: 8f532d89-2cf7-4812-8b51-2c878240bf54\n        options: '...my_options...'\n        source_type: spacex-api\n      name: Randal Lockman\n      secretId: '...my_secret_id...'\n      workspaceId: 8f1bf0bc-8e1f-4206-95d8-31d0081090f6\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSpaceXApiConfiguration:SourceSpaceXApiConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSpaceXApiConfiguration:SourceSpaceXApiConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceSpaceXApi resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceSpaceXApiConfiguration:SourceSpaceXApiConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceSquare:SourceSquare": {
            "description": "SourceSquare Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceSquare;\nimport com.pulumi.airbyte.SourceSquareArgs;\nimport com.pulumi.airbyte.inputs.SourceSquareConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceSquareConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceSquareConfigurationCredentialsSourceSquareAuthenticationApiKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceSquare = new SourceSquare(\"mySourceSquare\", SourceSquareArgs.builder()        \n            .configuration(SourceSquareConfigurationArgs.builder()\n                .credentials(SourceSquareConfigurationCredentialsArgs.builder()\n                    .sourceSquareAuthenticationApiKey(SourceSquareConfigurationCredentialsSourceSquareAuthenticationApiKeyArgs.builder()\n                        .apiKey(\"...my_api_key...\")\n                        .authType(\"API Key\")\n                        .build())\n                    .build())\n                .include_deleted_objects(false)\n                .is_sandbox(false)\n                .source_type(\"square\")\n                .start_date(\"2022-08-13\")\n                .build())\n            .name(\"Josephine Yundt\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"681c5768-dce7-4424-89a2-15e08601489a\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceSquare:\n    type: airbyte:SourceSquare\n    properties:\n      configuration:\n        credentials:\n          sourceSquareAuthenticationApiKey:\n            apiKey: '...my_api_key...'\n            authType: API Key\n        include_deleted_objects: false\n        is_sandbox: false\n        source_type: square\n        start_date: 2022-08-13\n      name: Josephine Yundt\n      secretId: '...my_secret_id...'\n      workspaceId: 681c5768-dce7-4424-89a2-15e08601489a\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSquareConfiguration:SourceSquareConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSquareConfiguration:SourceSquareConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceSquare resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceSquareConfiguration:SourceSquareConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceStrava:SourceStrava": {
            "description": "SourceStrava Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceStrava;\nimport com.pulumi.airbyte.SourceStravaArgs;\nimport com.pulumi.airbyte.inputs.SourceStravaConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceStrava = new SourceStrava(\"mySourceStrava\", SourceStravaArgs.builder()        \n            .configuration(SourceStravaConfigurationArgs.builder()\n                .athlete_id(17831421)\n                .auth_type(\"Client\")\n                .client_id(\"12345\")\n                .client_secret(\"fc6243f283e51f6ca989aab298b17da125496f50\")\n                .refresh_token(\"fc6243f283e51f6ca989aab298b17da125496f50\")\n                .source_type(\"strava\")\n                .start_date(\"2021-03-01T00:00:00Z\")\n                .build())\n            .name(\"Henrietta Durgan\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"3dd9dda3-3dcd-4634-83e4-a7a98e4df37e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceStrava:\n    type: airbyte:SourceStrava\n    properties:\n      configuration:\n        athlete_id: 1.7831421e+07\n        auth_type: Client\n        client_id: '12345'\n        client_secret: fc6243f283e51f6ca989aab298b17da125496f50\n        refresh_token: fc6243f283e51f6ca989aab298b17da125496f50\n        source_type: strava\n        start_date: 2021-03-01T00:00:00Z\n      name: Henrietta Durgan\n      secretId: '...my_secret_id...'\n      workspaceId: 3dd9dda3-3dcd-4634-83e4-a7a98e4df37e\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceStravaConfiguration:SourceStravaConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceStravaConfiguration:SourceStravaConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceStrava resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceStravaConfiguration:SourceStravaConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceStripe:SourceStripe": {
            "description": "SourceStripe Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceStripe;\nimport com.pulumi.airbyte.SourceStripeArgs;\nimport com.pulumi.airbyte.inputs.SourceStripeConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceStripe = new SourceStripe(\"mySourceStripe\", SourceStripeArgs.builder()        \n            .configuration(SourceStripeConfigurationArgs.builder()\n                .account_id(\"...my_account_id...\")\n                .client_secret(\"...my_client_secret...\")\n                .lookback_window_days(3)\n                .slice_range(10)\n                .source_type(\"stripe\")\n                .start_date(\"2017-01-25T00:00:00Z\")\n                .build())\n            .name(\"Bernice Schultz I\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"e13a4823-1090-47bd-b54c-092bd734f024\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceStripe:\n    type: airbyte:SourceStripe\n    properties:\n      configuration:\n        account_id: '...my_account_id...'\n        client_secret: '...my_client_secret...'\n        lookback_window_days: 3\n        slice_range: 10\n        source_type: stripe\n        start_date: 2017-01-25T00:00:00Z\n      name: Bernice Schultz I\n      secretId: '...my_secret_id...'\n      workspaceId: e13a4823-1090-47bd-b54c-092bd734f024\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceStripeConfiguration:SourceStripeConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceStripeConfiguration:SourceStripeConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceStripe resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceStripeConfiguration:SourceStripeConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceSurveySparrow:SourceSurveySparrow": {
            "description": "SourceSurveySparrow Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceSurveySparrow;\nimport com.pulumi.airbyte.SourceSurveySparrowArgs;\nimport com.pulumi.airbyte.inputs.SourceSurveySparrowConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceSurveySparrowConfigurationRegionArgs;\nimport com.pulumi.airbyte.inputs.SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlEuBasedAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceSurveysparrow = new SourceSurveySparrow(\"mySourceSurveysparrow\", SourceSurveySparrowArgs.builder()        \n            .configuration(SourceSurveySparrowConfigurationArgs.builder()\n                .access_token(\"...my_access_token...\")\n                .region(SourceSurveySparrowConfigurationRegionArgs.builder()\n                    .sourceSurveySparrowBaseUrlEuBasedAccount(SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlEuBasedAccountArgs.builder()\n                        .urlBase(\"https://eu-api.surveysparrow.com/v3\")\n                        .build())\n                    .build())\n                .source_type(\"survey-sparrow\")\n                .survey_id(\"{ \\\"see\\\": \\\"documentation\\\" }\")\n                .build())\n            .name(\"Merle Keebler Jr.\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"e9db3ad4-c6b0-4310-8d9c-337473082b94\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceSurveysparrow:\n    type: airbyte:SourceSurveySparrow\n    properties:\n      configuration:\n        access_token: '...my_access_token...'\n        region:\n          sourceSurveySparrowBaseUrlEuBasedAccount:\n            urlBase: https://eu-api.surveysparrow.com/v3\n        source_type: survey-sparrow\n        survey_id:\n          - '{ \"see\": \"documentation\" }'\n      name: Merle Keebler Jr.\n      secretId: '...my_secret_id...'\n      workspaceId: e9db3ad4-c6b0-4310-8d9c-337473082b94\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSurveySparrowConfiguration:SourceSurveySparrowConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSurveySparrowConfiguration:SourceSurveySparrowConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceSurveySparrow resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceSurveySparrowConfiguration:SourceSurveySparrowConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceSurveymonkey:SourceSurveymonkey": {
            "description": "SourceSurveymonkey Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceSurveymonkey;\nimport com.pulumi.airbyte.SourceSurveymonkeyArgs;\nimport com.pulumi.airbyte.inputs.SourceSurveymonkeyConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceSurveymonkeyConfigurationCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceSurveymonkey = new SourceSurveymonkey(\"mySourceSurveymonkey\", SourceSurveymonkeyArgs.builder()        \n            .configuration(SourceSurveymonkeyConfigurationArgs.builder()\n                .credentials(SourceSurveymonkeyConfigurationCredentialsArgs.builder()\n                    .accessToken(\"...my_access_token...\")\n                    .authMethod(\"oauth2.0\")\n                    .clientId(\"...my_client_id...\")\n                    .clientSecret(\"...my_client_secret...\")\n                    .build())\n                .origin(\"USA\")\n                .source_type(\"surveymonkey\")\n                .start_date(\"2021-01-01T00:00:00Z\")\n                .survey_ids(\"...\")\n                .build())\n            .name(\"Cecil Wintheiser\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"b20fe5d9-11cb-4fe7-89ca-f45a27f69e2c\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceSurveymonkey:\n    type: airbyte:SourceSurveymonkey\n    properties:\n      configuration:\n        credentials:\n          accessToken: '...my_access_token...'\n          authMethod: oauth2.0\n          clientId: '...my_client_id...'\n          clientSecret: '...my_client_secret...'\n        origin: USA\n        source_type: surveymonkey\n        start_date: 2021-01-01T00:00:00Z\n        survey_ids:\n          - '...'\n      name: Cecil Wintheiser\n      secretId: '...my_secret_id...'\n      workspaceId: b20fe5d9-11cb-4fe7-89ca-f45a27f69e2c\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSurveymonkeyConfiguration:SourceSurveymonkeyConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceSurveymonkeyConfiguration:SourceSurveymonkeyConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceSurveymonkey resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceSurveymonkeyConfiguration:SourceSurveymonkeyConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceTempo:SourceTempo": {
            "description": "SourceTempo Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceTempo;\nimport com.pulumi.airbyte.SourceTempoArgs;\nimport com.pulumi.airbyte.inputs.SourceTempoConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceTempo = new SourceTempo(\"mySourceTempo\", SourceTempoArgs.builder()        \n            .configuration(SourceTempoConfigurationArgs.builder()\n                .api_token(\"...my_api_token...\")\n                .source_type(\"tempo\")\n                .build())\n            .name(\"Alan O'Conner DVM\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"d5671e9c-3263-450a-8671-43789ce0e991\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceTempo:\n    type: airbyte:SourceTempo\n    properties:\n      configuration:\n        api_token: '...my_api_token...'\n        source_type: tempo\n      name: Alan O'Conner DVM\n      secretId: '...my_secret_id...'\n      workspaceId: d5671e9c-3263-450a-8671-43789ce0e991\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceTempoConfiguration:SourceTempoConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceTempoConfiguration:SourceTempoConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceTempo resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceTempoConfiguration:SourceTempoConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceTheGuardianApi:SourceTheGuardianApi": {
            "description": "SourceTheGuardianAPI Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceTheGuardianApi;\nimport com.pulumi.airbyte.SourceTheGuardianApiArgs;\nimport com.pulumi.airbyte.inputs.SourceTheGuardianApiConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceTheguardianapi = new SourceTheGuardianApi(\"mySourceTheguardianapi\", SourceTheGuardianApiArgs.builder()        \n            .configuration(SourceTheGuardianApiConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .end_date(\"YYYY-MM-DD\")\n                .query(\"environment AND political\")\n                .section(\"technology\")\n                .source_type(\"the-guardian-api\")\n                .start_date(\"YYYY-MM-DD\")\n                .tag(\"environment/recycling\")\n                .build())\n            .name(\"Arturo Fay\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"4c0252fe-3b4b-44db-8b77-8ebb6e1d2cf5\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceTheguardianapi:\n    type: airbyte:SourceTheGuardianApi\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        end_date: YYYY-MM-DD\n        query: environment AND political\n        section: technology\n        source_type: the-guardian-api\n        start_date: YYYY-MM-DD\n        tag: environment/recycling\n      name: Arturo Fay\n      secretId: '...my_secret_id...'\n      workspaceId: 4c0252fe-3b4b-44db-8b77-8ebb6e1d2cf5\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceTheGuardianApiConfiguration:SourceTheGuardianApiConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceTheGuardianApiConfiguration:SourceTheGuardianApiConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceTheGuardianApi resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceTheGuardianApiConfiguration:SourceTheGuardianApiConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceTiktokMarketing:SourceTiktokMarketing": {
            "description": "SourceTiktokMarketing Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceTiktokMarketing;\nimport com.pulumi.airbyte.SourceTiktokMarketingArgs;\nimport com.pulumi.airbyte.inputs.SourceTiktokMarketingConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceTiktokMarketingConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodOAuth20Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceTiktokmarketing = new SourceTiktokMarketing(\"mySourceTiktokmarketing\", SourceTiktokMarketingArgs.builder()        \n            .configuration(SourceTiktokMarketingConfigurationArgs.builder()\n                .attribution_window(0)\n                .credentials(SourceTiktokMarketingConfigurationCredentialsArgs.builder()\n                    .sourceTiktokMarketingAuthenticationMethodOAuth20(SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodOAuth20Args.builder()\n                        .accessToken(\"...my_access_token...\")\n                        .advertiserId(\"...my_advertiser_id...\")\n                        .appId(\"...my_app_id...\")\n                        .authType(\"oauth2.0\")\n                        .secret(\"...my_secret...\")\n                        .build())\n                    .build())\n                .end_date(\"2022-04-16\")\n                .include_deleted(true)\n                .source_type(\"tiktok-marketing\")\n                .start_date(\"2020-11-25\")\n                .build())\n            .name(\"Vicky Reichert\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"635d5e65-da02-48c3-a951-a1e30fda9664\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceTiktokmarketing:\n    type: airbyte:SourceTiktokMarketing\n    properties:\n      configuration:\n        attribution_window: 0\n        credentials:\n          sourceTiktokMarketingAuthenticationMethodOAuth20:\n            accessToken: '...my_access_token...'\n            advertiserId: '...my_advertiser_id...'\n            appId: '...my_app_id...'\n            authType: oauth2.0\n            secret: '...my_secret...'\n        end_date: 2022-04-16\n        include_deleted: true\n        source_type: tiktok-marketing\n        start_date: 2020-11-25\n      name: Vicky Reichert\n      secretId: '...my_secret_id...'\n      workspaceId: 635d5e65-da02-48c3-a951-a1e30fda9664\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceTiktokMarketingConfiguration:SourceTiktokMarketingConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceTiktokMarketingConfiguration:SourceTiktokMarketingConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceTiktokMarketing resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceTiktokMarketingConfiguration:SourceTiktokMarketingConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceTodoist:SourceTodoist": {
            "description": "SourceTodoist Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceTodoist;\nimport com.pulumi.airbyte.SourceTodoistArgs;\nimport com.pulumi.airbyte.inputs.SourceTodoistConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceTodoist = new SourceTodoist(\"mySourceTodoist\", SourceTodoistArgs.builder()        \n            .configuration(SourceTodoistConfigurationArgs.builder()\n                .source_type(\"todoist\")\n                .token(\"...my_token...\")\n                .build())\n            .name(\"Tracy Senger\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"78673e13-a12a-46b9-9249-4594487f5c84\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceTodoist:\n    type: airbyte:SourceTodoist\n    properties:\n      configuration:\n        source_type: todoist\n        token: '...my_token...'\n      name: Tracy Senger\n      secretId: '...my_secret_id...'\n      workspaceId: 78673e13-a12a-46b9-9249-4594487f5c84\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceTodoistConfiguration:SourceTodoistConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceTodoistConfiguration:SourceTodoistConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceTodoist resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceTodoistConfiguration:SourceTodoistConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceTrello:SourceTrello": {
            "description": "SourceTrello Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceTrello;\nimport com.pulumi.airbyte.SourceTrelloArgs;\nimport com.pulumi.airbyte.inputs.SourceTrelloConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceTrello = new SourceTrello(\"mySourceTrello\", SourceTrelloArgs.builder()        \n            .configuration(SourceTrelloConfigurationArgs.builder()\n                .board_ids(\"...\")\n                .key(\"...my_key...\")\n                .source_type(\"trello\")\n                .start_date(\"2021-03-01T00:00:00Z\")\n                .token(\"...my_token...\")\n                .build())\n            .name(\"Rosemary Rice\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"b3cdf641-5b04-449f-9df1-3f4eedbe78bf\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceTrello:\n    type: airbyte:SourceTrello\n    properties:\n      configuration:\n        board_ids:\n          - '...'\n        key: '...my_key...'\n        source_type: trello\n        start_date: 2021-03-01T00:00:00Z\n        token: '...my_token...'\n      name: Rosemary Rice\n      secretId: '...my_secret_id...'\n      workspaceId: b3cdf641-5b04-449f-9df1-3f4eedbe78bf\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceTrelloConfiguration:SourceTrelloConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceTrelloConfiguration:SourceTrelloConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceTrello resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceTrelloConfiguration:SourceTrelloConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceTrustpilot:SourceTrustpilot": {
            "description": "SourceTrustpilot Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceTrustpilot;\nimport com.pulumi.airbyte.SourceTrustpilotArgs;\nimport com.pulumi.airbyte.inputs.SourceTrustpilotConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceTrustpilotConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodApiKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceTrustpilot = new SourceTrustpilot(\"mySourceTrustpilot\", SourceTrustpilotArgs.builder()        \n            .configuration(SourceTrustpilotConfigurationArgs.builder()\n                .business_units(\"...\")\n                .credentials(SourceTrustpilotConfigurationCredentialsArgs.builder()\n                    .sourceTrustpilotAuthorizationMethodApiKey(SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodApiKeyArgs.builder()\n                        .authType(\"apikey\")\n                        .clientId(\"...my_client_id...\")\n                        .build())\n                    .build())\n                .source_type(\"trustpilot\")\n                .start_date(\"%Y-%m-%dT%H:%M:%S\")\n                .build())\n            .name(\"Betty Jast\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"5894ea76-3d5c-4727-95b7-85148d6d549e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceTrustpilot:\n    type: airbyte:SourceTrustpilot\n    properties:\n      configuration:\n        business_units:\n          - '...'\n        credentials:\n          sourceTrustpilotAuthorizationMethodApiKey:\n            authType: apikey\n            clientId: '...my_client_id...'\n        source_type: trustpilot\n        start_date: '%Y-%m-%dT%H:%M:%S'\n      name: Betty Jast\n      secretId: '...my_secret_id...'\n      workspaceId: 5894ea76-3d5c-4727-95b7-85148d6d549e\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceTrustpilotConfiguration:SourceTrustpilotConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceTrustpilotConfiguration:SourceTrustpilotConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceTrustpilot resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceTrustpilotConfiguration:SourceTrustpilotConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceTvmazeSchedule:SourceTvmazeSchedule": {
            "description": "SourceTvmazeSchedule Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceTvmazeSchedule;\nimport com.pulumi.airbyte.SourceTvmazeScheduleArgs;\nimport com.pulumi.airbyte.inputs.SourceTvmazeScheduleConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceTvmazeschedule = new SourceTvmazeSchedule(\"mySourceTvmazeschedule\", SourceTvmazeScheduleArgs.builder()        \n            .configuration(SourceTvmazeScheduleConfigurationArgs.builder()\n                .domestic_schedule_country_code(\"US\")\n                .end_date(\"...my_end_date...\")\n                .source_type(\"tvmaze-schedule\")\n                .start_date(\"...my_start_date...\")\n                .web_schedule_country_code(\"GB\")\n                .build())\n            .name(\"Audrey Rippin\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"bc0f970c-42fc-49f4-8442-25e75b796065\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceTvmazeschedule:\n    type: airbyte:SourceTvmazeSchedule\n    properties:\n      configuration:\n        domestic_schedule_country_code: US\n        end_date: '...my_end_date...'\n        source_type: tvmaze-schedule\n        start_date: '...my_start_date...'\n        web_schedule_country_code: GB\n      name: Audrey Rippin\n      secretId: '...my_secret_id...'\n      workspaceId: bc0f970c-42fc-49f4-8442-25e75b796065\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceTvmazeScheduleConfiguration:SourceTvmazeScheduleConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceTvmazeScheduleConfiguration:SourceTvmazeScheduleConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceTvmazeSchedule resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceTvmazeScheduleConfiguration:SourceTvmazeScheduleConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceTwilio:SourceTwilio": {
            "description": "SourceTwilio Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceTwilio;\nimport com.pulumi.airbyte.SourceTwilioArgs;\nimport com.pulumi.airbyte.inputs.SourceTwilioConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceTwilio = new SourceTwilio(\"mySourceTwilio\", SourceTwilioArgs.builder()        \n            .configuration(SourceTwilioConfigurationArgs.builder()\n                .account_sid(\"...my_account_sid...\")\n                .auth_token(\"...my_auth_token...\")\n                .lookback_window(60)\n                .source_type(\"twilio\")\n                .start_date(\"2020-10-01T00:00:00Z\")\n                .build())\n            .name(\"Oliver Kautzer\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"3b90a1b8-c95b-4e12-94b7-39f4fe77210d\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceTwilio:\n    type: airbyte:SourceTwilio\n    properties:\n      configuration:\n        account_sid: '...my_account_sid...'\n        auth_token: '...my_auth_token...'\n        lookback_window: 60\n        source_type: twilio\n        start_date: 2020-10-01T00:00:00Z\n      name: Oliver Kautzer\n      secretId: '...my_secret_id...'\n      workspaceId: 3b90a1b8-c95b-4e12-94b7-39f4fe77210d\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceTwilioConfiguration:SourceTwilioConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceTwilioConfiguration:SourceTwilioConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceTwilio resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceTwilioConfiguration:SourceTwilioConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceTwilioTaskrouter:SourceTwilioTaskrouter": {
            "description": "SourceTwilioTaskrouter Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceTwilioTaskrouter;\nimport com.pulumi.airbyte.SourceTwilioTaskrouterArgs;\nimport com.pulumi.airbyte.inputs.SourceTwilioTaskrouterConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceTwiliotaskrouter = new SourceTwilioTaskrouter(\"mySourceTwiliotaskrouter\", SourceTwilioTaskrouterArgs.builder()        \n            .configuration(SourceTwilioTaskrouterConfigurationArgs.builder()\n                .account_sid(\"...my_account_sid...\")\n                .auth_token(\"...my_auth_token...\")\n                .source_type(\"twilio-taskrouter\")\n                .build())\n            .name(\"Marta Hodkiewicz\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"8c99c722-d2bc-40f9-8087-d9caae042dd7\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceTwiliotaskrouter:\n    type: airbyte:SourceTwilioTaskrouter\n    properties:\n      configuration:\n        account_sid: '...my_account_sid...'\n        auth_token: '...my_auth_token...'\n        source_type: twilio-taskrouter\n      name: Marta Hodkiewicz\n      secretId: '...my_secret_id...'\n      workspaceId: 8c99c722-d2bc-40f9-8087-d9caae042dd7\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceTwilioTaskrouterConfiguration:SourceTwilioTaskrouterConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceTwilioTaskrouterConfiguration:SourceTwilioTaskrouterConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceTwilioTaskrouter resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceTwilioTaskrouterConfiguration:SourceTwilioTaskrouterConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceTwitter:SourceTwitter": {
            "description": "SourceTwitter Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceTwitter;\nimport com.pulumi.airbyte.SourceTwitterArgs;\nimport com.pulumi.airbyte.inputs.SourceTwitterConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceTwitter = new SourceTwitter(\"mySourceTwitter\", SourceTwitterArgs.builder()        \n            .configuration(SourceTwitterConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .end_date(\"2020-12-31T16:49:13.658Z\")\n                .query(\"...my_query...\")\n                .source_type(\"twitter\")\n                .start_date(\"2021-05-21T04:49:52.479Z\")\n                .build())\n            .name(\"Marco Gleichner\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"a1cfe9e1-5df9-4039-87f3-7831983d42e5\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceTwitter:\n    type: airbyte:SourceTwitter\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        end_date: 2020-12-31T16:49:13.658Z\n        query: '...my_query...'\n        source_type: twitter\n        start_date: 2021-05-21T04:49:52.479Z\n      name: Marco Gleichner\n      secretId: '...my_secret_id...'\n      workspaceId: a1cfe9e1-5df9-4039-87f3-7831983d42e5\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceTwitterConfiguration:SourceTwitterConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceTwitterConfiguration:SourceTwitterConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceTwitter resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceTwitterConfiguration:SourceTwitterConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceTypeform:SourceTypeform": {
            "description": "SourceTypeform Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceTypeform;\nimport com.pulumi.airbyte.SourceTypeformArgs;\nimport com.pulumi.airbyte.inputs.SourceTypeformConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceTypeformConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodOAuth20Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceTypeform = new SourceTypeform(\"mySourceTypeform\", SourceTypeformArgs.builder()        \n            .configuration(SourceTypeformConfigurationArgs.builder()\n                .credentials(SourceTypeformConfigurationCredentialsArgs.builder()\n                    .sourceTypeformAuthorizationMethodOAuth20(SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodOAuth20Args.builder()\n                        .accessToken(\"...my_access_token...\")\n                        .authType(\"oauth2.0\")\n                        .clientId(\"...my_client_id...\")\n                        .clientSecret(\"...my_client_secret...\")\n                        .refreshToken(\"...my_refresh_token...\")\n                        .tokenExpiryDate(\"2022-05-15T15:21:36.066Z\")\n                        .build())\n                    .build())\n                .form_ids(\"...\")\n                .source_type(\"typeform\")\n                .start_date(\"2021-03-01T00:00:00Z\")\n                .build())\n            .name(\"Lucy Johnson\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"7c50233c-1471-4d51-aaa6-ddf5abd6487c\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceTypeform:\n    type: airbyte:SourceTypeform\n    properties:\n      configuration:\n        credentials:\n          sourceTypeformAuthorizationMethodOAuth20:\n            accessToken: '...my_access_token...'\n            authType: oauth2.0\n            clientId: '...my_client_id...'\n            clientSecret: '...my_client_secret...'\n            refreshToken: '...my_refresh_token...'\n            tokenExpiryDate: 2022-05-15T15:21:36.066Z\n        form_ids:\n          - '...'\n        source_type: typeform\n        start_date: 2021-03-01T00:00:00Z\n      name: Lucy Johnson\n      secretId: '...my_secret_id...'\n      workspaceId: 7c50233c-1471-4d51-aaa6-ddf5abd6487c\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceTypeformConfiguration:SourceTypeformConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceTypeformConfiguration:SourceTypeformConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceTypeform resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceTypeformConfiguration:SourceTypeformConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceUsCensus:SourceUsCensus": {
            "description": "SourceUsCensus Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceUsCensus;\nimport com.pulumi.airbyte.SourceUsCensusArgs;\nimport com.pulumi.airbyte.inputs.SourceUsCensusConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceUscensus = new SourceUsCensus(\"mySourceUscensus\", SourceUsCensusArgs.builder()        \n            .configuration(SourceUsCensusConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .query_params(\"get=NAME,NAICS2017_LABEL,LFO_LABEL,EMPSZES_LABEL,ESTAB,PAYANN,PAYQTR1,EMP\u0026for=us:*\u0026NAICS2017=72\u0026LFO=001\u0026EMPSZES=001\")\n                .query_path(\"data/timeseries/healthins/sahie\")\n                .source_type(\"us-census\")\n                .build())\n            .name(\"Brandon Rogahn\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"2a00bef6-9e10-4015-b630-bda7afded84a\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceUscensus:\n    type: airbyte:SourceUsCensus\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        query_params: get=NAME,NAICS2017_LABEL,LFO_LABEL,EMPSZES_LABEL,ESTAB,PAYANN,PAYQTR1,EMP\u0026for=us:*\u0026NAICS2017=72\u0026LFO=001\u0026EMPSZES=001\n        query_path: data/timeseries/healthins/sahie\n        source_type: us-census\n      name: Brandon Rogahn\n      secretId: '...my_secret_id...'\n      workspaceId: 2a00bef6-9e10-4015-b630-bda7afded84a\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceUsCensusConfiguration:SourceUsCensusConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceUsCensusConfiguration:SourceUsCensusConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceUsCensus resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceUsCensusConfiguration:SourceUsCensusConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceVantage:SourceVantage": {
            "description": "SourceVantage Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceVantage;\nimport com.pulumi.airbyte.SourceVantageArgs;\nimport com.pulumi.airbyte.inputs.SourceVantageConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceVantage = new SourceVantage(\"mySourceVantage\", SourceVantageArgs.builder()        \n            .configuration(SourceVantageConfigurationArgs.builder()\n                .access_token(\"...my_access_token...\")\n                .source_type(\"vantage\")\n                .build())\n            .name(\"Veronica Pagac Sr.\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"38e1a735-ac26-4ae3-bbef-971a8f46bca1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceVantage:\n    type: airbyte:SourceVantage\n    properties:\n      configuration:\n        access_token: '...my_access_token...'\n        source_type: vantage\n      name: Veronica Pagac Sr.\n      secretId: '...my_secret_id...'\n      workspaceId: 38e1a735-ac26-4ae3-bbef-971a8f46bca1\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceVantageConfiguration:SourceVantageConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceVantageConfiguration:SourceVantageConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceVantage resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceVantageConfiguration:SourceVantageConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceWebflow:SourceWebflow": {
            "description": "SourceWebflow Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceWebflow;\nimport com.pulumi.airbyte.SourceWebflowArgs;\nimport com.pulumi.airbyte.inputs.SourceWebflowConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceWebflow = new SourceWebflow(\"mySourceWebflow\", SourceWebflowArgs.builder()        \n            .configuration(SourceWebflowConfigurationArgs.builder()\n                .api_key(\"a very long hex sequence\")\n                .site_id(\"a relatively long hex sequence\")\n                .source_type(\"webflow\")\n                .build())\n            .name(\"Jennifer Johnson\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"965b711d-08cf-488e-89f7-b99a550a656e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceWebflow:\n    type: airbyte:SourceWebflow\n    properties:\n      configuration:\n        api_key: a very long hex sequence\n        site_id: a relatively long hex sequence\n        source_type: webflow\n      name: Jennifer Johnson\n      secretId: '...my_secret_id...'\n      workspaceId: 965b711d-08cf-488e-89f7-b99a550a656e\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceWebflowConfiguration:SourceWebflowConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceWebflowConfiguration:SourceWebflowConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceWebflow resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceWebflowConfiguration:SourceWebflowConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceWhiskyHunter:SourceWhiskyHunter": {
            "description": "SourceWhiskyHunter Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceWhiskyHunter;\nimport com.pulumi.airbyte.SourceWhiskyHunterArgs;\nimport com.pulumi.airbyte.inputs.SourceWhiskyHunterConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceWhiskyhunter = new SourceWhiskyHunter(\"mySourceWhiskyhunter\", SourceWhiskyHunterArgs.builder()        \n            .configuration(SourceWhiskyHunterConfigurationArgs.builder()\n                .source_type(\"whisky-hunter\")\n                .build())\n            .name(\"Curtis Dickens\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"b0ce8aa6-5432-4a98-aeb7-e14ca5640891\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceWhiskyhunter:\n    type: airbyte:SourceWhiskyHunter\n    properties:\n      configuration:\n        source_type: whisky-hunter\n      name: Curtis Dickens\n      secretId: '...my_secret_id...'\n      workspaceId: b0ce8aa6-5432-4a98-aeb7-e14ca5640891\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceWhiskyHunterConfiguration:SourceWhiskyHunterConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceWhiskyHunterConfiguration:SourceWhiskyHunterConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceWhiskyHunter resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceWhiskyHunterConfiguration:SourceWhiskyHunterConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceWikipediaPageviews:SourceWikipediaPageviews": {
            "description": "SourceWikipediaPageviews Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceWikipediaPageviews;\nimport com.pulumi.airbyte.SourceWikipediaPageviewsArgs;\nimport com.pulumi.airbyte.inputs.SourceWikipediaPageviewsConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceWikipediapageviews = new SourceWikipediaPageviews(\"mySourceWikipediapageviews\", SourceWikipediaPageviewsArgs.builder()        \n            .configuration(SourceWikipediaPageviewsConfigurationArgs.builder()\n                .access(\"desktop\")\n                .agent(\"all-agents\")\n                .article(\"Are_You_the_One%3F\")\n                .country(\"FR\")\n                .end(\"...my_end...\")\n                .project(\"www.mediawiki.org\")\n                .source_type(\"wikipedia-pageviews\")\n                .start(\"...my_start...\")\n                .build())\n            .name(\"Catherine Mitchell\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"8f88ece7-bf90-44e0-9105-d38908162c6b\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceWikipediapageviews:\n    type: airbyte:SourceWikipediaPageviews\n    properties:\n      configuration:\n        access: desktop\n        agent: all-agents\n        article: Are_You_the_One%3F\n        country: FR\n        end: '...my_end...'\n        project: www.mediawiki.org\n        source_type: wikipedia-pageviews\n        start: '...my_start...'\n      name: Catherine Mitchell\n      secretId: '...my_secret_id...'\n      workspaceId: 8f88ece7-bf90-44e0-9105-d38908162c6b\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceWikipediaPageviewsConfiguration:SourceWikipediaPageviewsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceWikipediaPageviewsConfiguration:SourceWikipediaPageviewsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceWikipediaPageviews resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceWikipediaPageviewsConfiguration:SourceWikipediaPageviewsConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceWoocommerce:SourceWoocommerce": {
            "description": "SourceWoocommerce Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceWoocommerce;\nimport com.pulumi.airbyte.SourceWoocommerceArgs;\nimport com.pulumi.airbyte.inputs.SourceWoocommerceConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceWoocommerce = new SourceWoocommerce(\"mySourceWoocommerce\", SourceWoocommerceArgs.builder()        \n            .configuration(SourceWoocommerceConfigurationArgs.builder()\n                .api_key(\"...my_api_key...\")\n                .api_secret(\"...my_api_secret...\")\n                .shop(\"...my_shop...\")\n                .source_type(\"woocommerce\")\n                .start_date(\"2021-01-01\")\n                .build())\n            .name(\"Dr. Mattie Nader\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"57b7d03a-1480-4f8d-a30f-069d810618d9\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceWoocommerce:\n    type: airbyte:SourceWoocommerce\n    properties:\n      configuration:\n        api_key: '...my_api_key...'\n        api_secret: '...my_api_secret...'\n        shop: '...my_shop...'\n        source_type: woocommerce\n        start_date: 2021-01-01\n      name: Dr. Mattie Nader\n      secretId: '...my_secret_id...'\n      workspaceId: 57b7d03a-1480-4f8d-a30f-069d810618d9\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceWoocommerceConfiguration:SourceWoocommerceConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceWoocommerceConfiguration:SourceWoocommerceConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceWoocommerce resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceWoocommerceConfiguration:SourceWoocommerceConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceXero:SourceXero": {
            "description": "SourceXero Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceXero;\nimport com.pulumi.airbyte.SourceXeroArgs;\nimport com.pulumi.airbyte.inputs.SourceXeroConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceXeroConfigurationAuthenticationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceXero = new SourceXero(\"mySourceXero\", SourceXeroArgs.builder()        \n            .configuration(SourceXeroConfigurationArgs.builder()\n                .authentication(SourceXeroConfigurationAuthenticationArgs.builder()\n                    .accessToken(\"...my_access_token...\")\n                    .clientId(\"...my_client_id...\")\n                    .clientSecret(\"...my_client_secret...\")\n                    .refreshToken(\"...my_refresh_token...\")\n                    .tokenExpiryDate(\"...my_token_expiry_date...\")\n                    .build())\n                .source_type(\"xero\")\n                .start_date(\"2022-03-01T00:00:00Z\")\n                .tenant_id(\"...my_tenant_id...\")\n                .build())\n            .name(\"Geraldine Crist\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"7510da80-3122-492c-861c-2a702bb97ee1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceXero:\n    type: airbyte:SourceXero\n    properties:\n      configuration:\n        authentication:\n          accessToken: '...my_access_token...'\n          clientId: '...my_client_id...'\n          clientSecret: '...my_client_secret...'\n          refreshToken: '...my_refresh_token...'\n          tokenExpiryDate: '...my_token_expiry_date...'\n        source_type: xero\n        start_date: 2022-03-01T00:00:00Z\n        tenant_id: '...my_tenant_id...'\n      name: Geraldine Crist\n      secretId: '...my_secret_id...'\n      workspaceId: 7510da80-3122-492c-861c-2a702bb97ee1\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceXeroConfiguration:SourceXeroConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceXeroConfiguration:SourceXeroConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceXero resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceXeroConfiguration:SourceXeroConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceXkcd:SourceXkcd": {
            "description": "SourceXkcd Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceXkcd;\nimport com.pulumi.airbyte.SourceXkcdArgs;\nimport com.pulumi.airbyte.inputs.SourceXkcdConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceXkcd = new SourceXkcd(\"mySourceXkcd\", SourceXkcdArgs.builder()        \n            .configuration(SourceXkcdConfigurationArgs.builder()\n                .source_type(\"xkcd\")\n                .build())\n            .name(\"Bonnie Steuber\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"de35f8e0-1bf3-43ea-ab45-402ac1704bf1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceXkcd:\n    type: airbyte:SourceXkcd\n    properties:\n      configuration:\n        source_type: xkcd\n      name: Bonnie Steuber\n      secretId: '...my_secret_id...'\n      workspaceId: de35f8e0-1bf3-43ea-ab45-402ac1704bf1\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceXkcdConfiguration:SourceXkcdConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceXkcdConfiguration:SourceXkcdConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceXkcd resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceXkcdConfiguration:SourceXkcdConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceYandexMetrica:SourceYandexMetrica": {
            "description": "SourceYandexMetrica Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceYandexMetrica;\nimport com.pulumi.airbyte.SourceYandexMetricaArgs;\nimport com.pulumi.airbyte.inputs.SourceYandexMetricaConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceYandexmetrica = new SourceYandexMetrica(\"mySourceYandexmetrica\", SourceYandexMetricaArgs.builder()        \n            .configuration(SourceYandexMetricaConfigurationArgs.builder()\n                .auth_token(\"...my_auth_token...\")\n                .counter_id(\"...my_counter_id...\")\n                .end_date(\"2022-01-01\")\n                .source_type(\"yandex-metrica\")\n                .start_date(\"2022-01-01\")\n                .build())\n            .name(\"Reginald Carter\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"e5eb5f0c-492b-4574-8d08-a2267aaee79e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceYandexmetrica:\n    type: airbyte:SourceYandexMetrica\n    properties:\n      configuration:\n        auth_token: '...my_auth_token...'\n        counter_id: '...my_counter_id...'\n        end_date: 2022-01-01\n        source_type: yandex-metrica\n        start_date: 2022-01-01\n      name: Reginald Carter\n      secretId: '...my_secret_id...'\n      workspaceId: e5eb5f0c-492b-4574-8d08-a2267aaee79e\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceYandexMetricaConfiguration:SourceYandexMetricaConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceYandexMetricaConfiguration:SourceYandexMetricaConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceYandexMetrica resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceYandexMetricaConfiguration:SourceYandexMetricaConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceYotpo:SourceYotpo": {
            "description": "SourceYotpo Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceYotpo;\nimport com.pulumi.airbyte.SourceYotpoArgs;\nimport com.pulumi.airbyte.inputs.SourceYotpoConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceYotpo = new SourceYotpo(\"mySourceYotpo\", SourceYotpoArgs.builder()        \n            .configuration(SourceYotpoConfigurationArgs.builder()\n                .access_token(\"...my_access_token...\")\n                .app_key(\"...my_app_key...\")\n                .email(\"Petra66@gmail.com\")\n                .source_type(\"yotpo\")\n                .start_date(\"2022-03-01T00:00:00.000Z\")\n                .build())\n            .name(\"Hannah Volkman\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"83d2378a-e3bf-4c23-9945-0a986a495bac\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceYotpo:\n    type: airbyte:SourceYotpo\n    properties:\n      configuration:\n        access_token: '...my_access_token...'\n        app_key: '...my_app_key...'\n        email: Petra66@gmail.com\n        source_type: yotpo\n        start_date: 2022-03-01T00:00:00.000Z\n      name: Hannah Volkman\n      secretId: '...my_secret_id...'\n      workspaceId: 83d2378a-e3bf-4c23-9945-0a986a495bac\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceYotpoConfiguration:SourceYotpoConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceYotpoConfiguration:SourceYotpoConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceYotpo resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceYotpoConfiguration:SourceYotpoConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceYounium:SourceYounium": {
            "description": "SourceYounium Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceYounium;\nimport com.pulumi.airbyte.SourceYouniumArgs;\nimport com.pulumi.airbyte.inputs.SourceYouniumConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceYounium = new SourceYounium(\"mySourceYounium\", SourceYouniumArgs.builder()        \n            .configuration(SourceYouniumConfigurationArgs.builder()\n                .legal_entity(\"...my_legal_entity...\")\n                .password(\"...my_password...\")\n                .playground(false)\n                .source_type(\"younium\")\n                .username(\"Angeline.Kunze40\")\n                .build())\n            .name(\"Ernest Larkin\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"c8649238-6f62-4c96-9c4c-c6b78890a3fd\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceYounium:\n    type: airbyte:SourceYounium\n    properties:\n      configuration:\n        legal_entity: '...my_legal_entity...'\n        password: '...my_password...'\n        playground: false\n        source_type: younium\n        username: Angeline.Kunze40\n      name: Ernest Larkin\n      secretId: '...my_secret_id...'\n      workspaceId: c8649238-6f62-4c96-9c4c-c6b78890a3fd\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceYouniumConfiguration:SourceYouniumConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceYouniumConfiguration:SourceYouniumConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceYounium resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceYouniumConfiguration:SourceYouniumConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceYoutubeAnalytics:SourceYoutubeAnalytics": {
            "description": "SourceYoutubeAnalytics Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceYoutubeAnalytics;\nimport com.pulumi.airbyte.SourceYoutubeAnalyticsArgs;\nimport com.pulumi.airbyte.inputs.SourceYoutubeAnalyticsConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceYoutubeAnalyticsConfigurationCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceYoutubeanalytics = new SourceYoutubeAnalytics(\"mySourceYoutubeanalytics\", SourceYoutubeAnalyticsArgs.builder()        \n            .configuration(SourceYoutubeAnalyticsConfigurationArgs.builder()\n                .credentials(SourceYoutubeAnalyticsConfigurationCredentialsArgs.builder()\n                    .clientId(\"...my_client_id...\")\n                    .clientSecret(\"...my_client_secret...\")\n                    .refreshToken(\"...my_refresh_token...\")\n                    .build())\n                .source_type(\"youtube-analytics\")\n                .build())\n            .name(\"Dr. Kara Lowe\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"10f8c23d-f931-4da3-adb5-1fad94acc943\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceYoutubeanalytics:\n    type: airbyte:SourceYoutubeAnalytics\n    properties:\n      configuration:\n        credentials:\n          clientId: '...my_client_id...'\n          clientSecret: '...my_client_secret...'\n          refreshToken: '...my_refresh_token...'\n        source_type: youtube-analytics\n      name: Dr. Kara Lowe\n      secretId: '...my_secret_id...'\n      workspaceId: 10f8c23d-f931-4da3-adb5-1fad94acc943\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceYoutubeAnalyticsConfiguration:SourceYoutubeAnalyticsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceYoutubeAnalyticsConfiguration:SourceYoutubeAnalyticsConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceYoutubeAnalytics resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceYoutubeAnalyticsConfiguration:SourceYoutubeAnalyticsConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceZendeskChat:SourceZendeskChat": {
            "description": "SourceZendeskChat Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceZendeskChat;\nimport com.pulumi.airbyte.SourceZendeskChatArgs;\nimport com.pulumi.airbyte.inputs.SourceZendeskChatConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceZendeskChatConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodAccessTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceZendeskchat = new SourceZendeskChat(\"mySourceZendeskchat\", SourceZendeskChatArgs.builder()        \n            .configuration(SourceZendeskChatConfigurationArgs.builder()\n                .credentials(SourceZendeskChatConfigurationCredentialsArgs.builder()\n                    .sourceZendeskChatAuthorizationMethodAccessToken(SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodAccessTokenArgs.builder()\n                        .accessToken(\"...my_access_token...\")\n                        .credentials(\"access_token\")\n                        .build())\n                    .build())\n                .source_type(\"zendesk-chat\")\n                .start_date(\"2021-02-01T00:00:00Z\")\n                .subdomain(\"...my_subdomain...\")\n                .build())\n            .name(\"Melinda Koch\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"d15321b8-32a5-46d6-9180-ff60eb9a6658\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceZendeskchat:\n    type: airbyte:SourceZendeskChat\n    properties:\n      configuration:\n        credentials:\n          sourceZendeskChatAuthorizationMethodAccessToken:\n            accessToken: '...my_access_token...'\n            credentials: access_token\n        source_type: zendesk-chat\n        start_date: 2021-02-01T00:00:00Z\n        subdomain: '...my_subdomain...'\n      name: Melinda Koch\n      secretId: '...my_secret_id...'\n      workspaceId: d15321b8-32a5-46d6-9180-ff60eb9a6658\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceZendeskChatConfiguration:SourceZendeskChatConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceZendeskChatConfiguration:SourceZendeskChatConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceZendeskChat resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceZendeskChatConfiguration:SourceZendeskChatConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceZendeskSunshine:SourceZendeskSunshine": {
            "description": "SourceZendeskSunshine Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceZendeskSunshine;\nimport com.pulumi.airbyte.SourceZendeskSunshineArgs;\nimport com.pulumi.airbyte.inputs.SourceZendeskSunshineConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceZendeskSunshineConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodApiTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceZendesksunshine = new SourceZendeskSunshine(\"mySourceZendesksunshine\", SourceZendeskSunshineArgs.builder()        \n            .configuration(SourceZendeskSunshineConfigurationArgs.builder()\n                .credentials(SourceZendeskSunshineConfigurationCredentialsArgs.builder()\n                    .sourceZendeskSunshineAuthorizationMethodApiToken(SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodApiTokenArgs.builder()\n                        .apiToken(\"...my_api_token...\")\n                        .authMethod(\"api_token\")\n                        .email(\"Hollis.Mann72@hotmail.com\")\n                        .build())\n                    .build())\n                .source_type(\"zendesk-sunshine\")\n                .start_date(\"2021-01-01T00:00:00Z\")\n                .subdomain(\"...my_subdomain...\")\n                .build())\n            .name(\"Alexander Friesen\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"82dbec75-c68c-4606-9946-8ce304d8849b\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceZendesksunshine:\n    type: airbyte:SourceZendeskSunshine\n    properties:\n      configuration:\n        credentials:\n          sourceZendeskSunshineAuthorizationMethodApiToken:\n            apiToken: '...my_api_token...'\n            authMethod: api_token\n            email: Hollis.Mann72@hotmail.com\n        source_type: zendesk-sunshine\n        start_date: 2021-01-01T00:00:00Z\n        subdomain: '...my_subdomain...'\n      name: Alexander Friesen\n      secretId: '...my_secret_id...'\n      workspaceId: 82dbec75-c68c-4606-9946-8ce304d8849b\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceZendeskSunshineConfiguration:SourceZendeskSunshineConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceZendeskSunshineConfiguration:SourceZendeskSunshineConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceZendeskSunshine resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceZendeskSunshineConfiguration:SourceZendeskSunshineConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceZendeskSupport:SourceZendeskSupport": {
            "description": "SourceZendeskSupport Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceZendeskSupport;\nimport com.pulumi.airbyte.SourceZendeskSupportArgs;\nimport com.pulumi.airbyte.inputs.SourceZendeskSupportConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceZendeskSupportConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationApiTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceZendesksupport = new SourceZendeskSupport(\"mySourceZendesksupport\", SourceZendeskSupportArgs.builder()        \n            .configuration(SourceZendeskSupportConfigurationArgs.builder()\n                .credentials(SourceZendeskSupportConfigurationCredentialsArgs.builder()\n                    .sourceZendeskSupportAuthenticationApiToken(SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationApiTokenArgs.builder()\n                        .apiToken(\"...my_api_token...\")\n                        .credentials(\"api_token\")\n                        .email(\"Kacie27@hotmail.com\")\n                        .build())\n                    .build())\n                .ignore_pagination(false)\n                .source_type(\"zendesk-support\")\n                .start_date(\"2020-10-15T00:00:00Z\")\n                .subdomain(\"...my_subdomain...\")\n                .build())\n            .name(\"May McClure\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"b0c69e37-2db1-4344-ba9f-78a5c0ed7aab\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceZendesksupport:\n    type: airbyte:SourceZendeskSupport\n    properties:\n      configuration:\n        credentials:\n          sourceZendeskSupportAuthenticationApiToken:\n            apiToken: '...my_api_token...'\n            credentials: api_token\n            email: Kacie27@hotmail.com\n        ignore_pagination: false\n        source_type: zendesk-support\n        start_date: 2020-10-15T00:00:00Z\n        subdomain: '...my_subdomain...'\n      name: May McClure\n      secretId: '...my_secret_id...'\n      workspaceId: b0c69e37-2db1-4344-ba9f-78a5c0ed7aab\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceZendeskSupportConfiguration:SourceZendeskSupportConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceZendeskSupportConfiguration:SourceZendeskSupportConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceZendeskSupport resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceZendeskSupportConfiguration:SourceZendeskSupportConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceZendeskTalk:SourceZendeskTalk": {
            "description": "SourceZendeskTalk Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceZendeskTalk;\nimport com.pulumi.airbyte.SourceZendeskTalkArgs;\nimport com.pulumi.airbyte.inputs.SourceZendeskTalkConfigurationArgs;\nimport com.pulumi.airbyte.inputs.SourceZendeskTalkConfigurationCredentialsArgs;\nimport com.pulumi.airbyte.inputs.SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationApiTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceZendesktalk = new SourceZendeskTalk(\"mySourceZendesktalk\", SourceZendeskTalkArgs.builder()        \n            .configuration(SourceZendeskTalkConfigurationArgs.builder()\n                .credentials(SourceZendeskTalkConfigurationCredentialsArgs.builder()\n                    .sourceZendeskTalkAuthenticationApiToken(SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationApiTokenArgs.builder()\n                        .apiToken(\"...my_api_token...\")\n                        .authType(\"api_token\")\n                        .email(\"Brant.Walter@yahoo.com\")\n                        .build())\n                    .build())\n                .source_type(\"zendesk-talk\")\n                .start_date(\"2020-10-15T00:00:00Z\")\n                .subdomain(\"...my_subdomain...\")\n                .build())\n            .name(\"Dr. Lana Ritchie\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"8d27b519-96b5-4b4b-90ee-f712b7a7ab03\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceZendesktalk:\n    type: airbyte:SourceZendeskTalk\n    properties:\n      configuration:\n        credentials:\n          sourceZendeskTalkAuthenticationApiToken:\n            apiToken: '...my_api_token...'\n            authType: api_token\n            email: Brant.Walter@yahoo.com\n        source_type: zendesk-talk\n        start_date: 2020-10-15T00:00:00Z\n        subdomain: '...my_subdomain...'\n      name: Dr. Lana Ritchie\n      secretId: '...my_secret_id...'\n      workspaceId: 8d27b519-96b5-4b4b-90ee-f712b7a7ab03\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceZendeskTalkConfiguration:SourceZendeskTalkConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceZendeskTalkConfiguration:SourceZendeskTalkConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceZendeskTalk resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceZendeskTalkConfiguration:SourceZendeskTalkConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceZenloop:SourceZenloop": {
            "description": "SourceZenloop Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceZenloop;\nimport com.pulumi.airbyte.SourceZenloopArgs;\nimport com.pulumi.airbyte.inputs.SourceZenloopConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceZenloop = new SourceZenloop(\"mySourceZenloop\", SourceZenloopArgs.builder()        \n            .configuration(SourceZenloopConfigurationArgs.builder()\n                .api_token(\"...my_api_token...\")\n                .date_from(\"2021-10-24T03:30:30Z\")\n                .source_type(\"zenloop\")\n                .survey_group_id(\"...my_survey_group_id...\")\n                .survey_id(\"...my_survey_id...\")\n                .build())\n            .name(\"Ms. Emma Rodriguez Jr.\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"688deebe-f897-4f3d-90cc-d33f11b3e4e0\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceZenloop:\n    type: airbyte:SourceZenloop\n    properties:\n      configuration:\n        api_token: '...my_api_token...'\n        date_from: 2021-10-24T03:30:30Z\n        source_type: zenloop\n        survey_group_id: '...my_survey_group_id...'\n        survey_id: '...my_survey_id...'\n      name: Ms. Emma Rodriguez Jr.\n      secretId: '...my_secret_id...'\n      workspaceId: 688deebe-f897-4f3d-90cc-d33f11b3e4e0\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceZenloopConfiguration:SourceZenloopConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceZenloopConfiguration:SourceZenloopConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceZenloop resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceZenloopConfiguration:SourceZenloopConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceZohoCrm:SourceZohoCrm": {
            "description": "SourceZohoCrm Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceZohoCrm;\nimport com.pulumi.airbyte.SourceZohoCrmArgs;\nimport com.pulumi.airbyte.inputs.SourceZohoCrmConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceZohocrm = new SourceZohoCrm(\"mySourceZohocrm\", SourceZohoCrmArgs.builder()        \n            .configuration(SourceZohoCrmConfigurationArgs.builder()\n                .client_id(\"...my_client_id...\")\n                .client_secret(\"...my_client_secret...\")\n                .dc_region(\"IN\")\n                .edition(\"Free\")\n                .environment(\"Developer\")\n                .refresh_token(\"...my_refresh_token...\")\n                .source_type(\"zoho-crm\")\n                .start_datetime(\"2000-01-01T13:00+00:00\")\n                .build())\n            .name(\"Alice Lind\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"c759e02f-3702-4c5c-8e2d-30ead3104fa4\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceZohocrm:\n    type: airbyte:SourceZohoCrm\n    properties:\n      configuration:\n        client_id: '...my_client_id...'\n        client_secret: '...my_client_secret...'\n        dc_region: IN\n        edition: Free\n        environment: Developer\n        refresh_token: '...my_refresh_token...'\n        source_type: zoho-crm\n        start_datetime: 2000-01-01T13:00+00:00\n      name: Alice Lind\n      secretId: '...my_secret_id...'\n      workspaceId: c759e02f-3702-4c5c-8e2d-30ead3104fa4\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceZohoCrmConfiguration:SourceZohoCrmConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceZohoCrmConfiguration:SourceZohoCrmConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceZohoCrm resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceZohoCrmConfiguration:SourceZohoCrmConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceZoom:SourceZoom": {
            "description": "SourceZoom Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceZoom;\nimport com.pulumi.airbyte.SourceZoomArgs;\nimport com.pulumi.airbyte.inputs.SourceZoomConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceZoom = new SourceZoom(\"mySourceZoom\", SourceZoomArgs.builder()        \n            .configuration(SourceZoomConfigurationArgs.builder()\n                .jwt_token(\"...my_jwt_token...\")\n                .source_type(\"zoom\")\n                .build())\n            .name(\"Charlene Abbott\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"f375b442-8282-41fd-b2f6-9e59267c71cc\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceZoom:\n    type: airbyte:SourceZoom\n    properties:\n      configuration:\n        jwt_token: '...my_jwt_token...'\n        source_type: zoom\n      name: Charlene Abbott\n      secretId: '...my_secret_id...'\n      workspaceId: f375b442-8282-41fd-b2f6-9e59267c71cc\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceZoomConfiguration:SourceZoomConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceZoomConfiguration:SourceZoomConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceZoom resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceZoomConfiguration:SourceZoomConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/sourceZuora:SourceZuora": {
            "description": "SourceZuora Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.SourceZuora;\nimport com.pulumi.airbyte.SourceZuoraArgs;\nimport com.pulumi.airbyte.inputs.SourceZuoraConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySourceZuora = new SourceZuora(\"mySourceZuora\", SourceZuoraArgs.builder()        \n            .configuration(SourceZuoraConfigurationArgs.builder()\n                .client_id(\"...my_client_id...\")\n                .client_secret(\"...my_client_secret...\")\n                .data_query(\"Unlimited\")\n                .source_type(\"zuora\")\n                .start_date(\"...my_start_date...\")\n                .tenant_endpoint(\"EU API Sandbox\")\n                .window_in_days(\"1\")\n                .build())\n            .name(\"Carroll Grant\")\n            .secretId(\"...my_secret_id...\")\n            .workspaceId(\"8d0358a8-2c80-48fe-a751-a2047c0449e1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySourceZuora:\n    type: airbyte:SourceZuora\n    properties:\n      configuration:\n        client_id: '...my_client_id...'\n        client_secret: '...my_client_secret...'\n        data_query: Unlimited\n        source_type: zuora\n        start_date: '...my_start_date...'\n        tenant_endpoint: EU API Sandbox\n        window_in_days: '1'\n      name: Carroll Grant\n      secretId: '...my_secret_id...'\n      workspaceId: 8d0358a8-2c80-48fe-a751-a2047c0449e1\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceZuoraConfiguration:SourceZuoraConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "sourceId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "configuration",
                "name",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/airbyte:index/SourceZuoraConfiguration:SourceZuoraConfiguration"
                },
                "name": {
                    "type": "string"
                },
                "secretId": {
                    "type": "string",
                    "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "configuration",
                "name",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceZuora resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/SourceZuoraConfiguration:SourceZuoraConfiguration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "airbyte:index/workspace:Workspace": {
            "description": "Workspace Resource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myWorkspace = new airbyte.Workspace(\"myWorkspace\", {name: \"Crystal Weissnat\"});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_workspace = airbyte.Workspace(\"myWorkspace\", name=\"Crystal Weissnat\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myWorkspace = new Airbyte.Workspace(\"myWorkspace\", new()\n    {\n        Name = \"Crystal Weissnat\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.NewWorkspace(ctx, \"myWorkspace\", \u0026airbyte.WorkspaceArgs{\n\t\t\tName: pulumi.String(\"Crystal Weissnat\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.Workspace;\nimport com.pulumi.airbyte.WorkspaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myWorkspace = new Workspace(\"myWorkspace\", WorkspaceArgs.builder()        \n            .name(\"Crystal Weissnat\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myWorkspace:\n    type: airbyte:Workspace\n    properties:\n      name: Crystal Weissnat\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "dataResidency": {
                    "type": "string",
                    "description": "must be one of [\"auto\", \"us\", \"eu\"]\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workspace\n"
                },
                "workspaceId": {
                    "type": "string"
                }
            },
            "required": [
                "dataResidency",
                "name",
                "workspaceId"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name of the workspace\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Workspace resources.\n",
                "properties": {
                    "dataResidency": {
                        "type": "string",
                        "description": "must be one of [\"auto\", \"us\", \"eu\"]\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workspace\n"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "airbyte:index/getConnection:getConnection": {
            "description": "Connection DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myConnection = airbyte.getConnection({\n    connectionId: \"...my_connection_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_connection = airbyte.get_connection(connection_id=\"...my_connection_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myConnection = Airbyte.GetConnection.Invoke(new()\n    {\n        ConnectionId = \"...my_connection_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupConnection(ctx, \u0026airbyte.LookupConnectionArgs{\n\t\t\tConnectionId: \"...my_connection_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetConnectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myConnection = AirbyteFunctions.getConnection(GetConnectionArgs.builder()\n            .connectionId(\"...my_connection_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myConnection:\n    fn::invoke:\n      Function: airbyte:getConnection\n      Arguments:\n        connectionId: '...my_connection_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getConnection.\n",
                "properties": {
                    "connectionId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "connectionId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getConnection.\n",
                "properties": {
                    "configurations": {
                        "$ref": "#/types/airbyte:index/getConnectionConfigurations:getConnectionConfigurations",
                        "description": "A list of configured stream options for a connection.\n"
                    },
                    "connectionId": {
                        "type": "string"
                    },
                    "dataResidency": {
                        "type": "string",
                        "description": "must be one of [\"auto\", \"us\", \"eu\"]\n"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Optional name of the connection\n"
                    },
                    "namespaceDefinition": {
                        "type": "string",
                        "description": "must be one of [\"source\", \"destination\", \"custom_format\"]\nDefine the location where the data will be stored in the destination\n"
                    },
                    "namespaceFormat": {
                        "type": "string",
                        "description": "Used when namespaceDefinition is 'custom*format'. If blank then behaves like namespaceDefinition = 'destination'. If \"${SOURCE*NAMESPACE}\" then behaves like namespaceDefinition = 'source'.\n"
                    },
                    "nonBreakingSchemaUpdatesBehavior": {
                        "type": "string",
                        "description": "must be one of [\"ignore\", \"disable*connection\", \"propagate*columns\", \"propagate_fully\"]\nSet how Airbyte handles syncs when it detects a non-breaking schema change in the source\n"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "Prefix that will be prepended to the name of each stream when it is written to the destination (ex. “airbyte*” causes “projects” =\u003e “airbyte*projects”).\n"
                    },
                    "schedule": {
                        "$ref": "#/types/airbyte:index/getConnectionSchedule:getConnectionSchedule",
                        "description": "schedule for when the the connection should run, per the schedule type\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "must be one of [\"active\", \"inactive\", \"deprecated\"]\n"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configurations",
                    "connectionId",
                    "dataResidency",
                    "destinationId",
                    "name",
                    "namespaceDefinition",
                    "namespaceFormat",
                    "nonBreakingSchemaUpdatesBehavior",
                    "prefix",
                    "schedule",
                    "sourceId",
                    "status",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationAWSDatalake:getDestinationAWSDatalake": {
            "description": "DestinationAwsDatalake DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationAwsdatalake = airbyte.getDestinationAWSDatalake({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_awsdatalake = airbyte.get_destination_aws_datalake(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationAwsdatalake = Airbyte.GetDestinationAWSDatalake.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationAWSDatalake(ctx, \u0026airbyte.LookupDestinationAWSDatalakeArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationAWSDatalakeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationAwsdatalake = AirbyteFunctions.getDestinationAWSDatalake(GetDestinationAWSDatalakeArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationAwsdatalake:\n    fn::invoke:\n      Function: airbyte:getDestinationAWSDatalake\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationAWSDatalake.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationAWSDatalake.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationAWSDatalakeConfiguration:getDestinationAWSDatalakeConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationAzureBlobStorage:getDestinationAzureBlobStorage": {
            "description": "DestinationAzureBlobStorage DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationAzureblobstorage = airbyte.getDestinationAzureBlobStorage({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_azureblobstorage = airbyte.get_destination_azure_blob_storage(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationAzureblobstorage = Airbyte.GetDestinationAzureBlobStorage.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationAzureBlobStorage(ctx, \u0026airbyte.LookupDestinationAzureBlobStorageArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationAzureBlobStorageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationAzureblobstorage = AirbyteFunctions.getDestinationAzureBlobStorage(GetDestinationAzureBlobStorageArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationAzureblobstorage:\n    fn::invoke:\n      Function: airbyte:getDestinationAzureBlobStorage\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationAzureBlobStorage.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationAzureBlobStorage.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationAzureBlobStorageConfiguration:getDestinationAzureBlobStorageConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationBigquery:getDestinationBigquery": {
            "description": "DestinationBigquery DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationBigquery = airbyte.getDestinationBigquery({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_bigquery = airbyte.get_destination_bigquery(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationBigquery = Airbyte.GetDestinationBigquery.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationBigquery(ctx, \u0026airbyte.LookupDestinationBigqueryArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationBigqueryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationBigquery = AirbyteFunctions.getDestinationBigquery(GetDestinationBigqueryArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationBigquery:\n    fn::invoke:\n      Function: airbyte:getDestinationBigquery\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationBigquery.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationBigquery.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationBigqueryConfiguration:getDestinationBigqueryConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationBigqueryDenormalized:getDestinationBigqueryDenormalized": {
            "description": "DestinationBigqueryDenormalized DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationBigquerydenormalized = airbyte.getDestinationBigqueryDenormalized({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_bigquerydenormalized = airbyte.get_destination_bigquery_denormalized(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationBigquerydenormalized = Airbyte.GetDestinationBigqueryDenormalized.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationBigqueryDenormalized(ctx, \u0026airbyte.LookupDestinationBigqueryDenormalizedArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationBigqueryDenormalizedArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationBigquerydenormalized = AirbyteFunctions.getDestinationBigqueryDenormalized(GetDestinationBigqueryDenormalizedArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationBigquerydenormalized:\n    fn::invoke:\n      Function: airbyte:getDestinationBigqueryDenormalized\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationBigqueryDenormalized.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationBigqueryDenormalized.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationBigqueryDenormalizedConfiguration:getDestinationBigqueryDenormalizedConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationClickhouse:getDestinationClickhouse": {
            "description": "DestinationClickhouse DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationClickhouse = airbyte.getDestinationClickhouse({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_clickhouse = airbyte.get_destination_clickhouse(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationClickhouse = Airbyte.GetDestinationClickhouse.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationClickhouse(ctx, \u0026airbyte.LookupDestinationClickhouseArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationClickhouseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationClickhouse = AirbyteFunctions.getDestinationClickhouse(GetDestinationClickhouseArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationClickhouse:\n    fn::invoke:\n      Function: airbyte:getDestinationClickhouse\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationClickhouse.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationClickhouse.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationClickhouseConfiguration:getDestinationClickhouseConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationConvex:getDestinationConvex": {
            "description": "DestinationConvex DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationConvex = airbyte.getDestinationConvex({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_convex = airbyte.get_destination_convex(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationConvex = Airbyte.GetDestinationConvex.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationConvex(ctx, \u0026airbyte.LookupDestinationConvexArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationConvexArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationConvex = AirbyteFunctions.getDestinationConvex(GetDestinationConvexArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationConvex:\n    fn::invoke:\n      Function: airbyte:getDestinationConvex\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationConvex.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationConvex.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationConvexConfiguration:getDestinationConvexConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationCumulio:getDestinationCumulio": {
            "description": "DestinationCumulio DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationCumulio = airbyte.getDestinationCumulio({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_cumulio = airbyte.get_destination_cumulio(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationCumulio = Airbyte.GetDestinationCumulio.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationCumulio(ctx, \u0026airbyte.LookupDestinationCumulioArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationCumulioArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationCumulio = AirbyteFunctions.getDestinationCumulio(GetDestinationCumulioArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationCumulio:\n    fn::invoke:\n      Function: airbyte:getDestinationCumulio\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationCumulio.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationCumulio.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationCumulioConfiguration:getDestinationCumulioConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationDatabend:getDestinationDatabend": {
            "description": "DestinationDatabend DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationDatabend = airbyte.getDestinationDatabend({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_databend = airbyte.get_destination_databend(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationDatabend = Airbyte.GetDestinationDatabend.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationDatabend(ctx, \u0026airbyte.LookupDestinationDatabendArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationDatabendArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationDatabend = AirbyteFunctions.getDestinationDatabend(GetDestinationDatabendArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationDatabend:\n    fn::invoke:\n      Function: airbyte:getDestinationDatabend\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationDatabend.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationDatabend.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationDatabendConfiguration:getDestinationDatabendConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationDatabricks:getDestinationDatabricks": {
            "description": "DestinationDatabricks DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationDatabricks = airbyte.getDestinationDatabricks({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_databricks = airbyte.get_destination_databricks(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationDatabricks = Airbyte.GetDestinationDatabricks.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationDatabricks(ctx, \u0026airbyte.LookupDestinationDatabricksArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationDatabricksArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationDatabricks = AirbyteFunctions.getDestinationDatabricks(GetDestinationDatabricksArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationDatabricks:\n    fn::invoke:\n      Function: airbyte:getDestinationDatabricks\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationDatabricks.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationDatabricks.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationDatabricksConfiguration:getDestinationDatabricksConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationDevNull:getDestinationDevNull": {
            "description": "DestinationDevNull DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationDevnull = airbyte.getDestinationDevNull({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_devnull = airbyte.get_destination_dev_null(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationDevnull = Airbyte.GetDestinationDevNull.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationDevNull(ctx, \u0026airbyte.LookupDestinationDevNullArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationDevNullArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationDevnull = AirbyteFunctions.getDestinationDevNull(GetDestinationDevNullArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationDevnull:\n    fn::invoke:\n      Function: airbyte:getDestinationDevNull\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationDevNull.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationDevNull.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationDevNullConfiguration:getDestinationDevNullConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationDynamodb:getDestinationDynamodb": {
            "description": "DestinationDynamodb DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationDynamodb = airbyte.getDestinationDynamodb({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_dynamodb = airbyte.get_destination_dynamodb(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationDynamodb = Airbyte.GetDestinationDynamodb.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationDynamodb(ctx, \u0026airbyte.LookupDestinationDynamodbArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationDynamodbArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationDynamodb = AirbyteFunctions.getDestinationDynamodb(GetDestinationDynamodbArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationDynamodb:\n    fn::invoke:\n      Function: airbyte:getDestinationDynamodb\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationDynamodb.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationDynamodb.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationDynamodbConfiguration:getDestinationDynamodbConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationElasticsearch:getDestinationElasticsearch": {
            "description": "DestinationElasticsearch DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationElasticsearch = airbyte.getDestinationElasticsearch({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_elasticsearch = airbyte.get_destination_elasticsearch(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationElasticsearch = Airbyte.GetDestinationElasticsearch.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationElasticsearch(ctx, \u0026airbyte.LookupDestinationElasticsearchArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationElasticsearchArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationElasticsearch = AirbyteFunctions.getDestinationElasticsearch(GetDestinationElasticsearchArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationElasticsearch:\n    fn::invoke:\n      Function: airbyte:getDestinationElasticsearch\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationElasticsearch.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationElasticsearch.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationElasticsearchConfiguration:getDestinationElasticsearchConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationFirebolt:getDestinationFirebolt": {
            "description": "DestinationFirebolt DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationFirebolt = airbyte.getDestinationFirebolt({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_firebolt = airbyte.get_destination_firebolt(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationFirebolt = Airbyte.GetDestinationFirebolt.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationFirebolt(ctx, \u0026airbyte.LookupDestinationFireboltArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationFireboltArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationFirebolt = AirbyteFunctions.getDestinationFirebolt(GetDestinationFireboltArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationFirebolt:\n    fn::invoke:\n      Function: airbyte:getDestinationFirebolt\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationFirebolt.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationFirebolt.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationFireboltConfiguration:getDestinationFireboltConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationFirestore:getDestinationFirestore": {
            "description": "DestinationFirestore DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationFirestore = airbyte.getDestinationFirestore({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_firestore = airbyte.get_destination_firestore(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationFirestore = Airbyte.GetDestinationFirestore.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationFirestore(ctx, \u0026airbyte.LookupDestinationFirestoreArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationFirestoreArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationFirestore = AirbyteFunctions.getDestinationFirestore(GetDestinationFirestoreArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationFirestore:\n    fn::invoke:\n      Function: airbyte:getDestinationFirestore\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationFirestore.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationFirestore.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationFirestoreConfiguration:getDestinationFirestoreConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationGcs:getDestinationGcs": {
            "description": "DestinationGcs DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationGcs = airbyte.getDestinationGcs({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_gcs = airbyte.get_destination_gcs(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationGcs = Airbyte.GetDestinationGcs.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationGcs(ctx, \u0026airbyte.LookupDestinationGcsArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationGcsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationGcs = AirbyteFunctions.getDestinationGcs(GetDestinationGcsArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationGcs:\n    fn::invoke:\n      Function: airbyte:getDestinationGcs\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationGcs.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationGcs.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationGcsConfiguration:getDestinationGcsConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationGoogleSheets:getDestinationGoogleSheets": {
            "description": "DestinationGoogleSheets DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationGooglesheets = airbyte.getDestinationGoogleSheets({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_googlesheets = airbyte.get_destination_google_sheets(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationGooglesheets = Airbyte.GetDestinationGoogleSheets.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationGoogleSheets(ctx, \u0026airbyte.LookupDestinationGoogleSheetsArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationGoogleSheetsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationGooglesheets = AirbyteFunctions.getDestinationGoogleSheets(GetDestinationGoogleSheetsArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationGooglesheets:\n    fn::invoke:\n      Function: airbyte:getDestinationGoogleSheets\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationGoogleSheets.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationGoogleSheets.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationGoogleSheetsConfiguration:getDestinationGoogleSheetsConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationKeen:getDestinationKeen": {
            "description": "DestinationKeen DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationKeen = airbyte.getDestinationKeen({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_keen = airbyte.get_destination_keen(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationKeen = Airbyte.GetDestinationKeen.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationKeen(ctx, \u0026airbyte.LookupDestinationKeenArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationKeenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationKeen = AirbyteFunctions.getDestinationKeen(GetDestinationKeenArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationKeen:\n    fn::invoke:\n      Function: airbyte:getDestinationKeen\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationKeen.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationKeen.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationKeenConfiguration:getDestinationKeenConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationKinesis:getDestinationKinesis": {
            "description": "DestinationKinesis DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationKinesis = airbyte.getDestinationKinesis({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_kinesis = airbyte.get_destination_kinesis(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationKinesis = Airbyte.GetDestinationKinesis.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationKinesis(ctx, \u0026airbyte.LookupDestinationKinesisArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationKinesisArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationKinesis = AirbyteFunctions.getDestinationKinesis(GetDestinationKinesisArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationKinesis:\n    fn::invoke:\n      Function: airbyte:getDestinationKinesis\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationKinesis.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationKinesis.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationKinesisConfiguration:getDestinationKinesisConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationLangchain:getDestinationLangchain": {
            "description": "DestinationLangchain DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationLangchain = airbyte.getDestinationLangchain({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_langchain = airbyte.get_destination_langchain(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationLangchain = Airbyte.GetDestinationLangchain.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationLangchain(ctx, \u0026airbyte.LookupDestinationLangchainArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationLangchainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationLangchain = AirbyteFunctions.getDestinationLangchain(GetDestinationLangchainArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationLangchain:\n    fn::invoke:\n      Function: airbyte:getDestinationLangchain\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationLangchain.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationLangchain.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationLangchainConfiguration:getDestinationLangchainConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationMSsql:getDestinationMSsql": {
            "description": "DestinationMssql DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationMssql = airbyte.getDestinationMSsql({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_mssql = airbyte.get_destination_mssql(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationMssql = Airbyte.GetDestinationMSsql.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationMSsql(ctx, \u0026airbyte.LookupDestinationMSsqlArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationMSsqlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationMssql = AirbyteFunctions.getDestinationMSsql(GetDestinationMSsqlArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationMssql:\n    fn::invoke:\n      Function: airbyte:getDestinationMSsql\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationMSsql.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationMSsql.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationMSsqlConfiguration:getDestinationMSsqlConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationMongodb:getDestinationMongodb": {
            "description": "DestinationMongodb DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationMongodb = airbyte.getDestinationMongodb({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_mongodb = airbyte.get_destination_mongodb(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationMongodb = Airbyte.GetDestinationMongodb.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationMongodb(ctx, \u0026airbyte.LookupDestinationMongodbArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationMongodbArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationMongodb = AirbyteFunctions.getDestinationMongodb(GetDestinationMongodbArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationMongodb:\n    fn::invoke:\n      Function: airbyte:getDestinationMongodb\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationMongodb.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationMongodb.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationMongodbConfiguration:getDestinationMongodbConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationMysql:getDestinationMysql": {
            "description": "DestinationMysql DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationMysql = airbyte.getDestinationMysql({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_mysql = airbyte.get_destination_mysql(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationMysql = Airbyte.GetDestinationMysql.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationMysql(ctx, \u0026airbyte.LookupDestinationMysqlArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationMysqlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationMysql = AirbyteFunctions.getDestinationMysql(GetDestinationMysqlArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationMysql:\n    fn::invoke:\n      Function: airbyte:getDestinationMysql\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationMysql.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationMysql.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationMysqlConfiguration:getDestinationMysqlConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationOracle:getDestinationOracle": {
            "description": "DestinationOracle DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationOracle = airbyte.getDestinationOracle({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_oracle = airbyte.get_destination_oracle(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationOracle = Airbyte.GetDestinationOracle.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationOracle(ctx, \u0026airbyte.LookupDestinationOracleArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationOracleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationOracle = AirbyteFunctions.getDestinationOracle(GetDestinationOracleArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationOracle:\n    fn::invoke:\n      Function: airbyte:getDestinationOracle\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationOracle.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationOracle.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationOracleConfiguration:getDestinationOracleConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationPostgres:getDestinationPostgres": {
            "description": "DestinationPostgres DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationPostgres = airbyte.getDestinationPostgres({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_postgres = airbyte.get_destination_postgres(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationPostgres = Airbyte.GetDestinationPostgres.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationPostgres(ctx, \u0026airbyte.LookupDestinationPostgresArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationPostgresArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationPostgres = AirbyteFunctions.getDestinationPostgres(GetDestinationPostgresArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationPostgres:\n    fn::invoke:\n      Function: airbyte:getDestinationPostgres\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationPostgres.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationPostgres.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationPostgresConfiguration:getDestinationPostgresConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationPubsub:getDestinationPubsub": {
            "description": "DestinationPubsub DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationPubsub = airbyte.getDestinationPubsub({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_pubsub = airbyte.get_destination_pubsub(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationPubsub = Airbyte.GetDestinationPubsub.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationPubsub(ctx, \u0026airbyte.LookupDestinationPubsubArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationPubsubArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationPubsub = AirbyteFunctions.getDestinationPubsub(GetDestinationPubsubArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationPubsub:\n    fn::invoke:\n      Function: airbyte:getDestinationPubsub\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationPubsub.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationPubsub.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationPubsubConfiguration:getDestinationPubsubConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationRedis:getDestinationRedis": {
            "description": "DestinationRedis DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationRedis = airbyte.getDestinationRedis({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_redis = airbyte.get_destination_redis(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationRedis = Airbyte.GetDestinationRedis.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationRedis(ctx, \u0026airbyte.LookupDestinationRedisArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationRedisArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationRedis = AirbyteFunctions.getDestinationRedis(GetDestinationRedisArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationRedis:\n    fn::invoke:\n      Function: airbyte:getDestinationRedis\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationRedis.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationRedis.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationRedisConfiguration:getDestinationRedisConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationRedshift:getDestinationRedshift": {
            "description": "DestinationRedshift DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationRedshift = airbyte.getDestinationRedshift({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_redshift = airbyte.get_destination_redshift(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationRedshift = Airbyte.GetDestinationRedshift.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationRedshift(ctx, \u0026airbyte.LookupDestinationRedshiftArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationRedshiftArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationRedshift = AirbyteFunctions.getDestinationRedshift(GetDestinationRedshiftArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationRedshift:\n    fn::invoke:\n      Function: airbyte:getDestinationRedshift\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationRedshift.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationRedshift.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationRedshiftConfiguration:getDestinationRedshiftConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationS3:getDestinationS3": {
            "description": "DestinationS3 DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationS3 = airbyte.getDestinationS3({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_s3 = airbyte.get_destination_s3(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationS3 = Airbyte.GetDestinationS3.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationS3(ctx, \u0026airbyte.LookupDestinationS3Args{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationS3Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationS3 = AirbyteFunctions.getDestinationS3(GetDestinationS3Args.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationS3:\n    fn::invoke:\n      Function: airbyte:getDestinationS3\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationS3.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationS3.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationS3Configuration:getDestinationS3Configuration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationS3Glue:getDestinationS3Glue": {
            "description": "DestinationS3Glue DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationS3glue = airbyte.getDestinationS3Glue({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_s3glue = airbyte.get_destination_s3_glue(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationS3glue = Airbyte.GetDestinationS3Glue.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationS3Glue(ctx, \u0026airbyte.LookupDestinationS3GlueArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationS3GlueArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationS3glue = AirbyteFunctions.getDestinationS3Glue(GetDestinationS3GlueArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationS3glue:\n    fn::invoke:\n      Function: airbyte:getDestinationS3Glue\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationS3Glue.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationS3Glue.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationS3GlueConfiguration:getDestinationS3GlueConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationSftpJson:getDestinationSftpJson": {
            "description": "DestinationSftpJSON DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationSftpjson = airbyte.getDestinationSftpJson({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_sftpjson = airbyte.get_destination_sftp_json(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationSftpjson = Airbyte.GetDestinationSftpJson.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationSftpJson(ctx, \u0026airbyte.LookupDestinationSftpJsonArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationSftpJsonArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationSftpjson = AirbyteFunctions.getDestinationSftpJson(GetDestinationSftpJsonArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationSftpjson:\n    fn::invoke:\n      Function: airbyte:getDestinationSftpJson\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationSftpJson.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationSftpJson.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationSftpJsonConfiguration:getDestinationSftpJsonConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationSnowflake:getDestinationSnowflake": {
            "description": "DestinationSnowflake DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationSnowflake = airbyte.getDestinationSnowflake({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_snowflake = airbyte.get_destination_snowflake(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationSnowflake = Airbyte.GetDestinationSnowflake.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationSnowflake(ctx, \u0026airbyte.LookupDestinationSnowflakeArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationSnowflakeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationSnowflake = AirbyteFunctions.getDestinationSnowflake(GetDestinationSnowflakeArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationSnowflake:\n    fn::invoke:\n      Function: airbyte:getDestinationSnowflake\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationSnowflake.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationSnowflake.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationSnowflakeConfiguration:getDestinationSnowflakeConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationTimeplus:getDestinationTimeplus": {
            "description": "DestinationTimeplus DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationTimeplus = airbyte.getDestinationTimeplus({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_timeplus = airbyte.get_destination_timeplus(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationTimeplus = Airbyte.GetDestinationTimeplus.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationTimeplus(ctx, \u0026airbyte.LookupDestinationTimeplusArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationTimeplusArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationTimeplus = AirbyteFunctions.getDestinationTimeplus(GetDestinationTimeplusArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationTimeplus:\n    fn::invoke:\n      Function: airbyte:getDestinationTimeplus\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationTimeplus.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationTimeplus.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationTimeplusConfiguration:getDestinationTimeplusConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationTypesense:getDestinationTypesense": {
            "description": "DestinationTypesense DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationTypesense = airbyte.getDestinationTypesense({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_typesense = airbyte.get_destination_typesense(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationTypesense = Airbyte.GetDestinationTypesense.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationTypesense(ctx, \u0026airbyte.LookupDestinationTypesenseArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationTypesenseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationTypesense = AirbyteFunctions.getDestinationTypesense(GetDestinationTypesenseArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationTypesense:\n    fn::invoke:\n      Function: airbyte:getDestinationTypesense\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationTypesense.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationTypesense.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationTypesenseConfiguration:getDestinationTypesenseConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationVertica:getDestinationVertica": {
            "description": "DestinationVertica DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationVertica = airbyte.getDestinationVertica({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_vertica = airbyte.get_destination_vertica(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationVertica = Airbyte.GetDestinationVertica.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationVertica(ctx, \u0026airbyte.LookupDestinationVerticaArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationVerticaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationVertica = AirbyteFunctions.getDestinationVertica(GetDestinationVerticaArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationVertica:\n    fn::invoke:\n      Function: airbyte:getDestinationVertica\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationVertica.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationVertica.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationVerticaConfiguration:getDestinationVerticaConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getDestinationXata:getDestinationXata": {
            "description": "DestinationXata DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myDestinationXata = airbyte.getDestinationXata({\n    destinationId: \"...my_destination_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_destination_xata = airbyte.get_destination_xata(destination_id=\"...my_destination_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDestinationXata = Airbyte.GetDestinationXata.Invoke(new()\n    {\n        DestinationId = \"...my_destination_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupDestinationXata(ctx, \u0026airbyte.LookupDestinationXataArgs{\n\t\t\tDestinationId: \"...my_destination_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetDestinationXataArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDestinationXata = AirbyteFunctions.getDestinationXata(GetDestinationXataArgs.builder()\n            .destinationId(\"...my_destination_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDestinationXata:\n    fn::invoke:\n      Function: airbyte:getDestinationXata\n      Arguments:\n        destinationId: '...my_destination_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDestinationXata.\n",
                "properties": {
                    "destinationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "destinationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDestinationXata.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getDestinationXataConfiguration:getDestinationXataConfiguration"
                    },
                    "destinationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "destinationId",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceAha:getSourceAha": {
            "description": "SourceAha DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceAha = airbyte.getSourceAha({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_aha = airbyte.get_source_aha(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceAha = Airbyte.GetSourceAha.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceAha(ctx, \u0026airbyte.LookupSourceAhaArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceAhaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceAha = AirbyteFunctions.getSourceAha(GetSourceAhaArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceAha:\n    fn::invoke:\n      Function: airbyte:getSourceAha\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceAha.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceAha.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceAhaConfiguration:getSourceAhaConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceAircall:getSourceAircall": {
            "description": "SourceAircall DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceAircall = airbyte.getSourceAircall({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_aircall = airbyte.get_source_aircall(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceAircall = Airbyte.GetSourceAircall.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceAircall(ctx, \u0026airbyte.LookupSourceAircallArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceAircallArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceAircall = AirbyteFunctions.getSourceAircall(GetSourceAircallArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceAircall:\n    fn::invoke:\n      Function: airbyte:getSourceAircall\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceAircall.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceAircall.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceAircallConfiguration:getSourceAircallConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceAirtable:getSourceAirtable": {
            "description": "SourceAirtable DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceAirtable = airbyte.getSourceAirtable({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_airtable = airbyte.get_source_airtable(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceAirtable = Airbyte.GetSourceAirtable.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceAirtable(ctx, \u0026airbyte.LookupSourceAirtableArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceAirtableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceAirtable = AirbyteFunctions.getSourceAirtable(GetSourceAirtableArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceAirtable:\n    fn::invoke:\n      Function: airbyte:getSourceAirtable\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceAirtable.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceAirtable.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceAirtableConfiguration:getSourceAirtableConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceAlloydb:getSourceAlloydb": {
            "description": "SourceAlloydb DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceAlloydb = airbyte.getSourceAlloydb({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_alloydb = airbyte.get_source_alloydb(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceAlloydb = Airbyte.GetSourceAlloydb.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceAlloydb(ctx, \u0026airbyte.LookupSourceAlloydbArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceAlloydbArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceAlloydb = AirbyteFunctions.getSourceAlloydb(GetSourceAlloydbArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceAlloydb:\n    fn::invoke:\n      Function: airbyte:getSourceAlloydb\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceAlloydb.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceAlloydb.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceAlloydbConfiguration:getSourceAlloydbConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceAmazonAds:getSourceAmazonAds": {
            "description": "SourceAmazonAds DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceAmazonads = airbyte.getSourceAmazonAds({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_amazonads = airbyte.get_source_amazon_ads(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceAmazonads = Airbyte.GetSourceAmazonAds.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceAmazonAds(ctx, \u0026airbyte.LookupSourceAmazonAdsArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceAmazonAdsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceAmazonads = AirbyteFunctions.getSourceAmazonAds(GetSourceAmazonAdsArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceAmazonads:\n    fn::invoke:\n      Function: airbyte:getSourceAmazonAds\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceAmazonAds.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceAmazonAds.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceAmazonAdsConfiguration:getSourceAmazonAdsConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceAmazonSellerPartner:getSourceAmazonSellerPartner": {
            "description": "SourceAmazonSellerPartner DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceAmazonsellerpartner = airbyte.getSourceAmazonSellerPartner({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_amazonsellerpartner = airbyte.get_source_amazon_seller_partner(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceAmazonsellerpartner = Airbyte.GetSourceAmazonSellerPartner.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceAmazonSellerPartner(ctx, \u0026airbyte.LookupSourceAmazonSellerPartnerArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceAmazonSellerPartnerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceAmazonsellerpartner = AirbyteFunctions.getSourceAmazonSellerPartner(GetSourceAmazonSellerPartnerArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceAmazonsellerpartner:\n    fn::invoke:\n      Function: airbyte:getSourceAmazonSellerPartner\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceAmazonSellerPartner.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceAmazonSellerPartner.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceAmazonSellerPartnerConfiguration:getSourceAmazonSellerPartnerConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceAmazonSqs:getSourceAmazonSqs": {
            "description": "SourceAmazonSqs DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceAmazonsqs = airbyte.getSourceAmazonSqs({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_amazonsqs = airbyte.get_source_amazon_sqs(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceAmazonsqs = Airbyte.GetSourceAmazonSqs.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceAmazonSqs(ctx, \u0026airbyte.LookupSourceAmazonSqsArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceAmazonSqsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceAmazonsqs = AirbyteFunctions.getSourceAmazonSqs(GetSourceAmazonSqsArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceAmazonsqs:\n    fn::invoke:\n      Function: airbyte:getSourceAmazonSqs\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceAmazonSqs.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceAmazonSqs.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceAmazonSqsConfiguration:getSourceAmazonSqsConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceAmplitude:getSourceAmplitude": {
            "description": "SourceAmplitude DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceAmplitude = airbyte.getSourceAmplitude({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_amplitude = airbyte.get_source_amplitude(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceAmplitude = Airbyte.GetSourceAmplitude.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceAmplitude(ctx, \u0026airbyte.LookupSourceAmplitudeArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceAmplitudeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceAmplitude = AirbyteFunctions.getSourceAmplitude(GetSourceAmplitudeArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceAmplitude:\n    fn::invoke:\n      Function: airbyte:getSourceAmplitude\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceAmplitude.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceAmplitude.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceAmplitudeConfiguration:getSourceAmplitudeConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceApifyDataset:getSourceApifyDataset": {
            "description": "SourceApifyDataset DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceApifydataset = airbyte.getSourceApifyDataset({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_apifydataset = airbyte.get_source_apify_dataset(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceApifydataset = Airbyte.GetSourceApifyDataset.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceApifyDataset(ctx, \u0026airbyte.LookupSourceApifyDatasetArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceApifyDatasetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceApifydataset = AirbyteFunctions.getSourceApifyDataset(GetSourceApifyDatasetArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceApifydataset:\n    fn::invoke:\n      Function: airbyte:getSourceApifyDataset\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceApifyDataset.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceApifyDataset.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceApifyDatasetConfiguration:getSourceApifyDatasetConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceAppfollow:getSourceAppfollow": {
            "description": "SourceAppfollow DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceAppfollow = airbyte.getSourceAppfollow({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_appfollow = airbyte.get_source_appfollow(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceAppfollow = Airbyte.GetSourceAppfollow.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceAppfollow(ctx, \u0026airbyte.LookupSourceAppfollowArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceAppfollowArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceAppfollow = AirbyteFunctions.getSourceAppfollow(GetSourceAppfollowArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceAppfollow:\n    fn::invoke:\n      Function: airbyte:getSourceAppfollow\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceAppfollow.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceAppfollow.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceAppfollowConfiguration:getSourceAppfollowConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceAsana:getSourceAsana": {
            "description": "SourceAsana DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceAsana = airbyte.getSourceAsana({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_asana = airbyte.get_source_asana(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceAsana = Airbyte.GetSourceAsana.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceAsana(ctx, \u0026airbyte.LookupSourceAsanaArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceAsanaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceAsana = AirbyteFunctions.getSourceAsana(GetSourceAsanaArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceAsana:\n    fn::invoke:\n      Function: airbyte:getSourceAsana\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceAsana.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceAsana.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceAsanaConfiguration:getSourceAsanaConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceAuth0:getSourceAuth0": {
            "description": "SourceAuth0 DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceAuth0 = airbyte.getSourceAuth0({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_auth0 = airbyte.get_source_auth0(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceAuth0 = Airbyte.GetSourceAuth0.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceAuth0(ctx, \u0026airbyte.LookupSourceAuth0Args{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceAuth0Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceAuth0 = AirbyteFunctions.getSourceAuth0(GetSourceAuth0Args.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceAuth0:\n    fn::invoke:\n      Function: airbyte:getSourceAuth0\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceAuth0.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceAuth0.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceAuth0Configuration:getSourceAuth0Configuration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceAwsCloudtrail:getSourceAwsCloudtrail": {
            "description": "SourceAwsCloudtrail DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceAwscloudtrail = airbyte.getSourceAwsCloudtrail({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_awscloudtrail = airbyte.get_source_aws_cloudtrail(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceAwscloudtrail = Airbyte.GetSourceAwsCloudtrail.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceAwsCloudtrail(ctx, \u0026airbyte.LookupSourceAwsCloudtrailArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceAwsCloudtrailArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceAwscloudtrail = AirbyteFunctions.getSourceAwsCloudtrail(GetSourceAwsCloudtrailArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceAwscloudtrail:\n    fn::invoke:\n      Function: airbyte:getSourceAwsCloudtrail\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceAwsCloudtrail.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceAwsCloudtrail.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceAwsCloudtrailConfiguration:getSourceAwsCloudtrailConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceAzureBlobStorage:getSourceAzureBlobStorage": {
            "description": "SourceAzureBlobStorage DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceAzureblobstorage = airbyte.getSourceAzureBlobStorage({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_azureblobstorage = airbyte.get_source_azure_blob_storage(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceAzureblobstorage = Airbyte.GetSourceAzureBlobStorage.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceAzureBlobStorage(ctx, \u0026airbyte.LookupSourceAzureBlobStorageArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceAzureBlobStorageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceAzureblobstorage = AirbyteFunctions.getSourceAzureBlobStorage(GetSourceAzureBlobStorageArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceAzureblobstorage:\n    fn::invoke:\n      Function: airbyte:getSourceAzureBlobStorage\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceAzureBlobStorage.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceAzureBlobStorage.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceAzureBlobStorageConfiguration:getSourceAzureBlobStorageConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceAzureTable:getSourceAzureTable": {
            "description": "SourceAzureTable DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceAzuretable = airbyte.getSourceAzureTable({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_azuretable = airbyte.get_source_azure_table(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceAzuretable = Airbyte.GetSourceAzureTable.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceAzureTable(ctx, \u0026airbyte.LookupSourceAzureTableArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceAzureTableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceAzuretable = AirbyteFunctions.getSourceAzureTable(GetSourceAzureTableArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceAzuretable:\n    fn::invoke:\n      Function: airbyte:getSourceAzureTable\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceAzureTable.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceAzureTable.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceAzureTableConfiguration:getSourceAzureTableConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceBambooHr:getSourceBambooHr": {
            "description": "SourceBambooHr DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceBamboohr = airbyte.getSourceBambooHr({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_bamboohr = airbyte.get_source_bamboo_hr(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceBamboohr = Airbyte.GetSourceBambooHr.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceBambooHr(ctx, \u0026airbyte.LookupSourceBambooHrArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceBambooHrArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceBamboohr = AirbyteFunctions.getSourceBambooHr(GetSourceBambooHrArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceBamboohr:\n    fn::invoke:\n      Function: airbyte:getSourceBambooHr\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceBambooHr.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceBambooHr.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceBambooHrConfiguration:getSourceBambooHrConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceBigcommerce:getSourceBigcommerce": {
            "description": "SourceBigcommerce DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceBigcommerce = airbyte.getSourceBigcommerce({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_bigcommerce = airbyte.get_source_bigcommerce(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceBigcommerce = Airbyte.GetSourceBigcommerce.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceBigcommerce(ctx, \u0026airbyte.LookupSourceBigcommerceArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceBigcommerceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceBigcommerce = AirbyteFunctions.getSourceBigcommerce(GetSourceBigcommerceArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceBigcommerce:\n    fn::invoke:\n      Function: airbyte:getSourceBigcommerce\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceBigcommerce.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceBigcommerce.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceBigcommerceConfiguration:getSourceBigcommerceConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceBigquery:getSourceBigquery": {
            "description": "SourceBigquery DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceBigquery = airbyte.getSourceBigquery({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_bigquery = airbyte.get_source_bigquery(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceBigquery = Airbyte.GetSourceBigquery.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceBigquery(ctx, \u0026airbyte.LookupSourceBigqueryArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceBigqueryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceBigquery = AirbyteFunctions.getSourceBigquery(GetSourceBigqueryArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceBigquery:\n    fn::invoke:\n      Function: airbyte:getSourceBigquery\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceBigquery.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceBigquery.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceBigqueryConfiguration:getSourceBigqueryConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceBingAds:getSourceBingAds": {
            "description": "SourceBingAds DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceBingads = airbyte.getSourceBingAds({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_bingads = airbyte.get_source_bing_ads(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceBingads = Airbyte.GetSourceBingAds.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceBingAds(ctx, \u0026airbyte.LookupSourceBingAdsArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceBingAdsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceBingads = AirbyteFunctions.getSourceBingAds(GetSourceBingAdsArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceBingads:\n    fn::invoke:\n      Function: airbyte:getSourceBingAds\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceBingAds.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceBingAds.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceBingAdsConfiguration:getSourceBingAdsConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceBraintree:getSourceBraintree": {
            "description": "SourceBraintree DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceBraintree = airbyte.getSourceBraintree({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_braintree = airbyte.get_source_braintree(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceBraintree = Airbyte.GetSourceBraintree.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceBraintree(ctx, \u0026airbyte.LookupSourceBraintreeArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceBraintreeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceBraintree = AirbyteFunctions.getSourceBraintree(GetSourceBraintreeArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceBraintree:\n    fn::invoke:\n      Function: airbyte:getSourceBraintree\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceBraintree.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceBraintree.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceBraintreeConfiguration:getSourceBraintreeConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceBraze:getSourceBraze": {
            "description": "SourceBraze DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceBraze = airbyte.getSourceBraze({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_braze = airbyte.get_source_braze(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceBraze = Airbyte.GetSourceBraze.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceBraze(ctx, \u0026airbyte.LookupSourceBrazeArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceBrazeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceBraze = AirbyteFunctions.getSourceBraze(GetSourceBrazeArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceBraze:\n    fn::invoke:\n      Function: airbyte:getSourceBraze\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceBraze.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceBraze.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceBrazeConfiguration:getSourceBrazeConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceChargebee:getSourceChargebee": {
            "description": "SourceChargebee DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceChargebee = airbyte.getSourceChargebee({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_chargebee = airbyte.get_source_chargebee(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceChargebee = Airbyte.GetSourceChargebee.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceChargebee(ctx, \u0026airbyte.LookupSourceChargebeeArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceChargebeeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceChargebee = AirbyteFunctions.getSourceChargebee(GetSourceChargebeeArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceChargebee:\n    fn::invoke:\n      Function: airbyte:getSourceChargebee\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceChargebee.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceChargebee.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceChargebeeConfiguration:getSourceChargebeeConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceChartmogul:getSourceChartmogul": {
            "description": "SourceChartmogul DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceChartmogul = airbyte.getSourceChartmogul({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_chartmogul = airbyte.get_source_chartmogul(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceChartmogul = Airbyte.GetSourceChartmogul.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceChartmogul(ctx, \u0026airbyte.LookupSourceChartmogulArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceChartmogulArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceChartmogul = AirbyteFunctions.getSourceChartmogul(GetSourceChartmogulArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceChartmogul:\n    fn::invoke:\n      Function: airbyte:getSourceChartmogul\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceChartmogul.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceChartmogul.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceChartmogulConfiguration:getSourceChartmogulConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceClickhouse:getSourceClickhouse": {
            "description": "SourceClickhouse DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceClickhouse = airbyte.getSourceClickhouse({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_clickhouse = airbyte.get_source_clickhouse(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceClickhouse = Airbyte.GetSourceClickhouse.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceClickhouse(ctx, \u0026airbyte.LookupSourceClickhouseArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceClickhouseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceClickhouse = AirbyteFunctions.getSourceClickhouse(GetSourceClickhouseArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceClickhouse:\n    fn::invoke:\n      Function: airbyte:getSourceClickhouse\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceClickhouse.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceClickhouse.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceClickhouseConfiguration:getSourceClickhouseConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceClickupApi:getSourceClickupApi": {
            "description": "SourceClickupAPI DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceClickupapi = airbyte.getSourceClickupApi({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_clickupapi = airbyte.get_source_clickup_api(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceClickupapi = Airbyte.GetSourceClickupApi.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceClickupApi(ctx, \u0026airbyte.LookupSourceClickupApiArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceClickupApiArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceClickupapi = AirbyteFunctions.getSourceClickupApi(GetSourceClickupApiArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceClickupapi:\n    fn::invoke:\n      Function: airbyte:getSourceClickupApi\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceClickupApi.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceClickupApi.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceClickupApiConfiguration:getSourceClickupApiConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceClockify:getSourceClockify": {
            "description": "SourceClockify DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceClockify = airbyte.getSourceClockify({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_clockify = airbyte.get_source_clockify(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceClockify = Airbyte.GetSourceClockify.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceClockify(ctx, \u0026airbyte.LookupSourceClockifyArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceClockifyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceClockify = AirbyteFunctions.getSourceClockify(GetSourceClockifyArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceClockify:\n    fn::invoke:\n      Function: airbyte:getSourceClockify\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceClockify.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceClockify.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceClockifyConfiguration:getSourceClockifyConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceCloseCom:getSourceCloseCom": {
            "description": "SourceCloseCom DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceClosecom = airbyte.getSourceCloseCom({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_closecom = airbyte.get_source_close_com(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceClosecom = Airbyte.GetSourceCloseCom.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceCloseCom(ctx, \u0026airbyte.LookupSourceCloseComArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceCloseComArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceClosecom = AirbyteFunctions.getSourceCloseCom(GetSourceCloseComArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceClosecom:\n    fn::invoke:\n      Function: airbyte:getSourceCloseCom\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceCloseCom.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceCloseCom.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceCloseComConfiguration:getSourceCloseComConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceCoda:getSourceCoda": {
            "description": "SourceCoda DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceCoda = airbyte.getSourceCoda({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_coda = airbyte.get_source_coda(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceCoda = Airbyte.GetSourceCoda.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceCoda(ctx, \u0026airbyte.LookupSourceCodaArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceCodaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceCoda = AirbyteFunctions.getSourceCoda(GetSourceCodaArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceCoda:\n    fn::invoke:\n      Function: airbyte:getSourceCoda\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceCoda.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceCoda.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceCodaConfiguration:getSourceCodaConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceCoinApi:getSourceCoinApi": {
            "description": "SourceCoinAPI DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceCoinapi = airbyte.getSourceCoinApi({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_coinapi = airbyte.get_source_coin_api(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceCoinapi = Airbyte.GetSourceCoinApi.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceCoinApi(ctx, \u0026airbyte.LookupSourceCoinApiArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceCoinApiArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceCoinapi = AirbyteFunctions.getSourceCoinApi(GetSourceCoinApiArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceCoinapi:\n    fn::invoke:\n      Function: airbyte:getSourceCoinApi\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceCoinApi.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceCoinApi.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceCoinApiConfiguration:getSourceCoinApiConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceCoinmarketcap:getSourceCoinmarketcap": {
            "description": "SourceCoinmarketcap DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceCoinmarketcap = airbyte.getSourceCoinmarketcap({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_coinmarketcap = airbyte.get_source_coinmarketcap(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceCoinmarketcap = Airbyte.GetSourceCoinmarketcap.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceCoinmarketcap(ctx, \u0026airbyte.LookupSourceCoinmarketcapArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceCoinmarketcapArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceCoinmarketcap = AirbyteFunctions.getSourceCoinmarketcap(GetSourceCoinmarketcapArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceCoinmarketcap:\n    fn::invoke:\n      Function: airbyte:getSourceCoinmarketcap\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceCoinmarketcap.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceCoinmarketcap.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceCoinmarketcapConfiguration:getSourceCoinmarketcapConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceConfigcat:getSourceConfigcat": {
            "description": "SourceConfigcat DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceConfigcat = airbyte.getSourceConfigcat({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_configcat = airbyte.get_source_configcat(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceConfigcat = Airbyte.GetSourceConfigcat.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceConfigcat(ctx, \u0026airbyte.LookupSourceConfigcatArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceConfigcatArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceConfigcat = AirbyteFunctions.getSourceConfigcat(GetSourceConfigcatArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceConfigcat:\n    fn::invoke:\n      Function: airbyte:getSourceConfigcat\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceConfigcat.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceConfigcat.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceConfigcatConfiguration:getSourceConfigcatConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceConfluence:getSourceConfluence": {
            "description": "SourceConfluence DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceConfluence = airbyte.getSourceConfluence({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_confluence = airbyte.get_source_confluence(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceConfluence = Airbyte.GetSourceConfluence.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceConfluence(ctx, \u0026airbyte.LookupSourceConfluenceArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceConfluenceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceConfluence = AirbyteFunctions.getSourceConfluence(GetSourceConfluenceArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceConfluence:\n    fn::invoke:\n      Function: airbyte:getSourceConfluence\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceConfluence.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceConfluence.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceConfluenceConfiguration:getSourceConfluenceConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceConvex:getSourceConvex": {
            "description": "SourceConvex DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceConvex = airbyte.getSourceConvex({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_convex = airbyte.get_source_convex(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceConvex = Airbyte.GetSourceConvex.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceConvex(ctx, \u0026airbyte.LookupSourceConvexArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceConvexArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceConvex = AirbyteFunctions.getSourceConvex(GetSourceConvexArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceConvex:\n    fn::invoke:\n      Function: airbyte:getSourceConvex\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceConvex.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceConvex.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceConvexConfiguration:getSourceConvexConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceDatadog:getSourceDatadog": {
            "description": "SourceDatadog DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceDatadog = airbyte.getSourceDatadog({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_datadog = airbyte.get_source_datadog(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceDatadog = Airbyte.GetSourceDatadog.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceDatadog(ctx, \u0026airbyte.LookupSourceDatadogArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceDatadogArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceDatadog = AirbyteFunctions.getSourceDatadog(GetSourceDatadogArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceDatadog:\n    fn::invoke:\n      Function: airbyte:getSourceDatadog\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceDatadog.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceDatadog.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceDatadogConfiguration:getSourceDatadogConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceDatascope:getSourceDatascope": {
            "description": "SourceDatascope DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceDatascope = airbyte.getSourceDatascope({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_datascope = airbyte.get_source_datascope(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceDatascope = Airbyte.GetSourceDatascope.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceDatascope(ctx, \u0026airbyte.LookupSourceDatascopeArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceDatascopeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceDatascope = AirbyteFunctions.getSourceDatascope(GetSourceDatascopeArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceDatascope:\n    fn::invoke:\n      Function: airbyte:getSourceDatascope\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceDatascope.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceDatascope.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceDatascopeConfiguration:getSourceDatascopeConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceDelighted:getSourceDelighted": {
            "description": "SourceDelighted DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceDelighted = airbyte.getSourceDelighted({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_delighted = airbyte.get_source_delighted(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceDelighted = Airbyte.GetSourceDelighted.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceDelighted(ctx, \u0026airbyte.LookupSourceDelightedArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceDelightedArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceDelighted = AirbyteFunctions.getSourceDelighted(GetSourceDelightedArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceDelighted:\n    fn::invoke:\n      Function: airbyte:getSourceDelighted\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceDelighted.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceDelighted.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceDelightedConfiguration:getSourceDelightedConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceDixa:getSourceDixa": {
            "description": "SourceDixa DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceDixa = airbyte.getSourceDixa({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_dixa = airbyte.get_source_dixa(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceDixa = Airbyte.GetSourceDixa.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceDixa(ctx, \u0026airbyte.LookupSourceDixaArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceDixaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceDixa = AirbyteFunctions.getSourceDixa(GetSourceDixaArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceDixa:\n    fn::invoke:\n      Function: airbyte:getSourceDixa\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceDixa.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceDixa.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceDixaConfiguration:getSourceDixaConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceDockerhub:getSourceDockerhub": {
            "description": "SourceDockerhub DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceDockerhub = airbyte.getSourceDockerhub({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_dockerhub = airbyte.get_source_dockerhub(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceDockerhub = Airbyte.GetSourceDockerhub.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceDockerhub(ctx, \u0026airbyte.LookupSourceDockerhubArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceDockerhubArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceDockerhub = AirbyteFunctions.getSourceDockerhub(GetSourceDockerhubArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceDockerhub:\n    fn::invoke:\n      Function: airbyte:getSourceDockerhub\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceDockerhub.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceDockerhub.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceDockerhubConfiguration:getSourceDockerhubConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceDremio:getSourceDremio": {
            "description": "SourceDremio DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceDremio = airbyte.getSourceDremio({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_dremio = airbyte.get_source_dremio(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceDremio = Airbyte.GetSourceDremio.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceDremio(ctx, \u0026airbyte.LookupSourceDremioArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceDremioArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceDremio = AirbyteFunctions.getSourceDremio(GetSourceDremioArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceDremio:\n    fn::invoke:\n      Function: airbyte:getSourceDremio\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceDremio.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceDremio.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceDremioConfiguration:getSourceDremioConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceDynamodb:getSourceDynamodb": {
            "description": "SourceDynamodb DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceDynamodb = airbyte.getSourceDynamodb({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_dynamodb = airbyte.get_source_dynamodb(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceDynamodb = Airbyte.GetSourceDynamodb.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceDynamodb(ctx, \u0026airbyte.LookupSourceDynamodbArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceDynamodbArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceDynamodb = AirbyteFunctions.getSourceDynamodb(GetSourceDynamodbArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceDynamodb:\n    fn::invoke:\n      Function: airbyte:getSourceDynamodb\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceDynamodb.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceDynamodb.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceDynamodbConfiguration:getSourceDynamodbConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceE2eTestCloud:getSourceE2eTestCloud": {
            "description": "SourceE2eTestCloud DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceE2etestcloud = airbyte.getSourceE2eTestCloud({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_e2etestcloud = airbyte.get_source_e2e_test_cloud(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceE2etestcloud = Airbyte.GetSourceE2eTestCloud.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceE2eTestCloud(ctx, \u0026airbyte.LookupSourceE2eTestCloudArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceE2eTestCloudArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceE2etestcloud = AirbyteFunctions.getSourceE2eTestCloud(GetSourceE2eTestCloudArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceE2etestcloud:\n    fn::invoke:\n      Function: airbyte:getSourceE2eTestCloud\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceE2eTestCloud.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceE2eTestCloud.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceE2eTestCloudConfiguration:getSourceE2eTestCloudConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceEmailoctopus:getSourceEmailoctopus": {
            "description": "SourceEmailoctopus DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceEmailoctopus = airbyte.getSourceEmailoctopus({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_emailoctopus = airbyte.get_source_emailoctopus(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceEmailoctopus = Airbyte.GetSourceEmailoctopus.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceEmailoctopus(ctx, \u0026airbyte.LookupSourceEmailoctopusArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceEmailoctopusArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceEmailoctopus = AirbyteFunctions.getSourceEmailoctopus(GetSourceEmailoctopusArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceEmailoctopus:\n    fn::invoke:\n      Function: airbyte:getSourceEmailoctopus\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceEmailoctopus.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceEmailoctopus.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceEmailoctopusConfiguration:getSourceEmailoctopusConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceExchangeRates:getSourceExchangeRates": {
            "description": "SourceExchangeRates DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceExchangerates = airbyte.getSourceExchangeRates({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_exchangerates = airbyte.get_source_exchange_rates(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceExchangerates = Airbyte.GetSourceExchangeRates.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceExchangeRates(ctx, \u0026airbyte.LookupSourceExchangeRatesArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceExchangeRatesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceExchangerates = AirbyteFunctions.getSourceExchangeRates(GetSourceExchangeRatesArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceExchangerates:\n    fn::invoke:\n      Function: airbyte:getSourceExchangeRates\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceExchangeRates.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceExchangeRates.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceExchangeRatesConfiguration:getSourceExchangeRatesConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceFacebookMarketing:getSourceFacebookMarketing": {
            "description": "SourceFacebookMarketing DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceFacebookmarketing = airbyte.getSourceFacebookMarketing({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_facebookmarketing = airbyte.get_source_facebook_marketing(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceFacebookmarketing = Airbyte.GetSourceFacebookMarketing.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceFacebookMarketing(ctx, \u0026airbyte.LookupSourceFacebookMarketingArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceFacebookMarketingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceFacebookmarketing = AirbyteFunctions.getSourceFacebookMarketing(GetSourceFacebookMarketingArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceFacebookmarketing:\n    fn::invoke:\n      Function: airbyte:getSourceFacebookMarketing\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceFacebookMarketing.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceFacebookMarketing.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceFacebookMarketingConfiguration:getSourceFacebookMarketingConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceFacebookPages:getSourceFacebookPages": {
            "description": "SourceFacebookPages DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceFacebookpages = airbyte.getSourceFacebookPages({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_facebookpages = airbyte.get_source_facebook_pages(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceFacebookpages = Airbyte.GetSourceFacebookPages.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceFacebookPages(ctx, \u0026airbyte.LookupSourceFacebookPagesArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceFacebookPagesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceFacebookpages = AirbyteFunctions.getSourceFacebookPages(GetSourceFacebookPagesArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceFacebookpages:\n    fn::invoke:\n      Function: airbyte:getSourceFacebookPages\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceFacebookPages.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceFacebookPages.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceFacebookPagesConfiguration:getSourceFacebookPagesConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceFaker:getSourceFaker": {
            "description": "SourceFaker DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceFaker = airbyte.getSourceFaker({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_faker = airbyte.get_source_faker(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceFaker = Airbyte.GetSourceFaker.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceFaker(ctx, \u0026airbyte.LookupSourceFakerArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceFakerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceFaker = AirbyteFunctions.getSourceFaker(GetSourceFakerArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceFaker:\n    fn::invoke:\n      Function: airbyte:getSourceFaker\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceFaker.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceFaker.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceFakerConfiguration:getSourceFakerConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceFauna:getSourceFauna": {
            "description": "SourceFauna DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceFauna = airbyte.getSourceFauna({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_fauna = airbyte.get_source_fauna(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceFauna = Airbyte.GetSourceFauna.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceFauna(ctx, \u0026airbyte.LookupSourceFaunaArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceFaunaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceFauna = AirbyteFunctions.getSourceFauna(GetSourceFaunaArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceFauna:\n    fn::invoke:\n      Function: airbyte:getSourceFauna\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceFauna.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceFauna.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceFaunaConfiguration:getSourceFaunaConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceFileSecure:getSourceFileSecure": {
            "description": "SourceFileSecure DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceFilesecure = airbyte.getSourceFileSecure({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_filesecure = airbyte.get_source_file_secure(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceFilesecure = Airbyte.GetSourceFileSecure.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceFileSecure(ctx, \u0026airbyte.LookupSourceFileSecureArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceFileSecureArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceFilesecure = AirbyteFunctions.getSourceFileSecure(GetSourceFileSecureArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceFilesecure:\n    fn::invoke:\n      Function: airbyte:getSourceFileSecure\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceFileSecure.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceFileSecure.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceFileSecureConfiguration:getSourceFileSecureConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceFirebolt:getSourceFirebolt": {
            "description": "SourceFirebolt DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceFirebolt = airbyte.getSourceFirebolt({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_firebolt = airbyte.get_source_firebolt(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceFirebolt = Airbyte.GetSourceFirebolt.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceFirebolt(ctx, \u0026airbyte.LookupSourceFireboltArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceFireboltArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceFirebolt = AirbyteFunctions.getSourceFirebolt(GetSourceFireboltArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceFirebolt:\n    fn::invoke:\n      Function: airbyte:getSourceFirebolt\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceFirebolt.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceFirebolt.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceFireboltConfiguration:getSourceFireboltConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceFreshcaller:getSourceFreshcaller": {
            "description": "SourceFreshcaller DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceFreshcaller = airbyte.getSourceFreshcaller({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_freshcaller = airbyte.get_source_freshcaller(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceFreshcaller = Airbyte.GetSourceFreshcaller.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceFreshcaller(ctx, \u0026airbyte.LookupSourceFreshcallerArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceFreshcallerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceFreshcaller = AirbyteFunctions.getSourceFreshcaller(GetSourceFreshcallerArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceFreshcaller:\n    fn::invoke:\n      Function: airbyte:getSourceFreshcaller\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceFreshcaller.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceFreshcaller.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceFreshcallerConfiguration:getSourceFreshcallerConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceFreshdesk:getSourceFreshdesk": {
            "description": "SourceFreshdesk DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceFreshdesk = airbyte.getSourceFreshdesk({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_freshdesk = airbyte.get_source_freshdesk(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceFreshdesk = Airbyte.GetSourceFreshdesk.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceFreshdesk(ctx, \u0026airbyte.LookupSourceFreshdeskArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceFreshdeskArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceFreshdesk = AirbyteFunctions.getSourceFreshdesk(GetSourceFreshdeskArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceFreshdesk:\n    fn::invoke:\n      Function: airbyte:getSourceFreshdesk\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceFreshdesk.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceFreshdesk.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceFreshdeskConfiguration:getSourceFreshdeskConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceFreshsales:getSourceFreshsales": {
            "description": "SourceFreshsales DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceFreshsales = airbyte.getSourceFreshsales({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_freshsales = airbyte.get_source_freshsales(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceFreshsales = Airbyte.GetSourceFreshsales.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceFreshsales(ctx, \u0026airbyte.LookupSourceFreshsalesArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceFreshsalesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceFreshsales = AirbyteFunctions.getSourceFreshsales(GetSourceFreshsalesArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceFreshsales:\n    fn::invoke:\n      Function: airbyte:getSourceFreshsales\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceFreshsales.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceFreshsales.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceFreshsalesConfiguration:getSourceFreshsalesConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceGainsightPx:getSourceGainsightPx": {
            "description": "SourceGainsightPx DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceGainsightpx = airbyte.getSourceGainsightPx({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_gainsightpx = airbyte.get_source_gainsight_px(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceGainsightpx = Airbyte.GetSourceGainsightPx.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceGainsightPx(ctx, \u0026airbyte.LookupSourceGainsightPxArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceGainsightPxArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceGainsightpx = AirbyteFunctions.getSourceGainsightPx(GetSourceGainsightPxArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceGainsightpx:\n    fn::invoke:\n      Function: airbyte:getSourceGainsightPx\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceGainsightPx.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceGainsightPx.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceGainsightPxConfiguration:getSourceGainsightPxConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceGcs:getSourceGcs": {
            "description": "SourceGcs DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceGcs = airbyte.getSourceGcs({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_gcs = airbyte.get_source_gcs(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceGcs = Airbyte.GetSourceGcs.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceGcs(ctx, \u0026airbyte.LookupSourceGcsArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceGcsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceGcs = AirbyteFunctions.getSourceGcs(GetSourceGcsArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceGcs:\n    fn::invoke:\n      Function: airbyte:getSourceGcs\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceGcs.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceGcs.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceGcsConfiguration:getSourceGcsConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceGetlago:getSourceGetlago": {
            "description": "SourceGetlago DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceGetlago = airbyte.getSourceGetlago({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_getlago = airbyte.get_source_getlago(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceGetlago = Airbyte.GetSourceGetlago.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceGetlago(ctx, \u0026airbyte.LookupSourceGetlagoArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceGetlagoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceGetlago = AirbyteFunctions.getSourceGetlago(GetSourceGetlagoArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceGetlago:\n    fn::invoke:\n      Function: airbyte:getSourceGetlago\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceGetlago.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceGetlago.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceGetlagoConfiguration:getSourceGetlagoConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceGithub:getSourceGithub": {
            "description": "SourceGithub DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceGithub = airbyte.getSourceGithub({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_github = airbyte.get_source_github(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceGithub = Airbyte.GetSourceGithub.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceGithub(ctx, \u0026airbyte.LookupSourceGithubArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceGithubArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceGithub = AirbyteFunctions.getSourceGithub(GetSourceGithubArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceGithub:\n    fn::invoke:\n      Function: airbyte:getSourceGithub\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceGithub.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceGithub.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceGithubConfiguration:getSourceGithubConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceGitlab:getSourceGitlab": {
            "description": "SourceGitlab DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceGitlab = airbyte.getSourceGitlab({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_gitlab = airbyte.get_source_gitlab(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceGitlab = Airbyte.GetSourceGitlab.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceGitlab(ctx, \u0026airbyte.LookupSourceGitlabArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceGitlabArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceGitlab = AirbyteFunctions.getSourceGitlab(GetSourceGitlabArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceGitlab:\n    fn::invoke:\n      Function: airbyte:getSourceGitlab\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceGitlab.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceGitlab.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceGitlabConfiguration:getSourceGitlabConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceGlassfrog:getSourceGlassfrog": {
            "description": "SourceGlassfrog DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceGlassfrog = airbyte.getSourceGlassfrog({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_glassfrog = airbyte.get_source_glassfrog(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceGlassfrog = Airbyte.GetSourceGlassfrog.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceGlassfrog(ctx, \u0026airbyte.LookupSourceGlassfrogArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceGlassfrogArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceGlassfrog = AirbyteFunctions.getSourceGlassfrog(GetSourceGlassfrogArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceGlassfrog:\n    fn::invoke:\n      Function: airbyte:getSourceGlassfrog\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceGlassfrog.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceGlassfrog.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceGlassfrogConfiguration:getSourceGlassfrogConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceGnews:getSourceGnews": {
            "description": "SourceGnews DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceGnews = airbyte.getSourceGnews({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_gnews = airbyte.get_source_gnews(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceGnews = Airbyte.GetSourceGnews.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceGnews(ctx, \u0026airbyte.LookupSourceGnewsArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceGnewsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceGnews = AirbyteFunctions.getSourceGnews(GetSourceGnewsArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceGnews:\n    fn::invoke:\n      Function: airbyte:getSourceGnews\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceGnews.\n",
                "properties": {
                    "secretId": {
                        "type": "string"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceGnews.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceGnewsConfiguration:getSourceGnewsConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceGoogleAds:getSourceGoogleAds": {
            "description": "SourceGoogleAds DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceGoogleads = airbyte.getSourceGoogleAds({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_googleads = airbyte.get_source_google_ads(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceGoogleads = Airbyte.GetSourceGoogleAds.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceGoogleAds(ctx, \u0026airbyte.LookupSourceGoogleAdsArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceGoogleAdsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceGoogleads = AirbyteFunctions.getSourceGoogleAds(GetSourceGoogleAdsArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceGoogleads:\n    fn::invoke:\n      Function: airbyte:getSourceGoogleAds\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceGoogleAds.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceGoogleAds.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceGoogleAdsConfiguration:getSourceGoogleAdsConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceGoogleAnalyticsDataApi:getSourceGoogleAnalyticsDataApi": {
            "description": "SourceGoogleAnalyticsDataAPI DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceGoogleanalyticsdataapi = airbyte.getSourceGoogleAnalyticsDataApi({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_googleanalyticsdataapi = airbyte.get_source_google_analytics_data_api(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceGoogleanalyticsdataapi = Airbyte.GetSourceGoogleAnalyticsDataApi.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceGoogleAnalyticsDataApi(ctx, \u0026airbyte.LookupSourceGoogleAnalyticsDataApiArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceGoogleAnalyticsDataApiArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceGoogleanalyticsdataapi = AirbyteFunctions.getSourceGoogleAnalyticsDataApi(GetSourceGoogleAnalyticsDataApiArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceGoogleanalyticsdataapi:\n    fn::invoke:\n      Function: airbyte:getSourceGoogleAnalyticsDataApi\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceGoogleAnalyticsDataApi.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceGoogleAnalyticsDataApi.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceGoogleAnalyticsDataApiConfiguration:getSourceGoogleAnalyticsDataApiConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceGoogleAnalyticsV4:getSourceGoogleAnalyticsV4": {
            "description": "SourceGoogleAnalyticsV4 DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceGoogleanalyticsv4 = airbyte.getSourceGoogleAnalyticsV4({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_googleanalyticsv4 = airbyte.get_source_google_analytics_v4(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceGoogleanalyticsv4 = Airbyte.GetSourceGoogleAnalyticsV4.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceGoogleAnalyticsV4(ctx, \u0026airbyte.LookupSourceGoogleAnalyticsV4Args{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceGoogleAnalyticsV4Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceGoogleanalyticsv4 = AirbyteFunctions.getSourceGoogleAnalyticsV4(GetSourceGoogleAnalyticsV4Args.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceGoogleanalyticsv4:\n    fn::invoke:\n      Function: airbyte:getSourceGoogleAnalyticsV4\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceGoogleAnalyticsV4.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceGoogleAnalyticsV4.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceGoogleAnalyticsV4Configuration:getSourceGoogleAnalyticsV4Configuration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceGoogleDirectory:getSourceGoogleDirectory": {
            "description": "SourceGoogleDirectory DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceGoogledirectory = airbyte.getSourceGoogleDirectory({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_googledirectory = airbyte.get_source_google_directory(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceGoogledirectory = Airbyte.GetSourceGoogleDirectory.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceGoogleDirectory(ctx, \u0026airbyte.LookupSourceGoogleDirectoryArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceGoogleDirectoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceGoogledirectory = AirbyteFunctions.getSourceGoogleDirectory(GetSourceGoogleDirectoryArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceGoogledirectory:\n    fn::invoke:\n      Function: airbyte:getSourceGoogleDirectory\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceGoogleDirectory.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceGoogleDirectory.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceGoogleDirectoryConfiguration:getSourceGoogleDirectoryConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceGooglePagespeedInsights:getSourceGooglePagespeedInsights": {
            "description": "SourceGooglePagespeedInsights DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceGooglepagespeedinsights = airbyte.getSourceGooglePagespeedInsights({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_googlepagespeedinsights = airbyte.get_source_google_pagespeed_insights(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceGooglepagespeedinsights = Airbyte.GetSourceGooglePagespeedInsights.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceGooglePagespeedInsights(ctx, \u0026airbyte.LookupSourceGooglePagespeedInsightsArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceGooglePagespeedInsightsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceGooglepagespeedinsights = AirbyteFunctions.getSourceGooglePagespeedInsights(GetSourceGooglePagespeedInsightsArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceGooglepagespeedinsights:\n    fn::invoke:\n      Function: airbyte:getSourceGooglePagespeedInsights\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceGooglePagespeedInsights.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceGooglePagespeedInsights.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceGooglePagespeedInsightsConfiguration:getSourceGooglePagespeedInsightsConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceGoogleSearchConsole:getSourceGoogleSearchConsole": {
            "description": "SourceGoogleSearchConsole DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceGooglesearchconsole = airbyte.getSourceGoogleSearchConsole({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_googlesearchconsole = airbyte.get_source_google_search_console(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceGooglesearchconsole = Airbyte.GetSourceGoogleSearchConsole.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceGoogleSearchConsole(ctx, \u0026airbyte.LookupSourceGoogleSearchConsoleArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceGoogleSearchConsoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceGooglesearchconsole = AirbyteFunctions.getSourceGoogleSearchConsole(GetSourceGoogleSearchConsoleArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceGooglesearchconsole:\n    fn::invoke:\n      Function: airbyte:getSourceGoogleSearchConsole\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceGoogleSearchConsole.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceGoogleSearchConsole.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceGoogleSearchConsoleConfiguration:getSourceGoogleSearchConsoleConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceGoogleSheets:getSourceGoogleSheets": {
            "description": "SourceGoogleSheets DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceGooglesheets = airbyte.getSourceGoogleSheets({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_googlesheets = airbyte.get_source_google_sheets(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceGooglesheets = Airbyte.GetSourceGoogleSheets.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceGoogleSheets(ctx, \u0026airbyte.LookupSourceGoogleSheetsArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceGoogleSheetsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceGooglesheets = AirbyteFunctions.getSourceGoogleSheets(GetSourceGoogleSheetsArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceGooglesheets:\n    fn::invoke:\n      Function: airbyte:getSourceGoogleSheets\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceGoogleSheets.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceGoogleSheets.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceGoogleSheetsConfiguration:getSourceGoogleSheetsConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceGoogleWebfonts:getSourceGoogleWebfonts": {
            "description": "SourceGoogleWebfonts DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceGooglewebfonts = airbyte.getSourceGoogleWebfonts({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_googlewebfonts = airbyte.get_source_google_webfonts(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceGooglewebfonts = Airbyte.GetSourceGoogleWebfonts.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceGoogleWebfonts(ctx, \u0026airbyte.LookupSourceGoogleWebfontsArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceGoogleWebfontsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceGooglewebfonts = AirbyteFunctions.getSourceGoogleWebfonts(GetSourceGoogleWebfontsArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceGooglewebfonts:\n    fn::invoke:\n      Function: airbyte:getSourceGoogleWebfonts\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceGoogleWebfonts.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceGoogleWebfonts.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceGoogleWebfontsConfiguration:getSourceGoogleWebfontsConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceGoogleWorkspaceAdminReports:getSourceGoogleWorkspaceAdminReports": {
            "description": "SourceGoogleWorkspaceAdminReports DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceGoogleworkspaceadminreports = airbyte.getSourceGoogleWorkspaceAdminReports({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_googleworkspaceadminreports = airbyte.get_source_google_workspace_admin_reports(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceGoogleworkspaceadminreports = Airbyte.GetSourceGoogleWorkspaceAdminReports.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceGoogleWorkspaceAdminReports(ctx, \u0026airbyte.LookupSourceGoogleWorkspaceAdminReportsArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceGoogleWorkspaceAdminReportsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceGoogleworkspaceadminreports = AirbyteFunctions.getSourceGoogleWorkspaceAdminReports(GetSourceGoogleWorkspaceAdminReportsArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceGoogleworkspaceadminreports:\n    fn::invoke:\n      Function: airbyte:getSourceGoogleWorkspaceAdminReports\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceGoogleWorkspaceAdminReports.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceGoogleWorkspaceAdminReports.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceGoogleWorkspaceAdminReportsConfiguration:getSourceGoogleWorkspaceAdminReportsConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceGreenhouse:getSourceGreenhouse": {
            "description": "SourceGreenhouse DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceGreenhouse = airbyte.getSourceGreenhouse({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_greenhouse = airbyte.get_source_greenhouse(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceGreenhouse = Airbyte.GetSourceGreenhouse.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceGreenhouse(ctx, \u0026airbyte.LookupSourceGreenhouseArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceGreenhouseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceGreenhouse = AirbyteFunctions.getSourceGreenhouse(GetSourceGreenhouseArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceGreenhouse:\n    fn::invoke:\n      Function: airbyte:getSourceGreenhouse\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceGreenhouse.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceGreenhouse.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceGreenhouseConfiguration:getSourceGreenhouseConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceGridly:getSourceGridly": {
            "description": "SourceGridly DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceGridly = airbyte.getSourceGridly({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_gridly = airbyte.get_source_gridly(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceGridly = Airbyte.GetSourceGridly.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceGridly(ctx, \u0026airbyte.LookupSourceGridlyArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceGridlyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceGridly = AirbyteFunctions.getSourceGridly(GetSourceGridlyArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceGridly:\n    fn::invoke:\n      Function: airbyte:getSourceGridly\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceGridly.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceGridly.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceGridlyConfiguration:getSourceGridlyConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceHarvest:getSourceHarvest": {
            "description": "SourceHarvest DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceHarvest = airbyte.getSourceHarvest({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_harvest = airbyte.get_source_harvest(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceHarvest = Airbyte.GetSourceHarvest.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceHarvest(ctx, \u0026airbyte.LookupSourceHarvestArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceHarvestArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceHarvest = AirbyteFunctions.getSourceHarvest(GetSourceHarvestArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceHarvest:\n    fn::invoke:\n      Function: airbyte:getSourceHarvest\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceHarvest.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceHarvest.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceHarvestConfiguration:getSourceHarvestConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceHubplanner:getSourceHubplanner": {
            "description": "SourceHubplanner DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceHubplanner = airbyte.getSourceHubplanner({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_hubplanner = airbyte.get_source_hubplanner(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceHubplanner = Airbyte.GetSourceHubplanner.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceHubplanner(ctx, \u0026airbyte.LookupSourceHubplannerArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceHubplannerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceHubplanner = AirbyteFunctions.getSourceHubplanner(GetSourceHubplannerArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceHubplanner:\n    fn::invoke:\n      Function: airbyte:getSourceHubplanner\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceHubplanner.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceHubplanner.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceHubplannerConfiguration:getSourceHubplannerConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceHubspot:getSourceHubspot": {
            "description": "SourceHubspot DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceHubspot = airbyte.getSourceHubspot({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_hubspot = airbyte.get_source_hubspot(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceHubspot = Airbyte.GetSourceHubspot.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceHubspot(ctx, \u0026airbyte.LookupSourceHubspotArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceHubspotArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceHubspot = AirbyteFunctions.getSourceHubspot(GetSourceHubspotArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceHubspot:\n    fn::invoke:\n      Function: airbyte:getSourceHubspot\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceHubspot.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceHubspot.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceHubspotConfiguration:getSourceHubspotConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceInsightly:getSourceInsightly": {
            "description": "SourceInsightly DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceInsightly = airbyte.getSourceInsightly({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_insightly = airbyte.get_source_insightly(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceInsightly = Airbyte.GetSourceInsightly.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceInsightly(ctx, \u0026airbyte.LookupSourceInsightlyArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceInsightlyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceInsightly = AirbyteFunctions.getSourceInsightly(GetSourceInsightlyArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceInsightly:\n    fn::invoke:\n      Function: airbyte:getSourceInsightly\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceInsightly.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceInsightly.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceInsightlyConfiguration:getSourceInsightlyConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceInstagram:getSourceInstagram": {
            "description": "SourceInstagram DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceInstagram = airbyte.getSourceInstagram({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_instagram = airbyte.get_source_instagram(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceInstagram = Airbyte.GetSourceInstagram.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceInstagram(ctx, \u0026airbyte.LookupSourceInstagramArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceInstagramArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceInstagram = AirbyteFunctions.getSourceInstagram(GetSourceInstagramArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceInstagram:\n    fn::invoke:\n      Function: airbyte:getSourceInstagram\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceInstagram.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceInstagram.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceInstagramConfiguration:getSourceInstagramConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceInstatus:getSourceInstatus": {
            "description": "SourceInstatus DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceInstatus = airbyte.getSourceInstatus({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_instatus = airbyte.get_source_instatus(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceInstatus = Airbyte.GetSourceInstatus.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceInstatus(ctx, \u0026airbyte.LookupSourceInstatusArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceInstatusArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceInstatus = AirbyteFunctions.getSourceInstatus(GetSourceInstatusArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceInstatus:\n    fn::invoke:\n      Function: airbyte:getSourceInstatus\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceInstatus.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceInstatus.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceInstatusConfiguration:getSourceInstatusConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceIntercom:getSourceIntercom": {
            "description": "SourceIntercom DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceIntercom = airbyte.getSourceIntercom({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_intercom = airbyte.get_source_intercom(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceIntercom = Airbyte.GetSourceIntercom.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceIntercom(ctx, \u0026airbyte.LookupSourceIntercomArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceIntercomArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceIntercom = AirbyteFunctions.getSourceIntercom(GetSourceIntercomArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceIntercom:\n    fn::invoke:\n      Function: airbyte:getSourceIntercom\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceIntercom.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceIntercom.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceIntercomConfiguration:getSourceIntercomConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceIp2whois:getSourceIp2whois": {
            "description": "SourceIp2whois DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceIp2whois = airbyte.getSourceIp2whois({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_ip2whois = airbyte.get_source_ip2whois(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceIp2whois = Airbyte.GetSourceIp2whois.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceIp2whois(ctx, \u0026airbyte.LookupSourceIp2whoisArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceIp2whoisArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceIp2whois = AirbyteFunctions.getSourceIp2whois(GetSourceIp2whoisArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceIp2whois:\n    fn::invoke:\n      Function: airbyte:getSourceIp2whois\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceIp2whois.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceIp2whois.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceIp2whoisConfiguration:getSourceIp2whoisConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceIterable:getSourceIterable": {
            "description": "SourceIterable DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceIterable = airbyte.getSourceIterable({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_iterable = airbyte.get_source_iterable(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceIterable = Airbyte.GetSourceIterable.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceIterable(ctx, \u0026airbyte.LookupSourceIterableArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceIterableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceIterable = AirbyteFunctions.getSourceIterable(GetSourceIterableArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceIterable:\n    fn::invoke:\n      Function: airbyte:getSourceIterable\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceIterable.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceIterable.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceIterableConfiguration:getSourceIterableConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceJira:getSourceJira": {
            "description": "SourceJira DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceJira = airbyte.getSourceJira({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_jira = airbyte.get_source_jira(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceJira = Airbyte.GetSourceJira.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceJira(ctx, \u0026airbyte.LookupSourceJiraArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceJiraArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceJira = AirbyteFunctions.getSourceJira(GetSourceJiraArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceJira:\n    fn::invoke:\n      Function: airbyte:getSourceJira\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceJira.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceJira.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceJiraConfiguration:getSourceJiraConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceK6Cloud:getSourceK6Cloud": {
            "description": "SourceK6Cloud DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceK6cloud = airbyte.getSourceK6Cloud({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_k6cloud = airbyte.get_source_k6_cloud(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceK6cloud = Airbyte.GetSourceK6Cloud.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceK6Cloud(ctx, \u0026airbyte.LookupSourceK6CloudArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceK6CloudArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceK6cloud = AirbyteFunctions.getSourceK6Cloud(GetSourceK6CloudArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceK6cloud:\n    fn::invoke:\n      Function: airbyte:getSourceK6Cloud\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceK6Cloud.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceK6Cloud.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceK6CloudConfiguration:getSourceK6CloudConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceKlarna:getSourceKlarna": {
            "description": "SourceKlarna DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceKlarna = airbyte.getSourceKlarna({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_klarna = airbyte.get_source_klarna(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceKlarna = Airbyte.GetSourceKlarna.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceKlarna(ctx, \u0026airbyte.LookupSourceKlarnaArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceKlarnaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceKlarna = AirbyteFunctions.getSourceKlarna(GetSourceKlarnaArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceKlarna:\n    fn::invoke:\n      Function: airbyte:getSourceKlarna\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceKlarna.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceKlarna.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceKlarnaConfiguration:getSourceKlarnaConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceKlaviyo:getSourceKlaviyo": {
            "description": "SourceKlaviyo DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceKlaviyo = airbyte.getSourceKlaviyo({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_klaviyo = airbyte.get_source_klaviyo(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceKlaviyo = Airbyte.GetSourceKlaviyo.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceKlaviyo(ctx, \u0026airbyte.LookupSourceKlaviyoArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceKlaviyoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceKlaviyo = AirbyteFunctions.getSourceKlaviyo(GetSourceKlaviyoArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceKlaviyo:\n    fn::invoke:\n      Function: airbyte:getSourceKlaviyo\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceKlaviyo.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceKlaviyo.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceKlaviyoConfiguration:getSourceKlaviyoConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceKustomerSinger:getSourceKustomerSinger": {
            "description": "SourceKustomerSinger DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceKustomersinger = airbyte.getSourceKustomerSinger({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_kustomersinger = airbyte.get_source_kustomer_singer(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceKustomersinger = Airbyte.GetSourceKustomerSinger.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceKustomerSinger(ctx, \u0026airbyte.LookupSourceKustomerSingerArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceKustomerSingerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceKustomersinger = AirbyteFunctions.getSourceKustomerSinger(GetSourceKustomerSingerArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceKustomersinger:\n    fn::invoke:\n      Function: airbyte:getSourceKustomerSinger\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceKustomerSinger.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceKustomerSinger.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceKustomerSingerConfiguration:getSourceKustomerSingerConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceKyve:getSourceKyve": {
            "description": "SourceKyve DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceKyve = airbyte.getSourceKyve({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_kyve = airbyte.get_source_kyve(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceKyve = Airbyte.GetSourceKyve.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceKyve(ctx, \u0026airbyte.LookupSourceKyveArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceKyveArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceKyve = AirbyteFunctions.getSourceKyve(GetSourceKyveArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceKyve:\n    fn::invoke:\n      Function: airbyte:getSourceKyve\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceKyve.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceKyve.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceKyveConfiguration:getSourceKyveConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceLaunchdarkly:getSourceLaunchdarkly": {
            "description": "SourceLaunchdarkly DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceLaunchdarkly = airbyte.getSourceLaunchdarkly({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_launchdarkly = airbyte.get_source_launchdarkly(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceLaunchdarkly = Airbyte.GetSourceLaunchdarkly.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceLaunchdarkly(ctx, \u0026airbyte.LookupSourceLaunchdarklyArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceLaunchdarklyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceLaunchdarkly = AirbyteFunctions.getSourceLaunchdarkly(GetSourceLaunchdarklyArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceLaunchdarkly:\n    fn::invoke:\n      Function: airbyte:getSourceLaunchdarkly\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceLaunchdarkly.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceLaunchdarkly.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceLaunchdarklyConfiguration:getSourceLaunchdarklyConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceLemlist:getSourceLemlist": {
            "description": "SourceLemlist DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceLemlist = airbyte.getSourceLemlist({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_lemlist = airbyte.get_source_lemlist(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceLemlist = Airbyte.GetSourceLemlist.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceLemlist(ctx, \u0026airbyte.LookupSourceLemlistArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceLemlistArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceLemlist = AirbyteFunctions.getSourceLemlist(GetSourceLemlistArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceLemlist:\n    fn::invoke:\n      Function: airbyte:getSourceLemlist\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceLemlist.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceLemlist.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceLemlistConfiguration:getSourceLemlistConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceLeverHiring:getSourceLeverHiring": {
            "description": "SourceLeverHiring DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceLeverhiring = airbyte.getSourceLeverHiring({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_leverhiring = airbyte.get_source_lever_hiring(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceLeverhiring = Airbyte.GetSourceLeverHiring.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceLeverHiring(ctx, \u0026airbyte.LookupSourceLeverHiringArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceLeverHiringArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceLeverhiring = AirbyteFunctions.getSourceLeverHiring(GetSourceLeverHiringArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceLeverhiring:\n    fn::invoke:\n      Function: airbyte:getSourceLeverHiring\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceLeverHiring.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceLeverHiring.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceLeverHiringConfiguration:getSourceLeverHiringConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceLinkedinAds:getSourceLinkedinAds": {
            "description": "SourceLinkedinAds DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceLinkedinads = airbyte.getSourceLinkedinAds({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_linkedinads = airbyte.get_source_linkedin_ads(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceLinkedinads = Airbyte.GetSourceLinkedinAds.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceLinkedinAds(ctx, \u0026airbyte.LookupSourceLinkedinAdsArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceLinkedinAdsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceLinkedinads = AirbyteFunctions.getSourceLinkedinAds(GetSourceLinkedinAdsArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceLinkedinads:\n    fn::invoke:\n      Function: airbyte:getSourceLinkedinAds\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceLinkedinAds.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceLinkedinAds.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceLinkedinAdsConfiguration:getSourceLinkedinAdsConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceLinkedinPages:getSourceLinkedinPages": {
            "description": "SourceLinkedinPages DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceLinkedinpages = airbyte.getSourceLinkedinPages({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_linkedinpages = airbyte.get_source_linkedin_pages(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceLinkedinpages = Airbyte.GetSourceLinkedinPages.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceLinkedinPages(ctx, \u0026airbyte.LookupSourceLinkedinPagesArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceLinkedinPagesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceLinkedinpages = AirbyteFunctions.getSourceLinkedinPages(GetSourceLinkedinPagesArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceLinkedinpages:\n    fn::invoke:\n      Function: airbyte:getSourceLinkedinPages\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceLinkedinPages.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceLinkedinPages.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceLinkedinPagesConfiguration:getSourceLinkedinPagesConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceLinnworks:getSourceLinnworks": {
            "description": "SourceLinnworks DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceLinnworks = airbyte.getSourceLinnworks({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_linnworks = airbyte.get_source_linnworks(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceLinnworks = Airbyte.GetSourceLinnworks.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceLinnworks(ctx, \u0026airbyte.LookupSourceLinnworksArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceLinnworksArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceLinnworks = AirbyteFunctions.getSourceLinnworks(GetSourceLinnworksArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceLinnworks:\n    fn::invoke:\n      Function: airbyte:getSourceLinnworks\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceLinnworks.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceLinnworks.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceLinnworksConfiguration:getSourceLinnworksConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceLokalise:getSourceLokalise": {
            "description": "SourceLokalise DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceLokalise = airbyte.getSourceLokalise({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_lokalise = airbyte.get_source_lokalise(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceLokalise = Airbyte.GetSourceLokalise.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceLokalise(ctx, \u0026airbyte.LookupSourceLokaliseArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceLokaliseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceLokalise = AirbyteFunctions.getSourceLokalise(GetSourceLokaliseArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceLokalise:\n    fn::invoke:\n      Function: airbyte:getSourceLokalise\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceLokalise.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceLokalise.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceLokaliseConfiguration:getSourceLokaliseConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceMailchimp:getSourceMailchimp": {
            "description": "SourceMailchimp DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceMailchimp = airbyte.getSourceMailchimp({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_mailchimp = airbyte.get_source_mailchimp(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceMailchimp = Airbyte.GetSourceMailchimp.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceMailchimp(ctx, \u0026airbyte.LookupSourceMailchimpArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceMailchimpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceMailchimp = AirbyteFunctions.getSourceMailchimp(GetSourceMailchimpArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceMailchimp:\n    fn::invoke:\n      Function: airbyte:getSourceMailchimp\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceMailchimp.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceMailchimp.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceMailchimpConfiguration:getSourceMailchimpConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceMailgun:getSourceMailgun": {
            "description": "SourceMailgun DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceMailgun = airbyte.getSourceMailgun({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_mailgun = airbyte.get_source_mailgun(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceMailgun = Airbyte.GetSourceMailgun.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceMailgun(ctx, \u0026airbyte.LookupSourceMailgunArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceMailgunArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceMailgun = AirbyteFunctions.getSourceMailgun(GetSourceMailgunArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceMailgun:\n    fn::invoke:\n      Function: airbyte:getSourceMailgun\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceMailgun.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceMailgun.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceMailgunConfiguration:getSourceMailgunConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceMailjetSms:getSourceMailjetSms": {
            "description": "SourceMailjetSms DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceMailjetsms = airbyte.getSourceMailjetSms({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_mailjetsms = airbyte.get_source_mailjet_sms(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceMailjetsms = Airbyte.GetSourceMailjetSms.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceMailjetSms(ctx, \u0026airbyte.LookupSourceMailjetSmsArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceMailjetSmsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceMailjetsms = AirbyteFunctions.getSourceMailjetSms(GetSourceMailjetSmsArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceMailjetsms:\n    fn::invoke:\n      Function: airbyte:getSourceMailjetSms\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceMailjetSms.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceMailjetSms.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceMailjetSmsConfiguration:getSourceMailjetSmsConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceMarketo:getSourceMarketo": {
            "description": "SourceMarketo DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceMarketo = airbyte.getSourceMarketo({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_marketo = airbyte.get_source_marketo(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceMarketo = Airbyte.GetSourceMarketo.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceMarketo(ctx, \u0026airbyte.LookupSourceMarketoArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceMarketoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceMarketo = AirbyteFunctions.getSourceMarketo(GetSourceMarketoArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceMarketo:\n    fn::invoke:\n      Function: airbyte:getSourceMarketo\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceMarketo.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceMarketo.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceMarketoConfiguration:getSourceMarketoConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceMetabase:getSourceMetabase": {
            "description": "SourceMetabase DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceMetabase = airbyte.getSourceMetabase({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_metabase = airbyte.get_source_metabase(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceMetabase = Airbyte.GetSourceMetabase.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceMetabase(ctx, \u0026airbyte.LookupSourceMetabaseArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceMetabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceMetabase = AirbyteFunctions.getSourceMetabase(GetSourceMetabaseArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceMetabase:\n    fn::invoke:\n      Function: airbyte:getSourceMetabase\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceMetabase.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceMetabase.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceMetabaseConfiguration:getSourceMetabaseConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceMicrosoftTeams:getSourceMicrosoftTeams": {
            "description": "SourceMicrosoftTeams DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceMicrosoftteams = airbyte.getSourceMicrosoftTeams({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_microsoftteams = airbyte.get_source_microsoft_teams(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceMicrosoftteams = Airbyte.GetSourceMicrosoftTeams.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceMicrosoftTeams(ctx, \u0026airbyte.LookupSourceMicrosoftTeamsArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceMicrosoftTeamsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceMicrosoftteams = AirbyteFunctions.getSourceMicrosoftTeams(GetSourceMicrosoftTeamsArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceMicrosoftteams:\n    fn::invoke:\n      Function: airbyte:getSourceMicrosoftTeams\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceMicrosoftTeams.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceMicrosoftTeams.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceMicrosoftTeamsConfiguration:getSourceMicrosoftTeamsConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceMixpanel:getSourceMixpanel": {
            "description": "SourceMixpanel DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceMixpanel = airbyte.getSourceMixpanel({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_mixpanel = airbyte.get_source_mixpanel(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceMixpanel = Airbyte.GetSourceMixpanel.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceMixpanel(ctx, \u0026airbyte.LookupSourceMixpanelArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceMixpanelArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceMixpanel = AirbyteFunctions.getSourceMixpanel(GetSourceMixpanelArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceMixpanel:\n    fn::invoke:\n      Function: airbyte:getSourceMixpanel\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceMixpanel.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceMixpanel.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceMixpanelConfiguration:getSourceMixpanelConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceMonday:getSourceMonday": {
            "description": "SourceMonday DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceMonday = airbyte.getSourceMonday({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_monday = airbyte.get_source_monday(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceMonday = Airbyte.GetSourceMonday.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceMonday(ctx, \u0026airbyte.LookupSourceMondayArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceMondayArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceMonday = AirbyteFunctions.getSourceMonday(GetSourceMondayArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceMonday:\n    fn::invoke:\n      Function: airbyte:getSourceMonday\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceMonday.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceMonday.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceMondayConfiguration:getSourceMondayConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceMongodb:getSourceMongodb": {
            "description": "SourceMongodb DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceMongodb = airbyte.getSourceMongodb({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_mongodb = airbyte.get_source_mongodb(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceMongodb = Airbyte.GetSourceMongodb.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceMongodb(ctx, \u0026airbyte.LookupSourceMongodbArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceMongodbArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceMongodb = AirbyteFunctions.getSourceMongodb(GetSourceMongodbArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceMongodb:\n    fn::invoke:\n      Function: airbyte:getSourceMongodb\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceMongodb.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceMongodb.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceMongodbConfiguration:getSourceMongodbConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceMongodbInternalPoc:getSourceMongodbInternalPoc": {
            "description": "SourceMongodbInternalPoc DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceMongodbinternalpoc = airbyte.getSourceMongodbInternalPoc({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_mongodbinternalpoc = airbyte.get_source_mongodb_internal_poc(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceMongodbinternalpoc = Airbyte.GetSourceMongodbInternalPoc.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceMongodbInternalPoc(ctx, \u0026airbyte.LookupSourceMongodbInternalPocArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceMongodbInternalPocArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceMongodbinternalpoc = AirbyteFunctions.getSourceMongodbInternalPoc(GetSourceMongodbInternalPocArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceMongodbinternalpoc:\n    fn::invoke:\n      Function: airbyte:getSourceMongodbInternalPoc\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceMongodbInternalPoc.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceMongodbInternalPoc.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceMongodbInternalPocConfiguration:getSourceMongodbInternalPocConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceMssql:getSourceMssql": {
            "description": "SourceMssql DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceMssql = airbyte.getSourceMssql({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_mssql = airbyte.get_source_mssql(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceMssql = Airbyte.GetSourceMssql.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceMssql(ctx, \u0026airbyte.LookupSourceMssqlArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceMssqlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceMssql = AirbyteFunctions.getSourceMssql(GetSourceMssqlArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceMssql:\n    fn::invoke:\n      Function: airbyte:getSourceMssql\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceMssql.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceMssql.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceMssqlConfiguration:getSourceMssqlConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceMyHours:getSourceMyHours": {
            "description": "SourceMyHours DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceMyhours = airbyte.getSourceMyHours({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_myhours = airbyte.get_source_my_hours(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceMyhours = Airbyte.GetSourceMyHours.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceMyHours(ctx, \u0026airbyte.LookupSourceMyHoursArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceMyHoursArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceMyhours = AirbyteFunctions.getSourceMyHours(GetSourceMyHoursArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceMyhours:\n    fn::invoke:\n      Function: airbyte:getSourceMyHours\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceMyHours.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceMyHours.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceMyHoursConfiguration:getSourceMyHoursConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceMysql:getSourceMysql": {
            "description": "SourceMysql DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceMysql = airbyte.getSourceMysql({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_mysql = airbyte.get_source_mysql(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceMysql = Airbyte.GetSourceMysql.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceMysql(ctx, \u0026airbyte.LookupSourceMysqlArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceMysqlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceMysql = AirbyteFunctions.getSourceMysql(GetSourceMysqlArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceMysql:\n    fn::invoke:\n      Function: airbyte:getSourceMysql\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceMysql.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceMysql.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceMysqlConfiguration:getSourceMysqlConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceNetsuite:getSourceNetsuite": {
            "description": "SourceNetsuite DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceNetsuite = airbyte.getSourceNetsuite({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_netsuite = airbyte.get_source_netsuite(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceNetsuite = Airbyte.GetSourceNetsuite.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceNetsuite(ctx, \u0026airbyte.LookupSourceNetsuiteArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceNetsuiteArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceNetsuite = AirbyteFunctions.getSourceNetsuite(GetSourceNetsuiteArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceNetsuite:\n    fn::invoke:\n      Function: airbyte:getSourceNetsuite\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceNetsuite.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceNetsuite.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceNetsuiteConfiguration:getSourceNetsuiteConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceNotion:getSourceNotion": {
            "description": "SourceNotion DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceNotion = airbyte.getSourceNotion({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_notion = airbyte.get_source_notion(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceNotion = Airbyte.GetSourceNotion.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceNotion(ctx, \u0026airbyte.LookupSourceNotionArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceNotionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceNotion = AirbyteFunctions.getSourceNotion(GetSourceNotionArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceNotion:\n    fn::invoke:\n      Function: airbyte:getSourceNotion\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceNotion.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceNotion.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceNotionConfiguration:getSourceNotionConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceNytimes:getSourceNytimes": {
            "description": "SourceNytimes DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceNytimes = airbyte.getSourceNytimes({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_nytimes = airbyte.get_source_nytimes(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceNytimes = Airbyte.GetSourceNytimes.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceNytimes(ctx, \u0026airbyte.LookupSourceNytimesArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceNytimesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceNytimes = AirbyteFunctions.getSourceNytimes(GetSourceNytimesArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceNytimes:\n    fn::invoke:\n      Function: airbyte:getSourceNytimes\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceNytimes.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceNytimes.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceNytimesConfiguration:getSourceNytimesConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceOkta:getSourceOkta": {
            "description": "SourceOkta DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceOkta = airbyte.getSourceOkta({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_okta = airbyte.get_source_okta(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceOkta = Airbyte.GetSourceOkta.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceOkta(ctx, \u0026airbyte.LookupSourceOktaArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceOktaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceOkta = AirbyteFunctions.getSourceOkta(GetSourceOktaArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceOkta:\n    fn::invoke:\n      Function: airbyte:getSourceOkta\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceOkta.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceOkta.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceOktaConfiguration:getSourceOktaConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceOmnisend:getSourceOmnisend": {
            "description": "SourceOmnisend DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceOmnisend = airbyte.getSourceOmnisend({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_omnisend = airbyte.get_source_omnisend(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceOmnisend = Airbyte.GetSourceOmnisend.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceOmnisend(ctx, \u0026airbyte.LookupSourceOmnisendArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceOmnisendArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceOmnisend = AirbyteFunctions.getSourceOmnisend(GetSourceOmnisendArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceOmnisend:\n    fn::invoke:\n      Function: airbyte:getSourceOmnisend\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceOmnisend.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceOmnisend.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceOmnisendConfiguration:getSourceOmnisendConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceOnesignal:getSourceOnesignal": {
            "description": "SourceOnesignal DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceOnesignal = airbyte.getSourceOnesignal({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_onesignal = airbyte.get_source_onesignal(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceOnesignal = Airbyte.GetSourceOnesignal.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceOnesignal(ctx, \u0026airbyte.LookupSourceOnesignalArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceOnesignalArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceOnesignal = AirbyteFunctions.getSourceOnesignal(GetSourceOnesignalArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceOnesignal:\n    fn::invoke:\n      Function: airbyte:getSourceOnesignal\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceOnesignal.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceOnesignal.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceOnesignalConfiguration:getSourceOnesignalConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceOpenweather:getSourceOpenweather": {
            "description": "SourceOpenweather DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceOpenweather = airbyte.getSourceOpenweather({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_openweather = airbyte.get_source_openweather(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceOpenweather = Airbyte.GetSourceOpenweather.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceOpenweather(ctx, \u0026airbyte.LookupSourceOpenweatherArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceOpenweatherArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceOpenweather = AirbyteFunctions.getSourceOpenweather(GetSourceOpenweatherArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceOpenweather:\n    fn::invoke:\n      Function: airbyte:getSourceOpenweather\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceOpenweather.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceOpenweather.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceOpenweatherConfiguration:getSourceOpenweatherConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceOracle:getSourceOracle": {
            "description": "SourceOracle DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceOracle = airbyte.getSourceOracle({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_oracle = airbyte.get_source_oracle(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceOracle = Airbyte.GetSourceOracle.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceOracle(ctx, \u0026airbyte.LookupSourceOracleArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceOracleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceOracle = AirbyteFunctions.getSourceOracle(GetSourceOracleArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceOracle:\n    fn::invoke:\n      Function: airbyte:getSourceOracle\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceOracle.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceOracle.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceOracleConfiguration:getSourceOracleConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceOrb:getSourceOrb": {
            "description": "SourceOrb DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceOrb = airbyte.getSourceOrb({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_orb = airbyte.get_source_orb(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceOrb = Airbyte.GetSourceOrb.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceOrb(ctx, \u0026airbyte.LookupSourceOrbArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceOrbArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceOrb = AirbyteFunctions.getSourceOrb(GetSourceOrbArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceOrb:\n    fn::invoke:\n      Function: airbyte:getSourceOrb\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceOrb.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceOrb.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceOrbConfiguration:getSourceOrbConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceOrbit:getSourceOrbit": {
            "description": "SourceOrbit DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceOrbit = airbyte.getSourceOrbit({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_orbit = airbyte.get_source_orbit(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceOrbit = Airbyte.GetSourceOrbit.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceOrbit(ctx, \u0026airbyte.LookupSourceOrbitArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceOrbitArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceOrbit = AirbyteFunctions.getSourceOrbit(GetSourceOrbitArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceOrbit:\n    fn::invoke:\n      Function: airbyte:getSourceOrbit\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceOrbit.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceOrbit.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceOrbitConfiguration:getSourceOrbitConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceOutbrainAmplify:getSourceOutbrainAmplify": {
            "description": "SourceOutbrainAmplify DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceOutbrainamplify = airbyte.getSourceOutbrainAmplify({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_outbrainamplify = airbyte.get_source_outbrain_amplify(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceOutbrainamplify = Airbyte.GetSourceOutbrainAmplify.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceOutbrainAmplify(ctx, \u0026airbyte.LookupSourceOutbrainAmplifyArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceOutbrainAmplifyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceOutbrainamplify = AirbyteFunctions.getSourceOutbrainAmplify(GetSourceOutbrainAmplifyArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceOutbrainamplify:\n    fn::invoke:\n      Function: airbyte:getSourceOutbrainAmplify\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceOutbrainAmplify.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceOutbrainAmplify.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceOutbrainAmplifyConfiguration:getSourceOutbrainAmplifyConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceOutreach:getSourceOutreach": {
            "description": "SourceOutreach DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceOutreach = airbyte.getSourceOutreach({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_outreach = airbyte.get_source_outreach(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceOutreach = Airbyte.GetSourceOutreach.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceOutreach(ctx, \u0026airbyte.LookupSourceOutreachArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceOutreachArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceOutreach = AirbyteFunctions.getSourceOutreach(GetSourceOutreachArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceOutreach:\n    fn::invoke:\n      Function: airbyte:getSourceOutreach\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceOutreach.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceOutreach.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceOutreachConfiguration:getSourceOutreachConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourcePaypalTransaction:getSourcePaypalTransaction": {
            "description": "SourcePaypalTransaction DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourcePaypaltransaction = airbyte.getSourcePaypalTransaction({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_paypaltransaction = airbyte.get_source_paypal_transaction(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourcePaypaltransaction = Airbyte.GetSourcePaypalTransaction.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourcePaypalTransaction(ctx, \u0026airbyte.LookupSourcePaypalTransactionArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourcePaypalTransactionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourcePaypaltransaction = AirbyteFunctions.getSourcePaypalTransaction(GetSourcePaypalTransactionArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourcePaypaltransaction:\n    fn::invoke:\n      Function: airbyte:getSourcePaypalTransaction\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourcePaypalTransaction.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourcePaypalTransaction.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourcePaypalTransactionConfiguration:getSourcePaypalTransactionConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourcePaystack:getSourcePaystack": {
            "description": "SourcePaystack DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourcePaystack = airbyte.getSourcePaystack({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_paystack = airbyte.get_source_paystack(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourcePaystack = Airbyte.GetSourcePaystack.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourcePaystack(ctx, \u0026airbyte.LookupSourcePaystackArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourcePaystackArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourcePaystack = AirbyteFunctions.getSourcePaystack(GetSourcePaystackArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourcePaystack:\n    fn::invoke:\n      Function: airbyte:getSourcePaystack\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourcePaystack.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourcePaystack.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourcePaystackConfiguration:getSourcePaystackConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourcePendo:getSourcePendo": {
            "description": "SourcePendo DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourcePendo = airbyte.getSourcePendo({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_pendo = airbyte.get_source_pendo(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourcePendo = Airbyte.GetSourcePendo.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourcePendo(ctx, \u0026airbyte.LookupSourcePendoArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourcePendoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourcePendo = AirbyteFunctions.getSourcePendo(GetSourcePendoArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourcePendo:\n    fn::invoke:\n      Function: airbyte:getSourcePendo\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourcePendo.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourcePendo.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourcePendoConfiguration:getSourcePendoConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourcePersistiq:getSourcePersistiq": {
            "description": "SourcePersistiq DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourcePersistiq = airbyte.getSourcePersistiq({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_persistiq = airbyte.get_source_persistiq(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourcePersistiq = Airbyte.GetSourcePersistiq.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourcePersistiq(ctx, \u0026airbyte.LookupSourcePersistiqArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourcePersistiqArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourcePersistiq = AirbyteFunctions.getSourcePersistiq(GetSourcePersistiqArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourcePersistiq:\n    fn::invoke:\n      Function: airbyte:getSourcePersistiq\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourcePersistiq.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourcePersistiq.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourcePersistiqConfiguration:getSourcePersistiqConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourcePexelsApi:getSourcePexelsApi": {
            "description": "SourcePexelsAPI DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourcePexelsapi = airbyte.getSourcePexelsApi({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_pexelsapi = airbyte.get_source_pexels_api(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourcePexelsapi = Airbyte.GetSourcePexelsApi.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourcePexelsApi(ctx, \u0026airbyte.LookupSourcePexelsApiArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourcePexelsApiArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourcePexelsapi = AirbyteFunctions.getSourcePexelsApi(GetSourcePexelsApiArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourcePexelsapi:\n    fn::invoke:\n      Function: airbyte:getSourcePexelsApi\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourcePexelsApi.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourcePexelsApi.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourcePexelsApiConfiguration:getSourcePexelsApiConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourcePinterest:getSourcePinterest": {
            "description": "SourcePinterest DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourcePinterest = airbyte.getSourcePinterest({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_pinterest = airbyte.get_source_pinterest(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourcePinterest = Airbyte.GetSourcePinterest.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourcePinterest(ctx, \u0026airbyte.LookupSourcePinterestArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourcePinterestArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourcePinterest = AirbyteFunctions.getSourcePinterest(GetSourcePinterestArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourcePinterest:\n    fn::invoke:\n      Function: airbyte:getSourcePinterest\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourcePinterest.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourcePinterest.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourcePinterestConfiguration:getSourcePinterestConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourcePipedrive:getSourcePipedrive": {
            "description": "SourcePipedrive DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourcePipedrive = airbyte.getSourcePipedrive({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_pipedrive = airbyte.get_source_pipedrive(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourcePipedrive = Airbyte.GetSourcePipedrive.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourcePipedrive(ctx, \u0026airbyte.LookupSourcePipedriveArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourcePipedriveArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourcePipedrive = AirbyteFunctions.getSourcePipedrive(GetSourcePipedriveArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourcePipedrive:\n    fn::invoke:\n      Function: airbyte:getSourcePipedrive\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourcePipedrive.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourcePipedrive.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourcePipedriveConfiguration:getSourcePipedriveConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourcePocket:getSourcePocket": {
            "description": "SourcePocket DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourcePocket = airbyte.getSourcePocket({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_pocket = airbyte.get_source_pocket(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourcePocket = Airbyte.GetSourcePocket.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourcePocket(ctx, \u0026airbyte.LookupSourcePocketArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourcePocketArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourcePocket = AirbyteFunctions.getSourcePocket(GetSourcePocketArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourcePocket:\n    fn::invoke:\n      Function: airbyte:getSourcePocket\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourcePocket.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourcePocket.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourcePocketConfiguration:getSourcePocketConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourcePokeapi:getSourcePokeapi": {
            "description": "SourcePokeapi DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourcePokeapi = airbyte.getSourcePokeapi({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_pokeapi = airbyte.get_source_pokeapi(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourcePokeapi = Airbyte.GetSourcePokeapi.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourcePokeapi(ctx, \u0026airbyte.LookupSourcePokeapiArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourcePokeapiArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourcePokeapi = AirbyteFunctions.getSourcePokeapi(GetSourcePokeapiArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourcePokeapi:\n    fn::invoke:\n      Function: airbyte:getSourcePokeapi\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourcePokeapi.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourcePokeapi.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourcePokeapiConfiguration:getSourcePokeapiConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourcePolygonStockApi:getSourcePolygonStockApi": {
            "description": "SourcePolygonStockAPI DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourcePolygonstockapi = airbyte.getSourcePolygonStockApi({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_polygonstockapi = airbyte.get_source_polygon_stock_api(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourcePolygonstockapi = Airbyte.GetSourcePolygonStockApi.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourcePolygonStockApi(ctx, \u0026airbyte.LookupSourcePolygonStockApiArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourcePolygonStockApiArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourcePolygonstockapi = AirbyteFunctions.getSourcePolygonStockApi(GetSourcePolygonStockApiArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourcePolygonstockapi:\n    fn::invoke:\n      Function: airbyte:getSourcePolygonStockApi\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourcePolygonStockApi.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourcePolygonStockApi.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourcePolygonStockApiConfiguration:getSourcePolygonStockApiConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourcePostgres:getSourcePostgres": {
            "description": "SourcePostgres DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourcePostgres = airbyte.getSourcePostgres({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_postgres = airbyte.get_source_postgres(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourcePostgres = Airbyte.GetSourcePostgres.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourcePostgres(ctx, \u0026airbyte.LookupSourcePostgresArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourcePostgresArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourcePostgres = AirbyteFunctions.getSourcePostgres(GetSourcePostgresArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourcePostgres:\n    fn::invoke:\n      Function: airbyte:getSourcePostgres\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourcePostgres.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourcePostgres.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourcePostgresConfiguration:getSourcePostgresConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourcePosthog:getSourcePosthog": {
            "description": "SourcePosthog DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourcePosthog = airbyte.getSourcePosthog({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_posthog = airbyte.get_source_posthog(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourcePosthog = Airbyte.GetSourcePosthog.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourcePosthog(ctx, \u0026airbyte.LookupSourcePosthogArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourcePosthogArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourcePosthog = AirbyteFunctions.getSourcePosthog(GetSourcePosthogArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourcePosthog:\n    fn::invoke:\n      Function: airbyte:getSourcePosthog\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourcePosthog.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourcePosthog.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourcePosthogConfiguration:getSourcePosthogConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourcePostmarkapp:getSourcePostmarkapp": {
            "description": "SourcePostmarkapp DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourcePostmarkapp = airbyte.getSourcePostmarkapp({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_postmarkapp = airbyte.get_source_postmarkapp(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourcePostmarkapp = Airbyte.GetSourcePostmarkapp.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourcePostmarkapp(ctx, \u0026airbyte.LookupSourcePostmarkappArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourcePostmarkappArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourcePostmarkapp = AirbyteFunctions.getSourcePostmarkapp(GetSourcePostmarkappArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourcePostmarkapp:\n    fn::invoke:\n      Function: airbyte:getSourcePostmarkapp\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourcePostmarkapp.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourcePostmarkapp.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourcePostmarkappConfiguration:getSourcePostmarkappConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourcePrestashop:getSourcePrestashop": {
            "description": "SourcePrestashop DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourcePrestashop = airbyte.getSourcePrestashop({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_prestashop = airbyte.get_source_prestashop(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourcePrestashop = Airbyte.GetSourcePrestashop.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourcePrestashop(ctx, \u0026airbyte.LookupSourcePrestashopArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourcePrestashopArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourcePrestashop = AirbyteFunctions.getSourcePrestashop(GetSourcePrestashopArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourcePrestashop:\n    fn::invoke:\n      Function: airbyte:getSourcePrestashop\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourcePrestashop.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourcePrestashop.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourcePrestashopConfiguration:getSourcePrestashopConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourcePublicApis:getSourcePublicApis": {
            "description": "SourcePublicApis DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourcePublicapis = airbyte.getSourcePublicApis({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_publicapis = airbyte.get_source_public_apis(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourcePublicapis = Airbyte.GetSourcePublicApis.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourcePublicApis(ctx, \u0026airbyte.LookupSourcePublicApisArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourcePublicApisArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourcePublicapis = AirbyteFunctions.getSourcePublicApis(GetSourcePublicApisArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourcePublicapis:\n    fn::invoke:\n      Function: airbyte:getSourcePublicApis\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourcePublicApis.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourcePublicApis.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourcePublicApisConfiguration:getSourcePublicApisConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourcePunkApi:getSourcePunkApi": {
            "description": "SourcePunkAPI DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourcePunkapi = airbyte.getSourcePunkApi({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_punkapi = airbyte.get_source_punk_api(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourcePunkapi = Airbyte.GetSourcePunkApi.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourcePunkApi(ctx, \u0026airbyte.LookupSourcePunkApiArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourcePunkApiArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourcePunkapi = AirbyteFunctions.getSourcePunkApi(GetSourcePunkApiArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourcePunkapi:\n    fn::invoke:\n      Function: airbyte:getSourcePunkApi\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourcePunkApi.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourcePunkApi.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourcePunkApiConfiguration:getSourcePunkApiConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourcePypi:getSourcePypi": {
            "description": "SourcePypi DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourcePypi = airbyte.getSourcePypi({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_pypi = airbyte.get_source_pypi(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourcePypi = Airbyte.GetSourcePypi.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourcePypi(ctx, \u0026airbyte.LookupSourcePypiArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourcePypiArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourcePypi = AirbyteFunctions.getSourcePypi(GetSourcePypiArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourcePypi:\n    fn::invoke:\n      Function: airbyte:getSourcePypi\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourcePypi.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourcePypi.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourcePypiConfiguration:getSourcePypiConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceQualaroo:getSourceQualaroo": {
            "description": "SourceQualaroo DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceQualaroo = airbyte.getSourceQualaroo({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_qualaroo = airbyte.get_source_qualaroo(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceQualaroo = Airbyte.GetSourceQualaroo.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceQualaroo(ctx, \u0026airbyte.LookupSourceQualarooArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceQualarooArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceQualaroo = AirbyteFunctions.getSourceQualaroo(GetSourceQualarooArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceQualaroo:\n    fn::invoke:\n      Function: airbyte:getSourceQualaroo\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceQualaroo.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceQualaroo.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceQualarooConfiguration:getSourceQualarooConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceQuickbooks:getSourceQuickbooks": {
            "description": "SourceQuickbooks DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceQuickbooks = airbyte.getSourceQuickbooks({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_quickbooks = airbyte.get_source_quickbooks(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceQuickbooks = Airbyte.GetSourceQuickbooks.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceQuickbooks(ctx, \u0026airbyte.LookupSourceQuickbooksArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceQuickbooksArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceQuickbooks = AirbyteFunctions.getSourceQuickbooks(GetSourceQuickbooksArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceQuickbooks:\n    fn::invoke:\n      Function: airbyte:getSourceQuickbooks\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceQuickbooks.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceQuickbooks.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceQuickbooksConfiguration:getSourceQuickbooksConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceRailz:getSourceRailz": {
            "description": "SourceRailz DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceRailz = airbyte.getSourceRailz({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_railz = airbyte.get_source_railz(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceRailz = Airbyte.GetSourceRailz.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceRailz(ctx, \u0026airbyte.LookupSourceRailzArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceRailzArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceRailz = AirbyteFunctions.getSourceRailz(GetSourceRailzArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceRailz:\n    fn::invoke:\n      Function: airbyte:getSourceRailz\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceRailz.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceRailz.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceRailzConfiguration:getSourceRailzConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceRecharge:getSourceRecharge": {
            "description": "SourceRecharge DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceRecharge = airbyte.getSourceRecharge({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_recharge = airbyte.get_source_recharge(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceRecharge = Airbyte.GetSourceRecharge.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceRecharge(ctx, \u0026airbyte.LookupSourceRechargeArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceRechargeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceRecharge = AirbyteFunctions.getSourceRecharge(GetSourceRechargeArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceRecharge:\n    fn::invoke:\n      Function: airbyte:getSourceRecharge\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceRecharge.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceRecharge.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceRechargeConfiguration:getSourceRechargeConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceRecreation:getSourceRecreation": {
            "description": "SourceRecreation DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceRecreation = airbyte.getSourceRecreation({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_recreation = airbyte.get_source_recreation(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceRecreation = Airbyte.GetSourceRecreation.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceRecreation(ctx, \u0026airbyte.LookupSourceRecreationArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceRecreationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceRecreation = AirbyteFunctions.getSourceRecreation(GetSourceRecreationArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceRecreation:\n    fn::invoke:\n      Function: airbyte:getSourceRecreation\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceRecreation.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceRecreation.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceRecreationConfiguration:getSourceRecreationConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceRecruitee:getSourceRecruitee": {
            "description": "SourceRecruitee DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceRecruitee = airbyte.getSourceRecruitee({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_recruitee = airbyte.get_source_recruitee(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceRecruitee = Airbyte.GetSourceRecruitee.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceRecruitee(ctx, \u0026airbyte.LookupSourceRecruiteeArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceRecruiteeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceRecruitee = AirbyteFunctions.getSourceRecruitee(GetSourceRecruiteeArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceRecruitee:\n    fn::invoke:\n      Function: airbyte:getSourceRecruitee\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceRecruitee.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceRecruitee.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceRecruiteeConfiguration:getSourceRecruiteeConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceRecurly:getSourceRecurly": {
            "description": "SourceRecurly DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceRecurly = airbyte.getSourceRecurly({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_recurly = airbyte.get_source_recurly(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceRecurly = Airbyte.GetSourceRecurly.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceRecurly(ctx, \u0026airbyte.LookupSourceRecurlyArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceRecurlyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceRecurly = AirbyteFunctions.getSourceRecurly(GetSourceRecurlyArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceRecurly:\n    fn::invoke:\n      Function: airbyte:getSourceRecurly\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceRecurly.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceRecurly.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceRecurlyConfiguration:getSourceRecurlyConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceRedshift:getSourceRedshift": {
            "description": "SourceRedshift DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceRedshift = airbyte.getSourceRedshift({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_redshift = airbyte.get_source_redshift(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceRedshift = Airbyte.GetSourceRedshift.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceRedshift(ctx, \u0026airbyte.LookupSourceRedshiftArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceRedshiftArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceRedshift = AirbyteFunctions.getSourceRedshift(GetSourceRedshiftArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceRedshift:\n    fn::invoke:\n      Function: airbyte:getSourceRedshift\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceRedshift.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceRedshift.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceRedshiftConfiguration:getSourceRedshiftConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceRetently:getSourceRetently": {
            "description": "SourceRetently DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceRetently = airbyte.getSourceRetently({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_retently = airbyte.get_source_retently(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceRetently = Airbyte.GetSourceRetently.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceRetently(ctx, \u0026airbyte.LookupSourceRetentlyArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceRetentlyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceRetently = AirbyteFunctions.getSourceRetently(GetSourceRetentlyArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceRetently:\n    fn::invoke:\n      Function: airbyte:getSourceRetently\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceRetently.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceRetently.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceRetentlyConfiguration:getSourceRetentlyConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceRkiCovid:getSourceRkiCovid": {
            "description": "SourceRkiCovid DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceRkicovid = airbyte.getSourceRkiCovid({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_rkicovid = airbyte.get_source_rki_covid(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceRkicovid = Airbyte.GetSourceRkiCovid.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceRkiCovid(ctx, \u0026airbyte.LookupSourceRkiCovidArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceRkiCovidArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceRkicovid = AirbyteFunctions.getSourceRkiCovid(GetSourceRkiCovidArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceRkicovid:\n    fn::invoke:\n      Function: airbyte:getSourceRkiCovid\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceRkiCovid.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceRkiCovid.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceRkiCovidConfiguration:getSourceRkiCovidConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceRss:getSourceRss": {
            "description": "SourceRss DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceRss = airbyte.getSourceRss({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_rss = airbyte.get_source_rss(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceRss = Airbyte.GetSourceRss.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceRss(ctx, \u0026airbyte.LookupSourceRssArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceRssArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceRss = AirbyteFunctions.getSourceRss(GetSourceRssArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceRss:\n    fn::invoke:\n      Function: airbyte:getSourceRss\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceRss.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceRss.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceRssConfiguration:getSourceRssConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceS3:getSourceS3": {
            "description": "SourceS3 DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceS3 = airbyte.getSourceS3({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_s3 = airbyte.get_source_s3(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceS3 = Airbyte.GetSourceS3.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceS3(ctx, \u0026airbyte.LookupSourceS3Args{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceS3Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceS3 = AirbyteFunctions.getSourceS3(GetSourceS3Args.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceS3:\n    fn::invoke:\n      Function: airbyte:getSourceS3\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceS3.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceS3.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceS3Configuration:getSourceS3Configuration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceSalesforce:getSourceSalesforce": {
            "description": "SourceSalesforce DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceSalesforce = airbyte.getSourceSalesforce({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_salesforce = airbyte.get_source_salesforce(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceSalesforce = Airbyte.GetSourceSalesforce.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceSalesforce(ctx, \u0026airbyte.LookupSourceSalesforceArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceSalesforceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceSalesforce = AirbyteFunctions.getSourceSalesforce(GetSourceSalesforceArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceSalesforce:\n    fn::invoke:\n      Function: airbyte:getSourceSalesforce\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceSalesforce.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceSalesforce.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceSalesforceConfiguration:getSourceSalesforceConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceSalesloft:getSourceSalesloft": {
            "description": "SourceSalesloft DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceSalesloft = airbyte.getSourceSalesloft({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_salesloft = airbyte.get_source_salesloft(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceSalesloft = Airbyte.GetSourceSalesloft.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceSalesloft(ctx, \u0026airbyte.LookupSourceSalesloftArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceSalesloftArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceSalesloft = AirbyteFunctions.getSourceSalesloft(GetSourceSalesloftArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceSalesloft:\n    fn::invoke:\n      Function: airbyte:getSourceSalesloft\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceSalesloft.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceSalesloft.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceSalesloftConfiguration:getSourceSalesloftConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceSapFieldglass:getSourceSapFieldglass": {
            "description": "SourceSapFieldglass DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceSapfieldglass = airbyte.getSourceSapFieldglass({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_sapfieldglass = airbyte.get_source_sap_fieldglass(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceSapfieldglass = Airbyte.GetSourceSapFieldglass.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceSapFieldglass(ctx, \u0026airbyte.LookupSourceSapFieldglassArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceSapFieldglassArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceSapfieldglass = AirbyteFunctions.getSourceSapFieldglass(GetSourceSapFieldglassArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceSapfieldglass:\n    fn::invoke:\n      Function: airbyte:getSourceSapFieldglass\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceSapFieldglass.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceSapFieldglass.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceSapFieldglassConfiguration:getSourceSapFieldglassConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceSecoda:getSourceSecoda": {
            "description": "SourceSecoda DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceSecoda = airbyte.getSourceSecoda({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_secoda = airbyte.get_source_secoda(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceSecoda = Airbyte.GetSourceSecoda.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceSecoda(ctx, \u0026airbyte.LookupSourceSecodaArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceSecodaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceSecoda = AirbyteFunctions.getSourceSecoda(GetSourceSecodaArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceSecoda:\n    fn::invoke:\n      Function: airbyte:getSourceSecoda\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceSecoda.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceSecoda.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceSecodaConfiguration:getSourceSecodaConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceSendgrid:getSourceSendgrid": {
            "description": "SourceSendgrid DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceSendgrid = airbyte.getSourceSendgrid({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_sendgrid = airbyte.get_source_sendgrid(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceSendgrid = Airbyte.GetSourceSendgrid.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceSendgrid(ctx, \u0026airbyte.LookupSourceSendgridArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceSendgridArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceSendgrid = AirbyteFunctions.getSourceSendgrid(GetSourceSendgridArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceSendgrid:\n    fn::invoke:\n      Function: airbyte:getSourceSendgrid\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceSendgrid.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceSendgrid.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceSendgridConfiguration:getSourceSendgridConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceSendinblue:getSourceSendinblue": {
            "description": "SourceSendinblue DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceSendinblue = airbyte.getSourceSendinblue({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_sendinblue = airbyte.get_source_sendinblue(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceSendinblue = Airbyte.GetSourceSendinblue.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceSendinblue(ctx, \u0026airbyte.LookupSourceSendinblueArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceSendinblueArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceSendinblue = AirbyteFunctions.getSourceSendinblue(GetSourceSendinblueArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceSendinblue:\n    fn::invoke:\n      Function: airbyte:getSourceSendinblue\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceSendinblue.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceSendinblue.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceSendinblueConfiguration:getSourceSendinblueConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceSenseforce:getSourceSenseforce": {
            "description": "SourceSenseforce DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceSenseforce = airbyte.getSourceSenseforce({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_senseforce = airbyte.get_source_senseforce(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceSenseforce = Airbyte.GetSourceSenseforce.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceSenseforce(ctx, \u0026airbyte.LookupSourceSenseforceArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceSenseforceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceSenseforce = AirbyteFunctions.getSourceSenseforce(GetSourceSenseforceArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceSenseforce:\n    fn::invoke:\n      Function: airbyte:getSourceSenseforce\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceSenseforce.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceSenseforce.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceSenseforceConfiguration:getSourceSenseforceConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceSentry:getSourceSentry": {
            "description": "SourceSentry DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceSentry = airbyte.getSourceSentry({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_sentry = airbyte.get_source_sentry(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceSentry = Airbyte.GetSourceSentry.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceSentry(ctx, \u0026airbyte.LookupSourceSentryArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceSentryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceSentry = AirbyteFunctions.getSourceSentry(GetSourceSentryArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceSentry:\n    fn::invoke:\n      Function: airbyte:getSourceSentry\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceSentry.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceSentry.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceSentryConfiguration:getSourceSentryConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceSftp:getSourceSftp": {
            "description": "SourceSftp DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceSftp = airbyte.getSourceSftp({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_sftp = airbyte.get_source_sftp(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceSftp = Airbyte.GetSourceSftp.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceSftp(ctx, \u0026airbyte.LookupSourceSftpArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceSftpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceSftp = AirbyteFunctions.getSourceSftp(GetSourceSftpArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceSftp:\n    fn::invoke:\n      Function: airbyte:getSourceSftp\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceSftp.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceSftp.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceSftpConfiguration:getSourceSftpConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceSftpBulk:getSourceSftpBulk": {
            "description": "SourceSftpBulk DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceSftpbulk = airbyte.getSourceSftpBulk({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_sftpbulk = airbyte.get_source_sftp_bulk(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceSftpbulk = Airbyte.GetSourceSftpBulk.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceSftpBulk(ctx, \u0026airbyte.LookupSourceSftpBulkArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceSftpBulkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceSftpbulk = AirbyteFunctions.getSourceSftpBulk(GetSourceSftpBulkArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceSftpbulk:\n    fn::invoke:\n      Function: airbyte:getSourceSftpBulk\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceSftpBulk.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceSftpBulk.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceSftpBulkConfiguration:getSourceSftpBulkConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceShopify:getSourceShopify": {
            "description": "SourceShopify DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceShopify = airbyte.getSourceShopify({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_shopify = airbyte.get_source_shopify(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceShopify = Airbyte.GetSourceShopify.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceShopify(ctx, \u0026airbyte.LookupSourceShopifyArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceShopifyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceShopify = AirbyteFunctions.getSourceShopify(GetSourceShopifyArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceShopify:\n    fn::invoke:\n      Function: airbyte:getSourceShopify\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceShopify.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceShopify.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceShopifyConfiguration:getSourceShopifyConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceShortio:getSourceShortio": {
            "description": "SourceShortio DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceShortio = airbyte.getSourceShortio({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_shortio = airbyte.get_source_shortio(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceShortio = Airbyte.GetSourceShortio.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceShortio(ctx, \u0026airbyte.LookupSourceShortioArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceShortioArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceShortio = AirbyteFunctions.getSourceShortio(GetSourceShortioArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceShortio:\n    fn::invoke:\n      Function: airbyte:getSourceShortio\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceShortio.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceShortio.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceShortioConfiguration:getSourceShortioConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceSlack:getSourceSlack": {
            "description": "SourceSlack DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceSlack = airbyte.getSourceSlack({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_slack = airbyte.get_source_slack(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceSlack = Airbyte.GetSourceSlack.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceSlack(ctx, \u0026airbyte.LookupSourceSlackArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceSlackArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceSlack = AirbyteFunctions.getSourceSlack(GetSourceSlackArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceSlack:\n    fn::invoke:\n      Function: airbyte:getSourceSlack\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceSlack.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceSlack.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceSlackConfiguration:getSourceSlackConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceSmaily:getSourceSmaily": {
            "description": "SourceSmaily DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceSmaily = airbyte.getSourceSmaily({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_smaily = airbyte.get_source_smaily(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceSmaily = Airbyte.GetSourceSmaily.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceSmaily(ctx, \u0026airbyte.LookupSourceSmailyArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceSmailyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceSmaily = AirbyteFunctions.getSourceSmaily(GetSourceSmailyArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceSmaily:\n    fn::invoke:\n      Function: airbyte:getSourceSmaily\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceSmaily.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceSmaily.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceSmailyConfiguration:getSourceSmailyConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceSmartengage:getSourceSmartengage": {
            "description": "SourceSmartengage DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceSmartengage = airbyte.getSourceSmartengage({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_smartengage = airbyte.get_source_smartengage(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceSmartengage = Airbyte.GetSourceSmartengage.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceSmartengage(ctx, \u0026airbyte.LookupSourceSmartengageArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceSmartengageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceSmartengage = AirbyteFunctions.getSourceSmartengage(GetSourceSmartengageArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceSmartengage:\n    fn::invoke:\n      Function: airbyte:getSourceSmartengage\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceSmartengage.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceSmartengage.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceSmartengageConfiguration:getSourceSmartengageConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceSmartsheets:getSourceSmartsheets": {
            "description": "SourceSmartsheets DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceSmartsheets = airbyte.getSourceSmartsheets({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_smartsheets = airbyte.get_source_smartsheets(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceSmartsheets = Airbyte.GetSourceSmartsheets.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceSmartsheets(ctx, \u0026airbyte.LookupSourceSmartsheetsArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceSmartsheetsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceSmartsheets = AirbyteFunctions.getSourceSmartsheets(GetSourceSmartsheetsArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceSmartsheets:\n    fn::invoke:\n      Function: airbyte:getSourceSmartsheets\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceSmartsheets.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceSmartsheets.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceSmartsheetsConfiguration:getSourceSmartsheetsConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceSnapchatMarketing:getSourceSnapchatMarketing": {
            "description": "SourceSnapchatMarketing DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceSnapchatmarketing = airbyte.getSourceSnapchatMarketing({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_snapchatmarketing = airbyte.get_source_snapchat_marketing(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceSnapchatmarketing = Airbyte.GetSourceSnapchatMarketing.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceSnapchatMarketing(ctx, \u0026airbyte.LookupSourceSnapchatMarketingArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceSnapchatMarketingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceSnapchatmarketing = AirbyteFunctions.getSourceSnapchatMarketing(GetSourceSnapchatMarketingArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceSnapchatmarketing:\n    fn::invoke:\n      Function: airbyte:getSourceSnapchatMarketing\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceSnapchatMarketing.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceSnapchatMarketing.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceSnapchatMarketingConfiguration:getSourceSnapchatMarketingConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceSnowflake:getSourceSnowflake": {
            "description": "SourceSnowflake DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceSnowflake = airbyte.getSourceSnowflake({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_snowflake = airbyte.get_source_snowflake(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceSnowflake = Airbyte.GetSourceSnowflake.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceSnowflake(ctx, \u0026airbyte.LookupSourceSnowflakeArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceSnowflakeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceSnowflake = AirbyteFunctions.getSourceSnowflake(GetSourceSnowflakeArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceSnowflake:\n    fn::invoke:\n      Function: airbyte:getSourceSnowflake\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceSnowflake.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceSnowflake.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceSnowflakeConfiguration:getSourceSnowflakeConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceSonarCloud:getSourceSonarCloud": {
            "description": "SourceSonarCloud DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceSonarcloud = airbyte.getSourceSonarCloud({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_sonarcloud = airbyte.get_source_sonar_cloud(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceSonarcloud = Airbyte.GetSourceSonarCloud.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceSonarCloud(ctx, \u0026airbyte.LookupSourceSonarCloudArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceSonarCloudArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceSonarcloud = AirbyteFunctions.getSourceSonarCloud(GetSourceSonarCloudArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceSonarcloud:\n    fn::invoke:\n      Function: airbyte:getSourceSonarCloud\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceSonarCloud.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceSonarCloud.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceSonarCloudConfiguration:getSourceSonarCloudConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceSpaceXApi:getSourceSpaceXApi": {
            "description": "SourceSpacexAPI DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceSpacexapi = airbyte.getSourceSpaceXApi({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_spacexapi = airbyte.get_source_space_x_api(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceSpacexapi = Airbyte.GetSourceSpaceXApi.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceSpaceXApi(ctx, \u0026airbyte.LookupSourceSpaceXApiArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceSpaceXApiArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceSpacexapi = AirbyteFunctions.getSourceSpaceXApi(GetSourceSpaceXApiArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceSpacexapi:\n    fn::invoke:\n      Function: airbyte:getSourceSpaceXApi\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceSpaceXApi.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceSpaceXApi.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceSpaceXApiConfiguration:getSourceSpaceXApiConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceSquare:getSourceSquare": {
            "description": "SourceSquare DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceSquare = airbyte.getSourceSquare({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_square = airbyte.get_source_square(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceSquare = Airbyte.GetSourceSquare.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceSquare(ctx, \u0026airbyte.LookupSourceSquareArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceSquareArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceSquare = AirbyteFunctions.getSourceSquare(GetSourceSquareArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceSquare:\n    fn::invoke:\n      Function: airbyte:getSourceSquare\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceSquare.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceSquare.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceSquareConfiguration:getSourceSquareConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceStrava:getSourceStrava": {
            "description": "SourceStrava DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceStrava = airbyte.getSourceStrava({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_strava = airbyte.get_source_strava(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceStrava = Airbyte.GetSourceStrava.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceStrava(ctx, \u0026airbyte.LookupSourceStravaArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceStravaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceStrava = AirbyteFunctions.getSourceStrava(GetSourceStravaArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceStrava:\n    fn::invoke:\n      Function: airbyte:getSourceStrava\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceStrava.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceStrava.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceStravaConfiguration:getSourceStravaConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceStripe:getSourceStripe": {
            "description": "SourceStripe DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceStripe = airbyte.getSourceStripe({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_stripe = airbyte.get_source_stripe(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceStripe = Airbyte.GetSourceStripe.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceStripe(ctx, \u0026airbyte.LookupSourceStripeArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceStripeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceStripe = AirbyteFunctions.getSourceStripe(GetSourceStripeArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceStripe:\n    fn::invoke:\n      Function: airbyte:getSourceStripe\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceStripe.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceStripe.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceStripeConfiguration:getSourceStripeConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceSurveySparrow:getSourceSurveySparrow": {
            "description": "SourceSurveySparrow DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceSurveysparrow = airbyte.getSourceSurveySparrow({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_surveysparrow = airbyte.get_source_survey_sparrow(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceSurveysparrow = Airbyte.GetSourceSurveySparrow.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceSurveySparrow(ctx, \u0026airbyte.LookupSourceSurveySparrowArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceSurveySparrowArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceSurveysparrow = AirbyteFunctions.getSourceSurveySparrow(GetSourceSurveySparrowArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceSurveysparrow:\n    fn::invoke:\n      Function: airbyte:getSourceSurveySparrow\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceSurveySparrow.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceSurveySparrow.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceSurveySparrowConfiguration:getSourceSurveySparrowConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceSurveymonkey:getSourceSurveymonkey": {
            "description": "SourceSurveymonkey DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceSurveymonkey = airbyte.getSourceSurveymonkey({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_surveymonkey = airbyte.get_source_surveymonkey(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceSurveymonkey = Airbyte.GetSourceSurveymonkey.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceSurveymonkey(ctx, \u0026airbyte.LookupSourceSurveymonkeyArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceSurveymonkeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceSurveymonkey = AirbyteFunctions.getSourceSurveymonkey(GetSourceSurveymonkeyArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceSurveymonkey:\n    fn::invoke:\n      Function: airbyte:getSourceSurveymonkey\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceSurveymonkey.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceSurveymonkey.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceSurveymonkeyConfiguration:getSourceSurveymonkeyConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceTempo:getSourceTempo": {
            "description": "SourceTempo DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceTempo = airbyte.getSourceTempo({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_tempo = airbyte.get_source_tempo(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceTempo = Airbyte.GetSourceTempo.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceTempo(ctx, \u0026airbyte.LookupSourceTempoArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceTempoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceTempo = AirbyteFunctions.getSourceTempo(GetSourceTempoArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceTempo:\n    fn::invoke:\n      Function: airbyte:getSourceTempo\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceTempo.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceTempo.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceTempoConfiguration:getSourceTempoConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceTheGuardianApi:getSourceTheGuardianApi": {
            "description": "SourceTheGuardianAPI DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceTheguardianapi = airbyte.getSourceTheGuardianApi({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_theguardianapi = airbyte.get_source_the_guardian_api(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceTheguardianapi = Airbyte.GetSourceTheGuardianApi.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceTheGuardianApi(ctx, \u0026airbyte.LookupSourceTheGuardianApiArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceTheGuardianApiArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceTheguardianapi = AirbyteFunctions.getSourceTheGuardianApi(GetSourceTheGuardianApiArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceTheguardianapi:\n    fn::invoke:\n      Function: airbyte:getSourceTheGuardianApi\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceTheGuardianApi.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceTheGuardianApi.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceTheGuardianApiConfiguration:getSourceTheGuardianApiConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceTiktokMarketing:getSourceTiktokMarketing": {
            "description": "SourceTiktokMarketing DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceTiktokmarketing = airbyte.getSourceTiktokMarketing({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_tiktokmarketing = airbyte.get_source_tiktok_marketing(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceTiktokmarketing = Airbyte.GetSourceTiktokMarketing.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceTiktokMarketing(ctx, \u0026airbyte.LookupSourceTiktokMarketingArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceTiktokMarketingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceTiktokmarketing = AirbyteFunctions.getSourceTiktokMarketing(GetSourceTiktokMarketingArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceTiktokmarketing:\n    fn::invoke:\n      Function: airbyte:getSourceTiktokMarketing\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceTiktokMarketing.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceTiktokMarketing.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceTiktokMarketingConfiguration:getSourceTiktokMarketingConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceTodoist:getSourceTodoist": {
            "description": "SourceTodoist DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceTodoist = airbyte.getSourceTodoist({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_todoist = airbyte.get_source_todoist(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceTodoist = Airbyte.GetSourceTodoist.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceTodoist(ctx, \u0026airbyte.LookupSourceTodoistArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceTodoistArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceTodoist = AirbyteFunctions.getSourceTodoist(GetSourceTodoistArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceTodoist:\n    fn::invoke:\n      Function: airbyte:getSourceTodoist\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceTodoist.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceTodoist.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceTodoistConfiguration:getSourceTodoistConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceTrello:getSourceTrello": {
            "description": "SourceTrello DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceTrello = airbyte.getSourceTrello({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_trello = airbyte.get_source_trello(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceTrello = Airbyte.GetSourceTrello.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceTrello(ctx, \u0026airbyte.LookupSourceTrelloArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceTrelloArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceTrello = AirbyteFunctions.getSourceTrello(GetSourceTrelloArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceTrello:\n    fn::invoke:\n      Function: airbyte:getSourceTrello\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceTrello.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceTrello.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceTrelloConfiguration:getSourceTrelloConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceTrustpilot:getSourceTrustpilot": {
            "description": "SourceTrustpilot DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceTrustpilot = airbyte.getSourceTrustpilot({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_trustpilot = airbyte.get_source_trustpilot(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceTrustpilot = Airbyte.GetSourceTrustpilot.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceTrustpilot(ctx, \u0026airbyte.LookupSourceTrustpilotArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceTrustpilotArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceTrustpilot = AirbyteFunctions.getSourceTrustpilot(GetSourceTrustpilotArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceTrustpilot:\n    fn::invoke:\n      Function: airbyte:getSourceTrustpilot\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceTrustpilot.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceTrustpilot.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceTrustpilotConfiguration:getSourceTrustpilotConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceTvmazeSchedule:getSourceTvmazeSchedule": {
            "description": "SourceTvmazeSchedule DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceTvmazeschedule = airbyte.getSourceTvmazeSchedule({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_tvmazeschedule = airbyte.get_source_tvmaze_schedule(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceTvmazeschedule = Airbyte.GetSourceTvmazeSchedule.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceTvmazeSchedule(ctx, \u0026airbyte.LookupSourceTvmazeScheduleArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceTvmazeScheduleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceTvmazeschedule = AirbyteFunctions.getSourceTvmazeSchedule(GetSourceTvmazeScheduleArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceTvmazeschedule:\n    fn::invoke:\n      Function: airbyte:getSourceTvmazeSchedule\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceTvmazeSchedule.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceTvmazeSchedule.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceTvmazeScheduleConfiguration:getSourceTvmazeScheduleConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceTwilio:getSourceTwilio": {
            "description": "SourceTwilio DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceTwilio = airbyte.getSourceTwilio({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_twilio = airbyte.get_source_twilio(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceTwilio = Airbyte.GetSourceTwilio.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceTwilio(ctx, \u0026airbyte.LookupSourceTwilioArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceTwilioArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceTwilio = AirbyteFunctions.getSourceTwilio(GetSourceTwilioArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceTwilio:\n    fn::invoke:\n      Function: airbyte:getSourceTwilio\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceTwilio.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceTwilio.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceTwilioConfiguration:getSourceTwilioConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceTwilioTaskrouter:getSourceTwilioTaskrouter": {
            "description": "SourceTwilioTaskrouter DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceTwiliotaskrouter = airbyte.getSourceTwilioTaskrouter({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_twiliotaskrouter = airbyte.get_source_twilio_taskrouter(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceTwiliotaskrouter = Airbyte.GetSourceTwilioTaskrouter.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceTwilioTaskrouter(ctx, \u0026airbyte.LookupSourceTwilioTaskrouterArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceTwilioTaskrouterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceTwiliotaskrouter = AirbyteFunctions.getSourceTwilioTaskrouter(GetSourceTwilioTaskrouterArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceTwiliotaskrouter:\n    fn::invoke:\n      Function: airbyte:getSourceTwilioTaskrouter\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceTwilioTaskrouter.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceTwilioTaskrouter.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceTwilioTaskrouterConfiguration:getSourceTwilioTaskrouterConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceTwitter:getSourceTwitter": {
            "description": "SourceTwitter DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceTwitter = airbyte.getSourceTwitter({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_twitter = airbyte.get_source_twitter(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceTwitter = Airbyte.GetSourceTwitter.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceTwitter(ctx, \u0026airbyte.LookupSourceTwitterArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceTwitterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceTwitter = AirbyteFunctions.getSourceTwitter(GetSourceTwitterArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceTwitter:\n    fn::invoke:\n      Function: airbyte:getSourceTwitter\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceTwitter.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceTwitter.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceTwitterConfiguration:getSourceTwitterConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceTypeform:getSourceTypeform": {
            "description": "SourceTypeform DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceTypeform = airbyte.getSourceTypeform({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_typeform = airbyte.get_source_typeform(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceTypeform = Airbyte.GetSourceTypeform.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceTypeform(ctx, \u0026airbyte.LookupSourceTypeformArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceTypeformArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceTypeform = AirbyteFunctions.getSourceTypeform(GetSourceTypeformArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceTypeform:\n    fn::invoke:\n      Function: airbyte:getSourceTypeform\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceTypeform.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceTypeform.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceTypeformConfiguration:getSourceTypeformConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceUsCensus:getSourceUsCensus": {
            "description": "SourceUsCensus DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceUscensus = airbyte.getSourceUsCensus({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_uscensus = airbyte.get_source_us_census(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceUscensus = Airbyte.GetSourceUsCensus.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceUsCensus(ctx, \u0026airbyte.LookupSourceUsCensusArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceUsCensusArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceUscensus = AirbyteFunctions.getSourceUsCensus(GetSourceUsCensusArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceUscensus:\n    fn::invoke:\n      Function: airbyte:getSourceUsCensus\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceUsCensus.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceUsCensus.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceUsCensusConfiguration:getSourceUsCensusConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceVantage:getSourceVantage": {
            "description": "SourceVantage DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceVantage = airbyte.getSourceVantage({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_vantage = airbyte.get_source_vantage(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceVantage = Airbyte.GetSourceVantage.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceVantage(ctx, \u0026airbyte.LookupSourceVantageArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceVantageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceVantage = AirbyteFunctions.getSourceVantage(GetSourceVantageArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceVantage:\n    fn::invoke:\n      Function: airbyte:getSourceVantage\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceVantage.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceVantage.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceVantageConfiguration:getSourceVantageConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceWebflow:getSourceWebflow": {
            "description": "SourceWebflow DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceWebflow = airbyte.getSourceWebflow({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_webflow = airbyte.get_source_webflow(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceWebflow = Airbyte.GetSourceWebflow.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceWebflow(ctx, \u0026airbyte.LookupSourceWebflowArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceWebflowArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceWebflow = AirbyteFunctions.getSourceWebflow(GetSourceWebflowArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceWebflow:\n    fn::invoke:\n      Function: airbyte:getSourceWebflow\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceWebflow.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceWebflow.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceWebflowConfiguration:getSourceWebflowConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceWhiskyHunter:getSourceWhiskyHunter": {
            "description": "SourceWhiskyHunter DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceWhiskyhunter = airbyte.getSourceWhiskyHunter({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_whiskyhunter = airbyte.get_source_whisky_hunter(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceWhiskyhunter = Airbyte.GetSourceWhiskyHunter.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceWhiskyHunter(ctx, \u0026airbyte.LookupSourceWhiskyHunterArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceWhiskyHunterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceWhiskyhunter = AirbyteFunctions.getSourceWhiskyHunter(GetSourceWhiskyHunterArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceWhiskyhunter:\n    fn::invoke:\n      Function: airbyte:getSourceWhiskyHunter\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceWhiskyHunter.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceWhiskyHunter.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceWhiskyHunterConfiguration:getSourceWhiskyHunterConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceWikipediaPageviews:getSourceWikipediaPageviews": {
            "description": "SourceWikipediaPageviews DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceWikipediapageviews = airbyte.getSourceWikipediaPageviews({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_wikipediapageviews = airbyte.get_source_wikipedia_pageviews(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceWikipediapageviews = Airbyte.GetSourceWikipediaPageviews.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceWikipediaPageviews(ctx, \u0026airbyte.LookupSourceWikipediaPageviewsArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceWikipediaPageviewsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceWikipediapageviews = AirbyteFunctions.getSourceWikipediaPageviews(GetSourceWikipediaPageviewsArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceWikipediapageviews:\n    fn::invoke:\n      Function: airbyte:getSourceWikipediaPageviews\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceWikipediaPageviews.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceWikipediaPageviews.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceWikipediaPageviewsConfiguration:getSourceWikipediaPageviewsConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceWoocommerce:getSourceWoocommerce": {
            "description": "SourceWoocommerce DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceWoocommerce = airbyte.getSourceWoocommerce({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_woocommerce = airbyte.get_source_woocommerce(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceWoocommerce = Airbyte.GetSourceWoocommerce.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceWoocommerce(ctx, \u0026airbyte.LookupSourceWoocommerceArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceWoocommerceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceWoocommerce = AirbyteFunctions.getSourceWoocommerce(GetSourceWoocommerceArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceWoocommerce:\n    fn::invoke:\n      Function: airbyte:getSourceWoocommerce\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceWoocommerce.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceWoocommerce.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceWoocommerceConfiguration:getSourceWoocommerceConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceXero:getSourceXero": {
            "description": "SourceXero DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceXero = airbyte.getSourceXero({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_xero = airbyte.get_source_xero(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceXero = Airbyte.GetSourceXero.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceXero(ctx, \u0026airbyte.LookupSourceXeroArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceXeroArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceXero = AirbyteFunctions.getSourceXero(GetSourceXeroArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceXero:\n    fn::invoke:\n      Function: airbyte:getSourceXero\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceXero.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceXero.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceXeroConfiguration:getSourceXeroConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceXkcd:getSourceXkcd": {
            "description": "SourceXkcd DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceXkcd = airbyte.getSourceXkcd({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_xkcd = airbyte.get_source_xkcd(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceXkcd = Airbyte.GetSourceXkcd.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceXkcd(ctx, \u0026airbyte.LookupSourceXkcdArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceXkcdArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceXkcd = AirbyteFunctions.getSourceXkcd(GetSourceXkcdArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceXkcd:\n    fn::invoke:\n      Function: airbyte:getSourceXkcd\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceXkcd.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceXkcd.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceXkcdConfiguration:getSourceXkcdConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceYandexMetrica:getSourceYandexMetrica": {
            "description": "SourceYandexMetrica DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceYandexmetrica = airbyte.getSourceYandexMetrica({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_yandexmetrica = airbyte.get_source_yandex_metrica(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceYandexmetrica = Airbyte.GetSourceYandexMetrica.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceYandexMetrica(ctx, \u0026airbyte.LookupSourceYandexMetricaArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceYandexMetricaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceYandexmetrica = AirbyteFunctions.getSourceYandexMetrica(GetSourceYandexMetricaArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceYandexmetrica:\n    fn::invoke:\n      Function: airbyte:getSourceYandexMetrica\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceYandexMetrica.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceYandexMetrica.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceYandexMetricaConfiguration:getSourceYandexMetricaConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceYotpo:getSourceYotpo": {
            "description": "SourceYotpo DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceYotpo = airbyte.getSourceYotpo({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_yotpo = airbyte.get_source_yotpo(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceYotpo = Airbyte.GetSourceYotpo.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceYotpo(ctx, \u0026airbyte.LookupSourceYotpoArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceYotpoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceYotpo = AirbyteFunctions.getSourceYotpo(GetSourceYotpoArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceYotpo:\n    fn::invoke:\n      Function: airbyte:getSourceYotpo\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceYotpo.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceYotpo.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceYotpoConfiguration:getSourceYotpoConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceYounium:getSourceYounium": {
            "description": "SourceYounium DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceYounium = airbyte.getSourceYounium({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_younium = airbyte.get_source_younium(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceYounium = Airbyte.GetSourceYounium.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceYounium(ctx, \u0026airbyte.LookupSourceYouniumArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceYouniumArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceYounium = AirbyteFunctions.getSourceYounium(GetSourceYouniumArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceYounium:\n    fn::invoke:\n      Function: airbyte:getSourceYounium\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceYounium.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceYounium.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceYouniumConfiguration:getSourceYouniumConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceYoutubeAnalytics:getSourceYoutubeAnalytics": {
            "description": "SourceYoutubeAnalytics DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceYoutubeanalytics = airbyte.getSourceYoutubeAnalytics({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_youtubeanalytics = airbyte.get_source_youtube_analytics(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceYoutubeanalytics = Airbyte.GetSourceYoutubeAnalytics.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceYoutubeAnalytics(ctx, \u0026airbyte.LookupSourceYoutubeAnalyticsArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceYoutubeAnalyticsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceYoutubeanalytics = AirbyteFunctions.getSourceYoutubeAnalytics(GetSourceYoutubeAnalyticsArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceYoutubeanalytics:\n    fn::invoke:\n      Function: airbyte:getSourceYoutubeAnalytics\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceYoutubeAnalytics.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceYoutubeAnalytics.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceYoutubeAnalyticsConfiguration:getSourceYoutubeAnalyticsConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceZendeskChat:getSourceZendeskChat": {
            "description": "SourceZendeskChat DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceZendeskchat = airbyte.getSourceZendeskChat({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_zendeskchat = airbyte.get_source_zendesk_chat(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceZendeskchat = Airbyte.GetSourceZendeskChat.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceZendeskChat(ctx, \u0026airbyte.LookupSourceZendeskChatArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceZendeskChatArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceZendeskchat = AirbyteFunctions.getSourceZendeskChat(GetSourceZendeskChatArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceZendeskchat:\n    fn::invoke:\n      Function: airbyte:getSourceZendeskChat\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceZendeskChat.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceZendeskChat.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceZendeskChatConfiguration:getSourceZendeskChatConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceZendeskSunshine:getSourceZendeskSunshine": {
            "description": "SourceZendeskSunshine DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceZendesksunshine = airbyte.getSourceZendeskSunshine({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_zendesksunshine = airbyte.get_source_zendesk_sunshine(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceZendesksunshine = Airbyte.GetSourceZendeskSunshine.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceZendeskSunshine(ctx, \u0026airbyte.LookupSourceZendeskSunshineArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceZendeskSunshineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceZendesksunshine = AirbyteFunctions.getSourceZendeskSunshine(GetSourceZendeskSunshineArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceZendesksunshine:\n    fn::invoke:\n      Function: airbyte:getSourceZendeskSunshine\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceZendeskSunshine.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceZendeskSunshine.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceZendeskSunshineConfiguration:getSourceZendeskSunshineConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceZendeskSupport:getSourceZendeskSupport": {
            "description": "SourceZendeskSupport DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceZendesksupport = airbyte.getSourceZendeskSupport({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_zendesksupport = airbyte.get_source_zendesk_support(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceZendesksupport = Airbyte.GetSourceZendeskSupport.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceZendeskSupport(ctx, \u0026airbyte.LookupSourceZendeskSupportArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceZendeskSupportArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceZendesksupport = AirbyteFunctions.getSourceZendeskSupport(GetSourceZendeskSupportArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceZendesksupport:\n    fn::invoke:\n      Function: airbyte:getSourceZendeskSupport\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceZendeskSupport.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceZendeskSupport.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceZendeskSupportConfiguration:getSourceZendeskSupportConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceZendeskTalk:getSourceZendeskTalk": {
            "description": "SourceZendeskTalk DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceZendesktalk = airbyte.getSourceZendeskTalk({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_zendesktalk = airbyte.get_source_zendesk_talk(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceZendesktalk = Airbyte.GetSourceZendeskTalk.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceZendeskTalk(ctx, \u0026airbyte.LookupSourceZendeskTalkArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceZendeskTalkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceZendesktalk = AirbyteFunctions.getSourceZendeskTalk(GetSourceZendeskTalkArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceZendesktalk:\n    fn::invoke:\n      Function: airbyte:getSourceZendeskTalk\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceZendeskTalk.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceZendeskTalk.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceZendeskTalkConfiguration:getSourceZendeskTalkConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceZenloop:getSourceZenloop": {
            "description": "SourceZenloop DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceZenloop = airbyte.getSourceZenloop({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_zenloop = airbyte.get_source_zenloop(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceZenloop = Airbyte.GetSourceZenloop.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceZenloop(ctx, \u0026airbyte.LookupSourceZenloopArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceZenloopArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceZenloop = AirbyteFunctions.getSourceZenloop(GetSourceZenloopArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceZenloop:\n    fn::invoke:\n      Function: airbyte:getSourceZenloop\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceZenloop.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceZenloop.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceZenloopConfiguration:getSourceZenloopConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceZohoCrm:getSourceZohoCrm": {
            "description": "SourceZohoCrm DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceZohocrm = airbyte.getSourceZohoCrm({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_zohocrm = airbyte.get_source_zoho_crm(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceZohocrm = Airbyte.GetSourceZohoCrm.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceZohoCrm(ctx, \u0026airbyte.LookupSourceZohoCrmArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceZohoCrmArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceZohocrm = AirbyteFunctions.getSourceZohoCrm(GetSourceZohoCrmArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceZohocrm:\n    fn::invoke:\n      Function: airbyte:getSourceZohoCrm\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceZohoCrm.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceZohoCrm.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceZohoCrmConfiguration:getSourceZohoCrmConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceZoom:getSourceZoom": {
            "description": "SourceZoom DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceZoom = airbyte.getSourceZoom({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_zoom = airbyte.get_source_zoom(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceZoom = Airbyte.GetSourceZoom.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceZoom(ctx, \u0026airbyte.LookupSourceZoomArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceZoomArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceZoom = AirbyteFunctions.getSourceZoom(GetSourceZoomArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceZoom:\n    fn::invoke:\n      Function: airbyte:getSourceZoom\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceZoom.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceZoom.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceZoomConfiguration:getSourceZoomConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getSourceZuora:getSourceZuora": {
            "description": "SourceZuora DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst mySourceZuora = airbyte.getSourceZuora({\n    secretId: \"...my_secret_id...\",\n    sourceId: \"...my_source_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_source_zuora = airbyte.get_source_zuora(secret_id=\"...my_secret_id...\",\n    source_id=\"...my_source_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySourceZuora = Airbyte.GetSourceZuora.Invoke(new()\n    {\n        SecretId = \"...my_secret_id...\",\n        SourceId = \"...my_source_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupSourceZuora(ctx, \u0026airbyte.LookupSourceZuoraArgs{\n\t\t\tSecretId: pulumi.StringRef(\"...my_secret_id...\"),\n\t\t\tSourceId: \"...my_source_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetSourceZuoraArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySourceZuora = AirbyteFunctions.getSourceZuora(GetSourceZuoraArgs.builder()\n            .secretId(\"...my_secret_id...\")\n            .sourceId(\"...my_source_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySourceZuora:\n    fn::invoke:\n      Function: airbyte:getSourceZuora\n      Arguments:\n        secretId: '...my_secret_id...'\n        sourceId: '...my_source_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceZuora.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceZuora.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/airbyte:index/getSourceZuoraConfiguration:getSourceZuoraConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "Optional secretID obtained through the public API OAuth redirect flow.\n"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configuration",
                    "name",
                    "sourceId",
                    "workspaceId",
                    "id"
                ]
            }
        },
        "airbyte:index/getWorkspace:getWorkspace": {
            "description": "Workspace DataSource\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as airbyte from \"@pulumi/airbyte\";\n\nconst myWorkspace = airbyte.getWorkspace({\n    workspaceId: \"...my_workspace_id...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_airbyte as airbyte\n\nmy_workspace = airbyte.get_workspace(workspace_id=\"...my_workspace_id...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Airbyte = Pulumi.Airbyte;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myWorkspace = Airbyte.GetWorkspace.Invoke(new()\n    {\n        WorkspaceId = \"...my_workspace_id...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := airbyte.LookupWorkspace(ctx, \u0026airbyte.LookupWorkspaceArgs{\n\t\t\tWorkspaceId: \"...my_workspace_id...\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.airbyte.AirbyteFunctions;\nimport com.pulumi.airbyte.inputs.GetWorkspaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myWorkspace = AirbyteFunctions.getWorkspace(GetWorkspaceArgs.builder()\n            .workspaceId(\"...my_workspace_id...\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myWorkspace:\n    fn::invoke:\n      Function: airbyte:getWorkspace\n      Arguments:\n        workspaceId: '...my_workspace_id...'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getWorkspace.\n",
                "properties": {
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "workspaceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getWorkspace.\n",
                "properties": {
                    "dataResidency": {
                        "type": "string",
                        "description": "must be one of [\"auto\", \"us\", \"eu\"]\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workspace\n"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "dataResidency",
                    "name",
                    "workspaceId",
                    "id"
                ]
            }
        }
    }
}