// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ConnectionArgs, ConnectionState } from "./connection";
export type Connection = import("./connection").Connection;
export const Connection: typeof import("./connection").Connection = null as any;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));

export { DestinationSnowflakeArgs, DestinationSnowflakeState } from "./destinationSnowflake";
export type DestinationSnowflake = import("./destinationSnowflake").DestinationSnowflake;
export const DestinationSnowflake: typeof import("./destinationSnowflake").DestinationSnowflake = null as any;
utilities.lazyLoad(exports, ["DestinationSnowflake"], () => require("./destinationSnowflake"));

export { GetConnectionArgs, GetConnectionResult, GetConnectionOutputArgs } from "./getConnection";
export const getConnection: typeof import("./getConnection").getConnection = null as any;
export const getConnectionOutput: typeof import("./getConnection").getConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getConnection","getConnectionOutput"], () => require("./getConnection"));

export { GetDestinationSnowflakeArgs, GetDestinationSnowflakeResult, GetDestinationSnowflakeOutputArgs } from "./getDestinationSnowflake";
export const getDestinationSnowflake: typeof import("./getDestinationSnowflake").getDestinationSnowflake = null as any;
export const getDestinationSnowflakeOutput: typeof import("./getDestinationSnowflake").getDestinationSnowflakeOutput = null as any;
utilities.lazyLoad(exports, ["getDestinationSnowflake","getDestinationSnowflakeOutput"], () => require("./getDestinationSnowflake"));

export { GetSourceMixpanelArgs, GetSourceMixpanelResult, GetSourceMixpanelOutputArgs } from "./getSourceMixpanel";
export const getSourceMixpanel: typeof import("./getSourceMixpanel").getSourceMixpanel = null as any;
export const getSourceMixpanelOutput: typeof import("./getSourceMixpanel").getSourceMixpanelOutput = null as any;
utilities.lazyLoad(exports, ["getSourceMixpanel","getSourceMixpanelOutput"], () => require("./getSourceMixpanel"));

export { GetSourceSalesforceArgs, GetSourceSalesforceResult, GetSourceSalesforceOutputArgs } from "./getSourceSalesforce";
export const getSourceSalesforce: typeof import("./getSourceSalesforce").getSourceSalesforce = null as any;
export const getSourceSalesforceOutput: typeof import("./getSourceSalesforce").getSourceSalesforceOutput = null as any;
utilities.lazyLoad(exports, ["getSourceSalesforce","getSourceSalesforceOutput"], () => require("./getSourceSalesforce"));

export { GetWorkspaceArgs, GetWorkspaceResult, GetWorkspaceOutputArgs } from "./getWorkspace";
export const getWorkspace: typeof import("./getWorkspace").getWorkspace = null as any;
export const getWorkspaceOutput: typeof import("./getWorkspace").getWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspace","getWorkspaceOutput"], () => require("./getWorkspace"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SourceMixpanelArgs, SourceMixpanelState } from "./sourceMixpanel";
export type SourceMixpanel = import("./sourceMixpanel").SourceMixpanel;
export const SourceMixpanel: typeof import("./sourceMixpanel").SourceMixpanel = null as any;
utilities.lazyLoad(exports, ["SourceMixpanel"], () => require("./sourceMixpanel"));

export { SourceSalesforceArgs, SourceSalesforceState } from "./sourceSalesforce";
export type SourceSalesforce = import("./sourceSalesforce").SourceSalesforce;
export const SourceSalesforce: typeof import("./sourceSalesforce").SourceSalesforce = null as any;
utilities.lazyLoad(exports, ["SourceSalesforce"], () => require("./sourceSalesforce"));

export { WorkspaceArgs, WorkspaceState } from "./workspace";
export type Workspace = import("./workspace").Workspace;
export const Workspace: typeof import("./workspace").Workspace = null as any;
utilities.lazyLoad(exports, ["Workspace"], () => require("./workspace"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "airbyte:index/connection:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "airbyte:index/destinationSnowflake:DestinationSnowflake":
                return new DestinationSnowflake(name, <any>undefined, { urn })
            case "airbyte:index/sourceMixpanel:SourceMixpanel":
                return new SourceMixpanel(name, <any>undefined, { urn })
            case "airbyte:index/sourceSalesforce:SourceSalesforce":
                return new SourceSalesforce(name, <any>undefined, { urn })
            case "airbyte:index/workspace:Workspace":
                return new Workspace(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("airbyte", "index/connection", _module)
pulumi.runtime.registerResourceModule("airbyte", "index/destinationSnowflake", _module)
pulumi.runtime.registerResourceModule("airbyte", "index/sourceMixpanel", _module)
pulumi.runtime.registerResourceModule("airbyte", "index/sourceSalesforce", _module)
pulumi.runtime.registerResourceModule("airbyte", "index/workspace", _module)
pulumi.runtime.registerResourcePackage("airbyte", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:airbyte") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
