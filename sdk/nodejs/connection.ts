// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Connection extends pulumi.CustomResource {
    /**
     * Get an existing Connection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectionState, opts?: pulumi.CustomResourceOptions): Connection {
        return new Connection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'airbyte:index/connection:Connection';

    /**
     * Returns true if the given object is an instance of Connection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Connection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Connection.__pulumiType;
    }

    /**
     * A list of configured stream options for a connection.
     */
    public readonly configurations!: pulumi.Output<outputs.ConnectionConfigurations>;
    public /*out*/ readonly connectionId!: pulumi.Output<string>;
    /**
     * must be one of ["auto", "us", "eu"]
     */
    public readonly dataResidency!: pulumi.Output<string>;
    public readonly destinationId!: pulumi.Output<string>;
    /**
     * Optional name of the connection
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * must be one of ["source", "destination", "custom_format"] Define the location where the data will be stored in the
     * destination
     */
    public readonly namespaceDefinition!: pulumi.Output<string>;
    /**
     * Used when namespaceDefinition is 'custom_format'. If blank then behaves like namespaceDefinition = 'destination'. If
     * "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'.
     */
    public readonly namespaceFormat!: pulumi.Output<string>;
    /**
     * must be one of ["ignore", "disable_connection", "propagate_columns", "propagate_fully"] Set how Airbyte handles syncs
     * when it detects a non-breaking schema change in the source
     */
    public readonly nonBreakingSchemaUpdatesBehavior!: pulumi.Output<string>;
    /**
     * Prefix that will be prepended to the name of each stream when it is written to the destination (ex. “airbyte_”
     * causes “projects” => “airbyte_projects”).
     */
    public readonly prefix!: pulumi.Output<string>;
    /**
     * schedule for when the the connection should run, per the schedule type
     */
    public readonly schedule!: pulumi.Output<outputs.ConnectionSchedule>;
    public readonly sourceId!: pulumi.Output<string>;
    /**
     * must be one of ["active", "inactive", "deprecated"]
     */
    public readonly status!: pulumi.Output<string>;
    public /*out*/ readonly workspaceId!: pulumi.Output<string>;

    /**
     * Create a Connection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectionArgs | ConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectionState | undefined;
            resourceInputs["configurations"] = state ? state.configurations : undefined;
            resourceInputs["connectionId"] = state ? state.connectionId : undefined;
            resourceInputs["dataResidency"] = state ? state.dataResidency : undefined;
            resourceInputs["destinationId"] = state ? state.destinationId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespaceDefinition"] = state ? state.namespaceDefinition : undefined;
            resourceInputs["namespaceFormat"] = state ? state.namespaceFormat : undefined;
            resourceInputs["nonBreakingSchemaUpdatesBehavior"] = state ? state.nonBreakingSchemaUpdatesBehavior : undefined;
            resourceInputs["prefix"] = state ? state.prefix : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["sourceId"] = state ? state.sourceId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        } else {
            const args = argsOrState as ConnectionArgs | undefined;
            if ((!args || args.destinationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationId'");
            }
            if ((!args || args.sourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceId'");
            }
            resourceInputs["configurations"] = args ? args.configurations : undefined;
            resourceInputs["dataResidency"] = args ? args.dataResidency : undefined;
            resourceInputs["destinationId"] = args ? args.destinationId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespaceDefinition"] = args ? args.namespaceDefinition : undefined;
            resourceInputs["namespaceFormat"] = args ? args.namespaceFormat : undefined;
            resourceInputs["nonBreakingSchemaUpdatesBehavior"] = args ? args.nonBreakingSchemaUpdatesBehavior : undefined;
            resourceInputs["prefix"] = args ? args.prefix : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["sourceId"] = args ? args.sourceId : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["connectionId"] = undefined /*out*/;
            resourceInputs["workspaceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Connection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Connection resources.
 */
export interface ConnectionState {
    /**
     * A list of configured stream options for a connection.
     */
    configurations?: pulumi.Input<inputs.ConnectionConfigurations>;
    connectionId?: pulumi.Input<string>;
    /**
     * must be one of ["auto", "us", "eu"]
     */
    dataResidency?: pulumi.Input<string>;
    destinationId?: pulumi.Input<string>;
    /**
     * Optional name of the connection
     */
    name?: pulumi.Input<string>;
    /**
     * must be one of ["source", "destination", "custom_format"] Define the location where the data will be stored in the
     * destination
     */
    namespaceDefinition?: pulumi.Input<string>;
    /**
     * Used when namespaceDefinition is 'custom_format'. If blank then behaves like namespaceDefinition = 'destination'. If
     * "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'.
     */
    namespaceFormat?: pulumi.Input<string>;
    /**
     * must be one of ["ignore", "disable_connection", "propagate_columns", "propagate_fully"] Set how Airbyte handles syncs
     * when it detects a non-breaking schema change in the source
     */
    nonBreakingSchemaUpdatesBehavior?: pulumi.Input<string>;
    /**
     * Prefix that will be prepended to the name of each stream when it is written to the destination (ex. “airbyte_”
     * causes “projects” => “airbyte_projects”).
     */
    prefix?: pulumi.Input<string>;
    /**
     * schedule for when the the connection should run, per the schedule type
     */
    schedule?: pulumi.Input<inputs.ConnectionSchedule>;
    sourceId?: pulumi.Input<string>;
    /**
     * must be one of ["active", "inactive", "deprecated"]
     */
    status?: pulumi.Input<string>;
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Connection resource.
 */
export interface ConnectionArgs {
    /**
     * A list of configured stream options for a connection.
     */
    configurations?: pulumi.Input<inputs.ConnectionConfigurations>;
    /**
     * must be one of ["auto", "us", "eu"]
     */
    dataResidency?: pulumi.Input<string>;
    destinationId: pulumi.Input<string>;
    /**
     * Optional name of the connection
     */
    name?: pulumi.Input<string>;
    /**
     * must be one of ["source", "destination", "custom_format"] Define the location where the data will be stored in the
     * destination
     */
    namespaceDefinition?: pulumi.Input<string>;
    /**
     * Used when namespaceDefinition is 'custom_format'. If blank then behaves like namespaceDefinition = 'destination'. If
     * "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'.
     */
    namespaceFormat?: pulumi.Input<string>;
    /**
     * must be one of ["ignore", "disable_connection", "propagate_columns", "propagate_fully"] Set how Airbyte handles syncs
     * when it detects a non-breaking schema change in the source
     */
    nonBreakingSchemaUpdatesBehavior?: pulumi.Input<string>;
    /**
     * Prefix that will be prepended to the name of each stream when it is written to the destination (ex. “airbyte_”
     * causes “projects” => “airbyte_projects”).
     */
    prefix?: pulumi.Input<string>;
    /**
     * schedule for when the the connection should run, per the schedule type
     */
    schedule?: pulumi.Input<inputs.ConnectionSchedule>;
    sourceId: pulumi.Input<string>;
    /**
     * must be one of ["active", "inactive", "deprecated"]
     */
    status?: pulumi.Input<string>;
}
