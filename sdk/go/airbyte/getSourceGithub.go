// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupSourceGithub(ctx *pulumi.Context, args *LookupSourceGithubArgs, opts ...pulumi.InvokeOption) (*LookupSourceGithubResult, error) {
	var rv LookupSourceGithubResult
	err := ctx.Invoke("airbyte:index/getSourceGithub:getSourceGithub", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSourceGithub.
type LookupSourceGithubArgs struct {
	SecretId *string `pulumi:"secretId"`
	SourceId string  `pulumi:"sourceId"`
}

// A collection of values returned by getSourceGithub.
type LookupSourceGithubResult struct {
	Configuration GetSourceGithubConfiguration `pulumi:"configuration"`
	// The provider-assigned unique ID for this managed resource.
	Id          string  `pulumi:"id"`
	Name        string  `pulumi:"name"`
	SecretId    *string `pulumi:"secretId"`
	SourceId    string  `pulumi:"sourceId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

func LookupSourceGithubOutput(ctx *pulumi.Context, args LookupSourceGithubOutputArgs, opts ...pulumi.InvokeOption) LookupSourceGithubResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSourceGithubResult, error) {
			args := v.(LookupSourceGithubArgs)
			r, err := LookupSourceGithub(ctx, &args, opts...)
			var s LookupSourceGithubResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSourceGithubResultOutput)
}

// A collection of arguments for invoking getSourceGithub.
type LookupSourceGithubOutputArgs struct {
	SecretId pulumi.StringPtrInput `pulumi:"secretId"`
	SourceId pulumi.StringInput    `pulumi:"sourceId"`
}

func (LookupSourceGithubOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSourceGithubArgs)(nil)).Elem()
}

// A collection of values returned by getSourceGithub.
type LookupSourceGithubResultOutput struct{ *pulumi.OutputState }

func (LookupSourceGithubResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSourceGithubResult)(nil)).Elem()
}

func (o LookupSourceGithubResultOutput) ToLookupSourceGithubResultOutput() LookupSourceGithubResultOutput {
	return o
}

func (o LookupSourceGithubResultOutput) ToLookupSourceGithubResultOutputWithContext(ctx context.Context) LookupSourceGithubResultOutput {
	return o
}

func (o LookupSourceGithubResultOutput) Configuration() GetSourceGithubConfigurationOutput {
	return o.ApplyT(func(v LookupSourceGithubResult) GetSourceGithubConfiguration { return v.Configuration }).(GetSourceGithubConfigurationOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSourceGithubResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceGithubResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSourceGithubResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceGithubResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupSourceGithubResultOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSourceGithubResult) *string { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o LookupSourceGithubResultOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceGithubResult) string { return v.SourceId }).(pulumi.StringOutput)
}

func (o LookupSourceGithubResultOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceGithubResult) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSourceGithubResultOutput{})
}
