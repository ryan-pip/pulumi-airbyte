// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// DestinationAwsDatalake Resource
type DestinationAWSDatalake struct {
	pulumi.CustomResourceState

	Configuration   DestinationAWSDatalakeConfigurationOutput `pulumi:"configuration"`
	DestinationId   pulumi.StringOutput                       `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput                       `pulumi:"destinationType"`
	Name            pulumi.StringOutput                       `pulumi:"name"`
	WorkspaceId     pulumi.StringOutput                       `pulumi:"workspaceId"`
}

// NewDestinationAWSDatalake registers a new resource with the given unique name, arguments, and options.
func NewDestinationAWSDatalake(ctx *pulumi.Context,
	name string, args *DestinationAWSDatalakeArgs, opts ...pulumi.ResourceOption) (*DestinationAWSDatalake, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DestinationAWSDatalake
	err := ctx.RegisterResource("airbyte:index/destinationAWSDatalake:DestinationAWSDatalake", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationAWSDatalake gets an existing DestinationAWSDatalake resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationAWSDatalake(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationAWSDatalakeState, opts ...pulumi.ResourceOption) (*DestinationAWSDatalake, error) {
	var resource DestinationAWSDatalake
	err := ctx.ReadResource("airbyte:index/destinationAWSDatalake:DestinationAWSDatalake", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationAWSDatalake resources.
type destinationAWSDatalakeState struct {
	Configuration   *DestinationAWSDatalakeConfiguration `pulumi:"configuration"`
	DestinationId   *string                              `pulumi:"destinationId"`
	DestinationType *string                              `pulumi:"destinationType"`
	Name            *string                              `pulumi:"name"`
	WorkspaceId     *string                              `pulumi:"workspaceId"`
}

type DestinationAWSDatalakeState struct {
	Configuration   DestinationAWSDatalakeConfigurationPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	WorkspaceId     pulumi.StringPtrInput
}

func (DestinationAWSDatalakeState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationAWSDatalakeState)(nil)).Elem()
}

type destinationAWSDatalakeArgs struct {
	Configuration DestinationAWSDatalakeConfiguration `pulumi:"configuration"`
	Name          string                              `pulumi:"name"`
	WorkspaceId   string                              `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationAWSDatalake resource.
type DestinationAWSDatalakeArgs struct {
	Configuration DestinationAWSDatalakeConfigurationInput
	Name          pulumi.StringInput
	WorkspaceId   pulumi.StringInput
}

func (DestinationAWSDatalakeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationAWSDatalakeArgs)(nil)).Elem()
}

type DestinationAWSDatalakeInput interface {
	pulumi.Input

	ToDestinationAWSDatalakeOutput() DestinationAWSDatalakeOutput
	ToDestinationAWSDatalakeOutputWithContext(ctx context.Context) DestinationAWSDatalakeOutput
}

func (*DestinationAWSDatalake) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationAWSDatalake)(nil)).Elem()
}

func (i *DestinationAWSDatalake) ToDestinationAWSDatalakeOutput() DestinationAWSDatalakeOutput {
	return i.ToDestinationAWSDatalakeOutputWithContext(context.Background())
}

func (i *DestinationAWSDatalake) ToDestinationAWSDatalakeOutputWithContext(ctx context.Context) DestinationAWSDatalakeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationAWSDatalakeOutput)
}

// DestinationAWSDatalakeArrayInput is an input type that accepts DestinationAWSDatalakeArray and DestinationAWSDatalakeArrayOutput values.
// You can construct a concrete instance of `DestinationAWSDatalakeArrayInput` via:
//
//	DestinationAWSDatalakeArray{ DestinationAWSDatalakeArgs{...} }
type DestinationAWSDatalakeArrayInput interface {
	pulumi.Input

	ToDestinationAWSDatalakeArrayOutput() DestinationAWSDatalakeArrayOutput
	ToDestinationAWSDatalakeArrayOutputWithContext(context.Context) DestinationAWSDatalakeArrayOutput
}

type DestinationAWSDatalakeArray []DestinationAWSDatalakeInput

func (DestinationAWSDatalakeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationAWSDatalake)(nil)).Elem()
}

func (i DestinationAWSDatalakeArray) ToDestinationAWSDatalakeArrayOutput() DestinationAWSDatalakeArrayOutput {
	return i.ToDestinationAWSDatalakeArrayOutputWithContext(context.Background())
}

func (i DestinationAWSDatalakeArray) ToDestinationAWSDatalakeArrayOutputWithContext(ctx context.Context) DestinationAWSDatalakeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationAWSDatalakeArrayOutput)
}

// DestinationAWSDatalakeMapInput is an input type that accepts DestinationAWSDatalakeMap and DestinationAWSDatalakeMapOutput values.
// You can construct a concrete instance of `DestinationAWSDatalakeMapInput` via:
//
//	DestinationAWSDatalakeMap{ "key": DestinationAWSDatalakeArgs{...} }
type DestinationAWSDatalakeMapInput interface {
	pulumi.Input

	ToDestinationAWSDatalakeMapOutput() DestinationAWSDatalakeMapOutput
	ToDestinationAWSDatalakeMapOutputWithContext(context.Context) DestinationAWSDatalakeMapOutput
}

type DestinationAWSDatalakeMap map[string]DestinationAWSDatalakeInput

func (DestinationAWSDatalakeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationAWSDatalake)(nil)).Elem()
}

func (i DestinationAWSDatalakeMap) ToDestinationAWSDatalakeMapOutput() DestinationAWSDatalakeMapOutput {
	return i.ToDestinationAWSDatalakeMapOutputWithContext(context.Background())
}

func (i DestinationAWSDatalakeMap) ToDestinationAWSDatalakeMapOutputWithContext(ctx context.Context) DestinationAWSDatalakeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationAWSDatalakeMapOutput)
}

type DestinationAWSDatalakeOutput struct{ *pulumi.OutputState }

func (DestinationAWSDatalakeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationAWSDatalake)(nil)).Elem()
}

func (o DestinationAWSDatalakeOutput) ToDestinationAWSDatalakeOutput() DestinationAWSDatalakeOutput {
	return o
}

func (o DestinationAWSDatalakeOutput) ToDestinationAWSDatalakeOutputWithContext(ctx context.Context) DestinationAWSDatalakeOutput {
	return o
}

func (o DestinationAWSDatalakeOutput) Configuration() DestinationAWSDatalakeConfigurationOutput {
	return o.ApplyT(func(v *DestinationAWSDatalake) DestinationAWSDatalakeConfigurationOutput { return v.Configuration }).(DestinationAWSDatalakeConfigurationOutput)
}

func (o DestinationAWSDatalakeOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationAWSDatalake) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationAWSDatalakeOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationAWSDatalake) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

func (o DestinationAWSDatalakeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationAWSDatalake) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationAWSDatalakeOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationAWSDatalake) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type DestinationAWSDatalakeArrayOutput struct{ *pulumi.OutputState }

func (DestinationAWSDatalakeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationAWSDatalake)(nil)).Elem()
}

func (o DestinationAWSDatalakeArrayOutput) ToDestinationAWSDatalakeArrayOutput() DestinationAWSDatalakeArrayOutput {
	return o
}

func (o DestinationAWSDatalakeArrayOutput) ToDestinationAWSDatalakeArrayOutputWithContext(ctx context.Context) DestinationAWSDatalakeArrayOutput {
	return o
}

func (o DestinationAWSDatalakeArrayOutput) Index(i pulumi.IntInput) DestinationAWSDatalakeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DestinationAWSDatalake {
		return vs[0].([]*DestinationAWSDatalake)[vs[1].(int)]
	}).(DestinationAWSDatalakeOutput)
}

type DestinationAWSDatalakeMapOutput struct{ *pulumi.OutputState }

func (DestinationAWSDatalakeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationAWSDatalake)(nil)).Elem()
}

func (o DestinationAWSDatalakeMapOutput) ToDestinationAWSDatalakeMapOutput() DestinationAWSDatalakeMapOutput {
	return o
}

func (o DestinationAWSDatalakeMapOutput) ToDestinationAWSDatalakeMapOutputWithContext(ctx context.Context) DestinationAWSDatalakeMapOutput {
	return o
}

func (o DestinationAWSDatalakeMapOutput) MapIndex(k pulumi.StringInput) DestinationAWSDatalakeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DestinationAWSDatalake {
		return vs[0].(map[string]*DestinationAWSDatalake)[vs[1].(string)]
	}).(DestinationAWSDatalakeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationAWSDatalakeInput)(nil)).Elem(), &DestinationAWSDatalake{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationAWSDatalakeArrayInput)(nil)).Elem(), DestinationAWSDatalakeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationAWSDatalakeMapInput)(nil)).Elem(), DestinationAWSDatalakeMap{})
	pulumi.RegisterOutputType(DestinationAWSDatalakeOutput{})
	pulumi.RegisterOutputType(DestinationAWSDatalakeArrayOutput{})
	pulumi.RegisterOutputType(DestinationAWSDatalakeMapOutput{})
}
