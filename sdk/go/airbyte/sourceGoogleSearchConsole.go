// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SourceGoogleSearchConsole Resource
type SourceGoogleSearchConsole struct {
	pulumi.CustomResourceState

	Configuration SourceGoogleSearchConsoleConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput                          `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceGoogleSearchConsole registers a new resource with the given unique name, arguments, and options.
func NewSourceGoogleSearchConsole(ctx *pulumi.Context,
	name string, args *SourceGoogleSearchConsoleArgs, opts ...pulumi.ResourceOption) (*SourceGoogleSearchConsole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceGoogleSearchConsole
	err := ctx.RegisterResource("airbyte:index/sourceGoogleSearchConsole:SourceGoogleSearchConsole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceGoogleSearchConsole gets an existing SourceGoogleSearchConsole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceGoogleSearchConsole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceGoogleSearchConsoleState, opts ...pulumi.ResourceOption) (*SourceGoogleSearchConsole, error) {
	var resource SourceGoogleSearchConsole
	err := ctx.ReadResource("airbyte:index/sourceGoogleSearchConsole:SourceGoogleSearchConsole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceGoogleSearchConsole resources.
type sourceGoogleSearchConsoleState struct {
	Configuration *SourceGoogleSearchConsoleConfiguration `pulumi:"configuration"`
	Name          *string                                 `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceGoogleSearchConsoleState struct {
	Configuration SourceGoogleSearchConsoleConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceGoogleSearchConsoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceGoogleSearchConsoleState)(nil)).Elem()
}

type sourceGoogleSearchConsoleArgs struct {
	Configuration SourceGoogleSearchConsoleConfiguration `pulumi:"configuration"`
	Name          string                                 `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceGoogleSearchConsole resource.
type SourceGoogleSearchConsoleArgs struct {
	Configuration SourceGoogleSearchConsoleConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceGoogleSearchConsoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceGoogleSearchConsoleArgs)(nil)).Elem()
}

type SourceGoogleSearchConsoleInput interface {
	pulumi.Input

	ToSourceGoogleSearchConsoleOutput() SourceGoogleSearchConsoleOutput
	ToSourceGoogleSearchConsoleOutputWithContext(ctx context.Context) SourceGoogleSearchConsoleOutput
}

func (*SourceGoogleSearchConsole) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceGoogleSearchConsole)(nil)).Elem()
}

func (i *SourceGoogleSearchConsole) ToSourceGoogleSearchConsoleOutput() SourceGoogleSearchConsoleOutput {
	return i.ToSourceGoogleSearchConsoleOutputWithContext(context.Background())
}

func (i *SourceGoogleSearchConsole) ToSourceGoogleSearchConsoleOutputWithContext(ctx context.Context) SourceGoogleSearchConsoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceGoogleSearchConsoleOutput)
}

// SourceGoogleSearchConsoleArrayInput is an input type that accepts SourceGoogleSearchConsoleArray and SourceGoogleSearchConsoleArrayOutput values.
// You can construct a concrete instance of `SourceGoogleSearchConsoleArrayInput` via:
//
//	SourceGoogleSearchConsoleArray{ SourceGoogleSearchConsoleArgs{...} }
type SourceGoogleSearchConsoleArrayInput interface {
	pulumi.Input

	ToSourceGoogleSearchConsoleArrayOutput() SourceGoogleSearchConsoleArrayOutput
	ToSourceGoogleSearchConsoleArrayOutputWithContext(context.Context) SourceGoogleSearchConsoleArrayOutput
}

type SourceGoogleSearchConsoleArray []SourceGoogleSearchConsoleInput

func (SourceGoogleSearchConsoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceGoogleSearchConsole)(nil)).Elem()
}

func (i SourceGoogleSearchConsoleArray) ToSourceGoogleSearchConsoleArrayOutput() SourceGoogleSearchConsoleArrayOutput {
	return i.ToSourceGoogleSearchConsoleArrayOutputWithContext(context.Background())
}

func (i SourceGoogleSearchConsoleArray) ToSourceGoogleSearchConsoleArrayOutputWithContext(ctx context.Context) SourceGoogleSearchConsoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceGoogleSearchConsoleArrayOutput)
}

// SourceGoogleSearchConsoleMapInput is an input type that accepts SourceGoogleSearchConsoleMap and SourceGoogleSearchConsoleMapOutput values.
// You can construct a concrete instance of `SourceGoogleSearchConsoleMapInput` via:
//
//	SourceGoogleSearchConsoleMap{ "key": SourceGoogleSearchConsoleArgs{...} }
type SourceGoogleSearchConsoleMapInput interface {
	pulumi.Input

	ToSourceGoogleSearchConsoleMapOutput() SourceGoogleSearchConsoleMapOutput
	ToSourceGoogleSearchConsoleMapOutputWithContext(context.Context) SourceGoogleSearchConsoleMapOutput
}

type SourceGoogleSearchConsoleMap map[string]SourceGoogleSearchConsoleInput

func (SourceGoogleSearchConsoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceGoogleSearchConsole)(nil)).Elem()
}

func (i SourceGoogleSearchConsoleMap) ToSourceGoogleSearchConsoleMapOutput() SourceGoogleSearchConsoleMapOutput {
	return i.ToSourceGoogleSearchConsoleMapOutputWithContext(context.Background())
}

func (i SourceGoogleSearchConsoleMap) ToSourceGoogleSearchConsoleMapOutputWithContext(ctx context.Context) SourceGoogleSearchConsoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceGoogleSearchConsoleMapOutput)
}

type SourceGoogleSearchConsoleOutput struct{ *pulumi.OutputState }

func (SourceGoogleSearchConsoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceGoogleSearchConsole)(nil)).Elem()
}

func (o SourceGoogleSearchConsoleOutput) ToSourceGoogleSearchConsoleOutput() SourceGoogleSearchConsoleOutput {
	return o
}

func (o SourceGoogleSearchConsoleOutput) ToSourceGoogleSearchConsoleOutputWithContext(ctx context.Context) SourceGoogleSearchConsoleOutput {
	return o
}

func (o SourceGoogleSearchConsoleOutput) Configuration() SourceGoogleSearchConsoleConfigurationOutput {
	return o.ApplyT(func(v *SourceGoogleSearchConsole) SourceGoogleSearchConsoleConfigurationOutput {
		return v.Configuration
	}).(SourceGoogleSearchConsoleConfigurationOutput)
}

func (o SourceGoogleSearchConsoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceGoogleSearchConsole) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceGoogleSearchConsoleOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceGoogleSearchConsole) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceGoogleSearchConsoleOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceGoogleSearchConsole) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceGoogleSearchConsoleOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceGoogleSearchConsole) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceGoogleSearchConsoleOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceGoogleSearchConsole) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceGoogleSearchConsoleArrayOutput struct{ *pulumi.OutputState }

func (SourceGoogleSearchConsoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceGoogleSearchConsole)(nil)).Elem()
}

func (o SourceGoogleSearchConsoleArrayOutput) ToSourceGoogleSearchConsoleArrayOutput() SourceGoogleSearchConsoleArrayOutput {
	return o
}

func (o SourceGoogleSearchConsoleArrayOutput) ToSourceGoogleSearchConsoleArrayOutputWithContext(ctx context.Context) SourceGoogleSearchConsoleArrayOutput {
	return o
}

func (o SourceGoogleSearchConsoleArrayOutput) Index(i pulumi.IntInput) SourceGoogleSearchConsoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceGoogleSearchConsole {
		return vs[0].([]*SourceGoogleSearchConsole)[vs[1].(int)]
	}).(SourceGoogleSearchConsoleOutput)
}

type SourceGoogleSearchConsoleMapOutput struct{ *pulumi.OutputState }

func (SourceGoogleSearchConsoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceGoogleSearchConsole)(nil)).Elem()
}

func (o SourceGoogleSearchConsoleMapOutput) ToSourceGoogleSearchConsoleMapOutput() SourceGoogleSearchConsoleMapOutput {
	return o
}

func (o SourceGoogleSearchConsoleMapOutput) ToSourceGoogleSearchConsoleMapOutputWithContext(ctx context.Context) SourceGoogleSearchConsoleMapOutput {
	return o
}

func (o SourceGoogleSearchConsoleMapOutput) MapIndex(k pulumi.StringInput) SourceGoogleSearchConsoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceGoogleSearchConsole {
		return vs[0].(map[string]*SourceGoogleSearchConsole)[vs[1].(string)]
	}).(SourceGoogleSearchConsoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceGoogleSearchConsoleInput)(nil)).Elem(), &SourceGoogleSearchConsole{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceGoogleSearchConsoleArrayInput)(nil)).Elem(), SourceGoogleSearchConsoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceGoogleSearchConsoleMapInput)(nil)).Elem(), SourceGoogleSearchConsoleMap{})
	pulumi.RegisterOutputType(SourceGoogleSearchConsoleOutput{})
	pulumi.RegisterOutputType(SourceGoogleSearchConsoleArrayOutput{})
	pulumi.RegisterOutputType(SourceGoogleSearchConsoleMapOutput{})
}
