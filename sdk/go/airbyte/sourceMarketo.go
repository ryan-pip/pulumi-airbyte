// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-airbyte/sdk/go/airbyte/internal"
)

// SourceMarketo Resource
type SourceMarketo struct {
	pulumi.CustomResourceState

	Configuration SourceMarketoConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput              `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceMarketo registers a new resource with the given unique name, arguments, and options.
func NewSourceMarketo(ctx *pulumi.Context,
	name string, args *SourceMarketoArgs, opts ...pulumi.ResourceOption) (*SourceMarketo, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceMarketo
	err := ctx.RegisterResource("airbyte:index/sourceMarketo:SourceMarketo", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceMarketo gets an existing SourceMarketo resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceMarketo(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceMarketoState, opts ...pulumi.ResourceOption) (*SourceMarketo, error) {
	var resource SourceMarketo
	err := ctx.ReadResource("airbyte:index/sourceMarketo:SourceMarketo", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceMarketo resources.
type sourceMarketoState struct {
	Configuration *SourceMarketoConfiguration `pulumi:"configuration"`
	Name          *string                     `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceMarketoState struct {
	Configuration SourceMarketoConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceMarketoState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceMarketoState)(nil)).Elem()
}

type sourceMarketoArgs struct {
	Configuration SourceMarketoConfiguration `pulumi:"configuration"`
	Name          string                     `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceMarketo resource.
type SourceMarketoArgs struct {
	Configuration SourceMarketoConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceMarketoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceMarketoArgs)(nil)).Elem()
}

type SourceMarketoInput interface {
	pulumi.Input

	ToSourceMarketoOutput() SourceMarketoOutput
	ToSourceMarketoOutputWithContext(ctx context.Context) SourceMarketoOutput
}

func (*SourceMarketo) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceMarketo)(nil)).Elem()
}

func (i *SourceMarketo) ToSourceMarketoOutput() SourceMarketoOutput {
	return i.ToSourceMarketoOutputWithContext(context.Background())
}

func (i *SourceMarketo) ToSourceMarketoOutputWithContext(ctx context.Context) SourceMarketoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceMarketoOutput)
}

// SourceMarketoArrayInput is an input type that accepts SourceMarketoArray and SourceMarketoArrayOutput values.
// You can construct a concrete instance of `SourceMarketoArrayInput` via:
//
//	SourceMarketoArray{ SourceMarketoArgs{...} }
type SourceMarketoArrayInput interface {
	pulumi.Input

	ToSourceMarketoArrayOutput() SourceMarketoArrayOutput
	ToSourceMarketoArrayOutputWithContext(context.Context) SourceMarketoArrayOutput
}

type SourceMarketoArray []SourceMarketoInput

func (SourceMarketoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceMarketo)(nil)).Elem()
}

func (i SourceMarketoArray) ToSourceMarketoArrayOutput() SourceMarketoArrayOutput {
	return i.ToSourceMarketoArrayOutputWithContext(context.Background())
}

func (i SourceMarketoArray) ToSourceMarketoArrayOutputWithContext(ctx context.Context) SourceMarketoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceMarketoArrayOutput)
}

// SourceMarketoMapInput is an input type that accepts SourceMarketoMap and SourceMarketoMapOutput values.
// You can construct a concrete instance of `SourceMarketoMapInput` via:
//
//	SourceMarketoMap{ "key": SourceMarketoArgs{...} }
type SourceMarketoMapInput interface {
	pulumi.Input

	ToSourceMarketoMapOutput() SourceMarketoMapOutput
	ToSourceMarketoMapOutputWithContext(context.Context) SourceMarketoMapOutput
}

type SourceMarketoMap map[string]SourceMarketoInput

func (SourceMarketoMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceMarketo)(nil)).Elem()
}

func (i SourceMarketoMap) ToSourceMarketoMapOutput() SourceMarketoMapOutput {
	return i.ToSourceMarketoMapOutputWithContext(context.Background())
}

func (i SourceMarketoMap) ToSourceMarketoMapOutputWithContext(ctx context.Context) SourceMarketoMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceMarketoMapOutput)
}

type SourceMarketoOutput struct{ *pulumi.OutputState }

func (SourceMarketoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceMarketo)(nil)).Elem()
}

func (o SourceMarketoOutput) ToSourceMarketoOutput() SourceMarketoOutput {
	return o
}

func (o SourceMarketoOutput) ToSourceMarketoOutputWithContext(ctx context.Context) SourceMarketoOutput {
	return o
}

func (o SourceMarketoOutput) Configuration() SourceMarketoConfigurationOutput {
	return o.ApplyT(func(v *SourceMarketo) SourceMarketoConfigurationOutput { return v.Configuration }).(SourceMarketoConfigurationOutput)
}

func (o SourceMarketoOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceMarketo) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceMarketoOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceMarketo) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceMarketoOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceMarketo) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceMarketoOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceMarketo) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceMarketoOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceMarketo) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceMarketoArrayOutput struct{ *pulumi.OutputState }

func (SourceMarketoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceMarketo)(nil)).Elem()
}

func (o SourceMarketoArrayOutput) ToSourceMarketoArrayOutput() SourceMarketoArrayOutput {
	return o
}

func (o SourceMarketoArrayOutput) ToSourceMarketoArrayOutputWithContext(ctx context.Context) SourceMarketoArrayOutput {
	return o
}

func (o SourceMarketoArrayOutput) Index(i pulumi.IntInput) SourceMarketoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceMarketo {
		return vs[0].([]*SourceMarketo)[vs[1].(int)]
	}).(SourceMarketoOutput)
}

type SourceMarketoMapOutput struct{ *pulumi.OutputState }

func (SourceMarketoMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceMarketo)(nil)).Elem()
}

func (o SourceMarketoMapOutput) ToSourceMarketoMapOutput() SourceMarketoMapOutput {
	return o
}

func (o SourceMarketoMapOutput) ToSourceMarketoMapOutputWithContext(ctx context.Context) SourceMarketoMapOutput {
	return o
}

func (o SourceMarketoMapOutput) MapIndex(k pulumi.StringInput) SourceMarketoOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceMarketo {
		return vs[0].(map[string]*SourceMarketo)[vs[1].(string)]
	}).(SourceMarketoOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceMarketoInput)(nil)).Elem(), &SourceMarketo{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceMarketoArrayInput)(nil)).Elem(), SourceMarketoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceMarketoMapInput)(nil)).Elem(), SourceMarketoMap{})
	pulumi.RegisterOutputType(SourceMarketoOutput{})
	pulumi.RegisterOutputType(SourceMarketoArrayOutput{})
	pulumi.RegisterOutputType(SourceMarketoMapOutput{})
}
