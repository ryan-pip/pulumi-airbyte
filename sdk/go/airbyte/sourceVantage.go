// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-airbyte/sdk/go/airbyte/internal"
)

// SourceVantage Resource
type SourceVantage struct {
	pulumi.CustomResourceState

	Configuration SourceVantageConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput              `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceVantage registers a new resource with the given unique name, arguments, and options.
func NewSourceVantage(ctx *pulumi.Context,
	name string, args *SourceVantageArgs, opts ...pulumi.ResourceOption) (*SourceVantage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceVantage
	err := ctx.RegisterResource("airbyte:index/sourceVantage:SourceVantage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceVantage gets an existing SourceVantage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceVantage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceVantageState, opts ...pulumi.ResourceOption) (*SourceVantage, error) {
	var resource SourceVantage
	err := ctx.ReadResource("airbyte:index/sourceVantage:SourceVantage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceVantage resources.
type sourceVantageState struct {
	Configuration *SourceVantageConfiguration `pulumi:"configuration"`
	Name          *string                     `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceVantageState struct {
	Configuration SourceVantageConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceVantageState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceVantageState)(nil)).Elem()
}

type sourceVantageArgs struct {
	Configuration SourceVantageConfiguration `pulumi:"configuration"`
	Name          string                     `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceVantage resource.
type SourceVantageArgs struct {
	Configuration SourceVantageConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceVantageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceVantageArgs)(nil)).Elem()
}

type SourceVantageInput interface {
	pulumi.Input

	ToSourceVantageOutput() SourceVantageOutput
	ToSourceVantageOutputWithContext(ctx context.Context) SourceVantageOutput
}

func (*SourceVantage) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceVantage)(nil)).Elem()
}

func (i *SourceVantage) ToSourceVantageOutput() SourceVantageOutput {
	return i.ToSourceVantageOutputWithContext(context.Background())
}

func (i *SourceVantage) ToSourceVantageOutputWithContext(ctx context.Context) SourceVantageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceVantageOutput)
}

// SourceVantageArrayInput is an input type that accepts SourceVantageArray and SourceVantageArrayOutput values.
// You can construct a concrete instance of `SourceVantageArrayInput` via:
//
//	SourceVantageArray{ SourceVantageArgs{...} }
type SourceVantageArrayInput interface {
	pulumi.Input

	ToSourceVantageArrayOutput() SourceVantageArrayOutput
	ToSourceVantageArrayOutputWithContext(context.Context) SourceVantageArrayOutput
}

type SourceVantageArray []SourceVantageInput

func (SourceVantageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceVantage)(nil)).Elem()
}

func (i SourceVantageArray) ToSourceVantageArrayOutput() SourceVantageArrayOutput {
	return i.ToSourceVantageArrayOutputWithContext(context.Background())
}

func (i SourceVantageArray) ToSourceVantageArrayOutputWithContext(ctx context.Context) SourceVantageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceVantageArrayOutput)
}

// SourceVantageMapInput is an input type that accepts SourceVantageMap and SourceVantageMapOutput values.
// You can construct a concrete instance of `SourceVantageMapInput` via:
//
//	SourceVantageMap{ "key": SourceVantageArgs{...} }
type SourceVantageMapInput interface {
	pulumi.Input

	ToSourceVantageMapOutput() SourceVantageMapOutput
	ToSourceVantageMapOutputWithContext(context.Context) SourceVantageMapOutput
}

type SourceVantageMap map[string]SourceVantageInput

func (SourceVantageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceVantage)(nil)).Elem()
}

func (i SourceVantageMap) ToSourceVantageMapOutput() SourceVantageMapOutput {
	return i.ToSourceVantageMapOutputWithContext(context.Background())
}

func (i SourceVantageMap) ToSourceVantageMapOutputWithContext(ctx context.Context) SourceVantageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceVantageMapOutput)
}

type SourceVantageOutput struct{ *pulumi.OutputState }

func (SourceVantageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceVantage)(nil)).Elem()
}

func (o SourceVantageOutput) ToSourceVantageOutput() SourceVantageOutput {
	return o
}

func (o SourceVantageOutput) ToSourceVantageOutputWithContext(ctx context.Context) SourceVantageOutput {
	return o
}

func (o SourceVantageOutput) Configuration() SourceVantageConfigurationOutput {
	return o.ApplyT(func(v *SourceVantage) SourceVantageConfigurationOutput { return v.Configuration }).(SourceVantageConfigurationOutput)
}

func (o SourceVantageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceVantage) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceVantageOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceVantage) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceVantageOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceVantage) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceVantageOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceVantage) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceVantageOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceVantage) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceVantageArrayOutput struct{ *pulumi.OutputState }

func (SourceVantageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceVantage)(nil)).Elem()
}

func (o SourceVantageArrayOutput) ToSourceVantageArrayOutput() SourceVantageArrayOutput {
	return o
}

func (o SourceVantageArrayOutput) ToSourceVantageArrayOutputWithContext(ctx context.Context) SourceVantageArrayOutput {
	return o
}

func (o SourceVantageArrayOutput) Index(i pulumi.IntInput) SourceVantageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceVantage {
		return vs[0].([]*SourceVantage)[vs[1].(int)]
	}).(SourceVantageOutput)
}

type SourceVantageMapOutput struct{ *pulumi.OutputState }

func (SourceVantageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceVantage)(nil)).Elem()
}

func (o SourceVantageMapOutput) ToSourceVantageMapOutput() SourceVantageMapOutput {
	return o
}

func (o SourceVantageMapOutput) ToSourceVantageMapOutputWithContext(ctx context.Context) SourceVantageMapOutput {
	return o
}

func (o SourceVantageMapOutput) MapIndex(k pulumi.StringInput) SourceVantageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceVantage {
		return vs[0].(map[string]*SourceVantage)[vs[1].(string)]
	}).(SourceVantageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceVantageInput)(nil)).Elem(), &SourceVantage{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceVantageArrayInput)(nil)).Elem(), SourceVantageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceVantageMapInput)(nil)).Elem(), SourceVantageMap{})
	pulumi.RegisterOutputType(SourceVantageOutput{})
	pulumi.RegisterOutputType(SourceVantageArrayOutput{})
	pulumi.RegisterOutputType(SourceVantageMapOutput{})
}
