// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SourceAirtable Resource
type SourceAirtable struct {
	pulumi.CustomResourceState

	Configuration SourceAirtableConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput               `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceAirtable registers a new resource with the given unique name, arguments, and options.
func NewSourceAirtable(ctx *pulumi.Context,
	name string, args *SourceAirtableArgs, opts ...pulumi.ResourceOption) (*SourceAirtable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceAirtable
	err := ctx.RegisterResource("airbyte:index/sourceAirtable:SourceAirtable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceAirtable gets an existing SourceAirtable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceAirtable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceAirtableState, opts ...pulumi.ResourceOption) (*SourceAirtable, error) {
	var resource SourceAirtable
	err := ctx.ReadResource("airbyte:index/sourceAirtable:SourceAirtable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceAirtable resources.
type sourceAirtableState struct {
	Configuration *SourceAirtableConfiguration `pulumi:"configuration"`
	Name          *string                      `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceAirtableState struct {
	Configuration SourceAirtableConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceAirtableState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceAirtableState)(nil)).Elem()
}

type sourceAirtableArgs struct {
	Configuration SourceAirtableConfiguration `pulumi:"configuration"`
	Name          string                      `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceAirtable resource.
type SourceAirtableArgs struct {
	Configuration SourceAirtableConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceAirtableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceAirtableArgs)(nil)).Elem()
}

type SourceAirtableInput interface {
	pulumi.Input

	ToSourceAirtableOutput() SourceAirtableOutput
	ToSourceAirtableOutputWithContext(ctx context.Context) SourceAirtableOutput
}

func (*SourceAirtable) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceAirtable)(nil)).Elem()
}

func (i *SourceAirtable) ToSourceAirtableOutput() SourceAirtableOutput {
	return i.ToSourceAirtableOutputWithContext(context.Background())
}

func (i *SourceAirtable) ToSourceAirtableOutputWithContext(ctx context.Context) SourceAirtableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceAirtableOutput)
}

// SourceAirtableArrayInput is an input type that accepts SourceAirtableArray and SourceAirtableArrayOutput values.
// You can construct a concrete instance of `SourceAirtableArrayInput` via:
//
//	SourceAirtableArray{ SourceAirtableArgs{...} }
type SourceAirtableArrayInput interface {
	pulumi.Input

	ToSourceAirtableArrayOutput() SourceAirtableArrayOutput
	ToSourceAirtableArrayOutputWithContext(context.Context) SourceAirtableArrayOutput
}

type SourceAirtableArray []SourceAirtableInput

func (SourceAirtableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceAirtable)(nil)).Elem()
}

func (i SourceAirtableArray) ToSourceAirtableArrayOutput() SourceAirtableArrayOutput {
	return i.ToSourceAirtableArrayOutputWithContext(context.Background())
}

func (i SourceAirtableArray) ToSourceAirtableArrayOutputWithContext(ctx context.Context) SourceAirtableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceAirtableArrayOutput)
}

// SourceAirtableMapInput is an input type that accepts SourceAirtableMap and SourceAirtableMapOutput values.
// You can construct a concrete instance of `SourceAirtableMapInput` via:
//
//	SourceAirtableMap{ "key": SourceAirtableArgs{...} }
type SourceAirtableMapInput interface {
	pulumi.Input

	ToSourceAirtableMapOutput() SourceAirtableMapOutput
	ToSourceAirtableMapOutputWithContext(context.Context) SourceAirtableMapOutput
}

type SourceAirtableMap map[string]SourceAirtableInput

func (SourceAirtableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceAirtable)(nil)).Elem()
}

func (i SourceAirtableMap) ToSourceAirtableMapOutput() SourceAirtableMapOutput {
	return i.ToSourceAirtableMapOutputWithContext(context.Background())
}

func (i SourceAirtableMap) ToSourceAirtableMapOutputWithContext(ctx context.Context) SourceAirtableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceAirtableMapOutput)
}

type SourceAirtableOutput struct{ *pulumi.OutputState }

func (SourceAirtableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceAirtable)(nil)).Elem()
}

func (o SourceAirtableOutput) ToSourceAirtableOutput() SourceAirtableOutput {
	return o
}

func (o SourceAirtableOutput) ToSourceAirtableOutputWithContext(ctx context.Context) SourceAirtableOutput {
	return o
}

func (o SourceAirtableOutput) Configuration() SourceAirtableConfigurationOutput {
	return o.ApplyT(func(v *SourceAirtable) SourceAirtableConfigurationOutput { return v.Configuration }).(SourceAirtableConfigurationOutput)
}

func (o SourceAirtableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceAirtable) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceAirtableOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceAirtable) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceAirtableOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceAirtable) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceAirtableOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceAirtable) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceAirtableOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceAirtable) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceAirtableArrayOutput struct{ *pulumi.OutputState }

func (SourceAirtableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceAirtable)(nil)).Elem()
}

func (o SourceAirtableArrayOutput) ToSourceAirtableArrayOutput() SourceAirtableArrayOutput {
	return o
}

func (o SourceAirtableArrayOutput) ToSourceAirtableArrayOutputWithContext(ctx context.Context) SourceAirtableArrayOutput {
	return o
}

func (o SourceAirtableArrayOutput) Index(i pulumi.IntInput) SourceAirtableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceAirtable {
		return vs[0].([]*SourceAirtable)[vs[1].(int)]
	}).(SourceAirtableOutput)
}

type SourceAirtableMapOutput struct{ *pulumi.OutputState }

func (SourceAirtableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceAirtable)(nil)).Elem()
}

func (o SourceAirtableMapOutput) ToSourceAirtableMapOutput() SourceAirtableMapOutput {
	return o
}

func (o SourceAirtableMapOutput) ToSourceAirtableMapOutputWithContext(ctx context.Context) SourceAirtableMapOutput {
	return o
}

func (o SourceAirtableMapOutput) MapIndex(k pulumi.StringInput) SourceAirtableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceAirtable {
		return vs[0].(map[string]*SourceAirtable)[vs[1].(string)]
	}).(SourceAirtableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceAirtableInput)(nil)).Elem(), &SourceAirtable{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceAirtableArrayInput)(nil)).Elem(), SourceAirtableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceAirtableMapInput)(nil)).Elem(), SourceAirtableMap{})
	pulumi.RegisterOutputType(SourceAirtableOutput{})
	pulumi.RegisterOutputType(SourceAirtableArrayOutput{})
	pulumi.RegisterOutputType(SourceAirtableMapOutput{})
}
