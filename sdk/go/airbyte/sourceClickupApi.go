// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"internal"
)

// SourceClickupAPI Resource
type SourceClickupApi struct {
	pulumi.CustomResourceState

	Configuration SourceClickupApiConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput                 `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceClickupApi registers a new resource with the given unique name, arguments, and options.
func NewSourceClickupApi(ctx *pulumi.Context,
	name string, args *SourceClickupApiArgs, opts ...pulumi.ResourceOption) (*SourceClickupApi, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceClickupApi
	err := ctx.RegisterResource("airbyte:index/sourceClickupApi:SourceClickupApi", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceClickupApi gets an existing SourceClickupApi resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceClickupApi(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceClickupApiState, opts ...pulumi.ResourceOption) (*SourceClickupApi, error) {
	var resource SourceClickupApi
	err := ctx.ReadResource("airbyte:index/sourceClickupApi:SourceClickupApi", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceClickupApi resources.
type sourceClickupApiState struct {
	Configuration *SourceClickupApiConfiguration `pulumi:"configuration"`
	Name          *string                        `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceClickupApiState struct {
	Configuration SourceClickupApiConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceClickupApiState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceClickupApiState)(nil)).Elem()
}

type sourceClickupApiArgs struct {
	Configuration SourceClickupApiConfiguration `pulumi:"configuration"`
	Name          string                        `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceClickupApi resource.
type SourceClickupApiArgs struct {
	Configuration SourceClickupApiConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceClickupApiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceClickupApiArgs)(nil)).Elem()
}

type SourceClickupApiInput interface {
	pulumi.Input

	ToSourceClickupApiOutput() SourceClickupApiOutput
	ToSourceClickupApiOutputWithContext(ctx context.Context) SourceClickupApiOutput
}

func (*SourceClickupApi) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceClickupApi)(nil)).Elem()
}

func (i *SourceClickupApi) ToSourceClickupApiOutput() SourceClickupApiOutput {
	return i.ToSourceClickupApiOutputWithContext(context.Background())
}

func (i *SourceClickupApi) ToSourceClickupApiOutputWithContext(ctx context.Context) SourceClickupApiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceClickupApiOutput)
}

type SourceClickupApiOutput struct{ *pulumi.OutputState }

func (SourceClickupApiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceClickupApi)(nil)).Elem()
}

func (o SourceClickupApiOutput) ToSourceClickupApiOutput() SourceClickupApiOutput {
	return o
}

func (o SourceClickupApiOutput) ToSourceClickupApiOutputWithContext(ctx context.Context) SourceClickupApiOutput {
	return o
}

func (o SourceClickupApiOutput) Configuration() SourceClickupApiConfigurationOutput {
	return o.ApplyT(func(v *SourceClickupApi) SourceClickupApiConfigurationOutput { return v.Configuration }).(SourceClickupApiConfigurationOutput)
}

func (o SourceClickupApiOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceClickupApi) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceClickupApiOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceClickupApi) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceClickupApiOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceClickupApi) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceClickupApiOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceClickupApi) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceClickupApiOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceClickupApi) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceClickupApiInput)(nil)).Elem(), &SourceClickupApi{})
	pulumi.RegisterOutputType(SourceClickupApiOutput{})
}
