// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SourceE2eTestCloud struct {
	pulumi.CustomResourceState

	Configuration SourceE2eTestCloudConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput                   `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceE2eTestCloud registers a new resource with the given unique name, arguments, and options.
func NewSourceE2eTestCloud(ctx *pulumi.Context,
	name string, args *SourceE2eTestCloudArgs, opts ...pulumi.ResourceOption) (*SourceE2eTestCloud, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	var resource SourceE2eTestCloud
	err := ctx.RegisterResource("airbyte:index/sourceE2eTestCloud:SourceE2eTestCloud", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceE2eTestCloud gets an existing SourceE2eTestCloud resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceE2eTestCloud(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceE2eTestCloudState, opts ...pulumi.ResourceOption) (*SourceE2eTestCloud, error) {
	var resource SourceE2eTestCloud
	err := ctx.ReadResource("airbyte:index/sourceE2eTestCloud:SourceE2eTestCloud", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceE2eTestCloud resources.
type sourceE2eTestCloudState struct {
	Configuration *SourceE2eTestCloudConfiguration `pulumi:"configuration"`
	Name          *string                          `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceE2eTestCloudState struct {
	Configuration SourceE2eTestCloudConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceE2eTestCloudState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceE2eTestCloudState)(nil)).Elem()
}

type sourceE2eTestCloudArgs struct {
	Configuration SourceE2eTestCloudConfiguration `pulumi:"configuration"`
	Name          string                          `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceE2eTestCloud resource.
type SourceE2eTestCloudArgs struct {
	Configuration SourceE2eTestCloudConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceE2eTestCloudArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceE2eTestCloudArgs)(nil)).Elem()
}

type SourceE2eTestCloudInput interface {
	pulumi.Input

	ToSourceE2eTestCloudOutput() SourceE2eTestCloudOutput
	ToSourceE2eTestCloudOutputWithContext(ctx context.Context) SourceE2eTestCloudOutput
}

func (*SourceE2eTestCloud) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceE2eTestCloud)(nil)).Elem()
}

func (i *SourceE2eTestCloud) ToSourceE2eTestCloudOutput() SourceE2eTestCloudOutput {
	return i.ToSourceE2eTestCloudOutputWithContext(context.Background())
}

func (i *SourceE2eTestCloud) ToSourceE2eTestCloudOutputWithContext(ctx context.Context) SourceE2eTestCloudOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceE2eTestCloudOutput)
}

type SourceE2eTestCloudOutput struct{ *pulumi.OutputState }

func (SourceE2eTestCloudOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceE2eTestCloud)(nil)).Elem()
}

func (o SourceE2eTestCloudOutput) ToSourceE2eTestCloudOutput() SourceE2eTestCloudOutput {
	return o
}

func (o SourceE2eTestCloudOutput) ToSourceE2eTestCloudOutputWithContext(ctx context.Context) SourceE2eTestCloudOutput {
	return o
}

func (o SourceE2eTestCloudOutput) Configuration() SourceE2eTestCloudConfigurationOutput {
	return o.ApplyT(func(v *SourceE2eTestCloud) SourceE2eTestCloudConfigurationOutput { return v.Configuration }).(SourceE2eTestCloudConfigurationOutput)
}

func (o SourceE2eTestCloudOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceE2eTestCloud) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceE2eTestCloudOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceE2eTestCloud) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceE2eTestCloudOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceE2eTestCloud) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceE2eTestCloudOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceE2eTestCloud) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceE2eTestCloudOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceE2eTestCloud) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceE2eTestCloudInput)(nil)).Elem(), &SourceE2eTestCloud{})
	pulumi.RegisterOutputType(SourceE2eTestCloudOutput{})
}
