// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DestinationVertica struct {
	pulumi.CustomResourceState

	Configuration   DestinationVerticaConfigurationOutput `pulumi:"configuration"`
	DestinationId   pulumi.StringOutput                   `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput                   `pulumi:"destinationType"`
	Name            pulumi.StringOutput                   `pulumi:"name"`
	WorkspaceId     pulumi.StringOutput                   `pulumi:"workspaceId"`
}

// NewDestinationVertica registers a new resource with the given unique name, arguments, and options.
func NewDestinationVertica(ctx *pulumi.Context,
	name string, args *DestinationVerticaArgs, opts ...pulumi.ResourceOption) (*DestinationVertica, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	var resource DestinationVertica
	err := ctx.RegisterResource("airbyte:index/destinationVertica:DestinationVertica", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationVertica gets an existing DestinationVertica resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationVertica(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationVerticaState, opts ...pulumi.ResourceOption) (*DestinationVertica, error) {
	var resource DestinationVertica
	err := ctx.ReadResource("airbyte:index/destinationVertica:DestinationVertica", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationVertica resources.
type destinationVerticaState struct {
	Configuration   *DestinationVerticaConfiguration `pulumi:"configuration"`
	DestinationId   *string                          `pulumi:"destinationId"`
	DestinationType *string                          `pulumi:"destinationType"`
	Name            *string                          `pulumi:"name"`
	WorkspaceId     *string                          `pulumi:"workspaceId"`
}

type DestinationVerticaState struct {
	Configuration   DestinationVerticaConfigurationPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	WorkspaceId     pulumi.StringPtrInput
}

func (DestinationVerticaState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationVerticaState)(nil)).Elem()
}

type destinationVerticaArgs struct {
	Configuration DestinationVerticaConfiguration `pulumi:"configuration"`
	Name          string                          `pulumi:"name"`
	WorkspaceId   string                          `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationVertica resource.
type DestinationVerticaArgs struct {
	Configuration DestinationVerticaConfigurationInput
	Name          pulumi.StringInput
	WorkspaceId   pulumi.StringInput
}

func (DestinationVerticaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationVerticaArgs)(nil)).Elem()
}

type DestinationVerticaInput interface {
	pulumi.Input

	ToDestinationVerticaOutput() DestinationVerticaOutput
	ToDestinationVerticaOutputWithContext(ctx context.Context) DestinationVerticaOutput
}

func (*DestinationVertica) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationVertica)(nil)).Elem()
}

func (i *DestinationVertica) ToDestinationVerticaOutput() DestinationVerticaOutput {
	return i.ToDestinationVerticaOutputWithContext(context.Background())
}

func (i *DestinationVertica) ToDestinationVerticaOutputWithContext(ctx context.Context) DestinationVerticaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationVerticaOutput)
}

type DestinationVerticaOutput struct{ *pulumi.OutputState }

func (DestinationVerticaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationVertica)(nil)).Elem()
}

func (o DestinationVerticaOutput) ToDestinationVerticaOutput() DestinationVerticaOutput {
	return o
}

func (o DestinationVerticaOutput) ToDestinationVerticaOutputWithContext(ctx context.Context) DestinationVerticaOutput {
	return o
}

func (o DestinationVerticaOutput) Configuration() DestinationVerticaConfigurationOutput {
	return o.ApplyT(func(v *DestinationVertica) DestinationVerticaConfigurationOutput { return v.Configuration }).(DestinationVerticaConfigurationOutput)
}

func (o DestinationVerticaOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationVertica) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationVerticaOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationVertica) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

func (o DestinationVerticaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationVertica) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationVerticaOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationVertica) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationVerticaInput)(nil)).Elem(), &DestinationVertica{})
	pulumi.RegisterOutputType(DestinationVerticaOutput{})
}
