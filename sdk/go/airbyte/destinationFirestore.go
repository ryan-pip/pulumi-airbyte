// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-airbyte/sdk/go/airbyte/internal"
)

// DestinationFirestore Resource
type DestinationFirestore struct {
	pulumi.CustomResourceState

	Configuration   DestinationFirestoreConfigurationOutput `pulumi:"configuration"`
	DestinationId   pulumi.StringOutput                     `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput                     `pulumi:"destinationType"`
	Name            pulumi.StringOutput                     `pulumi:"name"`
	WorkspaceId     pulumi.StringOutput                     `pulumi:"workspaceId"`
}

// NewDestinationFirestore registers a new resource with the given unique name, arguments, and options.
func NewDestinationFirestore(ctx *pulumi.Context,
	name string, args *DestinationFirestoreArgs, opts ...pulumi.ResourceOption) (*DestinationFirestore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DestinationFirestore
	err := ctx.RegisterResource("airbyte:index/destinationFirestore:DestinationFirestore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationFirestore gets an existing DestinationFirestore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationFirestore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationFirestoreState, opts ...pulumi.ResourceOption) (*DestinationFirestore, error) {
	var resource DestinationFirestore
	err := ctx.ReadResource("airbyte:index/destinationFirestore:DestinationFirestore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationFirestore resources.
type destinationFirestoreState struct {
	Configuration   *DestinationFirestoreConfiguration `pulumi:"configuration"`
	DestinationId   *string                            `pulumi:"destinationId"`
	DestinationType *string                            `pulumi:"destinationType"`
	Name            *string                            `pulumi:"name"`
	WorkspaceId     *string                            `pulumi:"workspaceId"`
}

type DestinationFirestoreState struct {
	Configuration   DestinationFirestoreConfigurationPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	WorkspaceId     pulumi.StringPtrInput
}

func (DestinationFirestoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationFirestoreState)(nil)).Elem()
}

type destinationFirestoreArgs struct {
	Configuration DestinationFirestoreConfiguration `pulumi:"configuration"`
	Name          string                            `pulumi:"name"`
	WorkspaceId   string                            `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationFirestore resource.
type DestinationFirestoreArgs struct {
	Configuration DestinationFirestoreConfigurationInput
	Name          pulumi.StringInput
	WorkspaceId   pulumi.StringInput
}

func (DestinationFirestoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationFirestoreArgs)(nil)).Elem()
}

type DestinationFirestoreInput interface {
	pulumi.Input

	ToDestinationFirestoreOutput() DestinationFirestoreOutput
	ToDestinationFirestoreOutputWithContext(ctx context.Context) DestinationFirestoreOutput
}

func (*DestinationFirestore) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationFirestore)(nil)).Elem()
}

func (i *DestinationFirestore) ToDestinationFirestoreOutput() DestinationFirestoreOutput {
	return i.ToDestinationFirestoreOutputWithContext(context.Background())
}

func (i *DestinationFirestore) ToDestinationFirestoreOutputWithContext(ctx context.Context) DestinationFirestoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationFirestoreOutput)
}

// DestinationFirestoreArrayInput is an input type that accepts DestinationFirestoreArray and DestinationFirestoreArrayOutput values.
// You can construct a concrete instance of `DestinationFirestoreArrayInput` via:
//
//	DestinationFirestoreArray{ DestinationFirestoreArgs{...} }
type DestinationFirestoreArrayInput interface {
	pulumi.Input

	ToDestinationFirestoreArrayOutput() DestinationFirestoreArrayOutput
	ToDestinationFirestoreArrayOutputWithContext(context.Context) DestinationFirestoreArrayOutput
}

type DestinationFirestoreArray []DestinationFirestoreInput

func (DestinationFirestoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationFirestore)(nil)).Elem()
}

func (i DestinationFirestoreArray) ToDestinationFirestoreArrayOutput() DestinationFirestoreArrayOutput {
	return i.ToDestinationFirestoreArrayOutputWithContext(context.Background())
}

func (i DestinationFirestoreArray) ToDestinationFirestoreArrayOutputWithContext(ctx context.Context) DestinationFirestoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationFirestoreArrayOutput)
}

// DestinationFirestoreMapInput is an input type that accepts DestinationFirestoreMap and DestinationFirestoreMapOutput values.
// You can construct a concrete instance of `DestinationFirestoreMapInput` via:
//
//	DestinationFirestoreMap{ "key": DestinationFirestoreArgs{...} }
type DestinationFirestoreMapInput interface {
	pulumi.Input

	ToDestinationFirestoreMapOutput() DestinationFirestoreMapOutput
	ToDestinationFirestoreMapOutputWithContext(context.Context) DestinationFirestoreMapOutput
}

type DestinationFirestoreMap map[string]DestinationFirestoreInput

func (DestinationFirestoreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationFirestore)(nil)).Elem()
}

func (i DestinationFirestoreMap) ToDestinationFirestoreMapOutput() DestinationFirestoreMapOutput {
	return i.ToDestinationFirestoreMapOutputWithContext(context.Background())
}

func (i DestinationFirestoreMap) ToDestinationFirestoreMapOutputWithContext(ctx context.Context) DestinationFirestoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationFirestoreMapOutput)
}

type DestinationFirestoreOutput struct{ *pulumi.OutputState }

func (DestinationFirestoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationFirestore)(nil)).Elem()
}

func (o DestinationFirestoreOutput) ToDestinationFirestoreOutput() DestinationFirestoreOutput {
	return o
}

func (o DestinationFirestoreOutput) ToDestinationFirestoreOutputWithContext(ctx context.Context) DestinationFirestoreOutput {
	return o
}

func (o DestinationFirestoreOutput) Configuration() DestinationFirestoreConfigurationOutput {
	return o.ApplyT(func(v *DestinationFirestore) DestinationFirestoreConfigurationOutput { return v.Configuration }).(DestinationFirestoreConfigurationOutput)
}

func (o DestinationFirestoreOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationFirestore) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationFirestoreOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationFirestore) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

func (o DestinationFirestoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationFirestore) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationFirestoreOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationFirestore) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type DestinationFirestoreArrayOutput struct{ *pulumi.OutputState }

func (DestinationFirestoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationFirestore)(nil)).Elem()
}

func (o DestinationFirestoreArrayOutput) ToDestinationFirestoreArrayOutput() DestinationFirestoreArrayOutput {
	return o
}

func (o DestinationFirestoreArrayOutput) ToDestinationFirestoreArrayOutputWithContext(ctx context.Context) DestinationFirestoreArrayOutput {
	return o
}

func (o DestinationFirestoreArrayOutput) Index(i pulumi.IntInput) DestinationFirestoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DestinationFirestore {
		return vs[0].([]*DestinationFirestore)[vs[1].(int)]
	}).(DestinationFirestoreOutput)
}

type DestinationFirestoreMapOutput struct{ *pulumi.OutputState }

func (DestinationFirestoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationFirestore)(nil)).Elem()
}

func (o DestinationFirestoreMapOutput) ToDestinationFirestoreMapOutput() DestinationFirestoreMapOutput {
	return o
}

func (o DestinationFirestoreMapOutput) ToDestinationFirestoreMapOutputWithContext(ctx context.Context) DestinationFirestoreMapOutput {
	return o
}

func (o DestinationFirestoreMapOutput) MapIndex(k pulumi.StringInput) DestinationFirestoreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DestinationFirestore {
		return vs[0].(map[string]*DestinationFirestore)[vs[1].(string)]
	}).(DestinationFirestoreOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationFirestoreInput)(nil)).Elem(), &DestinationFirestore{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationFirestoreArrayInput)(nil)).Elem(), DestinationFirestoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationFirestoreMapInput)(nil)).Elem(), DestinationFirestoreMap{})
	pulumi.RegisterOutputType(DestinationFirestoreOutput{})
	pulumi.RegisterOutputType(DestinationFirestoreArrayOutput{})
	pulumi.RegisterOutputType(DestinationFirestoreMapOutput{})
}
