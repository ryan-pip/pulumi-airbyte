// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// DestinationDynamodb Resource
type DestinationDynamodb struct {
	pulumi.CustomResourceState

	Configuration   DestinationDynamodbConfigurationOutput `pulumi:"configuration"`
	DestinationId   pulumi.StringOutput                    `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput                    `pulumi:"destinationType"`
	Name            pulumi.StringOutput                    `pulumi:"name"`
	WorkspaceId     pulumi.StringOutput                    `pulumi:"workspaceId"`
}

// NewDestinationDynamodb registers a new resource with the given unique name, arguments, and options.
func NewDestinationDynamodb(ctx *pulumi.Context,
	name string, args *DestinationDynamodbArgs, opts ...pulumi.ResourceOption) (*DestinationDynamodb, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DestinationDynamodb
	err := ctx.RegisterResource("airbyte:index/destinationDynamodb:DestinationDynamodb", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationDynamodb gets an existing DestinationDynamodb resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationDynamodb(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationDynamodbState, opts ...pulumi.ResourceOption) (*DestinationDynamodb, error) {
	var resource DestinationDynamodb
	err := ctx.ReadResource("airbyte:index/destinationDynamodb:DestinationDynamodb", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationDynamodb resources.
type destinationDynamodbState struct {
	Configuration   *DestinationDynamodbConfiguration `pulumi:"configuration"`
	DestinationId   *string                           `pulumi:"destinationId"`
	DestinationType *string                           `pulumi:"destinationType"`
	Name            *string                           `pulumi:"name"`
	WorkspaceId     *string                           `pulumi:"workspaceId"`
}

type DestinationDynamodbState struct {
	Configuration   DestinationDynamodbConfigurationPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	WorkspaceId     pulumi.StringPtrInput
}

func (DestinationDynamodbState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationDynamodbState)(nil)).Elem()
}

type destinationDynamodbArgs struct {
	Configuration DestinationDynamodbConfiguration `pulumi:"configuration"`
	Name          string                           `pulumi:"name"`
	WorkspaceId   string                           `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationDynamodb resource.
type DestinationDynamodbArgs struct {
	Configuration DestinationDynamodbConfigurationInput
	Name          pulumi.StringInput
	WorkspaceId   pulumi.StringInput
}

func (DestinationDynamodbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationDynamodbArgs)(nil)).Elem()
}

type DestinationDynamodbInput interface {
	pulumi.Input

	ToDestinationDynamodbOutput() DestinationDynamodbOutput
	ToDestinationDynamodbOutputWithContext(ctx context.Context) DestinationDynamodbOutput
}

func (*DestinationDynamodb) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationDynamodb)(nil)).Elem()
}

func (i *DestinationDynamodb) ToDestinationDynamodbOutput() DestinationDynamodbOutput {
	return i.ToDestinationDynamodbOutputWithContext(context.Background())
}

func (i *DestinationDynamodb) ToDestinationDynamodbOutputWithContext(ctx context.Context) DestinationDynamodbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationDynamodbOutput)
}

// DestinationDynamodbArrayInput is an input type that accepts DestinationDynamodbArray and DestinationDynamodbArrayOutput values.
// You can construct a concrete instance of `DestinationDynamodbArrayInput` via:
//
//	DestinationDynamodbArray{ DestinationDynamodbArgs{...} }
type DestinationDynamodbArrayInput interface {
	pulumi.Input

	ToDestinationDynamodbArrayOutput() DestinationDynamodbArrayOutput
	ToDestinationDynamodbArrayOutputWithContext(context.Context) DestinationDynamodbArrayOutput
}

type DestinationDynamodbArray []DestinationDynamodbInput

func (DestinationDynamodbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationDynamodb)(nil)).Elem()
}

func (i DestinationDynamodbArray) ToDestinationDynamodbArrayOutput() DestinationDynamodbArrayOutput {
	return i.ToDestinationDynamodbArrayOutputWithContext(context.Background())
}

func (i DestinationDynamodbArray) ToDestinationDynamodbArrayOutputWithContext(ctx context.Context) DestinationDynamodbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationDynamodbArrayOutput)
}

// DestinationDynamodbMapInput is an input type that accepts DestinationDynamodbMap and DestinationDynamodbMapOutput values.
// You can construct a concrete instance of `DestinationDynamodbMapInput` via:
//
//	DestinationDynamodbMap{ "key": DestinationDynamodbArgs{...} }
type DestinationDynamodbMapInput interface {
	pulumi.Input

	ToDestinationDynamodbMapOutput() DestinationDynamodbMapOutput
	ToDestinationDynamodbMapOutputWithContext(context.Context) DestinationDynamodbMapOutput
}

type DestinationDynamodbMap map[string]DestinationDynamodbInput

func (DestinationDynamodbMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationDynamodb)(nil)).Elem()
}

func (i DestinationDynamodbMap) ToDestinationDynamodbMapOutput() DestinationDynamodbMapOutput {
	return i.ToDestinationDynamodbMapOutputWithContext(context.Background())
}

func (i DestinationDynamodbMap) ToDestinationDynamodbMapOutputWithContext(ctx context.Context) DestinationDynamodbMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationDynamodbMapOutput)
}

type DestinationDynamodbOutput struct{ *pulumi.OutputState }

func (DestinationDynamodbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationDynamodb)(nil)).Elem()
}

func (o DestinationDynamodbOutput) ToDestinationDynamodbOutput() DestinationDynamodbOutput {
	return o
}

func (o DestinationDynamodbOutput) ToDestinationDynamodbOutputWithContext(ctx context.Context) DestinationDynamodbOutput {
	return o
}

func (o DestinationDynamodbOutput) Configuration() DestinationDynamodbConfigurationOutput {
	return o.ApplyT(func(v *DestinationDynamodb) DestinationDynamodbConfigurationOutput { return v.Configuration }).(DestinationDynamodbConfigurationOutput)
}

func (o DestinationDynamodbOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationDynamodb) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationDynamodbOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationDynamodb) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

func (o DestinationDynamodbOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationDynamodb) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationDynamodbOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationDynamodb) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type DestinationDynamodbArrayOutput struct{ *pulumi.OutputState }

func (DestinationDynamodbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationDynamodb)(nil)).Elem()
}

func (o DestinationDynamodbArrayOutput) ToDestinationDynamodbArrayOutput() DestinationDynamodbArrayOutput {
	return o
}

func (o DestinationDynamodbArrayOutput) ToDestinationDynamodbArrayOutputWithContext(ctx context.Context) DestinationDynamodbArrayOutput {
	return o
}

func (o DestinationDynamodbArrayOutput) Index(i pulumi.IntInput) DestinationDynamodbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DestinationDynamodb {
		return vs[0].([]*DestinationDynamodb)[vs[1].(int)]
	}).(DestinationDynamodbOutput)
}

type DestinationDynamodbMapOutput struct{ *pulumi.OutputState }

func (DestinationDynamodbMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationDynamodb)(nil)).Elem()
}

func (o DestinationDynamodbMapOutput) ToDestinationDynamodbMapOutput() DestinationDynamodbMapOutput {
	return o
}

func (o DestinationDynamodbMapOutput) ToDestinationDynamodbMapOutputWithContext(ctx context.Context) DestinationDynamodbMapOutput {
	return o
}

func (o DestinationDynamodbMapOutput) MapIndex(k pulumi.StringInput) DestinationDynamodbOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DestinationDynamodb {
		return vs[0].(map[string]*DestinationDynamodb)[vs[1].(string)]
	}).(DestinationDynamodbOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationDynamodbInput)(nil)).Elem(), &DestinationDynamodb{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationDynamodbArrayInput)(nil)).Elem(), DestinationDynamodbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationDynamodbMapInput)(nil)).Elem(), DestinationDynamodbMap{})
	pulumi.RegisterOutputType(DestinationDynamodbOutput{})
	pulumi.RegisterOutputType(DestinationDynamodbArrayOutput{})
	pulumi.RegisterOutputType(DestinationDynamodbMapOutput{})
}
