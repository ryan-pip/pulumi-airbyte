// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SourceOmnisend struct {
	pulumi.CustomResourceState

	Configuration SourceOmnisendConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput               `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceOmnisend registers a new resource with the given unique name, arguments, and options.
func NewSourceOmnisend(ctx *pulumi.Context,
	name string, args *SourceOmnisendArgs, opts ...pulumi.ResourceOption) (*SourceOmnisend, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	var resource SourceOmnisend
	err := ctx.RegisterResource("airbyte:index/sourceOmnisend:SourceOmnisend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceOmnisend gets an existing SourceOmnisend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceOmnisend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceOmnisendState, opts ...pulumi.ResourceOption) (*SourceOmnisend, error) {
	var resource SourceOmnisend
	err := ctx.ReadResource("airbyte:index/sourceOmnisend:SourceOmnisend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceOmnisend resources.
type sourceOmnisendState struct {
	Configuration *SourceOmnisendConfiguration `pulumi:"configuration"`
	Name          *string                      `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceOmnisendState struct {
	Configuration SourceOmnisendConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceOmnisendState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceOmnisendState)(nil)).Elem()
}

type sourceOmnisendArgs struct {
	Configuration SourceOmnisendConfiguration `pulumi:"configuration"`
	Name          string                      `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceOmnisend resource.
type SourceOmnisendArgs struct {
	Configuration SourceOmnisendConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceOmnisendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceOmnisendArgs)(nil)).Elem()
}

type SourceOmnisendInput interface {
	pulumi.Input

	ToSourceOmnisendOutput() SourceOmnisendOutput
	ToSourceOmnisendOutputWithContext(ctx context.Context) SourceOmnisendOutput
}

func (*SourceOmnisend) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceOmnisend)(nil)).Elem()
}

func (i *SourceOmnisend) ToSourceOmnisendOutput() SourceOmnisendOutput {
	return i.ToSourceOmnisendOutputWithContext(context.Background())
}

func (i *SourceOmnisend) ToSourceOmnisendOutputWithContext(ctx context.Context) SourceOmnisendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOmnisendOutput)
}

type SourceOmnisendOutput struct{ *pulumi.OutputState }

func (SourceOmnisendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceOmnisend)(nil)).Elem()
}

func (o SourceOmnisendOutput) ToSourceOmnisendOutput() SourceOmnisendOutput {
	return o
}

func (o SourceOmnisendOutput) ToSourceOmnisendOutputWithContext(ctx context.Context) SourceOmnisendOutput {
	return o
}

func (o SourceOmnisendOutput) Configuration() SourceOmnisendConfigurationOutput {
	return o.ApplyT(func(v *SourceOmnisend) SourceOmnisendConfigurationOutput { return v.Configuration }).(SourceOmnisendConfigurationOutput)
}

func (o SourceOmnisendOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceOmnisend) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceOmnisendOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceOmnisend) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceOmnisendOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceOmnisend) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceOmnisendOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceOmnisend) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceOmnisendOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceOmnisend) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceOmnisendInput)(nil)).Elem(), &SourceOmnisend{})
	pulumi.RegisterOutputType(SourceOmnisendOutput{})
}
