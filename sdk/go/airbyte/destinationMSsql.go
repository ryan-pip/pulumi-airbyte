// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DestinationMSsql struct {
	pulumi.CustomResourceState

	Configuration   DestinationMSsqlConfigurationOutput `pulumi:"configuration"`
	DestinationId   pulumi.StringOutput                 `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput                 `pulumi:"destinationType"`
	Name            pulumi.StringOutput                 `pulumi:"name"`
	WorkspaceId     pulumi.StringOutput                 `pulumi:"workspaceId"`
}

// NewDestinationMSsql registers a new resource with the given unique name, arguments, and options.
func NewDestinationMSsql(ctx *pulumi.Context,
	name string, args *DestinationMSsqlArgs, opts ...pulumi.ResourceOption) (*DestinationMSsql, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	var resource DestinationMSsql
	err := ctx.RegisterResource("airbyte:index/destinationMSsql:DestinationMSsql", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationMSsql gets an existing DestinationMSsql resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationMSsql(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationMSsqlState, opts ...pulumi.ResourceOption) (*DestinationMSsql, error) {
	var resource DestinationMSsql
	err := ctx.ReadResource("airbyte:index/destinationMSsql:DestinationMSsql", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationMSsql resources.
type destinationMSsqlState struct {
	Configuration   *DestinationMSsqlConfiguration `pulumi:"configuration"`
	DestinationId   *string                        `pulumi:"destinationId"`
	DestinationType *string                        `pulumi:"destinationType"`
	Name            *string                        `pulumi:"name"`
	WorkspaceId     *string                        `pulumi:"workspaceId"`
}

type DestinationMSsqlState struct {
	Configuration   DestinationMSsqlConfigurationPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	WorkspaceId     pulumi.StringPtrInput
}

func (DestinationMSsqlState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationMSsqlState)(nil)).Elem()
}

type destinationMSsqlArgs struct {
	Configuration DestinationMSsqlConfiguration `pulumi:"configuration"`
	Name          string                        `pulumi:"name"`
	WorkspaceId   string                        `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationMSsql resource.
type DestinationMSsqlArgs struct {
	Configuration DestinationMSsqlConfigurationInput
	Name          pulumi.StringInput
	WorkspaceId   pulumi.StringInput
}

func (DestinationMSsqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationMSsqlArgs)(nil)).Elem()
}

type DestinationMSsqlInput interface {
	pulumi.Input

	ToDestinationMSsqlOutput() DestinationMSsqlOutput
	ToDestinationMSsqlOutputWithContext(ctx context.Context) DestinationMSsqlOutput
}

func (*DestinationMSsql) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationMSsql)(nil)).Elem()
}

func (i *DestinationMSsql) ToDestinationMSsqlOutput() DestinationMSsqlOutput {
	return i.ToDestinationMSsqlOutputWithContext(context.Background())
}

func (i *DestinationMSsql) ToDestinationMSsqlOutputWithContext(ctx context.Context) DestinationMSsqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationMSsqlOutput)
}

type DestinationMSsqlOutput struct{ *pulumi.OutputState }

func (DestinationMSsqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationMSsql)(nil)).Elem()
}

func (o DestinationMSsqlOutput) ToDestinationMSsqlOutput() DestinationMSsqlOutput {
	return o
}

func (o DestinationMSsqlOutput) ToDestinationMSsqlOutputWithContext(ctx context.Context) DestinationMSsqlOutput {
	return o
}

func (o DestinationMSsqlOutput) Configuration() DestinationMSsqlConfigurationOutput {
	return o.ApplyT(func(v *DestinationMSsql) DestinationMSsqlConfigurationOutput { return v.Configuration }).(DestinationMSsqlConfigurationOutput)
}

func (o DestinationMSsqlOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationMSsql) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationMSsqlOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationMSsql) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

func (o DestinationMSsqlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationMSsql) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationMSsqlOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationMSsql) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationMSsqlInput)(nil)).Elem(), &DestinationMSsql{})
	pulumi.RegisterOutputType(DestinationMSsqlOutput{})
}
