// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-airbyte/sdk/go/airbyte/internal"
)

// SourceOrb Resource
type SourceOrb struct {
	pulumi.CustomResourceState

	Configuration SourceOrbConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput          `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceOrb registers a new resource with the given unique name, arguments, and options.
func NewSourceOrb(ctx *pulumi.Context,
	name string, args *SourceOrbArgs, opts ...pulumi.ResourceOption) (*SourceOrb, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceOrb
	err := ctx.RegisterResource("airbyte:index/sourceOrb:SourceOrb", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceOrb gets an existing SourceOrb resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceOrb(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceOrbState, opts ...pulumi.ResourceOption) (*SourceOrb, error) {
	var resource SourceOrb
	err := ctx.ReadResource("airbyte:index/sourceOrb:SourceOrb", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceOrb resources.
type sourceOrbState struct {
	Configuration *SourceOrbConfiguration `pulumi:"configuration"`
	Name          *string                 `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceOrbState struct {
	Configuration SourceOrbConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceOrbState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceOrbState)(nil)).Elem()
}

type sourceOrbArgs struct {
	Configuration SourceOrbConfiguration `pulumi:"configuration"`
	Name          string                 `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceOrb resource.
type SourceOrbArgs struct {
	Configuration SourceOrbConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceOrbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceOrbArgs)(nil)).Elem()
}

type SourceOrbInput interface {
	pulumi.Input

	ToSourceOrbOutput() SourceOrbOutput
	ToSourceOrbOutputWithContext(ctx context.Context) SourceOrbOutput
}

func (*SourceOrb) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceOrb)(nil)).Elem()
}

func (i *SourceOrb) ToSourceOrbOutput() SourceOrbOutput {
	return i.ToSourceOrbOutputWithContext(context.Background())
}

func (i *SourceOrb) ToSourceOrbOutputWithContext(ctx context.Context) SourceOrbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOrbOutput)
}

// SourceOrbArrayInput is an input type that accepts SourceOrbArray and SourceOrbArrayOutput values.
// You can construct a concrete instance of `SourceOrbArrayInput` via:
//
//	SourceOrbArray{ SourceOrbArgs{...} }
type SourceOrbArrayInput interface {
	pulumi.Input

	ToSourceOrbArrayOutput() SourceOrbArrayOutput
	ToSourceOrbArrayOutputWithContext(context.Context) SourceOrbArrayOutput
}

type SourceOrbArray []SourceOrbInput

func (SourceOrbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceOrb)(nil)).Elem()
}

func (i SourceOrbArray) ToSourceOrbArrayOutput() SourceOrbArrayOutput {
	return i.ToSourceOrbArrayOutputWithContext(context.Background())
}

func (i SourceOrbArray) ToSourceOrbArrayOutputWithContext(ctx context.Context) SourceOrbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOrbArrayOutput)
}

// SourceOrbMapInput is an input type that accepts SourceOrbMap and SourceOrbMapOutput values.
// You can construct a concrete instance of `SourceOrbMapInput` via:
//
//	SourceOrbMap{ "key": SourceOrbArgs{...} }
type SourceOrbMapInput interface {
	pulumi.Input

	ToSourceOrbMapOutput() SourceOrbMapOutput
	ToSourceOrbMapOutputWithContext(context.Context) SourceOrbMapOutput
}

type SourceOrbMap map[string]SourceOrbInput

func (SourceOrbMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceOrb)(nil)).Elem()
}

func (i SourceOrbMap) ToSourceOrbMapOutput() SourceOrbMapOutput {
	return i.ToSourceOrbMapOutputWithContext(context.Background())
}

func (i SourceOrbMap) ToSourceOrbMapOutputWithContext(ctx context.Context) SourceOrbMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOrbMapOutput)
}

type SourceOrbOutput struct{ *pulumi.OutputState }

func (SourceOrbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceOrb)(nil)).Elem()
}

func (o SourceOrbOutput) ToSourceOrbOutput() SourceOrbOutput {
	return o
}

func (o SourceOrbOutput) ToSourceOrbOutputWithContext(ctx context.Context) SourceOrbOutput {
	return o
}

func (o SourceOrbOutput) Configuration() SourceOrbConfigurationOutput {
	return o.ApplyT(func(v *SourceOrb) SourceOrbConfigurationOutput { return v.Configuration }).(SourceOrbConfigurationOutput)
}

func (o SourceOrbOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceOrb) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceOrbOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceOrb) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceOrbOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceOrb) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceOrbOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceOrb) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceOrbOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceOrb) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceOrbArrayOutput struct{ *pulumi.OutputState }

func (SourceOrbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceOrb)(nil)).Elem()
}

func (o SourceOrbArrayOutput) ToSourceOrbArrayOutput() SourceOrbArrayOutput {
	return o
}

func (o SourceOrbArrayOutput) ToSourceOrbArrayOutputWithContext(ctx context.Context) SourceOrbArrayOutput {
	return o
}

func (o SourceOrbArrayOutput) Index(i pulumi.IntInput) SourceOrbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceOrb {
		return vs[0].([]*SourceOrb)[vs[1].(int)]
	}).(SourceOrbOutput)
}

type SourceOrbMapOutput struct{ *pulumi.OutputState }

func (SourceOrbMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceOrb)(nil)).Elem()
}

func (o SourceOrbMapOutput) ToSourceOrbMapOutput() SourceOrbMapOutput {
	return o
}

func (o SourceOrbMapOutput) ToSourceOrbMapOutputWithContext(ctx context.Context) SourceOrbMapOutput {
	return o
}

func (o SourceOrbMapOutput) MapIndex(k pulumi.StringInput) SourceOrbOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceOrb {
		return vs[0].(map[string]*SourceOrb)[vs[1].(string)]
	}).(SourceOrbOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceOrbInput)(nil)).Elem(), &SourceOrb{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceOrbArrayInput)(nil)).Elem(), SourceOrbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceOrbMapInput)(nil)).Elem(), SourceOrbMap{})
	pulumi.RegisterOutputType(SourceOrbOutput{})
	pulumi.RegisterOutputType(SourceOrbArrayOutput{})
	pulumi.RegisterOutputType(SourceOrbMapOutput{})
}
