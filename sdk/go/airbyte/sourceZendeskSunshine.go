// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SourceZendeskSunshine Resource
type SourceZendeskSunshine struct {
	pulumi.CustomResourceState

	Configuration SourceZendeskSunshineConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput                      `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceZendeskSunshine registers a new resource with the given unique name, arguments, and options.
func NewSourceZendeskSunshine(ctx *pulumi.Context,
	name string, args *SourceZendeskSunshineArgs, opts ...pulumi.ResourceOption) (*SourceZendeskSunshine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceZendeskSunshine
	err := ctx.RegisterResource("airbyte:index/sourceZendeskSunshine:SourceZendeskSunshine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceZendeskSunshine gets an existing SourceZendeskSunshine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceZendeskSunshine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceZendeskSunshineState, opts ...pulumi.ResourceOption) (*SourceZendeskSunshine, error) {
	var resource SourceZendeskSunshine
	err := ctx.ReadResource("airbyte:index/sourceZendeskSunshine:SourceZendeskSunshine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceZendeskSunshine resources.
type sourceZendeskSunshineState struct {
	Configuration *SourceZendeskSunshineConfiguration `pulumi:"configuration"`
	Name          *string                             `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceZendeskSunshineState struct {
	Configuration SourceZendeskSunshineConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceZendeskSunshineState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceZendeskSunshineState)(nil)).Elem()
}

type sourceZendeskSunshineArgs struct {
	Configuration SourceZendeskSunshineConfiguration `pulumi:"configuration"`
	Name          string                             `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceZendeskSunshine resource.
type SourceZendeskSunshineArgs struct {
	Configuration SourceZendeskSunshineConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceZendeskSunshineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceZendeskSunshineArgs)(nil)).Elem()
}

type SourceZendeskSunshineInput interface {
	pulumi.Input

	ToSourceZendeskSunshineOutput() SourceZendeskSunshineOutput
	ToSourceZendeskSunshineOutputWithContext(ctx context.Context) SourceZendeskSunshineOutput
}

func (*SourceZendeskSunshine) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceZendeskSunshine)(nil)).Elem()
}

func (i *SourceZendeskSunshine) ToSourceZendeskSunshineOutput() SourceZendeskSunshineOutput {
	return i.ToSourceZendeskSunshineOutputWithContext(context.Background())
}

func (i *SourceZendeskSunshine) ToSourceZendeskSunshineOutputWithContext(ctx context.Context) SourceZendeskSunshineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceZendeskSunshineOutput)
}

// SourceZendeskSunshineArrayInput is an input type that accepts SourceZendeskSunshineArray and SourceZendeskSunshineArrayOutput values.
// You can construct a concrete instance of `SourceZendeskSunshineArrayInput` via:
//
//	SourceZendeskSunshineArray{ SourceZendeskSunshineArgs{...} }
type SourceZendeskSunshineArrayInput interface {
	pulumi.Input

	ToSourceZendeskSunshineArrayOutput() SourceZendeskSunshineArrayOutput
	ToSourceZendeskSunshineArrayOutputWithContext(context.Context) SourceZendeskSunshineArrayOutput
}

type SourceZendeskSunshineArray []SourceZendeskSunshineInput

func (SourceZendeskSunshineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceZendeskSunshine)(nil)).Elem()
}

func (i SourceZendeskSunshineArray) ToSourceZendeskSunshineArrayOutput() SourceZendeskSunshineArrayOutput {
	return i.ToSourceZendeskSunshineArrayOutputWithContext(context.Background())
}

func (i SourceZendeskSunshineArray) ToSourceZendeskSunshineArrayOutputWithContext(ctx context.Context) SourceZendeskSunshineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceZendeskSunshineArrayOutput)
}

// SourceZendeskSunshineMapInput is an input type that accepts SourceZendeskSunshineMap and SourceZendeskSunshineMapOutput values.
// You can construct a concrete instance of `SourceZendeskSunshineMapInput` via:
//
//	SourceZendeskSunshineMap{ "key": SourceZendeskSunshineArgs{...} }
type SourceZendeskSunshineMapInput interface {
	pulumi.Input

	ToSourceZendeskSunshineMapOutput() SourceZendeskSunshineMapOutput
	ToSourceZendeskSunshineMapOutputWithContext(context.Context) SourceZendeskSunshineMapOutput
}

type SourceZendeskSunshineMap map[string]SourceZendeskSunshineInput

func (SourceZendeskSunshineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceZendeskSunshine)(nil)).Elem()
}

func (i SourceZendeskSunshineMap) ToSourceZendeskSunshineMapOutput() SourceZendeskSunshineMapOutput {
	return i.ToSourceZendeskSunshineMapOutputWithContext(context.Background())
}

func (i SourceZendeskSunshineMap) ToSourceZendeskSunshineMapOutputWithContext(ctx context.Context) SourceZendeskSunshineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceZendeskSunshineMapOutput)
}

type SourceZendeskSunshineOutput struct{ *pulumi.OutputState }

func (SourceZendeskSunshineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceZendeskSunshine)(nil)).Elem()
}

func (o SourceZendeskSunshineOutput) ToSourceZendeskSunshineOutput() SourceZendeskSunshineOutput {
	return o
}

func (o SourceZendeskSunshineOutput) ToSourceZendeskSunshineOutputWithContext(ctx context.Context) SourceZendeskSunshineOutput {
	return o
}

func (o SourceZendeskSunshineOutput) Configuration() SourceZendeskSunshineConfigurationOutput {
	return o.ApplyT(func(v *SourceZendeskSunshine) SourceZendeskSunshineConfigurationOutput { return v.Configuration }).(SourceZendeskSunshineConfigurationOutput)
}

func (o SourceZendeskSunshineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceZendeskSunshine) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceZendeskSunshineOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceZendeskSunshine) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceZendeskSunshineOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceZendeskSunshine) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceZendeskSunshineOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceZendeskSunshine) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceZendeskSunshineOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceZendeskSunshine) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceZendeskSunshineArrayOutput struct{ *pulumi.OutputState }

func (SourceZendeskSunshineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceZendeskSunshine)(nil)).Elem()
}

func (o SourceZendeskSunshineArrayOutput) ToSourceZendeskSunshineArrayOutput() SourceZendeskSunshineArrayOutput {
	return o
}

func (o SourceZendeskSunshineArrayOutput) ToSourceZendeskSunshineArrayOutputWithContext(ctx context.Context) SourceZendeskSunshineArrayOutput {
	return o
}

func (o SourceZendeskSunshineArrayOutput) Index(i pulumi.IntInput) SourceZendeskSunshineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceZendeskSunshine {
		return vs[0].([]*SourceZendeskSunshine)[vs[1].(int)]
	}).(SourceZendeskSunshineOutput)
}

type SourceZendeskSunshineMapOutput struct{ *pulumi.OutputState }

func (SourceZendeskSunshineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceZendeskSunshine)(nil)).Elem()
}

func (o SourceZendeskSunshineMapOutput) ToSourceZendeskSunshineMapOutput() SourceZendeskSunshineMapOutput {
	return o
}

func (o SourceZendeskSunshineMapOutput) ToSourceZendeskSunshineMapOutputWithContext(ctx context.Context) SourceZendeskSunshineMapOutput {
	return o
}

func (o SourceZendeskSunshineMapOutput) MapIndex(k pulumi.StringInput) SourceZendeskSunshineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceZendeskSunshine {
		return vs[0].(map[string]*SourceZendeskSunshine)[vs[1].(string)]
	}).(SourceZendeskSunshineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceZendeskSunshineInput)(nil)).Elem(), &SourceZendeskSunshine{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceZendeskSunshineArrayInput)(nil)).Elem(), SourceZendeskSunshineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceZendeskSunshineMapInput)(nil)).Elem(), SourceZendeskSunshineMap{})
	pulumi.RegisterOutputType(SourceZendeskSunshineOutput{})
	pulumi.RegisterOutputType(SourceZendeskSunshineArrayOutput{})
	pulumi.RegisterOutputType(SourceZendeskSunshineMapOutput{})
}
