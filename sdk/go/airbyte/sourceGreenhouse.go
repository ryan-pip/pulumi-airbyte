// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-airbyte/sdk/go/airbyte/internal"
)

// SourceGreenhouse Resource
type SourceGreenhouse struct {
	pulumi.CustomResourceState

	Configuration SourceGreenhouseConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput                 `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceGreenhouse registers a new resource with the given unique name, arguments, and options.
func NewSourceGreenhouse(ctx *pulumi.Context,
	name string, args *SourceGreenhouseArgs, opts ...pulumi.ResourceOption) (*SourceGreenhouse, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceGreenhouse
	err := ctx.RegisterResource("airbyte:index/sourceGreenhouse:SourceGreenhouse", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceGreenhouse gets an existing SourceGreenhouse resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceGreenhouse(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceGreenhouseState, opts ...pulumi.ResourceOption) (*SourceGreenhouse, error) {
	var resource SourceGreenhouse
	err := ctx.ReadResource("airbyte:index/sourceGreenhouse:SourceGreenhouse", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceGreenhouse resources.
type sourceGreenhouseState struct {
	Configuration *SourceGreenhouseConfiguration `pulumi:"configuration"`
	Name          *string                        `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceGreenhouseState struct {
	Configuration SourceGreenhouseConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceGreenhouseState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceGreenhouseState)(nil)).Elem()
}

type sourceGreenhouseArgs struct {
	Configuration SourceGreenhouseConfiguration `pulumi:"configuration"`
	Name          string                        `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceGreenhouse resource.
type SourceGreenhouseArgs struct {
	Configuration SourceGreenhouseConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceGreenhouseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceGreenhouseArgs)(nil)).Elem()
}

type SourceGreenhouseInput interface {
	pulumi.Input

	ToSourceGreenhouseOutput() SourceGreenhouseOutput
	ToSourceGreenhouseOutputWithContext(ctx context.Context) SourceGreenhouseOutput
}

func (*SourceGreenhouse) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceGreenhouse)(nil)).Elem()
}

func (i *SourceGreenhouse) ToSourceGreenhouseOutput() SourceGreenhouseOutput {
	return i.ToSourceGreenhouseOutputWithContext(context.Background())
}

func (i *SourceGreenhouse) ToSourceGreenhouseOutputWithContext(ctx context.Context) SourceGreenhouseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceGreenhouseOutput)
}

// SourceGreenhouseArrayInput is an input type that accepts SourceGreenhouseArray and SourceGreenhouseArrayOutput values.
// You can construct a concrete instance of `SourceGreenhouseArrayInput` via:
//
//	SourceGreenhouseArray{ SourceGreenhouseArgs{...} }
type SourceGreenhouseArrayInput interface {
	pulumi.Input

	ToSourceGreenhouseArrayOutput() SourceGreenhouseArrayOutput
	ToSourceGreenhouseArrayOutputWithContext(context.Context) SourceGreenhouseArrayOutput
}

type SourceGreenhouseArray []SourceGreenhouseInput

func (SourceGreenhouseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceGreenhouse)(nil)).Elem()
}

func (i SourceGreenhouseArray) ToSourceGreenhouseArrayOutput() SourceGreenhouseArrayOutput {
	return i.ToSourceGreenhouseArrayOutputWithContext(context.Background())
}

func (i SourceGreenhouseArray) ToSourceGreenhouseArrayOutputWithContext(ctx context.Context) SourceGreenhouseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceGreenhouseArrayOutput)
}

// SourceGreenhouseMapInput is an input type that accepts SourceGreenhouseMap and SourceGreenhouseMapOutput values.
// You can construct a concrete instance of `SourceGreenhouseMapInput` via:
//
//	SourceGreenhouseMap{ "key": SourceGreenhouseArgs{...} }
type SourceGreenhouseMapInput interface {
	pulumi.Input

	ToSourceGreenhouseMapOutput() SourceGreenhouseMapOutput
	ToSourceGreenhouseMapOutputWithContext(context.Context) SourceGreenhouseMapOutput
}

type SourceGreenhouseMap map[string]SourceGreenhouseInput

func (SourceGreenhouseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceGreenhouse)(nil)).Elem()
}

func (i SourceGreenhouseMap) ToSourceGreenhouseMapOutput() SourceGreenhouseMapOutput {
	return i.ToSourceGreenhouseMapOutputWithContext(context.Background())
}

func (i SourceGreenhouseMap) ToSourceGreenhouseMapOutputWithContext(ctx context.Context) SourceGreenhouseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceGreenhouseMapOutput)
}

type SourceGreenhouseOutput struct{ *pulumi.OutputState }

func (SourceGreenhouseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceGreenhouse)(nil)).Elem()
}

func (o SourceGreenhouseOutput) ToSourceGreenhouseOutput() SourceGreenhouseOutput {
	return o
}

func (o SourceGreenhouseOutput) ToSourceGreenhouseOutputWithContext(ctx context.Context) SourceGreenhouseOutput {
	return o
}

func (o SourceGreenhouseOutput) Configuration() SourceGreenhouseConfigurationOutput {
	return o.ApplyT(func(v *SourceGreenhouse) SourceGreenhouseConfigurationOutput { return v.Configuration }).(SourceGreenhouseConfigurationOutput)
}

func (o SourceGreenhouseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceGreenhouse) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceGreenhouseOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceGreenhouse) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceGreenhouseOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceGreenhouse) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceGreenhouseOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceGreenhouse) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceGreenhouseOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceGreenhouse) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceGreenhouseArrayOutput struct{ *pulumi.OutputState }

func (SourceGreenhouseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceGreenhouse)(nil)).Elem()
}

func (o SourceGreenhouseArrayOutput) ToSourceGreenhouseArrayOutput() SourceGreenhouseArrayOutput {
	return o
}

func (o SourceGreenhouseArrayOutput) ToSourceGreenhouseArrayOutputWithContext(ctx context.Context) SourceGreenhouseArrayOutput {
	return o
}

func (o SourceGreenhouseArrayOutput) Index(i pulumi.IntInput) SourceGreenhouseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceGreenhouse {
		return vs[0].([]*SourceGreenhouse)[vs[1].(int)]
	}).(SourceGreenhouseOutput)
}

type SourceGreenhouseMapOutput struct{ *pulumi.OutputState }

func (SourceGreenhouseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceGreenhouse)(nil)).Elem()
}

func (o SourceGreenhouseMapOutput) ToSourceGreenhouseMapOutput() SourceGreenhouseMapOutput {
	return o
}

func (o SourceGreenhouseMapOutput) ToSourceGreenhouseMapOutputWithContext(ctx context.Context) SourceGreenhouseMapOutput {
	return o
}

func (o SourceGreenhouseMapOutput) MapIndex(k pulumi.StringInput) SourceGreenhouseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceGreenhouse {
		return vs[0].(map[string]*SourceGreenhouse)[vs[1].(string)]
	}).(SourceGreenhouseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceGreenhouseInput)(nil)).Elem(), &SourceGreenhouse{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceGreenhouseArrayInput)(nil)).Elem(), SourceGreenhouseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceGreenhouseMapInput)(nil)).Elem(), SourceGreenhouseMap{})
	pulumi.RegisterOutputType(SourceGreenhouseOutput{})
	pulumi.RegisterOutputType(SourceGreenhouseArrayOutput{})
	pulumi.RegisterOutputType(SourceGreenhouseMapOutput{})
}
