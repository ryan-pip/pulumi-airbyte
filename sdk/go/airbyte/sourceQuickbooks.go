// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SourceQuickbooks Resource
type SourceQuickbooks struct {
	pulumi.CustomResourceState

	Configuration SourceQuickbooksConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput                 `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceQuickbooks registers a new resource with the given unique name, arguments, and options.
func NewSourceQuickbooks(ctx *pulumi.Context,
	name string, args *SourceQuickbooksArgs, opts ...pulumi.ResourceOption) (*SourceQuickbooks, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceQuickbooks
	err := ctx.RegisterResource("airbyte:index/sourceQuickbooks:SourceQuickbooks", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceQuickbooks gets an existing SourceQuickbooks resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceQuickbooks(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceQuickbooksState, opts ...pulumi.ResourceOption) (*SourceQuickbooks, error) {
	var resource SourceQuickbooks
	err := ctx.ReadResource("airbyte:index/sourceQuickbooks:SourceQuickbooks", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceQuickbooks resources.
type sourceQuickbooksState struct {
	Configuration *SourceQuickbooksConfiguration `pulumi:"configuration"`
	Name          *string                        `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceQuickbooksState struct {
	Configuration SourceQuickbooksConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceQuickbooksState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceQuickbooksState)(nil)).Elem()
}

type sourceQuickbooksArgs struct {
	Configuration SourceQuickbooksConfiguration `pulumi:"configuration"`
	Name          string                        `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceQuickbooks resource.
type SourceQuickbooksArgs struct {
	Configuration SourceQuickbooksConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceQuickbooksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceQuickbooksArgs)(nil)).Elem()
}

type SourceQuickbooksInput interface {
	pulumi.Input

	ToSourceQuickbooksOutput() SourceQuickbooksOutput
	ToSourceQuickbooksOutputWithContext(ctx context.Context) SourceQuickbooksOutput
}

func (*SourceQuickbooks) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceQuickbooks)(nil)).Elem()
}

func (i *SourceQuickbooks) ToSourceQuickbooksOutput() SourceQuickbooksOutput {
	return i.ToSourceQuickbooksOutputWithContext(context.Background())
}

func (i *SourceQuickbooks) ToSourceQuickbooksOutputWithContext(ctx context.Context) SourceQuickbooksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceQuickbooksOutput)
}

// SourceQuickbooksArrayInput is an input type that accepts SourceQuickbooksArray and SourceQuickbooksArrayOutput values.
// You can construct a concrete instance of `SourceQuickbooksArrayInput` via:
//
//	SourceQuickbooksArray{ SourceQuickbooksArgs{...} }
type SourceQuickbooksArrayInput interface {
	pulumi.Input

	ToSourceQuickbooksArrayOutput() SourceQuickbooksArrayOutput
	ToSourceQuickbooksArrayOutputWithContext(context.Context) SourceQuickbooksArrayOutput
}

type SourceQuickbooksArray []SourceQuickbooksInput

func (SourceQuickbooksArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceQuickbooks)(nil)).Elem()
}

func (i SourceQuickbooksArray) ToSourceQuickbooksArrayOutput() SourceQuickbooksArrayOutput {
	return i.ToSourceQuickbooksArrayOutputWithContext(context.Background())
}

func (i SourceQuickbooksArray) ToSourceQuickbooksArrayOutputWithContext(ctx context.Context) SourceQuickbooksArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceQuickbooksArrayOutput)
}

// SourceQuickbooksMapInput is an input type that accepts SourceQuickbooksMap and SourceQuickbooksMapOutput values.
// You can construct a concrete instance of `SourceQuickbooksMapInput` via:
//
//	SourceQuickbooksMap{ "key": SourceQuickbooksArgs{...} }
type SourceQuickbooksMapInput interface {
	pulumi.Input

	ToSourceQuickbooksMapOutput() SourceQuickbooksMapOutput
	ToSourceQuickbooksMapOutputWithContext(context.Context) SourceQuickbooksMapOutput
}

type SourceQuickbooksMap map[string]SourceQuickbooksInput

func (SourceQuickbooksMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceQuickbooks)(nil)).Elem()
}

func (i SourceQuickbooksMap) ToSourceQuickbooksMapOutput() SourceQuickbooksMapOutput {
	return i.ToSourceQuickbooksMapOutputWithContext(context.Background())
}

func (i SourceQuickbooksMap) ToSourceQuickbooksMapOutputWithContext(ctx context.Context) SourceQuickbooksMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceQuickbooksMapOutput)
}

type SourceQuickbooksOutput struct{ *pulumi.OutputState }

func (SourceQuickbooksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceQuickbooks)(nil)).Elem()
}

func (o SourceQuickbooksOutput) ToSourceQuickbooksOutput() SourceQuickbooksOutput {
	return o
}

func (o SourceQuickbooksOutput) ToSourceQuickbooksOutputWithContext(ctx context.Context) SourceQuickbooksOutput {
	return o
}

func (o SourceQuickbooksOutput) Configuration() SourceQuickbooksConfigurationOutput {
	return o.ApplyT(func(v *SourceQuickbooks) SourceQuickbooksConfigurationOutput { return v.Configuration }).(SourceQuickbooksConfigurationOutput)
}

func (o SourceQuickbooksOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceQuickbooks) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceQuickbooksOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceQuickbooks) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceQuickbooksOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceQuickbooks) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceQuickbooksOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceQuickbooks) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceQuickbooksOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceQuickbooks) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceQuickbooksArrayOutput struct{ *pulumi.OutputState }

func (SourceQuickbooksArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceQuickbooks)(nil)).Elem()
}

func (o SourceQuickbooksArrayOutput) ToSourceQuickbooksArrayOutput() SourceQuickbooksArrayOutput {
	return o
}

func (o SourceQuickbooksArrayOutput) ToSourceQuickbooksArrayOutputWithContext(ctx context.Context) SourceQuickbooksArrayOutput {
	return o
}

func (o SourceQuickbooksArrayOutput) Index(i pulumi.IntInput) SourceQuickbooksOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceQuickbooks {
		return vs[0].([]*SourceQuickbooks)[vs[1].(int)]
	}).(SourceQuickbooksOutput)
}

type SourceQuickbooksMapOutput struct{ *pulumi.OutputState }

func (SourceQuickbooksMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceQuickbooks)(nil)).Elem()
}

func (o SourceQuickbooksMapOutput) ToSourceQuickbooksMapOutput() SourceQuickbooksMapOutput {
	return o
}

func (o SourceQuickbooksMapOutput) ToSourceQuickbooksMapOutputWithContext(ctx context.Context) SourceQuickbooksMapOutput {
	return o
}

func (o SourceQuickbooksMapOutput) MapIndex(k pulumi.StringInput) SourceQuickbooksOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceQuickbooks {
		return vs[0].(map[string]*SourceQuickbooks)[vs[1].(string)]
	}).(SourceQuickbooksOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceQuickbooksInput)(nil)).Elem(), &SourceQuickbooks{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceQuickbooksArrayInput)(nil)).Elem(), SourceQuickbooksArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceQuickbooksMapInput)(nil)).Elem(), SourceQuickbooksMap{})
	pulumi.RegisterOutputType(SourceQuickbooksOutput{})
	pulumi.RegisterOutputType(SourceQuickbooksArrayOutput{})
	pulumi.RegisterOutputType(SourceQuickbooksMapOutput{})
}
