// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SourceInsightly Resource
type SourceInsightly struct {
	pulumi.CustomResourceState

	Configuration SourceInsightlyConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput                `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceInsightly registers a new resource with the given unique name, arguments, and options.
func NewSourceInsightly(ctx *pulumi.Context,
	name string, args *SourceInsightlyArgs, opts ...pulumi.ResourceOption) (*SourceInsightly, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceInsightly
	err := ctx.RegisterResource("airbyte:index/sourceInsightly:SourceInsightly", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceInsightly gets an existing SourceInsightly resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceInsightly(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceInsightlyState, opts ...pulumi.ResourceOption) (*SourceInsightly, error) {
	var resource SourceInsightly
	err := ctx.ReadResource("airbyte:index/sourceInsightly:SourceInsightly", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceInsightly resources.
type sourceInsightlyState struct {
	Configuration *SourceInsightlyConfiguration `pulumi:"configuration"`
	Name          *string                       `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceInsightlyState struct {
	Configuration SourceInsightlyConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceInsightlyState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceInsightlyState)(nil)).Elem()
}

type sourceInsightlyArgs struct {
	Configuration SourceInsightlyConfiguration `pulumi:"configuration"`
	Name          string                       `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceInsightly resource.
type SourceInsightlyArgs struct {
	Configuration SourceInsightlyConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceInsightlyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceInsightlyArgs)(nil)).Elem()
}

type SourceInsightlyInput interface {
	pulumi.Input

	ToSourceInsightlyOutput() SourceInsightlyOutput
	ToSourceInsightlyOutputWithContext(ctx context.Context) SourceInsightlyOutput
}

func (*SourceInsightly) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceInsightly)(nil)).Elem()
}

func (i *SourceInsightly) ToSourceInsightlyOutput() SourceInsightlyOutput {
	return i.ToSourceInsightlyOutputWithContext(context.Background())
}

func (i *SourceInsightly) ToSourceInsightlyOutputWithContext(ctx context.Context) SourceInsightlyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceInsightlyOutput)
}

// SourceInsightlyArrayInput is an input type that accepts SourceInsightlyArray and SourceInsightlyArrayOutput values.
// You can construct a concrete instance of `SourceInsightlyArrayInput` via:
//
//	SourceInsightlyArray{ SourceInsightlyArgs{...} }
type SourceInsightlyArrayInput interface {
	pulumi.Input

	ToSourceInsightlyArrayOutput() SourceInsightlyArrayOutput
	ToSourceInsightlyArrayOutputWithContext(context.Context) SourceInsightlyArrayOutput
}

type SourceInsightlyArray []SourceInsightlyInput

func (SourceInsightlyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceInsightly)(nil)).Elem()
}

func (i SourceInsightlyArray) ToSourceInsightlyArrayOutput() SourceInsightlyArrayOutput {
	return i.ToSourceInsightlyArrayOutputWithContext(context.Background())
}

func (i SourceInsightlyArray) ToSourceInsightlyArrayOutputWithContext(ctx context.Context) SourceInsightlyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceInsightlyArrayOutput)
}

// SourceInsightlyMapInput is an input type that accepts SourceInsightlyMap and SourceInsightlyMapOutput values.
// You can construct a concrete instance of `SourceInsightlyMapInput` via:
//
//	SourceInsightlyMap{ "key": SourceInsightlyArgs{...} }
type SourceInsightlyMapInput interface {
	pulumi.Input

	ToSourceInsightlyMapOutput() SourceInsightlyMapOutput
	ToSourceInsightlyMapOutputWithContext(context.Context) SourceInsightlyMapOutput
}

type SourceInsightlyMap map[string]SourceInsightlyInput

func (SourceInsightlyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceInsightly)(nil)).Elem()
}

func (i SourceInsightlyMap) ToSourceInsightlyMapOutput() SourceInsightlyMapOutput {
	return i.ToSourceInsightlyMapOutputWithContext(context.Background())
}

func (i SourceInsightlyMap) ToSourceInsightlyMapOutputWithContext(ctx context.Context) SourceInsightlyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceInsightlyMapOutput)
}

type SourceInsightlyOutput struct{ *pulumi.OutputState }

func (SourceInsightlyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceInsightly)(nil)).Elem()
}

func (o SourceInsightlyOutput) ToSourceInsightlyOutput() SourceInsightlyOutput {
	return o
}

func (o SourceInsightlyOutput) ToSourceInsightlyOutputWithContext(ctx context.Context) SourceInsightlyOutput {
	return o
}

func (o SourceInsightlyOutput) Configuration() SourceInsightlyConfigurationOutput {
	return o.ApplyT(func(v *SourceInsightly) SourceInsightlyConfigurationOutput { return v.Configuration }).(SourceInsightlyConfigurationOutput)
}

func (o SourceInsightlyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceInsightly) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceInsightlyOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceInsightly) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceInsightlyOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceInsightly) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceInsightlyOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceInsightly) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceInsightlyOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceInsightly) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceInsightlyArrayOutput struct{ *pulumi.OutputState }

func (SourceInsightlyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceInsightly)(nil)).Elem()
}

func (o SourceInsightlyArrayOutput) ToSourceInsightlyArrayOutput() SourceInsightlyArrayOutput {
	return o
}

func (o SourceInsightlyArrayOutput) ToSourceInsightlyArrayOutputWithContext(ctx context.Context) SourceInsightlyArrayOutput {
	return o
}

func (o SourceInsightlyArrayOutput) Index(i pulumi.IntInput) SourceInsightlyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceInsightly {
		return vs[0].([]*SourceInsightly)[vs[1].(int)]
	}).(SourceInsightlyOutput)
}

type SourceInsightlyMapOutput struct{ *pulumi.OutputState }

func (SourceInsightlyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceInsightly)(nil)).Elem()
}

func (o SourceInsightlyMapOutput) ToSourceInsightlyMapOutput() SourceInsightlyMapOutput {
	return o
}

func (o SourceInsightlyMapOutput) ToSourceInsightlyMapOutputWithContext(ctx context.Context) SourceInsightlyMapOutput {
	return o
}

func (o SourceInsightlyMapOutput) MapIndex(k pulumi.StringInput) SourceInsightlyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceInsightly {
		return vs[0].(map[string]*SourceInsightly)[vs[1].(string)]
	}).(SourceInsightlyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceInsightlyInput)(nil)).Elem(), &SourceInsightly{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceInsightlyArrayInput)(nil)).Elem(), SourceInsightlyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceInsightlyMapInput)(nil)).Elem(), SourceInsightlyMap{})
	pulumi.RegisterOutputType(SourceInsightlyOutput{})
	pulumi.RegisterOutputType(SourceInsightlyArrayOutput{})
	pulumi.RegisterOutputType(SourceInsightlyMapOutput{})
}
