// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-airbyte/sdk/go/airbyte/internal"
)

// DestinationConvex Resource
type DestinationConvex struct {
	pulumi.CustomResourceState

	Configuration   DestinationConvexConfigurationOutput `pulumi:"configuration"`
	DestinationId   pulumi.StringOutput                  `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput                  `pulumi:"destinationType"`
	Name            pulumi.StringOutput                  `pulumi:"name"`
	WorkspaceId     pulumi.StringOutput                  `pulumi:"workspaceId"`
}

// NewDestinationConvex registers a new resource with the given unique name, arguments, and options.
func NewDestinationConvex(ctx *pulumi.Context,
	name string, args *DestinationConvexArgs, opts ...pulumi.ResourceOption) (*DestinationConvex, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DestinationConvex
	err := ctx.RegisterResource("airbyte:index/destinationConvex:DestinationConvex", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationConvex gets an existing DestinationConvex resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationConvex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationConvexState, opts ...pulumi.ResourceOption) (*DestinationConvex, error) {
	var resource DestinationConvex
	err := ctx.ReadResource("airbyte:index/destinationConvex:DestinationConvex", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationConvex resources.
type destinationConvexState struct {
	Configuration   *DestinationConvexConfiguration `pulumi:"configuration"`
	DestinationId   *string                         `pulumi:"destinationId"`
	DestinationType *string                         `pulumi:"destinationType"`
	Name            *string                         `pulumi:"name"`
	WorkspaceId     *string                         `pulumi:"workspaceId"`
}

type DestinationConvexState struct {
	Configuration   DestinationConvexConfigurationPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	WorkspaceId     pulumi.StringPtrInput
}

func (DestinationConvexState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationConvexState)(nil)).Elem()
}

type destinationConvexArgs struct {
	Configuration DestinationConvexConfiguration `pulumi:"configuration"`
	Name          string                         `pulumi:"name"`
	WorkspaceId   string                         `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationConvex resource.
type DestinationConvexArgs struct {
	Configuration DestinationConvexConfigurationInput
	Name          pulumi.StringInput
	WorkspaceId   pulumi.StringInput
}

func (DestinationConvexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationConvexArgs)(nil)).Elem()
}

type DestinationConvexInput interface {
	pulumi.Input

	ToDestinationConvexOutput() DestinationConvexOutput
	ToDestinationConvexOutputWithContext(ctx context.Context) DestinationConvexOutput
}

func (*DestinationConvex) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationConvex)(nil)).Elem()
}

func (i *DestinationConvex) ToDestinationConvexOutput() DestinationConvexOutput {
	return i.ToDestinationConvexOutputWithContext(context.Background())
}

func (i *DestinationConvex) ToDestinationConvexOutputWithContext(ctx context.Context) DestinationConvexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationConvexOutput)
}

// DestinationConvexArrayInput is an input type that accepts DestinationConvexArray and DestinationConvexArrayOutput values.
// You can construct a concrete instance of `DestinationConvexArrayInput` via:
//
//	DestinationConvexArray{ DestinationConvexArgs{...} }
type DestinationConvexArrayInput interface {
	pulumi.Input

	ToDestinationConvexArrayOutput() DestinationConvexArrayOutput
	ToDestinationConvexArrayOutputWithContext(context.Context) DestinationConvexArrayOutput
}

type DestinationConvexArray []DestinationConvexInput

func (DestinationConvexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationConvex)(nil)).Elem()
}

func (i DestinationConvexArray) ToDestinationConvexArrayOutput() DestinationConvexArrayOutput {
	return i.ToDestinationConvexArrayOutputWithContext(context.Background())
}

func (i DestinationConvexArray) ToDestinationConvexArrayOutputWithContext(ctx context.Context) DestinationConvexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationConvexArrayOutput)
}

// DestinationConvexMapInput is an input type that accepts DestinationConvexMap and DestinationConvexMapOutput values.
// You can construct a concrete instance of `DestinationConvexMapInput` via:
//
//	DestinationConvexMap{ "key": DestinationConvexArgs{...} }
type DestinationConvexMapInput interface {
	pulumi.Input

	ToDestinationConvexMapOutput() DestinationConvexMapOutput
	ToDestinationConvexMapOutputWithContext(context.Context) DestinationConvexMapOutput
}

type DestinationConvexMap map[string]DestinationConvexInput

func (DestinationConvexMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationConvex)(nil)).Elem()
}

func (i DestinationConvexMap) ToDestinationConvexMapOutput() DestinationConvexMapOutput {
	return i.ToDestinationConvexMapOutputWithContext(context.Background())
}

func (i DestinationConvexMap) ToDestinationConvexMapOutputWithContext(ctx context.Context) DestinationConvexMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationConvexMapOutput)
}

type DestinationConvexOutput struct{ *pulumi.OutputState }

func (DestinationConvexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationConvex)(nil)).Elem()
}

func (o DestinationConvexOutput) ToDestinationConvexOutput() DestinationConvexOutput {
	return o
}

func (o DestinationConvexOutput) ToDestinationConvexOutputWithContext(ctx context.Context) DestinationConvexOutput {
	return o
}

func (o DestinationConvexOutput) Configuration() DestinationConvexConfigurationOutput {
	return o.ApplyT(func(v *DestinationConvex) DestinationConvexConfigurationOutput { return v.Configuration }).(DestinationConvexConfigurationOutput)
}

func (o DestinationConvexOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationConvex) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationConvexOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationConvex) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

func (o DestinationConvexOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationConvex) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationConvexOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationConvex) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type DestinationConvexArrayOutput struct{ *pulumi.OutputState }

func (DestinationConvexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationConvex)(nil)).Elem()
}

func (o DestinationConvexArrayOutput) ToDestinationConvexArrayOutput() DestinationConvexArrayOutput {
	return o
}

func (o DestinationConvexArrayOutput) ToDestinationConvexArrayOutputWithContext(ctx context.Context) DestinationConvexArrayOutput {
	return o
}

func (o DestinationConvexArrayOutput) Index(i pulumi.IntInput) DestinationConvexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DestinationConvex {
		return vs[0].([]*DestinationConvex)[vs[1].(int)]
	}).(DestinationConvexOutput)
}

type DestinationConvexMapOutput struct{ *pulumi.OutputState }

func (DestinationConvexMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationConvex)(nil)).Elem()
}

func (o DestinationConvexMapOutput) ToDestinationConvexMapOutput() DestinationConvexMapOutput {
	return o
}

func (o DestinationConvexMapOutput) ToDestinationConvexMapOutputWithContext(ctx context.Context) DestinationConvexMapOutput {
	return o
}

func (o DestinationConvexMapOutput) MapIndex(k pulumi.StringInput) DestinationConvexOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DestinationConvex {
		return vs[0].(map[string]*DestinationConvex)[vs[1].(string)]
	}).(DestinationConvexOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationConvexInput)(nil)).Elem(), &DestinationConvex{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationConvexArrayInput)(nil)).Elem(), DestinationConvexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationConvexMapInput)(nil)).Elem(), DestinationConvexMap{})
	pulumi.RegisterOutputType(DestinationConvexOutput{})
	pulumi.RegisterOutputType(DestinationConvexArrayOutput{})
	pulumi.RegisterOutputType(DestinationConvexMapOutput{})
}
