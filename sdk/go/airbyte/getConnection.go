// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Connection DataSource
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := airbyte.LookupConnection(ctx, &airbyte.LookupConnectionArgs{
//				ConnectionId: "...my_connection_id...",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupConnection(ctx *pulumi.Context, args *LookupConnectionArgs, opts ...pulumi.InvokeOption) (*LookupConnectionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConnectionResult
	err := ctx.Invoke("airbyte:index/getConnection:getConnection", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConnection.
type LookupConnectionArgs struct {
	ConnectionId string `pulumi:"connectionId"`
}

// A collection of values returned by getConnection.
type LookupConnectionResult struct {
	// A list of configured stream options for a connection.
	Configurations GetConnectionConfigurations `pulumi:"configurations"`
	ConnectionId   string                      `pulumi:"connectionId"`
	// must be one of ["auto", "us", "eu"]
	DataResidency string `pulumi:"dataResidency"`
	DestinationId string `pulumi:"destinationId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Optional name of the connection
	Name string `pulumi:"name"`
	// must be one of ["source", "destination", "customFormat"]
	// Define the location where the data will be stored in the destination
	NamespaceDefinition string `pulumi:"namespaceDefinition"`
	// Used when namespaceDefinition is 'custom*format'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE*NAMESPACE}" then behaves like namespaceDefinition = 'source'.
	NamespaceFormat string `pulumi:"namespaceFormat"`
	// must be one of ["ignore", "disable*connection", "propagate*columns", "propagateFully"]
	// Set how Airbyte handles syncs when it detects a non-breaking schema change in the source
	NonBreakingSchemaUpdatesBehavior string `pulumi:"nonBreakingSchemaUpdatesBehavior"`
	// Prefix that will be prepended to the name of each stream when it is written to the destination (ex. “airbyte*” causes “projects” => “airbyte*projects”).
	Prefix string `pulumi:"prefix"`
	// schedule for when the the connection should run, per the schedule type
	Schedule GetConnectionSchedule `pulumi:"schedule"`
	SourceId string                `pulumi:"sourceId"`
	// must be one of ["active", "inactive", "deprecated"]
	Status      string `pulumi:"status"`
	WorkspaceId string `pulumi:"workspaceId"`
}

func LookupConnectionOutput(ctx *pulumi.Context, args LookupConnectionOutputArgs, opts ...pulumi.InvokeOption) LookupConnectionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupConnectionResult, error) {
			args := v.(LookupConnectionArgs)
			r, err := LookupConnection(ctx, &args, opts...)
			var s LookupConnectionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupConnectionResultOutput)
}

// A collection of arguments for invoking getConnection.
type LookupConnectionOutputArgs struct {
	ConnectionId pulumi.StringInput `pulumi:"connectionId"`
}

func (LookupConnectionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectionArgs)(nil)).Elem()
}

// A collection of values returned by getConnection.
type LookupConnectionResultOutput struct{ *pulumi.OutputState }

func (LookupConnectionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectionResult)(nil)).Elem()
}

func (o LookupConnectionResultOutput) ToLookupConnectionResultOutput() LookupConnectionResultOutput {
	return o
}

func (o LookupConnectionResultOutput) ToLookupConnectionResultOutputWithContext(ctx context.Context) LookupConnectionResultOutput {
	return o
}

// A list of configured stream options for a connection.
func (o LookupConnectionResultOutput) Configurations() GetConnectionConfigurationsOutput {
	return o.ApplyT(func(v LookupConnectionResult) GetConnectionConfigurations { return v.Configurations }).(GetConnectionConfigurationsOutput)
}

func (o LookupConnectionResultOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.ConnectionId }).(pulumi.StringOutput)
}

// must be one of ["auto", "us", "eu"]
func (o LookupConnectionResultOutput) DataResidency() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.DataResidency }).(pulumi.StringOutput)
}

func (o LookupConnectionResultOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.DestinationId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupConnectionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.Id }).(pulumi.StringOutput)
}

// Optional name of the connection
func (o LookupConnectionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.Name }).(pulumi.StringOutput)
}

// must be one of ["source", "destination", "customFormat"]
// Define the location where the data will be stored in the destination
func (o LookupConnectionResultOutput) NamespaceDefinition() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.NamespaceDefinition }).(pulumi.StringOutput)
}

// Used when namespaceDefinition is 'custom*format'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE*NAMESPACE}" then behaves like namespaceDefinition = 'source'.
func (o LookupConnectionResultOutput) NamespaceFormat() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.NamespaceFormat }).(pulumi.StringOutput)
}

// must be one of ["ignore", "disable*connection", "propagate*columns", "propagateFully"]
// Set how Airbyte handles syncs when it detects a non-breaking schema change in the source
func (o LookupConnectionResultOutput) NonBreakingSchemaUpdatesBehavior() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.NonBreakingSchemaUpdatesBehavior }).(pulumi.StringOutput)
}

// Prefix that will be prepended to the name of each stream when it is written to the destination (ex. “airbyte*” causes “projects” => “airbyte*projects”).
func (o LookupConnectionResultOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.Prefix }).(pulumi.StringOutput)
}

// schedule for when the the connection should run, per the schedule type
func (o LookupConnectionResultOutput) Schedule() GetConnectionScheduleOutput {
	return o.ApplyT(func(v LookupConnectionResult) GetConnectionSchedule { return v.Schedule }).(GetConnectionScheduleOutput)
}

func (o LookupConnectionResultOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.SourceId }).(pulumi.StringOutput)
}

// must be one of ["active", "inactive", "deprecated"]
func (o LookupConnectionResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.Status }).(pulumi.StringOutput)
}

func (o LookupConnectionResultOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupConnectionResultOutput{})
}
