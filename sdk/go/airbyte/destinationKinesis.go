// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"internal"
)

// DestinationKinesis Resource
type DestinationKinesis struct {
	pulumi.CustomResourceState

	Configuration   DestinationKinesisConfigurationOutput `pulumi:"configuration"`
	DestinationId   pulumi.StringOutput                   `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput                   `pulumi:"destinationType"`
	Name            pulumi.StringOutput                   `pulumi:"name"`
	WorkspaceId     pulumi.StringOutput                   `pulumi:"workspaceId"`
}

// NewDestinationKinesis registers a new resource with the given unique name, arguments, and options.
func NewDestinationKinesis(ctx *pulumi.Context,
	name string, args *DestinationKinesisArgs, opts ...pulumi.ResourceOption) (*DestinationKinesis, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DestinationKinesis
	err := ctx.RegisterResource("airbyte:index/destinationKinesis:DestinationKinesis", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationKinesis gets an existing DestinationKinesis resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationKinesis(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationKinesisState, opts ...pulumi.ResourceOption) (*DestinationKinesis, error) {
	var resource DestinationKinesis
	err := ctx.ReadResource("airbyte:index/destinationKinesis:DestinationKinesis", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationKinesis resources.
type destinationKinesisState struct {
	Configuration   *DestinationKinesisConfiguration `pulumi:"configuration"`
	DestinationId   *string                          `pulumi:"destinationId"`
	DestinationType *string                          `pulumi:"destinationType"`
	Name            *string                          `pulumi:"name"`
	WorkspaceId     *string                          `pulumi:"workspaceId"`
}

type DestinationKinesisState struct {
	Configuration   DestinationKinesisConfigurationPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	WorkspaceId     pulumi.StringPtrInput
}

func (DestinationKinesisState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationKinesisState)(nil)).Elem()
}

type destinationKinesisArgs struct {
	Configuration DestinationKinesisConfiguration `pulumi:"configuration"`
	Name          string                          `pulumi:"name"`
	WorkspaceId   string                          `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationKinesis resource.
type DestinationKinesisArgs struct {
	Configuration DestinationKinesisConfigurationInput
	Name          pulumi.StringInput
	WorkspaceId   pulumi.StringInput
}

func (DestinationKinesisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationKinesisArgs)(nil)).Elem()
}

type DestinationKinesisInput interface {
	pulumi.Input

	ToDestinationKinesisOutput() DestinationKinesisOutput
	ToDestinationKinesisOutputWithContext(ctx context.Context) DestinationKinesisOutput
}

func (*DestinationKinesis) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationKinesis)(nil)).Elem()
}

func (i *DestinationKinesis) ToDestinationKinesisOutput() DestinationKinesisOutput {
	return i.ToDestinationKinesisOutputWithContext(context.Background())
}

func (i *DestinationKinesis) ToDestinationKinesisOutputWithContext(ctx context.Context) DestinationKinesisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationKinesisOutput)
}

type DestinationKinesisOutput struct{ *pulumi.OutputState }

func (DestinationKinesisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationKinesis)(nil)).Elem()
}

func (o DestinationKinesisOutput) ToDestinationKinesisOutput() DestinationKinesisOutput {
	return o
}

func (o DestinationKinesisOutput) ToDestinationKinesisOutputWithContext(ctx context.Context) DestinationKinesisOutput {
	return o
}

func (o DestinationKinesisOutput) Configuration() DestinationKinesisConfigurationOutput {
	return o.ApplyT(func(v *DestinationKinesis) DestinationKinesisConfigurationOutput { return v.Configuration }).(DestinationKinesisConfigurationOutput)
}

func (o DestinationKinesisOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationKinesis) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationKinesisOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationKinesis) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

func (o DestinationKinesisOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationKinesis) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationKinesisOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationKinesis) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationKinesisInput)(nil)).Elem(), &DestinationKinesis{})
	pulumi.RegisterOutputType(DestinationKinesisOutput{})
}
