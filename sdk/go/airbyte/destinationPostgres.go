// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DestinationPostgres struct {
	pulumi.CustomResourceState

	Configuration   DestinationPostgresConfigurationOutput `pulumi:"configuration"`
	DestinationId   pulumi.StringOutput                    `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput                    `pulumi:"destinationType"`
	Name            pulumi.StringOutput                    `pulumi:"name"`
	WorkspaceId     pulumi.StringOutput                    `pulumi:"workspaceId"`
}

// NewDestinationPostgres registers a new resource with the given unique name, arguments, and options.
func NewDestinationPostgres(ctx *pulumi.Context,
	name string, args *DestinationPostgresArgs, opts ...pulumi.ResourceOption) (*DestinationPostgres, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DestinationPostgres
	err := ctx.RegisterResource("airbyte:index/destinationPostgres:DestinationPostgres", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationPostgres gets an existing DestinationPostgres resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationPostgres(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationPostgresState, opts ...pulumi.ResourceOption) (*DestinationPostgres, error) {
	var resource DestinationPostgres
	err := ctx.ReadResource("airbyte:index/destinationPostgres:DestinationPostgres", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationPostgres resources.
type destinationPostgresState struct {
	Configuration   *DestinationPostgresConfiguration `pulumi:"configuration"`
	DestinationId   *string                           `pulumi:"destinationId"`
	DestinationType *string                           `pulumi:"destinationType"`
	Name            *string                           `pulumi:"name"`
	WorkspaceId     *string                           `pulumi:"workspaceId"`
}

type DestinationPostgresState struct {
	Configuration   DestinationPostgresConfigurationPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	WorkspaceId     pulumi.StringPtrInput
}

func (DestinationPostgresState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationPostgresState)(nil)).Elem()
}

type destinationPostgresArgs struct {
	Configuration DestinationPostgresConfiguration `pulumi:"configuration"`
	Name          string                           `pulumi:"name"`
	WorkspaceId   string                           `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationPostgres resource.
type DestinationPostgresArgs struct {
	Configuration DestinationPostgresConfigurationInput
	Name          pulumi.StringInput
	WorkspaceId   pulumi.StringInput
}

func (DestinationPostgresArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationPostgresArgs)(nil)).Elem()
}

type DestinationPostgresInput interface {
	pulumi.Input

	ToDestinationPostgresOutput() DestinationPostgresOutput
	ToDestinationPostgresOutputWithContext(ctx context.Context) DestinationPostgresOutput
}

func (*DestinationPostgres) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationPostgres)(nil)).Elem()
}

func (i *DestinationPostgres) ToDestinationPostgresOutput() DestinationPostgresOutput {
	return i.ToDestinationPostgresOutputWithContext(context.Background())
}

func (i *DestinationPostgres) ToDestinationPostgresOutputWithContext(ctx context.Context) DestinationPostgresOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationPostgresOutput)
}

type DestinationPostgresOutput struct{ *pulumi.OutputState }

func (DestinationPostgresOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationPostgres)(nil)).Elem()
}

func (o DestinationPostgresOutput) ToDestinationPostgresOutput() DestinationPostgresOutput {
	return o
}

func (o DestinationPostgresOutput) ToDestinationPostgresOutputWithContext(ctx context.Context) DestinationPostgresOutput {
	return o
}

func (o DestinationPostgresOutput) Configuration() DestinationPostgresConfigurationOutput {
	return o.ApplyT(func(v *DestinationPostgres) DestinationPostgresConfigurationOutput { return v.Configuration }).(DestinationPostgresConfigurationOutput)
}

func (o DestinationPostgresOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationPostgres) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationPostgresOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationPostgres) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

func (o DestinationPostgresOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationPostgres) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationPostgresOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationPostgres) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationPostgresInput)(nil)).Elem(), &DestinationPostgres{})
	pulumi.RegisterOutputType(DestinationPostgresOutput{})
}
