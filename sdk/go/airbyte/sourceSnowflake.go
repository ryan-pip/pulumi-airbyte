// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SourceSnowflake Resource
type SourceSnowflake struct {
	pulumi.CustomResourceState

	Configuration SourceSnowflakeConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput                `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceSnowflake registers a new resource with the given unique name, arguments, and options.
func NewSourceSnowflake(ctx *pulumi.Context,
	name string, args *SourceSnowflakeArgs, opts ...pulumi.ResourceOption) (*SourceSnowflake, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceSnowflake
	err := ctx.RegisterResource("airbyte:index/sourceSnowflake:SourceSnowflake", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceSnowflake gets an existing SourceSnowflake resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceSnowflake(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceSnowflakeState, opts ...pulumi.ResourceOption) (*SourceSnowflake, error) {
	var resource SourceSnowflake
	err := ctx.ReadResource("airbyte:index/sourceSnowflake:SourceSnowflake", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceSnowflake resources.
type sourceSnowflakeState struct {
	Configuration *SourceSnowflakeConfiguration `pulumi:"configuration"`
	Name          *string                       `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceSnowflakeState struct {
	Configuration SourceSnowflakeConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceSnowflakeState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceSnowflakeState)(nil)).Elem()
}

type sourceSnowflakeArgs struct {
	Configuration SourceSnowflakeConfiguration `pulumi:"configuration"`
	Name          string                       `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceSnowflake resource.
type SourceSnowflakeArgs struct {
	Configuration SourceSnowflakeConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceSnowflakeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceSnowflakeArgs)(nil)).Elem()
}

type SourceSnowflakeInput interface {
	pulumi.Input

	ToSourceSnowflakeOutput() SourceSnowflakeOutput
	ToSourceSnowflakeOutputWithContext(ctx context.Context) SourceSnowflakeOutput
}

func (*SourceSnowflake) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceSnowflake)(nil)).Elem()
}

func (i *SourceSnowflake) ToSourceSnowflakeOutput() SourceSnowflakeOutput {
	return i.ToSourceSnowflakeOutputWithContext(context.Background())
}

func (i *SourceSnowflake) ToSourceSnowflakeOutputWithContext(ctx context.Context) SourceSnowflakeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceSnowflakeOutput)
}

// SourceSnowflakeArrayInput is an input type that accepts SourceSnowflakeArray and SourceSnowflakeArrayOutput values.
// You can construct a concrete instance of `SourceSnowflakeArrayInput` via:
//
//	SourceSnowflakeArray{ SourceSnowflakeArgs{...} }
type SourceSnowflakeArrayInput interface {
	pulumi.Input

	ToSourceSnowflakeArrayOutput() SourceSnowflakeArrayOutput
	ToSourceSnowflakeArrayOutputWithContext(context.Context) SourceSnowflakeArrayOutput
}

type SourceSnowflakeArray []SourceSnowflakeInput

func (SourceSnowflakeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceSnowflake)(nil)).Elem()
}

func (i SourceSnowflakeArray) ToSourceSnowflakeArrayOutput() SourceSnowflakeArrayOutput {
	return i.ToSourceSnowflakeArrayOutputWithContext(context.Background())
}

func (i SourceSnowflakeArray) ToSourceSnowflakeArrayOutputWithContext(ctx context.Context) SourceSnowflakeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceSnowflakeArrayOutput)
}

// SourceSnowflakeMapInput is an input type that accepts SourceSnowflakeMap and SourceSnowflakeMapOutput values.
// You can construct a concrete instance of `SourceSnowflakeMapInput` via:
//
//	SourceSnowflakeMap{ "key": SourceSnowflakeArgs{...} }
type SourceSnowflakeMapInput interface {
	pulumi.Input

	ToSourceSnowflakeMapOutput() SourceSnowflakeMapOutput
	ToSourceSnowflakeMapOutputWithContext(context.Context) SourceSnowflakeMapOutput
}

type SourceSnowflakeMap map[string]SourceSnowflakeInput

func (SourceSnowflakeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceSnowflake)(nil)).Elem()
}

func (i SourceSnowflakeMap) ToSourceSnowflakeMapOutput() SourceSnowflakeMapOutput {
	return i.ToSourceSnowflakeMapOutputWithContext(context.Background())
}

func (i SourceSnowflakeMap) ToSourceSnowflakeMapOutputWithContext(ctx context.Context) SourceSnowflakeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceSnowflakeMapOutput)
}

type SourceSnowflakeOutput struct{ *pulumi.OutputState }

func (SourceSnowflakeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceSnowflake)(nil)).Elem()
}

func (o SourceSnowflakeOutput) ToSourceSnowflakeOutput() SourceSnowflakeOutput {
	return o
}

func (o SourceSnowflakeOutput) ToSourceSnowflakeOutputWithContext(ctx context.Context) SourceSnowflakeOutput {
	return o
}

func (o SourceSnowflakeOutput) Configuration() SourceSnowflakeConfigurationOutput {
	return o.ApplyT(func(v *SourceSnowflake) SourceSnowflakeConfigurationOutput { return v.Configuration }).(SourceSnowflakeConfigurationOutput)
}

func (o SourceSnowflakeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceSnowflake) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceSnowflakeOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceSnowflake) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceSnowflakeOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceSnowflake) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceSnowflakeOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceSnowflake) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceSnowflakeOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceSnowflake) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceSnowflakeArrayOutput struct{ *pulumi.OutputState }

func (SourceSnowflakeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceSnowflake)(nil)).Elem()
}

func (o SourceSnowflakeArrayOutput) ToSourceSnowflakeArrayOutput() SourceSnowflakeArrayOutput {
	return o
}

func (o SourceSnowflakeArrayOutput) ToSourceSnowflakeArrayOutputWithContext(ctx context.Context) SourceSnowflakeArrayOutput {
	return o
}

func (o SourceSnowflakeArrayOutput) Index(i pulumi.IntInput) SourceSnowflakeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceSnowflake {
		return vs[0].([]*SourceSnowflake)[vs[1].(int)]
	}).(SourceSnowflakeOutput)
}

type SourceSnowflakeMapOutput struct{ *pulumi.OutputState }

func (SourceSnowflakeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceSnowflake)(nil)).Elem()
}

func (o SourceSnowflakeMapOutput) ToSourceSnowflakeMapOutput() SourceSnowflakeMapOutput {
	return o
}

func (o SourceSnowflakeMapOutput) ToSourceSnowflakeMapOutputWithContext(ctx context.Context) SourceSnowflakeMapOutput {
	return o
}

func (o SourceSnowflakeMapOutput) MapIndex(k pulumi.StringInput) SourceSnowflakeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceSnowflake {
		return vs[0].(map[string]*SourceSnowflake)[vs[1].(string)]
	}).(SourceSnowflakeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceSnowflakeInput)(nil)).Elem(), &SourceSnowflake{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceSnowflakeArrayInput)(nil)).Elem(), SourceSnowflakeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceSnowflakeMapInput)(nil)).Elem(), SourceSnowflakeMap{})
	pulumi.RegisterOutputType(SourceSnowflakeOutput{})
	pulumi.RegisterOutputType(SourceSnowflakeArrayOutput{})
	pulumi.RegisterOutputType(SourceSnowflakeMapOutput{})
}
