// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SourceSquare struct {
	pulumi.CustomResourceState

	Configuration SourceSquareConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput             `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceSquare registers a new resource with the given unique name, arguments, and options.
func NewSourceSquare(ctx *pulumi.Context,
	name string, args *SourceSquareArgs, opts ...pulumi.ResourceOption) (*SourceSquare, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	var resource SourceSquare
	err := ctx.RegisterResource("airbyte:index/sourceSquare:SourceSquare", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceSquare gets an existing SourceSquare resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceSquare(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceSquareState, opts ...pulumi.ResourceOption) (*SourceSquare, error) {
	var resource SourceSquare
	err := ctx.ReadResource("airbyte:index/sourceSquare:SourceSquare", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceSquare resources.
type sourceSquareState struct {
	Configuration *SourceSquareConfiguration `pulumi:"configuration"`
	Name          *string                    `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceSquareState struct {
	Configuration SourceSquareConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceSquareState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceSquareState)(nil)).Elem()
}

type sourceSquareArgs struct {
	Configuration SourceSquareConfiguration `pulumi:"configuration"`
	Name          string                    `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceSquare resource.
type SourceSquareArgs struct {
	Configuration SourceSquareConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceSquareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceSquareArgs)(nil)).Elem()
}

type SourceSquareInput interface {
	pulumi.Input

	ToSourceSquareOutput() SourceSquareOutput
	ToSourceSquareOutputWithContext(ctx context.Context) SourceSquareOutput
}

func (*SourceSquare) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceSquare)(nil)).Elem()
}

func (i *SourceSquare) ToSourceSquareOutput() SourceSquareOutput {
	return i.ToSourceSquareOutputWithContext(context.Background())
}

func (i *SourceSquare) ToSourceSquareOutputWithContext(ctx context.Context) SourceSquareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceSquareOutput)
}

type SourceSquareOutput struct{ *pulumi.OutputState }

func (SourceSquareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceSquare)(nil)).Elem()
}

func (o SourceSquareOutput) ToSourceSquareOutput() SourceSquareOutput {
	return o
}

func (o SourceSquareOutput) ToSourceSquareOutputWithContext(ctx context.Context) SourceSquareOutput {
	return o
}

func (o SourceSquareOutput) Configuration() SourceSquareConfigurationOutput {
	return o.ApplyT(func(v *SourceSquare) SourceSquareConfigurationOutput { return v.Configuration }).(SourceSquareConfigurationOutput)
}

func (o SourceSquareOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceSquare) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceSquareOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceSquare) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceSquareOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceSquare) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceSquareOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceSquare) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceSquareOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceSquare) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceSquareInput)(nil)).Elem(), &SourceSquare{})
	pulumi.RegisterOutputType(SourceSquareOutput{})
}
