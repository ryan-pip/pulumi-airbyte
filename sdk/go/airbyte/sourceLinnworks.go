// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-airbyte/sdk/go/airbyte/internal"
)

// SourceLinnworks Resource
type SourceLinnworks struct {
	pulumi.CustomResourceState

	Configuration SourceLinnworksConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput                `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceLinnworks registers a new resource with the given unique name, arguments, and options.
func NewSourceLinnworks(ctx *pulumi.Context,
	name string, args *SourceLinnworksArgs, opts ...pulumi.ResourceOption) (*SourceLinnworks, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceLinnworks
	err := ctx.RegisterResource("airbyte:index/sourceLinnworks:SourceLinnworks", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceLinnworks gets an existing SourceLinnworks resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceLinnworks(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceLinnworksState, opts ...pulumi.ResourceOption) (*SourceLinnworks, error) {
	var resource SourceLinnworks
	err := ctx.ReadResource("airbyte:index/sourceLinnworks:SourceLinnworks", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceLinnworks resources.
type sourceLinnworksState struct {
	Configuration *SourceLinnworksConfiguration `pulumi:"configuration"`
	Name          *string                       `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceLinnworksState struct {
	Configuration SourceLinnworksConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceLinnworksState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceLinnworksState)(nil)).Elem()
}

type sourceLinnworksArgs struct {
	Configuration SourceLinnworksConfiguration `pulumi:"configuration"`
	Name          string                       `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceLinnworks resource.
type SourceLinnworksArgs struct {
	Configuration SourceLinnworksConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceLinnworksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceLinnworksArgs)(nil)).Elem()
}

type SourceLinnworksInput interface {
	pulumi.Input

	ToSourceLinnworksOutput() SourceLinnworksOutput
	ToSourceLinnworksOutputWithContext(ctx context.Context) SourceLinnworksOutput
}

func (*SourceLinnworks) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceLinnworks)(nil)).Elem()
}

func (i *SourceLinnworks) ToSourceLinnworksOutput() SourceLinnworksOutput {
	return i.ToSourceLinnworksOutputWithContext(context.Background())
}

func (i *SourceLinnworks) ToSourceLinnworksOutputWithContext(ctx context.Context) SourceLinnworksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLinnworksOutput)
}

// SourceLinnworksArrayInput is an input type that accepts SourceLinnworksArray and SourceLinnworksArrayOutput values.
// You can construct a concrete instance of `SourceLinnworksArrayInput` via:
//
//	SourceLinnworksArray{ SourceLinnworksArgs{...} }
type SourceLinnworksArrayInput interface {
	pulumi.Input

	ToSourceLinnworksArrayOutput() SourceLinnworksArrayOutput
	ToSourceLinnworksArrayOutputWithContext(context.Context) SourceLinnworksArrayOutput
}

type SourceLinnworksArray []SourceLinnworksInput

func (SourceLinnworksArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceLinnworks)(nil)).Elem()
}

func (i SourceLinnworksArray) ToSourceLinnworksArrayOutput() SourceLinnworksArrayOutput {
	return i.ToSourceLinnworksArrayOutputWithContext(context.Background())
}

func (i SourceLinnworksArray) ToSourceLinnworksArrayOutputWithContext(ctx context.Context) SourceLinnworksArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLinnworksArrayOutput)
}

// SourceLinnworksMapInput is an input type that accepts SourceLinnworksMap and SourceLinnworksMapOutput values.
// You can construct a concrete instance of `SourceLinnworksMapInput` via:
//
//	SourceLinnworksMap{ "key": SourceLinnworksArgs{...} }
type SourceLinnworksMapInput interface {
	pulumi.Input

	ToSourceLinnworksMapOutput() SourceLinnworksMapOutput
	ToSourceLinnworksMapOutputWithContext(context.Context) SourceLinnworksMapOutput
}

type SourceLinnworksMap map[string]SourceLinnworksInput

func (SourceLinnworksMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceLinnworks)(nil)).Elem()
}

func (i SourceLinnworksMap) ToSourceLinnworksMapOutput() SourceLinnworksMapOutput {
	return i.ToSourceLinnworksMapOutputWithContext(context.Background())
}

func (i SourceLinnworksMap) ToSourceLinnworksMapOutputWithContext(ctx context.Context) SourceLinnworksMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLinnworksMapOutput)
}

type SourceLinnworksOutput struct{ *pulumi.OutputState }

func (SourceLinnworksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceLinnworks)(nil)).Elem()
}

func (o SourceLinnworksOutput) ToSourceLinnworksOutput() SourceLinnworksOutput {
	return o
}

func (o SourceLinnworksOutput) ToSourceLinnworksOutputWithContext(ctx context.Context) SourceLinnworksOutput {
	return o
}

func (o SourceLinnworksOutput) Configuration() SourceLinnworksConfigurationOutput {
	return o.ApplyT(func(v *SourceLinnworks) SourceLinnworksConfigurationOutput { return v.Configuration }).(SourceLinnworksConfigurationOutput)
}

func (o SourceLinnworksOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceLinnworks) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceLinnworksOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceLinnworks) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceLinnworksOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceLinnworks) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceLinnworksOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceLinnworks) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceLinnworksOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceLinnworks) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceLinnworksArrayOutput struct{ *pulumi.OutputState }

func (SourceLinnworksArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceLinnworks)(nil)).Elem()
}

func (o SourceLinnworksArrayOutput) ToSourceLinnworksArrayOutput() SourceLinnworksArrayOutput {
	return o
}

func (o SourceLinnworksArrayOutput) ToSourceLinnworksArrayOutputWithContext(ctx context.Context) SourceLinnworksArrayOutput {
	return o
}

func (o SourceLinnworksArrayOutput) Index(i pulumi.IntInput) SourceLinnworksOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceLinnworks {
		return vs[0].([]*SourceLinnworks)[vs[1].(int)]
	}).(SourceLinnworksOutput)
}

type SourceLinnworksMapOutput struct{ *pulumi.OutputState }

func (SourceLinnworksMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceLinnworks)(nil)).Elem()
}

func (o SourceLinnworksMapOutput) ToSourceLinnworksMapOutput() SourceLinnworksMapOutput {
	return o
}

func (o SourceLinnworksMapOutput) ToSourceLinnworksMapOutputWithContext(ctx context.Context) SourceLinnworksMapOutput {
	return o
}

func (o SourceLinnworksMapOutput) MapIndex(k pulumi.StringInput) SourceLinnworksOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceLinnworks {
		return vs[0].(map[string]*SourceLinnworks)[vs[1].(string)]
	}).(SourceLinnworksOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLinnworksInput)(nil)).Elem(), &SourceLinnworks{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLinnworksArrayInput)(nil)).Elem(), SourceLinnworksArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLinnworksMapInput)(nil)).Elem(), SourceLinnworksMap{})
	pulumi.RegisterOutputType(SourceLinnworksOutput{})
	pulumi.RegisterOutputType(SourceLinnworksArrayOutput{})
	pulumi.RegisterOutputType(SourceLinnworksMapOutput{})
}
