// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SourceSonarCloud Resource
type SourceSonarCloud struct {
	pulumi.CustomResourceState

	Configuration SourceSonarCloudConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput                 `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceSonarCloud registers a new resource with the given unique name, arguments, and options.
func NewSourceSonarCloud(ctx *pulumi.Context,
	name string, args *SourceSonarCloudArgs, opts ...pulumi.ResourceOption) (*SourceSonarCloud, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceSonarCloud
	err := ctx.RegisterResource("airbyte:index/sourceSonarCloud:SourceSonarCloud", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceSonarCloud gets an existing SourceSonarCloud resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceSonarCloud(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceSonarCloudState, opts ...pulumi.ResourceOption) (*SourceSonarCloud, error) {
	var resource SourceSonarCloud
	err := ctx.ReadResource("airbyte:index/sourceSonarCloud:SourceSonarCloud", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceSonarCloud resources.
type sourceSonarCloudState struct {
	Configuration *SourceSonarCloudConfiguration `pulumi:"configuration"`
	Name          *string                        `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceSonarCloudState struct {
	Configuration SourceSonarCloudConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceSonarCloudState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceSonarCloudState)(nil)).Elem()
}

type sourceSonarCloudArgs struct {
	Configuration SourceSonarCloudConfiguration `pulumi:"configuration"`
	Name          string                        `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceSonarCloud resource.
type SourceSonarCloudArgs struct {
	Configuration SourceSonarCloudConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceSonarCloudArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceSonarCloudArgs)(nil)).Elem()
}

type SourceSonarCloudInput interface {
	pulumi.Input

	ToSourceSonarCloudOutput() SourceSonarCloudOutput
	ToSourceSonarCloudOutputWithContext(ctx context.Context) SourceSonarCloudOutput
}

func (*SourceSonarCloud) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceSonarCloud)(nil)).Elem()
}

func (i *SourceSonarCloud) ToSourceSonarCloudOutput() SourceSonarCloudOutput {
	return i.ToSourceSonarCloudOutputWithContext(context.Background())
}

func (i *SourceSonarCloud) ToSourceSonarCloudOutputWithContext(ctx context.Context) SourceSonarCloudOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceSonarCloudOutput)
}

// SourceSonarCloudArrayInput is an input type that accepts SourceSonarCloudArray and SourceSonarCloudArrayOutput values.
// You can construct a concrete instance of `SourceSonarCloudArrayInput` via:
//
//	SourceSonarCloudArray{ SourceSonarCloudArgs{...} }
type SourceSonarCloudArrayInput interface {
	pulumi.Input

	ToSourceSonarCloudArrayOutput() SourceSonarCloudArrayOutput
	ToSourceSonarCloudArrayOutputWithContext(context.Context) SourceSonarCloudArrayOutput
}

type SourceSonarCloudArray []SourceSonarCloudInput

func (SourceSonarCloudArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceSonarCloud)(nil)).Elem()
}

func (i SourceSonarCloudArray) ToSourceSonarCloudArrayOutput() SourceSonarCloudArrayOutput {
	return i.ToSourceSonarCloudArrayOutputWithContext(context.Background())
}

func (i SourceSonarCloudArray) ToSourceSonarCloudArrayOutputWithContext(ctx context.Context) SourceSonarCloudArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceSonarCloudArrayOutput)
}

// SourceSonarCloudMapInput is an input type that accepts SourceSonarCloudMap and SourceSonarCloudMapOutput values.
// You can construct a concrete instance of `SourceSonarCloudMapInput` via:
//
//	SourceSonarCloudMap{ "key": SourceSonarCloudArgs{...} }
type SourceSonarCloudMapInput interface {
	pulumi.Input

	ToSourceSonarCloudMapOutput() SourceSonarCloudMapOutput
	ToSourceSonarCloudMapOutputWithContext(context.Context) SourceSonarCloudMapOutput
}

type SourceSonarCloudMap map[string]SourceSonarCloudInput

func (SourceSonarCloudMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceSonarCloud)(nil)).Elem()
}

func (i SourceSonarCloudMap) ToSourceSonarCloudMapOutput() SourceSonarCloudMapOutput {
	return i.ToSourceSonarCloudMapOutputWithContext(context.Background())
}

func (i SourceSonarCloudMap) ToSourceSonarCloudMapOutputWithContext(ctx context.Context) SourceSonarCloudMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceSonarCloudMapOutput)
}

type SourceSonarCloudOutput struct{ *pulumi.OutputState }

func (SourceSonarCloudOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceSonarCloud)(nil)).Elem()
}

func (o SourceSonarCloudOutput) ToSourceSonarCloudOutput() SourceSonarCloudOutput {
	return o
}

func (o SourceSonarCloudOutput) ToSourceSonarCloudOutputWithContext(ctx context.Context) SourceSonarCloudOutput {
	return o
}

func (o SourceSonarCloudOutput) Configuration() SourceSonarCloudConfigurationOutput {
	return o.ApplyT(func(v *SourceSonarCloud) SourceSonarCloudConfigurationOutput { return v.Configuration }).(SourceSonarCloudConfigurationOutput)
}

func (o SourceSonarCloudOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceSonarCloud) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceSonarCloudOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceSonarCloud) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceSonarCloudOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceSonarCloud) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceSonarCloudOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceSonarCloud) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceSonarCloudOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceSonarCloud) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceSonarCloudArrayOutput struct{ *pulumi.OutputState }

func (SourceSonarCloudArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceSonarCloud)(nil)).Elem()
}

func (o SourceSonarCloudArrayOutput) ToSourceSonarCloudArrayOutput() SourceSonarCloudArrayOutput {
	return o
}

func (o SourceSonarCloudArrayOutput) ToSourceSonarCloudArrayOutputWithContext(ctx context.Context) SourceSonarCloudArrayOutput {
	return o
}

func (o SourceSonarCloudArrayOutput) Index(i pulumi.IntInput) SourceSonarCloudOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceSonarCloud {
		return vs[0].([]*SourceSonarCloud)[vs[1].(int)]
	}).(SourceSonarCloudOutput)
}

type SourceSonarCloudMapOutput struct{ *pulumi.OutputState }

func (SourceSonarCloudMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceSonarCloud)(nil)).Elem()
}

func (o SourceSonarCloudMapOutput) ToSourceSonarCloudMapOutput() SourceSonarCloudMapOutput {
	return o
}

func (o SourceSonarCloudMapOutput) ToSourceSonarCloudMapOutputWithContext(ctx context.Context) SourceSonarCloudMapOutput {
	return o
}

func (o SourceSonarCloudMapOutput) MapIndex(k pulumi.StringInput) SourceSonarCloudOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceSonarCloud {
		return vs[0].(map[string]*SourceSonarCloud)[vs[1].(string)]
	}).(SourceSonarCloudOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceSonarCloudInput)(nil)).Elem(), &SourceSonarCloud{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceSonarCloudArrayInput)(nil)).Elem(), SourceSonarCloudArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceSonarCloudMapInput)(nil)).Elem(), SourceSonarCloudMap{})
	pulumi.RegisterOutputType(SourceSonarCloudOutput{})
	pulumi.RegisterOutputType(SourceSonarCloudArrayOutput{})
	pulumi.RegisterOutputType(SourceSonarCloudMapOutput{})
}
