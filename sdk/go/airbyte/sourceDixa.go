// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-airbyte/sdk/go/airbyte/internal"
)

// SourceDixa Resource
type SourceDixa struct {
	pulumi.CustomResourceState

	Configuration SourceDixaConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput           `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceDixa registers a new resource with the given unique name, arguments, and options.
func NewSourceDixa(ctx *pulumi.Context,
	name string, args *SourceDixaArgs, opts ...pulumi.ResourceOption) (*SourceDixa, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceDixa
	err := ctx.RegisterResource("airbyte:index/sourceDixa:SourceDixa", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceDixa gets an existing SourceDixa resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceDixa(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceDixaState, opts ...pulumi.ResourceOption) (*SourceDixa, error) {
	var resource SourceDixa
	err := ctx.ReadResource("airbyte:index/sourceDixa:SourceDixa", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceDixa resources.
type sourceDixaState struct {
	Configuration *SourceDixaConfiguration `pulumi:"configuration"`
	Name          *string                  `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceDixaState struct {
	Configuration SourceDixaConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceDixaState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceDixaState)(nil)).Elem()
}

type sourceDixaArgs struct {
	Configuration SourceDixaConfiguration `pulumi:"configuration"`
	Name          string                  `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceDixa resource.
type SourceDixaArgs struct {
	Configuration SourceDixaConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceDixaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceDixaArgs)(nil)).Elem()
}

type SourceDixaInput interface {
	pulumi.Input

	ToSourceDixaOutput() SourceDixaOutput
	ToSourceDixaOutputWithContext(ctx context.Context) SourceDixaOutput
}

func (*SourceDixa) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceDixa)(nil)).Elem()
}

func (i *SourceDixa) ToSourceDixaOutput() SourceDixaOutput {
	return i.ToSourceDixaOutputWithContext(context.Background())
}

func (i *SourceDixa) ToSourceDixaOutputWithContext(ctx context.Context) SourceDixaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceDixaOutput)
}

// SourceDixaArrayInput is an input type that accepts SourceDixaArray and SourceDixaArrayOutput values.
// You can construct a concrete instance of `SourceDixaArrayInput` via:
//
//	SourceDixaArray{ SourceDixaArgs{...} }
type SourceDixaArrayInput interface {
	pulumi.Input

	ToSourceDixaArrayOutput() SourceDixaArrayOutput
	ToSourceDixaArrayOutputWithContext(context.Context) SourceDixaArrayOutput
}

type SourceDixaArray []SourceDixaInput

func (SourceDixaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceDixa)(nil)).Elem()
}

func (i SourceDixaArray) ToSourceDixaArrayOutput() SourceDixaArrayOutput {
	return i.ToSourceDixaArrayOutputWithContext(context.Background())
}

func (i SourceDixaArray) ToSourceDixaArrayOutputWithContext(ctx context.Context) SourceDixaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceDixaArrayOutput)
}

// SourceDixaMapInput is an input type that accepts SourceDixaMap and SourceDixaMapOutput values.
// You can construct a concrete instance of `SourceDixaMapInput` via:
//
//	SourceDixaMap{ "key": SourceDixaArgs{...} }
type SourceDixaMapInput interface {
	pulumi.Input

	ToSourceDixaMapOutput() SourceDixaMapOutput
	ToSourceDixaMapOutputWithContext(context.Context) SourceDixaMapOutput
}

type SourceDixaMap map[string]SourceDixaInput

func (SourceDixaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceDixa)(nil)).Elem()
}

func (i SourceDixaMap) ToSourceDixaMapOutput() SourceDixaMapOutput {
	return i.ToSourceDixaMapOutputWithContext(context.Background())
}

func (i SourceDixaMap) ToSourceDixaMapOutputWithContext(ctx context.Context) SourceDixaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceDixaMapOutput)
}

type SourceDixaOutput struct{ *pulumi.OutputState }

func (SourceDixaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceDixa)(nil)).Elem()
}

func (o SourceDixaOutput) ToSourceDixaOutput() SourceDixaOutput {
	return o
}

func (o SourceDixaOutput) ToSourceDixaOutputWithContext(ctx context.Context) SourceDixaOutput {
	return o
}

func (o SourceDixaOutput) Configuration() SourceDixaConfigurationOutput {
	return o.ApplyT(func(v *SourceDixa) SourceDixaConfigurationOutput { return v.Configuration }).(SourceDixaConfigurationOutput)
}

func (o SourceDixaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceDixa) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceDixaOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceDixa) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceDixaOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceDixa) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceDixaOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceDixa) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceDixaOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceDixa) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceDixaArrayOutput struct{ *pulumi.OutputState }

func (SourceDixaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceDixa)(nil)).Elem()
}

func (o SourceDixaArrayOutput) ToSourceDixaArrayOutput() SourceDixaArrayOutput {
	return o
}

func (o SourceDixaArrayOutput) ToSourceDixaArrayOutputWithContext(ctx context.Context) SourceDixaArrayOutput {
	return o
}

func (o SourceDixaArrayOutput) Index(i pulumi.IntInput) SourceDixaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceDixa {
		return vs[0].([]*SourceDixa)[vs[1].(int)]
	}).(SourceDixaOutput)
}

type SourceDixaMapOutput struct{ *pulumi.OutputState }

func (SourceDixaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceDixa)(nil)).Elem()
}

func (o SourceDixaMapOutput) ToSourceDixaMapOutput() SourceDixaMapOutput {
	return o
}

func (o SourceDixaMapOutput) ToSourceDixaMapOutputWithContext(ctx context.Context) SourceDixaMapOutput {
	return o
}

func (o SourceDixaMapOutput) MapIndex(k pulumi.StringInput) SourceDixaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceDixa {
		return vs[0].(map[string]*SourceDixa)[vs[1].(string)]
	}).(SourceDixaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceDixaInput)(nil)).Elem(), &SourceDixa{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceDixaArrayInput)(nil)).Elem(), SourceDixaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceDixaMapInput)(nil)).Elem(), SourceDixaMap{})
	pulumi.RegisterOutputType(SourceDixaOutput{})
	pulumi.RegisterOutputType(SourceDixaArrayOutput{})
	pulumi.RegisterOutputType(SourceDixaMapOutput{})
}
