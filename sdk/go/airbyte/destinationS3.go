// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// DestinationS3 Resource
type DestinationS3 struct {
	pulumi.CustomResourceState

	Configuration   DestinationS3ConfigurationOutput `pulumi:"configuration"`
	DestinationId   pulumi.StringOutput              `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput              `pulumi:"destinationType"`
	Name            pulumi.StringOutput              `pulumi:"name"`
	WorkspaceId     pulumi.StringOutput              `pulumi:"workspaceId"`
}

// NewDestinationS3 registers a new resource with the given unique name, arguments, and options.
func NewDestinationS3(ctx *pulumi.Context,
	name string, args *DestinationS3Args, opts ...pulumi.ResourceOption) (*DestinationS3, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DestinationS3
	err := ctx.RegisterResource("airbyte:index/destinationS3:DestinationS3", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationS3 gets an existing DestinationS3 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationS3(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationS3State, opts ...pulumi.ResourceOption) (*DestinationS3, error) {
	var resource DestinationS3
	err := ctx.ReadResource("airbyte:index/destinationS3:DestinationS3", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationS3 resources.
type destinationS3State struct {
	Configuration   *DestinationS3Configuration `pulumi:"configuration"`
	DestinationId   *string                     `pulumi:"destinationId"`
	DestinationType *string                     `pulumi:"destinationType"`
	Name            *string                     `pulumi:"name"`
	WorkspaceId     *string                     `pulumi:"workspaceId"`
}

type DestinationS3State struct {
	Configuration   DestinationS3ConfigurationPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	WorkspaceId     pulumi.StringPtrInput
}

func (DestinationS3State) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationS3State)(nil)).Elem()
}

type destinationS3Args struct {
	Configuration DestinationS3Configuration `pulumi:"configuration"`
	Name          string                     `pulumi:"name"`
	WorkspaceId   string                     `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationS3 resource.
type DestinationS3Args struct {
	Configuration DestinationS3ConfigurationInput
	Name          pulumi.StringInput
	WorkspaceId   pulumi.StringInput
}

func (DestinationS3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationS3Args)(nil)).Elem()
}

type DestinationS3Input interface {
	pulumi.Input

	ToDestinationS3Output() DestinationS3Output
	ToDestinationS3OutputWithContext(ctx context.Context) DestinationS3Output
}

func (*DestinationS3) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationS3)(nil)).Elem()
}

func (i *DestinationS3) ToDestinationS3Output() DestinationS3Output {
	return i.ToDestinationS3OutputWithContext(context.Background())
}

func (i *DestinationS3) ToDestinationS3OutputWithContext(ctx context.Context) DestinationS3Output {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationS3Output)
}

// DestinationS3ArrayInput is an input type that accepts DestinationS3Array and DestinationS3ArrayOutput values.
// You can construct a concrete instance of `DestinationS3ArrayInput` via:
//
//	DestinationS3Array{ DestinationS3Args{...} }
type DestinationS3ArrayInput interface {
	pulumi.Input

	ToDestinationS3ArrayOutput() DestinationS3ArrayOutput
	ToDestinationS3ArrayOutputWithContext(context.Context) DestinationS3ArrayOutput
}

type DestinationS3Array []DestinationS3Input

func (DestinationS3Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationS3)(nil)).Elem()
}

func (i DestinationS3Array) ToDestinationS3ArrayOutput() DestinationS3ArrayOutput {
	return i.ToDestinationS3ArrayOutputWithContext(context.Background())
}

func (i DestinationS3Array) ToDestinationS3ArrayOutputWithContext(ctx context.Context) DestinationS3ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationS3ArrayOutput)
}

// DestinationS3MapInput is an input type that accepts DestinationS3Map and DestinationS3MapOutput values.
// You can construct a concrete instance of `DestinationS3MapInput` via:
//
//	DestinationS3Map{ "key": DestinationS3Args{...} }
type DestinationS3MapInput interface {
	pulumi.Input

	ToDestinationS3MapOutput() DestinationS3MapOutput
	ToDestinationS3MapOutputWithContext(context.Context) DestinationS3MapOutput
}

type DestinationS3Map map[string]DestinationS3Input

func (DestinationS3Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationS3)(nil)).Elem()
}

func (i DestinationS3Map) ToDestinationS3MapOutput() DestinationS3MapOutput {
	return i.ToDestinationS3MapOutputWithContext(context.Background())
}

func (i DestinationS3Map) ToDestinationS3MapOutputWithContext(ctx context.Context) DestinationS3MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationS3MapOutput)
}

type DestinationS3Output struct{ *pulumi.OutputState }

func (DestinationS3Output) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationS3)(nil)).Elem()
}

func (o DestinationS3Output) ToDestinationS3Output() DestinationS3Output {
	return o
}

func (o DestinationS3Output) ToDestinationS3OutputWithContext(ctx context.Context) DestinationS3Output {
	return o
}

func (o DestinationS3Output) Configuration() DestinationS3ConfigurationOutput {
	return o.ApplyT(func(v *DestinationS3) DestinationS3ConfigurationOutput { return v.Configuration }).(DestinationS3ConfigurationOutput)
}

func (o DestinationS3Output) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationS3) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationS3Output) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationS3) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

func (o DestinationS3Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationS3) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationS3Output) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationS3) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type DestinationS3ArrayOutput struct{ *pulumi.OutputState }

func (DestinationS3ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationS3)(nil)).Elem()
}

func (o DestinationS3ArrayOutput) ToDestinationS3ArrayOutput() DestinationS3ArrayOutput {
	return o
}

func (o DestinationS3ArrayOutput) ToDestinationS3ArrayOutputWithContext(ctx context.Context) DestinationS3ArrayOutput {
	return o
}

func (o DestinationS3ArrayOutput) Index(i pulumi.IntInput) DestinationS3Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DestinationS3 {
		return vs[0].([]*DestinationS3)[vs[1].(int)]
	}).(DestinationS3Output)
}

type DestinationS3MapOutput struct{ *pulumi.OutputState }

func (DestinationS3MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationS3)(nil)).Elem()
}

func (o DestinationS3MapOutput) ToDestinationS3MapOutput() DestinationS3MapOutput {
	return o
}

func (o DestinationS3MapOutput) ToDestinationS3MapOutputWithContext(ctx context.Context) DestinationS3MapOutput {
	return o
}

func (o DestinationS3MapOutput) MapIndex(k pulumi.StringInput) DestinationS3Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DestinationS3 {
		return vs[0].(map[string]*DestinationS3)[vs[1].(string)]
	}).(DestinationS3Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationS3Input)(nil)).Elem(), &DestinationS3{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationS3ArrayInput)(nil)).Elem(), DestinationS3Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationS3MapInput)(nil)).Elem(), DestinationS3Map{})
	pulumi.RegisterOutputType(DestinationS3Output{})
	pulumi.RegisterOutputType(DestinationS3ArrayOutput{})
	pulumi.RegisterOutputType(DestinationS3MapOutput{})
}
