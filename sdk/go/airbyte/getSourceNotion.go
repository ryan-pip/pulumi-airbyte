// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupSourceNotion(ctx *pulumi.Context, args *LookupSourceNotionArgs, opts ...pulumi.InvokeOption) (*LookupSourceNotionResult, error) {
	var rv LookupSourceNotionResult
	err := ctx.Invoke("airbyte:index/getSourceNotion:getSourceNotion", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSourceNotion.
type LookupSourceNotionArgs struct {
	SecretId *string `pulumi:"secretId"`
	SourceId string  `pulumi:"sourceId"`
}

// A collection of values returned by getSourceNotion.
type LookupSourceNotionResult struct {
	Configuration GetSourceNotionConfiguration `pulumi:"configuration"`
	// The provider-assigned unique ID for this managed resource.
	Id          string  `pulumi:"id"`
	Name        string  `pulumi:"name"`
	SecretId    *string `pulumi:"secretId"`
	SourceId    string  `pulumi:"sourceId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

func LookupSourceNotionOutput(ctx *pulumi.Context, args LookupSourceNotionOutputArgs, opts ...pulumi.InvokeOption) LookupSourceNotionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSourceNotionResult, error) {
			args := v.(LookupSourceNotionArgs)
			r, err := LookupSourceNotion(ctx, &args, opts...)
			var s LookupSourceNotionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSourceNotionResultOutput)
}

// A collection of arguments for invoking getSourceNotion.
type LookupSourceNotionOutputArgs struct {
	SecretId pulumi.StringPtrInput `pulumi:"secretId"`
	SourceId pulumi.StringInput    `pulumi:"sourceId"`
}

func (LookupSourceNotionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSourceNotionArgs)(nil)).Elem()
}

// A collection of values returned by getSourceNotion.
type LookupSourceNotionResultOutput struct{ *pulumi.OutputState }

func (LookupSourceNotionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSourceNotionResult)(nil)).Elem()
}

func (o LookupSourceNotionResultOutput) ToLookupSourceNotionResultOutput() LookupSourceNotionResultOutput {
	return o
}

func (o LookupSourceNotionResultOutput) ToLookupSourceNotionResultOutputWithContext(ctx context.Context) LookupSourceNotionResultOutput {
	return o
}

func (o LookupSourceNotionResultOutput) Configuration() GetSourceNotionConfigurationOutput {
	return o.ApplyT(func(v LookupSourceNotionResult) GetSourceNotionConfiguration { return v.Configuration }).(GetSourceNotionConfigurationOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSourceNotionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceNotionResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSourceNotionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceNotionResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupSourceNotionResultOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSourceNotionResult) *string { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o LookupSourceNotionResultOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceNotionResult) string { return v.SourceId }).(pulumi.StringOutput)
}

func (o LookupSourceNotionResultOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceNotionResult) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSourceNotionResultOutput{})
}
