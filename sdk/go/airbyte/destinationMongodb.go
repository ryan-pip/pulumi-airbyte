// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-airbyte/sdk/go/airbyte/internal"
)

// DestinationMongodb Resource
type DestinationMongodb struct {
	pulumi.CustomResourceState

	Configuration   DestinationMongodbConfigurationOutput `pulumi:"configuration"`
	DestinationId   pulumi.StringOutput                   `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput                   `pulumi:"destinationType"`
	Name            pulumi.StringOutput                   `pulumi:"name"`
	WorkspaceId     pulumi.StringOutput                   `pulumi:"workspaceId"`
}

// NewDestinationMongodb registers a new resource with the given unique name, arguments, and options.
func NewDestinationMongodb(ctx *pulumi.Context,
	name string, args *DestinationMongodbArgs, opts ...pulumi.ResourceOption) (*DestinationMongodb, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DestinationMongodb
	err := ctx.RegisterResource("airbyte:index/destinationMongodb:DestinationMongodb", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationMongodb gets an existing DestinationMongodb resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationMongodb(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationMongodbState, opts ...pulumi.ResourceOption) (*DestinationMongodb, error) {
	var resource DestinationMongodb
	err := ctx.ReadResource("airbyte:index/destinationMongodb:DestinationMongodb", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationMongodb resources.
type destinationMongodbState struct {
	Configuration   *DestinationMongodbConfiguration `pulumi:"configuration"`
	DestinationId   *string                          `pulumi:"destinationId"`
	DestinationType *string                          `pulumi:"destinationType"`
	Name            *string                          `pulumi:"name"`
	WorkspaceId     *string                          `pulumi:"workspaceId"`
}

type DestinationMongodbState struct {
	Configuration   DestinationMongodbConfigurationPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	WorkspaceId     pulumi.StringPtrInput
}

func (DestinationMongodbState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationMongodbState)(nil)).Elem()
}

type destinationMongodbArgs struct {
	Configuration DestinationMongodbConfiguration `pulumi:"configuration"`
	Name          string                          `pulumi:"name"`
	WorkspaceId   string                          `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationMongodb resource.
type DestinationMongodbArgs struct {
	Configuration DestinationMongodbConfigurationInput
	Name          pulumi.StringInput
	WorkspaceId   pulumi.StringInput
}

func (DestinationMongodbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationMongodbArgs)(nil)).Elem()
}

type DestinationMongodbInput interface {
	pulumi.Input

	ToDestinationMongodbOutput() DestinationMongodbOutput
	ToDestinationMongodbOutputWithContext(ctx context.Context) DestinationMongodbOutput
}

func (*DestinationMongodb) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationMongodb)(nil)).Elem()
}

func (i *DestinationMongodb) ToDestinationMongodbOutput() DestinationMongodbOutput {
	return i.ToDestinationMongodbOutputWithContext(context.Background())
}

func (i *DestinationMongodb) ToDestinationMongodbOutputWithContext(ctx context.Context) DestinationMongodbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationMongodbOutput)
}

// DestinationMongodbArrayInput is an input type that accepts DestinationMongodbArray and DestinationMongodbArrayOutput values.
// You can construct a concrete instance of `DestinationMongodbArrayInput` via:
//
//	DestinationMongodbArray{ DestinationMongodbArgs{...} }
type DestinationMongodbArrayInput interface {
	pulumi.Input

	ToDestinationMongodbArrayOutput() DestinationMongodbArrayOutput
	ToDestinationMongodbArrayOutputWithContext(context.Context) DestinationMongodbArrayOutput
}

type DestinationMongodbArray []DestinationMongodbInput

func (DestinationMongodbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationMongodb)(nil)).Elem()
}

func (i DestinationMongodbArray) ToDestinationMongodbArrayOutput() DestinationMongodbArrayOutput {
	return i.ToDestinationMongodbArrayOutputWithContext(context.Background())
}

func (i DestinationMongodbArray) ToDestinationMongodbArrayOutputWithContext(ctx context.Context) DestinationMongodbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationMongodbArrayOutput)
}

// DestinationMongodbMapInput is an input type that accepts DestinationMongodbMap and DestinationMongodbMapOutput values.
// You can construct a concrete instance of `DestinationMongodbMapInput` via:
//
//	DestinationMongodbMap{ "key": DestinationMongodbArgs{...} }
type DestinationMongodbMapInput interface {
	pulumi.Input

	ToDestinationMongodbMapOutput() DestinationMongodbMapOutput
	ToDestinationMongodbMapOutputWithContext(context.Context) DestinationMongodbMapOutput
}

type DestinationMongodbMap map[string]DestinationMongodbInput

func (DestinationMongodbMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationMongodb)(nil)).Elem()
}

func (i DestinationMongodbMap) ToDestinationMongodbMapOutput() DestinationMongodbMapOutput {
	return i.ToDestinationMongodbMapOutputWithContext(context.Background())
}

func (i DestinationMongodbMap) ToDestinationMongodbMapOutputWithContext(ctx context.Context) DestinationMongodbMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationMongodbMapOutput)
}

type DestinationMongodbOutput struct{ *pulumi.OutputState }

func (DestinationMongodbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationMongodb)(nil)).Elem()
}

func (o DestinationMongodbOutput) ToDestinationMongodbOutput() DestinationMongodbOutput {
	return o
}

func (o DestinationMongodbOutput) ToDestinationMongodbOutputWithContext(ctx context.Context) DestinationMongodbOutput {
	return o
}

func (o DestinationMongodbOutput) Configuration() DestinationMongodbConfigurationOutput {
	return o.ApplyT(func(v *DestinationMongodb) DestinationMongodbConfigurationOutput { return v.Configuration }).(DestinationMongodbConfigurationOutput)
}

func (o DestinationMongodbOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationMongodb) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationMongodbOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationMongodb) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

func (o DestinationMongodbOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationMongodb) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationMongodbOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationMongodb) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type DestinationMongodbArrayOutput struct{ *pulumi.OutputState }

func (DestinationMongodbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationMongodb)(nil)).Elem()
}

func (o DestinationMongodbArrayOutput) ToDestinationMongodbArrayOutput() DestinationMongodbArrayOutput {
	return o
}

func (o DestinationMongodbArrayOutput) ToDestinationMongodbArrayOutputWithContext(ctx context.Context) DestinationMongodbArrayOutput {
	return o
}

func (o DestinationMongodbArrayOutput) Index(i pulumi.IntInput) DestinationMongodbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DestinationMongodb {
		return vs[0].([]*DestinationMongodb)[vs[1].(int)]
	}).(DestinationMongodbOutput)
}

type DestinationMongodbMapOutput struct{ *pulumi.OutputState }

func (DestinationMongodbMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationMongodb)(nil)).Elem()
}

func (o DestinationMongodbMapOutput) ToDestinationMongodbMapOutput() DestinationMongodbMapOutput {
	return o
}

func (o DestinationMongodbMapOutput) ToDestinationMongodbMapOutputWithContext(ctx context.Context) DestinationMongodbMapOutput {
	return o
}

func (o DestinationMongodbMapOutput) MapIndex(k pulumi.StringInput) DestinationMongodbOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DestinationMongodb {
		return vs[0].(map[string]*DestinationMongodb)[vs[1].(string)]
	}).(DestinationMongodbOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationMongodbInput)(nil)).Elem(), &DestinationMongodb{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationMongodbArrayInput)(nil)).Elem(), DestinationMongodbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationMongodbMapInput)(nil)).Elem(), DestinationMongodbMap{})
	pulumi.RegisterOutputType(DestinationMongodbOutput{})
	pulumi.RegisterOutputType(DestinationMongodbArrayOutput{})
	pulumi.RegisterOutputType(DestinationMongodbMapOutput{})
}
