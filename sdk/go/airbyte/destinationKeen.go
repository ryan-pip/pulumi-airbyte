// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// DestinationKeen Resource
type DestinationKeen struct {
	pulumi.CustomResourceState

	Configuration   DestinationKeenConfigurationOutput `pulumi:"configuration"`
	DestinationId   pulumi.StringOutput                `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput                `pulumi:"destinationType"`
	Name            pulumi.StringOutput                `pulumi:"name"`
	WorkspaceId     pulumi.StringOutput                `pulumi:"workspaceId"`
}

// NewDestinationKeen registers a new resource with the given unique name, arguments, and options.
func NewDestinationKeen(ctx *pulumi.Context,
	name string, args *DestinationKeenArgs, opts ...pulumi.ResourceOption) (*DestinationKeen, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DestinationKeen
	err := ctx.RegisterResource("airbyte:index/destinationKeen:DestinationKeen", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationKeen gets an existing DestinationKeen resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationKeen(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationKeenState, opts ...pulumi.ResourceOption) (*DestinationKeen, error) {
	var resource DestinationKeen
	err := ctx.ReadResource("airbyte:index/destinationKeen:DestinationKeen", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationKeen resources.
type destinationKeenState struct {
	Configuration   *DestinationKeenConfiguration `pulumi:"configuration"`
	DestinationId   *string                       `pulumi:"destinationId"`
	DestinationType *string                       `pulumi:"destinationType"`
	Name            *string                       `pulumi:"name"`
	WorkspaceId     *string                       `pulumi:"workspaceId"`
}

type DestinationKeenState struct {
	Configuration   DestinationKeenConfigurationPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	WorkspaceId     pulumi.StringPtrInput
}

func (DestinationKeenState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationKeenState)(nil)).Elem()
}

type destinationKeenArgs struct {
	Configuration DestinationKeenConfiguration `pulumi:"configuration"`
	Name          string                       `pulumi:"name"`
	WorkspaceId   string                       `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationKeen resource.
type DestinationKeenArgs struct {
	Configuration DestinationKeenConfigurationInput
	Name          pulumi.StringInput
	WorkspaceId   pulumi.StringInput
}

func (DestinationKeenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationKeenArgs)(nil)).Elem()
}

type DestinationKeenInput interface {
	pulumi.Input

	ToDestinationKeenOutput() DestinationKeenOutput
	ToDestinationKeenOutputWithContext(ctx context.Context) DestinationKeenOutput
}

func (*DestinationKeen) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationKeen)(nil)).Elem()
}

func (i *DestinationKeen) ToDestinationKeenOutput() DestinationKeenOutput {
	return i.ToDestinationKeenOutputWithContext(context.Background())
}

func (i *DestinationKeen) ToDestinationKeenOutputWithContext(ctx context.Context) DestinationKeenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationKeenOutput)
}

// DestinationKeenArrayInput is an input type that accepts DestinationKeenArray and DestinationKeenArrayOutput values.
// You can construct a concrete instance of `DestinationKeenArrayInput` via:
//
//	DestinationKeenArray{ DestinationKeenArgs{...} }
type DestinationKeenArrayInput interface {
	pulumi.Input

	ToDestinationKeenArrayOutput() DestinationKeenArrayOutput
	ToDestinationKeenArrayOutputWithContext(context.Context) DestinationKeenArrayOutput
}

type DestinationKeenArray []DestinationKeenInput

func (DestinationKeenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationKeen)(nil)).Elem()
}

func (i DestinationKeenArray) ToDestinationKeenArrayOutput() DestinationKeenArrayOutput {
	return i.ToDestinationKeenArrayOutputWithContext(context.Background())
}

func (i DestinationKeenArray) ToDestinationKeenArrayOutputWithContext(ctx context.Context) DestinationKeenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationKeenArrayOutput)
}

// DestinationKeenMapInput is an input type that accepts DestinationKeenMap and DestinationKeenMapOutput values.
// You can construct a concrete instance of `DestinationKeenMapInput` via:
//
//	DestinationKeenMap{ "key": DestinationKeenArgs{...} }
type DestinationKeenMapInput interface {
	pulumi.Input

	ToDestinationKeenMapOutput() DestinationKeenMapOutput
	ToDestinationKeenMapOutputWithContext(context.Context) DestinationKeenMapOutput
}

type DestinationKeenMap map[string]DestinationKeenInput

func (DestinationKeenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationKeen)(nil)).Elem()
}

func (i DestinationKeenMap) ToDestinationKeenMapOutput() DestinationKeenMapOutput {
	return i.ToDestinationKeenMapOutputWithContext(context.Background())
}

func (i DestinationKeenMap) ToDestinationKeenMapOutputWithContext(ctx context.Context) DestinationKeenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationKeenMapOutput)
}

type DestinationKeenOutput struct{ *pulumi.OutputState }

func (DestinationKeenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationKeen)(nil)).Elem()
}

func (o DestinationKeenOutput) ToDestinationKeenOutput() DestinationKeenOutput {
	return o
}

func (o DestinationKeenOutput) ToDestinationKeenOutputWithContext(ctx context.Context) DestinationKeenOutput {
	return o
}

func (o DestinationKeenOutput) Configuration() DestinationKeenConfigurationOutput {
	return o.ApplyT(func(v *DestinationKeen) DestinationKeenConfigurationOutput { return v.Configuration }).(DestinationKeenConfigurationOutput)
}

func (o DestinationKeenOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationKeen) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationKeenOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationKeen) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

func (o DestinationKeenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationKeen) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationKeenOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationKeen) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type DestinationKeenArrayOutput struct{ *pulumi.OutputState }

func (DestinationKeenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationKeen)(nil)).Elem()
}

func (o DestinationKeenArrayOutput) ToDestinationKeenArrayOutput() DestinationKeenArrayOutput {
	return o
}

func (o DestinationKeenArrayOutput) ToDestinationKeenArrayOutputWithContext(ctx context.Context) DestinationKeenArrayOutput {
	return o
}

func (o DestinationKeenArrayOutput) Index(i pulumi.IntInput) DestinationKeenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DestinationKeen {
		return vs[0].([]*DestinationKeen)[vs[1].(int)]
	}).(DestinationKeenOutput)
}

type DestinationKeenMapOutput struct{ *pulumi.OutputState }

func (DestinationKeenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationKeen)(nil)).Elem()
}

func (o DestinationKeenMapOutput) ToDestinationKeenMapOutput() DestinationKeenMapOutput {
	return o
}

func (o DestinationKeenMapOutput) ToDestinationKeenMapOutputWithContext(ctx context.Context) DestinationKeenMapOutput {
	return o
}

func (o DestinationKeenMapOutput) MapIndex(k pulumi.StringInput) DestinationKeenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DestinationKeen {
		return vs[0].(map[string]*DestinationKeen)[vs[1].(string)]
	}).(DestinationKeenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationKeenInput)(nil)).Elem(), &DestinationKeen{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationKeenArrayInput)(nil)).Elem(), DestinationKeenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationKeenMapInput)(nil)).Elem(), DestinationKeenMap{})
	pulumi.RegisterOutputType(DestinationKeenOutput{})
	pulumi.RegisterOutputType(DestinationKeenArrayOutput{})
	pulumi.RegisterOutputType(DestinationKeenMapOutput{})
}
