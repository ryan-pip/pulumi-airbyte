// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DestinationElasticsearch struct {
	pulumi.CustomResourceState

	Configuration   DestinationElasticsearchConfigurationOutput `pulumi:"configuration"`
	DestinationId   pulumi.StringOutput                         `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput                         `pulumi:"destinationType"`
	Name            pulumi.StringOutput                         `pulumi:"name"`
	WorkspaceId     pulumi.StringOutput                         `pulumi:"workspaceId"`
}

// NewDestinationElasticsearch registers a new resource with the given unique name, arguments, and options.
func NewDestinationElasticsearch(ctx *pulumi.Context,
	name string, args *DestinationElasticsearchArgs, opts ...pulumi.ResourceOption) (*DestinationElasticsearch, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DestinationElasticsearch
	err := ctx.RegisterResource("airbyte:index/destinationElasticsearch:DestinationElasticsearch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationElasticsearch gets an existing DestinationElasticsearch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationElasticsearch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationElasticsearchState, opts ...pulumi.ResourceOption) (*DestinationElasticsearch, error) {
	var resource DestinationElasticsearch
	err := ctx.ReadResource("airbyte:index/destinationElasticsearch:DestinationElasticsearch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationElasticsearch resources.
type destinationElasticsearchState struct {
	Configuration   *DestinationElasticsearchConfiguration `pulumi:"configuration"`
	DestinationId   *string                                `pulumi:"destinationId"`
	DestinationType *string                                `pulumi:"destinationType"`
	Name            *string                                `pulumi:"name"`
	WorkspaceId     *string                                `pulumi:"workspaceId"`
}

type DestinationElasticsearchState struct {
	Configuration   DestinationElasticsearchConfigurationPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	WorkspaceId     pulumi.StringPtrInput
}

func (DestinationElasticsearchState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationElasticsearchState)(nil)).Elem()
}

type destinationElasticsearchArgs struct {
	Configuration DestinationElasticsearchConfiguration `pulumi:"configuration"`
	Name          string                                `pulumi:"name"`
	WorkspaceId   string                                `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationElasticsearch resource.
type DestinationElasticsearchArgs struct {
	Configuration DestinationElasticsearchConfigurationInput
	Name          pulumi.StringInput
	WorkspaceId   pulumi.StringInput
}

func (DestinationElasticsearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationElasticsearchArgs)(nil)).Elem()
}

type DestinationElasticsearchInput interface {
	pulumi.Input

	ToDestinationElasticsearchOutput() DestinationElasticsearchOutput
	ToDestinationElasticsearchOutputWithContext(ctx context.Context) DestinationElasticsearchOutput
}

func (*DestinationElasticsearch) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationElasticsearch)(nil)).Elem()
}

func (i *DestinationElasticsearch) ToDestinationElasticsearchOutput() DestinationElasticsearchOutput {
	return i.ToDestinationElasticsearchOutputWithContext(context.Background())
}

func (i *DestinationElasticsearch) ToDestinationElasticsearchOutputWithContext(ctx context.Context) DestinationElasticsearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationElasticsearchOutput)
}

type DestinationElasticsearchOutput struct{ *pulumi.OutputState }

func (DestinationElasticsearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationElasticsearch)(nil)).Elem()
}

func (o DestinationElasticsearchOutput) ToDestinationElasticsearchOutput() DestinationElasticsearchOutput {
	return o
}

func (o DestinationElasticsearchOutput) ToDestinationElasticsearchOutputWithContext(ctx context.Context) DestinationElasticsearchOutput {
	return o
}

func (o DestinationElasticsearchOutput) Configuration() DestinationElasticsearchConfigurationOutput {
	return o.ApplyT(func(v *DestinationElasticsearch) DestinationElasticsearchConfigurationOutput { return v.Configuration }).(DestinationElasticsearchConfigurationOutput)
}

func (o DestinationElasticsearchOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationElasticsearch) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationElasticsearchOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationElasticsearch) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

func (o DestinationElasticsearchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationElasticsearch) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationElasticsearchOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationElasticsearch) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationElasticsearchInput)(nil)).Elem(), &DestinationElasticsearch{})
	pulumi.RegisterOutputType(DestinationElasticsearchOutput{})
}
