// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-airbyte/sdk/go/airbyte/internal"
)

// SourceWhiskyHunter Resource
type SourceWhiskyHunter struct {
	pulumi.CustomResourceState

	Configuration SourceWhiskyHunterConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput                   `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceWhiskyHunter registers a new resource with the given unique name, arguments, and options.
func NewSourceWhiskyHunter(ctx *pulumi.Context,
	name string, args *SourceWhiskyHunterArgs, opts ...pulumi.ResourceOption) (*SourceWhiskyHunter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceWhiskyHunter
	err := ctx.RegisterResource("airbyte:index/sourceWhiskyHunter:SourceWhiskyHunter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceWhiskyHunter gets an existing SourceWhiskyHunter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceWhiskyHunter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceWhiskyHunterState, opts ...pulumi.ResourceOption) (*SourceWhiskyHunter, error) {
	var resource SourceWhiskyHunter
	err := ctx.ReadResource("airbyte:index/sourceWhiskyHunter:SourceWhiskyHunter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceWhiskyHunter resources.
type sourceWhiskyHunterState struct {
	Configuration *SourceWhiskyHunterConfiguration `pulumi:"configuration"`
	Name          *string                          `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceWhiskyHunterState struct {
	Configuration SourceWhiskyHunterConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceWhiskyHunterState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceWhiskyHunterState)(nil)).Elem()
}

type sourceWhiskyHunterArgs struct {
	Configuration SourceWhiskyHunterConfiguration `pulumi:"configuration"`
	Name          string                          `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceWhiskyHunter resource.
type SourceWhiskyHunterArgs struct {
	Configuration SourceWhiskyHunterConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceWhiskyHunterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceWhiskyHunterArgs)(nil)).Elem()
}

type SourceWhiskyHunterInput interface {
	pulumi.Input

	ToSourceWhiskyHunterOutput() SourceWhiskyHunterOutput
	ToSourceWhiskyHunterOutputWithContext(ctx context.Context) SourceWhiskyHunterOutput
}

func (*SourceWhiskyHunter) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceWhiskyHunter)(nil)).Elem()
}

func (i *SourceWhiskyHunter) ToSourceWhiskyHunterOutput() SourceWhiskyHunterOutput {
	return i.ToSourceWhiskyHunterOutputWithContext(context.Background())
}

func (i *SourceWhiskyHunter) ToSourceWhiskyHunterOutputWithContext(ctx context.Context) SourceWhiskyHunterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceWhiskyHunterOutput)
}

// SourceWhiskyHunterArrayInput is an input type that accepts SourceWhiskyHunterArray and SourceWhiskyHunterArrayOutput values.
// You can construct a concrete instance of `SourceWhiskyHunterArrayInput` via:
//
//	SourceWhiskyHunterArray{ SourceWhiskyHunterArgs{...} }
type SourceWhiskyHunterArrayInput interface {
	pulumi.Input

	ToSourceWhiskyHunterArrayOutput() SourceWhiskyHunterArrayOutput
	ToSourceWhiskyHunterArrayOutputWithContext(context.Context) SourceWhiskyHunterArrayOutput
}

type SourceWhiskyHunterArray []SourceWhiskyHunterInput

func (SourceWhiskyHunterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceWhiskyHunter)(nil)).Elem()
}

func (i SourceWhiskyHunterArray) ToSourceWhiskyHunterArrayOutput() SourceWhiskyHunterArrayOutput {
	return i.ToSourceWhiskyHunterArrayOutputWithContext(context.Background())
}

func (i SourceWhiskyHunterArray) ToSourceWhiskyHunterArrayOutputWithContext(ctx context.Context) SourceWhiskyHunterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceWhiskyHunterArrayOutput)
}

// SourceWhiskyHunterMapInput is an input type that accepts SourceWhiskyHunterMap and SourceWhiskyHunterMapOutput values.
// You can construct a concrete instance of `SourceWhiskyHunterMapInput` via:
//
//	SourceWhiskyHunterMap{ "key": SourceWhiskyHunterArgs{...} }
type SourceWhiskyHunterMapInput interface {
	pulumi.Input

	ToSourceWhiskyHunterMapOutput() SourceWhiskyHunterMapOutput
	ToSourceWhiskyHunterMapOutputWithContext(context.Context) SourceWhiskyHunterMapOutput
}

type SourceWhiskyHunterMap map[string]SourceWhiskyHunterInput

func (SourceWhiskyHunterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceWhiskyHunter)(nil)).Elem()
}

func (i SourceWhiskyHunterMap) ToSourceWhiskyHunterMapOutput() SourceWhiskyHunterMapOutput {
	return i.ToSourceWhiskyHunterMapOutputWithContext(context.Background())
}

func (i SourceWhiskyHunterMap) ToSourceWhiskyHunterMapOutputWithContext(ctx context.Context) SourceWhiskyHunterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceWhiskyHunterMapOutput)
}

type SourceWhiskyHunterOutput struct{ *pulumi.OutputState }

func (SourceWhiskyHunterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceWhiskyHunter)(nil)).Elem()
}

func (o SourceWhiskyHunterOutput) ToSourceWhiskyHunterOutput() SourceWhiskyHunterOutput {
	return o
}

func (o SourceWhiskyHunterOutput) ToSourceWhiskyHunterOutputWithContext(ctx context.Context) SourceWhiskyHunterOutput {
	return o
}

func (o SourceWhiskyHunterOutput) Configuration() SourceWhiskyHunterConfigurationOutput {
	return o.ApplyT(func(v *SourceWhiskyHunter) SourceWhiskyHunterConfigurationOutput { return v.Configuration }).(SourceWhiskyHunterConfigurationOutput)
}

func (o SourceWhiskyHunterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceWhiskyHunter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceWhiskyHunterOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceWhiskyHunter) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceWhiskyHunterOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceWhiskyHunter) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceWhiskyHunterOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceWhiskyHunter) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceWhiskyHunterOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceWhiskyHunter) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceWhiskyHunterArrayOutput struct{ *pulumi.OutputState }

func (SourceWhiskyHunterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceWhiskyHunter)(nil)).Elem()
}

func (o SourceWhiskyHunterArrayOutput) ToSourceWhiskyHunterArrayOutput() SourceWhiskyHunterArrayOutput {
	return o
}

func (o SourceWhiskyHunterArrayOutput) ToSourceWhiskyHunterArrayOutputWithContext(ctx context.Context) SourceWhiskyHunterArrayOutput {
	return o
}

func (o SourceWhiskyHunterArrayOutput) Index(i pulumi.IntInput) SourceWhiskyHunterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceWhiskyHunter {
		return vs[0].([]*SourceWhiskyHunter)[vs[1].(int)]
	}).(SourceWhiskyHunterOutput)
}

type SourceWhiskyHunterMapOutput struct{ *pulumi.OutputState }

func (SourceWhiskyHunterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceWhiskyHunter)(nil)).Elem()
}

func (o SourceWhiskyHunterMapOutput) ToSourceWhiskyHunterMapOutput() SourceWhiskyHunterMapOutput {
	return o
}

func (o SourceWhiskyHunterMapOutput) ToSourceWhiskyHunterMapOutputWithContext(ctx context.Context) SourceWhiskyHunterMapOutput {
	return o
}

func (o SourceWhiskyHunterMapOutput) MapIndex(k pulumi.StringInput) SourceWhiskyHunterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceWhiskyHunter {
		return vs[0].(map[string]*SourceWhiskyHunter)[vs[1].(string)]
	}).(SourceWhiskyHunterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceWhiskyHunterInput)(nil)).Elem(), &SourceWhiskyHunter{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceWhiskyHunterArrayInput)(nil)).Elem(), SourceWhiskyHunterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceWhiskyHunterMapInput)(nil)).Elem(), SourceWhiskyHunterMap{})
	pulumi.RegisterOutputType(SourceWhiskyHunterOutput{})
	pulumi.RegisterOutputType(SourceWhiskyHunterArrayOutput{})
	pulumi.RegisterOutputType(SourceWhiskyHunterMapOutput{})
}
