// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-airbyte/sdk/go/airbyte/internal"
)

// SourceRss Resource
type SourceRss struct {
	pulumi.CustomResourceState

	Configuration SourceRssConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput          `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceRss registers a new resource with the given unique name, arguments, and options.
func NewSourceRss(ctx *pulumi.Context,
	name string, args *SourceRssArgs, opts ...pulumi.ResourceOption) (*SourceRss, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceRss
	err := ctx.RegisterResource("airbyte:index/sourceRss:SourceRss", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceRss gets an existing SourceRss resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceRss(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceRssState, opts ...pulumi.ResourceOption) (*SourceRss, error) {
	var resource SourceRss
	err := ctx.ReadResource("airbyte:index/sourceRss:SourceRss", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceRss resources.
type sourceRssState struct {
	Configuration *SourceRssConfiguration `pulumi:"configuration"`
	Name          *string                 `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceRssState struct {
	Configuration SourceRssConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceRssState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceRssState)(nil)).Elem()
}

type sourceRssArgs struct {
	Configuration SourceRssConfiguration `pulumi:"configuration"`
	Name          string                 `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceRss resource.
type SourceRssArgs struct {
	Configuration SourceRssConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceRssArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceRssArgs)(nil)).Elem()
}

type SourceRssInput interface {
	pulumi.Input

	ToSourceRssOutput() SourceRssOutput
	ToSourceRssOutputWithContext(ctx context.Context) SourceRssOutput
}

func (*SourceRss) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceRss)(nil)).Elem()
}

func (i *SourceRss) ToSourceRssOutput() SourceRssOutput {
	return i.ToSourceRssOutputWithContext(context.Background())
}

func (i *SourceRss) ToSourceRssOutputWithContext(ctx context.Context) SourceRssOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRssOutput)
}

// SourceRssArrayInput is an input type that accepts SourceRssArray and SourceRssArrayOutput values.
// You can construct a concrete instance of `SourceRssArrayInput` via:
//
//	SourceRssArray{ SourceRssArgs{...} }
type SourceRssArrayInput interface {
	pulumi.Input

	ToSourceRssArrayOutput() SourceRssArrayOutput
	ToSourceRssArrayOutputWithContext(context.Context) SourceRssArrayOutput
}

type SourceRssArray []SourceRssInput

func (SourceRssArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceRss)(nil)).Elem()
}

func (i SourceRssArray) ToSourceRssArrayOutput() SourceRssArrayOutput {
	return i.ToSourceRssArrayOutputWithContext(context.Background())
}

func (i SourceRssArray) ToSourceRssArrayOutputWithContext(ctx context.Context) SourceRssArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRssArrayOutput)
}

// SourceRssMapInput is an input type that accepts SourceRssMap and SourceRssMapOutput values.
// You can construct a concrete instance of `SourceRssMapInput` via:
//
//	SourceRssMap{ "key": SourceRssArgs{...} }
type SourceRssMapInput interface {
	pulumi.Input

	ToSourceRssMapOutput() SourceRssMapOutput
	ToSourceRssMapOutputWithContext(context.Context) SourceRssMapOutput
}

type SourceRssMap map[string]SourceRssInput

func (SourceRssMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceRss)(nil)).Elem()
}

func (i SourceRssMap) ToSourceRssMapOutput() SourceRssMapOutput {
	return i.ToSourceRssMapOutputWithContext(context.Background())
}

func (i SourceRssMap) ToSourceRssMapOutputWithContext(ctx context.Context) SourceRssMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRssMapOutput)
}

type SourceRssOutput struct{ *pulumi.OutputState }

func (SourceRssOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceRss)(nil)).Elem()
}

func (o SourceRssOutput) ToSourceRssOutput() SourceRssOutput {
	return o
}

func (o SourceRssOutput) ToSourceRssOutputWithContext(ctx context.Context) SourceRssOutput {
	return o
}

func (o SourceRssOutput) Configuration() SourceRssConfigurationOutput {
	return o.ApplyT(func(v *SourceRss) SourceRssConfigurationOutput { return v.Configuration }).(SourceRssConfigurationOutput)
}

func (o SourceRssOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceRss) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceRssOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceRss) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceRssOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceRss) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceRssOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceRss) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceRssOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceRss) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceRssArrayOutput struct{ *pulumi.OutputState }

func (SourceRssArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceRss)(nil)).Elem()
}

func (o SourceRssArrayOutput) ToSourceRssArrayOutput() SourceRssArrayOutput {
	return o
}

func (o SourceRssArrayOutput) ToSourceRssArrayOutputWithContext(ctx context.Context) SourceRssArrayOutput {
	return o
}

func (o SourceRssArrayOutput) Index(i pulumi.IntInput) SourceRssOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceRss {
		return vs[0].([]*SourceRss)[vs[1].(int)]
	}).(SourceRssOutput)
}

type SourceRssMapOutput struct{ *pulumi.OutputState }

func (SourceRssMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceRss)(nil)).Elem()
}

func (o SourceRssMapOutput) ToSourceRssMapOutput() SourceRssMapOutput {
	return o
}

func (o SourceRssMapOutput) ToSourceRssMapOutputWithContext(ctx context.Context) SourceRssMapOutput {
	return o
}

func (o SourceRssMapOutput) MapIndex(k pulumi.StringInput) SourceRssOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceRss {
		return vs[0].(map[string]*SourceRss)[vs[1].(string)]
	}).(SourceRssOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceRssInput)(nil)).Elem(), &SourceRss{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceRssArrayInput)(nil)).Elem(), SourceRssArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceRssMapInput)(nil)).Elem(), SourceRssMap{})
	pulumi.RegisterOutputType(SourceRssOutput{})
	pulumi.RegisterOutputType(SourceRssArrayOutput{})
	pulumi.RegisterOutputType(SourceRssMapOutput{})
}
