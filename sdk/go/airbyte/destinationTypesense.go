// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-airbyte/sdk/go/airbyte/internal"
)

// DestinationTypesense Resource
type DestinationTypesense struct {
	pulumi.CustomResourceState

	Configuration   DestinationTypesenseConfigurationOutput `pulumi:"configuration"`
	DestinationId   pulumi.StringOutput                     `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput                     `pulumi:"destinationType"`
	Name            pulumi.StringOutput                     `pulumi:"name"`
	WorkspaceId     pulumi.StringOutput                     `pulumi:"workspaceId"`
}

// NewDestinationTypesense registers a new resource with the given unique name, arguments, and options.
func NewDestinationTypesense(ctx *pulumi.Context,
	name string, args *DestinationTypesenseArgs, opts ...pulumi.ResourceOption) (*DestinationTypesense, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DestinationTypesense
	err := ctx.RegisterResource("airbyte:index/destinationTypesense:DestinationTypesense", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationTypesense gets an existing DestinationTypesense resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationTypesense(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationTypesenseState, opts ...pulumi.ResourceOption) (*DestinationTypesense, error) {
	var resource DestinationTypesense
	err := ctx.ReadResource("airbyte:index/destinationTypesense:DestinationTypesense", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationTypesense resources.
type destinationTypesenseState struct {
	Configuration   *DestinationTypesenseConfiguration `pulumi:"configuration"`
	DestinationId   *string                            `pulumi:"destinationId"`
	DestinationType *string                            `pulumi:"destinationType"`
	Name            *string                            `pulumi:"name"`
	WorkspaceId     *string                            `pulumi:"workspaceId"`
}

type DestinationTypesenseState struct {
	Configuration   DestinationTypesenseConfigurationPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	WorkspaceId     pulumi.StringPtrInput
}

func (DestinationTypesenseState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationTypesenseState)(nil)).Elem()
}

type destinationTypesenseArgs struct {
	Configuration DestinationTypesenseConfiguration `pulumi:"configuration"`
	Name          string                            `pulumi:"name"`
	WorkspaceId   string                            `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationTypesense resource.
type DestinationTypesenseArgs struct {
	Configuration DestinationTypesenseConfigurationInput
	Name          pulumi.StringInput
	WorkspaceId   pulumi.StringInput
}

func (DestinationTypesenseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationTypesenseArgs)(nil)).Elem()
}

type DestinationTypesenseInput interface {
	pulumi.Input

	ToDestinationTypesenseOutput() DestinationTypesenseOutput
	ToDestinationTypesenseOutputWithContext(ctx context.Context) DestinationTypesenseOutput
}

func (*DestinationTypesense) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationTypesense)(nil)).Elem()
}

func (i *DestinationTypesense) ToDestinationTypesenseOutput() DestinationTypesenseOutput {
	return i.ToDestinationTypesenseOutputWithContext(context.Background())
}

func (i *DestinationTypesense) ToDestinationTypesenseOutputWithContext(ctx context.Context) DestinationTypesenseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationTypesenseOutput)
}

// DestinationTypesenseArrayInput is an input type that accepts DestinationTypesenseArray and DestinationTypesenseArrayOutput values.
// You can construct a concrete instance of `DestinationTypesenseArrayInput` via:
//
//	DestinationTypesenseArray{ DestinationTypesenseArgs{...} }
type DestinationTypesenseArrayInput interface {
	pulumi.Input

	ToDestinationTypesenseArrayOutput() DestinationTypesenseArrayOutput
	ToDestinationTypesenseArrayOutputWithContext(context.Context) DestinationTypesenseArrayOutput
}

type DestinationTypesenseArray []DestinationTypesenseInput

func (DestinationTypesenseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationTypesense)(nil)).Elem()
}

func (i DestinationTypesenseArray) ToDestinationTypesenseArrayOutput() DestinationTypesenseArrayOutput {
	return i.ToDestinationTypesenseArrayOutputWithContext(context.Background())
}

func (i DestinationTypesenseArray) ToDestinationTypesenseArrayOutputWithContext(ctx context.Context) DestinationTypesenseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationTypesenseArrayOutput)
}

// DestinationTypesenseMapInput is an input type that accepts DestinationTypesenseMap and DestinationTypesenseMapOutput values.
// You can construct a concrete instance of `DestinationTypesenseMapInput` via:
//
//	DestinationTypesenseMap{ "key": DestinationTypesenseArgs{...} }
type DestinationTypesenseMapInput interface {
	pulumi.Input

	ToDestinationTypesenseMapOutput() DestinationTypesenseMapOutput
	ToDestinationTypesenseMapOutputWithContext(context.Context) DestinationTypesenseMapOutput
}

type DestinationTypesenseMap map[string]DestinationTypesenseInput

func (DestinationTypesenseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationTypesense)(nil)).Elem()
}

func (i DestinationTypesenseMap) ToDestinationTypesenseMapOutput() DestinationTypesenseMapOutput {
	return i.ToDestinationTypesenseMapOutputWithContext(context.Background())
}

func (i DestinationTypesenseMap) ToDestinationTypesenseMapOutputWithContext(ctx context.Context) DestinationTypesenseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationTypesenseMapOutput)
}

type DestinationTypesenseOutput struct{ *pulumi.OutputState }

func (DestinationTypesenseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationTypesense)(nil)).Elem()
}

func (o DestinationTypesenseOutput) ToDestinationTypesenseOutput() DestinationTypesenseOutput {
	return o
}

func (o DestinationTypesenseOutput) ToDestinationTypesenseOutputWithContext(ctx context.Context) DestinationTypesenseOutput {
	return o
}

func (o DestinationTypesenseOutput) Configuration() DestinationTypesenseConfigurationOutput {
	return o.ApplyT(func(v *DestinationTypesense) DestinationTypesenseConfigurationOutput { return v.Configuration }).(DestinationTypesenseConfigurationOutput)
}

func (o DestinationTypesenseOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationTypesense) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationTypesenseOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationTypesense) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

func (o DestinationTypesenseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationTypesense) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationTypesenseOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationTypesense) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type DestinationTypesenseArrayOutput struct{ *pulumi.OutputState }

func (DestinationTypesenseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationTypesense)(nil)).Elem()
}

func (o DestinationTypesenseArrayOutput) ToDestinationTypesenseArrayOutput() DestinationTypesenseArrayOutput {
	return o
}

func (o DestinationTypesenseArrayOutput) ToDestinationTypesenseArrayOutputWithContext(ctx context.Context) DestinationTypesenseArrayOutput {
	return o
}

func (o DestinationTypesenseArrayOutput) Index(i pulumi.IntInput) DestinationTypesenseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DestinationTypesense {
		return vs[0].([]*DestinationTypesense)[vs[1].(int)]
	}).(DestinationTypesenseOutput)
}

type DestinationTypesenseMapOutput struct{ *pulumi.OutputState }

func (DestinationTypesenseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationTypesense)(nil)).Elem()
}

func (o DestinationTypesenseMapOutput) ToDestinationTypesenseMapOutput() DestinationTypesenseMapOutput {
	return o
}

func (o DestinationTypesenseMapOutput) ToDestinationTypesenseMapOutputWithContext(ctx context.Context) DestinationTypesenseMapOutput {
	return o
}

func (o DestinationTypesenseMapOutput) MapIndex(k pulumi.StringInput) DestinationTypesenseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DestinationTypesense {
		return vs[0].(map[string]*DestinationTypesense)[vs[1].(string)]
	}).(DestinationTypesenseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationTypesenseInput)(nil)).Elem(), &DestinationTypesense{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationTypesenseArrayInput)(nil)).Elem(), DestinationTypesenseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationTypesenseMapInput)(nil)).Elem(), DestinationTypesenseMap{})
	pulumi.RegisterOutputType(DestinationTypesenseOutput{})
	pulumi.RegisterOutputType(DestinationTypesenseArrayOutput{})
	pulumi.RegisterOutputType(DestinationTypesenseMapOutput{})
}
