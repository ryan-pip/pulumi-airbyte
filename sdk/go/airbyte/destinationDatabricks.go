// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-airbyte/sdk/go/airbyte/internal"
)

// DestinationDatabricks Resource
type DestinationDatabricks struct {
	pulumi.CustomResourceState

	Configuration   DestinationDatabricksConfigurationOutput `pulumi:"configuration"`
	DestinationId   pulumi.StringOutput                      `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput                      `pulumi:"destinationType"`
	Name            pulumi.StringOutput                      `pulumi:"name"`
	WorkspaceId     pulumi.StringOutput                      `pulumi:"workspaceId"`
}

// NewDestinationDatabricks registers a new resource with the given unique name, arguments, and options.
func NewDestinationDatabricks(ctx *pulumi.Context,
	name string, args *DestinationDatabricksArgs, opts ...pulumi.ResourceOption) (*DestinationDatabricks, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DestinationDatabricks
	err := ctx.RegisterResource("airbyte:index/destinationDatabricks:DestinationDatabricks", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationDatabricks gets an existing DestinationDatabricks resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationDatabricks(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationDatabricksState, opts ...pulumi.ResourceOption) (*DestinationDatabricks, error) {
	var resource DestinationDatabricks
	err := ctx.ReadResource("airbyte:index/destinationDatabricks:DestinationDatabricks", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationDatabricks resources.
type destinationDatabricksState struct {
	Configuration   *DestinationDatabricksConfiguration `pulumi:"configuration"`
	DestinationId   *string                             `pulumi:"destinationId"`
	DestinationType *string                             `pulumi:"destinationType"`
	Name            *string                             `pulumi:"name"`
	WorkspaceId     *string                             `pulumi:"workspaceId"`
}

type DestinationDatabricksState struct {
	Configuration   DestinationDatabricksConfigurationPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	WorkspaceId     pulumi.StringPtrInput
}

func (DestinationDatabricksState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationDatabricksState)(nil)).Elem()
}

type destinationDatabricksArgs struct {
	Configuration DestinationDatabricksConfiguration `pulumi:"configuration"`
	Name          string                             `pulumi:"name"`
	WorkspaceId   string                             `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationDatabricks resource.
type DestinationDatabricksArgs struct {
	Configuration DestinationDatabricksConfigurationInput
	Name          pulumi.StringInput
	WorkspaceId   pulumi.StringInput
}

func (DestinationDatabricksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationDatabricksArgs)(nil)).Elem()
}

type DestinationDatabricksInput interface {
	pulumi.Input

	ToDestinationDatabricksOutput() DestinationDatabricksOutput
	ToDestinationDatabricksOutputWithContext(ctx context.Context) DestinationDatabricksOutput
}

func (*DestinationDatabricks) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationDatabricks)(nil)).Elem()
}

func (i *DestinationDatabricks) ToDestinationDatabricksOutput() DestinationDatabricksOutput {
	return i.ToDestinationDatabricksOutputWithContext(context.Background())
}

func (i *DestinationDatabricks) ToDestinationDatabricksOutputWithContext(ctx context.Context) DestinationDatabricksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationDatabricksOutput)
}

// DestinationDatabricksArrayInput is an input type that accepts DestinationDatabricksArray and DestinationDatabricksArrayOutput values.
// You can construct a concrete instance of `DestinationDatabricksArrayInput` via:
//
//	DestinationDatabricksArray{ DestinationDatabricksArgs{...} }
type DestinationDatabricksArrayInput interface {
	pulumi.Input

	ToDestinationDatabricksArrayOutput() DestinationDatabricksArrayOutput
	ToDestinationDatabricksArrayOutputWithContext(context.Context) DestinationDatabricksArrayOutput
}

type DestinationDatabricksArray []DestinationDatabricksInput

func (DestinationDatabricksArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationDatabricks)(nil)).Elem()
}

func (i DestinationDatabricksArray) ToDestinationDatabricksArrayOutput() DestinationDatabricksArrayOutput {
	return i.ToDestinationDatabricksArrayOutputWithContext(context.Background())
}

func (i DestinationDatabricksArray) ToDestinationDatabricksArrayOutputWithContext(ctx context.Context) DestinationDatabricksArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationDatabricksArrayOutput)
}

// DestinationDatabricksMapInput is an input type that accepts DestinationDatabricksMap and DestinationDatabricksMapOutput values.
// You can construct a concrete instance of `DestinationDatabricksMapInput` via:
//
//	DestinationDatabricksMap{ "key": DestinationDatabricksArgs{...} }
type DestinationDatabricksMapInput interface {
	pulumi.Input

	ToDestinationDatabricksMapOutput() DestinationDatabricksMapOutput
	ToDestinationDatabricksMapOutputWithContext(context.Context) DestinationDatabricksMapOutput
}

type DestinationDatabricksMap map[string]DestinationDatabricksInput

func (DestinationDatabricksMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationDatabricks)(nil)).Elem()
}

func (i DestinationDatabricksMap) ToDestinationDatabricksMapOutput() DestinationDatabricksMapOutput {
	return i.ToDestinationDatabricksMapOutputWithContext(context.Background())
}

func (i DestinationDatabricksMap) ToDestinationDatabricksMapOutputWithContext(ctx context.Context) DestinationDatabricksMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationDatabricksMapOutput)
}

type DestinationDatabricksOutput struct{ *pulumi.OutputState }

func (DestinationDatabricksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationDatabricks)(nil)).Elem()
}

func (o DestinationDatabricksOutput) ToDestinationDatabricksOutput() DestinationDatabricksOutput {
	return o
}

func (o DestinationDatabricksOutput) ToDestinationDatabricksOutputWithContext(ctx context.Context) DestinationDatabricksOutput {
	return o
}

func (o DestinationDatabricksOutput) Configuration() DestinationDatabricksConfigurationOutput {
	return o.ApplyT(func(v *DestinationDatabricks) DestinationDatabricksConfigurationOutput { return v.Configuration }).(DestinationDatabricksConfigurationOutput)
}

func (o DestinationDatabricksOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationDatabricks) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationDatabricksOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationDatabricks) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

func (o DestinationDatabricksOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationDatabricks) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationDatabricksOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationDatabricks) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type DestinationDatabricksArrayOutput struct{ *pulumi.OutputState }

func (DestinationDatabricksArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationDatabricks)(nil)).Elem()
}

func (o DestinationDatabricksArrayOutput) ToDestinationDatabricksArrayOutput() DestinationDatabricksArrayOutput {
	return o
}

func (o DestinationDatabricksArrayOutput) ToDestinationDatabricksArrayOutputWithContext(ctx context.Context) DestinationDatabricksArrayOutput {
	return o
}

func (o DestinationDatabricksArrayOutput) Index(i pulumi.IntInput) DestinationDatabricksOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DestinationDatabricks {
		return vs[0].([]*DestinationDatabricks)[vs[1].(int)]
	}).(DestinationDatabricksOutput)
}

type DestinationDatabricksMapOutput struct{ *pulumi.OutputState }

func (DestinationDatabricksMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationDatabricks)(nil)).Elem()
}

func (o DestinationDatabricksMapOutput) ToDestinationDatabricksMapOutput() DestinationDatabricksMapOutput {
	return o
}

func (o DestinationDatabricksMapOutput) ToDestinationDatabricksMapOutputWithContext(ctx context.Context) DestinationDatabricksMapOutput {
	return o
}

func (o DestinationDatabricksMapOutput) MapIndex(k pulumi.StringInput) DestinationDatabricksOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DestinationDatabricks {
		return vs[0].(map[string]*DestinationDatabricks)[vs[1].(string)]
	}).(DestinationDatabricksOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationDatabricksInput)(nil)).Elem(), &DestinationDatabricks{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationDatabricksArrayInput)(nil)).Elem(), DestinationDatabricksArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationDatabricksMapInput)(nil)).Elem(), DestinationDatabricksMap{})
	pulumi.RegisterOutputType(DestinationDatabricksOutput{})
	pulumi.RegisterOutputType(DestinationDatabricksArrayOutput{})
	pulumi.RegisterOutputType(DestinationDatabricksMapOutput{})
}
