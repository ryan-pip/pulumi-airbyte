// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-airbyte/sdk/go/airbyte/internal"
)

// SourceTempo Resource
type SourceTempo struct {
	pulumi.CustomResourceState

	Configuration SourceTempoConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput            `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceTempo registers a new resource with the given unique name, arguments, and options.
func NewSourceTempo(ctx *pulumi.Context,
	name string, args *SourceTempoArgs, opts ...pulumi.ResourceOption) (*SourceTempo, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceTempo
	err := ctx.RegisterResource("airbyte:index/sourceTempo:SourceTempo", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceTempo gets an existing SourceTempo resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceTempo(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceTempoState, opts ...pulumi.ResourceOption) (*SourceTempo, error) {
	var resource SourceTempo
	err := ctx.ReadResource("airbyte:index/sourceTempo:SourceTempo", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceTempo resources.
type sourceTempoState struct {
	Configuration *SourceTempoConfiguration `pulumi:"configuration"`
	Name          *string                   `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceTempoState struct {
	Configuration SourceTempoConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceTempoState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceTempoState)(nil)).Elem()
}

type sourceTempoArgs struct {
	Configuration SourceTempoConfiguration `pulumi:"configuration"`
	Name          string                   `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceTempo resource.
type SourceTempoArgs struct {
	Configuration SourceTempoConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceTempoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceTempoArgs)(nil)).Elem()
}

type SourceTempoInput interface {
	pulumi.Input

	ToSourceTempoOutput() SourceTempoOutput
	ToSourceTempoOutputWithContext(ctx context.Context) SourceTempoOutput
}

func (*SourceTempo) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceTempo)(nil)).Elem()
}

func (i *SourceTempo) ToSourceTempoOutput() SourceTempoOutput {
	return i.ToSourceTempoOutputWithContext(context.Background())
}

func (i *SourceTempo) ToSourceTempoOutputWithContext(ctx context.Context) SourceTempoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceTempoOutput)
}

// SourceTempoArrayInput is an input type that accepts SourceTempoArray and SourceTempoArrayOutput values.
// You can construct a concrete instance of `SourceTempoArrayInput` via:
//
//	SourceTempoArray{ SourceTempoArgs{...} }
type SourceTempoArrayInput interface {
	pulumi.Input

	ToSourceTempoArrayOutput() SourceTempoArrayOutput
	ToSourceTempoArrayOutputWithContext(context.Context) SourceTempoArrayOutput
}

type SourceTempoArray []SourceTempoInput

func (SourceTempoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceTempo)(nil)).Elem()
}

func (i SourceTempoArray) ToSourceTempoArrayOutput() SourceTempoArrayOutput {
	return i.ToSourceTempoArrayOutputWithContext(context.Background())
}

func (i SourceTempoArray) ToSourceTempoArrayOutputWithContext(ctx context.Context) SourceTempoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceTempoArrayOutput)
}

// SourceTempoMapInput is an input type that accepts SourceTempoMap and SourceTempoMapOutput values.
// You can construct a concrete instance of `SourceTempoMapInput` via:
//
//	SourceTempoMap{ "key": SourceTempoArgs{...} }
type SourceTempoMapInput interface {
	pulumi.Input

	ToSourceTempoMapOutput() SourceTempoMapOutput
	ToSourceTempoMapOutputWithContext(context.Context) SourceTempoMapOutput
}

type SourceTempoMap map[string]SourceTempoInput

func (SourceTempoMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceTempo)(nil)).Elem()
}

func (i SourceTempoMap) ToSourceTempoMapOutput() SourceTempoMapOutput {
	return i.ToSourceTempoMapOutputWithContext(context.Background())
}

func (i SourceTempoMap) ToSourceTempoMapOutputWithContext(ctx context.Context) SourceTempoMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceTempoMapOutput)
}

type SourceTempoOutput struct{ *pulumi.OutputState }

func (SourceTempoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceTempo)(nil)).Elem()
}

func (o SourceTempoOutput) ToSourceTempoOutput() SourceTempoOutput {
	return o
}

func (o SourceTempoOutput) ToSourceTempoOutputWithContext(ctx context.Context) SourceTempoOutput {
	return o
}

func (o SourceTempoOutput) Configuration() SourceTempoConfigurationOutput {
	return o.ApplyT(func(v *SourceTempo) SourceTempoConfigurationOutput { return v.Configuration }).(SourceTempoConfigurationOutput)
}

func (o SourceTempoOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceTempo) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceTempoOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceTempo) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceTempoOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceTempo) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceTempoOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceTempo) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceTempoOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceTempo) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceTempoArrayOutput struct{ *pulumi.OutputState }

func (SourceTempoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceTempo)(nil)).Elem()
}

func (o SourceTempoArrayOutput) ToSourceTempoArrayOutput() SourceTempoArrayOutput {
	return o
}

func (o SourceTempoArrayOutput) ToSourceTempoArrayOutputWithContext(ctx context.Context) SourceTempoArrayOutput {
	return o
}

func (o SourceTempoArrayOutput) Index(i pulumi.IntInput) SourceTempoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceTempo {
		return vs[0].([]*SourceTempo)[vs[1].(int)]
	}).(SourceTempoOutput)
}

type SourceTempoMapOutput struct{ *pulumi.OutputState }

func (SourceTempoMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceTempo)(nil)).Elem()
}

func (o SourceTempoMapOutput) ToSourceTempoMapOutput() SourceTempoMapOutput {
	return o
}

func (o SourceTempoMapOutput) ToSourceTempoMapOutputWithContext(ctx context.Context) SourceTempoMapOutput {
	return o
}

func (o SourceTempoMapOutput) MapIndex(k pulumi.StringInput) SourceTempoOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceTempo {
		return vs[0].(map[string]*SourceTempo)[vs[1].(string)]
	}).(SourceTempoOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceTempoInput)(nil)).Elem(), &SourceTempo{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceTempoArrayInput)(nil)).Elem(), SourceTempoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceTempoMapInput)(nil)).Elem(), SourceTempoMap{})
	pulumi.RegisterOutputType(SourceTempoOutput{})
	pulumi.RegisterOutputType(SourceTempoArrayOutput{})
	pulumi.RegisterOutputType(SourceTempoMapOutput{})
}
