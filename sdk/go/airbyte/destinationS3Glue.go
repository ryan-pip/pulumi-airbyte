// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DestinationS3Glue struct {
	pulumi.CustomResourceState

	Configuration   DestinationS3GlueConfigurationOutput `pulumi:"configuration"`
	DestinationId   pulumi.StringOutput                  `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput                  `pulumi:"destinationType"`
	Name            pulumi.StringOutput                  `pulumi:"name"`
	WorkspaceId     pulumi.StringOutput                  `pulumi:"workspaceId"`
}

// NewDestinationS3Glue registers a new resource with the given unique name, arguments, and options.
func NewDestinationS3Glue(ctx *pulumi.Context,
	name string, args *DestinationS3GlueArgs, opts ...pulumi.ResourceOption) (*DestinationS3Glue, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	var resource DestinationS3Glue
	err := ctx.RegisterResource("airbyte:index/destinationS3Glue:DestinationS3Glue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationS3Glue gets an existing DestinationS3Glue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationS3Glue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationS3GlueState, opts ...pulumi.ResourceOption) (*DestinationS3Glue, error) {
	var resource DestinationS3Glue
	err := ctx.ReadResource("airbyte:index/destinationS3Glue:DestinationS3Glue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationS3Glue resources.
type destinationS3GlueState struct {
	Configuration   *DestinationS3GlueConfiguration `pulumi:"configuration"`
	DestinationId   *string                         `pulumi:"destinationId"`
	DestinationType *string                         `pulumi:"destinationType"`
	Name            *string                         `pulumi:"name"`
	WorkspaceId     *string                         `pulumi:"workspaceId"`
}

type DestinationS3GlueState struct {
	Configuration   DestinationS3GlueConfigurationPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	WorkspaceId     pulumi.StringPtrInput
}

func (DestinationS3GlueState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationS3GlueState)(nil)).Elem()
}

type destinationS3GlueArgs struct {
	Configuration DestinationS3GlueConfiguration `pulumi:"configuration"`
	Name          string                         `pulumi:"name"`
	WorkspaceId   string                         `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationS3Glue resource.
type DestinationS3GlueArgs struct {
	Configuration DestinationS3GlueConfigurationInput
	Name          pulumi.StringInput
	WorkspaceId   pulumi.StringInput
}

func (DestinationS3GlueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationS3GlueArgs)(nil)).Elem()
}

type DestinationS3GlueInput interface {
	pulumi.Input

	ToDestinationS3GlueOutput() DestinationS3GlueOutput
	ToDestinationS3GlueOutputWithContext(ctx context.Context) DestinationS3GlueOutput
}

func (*DestinationS3Glue) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationS3Glue)(nil)).Elem()
}

func (i *DestinationS3Glue) ToDestinationS3GlueOutput() DestinationS3GlueOutput {
	return i.ToDestinationS3GlueOutputWithContext(context.Background())
}

func (i *DestinationS3Glue) ToDestinationS3GlueOutputWithContext(ctx context.Context) DestinationS3GlueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationS3GlueOutput)
}

type DestinationS3GlueOutput struct{ *pulumi.OutputState }

func (DestinationS3GlueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationS3Glue)(nil)).Elem()
}

func (o DestinationS3GlueOutput) ToDestinationS3GlueOutput() DestinationS3GlueOutput {
	return o
}

func (o DestinationS3GlueOutput) ToDestinationS3GlueOutputWithContext(ctx context.Context) DestinationS3GlueOutput {
	return o
}

func (o DestinationS3GlueOutput) Configuration() DestinationS3GlueConfigurationOutput {
	return o.ApplyT(func(v *DestinationS3Glue) DestinationS3GlueConfigurationOutput { return v.Configuration }).(DestinationS3GlueConfigurationOutput)
}

func (o DestinationS3GlueOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationS3Glue) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationS3GlueOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationS3Glue) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

func (o DestinationS3GlueOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationS3Glue) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationS3GlueOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationS3Glue) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationS3GlueInput)(nil)).Elem(), &DestinationS3Glue{})
	pulumi.RegisterOutputType(DestinationS3GlueOutput{})
}
