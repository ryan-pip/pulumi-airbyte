// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// DestinationConvex DataSource
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := airbyte.LookupDestinationConvex(ctx, &airbyte.LookupDestinationConvexArgs{
//				DestinationId: "...my_destination_id...",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDestinationConvex(ctx *pulumi.Context, args *LookupDestinationConvexArgs, opts ...pulumi.InvokeOption) (*LookupDestinationConvexResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDestinationConvexResult
	err := ctx.Invoke("airbyte:index/getDestinationConvex:getDestinationConvex", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDestinationConvex.
type LookupDestinationConvexArgs struct {
	DestinationId string `pulumi:"destinationId"`
}

// A collection of values returned by getDestinationConvex.
type LookupDestinationConvexResult struct {
	Configuration GetDestinationConvexConfiguration `pulumi:"configuration"`
	DestinationId string                            `pulumi:"destinationId"`
	// The provider-assigned unique ID for this managed resource.
	Id          string `pulumi:"id"`
	Name        string `pulumi:"name"`
	WorkspaceId string `pulumi:"workspaceId"`
}

func LookupDestinationConvexOutput(ctx *pulumi.Context, args LookupDestinationConvexOutputArgs, opts ...pulumi.InvokeOption) LookupDestinationConvexResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDestinationConvexResult, error) {
			args := v.(LookupDestinationConvexArgs)
			r, err := LookupDestinationConvex(ctx, &args, opts...)
			var s LookupDestinationConvexResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDestinationConvexResultOutput)
}

// A collection of arguments for invoking getDestinationConvex.
type LookupDestinationConvexOutputArgs struct {
	DestinationId pulumi.StringInput `pulumi:"destinationId"`
}

func (LookupDestinationConvexOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDestinationConvexArgs)(nil)).Elem()
}

// A collection of values returned by getDestinationConvex.
type LookupDestinationConvexResultOutput struct{ *pulumi.OutputState }

func (LookupDestinationConvexResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDestinationConvexResult)(nil)).Elem()
}

func (o LookupDestinationConvexResultOutput) ToLookupDestinationConvexResultOutput() LookupDestinationConvexResultOutput {
	return o
}

func (o LookupDestinationConvexResultOutput) ToLookupDestinationConvexResultOutputWithContext(ctx context.Context) LookupDestinationConvexResultOutput {
	return o
}

func (o LookupDestinationConvexResultOutput) Configuration() GetDestinationConvexConfigurationOutput {
	return o.ApplyT(func(v LookupDestinationConvexResult) GetDestinationConvexConfiguration { return v.Configuration }).(GetDestinationConvexConfigurationOutput)
}

func (o LookupDestinationConvexResultOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDestinationConvexResult) string { return v.DestinationId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDestinationConvexResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDestinationConvexResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupDestinationConvexResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDestinationConvexResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupDestinationConvexResultOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDestinationConvexResult) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDestinationConvexResultOutput{})
}
