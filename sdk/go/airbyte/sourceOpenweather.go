// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-airbyte/sdk/go/airbyte/internal"
)

// SourceOpenweather Resource
type SourceOpenweather struct {
	pulumi.CustomResourceState

	Configuration SourceOpenweatherConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput                  `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceOpenweather registers a new resource with the given unique name, arguments, and options.
func NewSourceOpenweather(ctx *pulumi.Context,
	name string, args *SourceOpenweatherArgs, opts ...pulumi.ResourceOption) (*SourceOpenweather, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceOpenweather
	err := ctx.RegisterResource("airbyte:index/sourceOpenweather:SourceOpenweather", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceOpenweather gets an existing SourceOpenweather resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceOpenweather(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceOpenweatherState, opts ...pulumi.ResourceOption) (*SourceOpenweather, error) {
	var resource SourceOpenweather
	err := ctx.ReadResource("airbyte:index/sourceOpenweather:SourceOpenweather", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceOpenweather resources.
type sourceOpenweatherState struct {
	Configuration *SourceOpenweatherConfiguration `pulumi:"configuration"`
	Name          *string                         `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceOpenweatherState struct {
	Configuration SourceOpenweatherConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceOpenweatherState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceOpenweatherState)(nil)).Elem()
}

type sourceOpenweatherArgs struct {
	Configuration SourceOpenweatherConfiguration `pulumi:"configuration"`
	Name          string                         `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceOpenweather resource.
type SourceOpenweatherArgs struct {
	Configuration SourceOpenweatherConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceOpenweatherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceOpenweatherArgs)(nil)).Elem()
}

type SourceOpenweatherInput interface {
	pulumi.Input

	ToSourceOpenweatherOutput() SourceOpenweatherOutput
	ToSourceOpenweatherOutputWithContext(ctx context.Context) SourceOpenweatherOutput
}

func (*SourceOpenweather) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceOpenweather)(nil)).Elem()
}

func (i *SourceOpenweather) ToSourceOpenweatherOutput() SourceOpenweatherOutput {
	return i.ToSourceOpenweatherOutputWithContext(context.Background())
}

func (i *SourceOpenweather) ToSourceOpenweatherOutputWithContext(ctx context.Context) SourceOpenweatherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOpenweatherOutput)
}

// SourceOpenweatherArrayInput is an input type that accepts SourceOpenweatherArray and SourceOpenweatherArrayOutput values.
// You can construct a concrete instance of `SourceOpenweatherArrayInput` via:
//
//	SourceOpenweatherArray{ SourceOpenweatherArgs{...} }
type SourceOpenweatherArrayInput interface {
	pulumi.Input

	ToSourceOpenweatherArrayOutput() SourceOpenweatherArrayOutput
	ToSourceOpenweatherArrayOutputWithContext(context.Context) SourceOpenweatherArrayOutput
}

type SourceOpenweatherArray []SourceOpenweatherInput

func (SourceOpenweatherArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceOpenweather)(nil)).Elem()
}

func (i SourceOpenweatherArray) ToSourceOpenweatherArrayOutput() SourceOpenweatherArrayOutput {
	return i.ToSourceOpenweatherArrayOutputWithContext(context.Background())
}

func (i SourceOpenweatherArray) ToSourceOpenweatherArrayOutputWithContext(ctx context.Context) SourceOpenweatherArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOpenweatherArrayOutput)
}

// SourceOpenweatherMapInput is an input type that accepts SourceOpenweatherMap and SourceOpenweatherMapOutput values.
// You can construct a concrete instance of `SourceOpenweatherMapInput` via:
//
//	SourceOpenweatherMap{ "key": SourceOpenweatherArgs{...} }
type SourceOpenweatherMapInput interface {
	pulumi.Input

	ToSourceOpenweatherMapOutput() SourceOpenweatherMapOutput
	ToSourceOpenweatherMapOutputWithContext(context.Context) SourceOpenweatherMapOutput
}

type SourceOpenweatherMap map[string]SourceOpenweatherInput

func (SourceOpenweatherMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceOpenweather)(nil)).Elem()
}

func (i SourceOpenweatherMap) ToSourceOpenweatherMapOutput() SourceOpenweatherMapOutput {
	return i.ToSourceOpenweatherMapOutputWithContext(context.Background())
}

func (i SourceOpenweatherMap) ToSourceOpenweatherMapOutputWithContext(ctx context.Context) SourceOpenweatherMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOpenweatherMapOutput)
}

type SourceOpenweatherOutput struct{ *pulumi.OutputState }

func (SourceOpenweatherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceOpenweather)(nil)).Elem()
}

func (o SourceOpenweatherOutput) ToSourceOpenweatherOutput() SourceOpenweatherOutput {
	return o
}

func (o SourceOpenweatherOutput) ToSourceOpenweatherOutputWithContext(ctx context.Context) SourceOpenweatherOutput {
	return o
}

func (o SourceOpenweatherOutput) Configuration() SourceOpenweatherConfigurationOutput {
	return o.ApplyT(func(v *SourceOpenweather) SourceOpenweatherConfigurationOutput { return v.Configuration }).(SourceOpenweatherConfigurationOutput)
}

func (o SourceOpenweatherOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceOpenweather) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceOpenweatherOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceOpenweather) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceOpenweatherOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceOpenweather) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceOpenweatherOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceOpenweather) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceOpenweatherOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceOpenweather) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceOpenweatherArrayOutput struct{ *pulumi.OutputState }

func (SourceOpenweatherArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceOpenweather)(nil)).Elem()
}

func (o SourceOpenweatherArrayOutput) ToSourceOpenweatherArrayOutput() SourceOpenweatherArrayOutput {
	return o
}

func (o SourceOpenweatherArrayOutput) ToSourceOpenweatherArrayOutputWithContext(ctx context.Context) SourceOpenweatherArrayOutput {
	return o
}

func (o SourceOpenweatherArrayOutput) Index(i pulumi.IntInput) SourceOpenweatherOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceOpenweather {
		return vs[0].([]*SourceOpenweather)[vs[1].(int)]
	}).(SourceOpenweatherOutput)
}

type SourceOpenweatherMapOutput struct{ *pulumi.OutputState }

func (SourceOpenweatherMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceOpenweather)(nil)).Elem()
}

func (o SourceOpenweatherMapOutput) ToSourceOpenweatherMapOutput() SourceOpenweatherMapOutput {
	return o
}

func (o SourceOpenweatherMapOutput) ToSourceOpenweatherMapOutputWithContext(ctx context.Context) SourceOpenweatherMapOutput {
	return o
}

func (o SourceOpenweatherMapOutput) MapIndex(k pulumi.StringInput) SourceOpenweatherOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceOpenweather {
		return vs[0].(map[string]*SourceOpenweather)[vs[1].(string)]
	}).(SourceOpenweatherOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceOpenweatherInput)(nil)).Elem(), &SourceOpenweather{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceOpenweatherArrayInput)(nil)).Elem(), SourceOpenweatherArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceOpenweatherMapInput)(nil)).Elem(), SourceOpenweatherMap{})
	pulumi.RegisterOutputType(SourceOpenweatherOutput{})
	pulumi.RegisterOutputType(SourceOpenweatherArrayOutput{})
	pulumi.RegisterOutputType(SourceOpenweatherMapOutput{})
}
