// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-airbyte/sdk/go/airbyte/internal"
)

// SourceKlarna Resource
type SourceKlarna struct {
	pulumi.CustomResourceState

	Configuration SourceKlarnaConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput             `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceKlarna registers a new resource with the given unique name, arguments, and options.
func NewSourceKlarna(ctx *pulumi.Context,
	name string, args *SourceKlarnaArgs, opts ...pulumi.ResourceOption) (*SourceKlarna, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceKlarna
	err := ctx.RegisterResource("airbyte:index/sourceKlarna:SourceKlarna", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceKlarna gets an existing SourceKlarna resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceKlarna(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceKlarnaState, opts ...pulumi.ResourceOption) (*SourceKlarna, error) {
	var resource SourceKlarna
	err := ctx.ReadResource("airbyte:index/sourceKlarna:SourceKlarna", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceKlarna resources.
type sourceKlarnaState struct {
	Configuration *SourceKlarnaConfiguration `pulumi:"configuration"`
	Name          *string                    `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceKlarnaState struct {
	Configuration SourceKlarnaConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceKlarnaState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceKlarnaState)(nil)).Elem()
}

type sourceKlarnaArgs struct {
	Configuration SourceKlarnaConfiguration `pulumi:"configuration"`
	Name          string                    `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceKlarna resource.
type SourceKlarnaArgs struct {
	Configuration SourceKlarnaConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceKlarnaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceKlarnaArgs)(nil)).Elem()
}

type SourceKlarnaInput interface {
	pulumi.Input

	ToSourceKlarnaOutput() SourceKlarnaOutput
	ToSourceKlarnaOutputWithContext(ctx context.Context) SourceKlarnaOutput
}

func (*SourceKlarna) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKlarna)(nil)).Elem()
}

func (i *SourceKlarna) ToSourceKlarnaOutput() SourceKlarnaOutput {
	return i.ToSourceKlarnaOutputWithContext(context.Background())
}

func (i *SourceKlarna) ToSourceKlarnaOutputWithContext(ctx context.Context) SourceKlarnaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKlarnaOutput)
}

// SourceKlarnaArrayInput is an input type that accepts SourceKlarnaArray and SourceKlarnaArrayOutput values.
// You can construct a concrete instance of `SourceKlarnaArrayInput` via:
//
//	SourceKlarnaArray{ SourceKlarnaArgs{...} }
type SourceKlarnaArrayInput interface {
	pulumi.Input

	ToSourceKlarnaArrayOutput() SourceKlarnaArrayOutput
	ToSourceKlarnaArrayOutputWithContext(context.Context) SourceKlarnaArrayOutput
}

type SourceKlarnaArray []SourceKlarnaInput

func (SourceKlarnaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceKlarna)(nil)).Elem()
}

func (i SourceKlarnaArray) ToSourceKlarnaArrayOutput() SourceKlarnaArrayOutput {
	return i.ToSourceKlarnaArrayOutputWithContext(context.Background())
}

func (i SourceKlarnaArray) ToSourceKlarnaArrayOutputWithContext(ctx context.Context) SourceKlarnaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKlarnaArrayOutput)
}

// SourceKlarnaMapInput is an input type that accepts SourceKlarnaMap and SourceKlarnaMapOutput values.
// You can construct a concrete instance of `SourceKlarnaMapInput` via:
//
//	SourceKlarnaMap{ "key": SourceKlarnaArgs{...} }
type SourceKlarnaMapInput interface {
	pulumi.Input

	ToSourceKlarnaMapOutput() SourceKlarnaMapOutput
	ToSourceKlarnaMapOutputWithContext(context.Context) SourceKlarnaMapOutput
}

type SourceKlarnaMap map[string]SourceKlarnaInput

func (SourceKlarnaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceKlarna)(nil)).Elem()
}

func (i SourceKlarnaMap) ToSourceKlarnaMapOutput() SourceKlarnaMapOutput {
	return i.ToSourceKlarnaMapOutputWithContext(context.Background())
}

func (i SourceKlarnaMap) ToSourceKlarnaMapOutputWithContext(ctx context.Context) SourceKlarnaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKlarnaMapOutput)
}

type SourceKlarnaOutput struct{ *pulumi.OutputState }

func (SourceKlarnaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKlarna)(nil)).Elem()
}

func (o SourceKlarnaOutput) ToSourceKlarnaOutput() SourceKlarnaOutput {
	return o
}

func (o SourceKlarnaOutput) ToSourceKlarnaOutputWithContext(ctx context.Context) SourceKlarnaOutput {
	return o
}

func (o SourceKlarnaOutput) Configuration() SourceKlarnaConfigurationOutput {
	return o.ApplyT(func(v *SourceKlarna) SourceKlarnaConfigurationOutput { return v.Configuration }).(SourceKlarnaConfigurationOutput)
}

func (o SourceKlarnaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceKlarna) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceKlarnaOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKlarna) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceKlarnaOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceKlarna) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceKlarnaOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceKlarna) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceKlarnaOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceKlarna) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceKlarnaArrayOutput struct{ *pulumi.OutputState }

func (SourceKlarnaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceKlarna)(nil)).Elem()
}

func (o SourceKlarnaArrayOutput) ToSourceKlarnaArrayOutput() SourceKlarnaArrayOutput {
	return o
}

func (o SourceKlarnaArrayOutput) ToSourceKlarnaArrayOutputWithContext(ctx context.Context) SourceKlarnaArrayOutput {
	return o
}

func (o SourceKlarnaArrayOutput) Index(i pulumi.IntInput) SourceKlarnaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceKlarna {
		return vs[0].([]*SourceKlarna)[vs[1].(int)]
	}).(SourceKlarnaOutput)
}

type SourceKlarnaMapOutput struct{ *pulumi.OutputState }

func (SourceKlarnaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceKlarna)(nil)).Elem()
}

func (o SourceKlarnaMapOutput) ToSourceKlarnaMapOutput() SourceKlarnaMapOutput {
	return o
}

func (o SourceKlarnaMapOutput) ToSourceKlarnaMapOutputWithContext(ctx context.Context) SourceKlarnaMapOutput {
	return o
}

func (o SourceKlarnaMapOutput) MapIndex(k pulumi.StringInput) SourceKlarnaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceKlarna {
		return vs[0].(map[string]*SourceKlarna)[vs[1].(string)]
	}).(SourceKlarnaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKlarnaInput)(nil)).Elem(), &SourceKlarna{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKlarnaArrayInput)(nil)).Elem(), SourceKlarnaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKlarnaMapInput)(nil)).Elem(), SourceKlarnaMap{})
	pulumi.RegisterOutputType(SourceKlarnaOutput{})
	pulumi.RegisterOutputType(SourceKlarnaArrayOutput{})
	pulumi.RegisterOutputType(SourceKlarnaMapOutput{})
}
