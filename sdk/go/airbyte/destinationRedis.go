// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-airbyte/sdk/go/airbyte/internal"
)

// DestinationRedis Resource
type DestinationRedis struct {
	pulumi.CustomResourceState

	Configuration   DestinationRedisConfigurationOutput `pulumi:"configuration"`
	DestinationId   pulumi.StringOutput                 `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput                 `pulumi:"destinationType"`
	Name            pulumi.StringOutput                 `pulumi:"name"`
	WorkspaceId     pulumi.StringOutput                 `pulumi:"workspaceId"`
}

// NewDestinationRedis registers a new resource with the given unique name, arguments, and options.
func NewDestinationRedis(ctx *pulumi.Context,
	name string, args *DestinationRedisArgs, opts ...pulumi.ResourceOption) (*DestinationRedis, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DestinationRedis
	err := ctx.RegisterResource("airbyte:index/destinationRedis:DestinationRedis", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationRedis gets an existing DestinationRedis resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationRedis(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationRedisState, opts ...pulumi.ResourceOption) (*DestinationRedis, error) {
	var resource DestinationRedis
	err := ctx.ReadResource("airbyte:index/destinationRedis:DestinationRedis", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationRedis resources.
type destinationRedisState struct {
	Configuration   *DestinationRedisConfiguration `pulumi:"configuration"`
	DestinationId   *string                        `pulumi:"destinationId"`
	DestinationType *string                        `pulumi:"destinationType"`
	Name            *string                        `pulumi:"name"`
	WorkspaceId     *string                        `pulumi:"workspaceId"`
}

type DestinationRedisState struct {
	Configuration   DestinationRedisConfigurationPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	WorkspaceId     pulumi.StringPtrInput
}

func (DestinationRedisState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationRedisState)(nil)).Elem()
}

type destinationRedisArgs struct {
	Configuration DestinationRedisConfiguration `pulumi:"configuration"`
	Name          string                        `pulumi:"name"`
	WorkspaceId   string                        `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationRedis resource.
type DestinationRedisArgs struct {
	Configuration DestinationRedisConfigurationInput
	Name          pulumi.StringInput
	WorkspaceId   pulumi.StringInput
}

func (DestinationRedisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationRedisArgs)(nil)).Elem()
}

type DestinationRedisInput interface {
	pulumi.Input

	ToDestinationRedisOutput() DestinationRedisOutput
	ToDestinationRedisOutputWithContext(ctx context.Context) DestinationRedisOutput
}

func (*DestinationRedis) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRedis)(nil)).Elem()
}

func (i *DestinationRedis) ToDestinationRedisOutput() DestinationRedisOutput {
	return i.ToDestinationRedisOutputWithContext(context.Background())
}

func (i *DestinationRedis) ToDestinationRedisOutputWithContext(ctx context.Context) DestinationRedisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRedisOutput)
}

// DestinationRedisArrayInput is an input type that accepts DestinationRedisArray and DestinationRedisArrayOutput values.
// You can construct a concrete instance of `DestinationRedisArrayInput` via:
//
//	DestinationRedisArray{ DestinationRedisArgs{...} }
type DestinationRedisArrayInput interface {
	pulumi.Input

	ToDestinationRedisArrayOutput() DestinationRedisArrayOutput
	ToDestinationRedisArrayOutputWithContext(context.Context) DestinationRedisArrayOutput
}

type DestinationRedisArray []DestinationRedisInput

func (DestinationRedisArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationRedis)(nil)).Elem()
}

func (i DestinationRedisArray) ToDestinationRedisArrayOutput() DestinationRedisArrayOutput {
	return i.ToDestinationRedisArrayOutputWithContext(context.Background())
}

func (i DestinationRedisArray) ToDestinationRedisArrayOutputWithContext(ctx context.Context) DestinationRedisArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRedisArrayOutput)
}

// DestinationRedisMapInput is an input type that accepts DestinationRedisMap and DestinationRedisMapOutput values.
// You can construct a concrete instance of `DestinationRedisMapInput` via:
//
//	DestinationRedisMap{ "key": DestinationRedisArgs{...} }
type DestinationRedisMapInput interface {
	pulumi.Input

	ToDestinationRedisMapOutput() DestinationRedisMapOutput
	ToDestinationRedisMapOutputWithContext(context.Context) DestinationRedisMapOutput
}

type DestinationRedisMap map[string]DestinationRedisInput

func (DestinationRedisMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationRedis)(nil)).Elem()
}

func (i DestinationRedisMap) ToDestinationRedisMapOutput() DestinationRedisMapOutput {
	return i.ToDestinationRedisMapOutputWithContext(context.Background())
}

func (i DestinationRedisMap) ToDestinationRedisMapOutputWithContext(ctx context.Context) DestinationRedisMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRedisMapOutput)
}

type DestinationRedisOutput struct{ *pulumi.OutputState }

func (DestinationRedisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRedis)(nil)).Elem()
}

func (o DestinationRedisOutput) ToDestinationRedisOutput() DestinationRedisOutput {
	return o
}

func (o DestinationRedisOutput) ToDestinationRedisOutputWithContext(ctx context.Context) DestinationRedisOutput {
	return o
}

func (o DestinationRedisOutput) Configuration() DestinationRedisConfigurationOutput {
	return o.ApplyT(func(v *DestinationRedis) DestinationRedisConfigurationOutput { return v.Configuration }).(DestinationRedisConfigurationOutput)
}

func (o DestinationRedisOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationRedis) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationRedisOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationRedis) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

func (o DestinationRedisOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationRedis) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationRedisOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationRedis) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type DestinationRedisArrayOutput struct{ *pulumi.OutputState }

func (DestinationRedisArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationRedis)(nil)).Elem()
}

func (o DestinationRedisArrayOutput) ToDestinationRedisArrayOutput() DestinationRedisArrayOutput {
	return o
}

func (o DestinationRedisArrayOutput) ToDestinationRedisArrayOutputWithContext(ctx context.Context) DestinationRedisArrayOutput {
	return o
}

func (o DestinationRedisArrayOutput) Index(i pulumi.IntInput) DestinationRedisOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DestinationRedis {
		return vs[0].([]*DestinationRedis)[vs[1].(int)]
	}).(DestinationRedisOutput)
}

type DestinationRedisMapOutput struct{ *pulumi.OutputState }

func (DestinationRedisMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationRedis)(nil)).Elem()
}

func (o DestinationRedisMapOutput) ToDestinationRedisMapOutput() DestinationRedisMapOutput {
	return o
}

func (o DestinationRedisMapOutput) ToDestinationRedisMapOutputWithContext(ctx context.Context) DestinationRedisMapOutput {
	return o
}

func (o DestinationRedisMapOutput) MapIndex(k pulumi.StringInput) DestinationRedisOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DestinationRedis {
		return vs[0].(map[string]*DestinationRedis)[vs[1].(string)]
	}).(DestinationRedisOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRedisInput)(nil)).Elem(), &DestinationRedis{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRedisArrayInput)(nil)).Elem(), DestinationRedisArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRedisMapInput)(nil)).Elem(), DestinationRedisMap{})
	pulumi.RegisterOutputType(DestinationRedisOutput{})
	pulumi.RegisterOutputType(DestinationRedisArrayOutput{})
	pulumi.RegisterOutputType(DestinationRedisMapOutput{})
}
