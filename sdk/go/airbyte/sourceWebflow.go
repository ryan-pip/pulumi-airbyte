// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-airbyte/sdk/go/airbyte/internal"
)

// SourceWebflow Resource
type SourceWebflow struct {
	pulumi.CustomResourceState

	Configuration SourceWebflowConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput              `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceWebflow registers a new resource with the given unique name, arguments, and options.
func NewSourceWebflow(ctx *pulumi.Context,
	name string, args *SourceWebflowArgs, opts ...pulumi.ResourceOption) (*SourceWebflow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceWebflow
	err := ctx.RegisterResource("airbyte:index/sourceWebflow:SourceWebflow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceWebflow gets an existing SourceWebflow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceWebflow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceWebflowState, opts ...pulumi.ResourceOption) (*SourceWebflow, error) {
	var resource SourceWebflow
	err := ctx.ReadResource("airbyte:index/sourceWebflow:SourceWebflow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceWebflow resources.
type sourceWebflowState struct {
	Configuration *SourceWebflowConfiguration `pulumi:"configuration"`
	Name          *string                     `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceWebflowState struct {
	Configuration SourceWebflowConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceWebflowState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceWebflowState)(nil)).Elem()
}

type sourceWebflowArgs struct {
	Configuration SourceWebflowConfiguration `pulumi:"configuration"`
	Name          string                     `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceWebflow resource.
type SourceWebflowArgs struct {
	Configuration SourceWebflowConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceWebflowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceWebflowArgs)(nil)).Elem()
}

type SourceWebflowInput interface {
	pulumi.Input

	ToSourceWebflowOutput() SourceWebflowOutput
	ToSourceWebflowOutputWithContext(ctx context.Context) SourceWebflowOutput
}

func (*SourceWebflow) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceWebflow)(nil)).Elem()
}

func (i *SourceWebflow) ToSourceWebflowOutput() SourceWebflowOutput {
	return i.ToSourceWebflowOutputWithContext(context.Background())
}

func (i *SourceWebflow) ToSourceWebflowOutputWithContext(ctx context.Context) SourceWebflowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceWebflowOutput)
}

// SourceWebflowArrayInput is an input type that accepts SourceWebflowArray and SourceWebflowArrayOutput values.
// You can construct a concrete instance of `SourceWebflowArrayInput` via:
//
//	SourceWebflowArray{ SourceWebflowArgs{...} }
type SourceWebflowArrayInput interface {
	pulumi.Input

	ToSourceWebflowArrayOutput() SourceWebflowArrayOutput
	ToSourceWebflowArrayOutputWithContext(context.Context) SourceWebflowArrayOutput
}

type SourceWebflowArray []SourceWebflowInput

func (SourceWebflowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceWebflow)(nil)).Elem()
}

func (i SourceWebflowArray) ToSourceWebflowArrayOutput() SourceWebflowArrayOutput {
	return i.ToSourceWebflowArrayOutputWithContext(context.Background())
}

func (i SourceWebflowArray) ToSourceWebflowArrayOutputWithContext(ctx context.Context) SourceWebflowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceWebflowArrayOutput)
}

// SourceWebflowMapInput is an input type that accepts SourceWebflowMap and SourceWebflowMapOutput values.
// You can construct a concrete instance of `SourceWebflowMapInput` via:
//
//	SourceWebflowMap{ "key": SourceWebflowArgs{...} }
type SourceWebflowMapInput interface {
	pulumi.Input

	ToSourceWebflowMapOutput() SourceWebflowMapOutput
	ToSourceWebflowMapOutputWithContext(context.Context) SourceWebflowMapOutput
}

type SourceWebflowMap map[string]SourceWebflowInput

func (SourceWebflowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceWebflow)(nil)).Elem()
}

func (i SourceWebflowMap) ToSourceWebflowMapOutput() SourceWebflowMapOutput {
	return i.ToSourceWebflowMapOutputWithContext(context.Background())
}

func (i SourceWebflowMap) ToSourceWebflowMapOutputWithContext(ctx context.Context) SourceWebflowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceWebflowMapOutput)
}

type SourceWebflowOutput struct{ *pulumi.OutputState }

func (SourceWebflowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceWebflow)(nil)).Elem()
}

func (o SourceWebflowOutput) ToSourceWebflowOutput() SourceWebflowOutput {
	return o
}

func (o SourceWebflowOutput) ToSourceWebflowOutputWithContext(ctx context.Context) SourceWebflowOutput {
	return o
}

func (o SourceWebflowOutput) Configuration() SourceWebflowConfigurationOutput {
	return o.ApplyT(func(v *SourceWebflow) SourceWebflowConfigurationOutput { return v.Configuration }).(SourceWebflowConfigurationOutput)
}

func (o SourceWebflowOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceWebflow) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceWebflowOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceWebflow) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceWebflowOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceWebflow) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceWebflowOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceWebflow) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceWebflowOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceWebflow) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceWebflowArrayOutput struct{ *pulumi.OutputState }

func (SourceWebflowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceWebflow)(nil)).Elem()
}

func (o SourceWebflowArrayOutput) ToSourceWebflowArrayOutput() SourceWebflowArrayOutput {
	return o
}

func (o SourceWebflowArrayOutput) ToSourceWebflowArrayOutputWithContext(ctx context.Context) SourceWebflowArrayOutput {
	return o
}

func (o SourceWebflowArrayOutput) Index(i pulumi.IntInput) SourceWebflowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceWebflow {
		return vs[0].([]*SourceWebflow)[vs[1].(int)]
	}).(SourceWebflowOutput)
}

type SourceWebflowMapOutput struct{ *pulumi.OutputState }

func (SourceWebflowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceWebflow)(nil)).Elem()
}

func (o SourceWebflowMapOutput) ToSourceWebflowMapOutput() SourceWebflowMapOutput {
	return o
}

func (o SourceWebflowMapOutput) ToSourceWebflowMapOutputWithContext(ctx context.Context) SourceWebflowMapOutput {
	return o
}

func (o SourceWebflowMapOutput) MapIndex(k pulumi.StringInput) SourceWebflowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceWebflow {
		return vs[0].(map[string]*SourceWebflow)[vs[1].(string)]
	}).(SourceWebflowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceWebflowInput)(nil)).Elem(), &SourceWebflow{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceWebflowArrayInput)(nil)).Elem(), SourceWebflowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceWebflowMapInput)(nil)).Elem(), SourceWebflowMap{})
	pulumi.RegisterOutputType(SourceWebflowOutput{})
	pulumi.RegisterOutputType(SourceWebflowArrayOutput{})
	pulumi.RegisterOutputType(SourceWebflowMapOutput{})
}
