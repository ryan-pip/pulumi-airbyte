// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SourceSalesloft Resource
type SourceSalesloft struct {
	pulumi.CustomResourceState

	Configuration SourceSalesloftConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput                `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceSalesloft registers a new resource with the given unique name, arguments, and options.
func NewSourceSalesloft(ctx *pulumi.Context,
	name string, args *SourceSalesloftArgs, opts ...pulumi.ResourceOption) (*SourceSalesloft, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceSalesloft
	err := ctx.RegisterResource("airbyte:index/sourceSalesloft:SourceSalesloft", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceSalesloft gets an existing SourceSalesloft resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceSalesloft(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceSalesloftState, opts ...pulumi.ResourceOption) (*SourceSalesloft, error) {
	var resource SourceSalesloft
	err := ctx.ReadResource("airbyte:index/sourceSalesloft:SourceSalesloft", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceSalesloft resources.
type sourceSalesloftState struct {
	Configuration *SourceSalesloftConfiguration `pulumi:"configuration"`
	Name          *string                       `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceSalesloftState struct {
	Configuration SourceSalesloftConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceSalesloftState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceSalesloftState)(nil)).Elem()
}

type sourceSalesloftArgs struct {
	Configuration SourceSalesloftConfiguration `pulumi:"configuration"`
	Name          string                       `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceSalesloft resource.
type SourceSalesloftArgs struct {
	Configuration SourceSalesloftConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceSalesloftArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceSalesloftArgs)(nil)).Elem()
}

type SourceSalesloftInput interface {
	pulumi.Input

	ToSourceSalesloftOutput() SourceSalesloftOutput
	ToSourceSalesloftOutputWithContext(ctx context.Context) SourceSalesloftOutput
}

func (*SourceSalesloft) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceSalesloft)(nil)).Elem()
}

func (i *SourceSalesloft) ToSourceSalesloftOutput() SourceSalesloftOutput {
	return i.ToSourceSalesloftOutputWithContext(context.Background())
}

func (i *SourceSalesloft) ToSourceSalesloftOutputWithContext(ctx context.Context) SourceSalesloftOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceSalesloftOutput)
}

// SourceSalesloftArrayInput is an input type that accepts SourceSalesloftArray and SourceSalesloftArrayOutput values.
// You can construct a concrete instance of `SourceSalesloftArrayInput` via:
//
//	SourceSalesloftArray{ SourceSalesloftArgs{...} }
type SourceSalesloftArrayInput interface {
	pulumi.Input

	ToSourceSalesloftArrayOutput() SourceSalesloftArrayOutput
	ToSourceSalesloftArrayOutputWithContext(context.Context) SourceSalesloftArrayOutput
}

type SourceSalesloftArray []SourceSalesloftInput

func (SourceSalesloftArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceSalesloft)(nil)).Elem()
}

func (i SourceSalesloftArray) ToSourceSalesloftArrayOutput() SourceSalesloftArrayOutput {
	return i.ToSourceSalesloftArrayOutputWithContext(context.Background())
}

func (i SourceSalesloftArray) ToSourceSalesloftArrayOutputWithContext(ctx context.Context) SourceSalesloftArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceSalesloftArrayOutput)
}

// SourceSalesloftMapInput is an input type that accepts SourceSalesloftMap and SourceSalesloftMapOutput values.
// You can construct a concrete instance of `SourceSalesloftMapInput` via:
//
//	SourceSalesloftMap{ "key": SourceSalesloftArgs{...} }
type SourceSalesloftMapInput interface {
	pulumi.Input

	ToSourceSalesloftMapOutput() SourceSalesloftMapOutput
	ToSourceSalesloftMapOutputWithContext(context.Context) SourceSalesloftMapOutput
}

type SourceSalesloftMap map[string]SourceSalesloftInput

func (SourceSalesloftMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceSalesloft)(nil)).Elem()
}

func (i SourceSalesloftMap) ToSourceSalesloftMapOutput() SourceSalesloftMapOutput {
	return i.ToSourceSalesloftMapOutputWithContext(context.Background())
}

func (i SourceSalesloftMap) ToSourceSalesloftMapOutputWithContext(ctx context.Context) SourceSalesloftMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceSalesloftMapOutput)
}

type SourceSalesloftOutput struct{ *pulumi.OutputState }

func (SourceSalesloftOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceSalesloft)(nil)).Elem()
}

func (o SourceSalesloftOutput) ToSourceSalesloftOutput() SourceSalesloftOutput {
	return o
}

func (o SourceSalesloftOutput) ToSourceSalesloftOutputWithContext(ctx context.Context) SourceSalesloftOutput {
	return o
}

func (o SourceSalesloftOutput) Configuration() SourceSalesloftConfigurationOutput {
	return o.ApplyT(func(v *SourceSalesloft) SourceSalesloftConfigurationOutput { return v.Configuration }).(SourceSalesloftConfigurationOutput)
}

func (o SourceSalesloftOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceSalesloft) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceSalesloftOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceSalesloft) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceSalesloftOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceSalesloft) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceSalesloftOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceSalesloft) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceSalesloftOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceSalesloft) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceSalesloftArrayOutput struct{ *pulumi.OutputState }

func (SourceSalesloftArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceSalesloft)(nil)).Elem()
}

func (o SourceSalesloftArrayOutput) ToSourceSalesloftArrayOutput() SourceSalesloftArrayOutput {
	return o
}

func (o SourceSalesloftArrayOutput) ToSourceSalesloftArrayOutputWithContext(ctx context.Context) SourceSalesloftArrayOutput {
	return o
}

func (o SourceSalesloftArrayOutput) Index(i pulumi.IntInput) SourceSalesloftOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceSalesloft {
		return vs[0].([]*SourceSalesloft)[vs[1].(int)]
	}).(SourceSalesloftOutput)
}

type SourceSalesloftMapOutput struct{ *pulumi.OutputState }

func (SourceSalesloftMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceSalesloft)(nil)).Elem()
}

func (o SourceSalesloftMapOutput) ToSourceSalesloftMapOutput() SourceSalesloftMapOutput {
	return o
}

func (o SourceSalesloftMapOutput) ToSourceSalesloftMapOutputWithContext(ctx context.Context) SourceSalesloftMapOutput {
	return o
}

func (o SourceSalesloftMapOutput) MapIndex(k pulumi.StringInput) SourceSalesloftOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceSalesloft {
		return vs[0].(map[string]*SourceSalesloft)[vs[1].(string)]
	}).(SourceSalesloftOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceSalesloftInput)(nil)).Elem(), &SourceSalesloft{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceSalesloftArrayInput)(nil)).Elem(), SourceSalesloftArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceSalesloftMapInput)(nil)).Elem(), SourceSalesloftMap{})
	pulumi.RegisterOutputType(SourceSalesloftOutput{})
	pulumi.RegisterOutputType(SourceSalesloftArrayOutput{})
	pulumi.RegisterOutputType(SourceSalesloftMapOutput{})
}
