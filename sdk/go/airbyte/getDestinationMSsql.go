// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"internal"
)

// DestinationMssql DataSource
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// _, err := airbyte.LookupDestinationMSsql(ctx, %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference), nil);
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
func LookupDestinationMSsql(ctx *pulumi.Context, args *LookupDestinationMSsqlArgs, opts ...pulumi.InvokeOption) (*LookupDestinationMSsqlResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDestinationMSsqlResult
	err := ctx.Invoke("airbyte:index/getDestinationMSsql:getDestinationMSsql", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDestinationMSsql.
type LookupDestinationMSsqlArgs struct {
	DestinationId string `pulumi:"destinationId"`
}

// A collection of values returned by getDestinationMSsql.
type LookupDestinationMSsqlResult struct {
	Configuration GetDestinationMSsqlConfiguration `pulumi:"configuration"`
	DestinationId string                           `pulumi:"destinationId"`
	// The provider-assigned unique ID for this managed resource.
	Id          string `pulumi:"id"`
	Name        string `pulumi:"name"`
	WorkspaceId string `pulumi:"workspaceId"`
}

func LookupDestinationMSsqlOutput(ctx *pulumi.Context, args LookupDestinationMSsqlOutputArgs, opts ...pulumi.InvokeOption) LookupDestinationMSsqlResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDestinationMSsqlResult, error) {
			args := v.(LookupDestinationMSsqlArgs)
			r, err := LookupDestinationMSsql(ctx, &args, opts...)
			var s LookupDestinationMSsqlResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDestinationMSsqlResultOutput)
}

// A collection of arguments for invoking getDestinationMSsql.
type LookupDestinationMSsqlOutputArgs struct {
	DestinationId pulumi.StringInput `pulumi:"destinationId"`
}

func (LookupDestinationMSsqlOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDestinationMSsqlArgs)(nil)).Elem()
}

// A collection of values returned by getDestinationMSsql.
type LookupDestinationMSsqlResultOutput struct{ *pulumi.OutputState }

func (LookupDestinationMSsqlResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDestinationMSsqlResult)(nil)).Elem()
}

func (o LookupDestinationMSsqlResultOutput) ToLookupDestinationMSsqlResultOutput() LookupDestinationMSsqlResultOutput {
	return o
}

func (o LookupDestinationMSsqlResultOutput) ToLookupDestinationMSsqlResultOutputWithContext(ctx context.Context) LookupDestinationMSsqlResultOutput {
	return o
}

func (o LookupDestinationMSsqlResultOutput) Configuration() GetDestinationMSsqlConfigurationOutput {
	return o.ApplyT(func(v LookupDestinationMSsqlResult) GetDestinationMSsqlConfiguration { return v.Configuration }).(GetDestinationMSsqlConfigurationOutput)
}

func (o LookupDestinationMSsqlResultOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDestinationMSsqlResult) string { return v.DestinationId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDestinationMSsqlResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDestinationMSsqlResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupDestinationMSsqlResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDestinationMSsqlResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupDestinationMSsqlResultOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDestinationMSsqlResult) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDestinationMSsqlResultOutput{})
}
