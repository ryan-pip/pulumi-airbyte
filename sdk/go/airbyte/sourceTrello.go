// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-airbyte/sdk/go/airbyte/internal"
)

// SourceTrello Resource
type SourceTrello struct {
	pulumi.CustomResourceState

	Configuration SourceTrelloConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput             `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceTrello registers a new resource with the given unique name, arguments, and options.
func NewSourceTrello(ctx *pulumi.Context,
	name string, args *SourceTrelloArgs, opts ...pulumi.ResourceOption) (*SourceTrello, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceTrello
	err := ctx.RegisterResource("airbyte:index/sourceTrello:SourceTrello", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceTrello gets an existing SourceTrello resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceTrello(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceTrelloState, opts ...pulumi.ResourceOption) (*SourceTrello, error) {
	var resource SourceTrello
	err := ctx.ReadResource("airbyte:index/sourceTrello:SourceTrello", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceTrello resources.
type sourceTrelloState struct {
	Configuration *SourceTrelloConfiguration `pulumi:"configuration"`
	Name          *string                    `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceTrelloState struct {
	Configuration SourceTrelloConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceTrelloState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceTrelloState)(nil)).Elem()
}

type sourceTrelloArgs struct {
	Configuration SourceTrelloConfiguration `pulumi:"configuration"`
	Name          string                    `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceTrello resource.
type SourceTrelloArgs struct {
	Configuration SourceTrelloConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceTrelloArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceTrelloArgs)(nil)).Elem()
}

type SourceTrelloInput interface {
	pulumi.Input

	ToSourceTrelloOutput() SourceTrelloOutput
	ToSourceTrelloOutputWithContext(ctx context.Context) SourceTrelloOutput
}

func (*SourceTrello) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceTrello)(nil)).Elem()
}

func (i *SourceTrello) ToSourceTrelloOutput() SourceTrelloOutput {
	return i.ToSourceTrelloOutputWithContext(context.Background())
}

func (i *SourceTrello) ToSourceTrelloOutputWithContext(ctx context.Context) SourceTrelloOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceTrelloOutput)
}

// SourceTrelloArrayInput is an input type that accepts SourceTrelloArray and SourceTrelloArrayOutput values.
// You can construct a concrete instance of `SourceTrelloArrayInput` via:
//
//	SourceTrelloArray{ SourceTrelloArgs{...} }
type SourceTrelloArrayInput interface {
	pulumi.Input

	ToSourceTrelloArrayOutput() SourceTrelloArrayOutput
	ToSourceTrelloArrayOutputWithContext(context.Context) SourceTrelloArrayOutput
}

type SourceTrelloArray []SourceTrelloInput

func (SourceTrelloArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceTrello)(nil)).Elem()
}

func (i SourceTrelloArray) ToSourceTrelloArrayOutput() SourceTrelloArrayOutput {
	return i.ToSourceTrelloArrayOutputWithContext(context.Background())
}

func (i SourceTrelloArray) ToSourceTrelloArrayOutputWithContext(ctx context.Context) SourceTrelloArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceTrelloArrayOutput)
}

// SourceTrelloMapInput is an input type that accepts SourceTrelloMap and SourceTrelloMapOutput values.
// You can construct a concrete instance of `SourceTrelloMapInput` via:
//
//	SourceTrelloMap{ "key": SourceTrelloArgs{...} }
type SourceTrelloMapInput interface {
	pulumi.Input

	ToSourceTrelloMapOutput() SourceTrelloMapOutput
	ToSourceTrelloMapOutputWithContext(context.Context) SourceTrelloMapOutput
}

type SourceTrelloMap map[string]SourceTrelloInput

func (SourceTrelloMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceTrello)(nil)).Elem()
}

func (i SourceTrelloMap) ToSourceTrelloMapOutput() SourceTrelloMapOutput {
	return i.ToSourceTrelloMapOutputWithContext(context.Background())
}

func (i SourceTrelloMap) ToSourceTrelloMapOutputWithContext(ctx context.Context) SourceTrelloMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceTrelloMapOutput)
}

type SourceTrelloOutput struct{ *pulumi.OutputState }

func (SourceTrelloOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceTrello)(nil)).Elem()
}

func (o SourceTrelloOutput) ToSourceTrelloOutput() SourceTrelloOutput {
	return o
}

func (o SourceTrelloOutput) ToSourceTrelloOutputWithContext(ctx context.Context) SourceTrelloOutput {
	return o
}

func (o SourceTrelloOutput) Configuration() SourceTrelloConfigurationOutput {
	return o.ApplyT(func(v *SourceTrello) SourceTrelloConfigurationOutput { return v.Configuration }).(SourceTrelloConfigurationOutput)
}

func (o SourceTrelloOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceTrello) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceTrelloOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceTrello) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceTrelloOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceTrello) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceTrelloOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceTrello) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceTrelloOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceTrello) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceTrelloArrayOutput struct{ *pulumi.OutputState }

func (SourceTrelloArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceTrello)(nil)).Elem()
}

func (o SourceTrelloArrayOutput) ToSourceTrelloArrayOutput() SourceTrelloArrayOutput {
	return o
}

func (o SourceTrelloArrayOutput) ToSourceTrelloArrayOutputWithContext(ctx context.Context) SourceTrelloArrayOutput {
	return o
}

func (o SourceTrelloArrayOutput) Index(i pulumi.IntInput) SourceTrelloOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceTrello {
		return vs[0].([]*SourceTrello)[vs[1].(int)]
	}).(SourceTrelloOutput)
}

type SourceTrelloMapOutput struct{ *pulumi.OutputState }

func (SourceTrelloMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceTrello)(nil)).Elem()
}

func (o SourceTrelloMapOutput) ToSourceTrelloMapOutput() SourceTrelloMapOutput {
	return o
}

func (o SourceTrelloMapOutput) ToSourceTrelloMapOutputWithContext(ctx context.Context) SourceTrelloMapOutput {
	return o
}

func (o SourceTrelloMapOutput) MapIndex(k pulumi.StringInput) SourceTrelloOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceTrello {
		return vs[0].(map[string]*SourceTrello)[vs[1].(string)]
	}).(SourceTrelloOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceTrelloInput)(nil)).Elem(), &SourceTrello{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceTrelloArrayInput)(nil)).Elem(), SourceTrelloArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceTrelloMapInput)(nil)).Elem(), SourceTrelloMap{})
	pulumi.RegisterOutputType(SourceTrelloOutput{})
	pulumi.RegisterOutputType(SourceTrelloArrayOutput{})
	pulumi.RegisterOutputType(SourceTrelloMapOutput{})
}
