// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SourceBigquery Resource
type SourceBigquery struct {
	pulumi.CustomResourceState

	Configuration SourceBigqueryConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput               `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceBigquery registers a new resource with the given unique name, arguments, and options.
func NewSourceBigquery(ctx *pulumi.Context,
	name string, args *SourceBigqueryArgs, opts ...pulumi.ResourceOption) (*SourceBigquery, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceBigquery
	err := ctx.RegisterResource("airbyte:index/sourceBigquery:SourceBigquery", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceBigquery gets an existing SourceBigquery resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceBigquery(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceBigqueryState, opts ...pulumi.ResourceOption) (*SourceBigquery, error) {
	var resource SourceBigquery
	err := ctx.ReadResource("airbyte:index/sourceBigquery:SourceBigquery", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceBigquery resources.
type sourceBigqueryState struct {
	Configuration *SourceBigqueryConfiguration `pulumi:"configuration"`
	Name          *string                      `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceBigqueryState struct {
	Configuration SourceBigqueryConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceBigqueryState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceBigqueryState)(nil)).Elem()
}

type sourceBigqueryArgs struct {
	Configuration SourceBigqueryConfiguration `pulumi:"configuration"`
	Name          string                      `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceBigquery resource.
type SourceBigqueryArgs struct {
	Configuration SourceBigqueryConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceBigqueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceBigqueryArgs)(nil)).Elem()
}

type SourceBigqueryInput interface {
	pulumi.Input

	ToSourceBigqueryOutput() SourceBigqueryOutput
	ToSourceBigqueryOutputWithContext(ctx context.Context) SourceBigqueryOutput
}

func (*SourceBigquery) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceBigquery)(nil)).Elem()
}

func (i *SourceBigquery) ToSourceBigqueryOutput() SourceBigqueryOutput {
	return i.ToSourceBigqueryOutputWithContext(context.Background())
}

func (i *SourceBigquery) ToSourceBigqueryOutputWithContext(ctx context.Context) SourceBigqueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceBigqueryOutput)
}

// SourceBigqueryArrayInput is an input type that accepts SourceBigqueryArray and SourceBigqueryArrayOutput values.
// You can construct a concrete instance of `SourceBigqueryArrayInput` via:
//
//	SourceBigqueryArray{ SourceBigqueryArgs{...} }
type SourceBigqueryArrayInput interface {
	pulumi.Input

	ToSourceBigqueryArrayOutput() SourceBigqueryArrayOutput
	ToSourceBigqueryArrayOutputWithContext(context.Context) SourceBigqueryArrayOutput
}

type SourceBigqueryArray []SourceBigqueryInput

func (SourceBigqueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceBigquery)(nil)).Elem()
}

func (i SourceBigqueryArray) ToSourceBigqueryArrayOutput() SourceBigqueryArrayOutput {
	return i.ToSourceBigqueryArrayOutputWithContext(context.Background())
}

func (i SourceBigqueryArray) ToSourceBigqueryArrayOutputWithContext(ctx context.Context) SourceBigqueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceBigqueryArrayOutput)
}

// SourceBigqueryMapInput is an input type that accepts SourceBigqueryMap and SourceBigqueryMapOutput values.
// You can construct a concrete instance of `SourceBigqueryMapInput` via:
//
//	SourceBigqueryMap{ "key": SourceBigqueryArgs{...} }
type SourceBigqueryMapInput interface {
	pulumi.Input

	ToSourceBigqueryMapOutput() SourceBigqueryMapOutput
	ToSourceBigqueryMapOutputWithContext(context.Context) SourceBigqueryMapOutput
}

type SourceBigqueryMap map[string]SourceBigqueryInput

func (SourceBigqueryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceBigquery)(nil)).Elem()
}

func (i SourceBigqueryMap) ToSourceBigqueryMapOutput() SourceBigqueryMapOutput {
	return i.ToSourceBigqueryMapOutputWithContext(context.Background())
}

func (i SourceBigqueryMap) ToSourceBigqueryMapOutputWithContext(ctx context.Context) SourceBigqueryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceBigqueryMapOutput)
}

type SourceBigqueryOutput struct{ *pulumi.OutputState }

func (SourceBigqueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceBigquery)(nil)).Elem()
}

func (o SourceBigqueryOutput) ToSourceBigqueryOutput() SourceBigqueryOutput {
	return o
}

func (o SourceBigqueryOutput) ToSourceBigqueryOutputWithContext(ctx context.Context) SourceBigqueryOutput {
	return o
}

func (o SourceBigqueryOutput) Configuration() SourceBigqueryConfigurationOutput {
	return o.ApplyT(func(v *SourceBigquery) SourceBigqueryConfigurationOutput { return v.Configuration }).(SourceBigqueryConfigurationOutput)
}

func (o SourceBigqueryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceBigquery) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceBigqueryOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceBigquery) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceBigqueryOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceBigquery) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceBigqueryOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceBigquery) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceBigqueryOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceBigquery) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceBigqueryArrayOutput struct{ *pulumi.OutputState }

func (SourceBigqueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceBigquery)(nil)).Elem()
}

func (o SourceBigqueryArrayOutput) ToSourceBigqueryArrayOutput() SourceBigqueryArrayOutput {
	return o
}

func (o SourceBigqueryArrayOutput) ToSourceBigqueryArrayOutputWithContext(ctx context.Context) SourceBigqueryArrayOutput {
	return o
}

func (o SourceBigqueryArrayOutput) Index(i pulumi.IntInput) SourceBigqueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceBigquery {
		return vs[0].([]*SourceBigquery)[vs[1].(int)]
	}).(SourceBigqueryOutput)
}

type SourceBigqueryMapOutput struct{ *pulumi.OutputState }

func (SourceBigqueryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceBigquery)(nil)).Elem()
}

func (o SourceBigqueryMapOutput) ToSourceBigqueryMapOutput() SourceBigqueryMapOutput {
	return o
}

func (o SourceBigqueryMapOutput) ToSourceBigqueryMapOutputWithContext(ctx context.Context) SourceBigqueryMapOutput {
	return o
}

func (o SourceBigqueryMapOutput) MapIndex(k pulumi.StringInput) SourceBigqueryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceBigquery {
		return vs[0].(map[string]*SourceBigquery)[vs[1].(string)]
	}).(SourceBigqueryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceBigqueryInput)(nil)).Elem(), &SourceBigquery{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceBigqueryArrayInput)(nil)).Elem(), SourceBigqueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceBigqueryMapInput)(nil)).Elem(), SourceBigqueryMap{})
	pulumi.RegisterOutputType(SourceBigqueryOutput{})
	pulumi.RegisterOutputType(SourceBigqueryArrayOutput{})
	pulumi.RegisterOutputType(SourceBigqueryMapOutput{})
}
