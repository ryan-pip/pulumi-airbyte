// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SourceChargebee Resource
type SourceChargebee struct {
	pulumi.CustomResourceState

	Configuration SourceChargebeeConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput                `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceChargebee registers a new resource with the given unique name, arguments, and options.
func NewSourceChargebee(ctx *pulumi.Context,
	name string, args *SourceChargebeeArgs, opts ...pulumi.ResourceOption) (*SourceChargebee, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceChargebee
	err := ctx.RegisterResource("airbyte:index/sourceChargebee:SourceChargebee", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceChargebee gets an existing SourceChargebee resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceChargebee(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceChargebeeState, opts ...pulumi.ResourceOption) (*SourceChargebee, error) {
	var resource SourceChargebee
	err := ctx.ReadResource("airbyte:index/sourceChargebee:SourceChargebee", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceChargebee resources.
type sourceChargebeeState struct {
	Configuration *SourceChargebeeConfiguration `pulumi:"configuration"`
	Name          *string                       `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceChargebeeState struct {
	Configuration SourceChargebeeConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceChargebeeState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceChargebeeState)(nil)).Elem()
}

type sourceChargebeeArgs struct {
	Configuration SourceChargebeeConfiguration `pulumi:"configuration"`
	Name          string                       `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceChargebee resource.
type SourceChargebeeArgs struct {
	Configuration SourceChargebeeConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceChargebeeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceChargebeeArgs)(nil)).Elem()
}

type SourceChargebeeInput interface {
	pulumi.Input

	ToSourceChargebeeOutput() SourceChargebeeOutput
	ToSourceChargebeeOutputWithContext(ctx context.Context) SourceChargebeeOutput
}

func (*SourceChargebee) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceChargebee)(nil)).Elem()
}

func (i *SourceChargebee) ToSourceChargebeeOutput() SourceChargebeeOutput {
	return i.ToSourceChargebeeOutputWithContext(context.Background())
}

func (i *SourceChargebee) ToSourceChargebeeOutputWithContext(ctx context.Context) SourceChargebeeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceChargebeeOutput)
}

// SourceChargebeeArrayInput is an input type that accepts SourceChargebeeArray and SourceChargebeeArrayOutput values.
// You can construct a concrete instance of `SourceChargebeeArrayInput` via:
//
//	SourceChargebeeArray{ SourceChargebeeArgs{...} }
type SourceChargebeeArrayInput interface {
	pulumi.Input

	ToSourceChargebeeArrayOutput() SourceChargebeeArrayOutput
	ToSourceChargebeeArrayOutputWithContext(context.Context) SourceChargebeeArrayOutput
}

type SourceChargebeeArray []SourceChargebeeInput

func (SourceChargebeeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceChargebee)(nil)).Elem()
}

func (i SourceChargebeeArray) ToSourceChargebeeArrayOutput() SourceChargebeeArrayOutput {
	return i.ToSourceChargebeeArrayOutputWithContext(context.Background())
}

func (i SourceChargebeeArray) ToSourceChargebeeArrayOutputWithContext(ctx context.Context) SourceChargebeeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceChargebeeArrayOutput)
}

// SourceChargebeeMapInput is an input type that accepts SourceChargebeeMap and SourceChargebeeMapOutput values.
// You can construct a concrete instance of `SourceChargebeeMapInput` via:
//
//	SourceChargebeeMap{ "key": SourceChargebeeArgs{...} }
type SourceChargebeeMapInput interface {
	pulumi.Input

	ToSourceChargebeeMapOutput() SourceChargebeeMapOutput
	ToSourceChargebeeMapOutputWithContext(context.Context) SourceChargebeeMapOutput
}

type SourceChargebeeMap map[string]SourceChargebeeInput

func (SourceChargebeeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceChargebee)(nil)).Elem()
}

func (i SourceChargebeeMap) ToSourceChargebeeMapOutput() SourceChargebeeMapOutput {
	return i.ToSourceChargebeeMapOutputWithContext(context.Background())
}

func (i SourceChargebeeMap) ToSourceChargebeeMapOutputWithContext(ctx context.Context) SourceChargebeeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceChargebeeMapOutput)
}

type SourceChargebeeOutput struct{ *pulumi.OutputState }

func (SourceChargebeeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceChargebee)(nil)).Elem()
}

func (o SourceChargebeeOutput) ToSourceChargebeeOutput() SourceChargebeeOutput {
	return o
}

func (o SourceChargebeeOutput) ToSourceChargebeeOutputWithContext(ctx context.Context) SourceChargebeeOutput {
	return o
}

func (o SourceChargebeeOutput) Configuration() SourceChargebeeConfigurationOutput {
	return o.ApplyT(func(v *SourceChargebee) SourceChargebeeConfigurationOutput { return v.Configuration }).(SourceChargebeeConfigurationOutput)
}

func (o SourceChargebeeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceChargebee) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceChargebeeOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceChargebee) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceChargebeeOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceChargebee) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceChargebeeOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceChargebee) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceChargebeeOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceChargebee) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceChargebeeArrayOutput struct{ *pulumi.OutputState }

func (SourceChargebeeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceChargebee)(nil)).Elem()
}

func (o SourceChargebeeArrayOutput) ToSourceChargebeeArrayOutput() SourceChargebeeArrayOutput {
	return o
}

func (o SourceChargebeeArrayOutput) ToSourceChargebeeArrayOutputWithContext(ctx context.Context) SourceChargebeeArrayOutput {
	return o
}

func (o SourceChargebeeArrayOutput) Index(i pulumi.IntInput) SourceChargebeeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceChargebee {
		return vs[0].([]*SourceChargebee)[vs[1].(int)]
	}).(SourceChargebeeOutput)
}

type SourceChargebeeMapOutput struct{ *pulumi.OutputState }

func (SourceChargebeeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceChargebee)(nil)).Elem()
}

func (o SourceChargebeeMapOutput) ToSourceChargebeeMapOutput() SourceChargebeeMapOutput {
	return o
}

func (o SourceChargebeeMapOutput) ToSourceChargebeeMapOutputWithContext(ctx context.Context) SourceChargebeeMapOutput {
	return o
}

func (o SourceChargebeeMapOutput) MapIndex(k pulumi.StringInput) SourceChargebeeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceChargebee {
		return vs[0].(map[string]*SourceChargebee)[vs[1].(string)]
	}).(SourceChargebeeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceChargebeeInput)(nil)).Elem(), &SourceChargebee{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceChargebeeArrayInput)(nil)).Elem(), SourceChargebeeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceChargebeeMapInput)(nil)).Elem(), SourceChargebeeMap{})
	pulumi.RegisterOutputType(SourceChargebeeOutput{})
	pulumi.RegisterOutputType(SourceChargebeeArrayOutput{})
	pulumi.RegisterOutputType(SourceChargebeeMapOutput{})
}
