// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DestinationPubsub struct {
	pulumi.CustomResourceState

	Configuration   DestinationPubsubConfigurationOutput `pulumi:"configuration"`
	DestinationId   pulumi.StringOutput                  `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput                  `pulumi:"destinationType"`
	Name            pulumi.StringOutput                  `pulumi:"name"`
	WorkspaceId     pulumi.StringOutput                  `pulumi:"workspaceId"`
}

// NewDestinationPubsub registers a new resource with the given unique name, arguments, and options.
func NewDestinationPubsub(ctx *pulumi.Context,
	name string, args *DestinationPubsubArgs, opts ...pulumi.ResourceOption) (*DestinationPubsub, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	var resource DestinationPubsub
	err := ctx.RegisterResource("airbyte:index/destinationPubsub:DestinationPubsub", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationPubsub gets an existing DestinationPubsub resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationPubsub(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationPubsubState, opts ...pulumi.ResourceOption) (*DestinationPubsub, error) {
	var resource DestinationPubsub
	err := ctx.ReadResource("airbyte:index/destinationPubsub:DestinationPubsub", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationPubsub resources.
type destinationPubsubState struct {
	Configuration   *DestinationPubsubConfiguration `pulumi:"configuration"`
	DestinationId   *string                         `pulumi:"destinationId"`
	DestinationType *string                         `pulumi:"destinationType"`
	Name            *string                         `pulumi:"name"`
	WorkspaceId     *string                         `pulumi:"workspaceId"`
}

type DestinationPubsubState struct {
	Configuration   DestinationPubsubConfigurationPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	WorkspaceId     pulumi.StringPtrInput
}

func (DestinationPubsubState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationPubsubState)(nil)).Elem()
}

type destinationPubsubArgs struct {
	Configuration DestinationPubsubConfiguration `pulumi:"configuration"`
	Name          string                         `pulumi:"name"`
	WorkspaceId   string                         `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationPubsub resource.
type DestinationPubsubArgs struct {
	Configuration DestinationPubsubConfigurationInput
	Name          pulumi.StringInput
	WorkspaceId   pulumi.StringInput
}

func (DestinationPubsubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationPubsubArgs)(nil)).Elem()
}

type DestinationPubsubInput interface {
	pulumi.Input

	ToDestinationPubsubOutput() DestinationPubsubOutput
	ToDestinationPubsubOutputWithContext(ctx context.Context) DestinationPubsubOutput
}

func (*DestinationPubsub) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationPubsub)(nil)).Elem()
}

func (i *DestinationPubsub) ToDestinationPubsubOutput() DestinationPubsubOutput {
	return i.ToDestinationPubsubOutputWithContext(context.Background())
}

func (i *DestinationPubsub) ToDestinationPubsubOutputWithContext(ctx context.Context) DestinationPubsubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationPubsubOutput)
}

type DestinationPubsubOutput struct{ *pulumi.OutputState }

func (DestinationPubsubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationPubsub)(nil)).Elem()
}

func (o DestinationPubsubOutput) ToDestinationPubsubOutput() DestinationPubsubOutput {
	return o
}

func (o DestinationPubsubOutput) ToDestinationPubsubOutputWithContext(ctx context.Context) DestinationPubsubOutput {
	return o
}

func (o DestinationPubsubOutput) Configuration() DestinationPubsubConfigurationOutput {
	return o.ApplyT(func(v *DestinationPubsub) DestinationPubsubConfigurationOutput { return v.Configuration }).(DestinationPubsubConfigurationOutput)
}

func (o DestinationPubsubOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationPubsub) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationPubsubOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationPubsub) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

func (o DestinationPubsubOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationPubsub) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationPubsubOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationPubsub) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationPubsubInput)(nil)).Elem(), &DestinationPubsub{})
	pulumi.RegisterOutputType(DestinationPubsubOutput{})
}
