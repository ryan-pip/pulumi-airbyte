// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SourceRedshift Resource
type SourceRedshift struct {
	pulumi.CustomResourceState

	Configuration SourceRedshiftConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput               `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceRedshift registers a new resource with the given unique name, arguments, and options.
func NewSourceRedshift(ctx *pulumi.Context,
	name string, args *SourceRedshiftArgs, opts ...pulumi.ResourceOption) (*SourceRedshift, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceRedshift
	err := ctx.RegisterResource("airbyte:index/sourceRedshift:SourceRedshift", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceRedshift gets an existing SourceRedshift resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceRedshift(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceRedshiftState, opts ...pulumi.ResourceOption) (*SourceRedshift, error) {
	var resource SourceRedshift
	err := ctx.ReadResource("airbyte:index/sourceRedshift:SourceRedshift", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceRedshift resources.
type sourceRedshiftState struct {
	Configuration *SourceRedshiftConfiguration `pulumi:"configuration"`
	Name          *string                      `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceRedshiftState struct {
	Configuration SourceRedshiftConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceRedshiftState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceRedshiftState)(nil)).Elem()
}

type sourceRedshiftArgs struct {
	Configuration SourceRedshiftConfiguration `pulumi:"configuration"`
	Name          string                      `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceRedshift resource.
type SourceRedshiftArgs struct {
	Configuration SourceRedshiftConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceRedshiftArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceRedshiftArgs)(nil)).Elem()
}

type SourceRedshiftInput interface {
	pulumi.Input

	ToSourceRedshiftOutput() SourceRedshiftOutput
	ToSourceRedshiftOutputWithContext(ctx context.Context) SourceRedshiftOutput
}

func (*SourceRedshift) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceRedshift)(nil)).Elem()
}

func (i *SourceRedshift) ToSourceRedshiftOutput() SourceRedshiftOutput {
	return i.ToSourceRedshiftOutputWithContext(context.Background())
}

func (i *SourceRedshift) ToSourceRedshiftOutputWithContext(ctx context.Context) SourceRedshiftOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRedshiftOutput)
}

// SourceRedshiftArrayInput is an input type that accepts SourceRedshiftArray and SourceRedshiftArrayOutput values.
// You can construct a concrete instance of `SourceRedshiftArrayInput` via:
//
//	SourceRedshiftArray{ SourceRedshiftArgs{...} }
type SourceRedshiftArrayInput interface {
	pulumi.Input

	ToSourceRedshiftArrayOutput() SourceRedshiftArrayOutput
	ToSourceRedshiftArrayOutputWithContext(context.Context) SourceRedshiftArrayOutput
}

type SourceRedshiftArray []SourceRedshiftInput

func (SourceRedshiftArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceRedshift)(nil)).Elem()
}

func (i SourceRedshiftArray) ToSourceRedshiftArrayOutput() SourceRedshiftArrayOutput {
	return i.ToSourceRedshiftArrayOutputWithContext(context.Background())
}

func (i SourceRedshiftArray) ToSourceRedshiftArrayOutputWithContext(ctx context.Context) SourceRedshiftArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRedshiftArrayOutput)
}

// SourceRedshiftMapInput is an input type that accepts SourceRedshiftMap and SourceRedshiftMapOutput values.
// You can construct a concrete instance of `SourceRedshiftMapInput` via:
//
//	SourceRedshiftMap{ "key": SourceRedshiftArgs{...} }
type SourceRedshiftMapInput interface {
	pulumi.Input

	ToSourceRedshiftMapOutput() SourceRedshiftMapOutput
	ToSourceRedshiftMapOutputWithContext(context.Context) SourceRedshiftMapOutput
}

type SourceRedshiftMap map[string]SourceRedshiftInput

func (SourceRedshiftMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceRedshift)(nil)).Elem()
}

func (i SourceRedshiftMap) ToSourceRedshiftMapOutput() SourceRedshiftMapOutput {
	return i.ToSourceRedshiftMapOutputWithContext(context.Background())
}

func (i SourceRedshiftMap) ToSourceRedshiftMapOutputWithContext(ctx context.Context) SourceRedshiftMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRedshiftMapOutput)
}

type SourceRedshiftOutput struct{ *pulumi.OutputState }

func (SourceRedshiftOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceRedshift)(nil)).Elem()
}

func (o SourceRedshiftOutput) ToSourceRedshiftOutput() SourceRedshiftOutput {
	return o
}

func (o SourceRedshiftOutput) ToSourceRedshiftOutputWithContext(ctx context.Context) SourceRedshiftOutput {
	return o
}

func (o SourceRedshiftOutput) Configuration() SourceRedshiftConfigurationOutput {
	return o.ApplyT(func(v *SourceRedshift) SourceRedshiftConfigurationOutput { return v.Configuration }).(SourceRedshiftConfigurationOutput)
}

func (o SourceRedshiftOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceRedshift) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceRedshiftOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceRedshift) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceRedshiftOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceRedshift) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceRedshiftOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceRedshift) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceRedshiftOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceRedshift) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceRedshiftArrayOutput struct{ *pulumi.OutputState }

func (SourceRedshiftArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceRedshift)(nil)).Elem()
}

func (o SourceRedshiftArrayOutput) ToSourceRedshiftArrayOutput() SourceRedshiftArrayOutput {
	return o
}

func (o SourceRedshiftArrayOutput) ToSourceRedshiftArrayOutputWithContext(ctx context.Context) SourceRedshiftArrayOutput {
	return o
}

func (o SourceRedshiftArrayOutput) Index(i pulumi.IntInput) SourceRedshiftOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceRedshift {
		return vs[0].([]*SourceRedshift)[vs[1].(int)]
	}).(SourceRedshiftOutput)
}

type SourceRedshiftMapOutput struct{ *pulumi.OutputState }

func (SourceRedshiftMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceRedshift)(nil)).Elem()
}

func (o SourceRedshiftMapOutput) ToSourceRedshiftMapOutput() SourceRedshiftMapOutput {
	return o
}

func (o SourceRedshiftMapOutput) ToSourceRedshiftMapOutputWithContext(ctx context.Context) SourceRedshiftMapOutput {
	return o
}

func (o SourceRedshiftMapOutput) MapIndex(k pulumi.StringInput) SourceRedshiftOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceRedshift {
		return vs[0].(map[string]*SourceRedshift)[vs[1].(string)]
	}).(SourceRedshiftOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceRedshiftInput)(nil)).Elem(), &SourceRedshift{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceRedshiftArrayInput)(nil)).Elem(), SourceRedshiftArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceRedshiftMapInput)(nil)).Elem(), SourceRedshiftMap{})
	pulumi.RegisterOutputType(SourceRedshiftOutput{})
	pulumi.RegisterOutputType(SourceRedshiftArrayOutput{})
	pulumi.RegisterOutputType(SourceRedshiftMapOutput{})
}
