// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-airbyte/sdk/go/airbyte/internal"
)

// SourceXero Resource
type SourceXero struct {
	pulumi.CustomResourceState

	Configuration SourceXeroConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput           `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceXero registers a new resource with the given unique name, arguments, and options.
func NewSourceXero(ctx *pulumi.Context,
	name string, args *SourceXeroArgs, opts ...pulumi.ResourceOption) (*SourceXero, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceXero
	err := ctx.RegisterResource("airbyte:index/sourceXero:SourceXero", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceXero gets an existing SourceXero resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceXero(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceXeroState, opts ...pulumi.ResourceOption) (*SourceXero, error) {
	var resource SourceXero
	err := ctx.ReadResource("airbyte:index/sourceXero:SourceXero", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceXero resources.
type sourceXeroState struct {
	Configuration *SourceXeroConfiguration `pulumi:"configuration"`
	Name          *string                  `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceXeroState struct {
	Configuration SourceXeroConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceXeroState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceXeroState)(nil)).Elem()
}

type sourceXeroArgs struct {
	Configuration SourceXeroConfiguration `pulumi:"configuration"`
	Name          string                  `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceXero resource.
type SourceXeroArgs struct {
	Configuration SourceXeroConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceXeroArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceXeroArgs)(nil)).Elem()
}

type SourceXeroInput interface {
	pulumi.Input

	ToSourceXeroOutput() SourceXeroOutput
	ToSourceXeroOutputWithContext(ctx context.Context) SourceXeroOutput
}

func (*SourceXero) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceXero)(nil)).Elem()
}

func (i *SourceXero) ToSourceXeroOutput() SourceXeroOutput {
	return i.ToSourceXeroOutputWithContext(context.Background())
}

func (i *SourceXero) ToSourceXeroOutputWithContext(ctx context.Context) SourceXeroOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceXeroOutput)
}

// SourceXeroArrayInput is an input type that accepts SourceXeroArray and SourceXeroArrayOutput values.
// You can construct a concrete instance of `SourceXeroArrayInput` via:
//
//	SourceXeroArray{ SourceXeroArgs{...} }
type SourceXeroArrayInput interface {
	pulumi.Input

	ToSourceXeroArrayOutput() SourceXeroArrayOutput
	ToSourceXeroArrayOutputWithContext(context.Context) SourceXeroArrayOutput
}

type SourceXeroArray []SourceXeroInput

func (SourceXeroArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceXero)(nil)).Elem()
}

func (i SourceXeroArray) ToSourceXeroArrayOutput() SourceXeroArrayOutput {
	return i.ToSourceXeroArrayOutputWithContext(context.Background())
}

func (i SourceXeroArray) ToSourceXeroArrayOutputWithContext(ctx context.Context) SourceXeroArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceXeroArrayOutput)
}

// SourceXeroMapInput is an input type that accepts SourceXeroMap and SourceXeroMapOutput values.
// You can construct a concrete instance of `SourceXeroMapInput` via:
//
//	SourceXeroMap{ "key": SourceXeroArgs{...} }
type SourceXeroMapInput interface {
	pulumi.Input

	ToSourceXeroMapOutput() SourceXeroMapOutput
	ToSourceXeroMapOutputWithContext(context.Context) SourceXeroMapOutput
}

type SourceXeroMap map[string]SourceXeroInput

func (SourceXeroMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceXero)(nil)).Elem()
}

func (i SourceXeroMap) ToSourceXeroMapOutput() SourceXeroMapOutput {
	return i.ToSourceXeroMapOutputWithContext(context.Background())
}

func (i SourceXeroMap) ToSourceXeroMapOutputWithContext(ctx context.Context) SourceXeroMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceXeroMapOutput)
}

type SourceXeroOutput struct{ *pulumi.OutputState }

func (SourceXeroOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceXero)(nil)).Elem()
}

func (o SourceXeroOutput) ToSourceXeroOutput() SourceXeroOutput {
	return o
}

func (o SourceXeroOutput) ToSourceXeroOutputWithContext(ctx context.Context) SourceXeroOutput {
	return o
}

func (o SourceXeroOutput) Configuration() SourceXeroConfigurationOutput {
	return o.ApplyT(func(v *SourceXero) SourceXeroConfigurationOutput { return v.Configuration }).(SourceXeroConfigurationOutput)
}

func (o SourceXeroOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceXero) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceXeroOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceXero) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceXeroOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceXero) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceXeroOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceXero) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceXeroOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceXero) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceXeroArrayOutput struct{ *pulumi.OutputState }

func (SourceXeroArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceXero)(nil)).Elem()
}

func (o SourceXeroArrayOutput) ToSourceXeroArrayOutput() SourceXeroArrayOutput {
	return o
}

func (o SourceXeroArrayOutput) ToSourceXeroArrayOutputWithContext(ctx context.Context) SourceXeroArrayOutput {
	return o
}

func (o SourceXeroArrayOutput) Index(i pulumi.IntInput) SourceXeroOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceXero {
		return vs[0].([]*SourceXero)[vs[1].(int)]
	}).(SourceXeroOutput)
}

type SourceXeroMapOutput struct{ *pulumi.OutputState }

func (SourceXeroMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceXero)(nil)).Elem()
}

func (o SourceXeroMapOutput) ToSourceXeroMapOutput() SourceXeroMapOutput {
	return o
}

func (o SourceXeroMapOutput) ToSourceXeroMapOutputWithContext(ctx context.Context) SourceXeroMapOutput {
	return o
}

func (o SourceXeroMapOutput) MapIndex(k pulumi.StringInput) SourceXeroOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceXero {
		return vs[0].(map[string]*SourceXero)[vs[1].(string)]
	}).(SourceXeroOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceXeroInput)(nil)).Elem(), &SourceXero{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceXeroArrayInput)(nil)).Elem(), SourceXeroArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceXeroMapInput)(nil)).Elem(), SourceXeroMap{})
	pulumi.RegisterOutputType(SourceXeroOutput{})
	pulumi.RegisterOutputType(SourceXeroArrayOutput{})
	pulumi.RegisterOutputType(SourceXeroMapOutput{})
}
