// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SourceGitlab Resource
type SourceGitlab struct {
	pulumi.CustomResourceState

	Configuration SourceGitlabConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput             `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceGitlab registers a new resource with the given unique name, arguments, and options.
func NewSourceGitlab(ctx *pulumi.Context,
	name string, args *SourceGitlabArgs, opts ...pulumi.ResourceOption) (*SourceGitlab, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceGitlab
	err := ctx.RegisterResource("airbyte:index/sourceGitlab:SourceGitlab", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceGitlab gets an existing SourceGitlab resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceGitlab(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceGitlabState, opts ...pulumi.ResourceOption) (*SourceGitlab, error) {
	var resource SourceGitlab
	err := ctx.ReadResource("airbyte:index/sourceGitlab:SourceGitlab", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceGitlab resources.
type sourceGitlabState struct {
	Configuration *SourceGitlabConfiguration `pulumi:"configuration"`
	Name          *string                    `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceGitlabState struct {
	Configuration SourceGitlabConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceGitlabState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceGitlabState)(nil)).Elem()
}

type sourceGitlabArgs struct {
	Configuration SourceGitlabConfiguration `pulumi:"configuration"`
	Name          string                    `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceGitlab resource.
type SourceGitlabArgs struct {
	Configuration SourceGitlabConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceGitlabArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceGitlabArgs)(nil)).Elem()
}

type SourceGitlabInput interface {
	pulumi.Input

	ToSourceGitlabOutput() SourceGitlabOutput
	ToSourceGitlabOutputWithContext(ctx context.Context) SourceGitlabOutput
}

func (*SourceGitlab) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceGitlab)(nil)).Elem()
}

func (i *SourceGitlab) ToSourceGitlabOutput() SourceGitlabOutput {
	return i.ToSourceGitlabOutputWithContext(context.Background())
}

func (i *SourceGitlab) ToSourceGitlabOutputWithContext(ctx context.Context) SourceGitlabOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceGitlabOutput)
}

// SourceGitlabArrayInput is an input type that accepts SourceGitlabArray and SourceGitlabArrayOutput values.
// You can construct a concrete instance of `SourceGitlabArrayInput` via:
//
//	SourceGitlabArray{ SourceGitlabArgs{...} }
type SourceGitlabArrayInput interface {
	pulumi.Input

	ToSourceGitlabArrayOutput() SourceGitlabArrayOutput
	ToSourceGitlabArrayOutputWithContext(context.Context) SourceGitlabArrayOutput
}

type SourceGitlabArray []SourceGitlabInput

func (SourceGitlabArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceGitlab)(nil)).Elem()
}

func (i SourceGitlabArray) ToSourceGitlabArrayOutput() SourceGitlabArrayOutput {
	return i.ToSourceGitlabArrayOutputWithContext(context.Background())
}

func (i SourceGitlabArray) ToSourceGitlabArrayOutputWithContext(ctx context.Context) SourceGitlabArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceGitlabArrayOutput)
}

// SourceGitlabMapInput is an input type that accepts SourceGitlabMap and SourceGitlabMapOutput values.
// You can construct a concrete instance of `SourceGitlabMapInput` via:
//
//	SourceGitlabMap{ "key": SourceGitlabArgs{...} }
type SourceGitlabMapInput interface {
	pulumi.Input

	ToSourceGitlabMapOutput() SourceGitlabMapOutput
	ToSourceGitlabMapOutputWithContext(context.Context) SourceGitlabMapOutput
}

type SourceGitlabMap map[string]SourceGitlabInput

func (SourceGitlabMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceGitlab)(nil)).Elem()
}

func (i SourceGitlabMap) ToSourceGitlabMapOutput() SourceGitlabMapOutput {
	return i.ToSourceGitlabMapOutputWithContext(context.Background())
}

func (i SourceGitlabMap) ToSourceGitlabMapOutputWithContext(ctx context.Context) SourceGitlabMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceGitlabMapOutput)
}

type SourceGitlabOutput struct{ *pulumi.OutputState }

func (SourceGitlabOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceGitlab)(nil)).Elem()
}

func (o SourceGitlabOutput) ToSourceGitlabOutput() SourceGitlabOutput {
	return o
}

func (o SourceGitlabOutput) ToSourceGitlabOutputWithContext(ctx context.Context) SourceGitlabOutput {
	return o
}

func (o SourceGitlabOutput) Configuration() SourceGitlabConfigurationOutput {
	return o.ApplyT(func(v *SourceGitlab) SourceGitlabConfigurationOutput { return v.Configuration }).(SourceGitlabConfigurationOutput)
}

func (o SourceGitlabOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceGitlab) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceGitlabOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceGitlab) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceGitlabOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceGitlab) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceGitlabOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceGitlab) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceGitlabOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceGitlab) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceGitlabArrayOutput struct{ *pulumi.OutputState }

func (SourceGitlabArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceGitlab)(nil)).Elem()
}

func (o SourceGitlabArrayOutput) ToSourceGitlabArrayOutput() SourceGitlabArrayOutput {
	return o
}

func (o SourceGitlabArrayOutput) ToSourceGitlabArrayOutputWithContext(ctx context.Context) SourceGitlabArrayOutput {
	return o
}

func (o SourceGitlabArrayOutput) Index(i pulumi.IntInput) SourceGitlabOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceGitlab {
		return vs[0].([]*SourceGitlab)[vs[1].(int)]
	}).(SourceGitlabOutput)
}

type SourceGitlabMapOutput struct{ *pulumi.OutputState }

func (SourceGitlabMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceGitlab)(nil)).Elem()
}

func (o SourceGitlabMapOutput) ToSourceGitlabMapOutput() SourceGitlabMapOutput {
	return o
}

func (o SourceGitlabMapOutput) ToSourceGitlabMapOutputWithContext(ctx context.Context) SourceGitlabMapOutput {
	return o
}

func (o SourceGitlabMapOutput) MapIndex(k pulumi.StringInput) SourceGitlabOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceGitlab {
		return vs[0].(map[string]*SourceGitlab)[vs[1].(string)]
	}).(SourceGitlabOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceGitlabInput)(nil)).Elem(), &SourceGitlab{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceGitlabArrayInput)(nil)).Elem(), SourceGitlabArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceGitlabMapInput)(nil)).Elem(), SourceGitlabMap{})
	pulumi.RegisterOutputType(SourceGitlabOutput{})
	pulumi.RegisterOutputType(SourceGitlabArrayOutput{})
	pulumi.RegisterOutputType(SourceGitlabMapOutput{})
}
