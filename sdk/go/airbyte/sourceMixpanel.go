// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-airbyte/sdk/go/airbyte/internal"
)

// SourceMixpanel Resource
type SourceMixpanel struct {
	pulumi.CustomResourceState

	Configuration SourceMixpanelConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput               `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceMixpanel registers a new resource with the given unique name, arguments, and options.
func NewSourceMixpanel(ctx *pulumi.Context,
	name string, args *SourceMixpanelArgs, opts ...pulumi.ResourceOption) (*SourceMixpanel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceMixpanel
	err := ctx.RegisterResource("airbyte:index/sourceMixpanel:SourceMixpanel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceMixpanel gets an existing SourceMixpanel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceMixpanel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceMixpanelState, opts ...pulumi.ResourceOption) (*SourceMixpanel, error) {
	var resource SourceMixpanel
	err := ctx.ReadResource("airbyte:index/sourceMixpanel:SourceMixpanel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceMixpanel resources.
type sourceMixpanelState struct {
	Configuration *SourceMixpanelConfiguration `pulumi:"configuration"`
	Name          *string                      `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceMixpanelState struct {
	Configuration SourceMixpanelConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceMixpanelState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceMixpanelState)(nil)).Elem()
}

type sourceMixpanelArgs struct {
	Configuration SourceMixpanelConfiguration `pulumi:"configuration"`
	Name          string                      `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceMixpanel resource.
type SourceMixpanelArgs struct {
	Configuration SourceMixpanelConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceMixpanelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceMixpanelArgs)(nil)).Elem()
}

type SourceMixpanelInput interface {
	pulumi.Input

	ToSourceMixpanelOutput() SourceMixpanelOutput
	ToSourceMixpanelOutputWithContext(ctx context.Context) SourceMixpanelOutput
}

func (*SourceMixpanel) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceMixpanel)(nil)).Elem()
}

func (i *SourceMixpanel) ToSourceMixpanelOutput() SourceMixpanelOutput {
	return i.ToSourceMixpanelOutputWithContext(context.Background())
}

func (i *SourceMixpanel) ToSourceMixpanelOutputWithContext(ctx context.Context) SourceMixpanelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceMixpanelOutput)
}

// SourceMixpanelArrayInput is an input type that accepts SourceMixpanelArray and SourceMixpanelArrayOutput values.
// You can construct a concrete instance of `SourceMixpanelArrayInput` via:
//
//	SourceMixpanelArray{ SourceMixpanelArgs{...} }
type SourceMixpanelArrayInput interface {
	pulumi.Input

	ToSourceMixpanelArrayOutput() SourceMixpanelArrayOutput
	ToSourceMixpanelArrayOutputWithContext(context.Context) SourceMixpanelArrayOutput
}

type SourceMixpanelArray []SourceMixpanelInput

func (SourceMixpanelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceMixpanel)(nil)).Elem()
}

func (i SourceMixpanelArray) ToSourceMixpanelArrayOutput() SourceMixpanelArrayOutput {
	return i.ToSourceMixpanelArrayOutputWithContext(context.Background())
}

func (i SourceMixpanelArray) ToSourceMixpanelArrayOutputWithContext(ctx context.Context) SourceMixpanelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceMixpanelArrayOutput)
}

// SourceMixpanelMapInput is an input type that accepts SourceMixpanelMap and SourceMixpanelMapOutput values.
// You can construct a concrete instance of `SourceMixpanelMapInput` via:
//
//	SourceMixpanelMap{ "key": SourceMixpanelArgs{...} }
type SourceMixpanelMapInput interface {
	pulumi.Input

	ToSourceMixpanelMapOutput() SourceMixpanelMapOutput
	ToSourceMixpanelMapOutputWithContext(context.Context) SourceMixpanelMapOutput
}

type SourceMixpanelMap map[string]SourceMixpanelInput

func (SourceMixpanelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceMixpanel)(nil)).Elem()
}

func (i SourceMixpanelMap) ToSourceMixpanelMapOutput() SourceMixpanelMapOutput {
	return i.ToSourceMixpanelMapOutputWithContext(context.Background())
}

func (i SourceMixpanelMap) ToSourceMixpanelMapOutputWithContext(ctx context.Context) SourceMixpanelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceMixpanelMapOutput)
}

type SourceMixpanelOutput struct{ *pulumi.OutputState }

func (SourceMixpanelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceMixpanel)(nil)).Elem()
}

func (o SourceMixpanelOutput) ToSourceMixpanelOutput() SourceMixpanelOutput {
	return o
}

func (o SourceMixpanelOutput) ToSourceMixpanelOutputWithContext(ctx context.Context) SourceMixpanelOutput {
	return o
}

func (o SourceMixpanelOutput) Configuration() SourceMixpanelConfigurationOutput {
	return o.ApplyT(func(v *SourceMixpanel) SourceMixpanelConfigurationOutput { return v.Configuration }).(SourceMixpanelConfigurationOutput)
}

func (o SourceMixpanelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceMixpanel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceMixpanelOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceMixpanel) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceMixpanelOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceMixpanel) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceMixpanelOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceMixpanel) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceMixpanelOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceMixpanel) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceMixpanelArrayOutput struct{ *pulumi.OutputState }

func (SourceMixpanelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceMixpanel)(nil)).Elem()
}

func (o SourceMixpanelArrayOutput) ToSourceMixpanelArrayOutput() SourceMixpanelArrayOutput {
	return o
}

func (o SourceMixpanelArrayOutput) ToSourceMixpanelArrayOutputWithContext(ctx context.Context) SourceMixpanelArrayOutput {
	return o
}

func (o SourceMixpanelArrayOutput) Index(i pulumi.IntInput) SourceMixpanelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceMixpanel {
		return vs[0].([]*SourceMixpanel)[vs[1].(int)]
	}).(SourceMixpanelOutput)
}

type SourceMixpanelMapOutput struct{ *pulumi.OutputState }

func (SourceMixpanelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceMixpanel)(nil)).Elem()
}

func (o SourceMixpanelMapOutput) ToSourceMixpanelMapOutput() SourceMixpanelMapOutput {
	return o
}

func (o SourceMixpanelMapOutput) ToSourceMixpanelMapOutputWithContext(ctx context.Context) SourceMixpanelMapOutput {
	return o
}

func (o SourceMixpanelMapOutput) MapIndex(k pulumi.StringInput) SourceMixpanelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceMixpanel {
		return vs[0].(map[string]*SourceMixpanel)[vs[1].(string)]
	}).(SourceMixpanelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceMixpanelInput)(nil)).Elem(), &SourceMixpanel{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceMixpanelArrayInput)(nil)).Elem(), SourceMixpanelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceMixpanelMapInput)(nil)).Elem(), SourceMixpanelMap{})
	pulumi.RegisterOutputType(SourceMixpanelOutput{})
	pulumi.RegisterOutputType(SourceMixpanelArrayOutput{})
	pulumi.RegisterOutputType(SourceMixpanelMapOutput{})
}
