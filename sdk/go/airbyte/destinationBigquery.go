// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// DestinationBigquery Resource
type DestinationBigquery struct {
	pulumi.CustomResourceState

	Configuration   DestinationBigqueryConfigurationOutput `pulumi:"configuration"`
	DestinationId   pulumi.StringOutput                    `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput                    `pulumi:"destinationType"`
	Name            pulumi.StringOutput                    `pulumi:"name"`
	WorkspaceId     pulumi.StringOutput                    `pulumi:"workspaceId"`
}

// NewDestinationBigquery registers a new resource with the given unique name, arguments, and options.
func NewDestinationBigquery(ctx *pulumi.Context,
	name string, args *DestinationBigqueryArgs, opts ...pulumi.ResourceOption) (*DestinationBigquery, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DestinationBigquery
	err := ctx.RegisterResource("airbyte:index/destinationBigquery:DestinationBigquery", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationBigquery gets an existing DestinationBigquery resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationBigquery(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationBigqueryState, opts ...pulumi.ResourceOption) (*DestinationBigquery, error) {
	var resource DestinationBigquery
	err := ctx.ReadResource("airbyte:index/destinationBigquery:DestinationBigquery", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationBigquery resources.
type destinationBigqueryState struct {
	Configuration   *DestinationBigqueryConfiguration `pulumi:"configuration"`
	DestinationId   *string                           `pulumi:"destinationId"`
	DestinationType *string                           `pulumi:"destinationType"`
	Name            *string                           `pulumi:"name"`
	WorkspaceId     *string                           `pulumi:"workspaceId"`
}

type DestinationBigqueryState struct {
	Configuration   DestinationBigqueryConfigurationPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	WorkspaceId     pulumi.StringPtrInput
}

func (DestinationBigqueryState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationBigqueryState)(nil)).Elem()
}

type destinationBigqueryArgs struct {
	Configuration DestinationBigqueryConfiguration `pulumi:"configuration"`
	Name          string                           `pulumi:"name"`
	WorkspaceId   string                           `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationBigquery resource.
type DestinationBigqueryArgs struct {
	Configuration DestinationBigqueryConfigurationInput
	Name          pulumi.StringInput
	WorkspaceId   pulumi.StringInput
}

func (DestinationBigqueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationBigqueryArgs)(nil)).Elem()
}

type DestinationBigqueryInput interface {
	pulumi.Input

	ToDestinationBigqueryOutput() DestinationBigqueryOutput
	ToDestinationBigqueryOutputWithContext(ctx context.Context) DestinationBigqueryOutput
}

func (*DestinationBigquery) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationBigquery)(nil)).Elem()
}

func (i *DestinationBigquery) ToDestinationBigqueryOutput() DestinationBigqueryOutput {
	return i.ToDestinationBigqueryOutputWithContext(context.Background())
}

func (i *DestinationBigquery) ToDestinationBigqueryOutputWithContext(ctx context.Context) DestinationBigqueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationBigqueryOutput)
}

// DestinationBigqueryArrayInput is an input type that accepts DestinationBigqueryArray and DestinationBigqueryArrayOutput values.
// You can construct a concrete instance of `DestinationBigqueryArrayInput` via:
//
//	DestinationBigqueryArray{ DestinationBigqueryArgs{...} }
type DestinationBigqueryArrayInput interface {
	pulumi.Input

	ToDestinationBigqueryArrayOutput() DestinationBigqueryArrayOutput
	ToDestinationBigqueryArrayOutputWithContext(context.Context) DestinationBigqueryArrayOutput
}

type DestinationBigqueryArray []DestinationBigqueryInput

func (DestinationBigqueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationBigquery)(nil)).Elem()
}

func (i DestinationBigqueryArray) ToDestinationBigqueryArrayOutput() DestinationBigqueryArrayOutput {
	return i.ToDestinationBigqueryArrayOutputWithContext(context.Background())
}

func (i DestinationBigqueryArray) ToDestinationBigqueryArrayOutputWithContext(ctx context.Context) DestinationBigqueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationBigqueryArrayOutput)
}

// DestinationBigqueryMapInput is an input type that accepts DestinationBigqueryMap and DestinationBigqueryMapOutput values.
// You can construct a concrete instance of `DestinationBigqueryMapInput` via:
//
//	DestinationBigqueryMap{ "key": DestinationBigqueryArgs{...} }
type DestinationBigqueryMapInput interface {
	pulumi.Input

	ToDestinationBigqueryMapOutput() DestinationBigqueryMapOutput
	ToDestinationBigqueryMapOutputWithContext(context.Context) DestinationBigqueryMapOutput
}

type DestinationBigqueryMap map[string]DestinationBigqueryInput

func (DestinationBigqueryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationBigquery)(nil)).Elem()
}

func (i DestinationBigqueryMap) ToDestinationBigqueryMapOutput() DestinationBigqueryMapOutput {
	return i.ToDestinationBigqueryMapOutputWithContext(context.Background())
}

func (i DestinationBigqueryMap) ToDestinationBigqueryMapOutputWithContext(ctx context.Context) DestinationBigqueryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationBigqueryMapOutput)
}

type DestinationBigqueryOutput struct{ *pulumi.OutputState }

func (DestinationBigqueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationBigquery)(nil)).Elem()
}

func (o DestinationBigqueryOutput) ToDestinationBigqueryOutput() DestinationBigqueryOutput {
	return o
}

func (o DestinationBigqueryOutput) ToDestinationBigqueryOutputWithContext(ctx context.Context) DestinationBigqueryOutput {
	return o
}

func (o DestinationBigqueryOutput) Configuration() DestinationBigqueryConfigurationOutput {
	return o.ApplyT(func(v *DestinationBigquery) DestinationBigqueryConfigurationOutput { return v.Configuration }).(DestinationBigqueryConfigurationOutput)
}

func (o DestinationBigqueryOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationBigquery) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationBigqueryOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationBigquery) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

func (o DestinationBigqueryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationBigquery) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationBigqueryOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationBigquery) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type DestinationBigqueryArrayOutput struct{ *pulumi.OutputState }

func (DestinationBigqueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationBigquery)(nil)).Elem()
}

func (o DestinationBigqueryArrayOutput) ToDestinationBigqueryArrayOutput() DestinationBigqueryArrayOutput {
	return o
}

func (o DestinationBigqueryArrayOutput) ToDestinationBigqueryArrayOutputWithContext(ctx context.Context) DestinationBigqueryArrayOutput {
	return o
}

func (o DestinationBigqueryArrayOutput) Index(i pulumi.IntInput) DestinationBigqueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DestinationBigquery {
		return vs[0].([]*DestinationBigquery)[vs[1].(int)]
	}).(DestinationBigqueryOutput)
}

type DestinationBigqueryMapOutput struct{ *pulumi.OutputState }

func (DestinationBigqueryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationBigquery)(nil)).Elem()
}

func (o DestinationBigqueryMapOutput) ToDestinationBigqueryMapOutput() DestinationBigqueryMapOutput {
	return o
}

func (o DestinationBigqueryMapOutput) ToDestinationBigqueryMapOutputWithContext(ctx context.Context) DestinationBigqueryMapOutput {
	return o
}

func (o DestinationBigqueryMapOutput) MapIndex(k pulumi.StringInput) DestinationBigqueryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DestinationBigquery {
		return vs[0].(map[string]*DestinationBigquery)[vs[1].(string)]
	}).(DestinationBigqueryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationBigqueryInput)(nil)).Elem(), &DestinationBigquery{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationBigqueryArrayInput)(nil)).Elem(), DestinationBigqueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationBigqueryMapInput)(nil)).Elem(), DestinationBigqueryMap{})
	pulumi.RegisterOutputType(DestinationBigqueryOutput{})
	pulumi.RegisterOutputType(DestinationBigqueryArrayOutput{})
	pulumi.RegisterOutputType(DestinationBigqueryMapOutput{})
}
