// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SourceXkcd Resource
type SourceXkcd struct {
	pulumi.CustomResourceState

	Configuration SourceXkcdConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput           `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceXkcd registers a new resource with the given unique name, arguments, and options.
func NewSourceXkcd(ctx *pulumi.Context,
	name string, args *SourceXkcdArgs, opts ...pulumi.ResourceOption) (*SourceXkcd, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceXkcd
	err := ctx.RegisterResource("airbyte:index/sourceXkcd:SourceXkcd", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceXkcd gets an existing SourceXkcd resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceXkcd(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceXkcdState, opts ...pulumi.ResourceOption) (*SourceXkcd, error) {
	var resource SourceXkcd
	err := ctx.ReadResource("airbyte:index/sourceXkcd:SourceXkcd", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceXkcd resources.
type sourceXkcdState struct {
	Configuration *SourceXkcdConfiguration `pulumi:"configuration"`
	Name          *string                  `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceXkcdState struct {
	Configuration SourceXkcdConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceXkcdState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceXkcdState)(nil)).Elem()
}

type sourceXkcdArgs struct {
	Configuration SourceXkcdConfiguration `pulumi:"configuration"`
	Name          string                  `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceXkcd resource.
type SourceXkcdArgs struct {
	Configuration SourceXkcdConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceXkcdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceXkcdArgs)(nil)).Elem()
}

type SourceXkcdInput interface {
	pulumi.Input

	ToSourceXkcdOutput() SourceXkcdOutput
	ToSourceXkcdOutputWithContext(ctx context.Context) SourceXkcdOutput
}

func (*SourceXkcd) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceXkcd)(nil)).Elem()
}

func (i *SourceXkcd) ToSourceXkcdOutput() SourceXkcdOutput {
	return i.ToSourceXkcdOutputWithContext(context.Background())
}

func (i *SourceXkcd) ToSourceXkcdOutputWithContext(ctx context.Context) SourceXkcdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceXkcdOutput)
}

// SourceXkcdArrayInput is an input type that accepts SourceXkcdArray and SourceXkcdArrayOutput values.
// You can construct a concrete instance of `SourceXkcdArrayInput` via:
//
//	SourceXkcdArray{ SourceXkcdArgs{...} }
type SourceXkcdArrayInput interface {
	pulumi.Input

	ToSourceXkcdArrayOutput() SourceXkcdArrayOutput
	ToSourceXkcdArrayOutputWithContext(context.Context) SourceXkcdArrayOutput
}

type SourceXkcdArray []SourceXkcdInput

func (SourceXkcdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceXkcd)(nil)).Elem()
}

func (i SourceXkcdArray) ToSourceXkcdArrayOutput() SourceXkcdArrayOutput {
	return i.ToSourceXkcdArrayOutputWithContext(context.Background())
}

func (i SourceXkcdArray) ToSourceXkcdArrayOutputWithContext(ctx context.Context) SourceXkcdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceXkcdArrayOutput)
}

// SourceXkcdMapInput is an input type that accepts SourceXkcdMap and SourceXkcdMapOutput values.
// You can construct a concrete instance of `SourceXkcdMapInput` via:
//
//	SourceXkcdMap{ "key": SourceXkcdArgs{...} }
type SourceXkcdMapInput interface {
	pulumi.Input

	ToSourceXkcdMapOutput() SourceXkcdMapOutput
	ToSourceXkcdMapOutputWithContext(context.Context) SourceXkcdMapOutput
}

type SourceXkcdMap map[string]SourceXkcdInput

func (SourceXkcdMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceXkcd)(nil)).Elem()
}

func (i SourceXkcdMap) ToSourceXkcdMapOutput() SourceXkcdMapOutput {
	return i.ToSourceXkcdMapOutputWithContext(context.Background())
}

func (i SourceXkcdMap) ToSourceXkcdMapOutputWithContext(ctx context.Context) SourceXkcdMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceXkcdMapOutput)
}

type SourceXkcdOutput struct{ *pulumi.OutputState }

func (SourceXkcdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceXkcd)(nil)).Elem()
}

func (o SourceXkcdOutput) ToSourceXkcdOutput() SourceXkcdOutput {
	return o
}

func (o SourceXkcdOutput) ToSourceXkcdOutputWithContext(ctx context.Context) SourceXkcdOutput {
	return o
}

func (o SourceXkcdOutput) Configuration() SourceXkcdConfigurationOutput {
	return o.ApplyT(func(v *SourceXkcd) SourceXkcdConfigurationOutput { return v.Configuration }).(SourceXkcdConfigurationOutput)
}

func (o SourceXkcdOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceXkcd) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceXkcdOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceXkcd) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceXkcdOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceXkcd) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceXkcdOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceXkcd) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceXkcdOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceXkcd) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceXkcdArrayOutput struct{ *pulumi.OutputState }

func (SourceXkcdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceXkcd)(nil)).Elem()
}

func (o SourceXkcdArrayOutput) ToSourceXkcdArrayOutput() SourceXkcdArrayOutput {
	return o
}

func (o SourceXkcdArrayOutput) ToSourceXkcdArrayOutputWithContext(ctx context.Context) SourceXkcdArrayOutput {
	return o
}

func (o SourceXkcdArrayOutput) Index(i pulumi.IntInput) SourceXkcdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceXkcd {
		return vs[0].([]*SourceXkcd)[vs[1].(int)]
	}).(SourceXkcdOutput)
}

type SourceXkcdMapOutput struct{ *pulumi.OutputState }

func (SourceXkcdMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceXkcd)(nil)).Elem()
}

func (o SourceXkcdMapOutput) ToSourceXkcdMapOutput() SourceXkcdMapOutput {
	return o
}

func (o SourceXkcdMapOutput) ToSourceXkcdMapOutputWithContext(ctx context.Context) SourceXkcdMapOutput {
	return o
}

func (o SourceXkcdMapOutput) MapIndex(k pulumi.StringInput) SourceXkcdOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceXkcd {
		return vs[0].(map[string]*SourceXkcd)[vs[1].(string)]
	}).(SourceXkcdOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceXkcdInput)(nil)).Elem(), &SourceXkcd{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceXkcdArrayInput)(nil)).Elem(), SourceXkcdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceXkcdMapInput)(nil)).Elem(), SourceXkcdMap{})
	pulumi.RegisterOutputType(SourceXkcdOutput{})
	pulumi.RegisterOutputType(SourceXkcdArrayOutput{})
	pulumi.RegisterOutputType(SourceXkcdMapOutput{})
}
