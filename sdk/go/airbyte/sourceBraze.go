// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SourceBraze Resource
type SourceBraze struct {
	pulumi.CustomResourceState

	Configuration SourceBrazeConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput            `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceBraze registers a new resource with the given unique name, arguments, and options.
func NewSourceBraze(ctx *pulumi.Context,
	name string, args *SourceBrazeArgs, opts ...pulumi.ResourceOption) (*SourceBraze, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceBraze
	err := ctx.RegisterResource("airbyte:index/sourceBraze:SourceBraze", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceBraze gets an existing SourceBraze resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceBraze(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceBrazeState, opts ...pulumi.ResourceOption) (*SourceBraze, error) {
	var resource SourceBraze
	err := ctx.ReadResource("airbyte:index/sourceBraze:SourceBraze", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceBraze resources.
type sourceBrazeState struct {
	Configuration *SourceBrazeConfiguration `pulumi:"configuration"`
	Name          *string                   `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceBrazeState struct {
	Configuration SourceBrazeConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceBrazeState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceBrazeState)(nil)).Elem()
}

type sourceBrazeArgs struct {
	Configuration SourceBrazeConfiguration `pulumi:"configuration"`
	Name          string                   `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceBraze resource.
type SourceBrazeArgs struct {
	Configuration SourceBrazeConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceBrazeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceBrazeArgs)(nil)).Elem()
}

type SourceBrazeInput interface {
	pulumi.Input

	ToSourceBrazeOutput() SourceBrazeOutput
	ToSourceBrazeOutputWithContext(ctx context.Context) SourceBrazeOutput
}

func (*SourceBraze) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceBraze)(nil)).Elem()
}

func (i *SourceBraze) ToSourceBrazeOutput() SourceBrazeOutput {
	return i.ToSourceBrazeOutputWithContext(context.Background())
}

func (i *SourceBraze) ToSourceBrazeOutputWithContext(ctx context.Context) SourceBrazeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceBrazeOutput)
}

// SourceBrazeArrayInput is an input type that accepts SourceBrazeArray and SourceBrazeArrayOutput values.
// You can construct a concrete instance of `SourceBrazeArrayInput` via:
//
//	SourceBrazeArray{ SourceBrazeArgs{...} }
type SourceBrazeArrayInput interface {
	pulumi.Input

	ToSourceBrazeArrayOutput() SourceBrazeArrayOutput
	ToSourceBrazeArrayOutputWithContext(context.Context) SourceBrazeArrayOutput
}

type SourceBrazeArray []SourceBrazeInput

func (SourceBrazeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceBraze)(nil)).Elem()
}

func (i SourceBrazeArray) ToSourceBrazeArrayOutput() SourceBrazeArrayOutput {
	return i.ToSourceBrazeArrayOutputWithContext(context.Background())
}

func (i SourceBrazeArray) ToSourceBrazeArrayOutputWithContext(ctx context.Context) SourceBrazeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceBrazeArrayOutput)
}

// SourceBrazeMapInput is an input type that accepts SourceBrazeMap and SourceBrazeMapOutput values.
// You can construct a concrete instance of `SourceBrazeMapInput` via:
//
//	SourceBrazeMap{ "key": SourceBrazeArgs{...} }
type SourceBrazeMapInput interface {
	pulumi.Input

	ToSourceBrazeMapOutput() SourceBrazeMapOutput
	ToSourceBrazeMapOutputWithContext(context.Context) SourceBrazeMapOutput
}

type SourceBrazeMap map[string]SourceBrazeInput

func (SourceBrazeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceBraze)(nil)).Elem()
}

func (i SourceBrazeMap) ToSourceBrazeMapOutput() SourceBrazeMapOutput {
	return i.ToSourceBrazeMapOutputWithContext(context.Background())
}

func (i SourceBrazeMap) ToSourceBrazeMapOutputWithContext(ctx context.Context) SourceBrazeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceBrazeMapOutput)
}

type SourceBrazeOutput struct{ *pulumi.OutputState }

func (SourceBrazeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceBraze)(nil)).Elem()
}

func (o SourceBrazeOutput) ToSourceBrazeOutput() SourceBrazeOutput {
	return o
}

func (o SourceBrazeOutput) ToSourceBrazeOutputWithContext(ctx context.Context) SourceBrazeOutput {
	return o
}

func (o SourceBrazeOutput) Configuration() SourceBrazeConfigurationOutput {
	return o.ApplyT(func(v *SourceBraze) SourceBrazeConfigurationOutput { return v.Configuration }).(SourceBrazeConfigurationOutput)
}

func (o SourceBrazeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceBraze) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceBrazeOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceBraze) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceBrazeOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceBraze) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceBrazeOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceBraze) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceBrazeOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceBraze) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceBrazeArrayOutput struct{ *pulumi.OutputState }

func (SourceBrazeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceBraze)(nil)).Elem()
}

func (o SourceBrazeArrayOutput) ToSourceBrazeArrayOutput() SourceBrazeArrayOutput {
	return o
}

func (o SourceBrazeArrayOutput) ToSourceBrazeArrayOutputWithContext(ctx context.Context) SourceBrazeArrayOutput {
	return o
}

func (o SourceBrazeArrayOutput) Index(i pulumi.IntInput) SourceBrazeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceBraze {
		return vs[0].([]*SourceBraze)[vs[1].(int)]
	}).(SourceBrazeOutput)
}

type SourceBrazeMapOutput struct{ *pulumi.OutputState }

func (SourceBrazeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceBraze)(nil)).Elem()
}

func (o SourceBrazeMapOutput) ToSourceBrazeMapOutput() SourceBrazeMapOutput {
	return o
}

func (o SourceBrazeMapOutput) ToSourceBrazeMapOutputWithContext(ctx context.Context) SourceBrazeMapOutput {
	return o
}

func (o SourceBrazeMapOutput) MapIndex(k pulumi.StringInput) SourceBrazeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceBraze {
		return vs[0].(map[string]*SourceBraze)[vs[1].(string)]
	}).(SourceBrazeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceBrazeInput)(nil)).Elem(), &SourceBraze{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceBrazeArrayInput)(nil)).Elem(), SourceBrazeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceBrazeMapInput)(nil)).Elem(), SourceBrazeMap{})
	pulumi.RegisterOutputType(SourceBrazeOutput{})
	pulumi.RegisterOutputType(SourceBrazeArrayOutput{})
	pulumi.RegisterOutputType(SourceBrazeMapOutput{})
}
