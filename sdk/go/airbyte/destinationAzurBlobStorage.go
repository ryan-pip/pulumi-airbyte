// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DestinationAzurBlobStorage struct {
	pulumi.CustomResourceState

	Configuration   DestinationAzurBlobStorageConfigurationOutput `pulumi:"configuration"`
	DestinationId   pulumi.StringOutput                           `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput                           `pulumi:"destinationType"`
	Name            pulumi.StringOutput                           `pulumi:"name"`
	WorkspaceId     pulumi.StringOutput                           `pulumi:"workspaceId"`
}

// NewDestinationAzurBlobStorage registers a new resource with the given unique name, arguments, and options.
func NewDestinationAzurBlobStorage(ctx *pulumi.Context,
	name string, args *DestinationAzurBlobStorageArgs, opts ...pulumi.ResourceOption) (*DestinationAzurBlobStorage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	var resource DestinationAzurBlobStorage
	err := ctx.RegisterResource("airbyte:index/destinationAzurBlobStorage:DestinationAzurBlobStorage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationAzurBlobStorage gets an existing DestinationAzurBlobStorage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationAzurBlobStorage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationAzurBlobStorageState, opts ...pulumi.ResourceOption) (*DestinationAzurBlobStorage, error) {
	var resource DestinationAzurBlobStorage
	err := ctx.ReadResource("airbyte:index/destinationAzurBlobStorage:DestinationAzurBlobStorage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationAzurBlobStorage resources.
type destinationAzurBlobStorageState struct {
	Configuration   *DestinationAzurBlobStorageConfiguration `pulumi:"configuration"`
	DestinationId   *string                                  `pulumi:"destinationId"`
	DestinationType *string                                  `pulumi:"destinationType"`
	Name            *string                                  `pulumi:"name"`
	WorkspaceId     *string                                  `pulumi:"workspaceId"`
}

type DestinationAzurBlobStorageState struct {
	Configuration   DestinationAzurBlobStorageConfigurationPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	WorkspaceId     pulumi.StringPtrInput
}

func (DestinationAzurBlobStorageState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationAzurBlobStorageState)(nil)).Elem()
}

type destinationAzurBlobStorageArgs struct {
	Configuration DestinationAzurBlobStorageConfiguration `pulumi:"configuration"`
	Name          string                                  `pulumi:"name"`
	WorkspaceId   string                                  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationAzurBlobStorage resource.
type DestinationAzurBlobStorageArgs struct {
	Configuration DestinationAzurBlobStorageConfigurationInput
	Name          pulumi.StringInput
	WorkspaceId   pulumi.StringInput
}

func (DestinationAzurBlobStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationAzurBlobStorageArgs)(nil)).Elem()
}

type DestinationAzurBlobStorageInput interface {
	pulumi.Input

	ToDestinationAzurBlobStorageOutput() DestinationAzurBlobStorageOutput
	ToDestinationAzurBlobStorageOutputWithContext(ctx context.Context) DestinationAzurBlobStorageOutput
}

func (*DestinationAzurBlobStorage) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationAzurBlobStorage)(nil)).Elem()
}

func (i *DestinationAzurBlobStorage) ToDestinationAzurBlobStorageOutput() DestinationAzurBlobStorageOutput {
	return i.ToDestinationAzurBlobStorageOutputWithContext(context.Background())
}

func (i *DestinationAzurBlobStorage) ToDestinationAzurBlobStorageOutputWithContext(ctx context.Context) DestinationAzurBlobStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationAzurBlobStorageOutput)
}

type DestinationAzurBlobStorageOutput struct{ *pulumi.OutputState }

func (DestinationAzurBlobStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationAzurBlobStorage)(nil)).Elem()
}

func (o DestinationAzurBlobStorageOutput) ToDestinationAzurBlobStorageOutput() DestinationAzurBlobStorageOutput {
	return o
}

func (o DestinationAzurBlobStorageOutput) ToDestinationAzurBlobStorageOutputWithContext(ctx context.Context) DestinationAzurBlobStorageOutput {
	return o
}

func (o DestinationAzurBlobStorageOutput) Configuration() DestinationAzurBlobStorageConfigurationOutput {
	return o.ApplyT(func(v *DestinationAzurBlobStorage) DestinationAzurBlobStorageConfigurationOutput {
		return v.Configuration
	}).(DestinationAzurBlobStorageConfigurationOutput)
}

func (o DestinationAzurBlobStorageOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationAzurBlobStorage) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationAzurBlobStorageOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationAzurBlobStorage) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

func (o DestinationAzurBlobStorageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationAzurBlobStorage) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationAzurBlobStorageOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationAzurBlobStorage) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationAzurBlobStorageInput)(nil)).Elem(), &DestinationAzurBlobStorage{})
	pulumi.RegisterOutputType(DestinationAzurBlobStorageOutput{})
}
