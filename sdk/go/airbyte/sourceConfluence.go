// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SourceConfluence Resource
type SourceConfluence struct {
	pulumi.CustomResourceState

	Configuration SourceConfluenceConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput                 `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceConfluence registers a new resource with the given unique name, arguments, and options.
func NewSourceConfluence(ctx *pulumi.Context,
	name string, args *SourceConfluenceArgs, opts ...pulumi.ResourceOption) (*SourceConfluence, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceConfluence
	err := ctx.RegisterResource("airbyte:index/sourceConfluence:SourceConfluence", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceConfluence gets an existing SourceConfluence resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceConfluence(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceConfluenceState, opts ...pulumi.ResourceOption) (*SourceConfluence, error) {
	var resource SourceConfluence
	err := ctx.ReadResource("airbyte:index/sourceConfluence:SourceConfluence", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceConfluence resources.
type sourceConfluenceState struct {
	Configuration *SourceConfluenceConfiguration `pulumi:"configuration"`
	Name          *string                        `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceConfluenceState struct {
	Configuration SourceConfluenceConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceConfluenceState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceConfluenceState)(nil)).Elem()
}

type sourceConfluenceArgs struct {
	Configuration SourceConfluenceConfiguration `pulumi:"configuration"`
	Name          string                        `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceConfluence resource.
type SourceConfluenceArgs struct {
	Configuration SourceConfluenceConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceConfluenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceConfluenceArgs)(nil)).Elem()
}

type SourceConfluenceInput interface {
	pulumi.Input

	ToSourceConfluenceOutput() SourceConfluenceOutput
	ToSourceConfluenceOutputWithContext(ctx context.Context) SourceConfluenceOutput
}

func (*SourceConfluence) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceConfluence)(nil)).Elem()
}

func (i *SourceConfluence) ToSourceConfluenceOutput() SourceConfluenceOutput {
	return i.ToSourceConfluenceOutputWithContext(context.Background())
}

func (i *SourceConfluence) ToSourceConfluenceOutputWithContext(ctx context.Context) SourceConfluenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceConfluenceOutput)
}

// SourceConfluenceArrayInput is an input type that accepts SourceConfluenceArray and SourceConfluenceArrayOutput values.
// You can construct a concrete instance of `SourceConfluenceArrayInput` via:
//
//	SourceConfluenceArray{ SourceConfluenceArgs{...} }
type SourceConfluenceArrayInput interface {
	pulumi.Input

	ToSourceConfluenceArrayOutput() SourceConfluenceArrayOutput
	ToSourceConfluenceArrayOutputWithContext(context.Context) SourceConfluenceArrayOutput
}

type SourceConfluenceArray []SourceConfluenceInput

func (SourceConfluenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceConfluence)(nil)).Elem()
}

func (i SourceConfluenceArray) ToSourceConfluenceArrayOutput() SourceConfluenceArrayOutput {
	return i.ToSourceConfluenceArrayOutputWithContext(context.Background())
}

func (i SourceConfluenceArray) ToSourceConfluenceArrayOutputWithContext(ctx context.Context) SourceConfluenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceConfluenceArrayOutput)
}

// SourceConfluenceMapInput is an input type that accepts SourceConfluenceMap and SourceConfluenceMapOutput values.
// You can construct a concrete instance of `SourceConfluenceMapInput` via:
//
//	SourceConfluenceMap{ "key": SourceConfluenceArgs{...} }
type SourceConfluenceMapInput interface {
	pulumi.Input

	ToSourceConfluenceMapOutput() SourceConfluenceMapOutput
	ToSourceConfluenceMapOutputWithContext(context.Context) SourceConfluenceMapOutput
}

type SourceConfluenceMap map[string]SourceConfluenceInput

func (SourceConfluenceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceConfluence)(nil)).Elem()
}

func (i SourceConfluenceMap) ToSourceConfluenceMapOutput() SourceConfluenceMapOutput {
	return i.ToSourceConfluenceMapOutputWithContext(context.Background())
}

func (i SourceConfluenceMap) ToSourceConfluenceMapOutputWithContext(ctx context.Context) SourceConfluenceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceConfluenceMapOutput)
}

type SourceConfluenceOutput struct{ *pulumi.OutputState }

func (SourceConfluenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceConfluence)(nil)).Elem()
}

func (o SourceConfluenceOutput) ToSourceConfluenceOutput() SourceConfluenceOutput {
	return o
}

func (o SourceConfluenceOutput) ToSourceConfluenceOutputWithContext(ctx context.Context) SourceConfluenceOutput {
	return o
}

func (o SourceConfluenceOutput) Configuration() SourceConfluenceConfigurationOutput {
	return o.ApplyT(func(v *SourceConfluence) SourceConfluenceConfigurationOutput { return v.Configuration }).(SourceConfluenceConfigurationOutput)
}

func (o SourceConfluenceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceConfluence) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceConfluenceOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceConfluence) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceConfluenceOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceConfluence) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceConfluenceOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceConfluence) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceConfluenceOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceConfluence) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceConfluenceArrayOutput struct{ *pulumi.OutputState }

func (SourceConfluenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceConfluence)(nil)).Elem()
}

func (o SourceConfluenceArrayOutput) ToSourceConfluenceArrayOutput() SourceConfluenceArrayOutput {
	return o
}

func (o SourceConfluenceArrayOutput) ToSourceConfluenceArrayOutputWithContext(ctx context.Context) SourceConfluenceArrayOutput {
	return o
}

func (o SourceConfluenceArrayOutput) Index(i pulumi.IntInput) SourceConfluenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceConfluence {
		return vs[0].([]*SourceConfluence)[vs[1].(int)]
	}).(SourceConfluenceOutput)
}

type SourceConfluenceMapOutput struct{ *pulumi.OutputState }

func (SourceConfluenceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceConfluence)(nil)).Elem()
}

func (o SourceConfluenceMapOutput) ToSourceConfluenceMapOutput() SourceConfluenceMapOutput {
	return o
}

func (o SourceConfluenceMapOutput) ToSourceConfluenceMapOutputWithContext(ctx context.Context) SourceConfluenceMapOutput {
	return o
}

func (o SourceConfluenceMapOutput) MapIndex(k pulumi.StringInput) SourceConfluenceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceConfluence {
		return vs[0].(map[string]*SourceConfluence)[vs[1].(string)]
	}).(SourceConfluenceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceConfluenceInput)(nil)).Elem(), &SourceConfluence{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceConfluenceArrayInput)(nil)).Elem(), SourceConfluenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceConfluenceMapInput)(nil)).Elem(), SourceConfluenceMap{})
	pulumi.RegisterOutputType(SourceConfluenceOutput{})
	pulumi.RegisterOutputType(SourceConfluenceArrayOutput{})
	pulumi.RegisterOutputType(SourceConfluenceMapOutput{})
}
