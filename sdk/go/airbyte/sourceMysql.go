// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SourceMysql Resource
type SourceMysql struct {
	pulumi.CustomResourceState

	Configuration SourceMysqlConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput            `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceMysql registers a new resource with the given unique name, arguments, and options.
func NewSourceMysql(ctx *pulumi.Context,
	name string, args *SourceMysqlArgs, opts ...pulumi.ResourceOption) (*SourceMysql, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceMysql
	err := ctx.RegisterResource("airbyte:index/sourceMysql:SourceMysql", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceMysql gets an existing SourceMysql resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceMysql(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceMysqlState, opts ...pulumi.ResourceOption) (*SourceMysql, error) {
	var resource SourceMysql
	err := ctx.ReadResource("airbyte:index/sourceMysql:SourceMysql", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceMysql resources.
type sourceMysqlState struct {
	Configuration *SourceMysqlConfiguration `pulumi:"configuration"`
	Name          *string                   `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceMysqlState struct {
	Configuration SourceMysqlConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceMysqlState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceMysqlState)(nil)).Elem()
}

type sourceMysqlArgs struct {
	Configuration SourceMysqlConfiguration `pulumi:"configuration"`
	Name          string                   `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceMysql resource.
type SourceMysqlArgs struct {
	Configuration SourceMysqlConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceMysqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceMysqlArgs)(nil)).Elem()
}

type SourceMysqlInput interface {
	pulumi.Input

	ToSourceMysqlOutput() SourceMysqlOutput
	ToSourceMysqlOutputWithContext(ctx context.Context) SourceMysqlOutput
}

func (*SourceMysql) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceMysql)(nil)).Elem()
}

func (i *SourceMysql) ToSourceMysqlOutput() SourceMysqlOutput {
	return i.ToSourceMysqlOutputWithContext(context.Background())
}

func (i *SourceMysql) ToSourceMysqlOutputWithContext(ctx context.Context) SourceMysqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceMysqlOutput)
}

// SourceMysqlArrayInput is an input type that accepts SourceMysqlArray and SourceMysqlArrayOutput values.
// You can construct a concrete instance of `SourceMysqlArrayInput` via:
//
//	SourceMysqlArray{ SourceMysqlArgs{...} }
type SourceMysqlArrayInput interface {
	pulumi.Input

	ToSourceMysqlArrayOutput() SourceMysqlArrayOutput
	ToSourceMysqlArrayOutputWithContext(context.Context) SourceMysqlArrayOutput
}

type SourceMysqlArray []SourceMysqlInput

func (SourceMysqlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceMysql)(nil)).Elem()
}

func (i SourceMysqlArray) ToSourceMysqlArrayOutput() SourceMysqlArrayOutput {
	return i.ToSourceMysqlArrayOutputWithContext(context.Background())
}

func (i SourceMysqlArray) ToSourceMysqlArrayOutputWithContext(ctx context.Context) SourceMysqlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceMysqlArrayOutput)
}

// SourceMysqlMapInput is an input type that accepts SourceMysqlMap and SourceMysqlMapOutput values.
// You can construct a concrete instance of `SourceMysqlMapInput` via:
//
//	SourceMysqlMap{ "key": SourceMysqlArgs{...} }
type SourceMysqlMapInput interface {
	pulumi.Input

	ToSourceMysqlMapOutput() SourceMysqlMapOutput
	ToSourceMysqlMapOutputWithContext(context.Context) SourceMysqlMapOutput
}

type SourceMysqlMap map[string]SourceMysqlInput

func (SourceMysqlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceMysql)(nil)).Elem()
}

func (i SourceMysqlMap) ToSourceMysqlMapOutput() SourceMysqlMapOutput {
	return i.ToSourceMysqlMapOutputWithContext(context.Background())
}

func (i SourceMysqlMap) ToSourceMysqlMapOutputWithContext(ctx context.Context) SourceMysqlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceMysqlMapOutput)
}

type SourceMysqlOutput struct{ *pulumi.OutputState }

func (SourceMysqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceMysql)(nil)).Elem()
}

func (o SourceMysqlOutput) ToSourceMysqlOutput() SourceMysqlOutput {
	return o
}

func (o SourceMysqlOutput) ToSourceMysqlOutputWithContext(ctx context.Context) SourceMysqlOutput {
	return o
}

func (o SourceMysqlOutput) Configuration() SourceMysqlConfigurationOutput {
	return o.ApplyT(func(v *SourceMysql) SourceMysqlConfigurationOutput { return v.Configuration }).(SourceMysqlConfigurationOutput)
}

func (o SourceMysqlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceMysql) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceMysqlOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceMysql) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceMysqlOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceMysql) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceMysqlOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceMysql) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceMysqlOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceMysql) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceMysqlArrayOutput struct{ *pulumi.OutputState }

func (SourceMysqlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceMysql)(nil)).Elem()
}

func (o SourceMysqlArrayOutput) ToSourceMysqlArrayOutput() SourceMysqlArrayOutput {
	return o
}

func (o SourceMysqlArrayOutput) ToSourceMysqlArrayOutputWithContext(ctx context.Context) SourceMysqlArrayOutput {
	return o
}

func (o SourceMysqlArrayOutput) Index(i pulumi.IntInput) SourceMysqlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceMysql {
		return vs[0].([]*SourceMysql)[vs[1].(int)]
	}).(SourceMysqlOutput)
}

type SourceMysqlMapOutput struct{ *pulumi.OutputState }

func (SourceMysqlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceMysql)(nil)).Elem()
}

func (o SourceMysqlMapOutput) ToSourceMysqlMapOutput() SourceMysqlMapOutput {
	return o
}

func (o SourceMysqlMapOutput) ToSourceMysqlMapOutputWithContext(ctx context.Context) SourceMysqlMapOutput {
	return o
}

func (o SourceMysqlMapOutput) MapIndex(k pulumi.StringInput) SourceMysqlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceMysql {
		return vs[0].(map[string]*SourceMysql)[vs[1].(string)]
	}).(SourceMysqlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceMysqlInput)(nil)).Elem(), &SourceMysql{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceMysqlArrayInput)(nil)).Elem(), SourceMysqlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceMysqlMapInput)(nil)).Elem(), SourceMysqlMap{})
	pulumi.RegisterOutputType(SourceMysqlOutput{})
	pulumi.RegisterOutputType(SourceMysqlArrayOutput{})
	pulumi.RegisterOutputType(SourceMysqlMapOutput{})
}
