// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupSourceStrava(ctx *pulumi.Context, args *LookupSourceStravaArgs, opts ...pulumi.InvokeOption) (*LookupSourceStravaResult, error) {
	var rv LookupSourceStravaResult
	err := ctx.Invoke("airbyte:index/getSourceStrava:getSourceStrava", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSourceStrava.
type LookupSourceStravaArgs struct {
	SecretId *string `pulumi:"secretId"`
	SourceId string  `pulumi:"sourceId"`
}

// A collection of values returned by getSourceStrava.
type LookupSourceStravaResult struct {
	Configuration GetSourceStravaConfiguration `pulumi:"configuration"`
	// The provider-assigned unique ID for this managed resource.
	Id          string  `pulumi:"id"`
	Name        string  `pulumi:"name"`
	SecretId    *string `pulumi:"secretId"`
	SourceId    string  `pulumi:"sourceId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

func LookupSourceStravaOutput(ctx *pulumi.Context, args LookupSourceStravaOutputArgs, opts ...pulumi.InvokeOption) LookupSourceStravaResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSourceStravaResult, error) {
			args := v.(LookupSourceStravaArgs)
			r, err := LookupSourceStrava(ctx, &args, opts...)
			var s LookupSourceStravaResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSourceStravaResultOutput)
}

// A collection of arguments for invoking getSourceStrava.
type LookupSourceStravaOutputArgs struct {
	SecretId pulumi.StringPtrInput `pulumi:"secretId"`
	SourceId pulumi.StringInput    `pulumi:"sourceId"`
}

func (LookupSourceStravaOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSourceStravaArgs)(nil)).Elem()
}

// A collection of values returned by getSourceStrava.
type LookupSourceStravaResultOutput struct{ *pulumi.OutputState }

func (LookupSourceStravaResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSourceStravaResult)(nil)).Elem()
}

func (o LookupSourceStravaResultOutput) ToLookupSourceStravaResultOutput() LookupSourceStravaResultOutput {
	return o
}

func (o LookupSourceStravaResultOutput) ToLookupSourceStravaResultOutputWithContext(ctx context.Context) LookupSourceStravaResultOutput {
	return o
}

func (o LookupSourceStravaResultOutput) Configuration() GetSourceStravaConfigurationOutput {
	return o.ApplyT(func(v LookupSourceStravaResult) GetSourceStravaConfiguration { return v.Configuration }).(GetSourceStravaConfigurationOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSourceStravaResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceStravaResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSourceStravaResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceStravaResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupSourceStravaResultOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSourceStravaResult) *string { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o LookupSourceStravaResultOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceStravaResult) string { return v.SourceId }).(pulumi.StringOutput)
}

func (o LookupSourceStravaResultOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceStravaResult) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSourceStravaResultOutput{})
}
