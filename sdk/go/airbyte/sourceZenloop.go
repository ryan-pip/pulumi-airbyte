// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-airbyte/sdk/go/airbyte/internal"
)

// SourceZenloop Resource
type SourceZenloop struct {
	pulumi.CustomResourceState

	Configuration SourceZenloopConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput              `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceZenloop registers a new resource with the given unique name, arguments, and options.
func NewSourceZenloop(ctx *pulumi.Context,
	name string, args *SourceZenloopArgs, opts ...pulumi.ResourceOption) (*SourceZenloop, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceZenloop
	err := ctx.RegisterResource("airbyte:index/sourceZenloop:SourceZenloop", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceZenloop gets an existing SourceZenloop resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceZenloop(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceZenloopState, opts ...pulumi.ResourceOption) (*SourceZenloop, error) {
	var resource SourceZenloop
	err := ctx.ReadResource("airbyte:index/sourceZenloop:SourceZenloop", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceZenloop resources.
type sourceZenloopState struct {
	Configuration *SourceZenloopConfiguration `pulumi:"configuration"`
	Name          *string                     `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceZenloopState struct {
	Configuration SourceZenloopConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceZenloopState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceZenloopState)(nil)).Elem()
}

type sourceZenloopArgs struct {
	Configuration SourceZenloopConfiguration `pulumi:"configuration"`
	Name          string                     `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceZenloop resource.
type SourceZenloopArgs struct {
	Configuration SourceZenloopConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceZenloopArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceZenloopArgs)(nil)).Elem()
}

type SourceZenloopInput interface {
	pulumi.Input

	ToSourceZenloopOutput() SourceZenloopOutput
	ToSourceZenloopOutputWithContext(ctx context.Context) SourceZenloopOutput
}

func (*SourceZenloop) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceZenloop)(nil)).Elem()
}

func (i *SourceZenloop) ToSourceZenloopOutput() SourceZenloopOutput {
	return i.ToSourceZenloopOutputWithContext(context.Background())
}

func (i *SourceZenloop) ToSourceZenloopOutputWithContext(ctx context.Context) SourceZenloopOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceZenloopOutput)
}

// SourceZenloopArrayInput is an input type that accepts SourceZenloopArray and SourceZenloopArrayOutput values.
// You can construct a concrete instance of `SourceZenloopArrayInput` via:
//
//	SourceZenloopArray{ SourceZenloopArgs{...} }
type SourceZenloopArrayInput interface {
	pulumi.Input

	ToSourceZenloopArrayOutput() SourceZenloopArrayOutput
	ToSourceZenloopArrayOutputWithContext(context.Context) SourceZenloopArrayOutput
}

type SourceZenloopArray []SourceZenloopInput

func (SourceZenloopArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceZenloop)(nil)).Elem()
}

func (i SourceZenloopArray) ToSourceZenloopArrayOutput() SourceZenloopArrayOutput {
	return i.ToSourceZenloopArrayOutputWithContext(context.Background())
}

func (i SourceZenloopArray) ToSourceZenloopArrayOutputWithContext(ctx context.Context) SourceZenloopArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceZenloopArrayOutput)
}

// SourceZenloopMapInput is an input type that accepts SourceZenloopMap and SourceZenloopMapOutput values.
// You can construct a concrete instance of `SourceZenloopMapInput` via:
//
//	SourceZenloopMap{ "key": SourceZenloopArgs{...} }
type SourceZenloopMapInput interface {
	pulumi.Input

	ToSourceZenloopMapOutput() SourceZenloopMapOutput
	ToSourceZenloopMapOutputWithContext(context.Context) SourceZenloopMapOutput
}

type SourceZenloopMap map[string]SourceZenloopInput

func (SourceZenloopMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceZenloop)(nil)).Elem()
}

func (i SourceZenloopMap) ToSourceZenloopMapOutput() SourceZenloopMapOutput {
	return i.ToSourceZenloopMapOutputWithContext(context.Background())
}

func (i SourceZenloopMap) ToSourceZenloopMapOutputWithContext(ctx context.Context) SourceZenloopMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceZenloopMapOutput)
}

type SourceZenloopOutput struct{ *pulumi.OutputState }

func (SourceZenloopOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceZenloop)(nil)).Elem()
}

func (o SourceZenloopOutput) ToSourceZenloopOutput() SourceZenloopOutput {
	return o
}

func (o SourceZenloopOutput) ToSourceZenloopOutputWithContext(ctx context.Context) SourceZenloopOutput {
	return o
}

func (o SourceZenloopOutput) Configuration() SourceZenloopConfigurationOutput {
	return o.ApplyT(func(v *SourceZenloop) SourceZenloopConfigurationOutput { return v.Configuration }).(SourceZenloopConfigurationOutput)
}

func (o SourceZenloopOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceZenloop) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceZenloopOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceZenloop) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceZenloopOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceZenloop) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceZenloopOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceZenloop) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceZenloopOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceZenloop) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceZenloopArrayOutput struct{ *pulumi.OutputState }

func (SourceZenloopArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceZenloop)(nil)).Elem()
}

func (o SourceZenloopArrayOutput) ToSourceZenloopArrayOutput() SourceZenloopArrayOutput {
	return o
}

func (o SourceZenloopArrayOutput) ToSourceZenloopArrayOutputWithContext(ctx context.Context) SourceZenloopArrayOutput {
	return o
}

func (o SourceZenloopArrayOutput) Index(i pulumi.IntInput) SourceZenloopOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceZenloop {
		return vs[0].([]*SourceZenloop)[vs[1].(int)]
	}).(SourceZenloopOutput)
}

type SourceZenloopMapOutput struct{ *pulumi.OutputState }

func (SourceZenloopMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceZenloop)(nil)).Elem()
}

func (o SourceZenloopMapOutput) ToSourceZenloopMapOutput() SourceZenloopMapOutput {
	return o
}

func (o SourceZenloopMapOutput) ToSourceZenloopMapOutputWithContext(ctx context.Context) SourceZenloopMapOutput {
	return o
}

func (o SourceZenloopMapOutput) MapIndex(k pulumi.StringInput) SourceZenloopOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceZenloop {
		return vs[0].(map[string]*SourceZenloop)[vs[1].(string)]
	}).(SourceZenloopOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceZenloopInput)(nil)).Elem(), &SourceZenloop{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceZenloopArrayInput)(nil)).Elem(), SourceZenloopArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceZenloopMapInput)(nil)).Elem(), SourceZenloopMap{})
	pulumi.RegisterOutputType(SourceZenloopOutput{})
	pulumi.RegisterOutputType(SourceZenloopArrayOutput{})
	pulumi.RegisterOutputType(SourceZenloopMapOutput{})
}
