// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-airbyte/sdk/go/airbyte/internal"
)

// SourceLaunchdarkly Resource
type SourceLaunchdarkly struct {
	pulumi.CustomResourceState

	Configuration SourceLaunchdarklyConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput                   `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceLaunchdarkly registers a new resource with the given unique name, arguments, and options.
func NewSourceLaunchdarkly(ctx *pulumi.Context,
	name string, args *SourceLaunchdarklyArgs, opts ...pulumi.ResourceOption) (*SourceLaunchdarkly, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceLaunchdarkly
	err := ctx.RegisterResource("airbyte:index/sourceLaunchdarkly:SourceLaunchdarkly", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceLaunchdarkly gets an existing SourceLaunchdarkly resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceLaunchdarkly(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceLaunchdarklyState, opts ...pulumi.ResourceOption) (*SourceLaunchdarkly, error) {
	var resource SourceLaunchdarkly
	err := ctx.ReadResource("airbyte:index/sourceLaunchdarkly:SourceLaunchdarkly", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceLaunchdarkly resources.
type sourceLaunchdarklyState struct {
	Configuration *SourceLaunchdarklyConfiguration `pulumi:"configuration"`
	Name          *string                          `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceLaunchdarklyState struct {
	Configuration SourceLaunchdarklyConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceLaunchdarklyState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceLaunchdarklyState)(nil)).Elem()
}

type sourceLaunchdarklyArgs struct {
	Configuration SourceLaunchdarklyConfiguration `pulumi:"configuration"`
	Name          string                          `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceLaunchdarkly resource.
type SourceLaunchdarklyArgs struct {
	Configuration SourceLaunchdarklyConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceLaunchdarklyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceLaunchdarklyArgs)(nil)).Elem()
}

type SourceLaunchdarklyInput interface {
	pulumi.Input

	ToSourceLaunchdarklyOutput() SourceLaunchdarklyOutput
	ToSourceLaunchdarklyOutputWithContext(ctx context.Context) SourceLaunchdarklyOutput
}

func (*SourceLaunchdarkly) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceLaunchdarkly)(nil)).Elem()
}

func (i *SourceLaunchdarkly) ToSourceLaunchdarklyOutput() SourceLaunchdarklyOutput {
	return i.ToSourceLaunchdarklyOutputWithContext(context.Background())
}

func (i *SourceLaunchdarkly) ToSourceLaunchdarklyOutputWithContext(ctx context.Context) SourceLaunchdarklyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLaunchdarklyOutput)
}

// SourceLaunchdarklyArrayInput is an input type that accepts SourceLaunchdarklyArray and SourceLaunchdarklyArrayOutput values.
// You can construct a concrete instance of `SourceLaunchdarklyArrayInput` via:
//
//	SourceLaunchdarklyArray{ SourceLaunchdarklyArgs{...} }
type SourceLaunchdarklyArrayInput interface {
	pulumi.Input

	ToSourceLaunchdarklyArrayOutput() SourceLaunchdarklyArrayOutput
	ToSourceLaunchdarklyArrayOutputWithContext(context.Context) SourceLaunchdarklyArrayOutput
}

type SourceLaunchdarklyArray []SourceLaunchdarklyInput

func (SourceLaunchdarklyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceLaunchdarkly)(nil)).Elem()
}

func (i SourceLaunchdarklyArray) ToSourceLaunchdarklyArrayOutput() SourceLaunchdarklyArrayOutput {
	return i.ToSourceLaunchdarklyArrayOutputWithContext(context.Background())
}

func (i SourceLaunchdarklyArray) ToSourceLaunchdarklyArrayOutputWithContext(ctx context.Context) SourceLaunchdarklyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLaunchdarklyArrayOutput)
}

// SourceLaunchdarklyMapInput is an input type that accepts SourceLaunchdarklyMap and SourceLaunchdarklyMapOutput values.
// You can construct a concrete instance of `SourceLaunchdarklyMapInput` via:
//
//	SourceLaunchdarklyMap{ "key": SourceLaunchdarklyArgs{...} }
type SourceLaunchdarklyMapInput interface {
	pulumi.Input

	ToSourceLaunchdarklyMapOutput() SourceLaunchdarklyMapOutput
	ToSourceLaunchdarklyMapOutputWithContext(context.Context) SourceLaunchdarklyMapOutput
}

type SourceLaunchdarklyMap map[string]SourceLaunchdarklyInput

func (SourceLaunchdarklyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceLaunchdarkly)(nil)).Elem()
}

func (i SourceLaunchdarklyMap) ToSourceLaunchdarklyMapOutput() SourceLaunchdarklyMapOutput {
	return i.ToSourceLaunchdarklyMapOutputWithContext(context.Background())
}

func (i SourceLaunchdarklyMap) ToSourceLaunchdarklyMapOutputWithContext(ctx context.Context) SourceLaunchdarklyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLaunchdarklyMapOutput)
}

type SourceLaunchdarklyOutput struct{ *pulumi.OutputState }

func (SourceLaunchdarklyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceLaunchdarkly)(nil)).Elem()
}

func (o SourceLaunchdarklyOutput) ToSourceLaunchdarklyOutput() SourceLaunchdarklyOutput {
	return o
}

func (o SourceLaunchdarklyOutput) ToSourceLaunchdarklyOutputWithContext(ctx context.Context) SourceLaunchdarklyOutput {
	return o
}

func (o SourceLaunchdarklyOutput) Configuration() SourceLaunchdarklyConfigurationOutput {
	return o.ApplyT(func(v *SourceLaunchdarkly) SourceLaunchdarklyConfigurationOutput { return v.Configuration }).(SourceLaunchdarklyConfigurationOutput)
}

func (o SourceLaunchdarklyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceLaunchdarkly) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceLaunchdarklyOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceLaunchdarkly) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceLaunchdarklyOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceLaunchdarkly) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceLaunchdarklyOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceLaunchdarkly) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceLaunchdarklyOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceLaunchdarkly) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceLaunchdarklyArrayOutput struct{ *pulumi.OutputState }

func (SourceLaunchdarklyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceLaunchdarkly)(nil)).Elem()
}

func (o SourceLaunchdarklyArrayOutput) ToSourceLaunchdarklyArrayOutput() SourceLaunchdarklyArrayOutput {
	return o
}

func (o SourceLaunchdarklyArrayOutput) ToSourceLaunchdarklyArrayOutputWithContext(ctx context.Context) SourceLaunchdarklyArrayOutput {
	return o
}

func (o SourceLaunchdarklyArrayOutput) Index(i pulumi.IntInput) SourceLaunchdarklyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceLaunchdarkly {
		return vs[0].([]*SourceLaunchdarkly)[vs[1].(int)]
	}).(SourceLaunchdarklyOutput)
}

type SourceLaunchdarklyMapOutput struct{ *pulumi.OutputState }

func (SourceLaunchdarklyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceLaunchdarkly)(nil)).Elem()
}

func (o SourceLaunchdarklyMapOutput) ToSourceLaunchdarklyMapOutput() SourceLaunchdarklyMapOutput {
	return o
}

func (o SourceLaunchdarklyMapOutput) ToSourceLaunchdarklyMapOutputWithContext(ctx context.Context) SourceLaunchdarklyMapOutput {
	return o
}

func (o SourceLaunchdarklyMapOutput) MapIndex(k pulumi.StringInput) SourceLaunchdarklyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceLaunchdarkly {
		return vs[0].(map[string]*SourceLaunchdarkly)[vs[1].(string)]
	}).(SourceLaunchdarklyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLaunchdarklyInput)(nil)).Elem(), &SourceLaunchdarkly{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLaunchdarklyArrayInput)(nil)).Elem(), SourceLaunchdarklyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLaunchdarklyMapInput)(nil)).Elem(), SourceLaunchdarklyMap{})
	pulumi.RegisterOutputType(SourceLaunchdarklyOutput{})
	pulumi.RegisterOutputType(SourceLaunchdarklyArrayOutput{})
	pulumi.RegisterOutputType(SourceLaunchdarklyMapOutput{})
}
