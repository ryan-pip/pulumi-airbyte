// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SourceLeverHiring struct {
	pulumi.CustomResourceState

	Configuration SourceLeverHiringConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput                  `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceLeverHiring registers a new resource with the given unique name, arguments, and options.
func NewSourceLeverHiring(ctx *pulumi.Context,
	name string, args *SourceLeverHiringArgs, opts ...pulumi.ResourceOption) (*SourceLeverHiring, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SourceLeverHiring
	err := ctx.RegisterResource("airbyte:index/sourceLeverHiring:SourceLeverHiring", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceLeverHiring gets an existing SourceLeverHiring resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceLeverHiring(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceLeverHiringState, opts ...pulumi.ResourceOption) (*SourceLeverHiring, error) {
	var resource SourceLeverHiring
	err := ctx.ReadResource("airbyte:index/sourceLeverHiring:SourceLeverHiring", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceLeverHiring resources.
type sourceLeverHiringState struct {
	Configuration *SourceLeverHiringConfiguration `pulumi:"configuration"`
	Name          *string                         `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceLeverHiringState struct {
	Configuration SourceLeverHiringConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceLeverHiringState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceLeverHiringState)(nil)).Elem()
}

type sourceLeverHiringArgs struct {
	Configuration SourceLeverHiringConfiguration `pulumi:"configuration"`
	Name          string                         `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceLeverHiring resource.
type SourceLeverHiringArgs struct {
	Configuration SourceLeverHiringConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceLeverHiringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceLeverHiringArgs)(nil)).Elem()
}

type SourceLeverHiringInput interface {
	pulumi.Input

	ToSourceLeverHiringOutput() SourceLeverHiringOutput
	ToSourceLeverHiringOutputWithContext(ctx context.Context) SourceLeverHiringOutput
}

func (*SourceLeverHiring) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceLeverHiring)(nil)).Elem()
}

func (i *SourceLeverHiring) ToSourceLeverHiringOutput() SourceLeverHiringOutput {
	return i.ToSourceLeverHiringOutputWithContext(context.Background())
}

func (i *SourceLeverHiring) ToSourceLeverHiringOutputWithContext(ctx context.Context) SourceLeverHiringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLeverHiringOutput)
}

type SourceLeverHiringOutput struct{ *pulumi.OutputState }

func (SourceLeverHiringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceLeverHiring)(nil)).Elem()
}

func (o SourceLeverHiringOutput) ToSourceLeverHiringOutput() SourceLeverHiringOutput {
	return o
}

func (o SourceLeverHiringOutput) ToSourceLeverHiringOutputWithContext(ctx context.Context) SourceLeverHiringOutput {
	return o
}

func (o SourceLeverHiringOutput) Configuration() SourceLeverHiringConfigurationOutput {
	return o.ApplyT(func(v *SourceLeverHiring) SourceLeverHiringConfigurationOutput { return v.Configuration }).(SourceLeverHiringConfigurationOutput)
}

func (o SourceLeverHiringOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceLeverHiring) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceLeverHiringOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceLeverHiring) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceLeverHiringOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceLeverHiring) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceLeverHiringOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceLeverHiring) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceLeverHiringOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceLeverHiring) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLeverHiringInput)(nil)).Elem(), &SourceLeverHiring{})
	pulumi.RegisterOutputType(SourceLeverHiringOutput{})
}
