// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SourceHubspot Resource
type SourceHubspot struct {
	pulumi.CustomResourceState

	Configuration SourceHubspotConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput              `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceHubspot registers a new resource with the given unique name, arguments, and options.
func NewSourceHubspot(ctx *pulumi.Context,
	name string, args *SourceHubspotArgs, opts ...pulumi.ResourceOption) (*SourceHubspot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceHubspot
	err := ctx.RegisterResource("airbyte:index/sourceHubspot:SourceHubspot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceHubspot gets an existing SourceHubspot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceHubspot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceHubspotState, opts ...pulumi.ResourceOption) (*SourceHubspot, error) {
	var resource SourceHubspot
	err := ctx.ReadResource("airbyte:index/sourceHubspot:SourceHubspot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceHubspot resources.
type sourceHubspotState struct {
	Configuration *SourceHubspotConfiguration `pulumi:"configuration"`
	Name          *string                     `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceHubspotState struct {
	Configuration SourceHubspotConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceHubspotState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceHubspotState)(nil)).Elem()
}

type sourceHubspotArgs struct {
	Configuration SourceHubspotConfiguration `pulumi:"configuration"`
	Name          string                     `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceHubspot resource.
type SourceHubspotArgs struct {
	Configuration SourceHubspotConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceHubspotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceHubspotArgs)(nil)).Elem()
}

type SourceHubspotInput interface {
	pulumi.Input

	ToSourceHubspotOutput() SourceHubspotOutput
	ToSourceHubspotOutputWithContext(ctx context.Context) SourceHubspotOutput
}

func (*SourceHubspot) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceHubspot)(nil)).Elem()
}

func (i *SourceHubspot) ToSourceHubspotOutput() SourceHubspotOutput {
	return i.ToSourceHubspotOutputWithContext(context.Background())
}

func (i *SourceHubspot) ToSourceHubspotOutputWithContext(ctx context.Context) SourceHubspotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceHubspotOutput)
}

// SourceHubspotArrayInput is an input type that accepts SourceHubspotArray and SourceHubspotArrayOutput values.
// You can construct a concrete instance of `SourceHubspotArrayInput` via:
//
//	SourceHubspotArray{ SourceHubspotArgs{...} }
type SourceHubspotArrayInput interface {
	pulumi.Input

	ToSourceHubspotArrayOutput() SourceHubspotArrayOutput
	ToSourceHubspotArrayOutputWithContext(context.Context) SourceHubspotArrayOutput
}

type SourceHubspotArray []SourceHubspotInput

func (SourceHubspotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceHubspot)(nil)).Elem()
}

func (i SourceHubspotArray) ToSourceHubspotArrayOutput() SourceHubspotArrayOutput {
	return i.ToSourceHubspotArrayOutputWithContext(context.Background())
}

func (i SourceHubspotArray) ToSourceHubspotArrayOutputWithContext(ctx context.Context) SourceHubspotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceHubspotArrayOutput)
}

// SourceHubspotMapInput is an input type that accepts SourceHubspotMap and SourceHubspotMapOutput values.
// You can construct a concrete instance of `SourceHubspotMapInput` via:
//
//	SourceHubspotMap{ "key": SourceHubspotArgs{...} }
type SourceHubspotMapInput interface {
	pulumi.Input

	ToSourceHubspotMapOutput() SourceHubspotMapOutput
	ToSourceHubspotMapOutputWithContext(context.Context) SourceHubspotMapOutput
}

type SourceHubspotMap map[string]SourceHubspotInput

func (SourceHubspotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceHubspot)(nil)).Elem()
}

func (i SourceHubspotMap) ToSourceHubspotMapOutput() SourceHubspotMapOutput {
	return i.ToSourceHubspotMapOutputWithContext(context.Background())
}

func (i SourceHubspotMap) ToSourceHubspotMapOutputWithContext(ctx context.Context) SourceHubspotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceHubspotMapOutput)
}

type SourceHubspotOutput struct{ *pulumi.OutputState }

func (SourceHubspotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceHubspot)(nil)).Elem()
}

func (o SourceHubspotOutput) ToSourceHubspotOutput() SourceHubspotOutput {
	return o
}

func (o SourceHubspotOutput) ToSourceHubspotOutputWithContext(ctx context.Context) SourceHubspotOutput {
	return o
}

func (o SourceHubspotOutput) Configuration() SourceHubspotConfigurationOutput {
	return o.ApplyT(func(v *SourceHubspot) SourceHubspotConfigurationOutput { return v.Configuration }).(SourceHubspotConfigurationOutput)
}

func (o SourceHubspotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceHubspot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceHubspotOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceHubspot) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceHubspotOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceHubspot) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceHubspotOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceHubspot) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceHubspotOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceHubspot) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceHubspotArrayOutput struct{ *pulumi.OutputState }

func (SourceHubspotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceHubspot)(nil)).Elem()
}

func (o SourceHubspotArrayOutput) ToSourceHubspotArrayOutput() SourceHubspotArrayOutput {
	return o
}

func (o SourceHubspotArrayOutput) ToSourceHubspotArrayOutputWithContext(ctx context.Context) SourceHubspotArrayOutput {
	return o
}

func (o SourceHubspotArrayOutput) Index(i pulumi.IntInput) SourceHubspotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceHubspot {
		return vs[0].([]*SourceHubspot)[vs[1].(int)]
	}).(SourceHubspotOutput)
}

type SourceHubspotMapOutput struct{ *pulumi.OutputState }

func (SourceHubspotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceHubspot)(nil)).Elem()
}

func (o SourceHubspotMapOutput) ToSourceHubspotMapOutput() SourceHubspotMapOutput {
	return o
}

func (o SourceHubspotMapOutput) ToSourceHubspotMapOutputWithContext(ctx context.Context) SourceHubspotMapOutput {
	return o
}

func (o SourceHubspotMapOutput) MapIndex(k pulumi.StringInput) SourceHubspotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceHubspot {
		return vs[0].(map[string]*SourceHubspot)[vs[1].(string)]
	}).(SourceHubspotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceHubspotInput)(nil)).Elem(), &SourceHubspot{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceHubspotArrayInput)(nil)).Elem(), SourceHubspotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceHubspotMapInput)(nil)).Elem(), SourceHubspotMap{})
	pulumi.RegisterOutputType(SourceHubspotOutput{})
	pulumi.RegisterOutputType(SourceHubspotArrayOutput{})
	pulumi.RegisterOutputType(SourceHubspotMapOutput{})
}
