// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SourceMailchimp Resource
type SourceMailchimp struct {
	pulumi.CustomResourceState

	Configuration SourceMailchimpConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput                `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceMailchimp registers a new resource with the given unique name, arguments, and options.
func NewSourceMailchimp(ctx *pulumi.Context,
	name string, args *SourceMailchimpArgs, opts ...pulumi.ResourceOption) (*SourceMailchimp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceMailchimp
	err := ctx.RegisterResource("airbyte:index/sourceMailchimp:SourceMailchimp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceMailchimp gets an existing SourceMailchimp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceMailchimp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceMailchimpState, opts ...pulumi.ResourceOption) (*SourceMailchimp, error) {
	var resource SourceMailchimp
	err := ctx.ReadResource("airbyte:index/sourceMailchimp:SourceMailchimp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceMailchimp resources.
type sourceMailchimpState struct {
	Configuration *SourceMailchimpConfiguration `pulumi:"configuration"`
	Name          *string                       `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceMailchimpState struct {
	Configuration SourceMailchimpConfigurationPtrInput
	Name          pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceMailchimpState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceMailchimpState)(nil)).Elem()
}

type sourceMailchimpArgs struct {
	Configuration SourceMailchimpConfiguration `pulumi:"configuration"`
	Name          string                       `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceMailchimp resource.
type SourceMailchimpArgs struct {
	Configuration SourceMailchimpConfigurationInput
	Name          pulumi.StringInput
	// Optional secretID obtained through the public API OAuth redirect flow.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceMailchimpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceMailchimpArgs)(nil)).Elem()
}

type SourceMailchimpInput interface {
	pulumi.Input

	ToSourceMailchimpOutput() SourceMailchimpOutput
	ToSourceMailchimpOutputWithContext(ctx context.Context) SourceMailchimpOutput
}

func (*SourceMailchimp) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceMailchimp)(nil)).Elem()
}

func (i *SourceMailchimp) ToSourceMailchimpOutput() SourceMailchimpOutput {
	return i.ToSourceMailchimpOutputWithContext(context.Background())
}

func (i *SourceMailchimp) ToSourceMailchimpOutputWithContext(ctx context.Context) SourceMailchimpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceMailchimpOutput)
}

// SourceMailchimpArrayInput is an input type that accepts SourceMailchimpArray and SourceMailchimpArrayOutput values.
// You can construct a concrete instance of `SourceMailchimpArrayInput` via:
//
//	SourceMailchimpArray{ SourceMailchimpArgs{...} }
type SourceMailchimpArrayInput interface {
	pulumi.Input

	ToSourceMailchimpArrayOutput() SourceMailchimpArrayOutput
	ToSourceMailchimpArrayOutputWithContext(context.Context) SourceMailchimpArrayOutput
}

type SourceMailchimpArray []SourceMailchimpInput

func (SourceMailchimpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceMailchimp)(nil)).Elem()
}

func (i SourceMailchimpArray) ToSourceMailchimpArrayOutput() SourceMailchimpArrayOutput {
	return i.ToSourceMailchimpArrayOutputWithContext(context.Background())
}

func (i SourceMailchimpArray) ToSourceMailchimpArrayOutputWithContext(ctx context.Context) SourceMailchimpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceMailchimpArrayOutput)
}

// SourceMailchimpMapInput is an input type that accepts SourceMailchimpMap and SourceMailchimpMapOutput values.
// You can construct a concrete instance of `SourceMailchimpMapInput` via:
//
//	SourceMailchimpMap{ "key": SourceMailchimpArgs{...} }
type SourceMailchimpMapInput interface {
	pulumi.Input

	ToSourceMailchimpMapOutput() SourceMailchimpMapOutput
	ToSourceMailchimpMapOutputWithContext(context.Context) SourceMailchimpMapOutput
}

type SourceMailchimpMap map[string]SourceMailchimpInput

func (SourceMailchimpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceMailchimp)(nil)).Elem()
}

func (i SourceMailchimpMap) ToSourceMailchimpMapOutput() SourceMailchimpMapOutput {
	return i.ToSourceMailchimpMapOutputWithContext(context.Background())
}

func (i SourceMailchimpMap) ToSourceMailchimpMapOutputWithContext(ctx context.Context) SourceMailchimpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceMailchimpMapOutput)
}

type SourceMailchimpOutput struct{ *pulumi.OutputState }

func (SourceMailchimpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceMailchimp)(nil)).Elem()
}

func (o SourceMailchimpOutput) ToSourceMailchimpOutput() SourceMailchimpOutput {
	return o
}

func (o SourceMailchimpOutput) ToSourceMailchimpOutputWithContext(ctx context.Context) SourceMailchimpOutput {
	return o
}

func (o SourceMailchimpOutput) Configuration() SourceMailchimpConfigurationOutput {
	return o.ApplyT(func(v *SourceMailchimp) SourceMailchimpConfigurationOutput { return v.Configuration }).(SourceMailchimpConfigurationOutput)
}

func (o SourceMailchimpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceMailchimp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow.
func (o SourceMailchimpOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceMailchimp) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceMailchimpOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceMailchimp) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceMailchimpOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceMailchimp) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceMailchimpOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceMailchimp) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceMailchimpArrayOutput struct{ *pulumi.OutputState }

func (SourceMailchimpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceMailchimp)(nil)).Elem()
}

func (o SourceMailchimpArrayOutput) ToSourceMailchimpArrayOutput() SourceMailchimpArrayOutput {
	return o
}

func (o SourceMailchimpArrayOutput) ToSourceMailchimpArrayOutputWithContext(ctx context.Context) SourceMailchimpArrayOutput {
	return o
}

func (o SourceMailchimpArrayOutput) Index(i pulumi.IntInput) SourceMailchimpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceMailchimp {
		return vs[0].([]*SourceMailchimp)[vs[1].(int)]
	}).(SourceMailchimpOutput)
}

type SourceMailchimpMapOutput struct{ *pulumi.OutputState }

func (SourceMailchimpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceMailchimp)(nil)).Elem()
}

func (o SourceMailchimpMapOutput) ToSourceMailchimpMapOutput() SourceMailchimpMapOutput {
	return o
}

func (o SourceMailchimpMapOutput) ToSourceMailchimpMapOutputWithContext(ctx context.Context) SourceMailchimpMapOutput {
	return o
}

func (o SourceMailchimpMapOutput) MapIndex(k pulumi.StringInput) SourceMailchimpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceMailchimp {
		return vs[0].(map[string]*SourceMailchimp)[vs[1].(string)]
	}).(SourceMailchimpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceMailchimpInput)(nil)).Elem(), &SourceMailchimp{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceMailchimpArrayInput)(nil)).Elem(), SourceMailchimpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceMailchimpMapInput)(nil)).Elem(), SourceMailchimpMap{})
	pulumi.RegisterOutputType(SourceMailchimpOutput{})
	pulumi.RegisterOutputType(SourceMailchimpArrayOutput{})
	pulumi.RegisterOutputType(SourceMailchimpMapOutput{})
}
