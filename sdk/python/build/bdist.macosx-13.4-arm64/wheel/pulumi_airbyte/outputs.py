# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'ConnectionConfigurations',
    'ConnectionConfigurationsStream',
    'ConnectionSchedule',
    'DestinationAWSDatalakeConfiguration',
    'DestinationAWSDatalakeConfigurationCredentials',
    'DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamRole',
    'DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamUser',
    'DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamRole',
    'DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamUser',
    'DestinationAWSDatalakeConfigurationFormat',
    'DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJson',
    'DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage',
    'DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJson',
    'DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage',
    'DestinationAzurBlobStorageConfiguration',
    'DestinationAzurBlobStorageConfigurationFormat',
    'DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatCsvCommaSeparatedValues',
    'DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJson',
    'DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValues',
    'DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJson',
    'DestinationBigqueryConfiguration',
    'DestinationBigqueryConfigurationLoadingMethod',
    'DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStaging',
    'DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredential',
    'DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialDestinationBigqueryLoadingMethodGcsStagingCredentialHmacKey',
    'DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodStandardInserts',
    'DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStaging',
    'DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredential',
    'DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKey',
    'DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodStandardInserts',
    'DestinationBigqueryDenormalizedConfiguration',
    'DestinationBigqueryDenormalizedConfigurationLoadingMethod',
    'DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStaging',
    'DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredential',
    'DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKey',
    'DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodStandardInserts',
    'DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStaging',
    'DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredential',
    'DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKey',
    'DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodStandardInserts',
    'DestinationClickhouseConfiguration',
    'DestinationClickhouseConfigurationTunnelMethod',
    'DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodNoTunnel',
    'DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodPasswordAuthentication',
    'DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodSshKeyAuthentication',
    'DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodNoTunnel',
    'DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodPasswordAuthentication',
    'DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodSshKeyAuthentication',
    'DestinationConvexConfiguration',
    'DestinationCumulioConfiguration',
    'DestinationDatabendConfiguration',
    'DestinationDatabricksConfiguration',
    'DestinationDatabricksConfigurationDataSource',
    'DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAmazonS3',
    'DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAzureBlobStorage',
    'DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceRecommendedManagedTables',
    'DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAmazonS3',
    'DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAzureBlobStorage',
    'DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceRecommendedManagedTables',
    'DestinationDevNullConfiguration',
    'DestinationDevNullConfigurationTestDestination',
    'DestinationDevNullConfigurationTestDestinationDestinationDevNullTestDestinationSilent',
    'DestinationDevNullConfigurationTestDestinationDestinationDevNullUpdateTestDestinationSilent',
    'DestinationDynamodbConfiguration',
    'DestinationElasticsearchConfiguration',
    'DestinationElasticsearchConfigurationAuthenticationMethod',
    'DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodApiKeySecret',
    'DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodUsernamePassword',
    'DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodApiKeySecret',
    'DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodUsernamePassword',
    'DestinationFireboltConfiguration',
    'DestinationFireboltConfigurationLoadingMethod',
    'DestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodExternalTableViaS3',
    'DestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodSqlInserts',
    'DestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodExternalTableViaS3',
    'DestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodSqlInserts',
    'DestinationFirestoreConfiguration',
    'DestinationGcsConfiguration',
    'DestinationGcsConfigurationCredential',
    'DestinationGcsConfigurationCredentialDestinationGcsAuthenticationHmacKey',
    'DestinationGcsConfigurationCredentialDestinationGcsUpdateAuthenticationHmacKey',
    'DestinationGcsConfigurationFormat',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvro',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodec',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValues',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompression',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzip',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompression',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJson',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompression',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatParquetColumnarStorage',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvro',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodec',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecBzip2',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflate',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecSnappy',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXz',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandard',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValues',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompression',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJson',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatParquetColumnarStorage',
    'DestinationGoogleSheetsConfiguration',
    'DestinationGoogleSheetsConfigurationCredentials',
    'DestinationKeenConfiguration',
    'DestinationKinesisConfiguration',
    'DestinationLangchainConfiguration',
    'DestinationLangchainConfigurationEmbedding',
    'DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingFake',
    'DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingOpenAi',
    'DestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingFake',
    'DestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingOpenAi',
    'DestinationLangchainConfigurationIndexing',
    'DestinationLangchainConfigurationIndexingDestinationLangchainIndexingChromaLocalPersistance',
    'DestinationLangchainConfigurationIndexingDestinationLangchainIndexingDocArrayHnswSearch',
    'DestinationLangchainConfigurationIndexingDestinationLangchainIndexingPinecone',
    'DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingChromaLocalPersistance',
    'DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingDocArrayHnswSearch',
    'DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingPinecone',
    'DestinationLangchainConfigurationProcessing',
    'DestinationMSsqlConfiguration',
    'DestinationMSsqlConfigurationSslMethod',
    'DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedTrustServerCertificate',
    'DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedVerifyCertificate',
    'DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedTrustServerCertificate',
    'DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedVerifyCertificate',
    'DestinationMSsqlConfigurationTunnelMethod',
    'DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodNoTunnel',
    'DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodPasswordAuthentication',
    'DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodSshKeyAuthentication',
    'DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodNoTunnel',
    'DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodPasswordAuthentication',
    'DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodSshKeyAuthentication',
    'DestinationMongodbConfiguration',
    'DestinationMongodbConfigurationAuthType',
    'DestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeLoginPassword',
    'DestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeNone',
    'DestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeLoginPassword',
    'DestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeNone',
    'DestinationMongodbConfigurationInstanceType',
    'DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeMongoDbAtlas',
    'DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeReplicaSet',
    'DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance',
    'DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlas',
    'DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeReplicaSet',
    'DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance',
    'DestinationMongodbConfigurationTunnelMethod',
    'DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodNoTunnel',
    'DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodPasswordAuthentication',
    'DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodSshKeyAuthentication',
    'DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodNoTunnel',
    'DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodPasswordAuthentication',
    'DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodSshKeyAuthentication',
    'DestinationMysqlConfiguration',
    'DestinationMysqlConfigurationTunnelMethod',
    'DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodNoTunnel',
    'DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodPasswordAuthentication',
    'DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodSshKeyAuthentication',
    'DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodNoTunnel',
    'DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodPasswordAuthentication',
    'DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodSshKeyAuthentication',
    'DestinationOracleConfiguration',
    'DestinationOracleConfigurationTunnelMethod',
    'DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodNoTunnel',
    'DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodPasswordAuthentication',
    'DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodSshKeyAuthentication',
    'DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodNoTunnel',
    'DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodPasswordAuthentication',
    'DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodSshKeyAuthentication',
    'DestinationPostgresConfiguration',
    'DestinationPostgresConfigurationSslMode',
    'DestinationPostgresConfigurationSslModeDestinationPostgresSslModesAllow',
    'DestinationPostgresConfigurationSslModeDestinationPostgresSslModesDisable',
    'DestinationPostgresConfigurationSslModeDestinationPostgresSslModesPrefer',
    'DestinationPostgresConfigurationSslModeDestinationPostgresSslModesRequire',
    'DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyCa',
    'DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyFull',
    'DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesAllow',
    'DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesDisable',
    'DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesPrefer',
    'DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesRequire',
    'DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyCa',
    'DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyFull',
    'DestinationPostgresConfigurationTunnelMethod',
    'DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodNoTunnel',
    'DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodPasswordAuthentication',
    'DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodSshKeyAuthentication',
    'DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodNoTunnel',
    'DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodPasswordAuthentication',
    'DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodSshKeyAuthentication',
    'DestinationPubsubConfiguration',
    'DestinationRedisConfiguration',
    'DestinationRedisConfigurationSslMode',
    'DestinationRedisConfigurationSslModeDestinationRedisSslModesDisable',
    'DestinationRedisConfigurationSslModeDestinationRedisSslModesVerifyFull',
    'DestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesDisable',
    'DestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesVerifyFull',
    'DestinationRedisConfigurationTunnelMethod',
    'DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodNoTunnel',
    'DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodPasswordAuthentication',
    'DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodSshKeyAuthentication',
    'DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodNoTunnel',
    'DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodPasswordAuthentication',
    'DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodSshKeyAuthentication',
    'DestinationRedshiftConfiguration',
    'DestinationRedshiftConfigurationTunnelMethod',
    'DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodNoTunnel',
    'DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodPasswordAuthentication',
    'DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodSshKeyAuthentication',
    'DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodNoTunnel',
    'DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodPasswordAuthentication',
    'DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodSshKeyAuthentication',
    'DestinationRedshiftConfigurationUploadingMethod',
    'DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3Staging',
    'DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryption',
    'DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption',
    'DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryption',
    'DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodStandard',
    'DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3Staging',
    'DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryption',
    'DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption',
    'DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption',
    'DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodStandard',
    'DestinationS3Configuration',
    'DestinationS3ConfigurationFormat',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvro',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodec',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecXz',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValues',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompression',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzip',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompression',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJson',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompression',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatParquetColumnarStorage',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvro',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodec',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecBzip2',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflate',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecSnappy',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXz',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandard',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValues',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompression',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJson',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatParquetColumnarStorage',
    'DestinationS3GlueConfiguration',
    'DestinationS3GlueConfigurationFormat',
    'DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJson',
    'DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompression',
    'DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip',
    'DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression',
    'DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJson',
    'DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression',
    'DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip',
    'DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression',
    'DestinationSftpJsonConfiguration',
    'DestinationSnowflakeConfiguration',
    'DestinationSnowflakeConfigurationCredentials',
    'DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthentication',
    'DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20',
    'DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPassword',
    'DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication',
    'DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20',
    'DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword',
    'DestinationTimeplusConfiguration',
    'DestinationTypesenseConfiguration',
    'DestinationVerticaConfiguration',
    'DestinationVerticaConfigurationTunnelMethod',
    'DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodNoTunnel',
    'DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodPasswordAuthentication',
    'DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodSshKeyAuthentication',
    'DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodNoTunnel',
    'DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodPasswordAuthentication',
    'DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodSshKeyAuthentication',
    'DestinationXataConfiguration',
    'SourceAhaConfiguration',
    'SourceAircallConfiguration',
    'SourceAirtableConfiguration',
    'SourceAirtableConfigurationCredentials',
    'SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationOAuth20',
    'SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationPersonalAccessToken',
    'SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationOAuth20',
    'SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationPersonalAccessToken',
    'SourceAlloydbConfiguration',
    'SourceAlloydbConfigurationReplicationMethod',
    'SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodLogicalReplicationCdc',
    'SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandard',
    'SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardXmin',
    'SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodLogicalReplicationCdc',
    'SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandard',
    'SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardXmin',
    'SourceAlloydbConfigurationSslMode',
    'SourceAlloydbConfigurationSslModeSourceAlloydbSslModesAllow',
    'SourceAlloydbConfigurationSslModeSourceAlloydbSslModesDisable',
    'SourceAlloydbConfigurationSslModeSourceAlloydbSslModesPrefer',
    'SourceAlloydbConfigurationSslModeSourceAlloydbSslModesRequire',
    'SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyCa',
    'SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyFull',
    'SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesAllow',
    'SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesDisable',
    'SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesPrefer',
    'SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesRequire',
    'SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyCa',
    'SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyFull',
    'SourceAlloydbConfigurationTunnelMethod',
    'SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodNoTunnel',
    'SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodPasswordAuthentication',
    'SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodSshKeyAuthentication',
    'SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodNoTunnel',
    'SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodPasswordAuthentication',
    'SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodSshKeyAuthentication',
    'SourceAmazonAdsConfiguration',
    'SourceAmazonSellerPartnerConfiguration',
    'SourceAmazonSqsConfiguration',
    'SourceAmplitudeConfiguration',
    'SourceApifyDatasetConfiguration',
    'SourceAppfollowConfiguration',
    'SourceAsanaConfiguration',
    'SourceAsanaConfigurationCredentials',
    'SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth',
    'SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken',
    'SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauth',
    'SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken',
    'SourceAuth0Configuration',
    'SourceAuth0ConfigurationCredentials',
    'SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2AccessToken',
    'SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2ConfidentialApplication',
    'SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2AccessToken',
    'SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication',
    'SourceAwsCloudtrailConfiguration',
    'SourceAzureBlobStorageConfiguration',
    'SourceAzureBlobStorageConfigurationFormat',
    'SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJson',
    'SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJson',
    'SourceAzureTableConfiguration',
    'SourceBambooHrConfiguration',
    'SourceBigcommerceConfiguration',
    'SourceBigqueryConfiguration',
    'SourceBingAdsConfiguration',
    'SourceBraintreeConfiguration',
    'SourceBrazeConfiguration',
    'SourceChargebeeConfiguration',
    'SourceChartmogulConfiguration',
    'SourceClickhouseConfiguration',
    'SourceClickhouseConfigurationTunnelMethod',
    'SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodNoTunnel',
    'SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodPasswordAuthentication',
    'SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodSshKeyAuthentication',
    'SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodNoTunnel',
    'SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodPasswordAuthentication',
    'SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodSshKeyAuthentication',
    'SourceClickupApiConfiguration',
    'SourceClockifyConfiguration',
    'SourceCloseComConfiguration',
    'SourceCodaConfiguration',
    'SourceCoinApiConfiguration',
    'SourceCoinmarketcapConfiguration',
    'SourceConfigcatConfiguration',
    'SourceConfluenceConfiguration',
    'SourceConvexConfiguration',
    'SourceDatadogConfiguration',
    'SourceDatadogConfigurationQuery',
    'SourceDatascopeConfiguration',
    'SourceDelightedConfiguration',
    'SourceDixaConfiguration',
    'SourceDockerhubConfiguration',
    'SourceDremioConfiguration',
    'SourceDynamodbConfiguration',
    'SourceE2eTestCloudConfiguration',
    'SourceE2eTestCloudConfigurationMockCatalog',
    'SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogMultiSchema',
    'SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogSingleSchema',
    'SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogMultiSchema',
    'SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogSingleSchema',
    'SourceEmailoctopusConfiguration',
    'SourceExchangeRatesConfiguration',
    'SourceFacebookMarketingConfiguration',
    'SourceFacebookMarketingConfigurationCustomInsight',
    'SourceFacebookPagesConfiguration',
    'SourceFakerConfiguration',
    'SourceFaunaConfiguration',
    'SourceFaunaConfigurationCollection',
    'SourceFaunaConfigurationCollectionDeletions',
    'SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeDisabled',
    'SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeEnabled',
    'SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeDisabled',
    'SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeEnabled',
    'SourceFileSecureConfiguration',
    'SourceFileSecureConfigurationProvider',
    'SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderAzBlobAzureBlobStorage',
    'SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderGcsGoogleCloudStorage',
    'SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderHttpsPublicWeb',
    'SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderS3AmazonWebServices',
    'SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderScpSecureCopyProtocol',
    'SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSftpSecureFileTransferProtocol',
    'SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSshSecureShell',
    'SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorage',
    'SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderGcsGoogleCloudStorage',
    'SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderHttpsPublicWeb',
    'SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderS3AmazonWebServices',
    'SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderScpSecureCopyProtocol',
    'SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSftpSecureFileTransferProtocol',
    'SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSshSecureShell',
    'SourceFireboltConfiguration',
    'SourceFreshcallerConfiguration',
    'SourceFreshdeskConfiguration',
    'SourceFreshsalesConfiguration',
    'SourceGainsightPxConfiguration',
    'SourceGcsConfiguration',
    'SourceGetlagoConfiguration',
    'SourceGithubConfiguration',
    'SourceGithubConfigurationCredentials',
    'SourceGithubConfigurationCredentialsSourceGithubAuthenticationOAuth',
    'SourceGithubConfigurationCredentialsSourceGithubAuthenticationPersonalAccessToken',
    'SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationOAuth',
    'SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationPersonalAccessToken',
    'SourceGitlabConfiguration',
    'SourceGitlabConfigurationCredentials',
    'SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodOAuth20',
    'SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodPrivateToken',
    'SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodOAuth20',
    'SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodPrivateToken',
    'SourceGlassfrogConfiguration',
    'SourceGnewsConfiguration',
    'SourceGoogleAdsConfiguration',
    'SourceGoogleAdsConfigurationCredentials',
    'SourceGoogleAdsConfigurationCustomQuery',
    'SourceGoogleAnalyticsDataApiConfiguration',
    'SourceGoogleAnalyticsDataApiConfigurationCredentials',
    'SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauth',
    'SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthentication',
    'SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauth',
    'SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthentication',
    'SourceGoogleAnalyticsV4Configuration',
    'SourceGoogleAnalyticsV4ConfigurationCredentials',
    'SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth',
    'SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication',
    'SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth',
    'SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication',
    'SourceGoogleDirectoryConfiguration',
    'SourceGoogleDirectoryConfigurationCredentials',
    'SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsServiceAccountKey',
    'SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuth',
    'SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey',
    'SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth',
    'SourceGooglePagespeedInsightsConfiguration',
    'SourceGoogleSearchConsoleConfiguration',
    'SourceGoogleSearchConsoleConfigurationAuthorization',
    'SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeOAuth',
    'SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication',
    'SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth',
    'SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication',
    'SourceGoogleSheetsConfiguration',
    'SourceGoogleSheetsConfigurationCredentials',
    'SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth',
    'SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication',
    'SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth',
    'SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication',
    'SourceGoogleWebfontsConfiguration',
    'SourceGoogleWorkspaceAdminReportsConfiguration',
    'SourceGreenhouseConfiguration',
    'SourceGridlyConfiguration',
    'SourceHarvestConfiguration',
    'SourceHarvestConfigurationCredentials',
    'SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth',
    'SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken',
    'SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth',
    'SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken',
    'SourceHubplannerConfiguration',
    'SourceHubspotConfiguration',
    'SourceHubspotConfigurationCredentials',
    'SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationOAuth',
    'SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationPrivateApp',
    'SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationOAuth',
    'SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationPrivateApp',
    'SourceInsightlyConfiguration',
    'SourceInstagramConfiguration',
    'SourceInstatusConfiguration',
    'SourceIntercomConfiguration',
    'SourceIp2whoisConfiguration',
    'SourceIterableConfiguration',
    'SourceJiraConfiguration',
    'SourceK6CloudConfiguration',
    'SourceKlarnaConfiguration',
    'SourceKlaviyoConfiguration',
    'SourceKustomerSingerConfiguration',
    'SourceKyveConfiguration',
    'SourceLaunchdarklyConfiguration',
    'SourceLemlistConfiguration',
    'SourceLeverHiringConfiguration',
    'SourceLeverHiringConfigurationCredentials',
    'SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKey',
    'SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth',
    'SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKey',
    'SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth',
    'SourceLinkedinAdsConfiguration',
    'SourceLinkedinAdsConfigurationAdAnalyticsReport',
    'SourceLinkedinAdsConfigurationCredentials',
    'SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationAccessToken',
    'SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationOAuth20',
    'SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationAccessToken',
    'SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationOAuth20',
    'SourceLinkedinPagesConfiguration',
    'SourceLinkedinPagesConfigurationCredentials',
    'SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationAccessToken',
    'SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationOAuth20',
    'SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationAccessToken',
    'SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationOAuth20',
    'SourceLinnworksConfiguration',
    'SourceLokaliseConfiguration',
    'SourceMailchimpConfiguration',
    'SourceMailchimpConfigurationCredentials',
    'SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationApiKey',
    'SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationOAuth20',
    'SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationApiKey',
    'SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationOAuth20',
    'SourceMailgunConfiguration',
    'SourceMailjetSmsConfiguration',
    'SourceMarketoConfiguration',
    'SourceMetabaseConfiguration',
    'SourceMicrosoftTeamsConfiguration',
    'SourceMicrosoftTeamsConfigurationCredentials',
    'SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft',
    'SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20',
    'SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoft',
    'SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20',
    'SourceMixpanelConfiguration',
    'SourceMixpanelConfigurationCredentials',
    'SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecret',
    'SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccount',
    'SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecret',
    'SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccount',
    'SourceMondayConfiguration',
    'SourceMondayConfigurationCredentials',
    'SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodApiToken',
    'SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodOAuth20',
    'SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodApiToken',
    'SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodOAuth20',
    'SourceMongodbConfiguration',
    'SourceMongodbConfigurationInstanceType',
    'SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeMongoDbAtlas',
    'SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeReplicaSet',
    'SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance',
    'SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlas',
    'SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSet',
    'SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance',
    'SourceMongodbInternalPocConfiguration',
    'SourceMssqlConfiguration',
    'SourceMssqlConfigurationReplicationMethod',
    'SourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodLogicalReplicationCdc',
    'SourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodStandard',
    'SourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodLogicalReplicationCdc',
    'SourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodStandard',
    'SourceMssqlConfigurationSslMethod',
    'SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedTrustServerCertificate',
    'SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedVerifyCertificate',
    'SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedTrustServerCertificate',
    'SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedVerifyCertificate',
    'SourceMssqlConfigurationTunnelMethod',
    'SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodNoTunnel',
    'SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodPasswordAuthentication',
    'SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodSshKeyAuthentication',
    'SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodNoTunnel',
    'SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodPasswordAuthentication',
    'SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodSshKeyAuthentication',
    'SourceMyHoursConfiguration',
    'SourceMysqlConfiguration',
    'SourceMysqlConfigurationReplicationMethod',
    'SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodReadChangesUsingBinaryLogCdc',
    'SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodScanChangesWithUserDefinedCursor',
    'SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdc',
    'SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursor',
    'SourceMysqlConfigurationSslMode',
    'SourceMysqlConfigurationSslModeSourceMysqlSslModesPreferred',
    'SourceMysqlConfigurationSslModeSourceMysqlSslModesRequired',
    'SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyCa',
    'SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyIdentity',
    'SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesPreferred',
    'SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesRequired',
    'SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyCa',
    'SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyIdentity',
    'SourceMysqlConfigurationTunnelMethod',
    'SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodNoTunnel',
    'SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodPasswordAuthentication',
    'SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodSshKeyAuthentication',
    'SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodNoTunnel',
    'SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodPasswordAuthentication',
    'SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodSshKeyAuthentication',
    'SourceNetsuiteConfiguration',
    'SourceNotionConfiguration',
    'SourceNotionConfigurationCredentials',
    'SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingAccessToken',
    'SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingOAuth20',
    'SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingAccessToken',
    'SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingOAuth20',
    'SourceNytimesConfiguration',
    'SourceOktaConfiguration',
    'SourceOktaConfigurationCredentials',
    'SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodApiToken',
    'SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodOAuth20',
    'SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodApiToken',
    'SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodOAuth20',
    'SourceOmnisendConfiguration',
    'SourceOnesignalConfiguration',
    'SourceOnesignalConfigurationApplication',
    'SourceOpenweatherConfiguration',
    'SourceOracleConfiguration',
    'SourceOracleConfigurationConnectionData',
    'SourceOracleConfigurationConnectionDataSourceOracleConnectByServiceName',
    'SourceOracleConfigurationConnectionDataSourceOracleConnectBySystemIdSid',
    'SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectByServiceName',
    'SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectBySystemIdSid',
    'SourceOracleConfigurationEncryption',
    'SourceOracleConfigurationEncryptionSourceOracleEncryptionNativeNetworkEncryptionNne',
    'SourceOracleConfigurationEncryptionSourceOracleEncryptionTlsEncryptedVerifyCertificate',
    'SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionNativeNetworkEncryptionNne',
    'SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionTlsEncryptedVerifyCertificate',
    'SourceOracleConfigurationTunnelMethod',
    'SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodNoTunnel',
    'SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodPasswordAuthentication',
    'SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodSshKeyAuthentication',
    'SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodNoTunnel',
    'SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodPasswordAuthentication',
    'SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodSshKeyAuthentication',
    'SourceOrbConfiguration',
    'SourceOrbitConfiguration',
    'SourceOutbrainAmplifyConfiguration',
    'SourceOutbrainAmplifyConfigurationCredentials',
    'SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodAccessToken',
    'SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodUsernamePassword',
    'SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken',
    'SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword',
    'SourceOutreachConfiguration',
    'SourcePaypalTransactionConfiguration',
    'SourcePaystackConfiguration',
    'SourcePendoConfiguration',
    'SourcePersistiqConfiguration',
    'SourcePexelsApiConfiguration',
    'SourcePinterestConfiguration',
    'SourcePinterestConfigurationCredentials',
    'SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodAccessToken',
    'SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodOAuth20',
    'SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodAccessToken',
    'SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodOAuth20',
    'SourcePipedriveConfiguration',
    'SourcePipedriveConfigurationAuthorization',
    'SourcePocketConfiguration',
    'SourcePokeapiConfiguration',
    'SourcePolygonStockApiConfiguration',
    'SourcePostgresConfiguration',
    'SourcePostgresConfigurationReplicationMethod',
    'SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodLogicalReplicationCdc',
    'SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandard',
    'SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardXmin',
    'SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodLogicalReplicationCdc',
    'SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandard',
    'SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardXmin',
    'SourcePostgresConfigurationSslMode',
    'SourcePostgresConfigurationSslModeSourcePostgresSslModesAllow',
    'SourcePostgresConfigurationSslModeSourcePostgresSslModesDisable',
    'SourcePostgresConfigurationSslModeSourcePostgresSslModesPrefer',
    'SourcePostgresConfigurationSslModeSourcePostgresSslModesRequire',
    'SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyCa',
    'SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyFull',
    'SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesAllow',
    'SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesDisable',
    'SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesPrefer',
    'SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesRequire',
    'SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyCa',
    'SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyFull',
    'SourcePostgresConfigurationTunnelMethod',
    'SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodNoTunnel',
    'SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodPasswordAuthentication',
    'SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodSshKeyAuthentication',
    'SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodNoTunnel',
    'SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodPasswordAuthentication',
    'SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodSshKeyAuthentication',
    'SourcePosthogConfiguration',
    'SourcePostmarkappConfiguration',
    'SourcePrestashopConfiguration',
    'SourcePublicApisConfiguration',
    'SourcePunkApiConfiguration',
    'SourcePypiConfiguration',
    'SourceQualarooConfiguration',
    'SourceQuickbooksConfiguration',
    'SourceQuickbooksConfigurationCredentials',
    'SourceQuickbooksConfigurationCredentialsSourceQuickbooksAuthorizationMethodOAuth20',
    'SourceQuickbooksConfigurationCredentialsSourceQuickbooksUpdateAuthorizationMethodOAuth20',
    'SourceRailzConfiguration',
    'SourceRechargeConfiguration',
    'SourceRecreationConfiguration',
    'SourceRecruiteeConfiguration',
    'SourceRecurlyConfiguration',
    'SourceRedshiftConfiguration',
    'SourceRetentlyConfiguration',
    'SourceRetentlyConfigurationCredentials',
    'SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth',
    'SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateWithApiToken',
    'SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth',
    'SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiToken',
    'SourceRkiCovidConfiguration',
    'SourceRssConfiguration',
    'SourceS3Configuration',
    'SourceS3ConfigurationFormat',
    'SourceS3ConfigurationFormatSourceS3FileFormatAvro',
    'SourceS3ConfigurationFormatSourceS3FileFormatCsv',
    'SourceS3ConfigurationFormatSourceS3FileFormatJsonl',
    'SourceS3ConfigurationFormatSourceS3FileFormatParquet',
    'SourceS3ConfigurationFormatSourceS3UpdateFileFormatAvro',
    'SourceS3ConfigurationFormatSourceS3UpdateFileFormatCsv',
    'SourceS3ConfigurationFormatSourceS3UpdateFileFormatJsonl',
    'SourceS3ConfigurationFormatSourceS3UpdateFileFormatParquet',
    'SourceS3ConfigurationProvider',
    'SourceSalesforceConfiguration',
    'SourceSalesforceConfigurationStreamsCriteria',
    'SourceSalesloftConfiguration',
    'SourceSalesloftConfigurationCredentials',
    'SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaApiKey',
    'SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaOAuth',
    'SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaApiKey',
    'SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaOAuth',
    'SourceSapFieldglassConfiguration',
    'SourceSecodaConfiguration',
    'SourceSendgridConfiguration',
    'SourceSendinblueConfiguration',
    'SourceSenseforceConfiguration',
    'SourceSentryConfiguration',
    'SourceSftpBulkConfiguration',
    'SourceSftpConfiguration',
    'SourceSftpConfigurationCredentials',
    'SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardPasswordAuthentication',
    'SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardSshKeyAuthentication',
    'SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardPasswordAuthentication',
    'SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardSshKeyAuthentication',
    'SourceShopifyConfiguration',
    'SourceShopifyConfigurationCredentials',
    'SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodApiPassword',
    'SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodOAuth20',
    'SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodApiPassword',
    'SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodOAuth20',
    'SourceShortioConfiguration',
    'SourceSlackConfiguration',
    'SourceSlackConfigurationCredentials',
    'SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismApiToken',
    'SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismSignInViaSlackOAuth',
    'SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismApiToken',
    'SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth',
    'SourceSmailyConfiguration',
    'SourceSmartengageConfiguration',
    'SourceSmartsheetsConfiguration',
    'SourceSmartsheetsConfigurationCredentials',
    'SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodApiAccessToken',
    'SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodOAuth20',
    'SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodApiAccessToken',
    'SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodOAuth20',
    'SourceSnapchatMarketingConfiguration',
    'SourceSnowflakeConfiguration',
    'SourceSnowflakeConfigurationCredentials',
    'SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodOAuth20',
    'SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodUsernameAndPassword',
    'SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodOAuth20',
    'SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword',
    'SourceSonarCloudConfiguration',
    'SourceSpaceXApiConfiguration',
    'SourceSquareConfiguration',
    'SourceSquareConfigurationCredentials',
    'SourceSquareConfigurationCredentialsSourceSquareAuthenticationApiKey',
    'SourceSquareConfigurationCredentialsSourceSquareAuthenticationOauthAuthentication',
    'SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationApiKey',
    'SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationOauthAuthentication',
    'SourceStravaConfiguration',
    'SourceStripeConfiguration',
    'SourceSurveySparrowConfiguration',
    'SourceSurveySparrowConfigurationRegion',
    'SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlEuBasedAccount',
    'SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlGlobalAccount',
    'SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlEuBasedAccount',
    'SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlGlobalAccount',
    'SourceSurveymonkeyConfiguration',
    'SourceSurveymonkeyConfigurationCredentials',
    'SourceTempoConfiguration',
    'SourceTheGuardianApiConfiguration',
    'SourceTiktokMarketingConfiguration',
    'SourceTiktokMarketingConfigurationCredentials',
    'SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodOAuth20',
    'SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodSandboxAccessToken',
    'SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodOAuth20',
    'SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken',
    'SourceTodoistConfiguration',
    'SourceTrelloConfiguration',
    'SourceTrustpilotConfiguration',
    'SourceTrustpilotConfigurationCredentials',
    'SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodApiKey',
    'SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodOAuth20',
    'SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodApiKey',
    'SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodOAuth20',
    'SourceTvmazeScheduleConfiguration',
    'SourceTwilioConfiguration',
    'SourceTwilioTaskrouterConfiguration',
    'SourceTwitterConfiguration',
    'SourceTypeformConfiguration',
    'SourceTypeformConfigurationCredentials',
    'SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodOAuth20',
    'SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodPrivateToken',
    'SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodOAuth20',
    'SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodPrivateToken',
    'SourceUsCensusConfiguration',
    'SourceVantageConfiguration',
    'SourceWebflowConfiguration',
    'SourceWhiskyHunterConfiguration',
    'SourceWikipediaPageviewsConfiguration',
    'SourceWoocommerceConfiguration',
    'SourceXeroConfiguration',
    'SourceXeroConfigurationAuthentication',
    'SourceXkcdConfiguration',
    'SourceYandexMetricaConfiguration',
    'SourceYotpoConfiguration',
    'SourceYouniumConfiguration',
    'SourceYoutubeAnalyticsConfiguration',
    'SourceYoutubeAnalyticsConfigurationCredentials',
    'SourceZendeskChatConfiguration',
    'SourceZendeskChatConfigurationCredentials',
    'SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodAccessToken',
    'SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodOAuth20',
    'SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodAccessToken',
    'SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodOAuth20',
    'SourceZendeskSunshineConfiguration',
    'SourceZendeskSunshineConfigurationCredentials',
    'SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodApiToken',
    'SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodOAuth20',
    'SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodApiToken',
    'SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodOAuth20',
    'SourceZendeskSupportConfiguration',
    'SourceZendeskSupportConfigurationCredentials',
    'SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationApiToken',
    'SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationOAuth20',
    'SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationApiToken',
    'SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationOAuth20',
    'SourceZendeskTalkConfiguration',
    'SourceZendeskTalkConfigurationCredentials',
    'SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationApiToken',
    'SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationOAuth20',
    'SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationApiToken',
    'SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationOAuth20',
    'SourceZenloopConfiguration',
    'SourceZohoCrmConfiguration',
    'SourceZoomConfiguration',
    'SourceZuoraConfiguration',
    'GetConnectionConfigurationsResult',
    'GetConnectionConfigurationsStreamResult',
    'GetConnectionScheduleResult',
    'GetDestinationAWSDatalakeConfigurationResult',
    'GetDestinationAWSDatalakeConfigurationCredentialsResult',
    'GetDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamRoleResult',
    'GetDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamUserResult',
    'GetDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamRoleResult',
    'GetDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamUserResult',
    'GetDestinationAWSDatalakeConfigurationFormatResult',
    'GetDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJsonResult',
    'GetDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorageResult',
    'GetDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJsonResult',
    'GetDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorageResult',
    'GetDestinationAzurBlobStorageConfigurationResult',
    'GetDestinationAzurBlobStorageConfigurationFormatResult',
    'GetDestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatCsvCommaSeparatedValuesResult',
    'GetDestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJsonResult',
    'GetDestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValuesResult',
    'GetDestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJsonResult',
    'GetDestinationBigqueryConfigurationResult',
    'GetDestinationBigqueryConfigurationLoadingMethodResult',
    'GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingResult',
    'GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialResult',
    'GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialDestinationBigqueryLoadingMethodGcsStagingCredentialHmacKeyResult',
    'GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodStandardInsertsResult',
    'GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingResult',
    'GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialResult',
    'GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKeyResult',
    'GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodStandardInsertsResult',
    'GetDestinationBigqueryDenormalizedConfigurationResult',
    'GetDestinationBigqueryDenormalizedConfigurationLoadingMethodResult',
    'GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingResult',
    'GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialResult',
    'GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKeyResult',
    'GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodStandardInsertsResult',
    'GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingResult',
    'GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialResult',
    'GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKeyResult',
    'GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodStandardInsertsResult',
    'GetDestinationClickhouseConfigurationResult',
    'GetDestinationClickhouseConfigurationTunnelMethodResult',
    'GetDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodNoTunnelResult',
    'GetDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodPasswordAuthenticationResult',
    'GetDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodSshKeyAuthenticationResult',
    'GetDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodNoTunnelResult',
    'GetDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodPasswordAuthenticationResult',
    'GetDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodSshKeyAuthenticationResult',
    'GetDestinationConvexConfigurationResult',
    'GetDestinationCumulioConfigurationResult',
    'GetDestinationDatabendConfigurationResult',
    'GetDestinationDatabricksConfigurationResult',
    'GetDestinationDatabricksConfigurationDataSourceResult',
    'GetDestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAmazonS3Result',
    'GetDestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAzureBlobStorageResult',
    'GetDestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceRecommendedManagedTablesResult',
    'GetDestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAmazonS3Result',
    'GetDestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAzureBlobStorageResult',
    'GetDestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceRecommendedManagedTablesResult',
    'GetDestinationDevNullConfigurationResult',
    'GetDestinationDevNullConfigurationTestDestinationResult',
    'GetDestinationDevNullConfigurationTestDestinationDestinationDevNullTestDestinationSilentResult',
    'GetDestinationDevNullConfigurationTestDestinationDestinationDevNullUpdateTestDestinationSilentResult',
    'GetDestinationDynamodbConfigurationResult',
    'GetDestinationElasticsearchConfigurationResult',
    'GetDestinationElasticsearchConfigurationAuthenticationMethodResult',
    'GetDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodApiKeySecretResult',
    'GetDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodUsernamePasswordResult',
    'GetDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodApiKeySecretResult',
    'GetDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodUsernamePasswordResult',
    'GetDestinationFireboltConfigurationResult',
    'GetDestinationFireboltConfigurationLoadingMethodResult',
    'GetDestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodExternalTableViaS3Result',
    'GetDestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodSqlInsertsResult',
    'GetDestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodExternalTableViaS3Result',
    'GetDestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodSqlInsertsResult',
    'GetDestinationFirestoreConfigurationResult',
    'GetDestinationGcsConfigurationResult',
    'GetDestinationGcsConfigurationCredentialResult',
    'GetDestinationGcsConfigurationCredentialDestinationGcsAuthenticationHmacKeyResult',
    'GetDestinationGcsConfigurationCredentialDestinationGcsUpdateAuthenticationHmacKeyResult',
    'GetDestinationGcsConfigurationFormatResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2Result',
    'GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflateResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompressionResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappyResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecXzResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandardResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzipResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompressionResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatParquetColumnarStorageResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecBzip2Result',
    'GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflateResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecNoCompressionResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecSnappyResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXzResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandardResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzipResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompressionResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionResult',
    'GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatParquetColumnarStorageResult',
    'GetDestinationGoogleSheetsConfigurationResult',
    'GetDestinationGoogleSheetsConfigurationCredentialsResult',
    'GetDestinationKeenConfigurationResult',
    'GetDestinationKinesisConfigurationResult',
    'GetDestinationLangchainConfigurationResult',
    'GetDestinationLangchainConfigurationEmbeddingResult',
    'GetDestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingFakeResult',
    'GetDestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingOpenAiResult',
    'GetDestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingFakeResult',
    'GetDestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingOpenAiResult',
    'GetDestinationLangchainConfigurationIndexingResult',
    'GetDestinationLangchainConfigurationIndexingDestinationLangchainIndexingChromaLocalPersistanceResult',
    'GetDestinationLangchainConfigurationIndexingDestinationLangchainIndexingDocArrayHnswSearchResult',
    'GetDestinationLangchainConfigurationIndexingDestinationLangchainIndexingPineconeResult',
    'GetDestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingChromaLocalPersistanceResult',
    'GetDestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingDocArrayHnswSearchResult',
    'GetDestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingPineconeResult',
    'GetDestinationLangchainConfigurationProcessingResult',
    'GetDestinationMSsqlConfigurationResult',
    'GetDestinationMSsqlConfigurationSslMethodResult',
    'GetDestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedTrustServerCertificateResult',
    'GetDestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedVerifyCertificateResult',
    'GetDestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedTrustServerCertificateResult',
    'GetDestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedVerifyCertificateResult',
    'GetDestinationMSsqlConfigurationTunnelMethodResult',
    'GetDestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodNoTunnelResult',
    'GetDestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodPasswordAuthenticationResult',
    'GetDestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodSshKeyAuthenticationResult',
    'GetDestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodNoTunnelResult',
    'GetDestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodPasswordAuthenticationResult',
    'GetDestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodSshKeyAuthenticationResult',
    'GetDestinationMongodbConfigurationResult',
    'GetDestinationMongodbConfigurationAuthTypeResult',
    'GetDestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeLoginPasswordResult',
    'GetDestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeNoneResult',
    'GetDestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeLoginPasswordResult',
    'GetDestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeNoneResult',
    'GetDestinationMongodbConfigurationInstanceTypeResult',
    'GetDestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeMongoDbAtlasResult',
    'GetDestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeReplicaSetResult',
    'GetDestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceResult',
    'GetDestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlasResult',
    'GetDestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeReplicaSetResult',
    'GetDestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceResult',
    'GetDestinationMongodbConfigurationTunnelMethodResult',
    'GetDestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodNoTunnelResult',
    'GetDestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodPasswordAuthenticationResult',
    'GetDestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodSshKeyAuthenticationResult',
    'GetDestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodNoTunnelResult',
    'GetDestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodPasswordAuthenticationResult',
    'GetDestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodSshKeyAuthenticationResult',
    'GetDestinationMysqlConfigurationResult',
    'GetDestinationMysqlConfigurationTunnelMethodResult',
    'GetDestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodNoTunnelResult',
    'GetDestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodPasswordAuthenticationResult',
    'GetDestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodSshKeyAuthenticationResult',
    'GetDestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodNoTunnelResult',
    'GetDestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodPasswordAuthenticationResult',
    'GetDestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodSshKeyAuthenticationResult',
    'GetDestinationOracleConfigurationResult',
    'GetDestinationOracleConfigurationTunnelMethodResult',
    'GetDestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodNoTunnelResult',
    'GetDestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodPasswordAuthenticationResult',
    'GetDestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodSshKeyAuthenticationResult',
    'GetDestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodNoTunnelResult',
    'GetDestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodPasswordAuthenticationResult',
    'GetDestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodSshKeyAuthenticationResult',
    'GetDestinationPostgresConfigurationResult',
    'GetDestinationPostgresConfigurationSslModeResult',
    'GetDestinationPostgresConfigurationSslModeDestinationPostgresSslModesAllowResult',
    'GetDestinationPostgresConfigurationSslModeDestinationPostgresSslModesDisableResult',
    'GetDestinationPostgresConfigurationSslModeDestinationPostgresSslModesPreferResult',
    'GetDestinationPostgresConfigurationSslModeDestinationPostgresSslModesRequireResult',
    'GetDestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyCaResult',
    'GetDestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyFullResult',
    'GetDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesAllowResult',
    'GetDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesDisableResult',
    'GetDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesPreferResult',
    'GetDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesRequireResult',
    'GetDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyCaResult',
    'GetDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyFullResult',
    'GetDestinationPostgresConfigurationTunnelMethodResult',
    'GetDestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodNoTunnelResult',
    'GetDestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodPasswordAuthenticationResult',
    'GetDestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodSshKeyAuthenticationResult',
    'GetDestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodNoTunnelResult',
    'GetDestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodPasswordAuthenticationResult',
    'GetDestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodSshKeyAuthenticationResult',
    'GetDestinationPubsubConfigurationResult',
    'GetDestinationRedisConfigurationResult',
    'GetDestinationRedisConfigurationSslModeResult',
    'GetDestinationRedisConfigurationSslModeDestinationRedisSslModesDisableResult',
    'GetDestinationRedisConfigurationSslModeDestinationRedisSslModesVerifyFullResult',
    'GetDestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesDisableResult',
    'GetDestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesVerifyFullResult',
    'GetDestinationRedisConfigurationTunnelMethodResult',
    'GetDestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodNoTunnelResult',
    'GetDestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodPasswordAuthenticationResult',
    'GetDestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodSshKeyAuthenticationResult',
    'GetDestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodNoTunnelResult',
    'GetDestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodPasswordAuthenticationResult',
    'GetDestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodSshKeyAuthenticationResult',
    'GetDestinationRedshiftConfigurationResult',
    'GetDestinationRedshiftConfigurationTunnelMethodResult',
    'GetDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodNoTunnelResult',
    'GetDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodPasswordAuthenticationResult',
    'GetDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodSshKeyAuthenticationResult',
    'GetDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodNoTunnelResult',
    'GetDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodPasswordAuthenticationResult',
    'GetDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodSshKeyAuthenticationResult',
    'GetDestinationRedshiftConfigurationUploadingMethodResult',
    'GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingResult',
    'GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionResult',
    'GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryptionResult',
    'GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryptionResult',
    'GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodStandardResult',
    'GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingResult',
    'GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionResult',
    'GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryptionResult',
    'GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryptionResult',
    'GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodStandardResult',
    'GetDestinationS3ConfigurationResult',
    'GetDestinationS3ConfigurationFormatResult',
    'GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroResult',
    'GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecResult',
    'GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2Result',
    'GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflateResult',
    'GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompressionResult',
    'GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappyResult',
    'GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecXzResult',
    'GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandardResult',
    'GetDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesResult',
    'GetDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionResult',
    'GetDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzipResult',
    'GetDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompressionResult',
    'GetDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonResult',
    'GetDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionResult',
    'GetDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipResult',
    'GetDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionResult',
    'GetDestinationS3ConfigurationFormatDestinationS3OutputFormatParquetColumnarStorageResult',
    'GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroResult',
    'GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecResult',
    'GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecBzip2Result',
    'GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflateResult',
    'GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecNoCompressionResult',
    'GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecSnappyResult',
    'GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXzResult',
    'GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandardResult',
    'GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesResult',
    'GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionResult',
    'GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzipResult',
    'GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompressionResult',
    'GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonResult',
    'GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionResult',
    'GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipResult',
    'GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionResult',
    'GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatParquetColumnarStorageResult',
    'GetDestinationS3GlueConfigurationResult',
    'GetDestinationS3GlueConfigurationFormatResult',
    'GetDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonResult',
    'GetDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionResult',
    'GetDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipResult',
    'GetDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionResult',
    'GetDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonResult',
    'GetDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionResult',
    'GetDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipResult',
    'GetDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionResult',
    'GetDestinationSftpJsonConfigurationResult',
    'GetDestinationSnowflakeConfigurationResult',
    'GetDestinationSnowflakeConfigurationCredentialsResult',
    'GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthenticationResult',
    'GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20Result',
    'GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPasswordResult',
    'GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationResult',
    'GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20Result',
    'GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordResult',
    'GetDestinationTimeplusConfigurationResult',
    'GetDestinationTypesenseConfigurationResult',
    'GetDestinationVerticaConfigurationResult',
    'GetDestinationVerticaConfigurationTunnelMethodResult',
    'GetDestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodNoTunnelResult',
    'GetDestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodPasswordAuthenticationResult',
    'GetDestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodSshKeyAuthenticationResult',
    'GetDestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodNoTunnelResult',
    'GetDestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodPasswordAuthenticationResult',
    'GetDestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodSshKeyAuthenticationResult',
    'GetDestinationXataConfigurationResult',
    'GetSourceAhaConfigurationResult',
    'GetSourceAircallConfigurationResult',
    'GetSourceAirtableConfigurationResult',
    'GetSourceAirtableConfigurationCredentialsResult',
    'GetSourceAirtableConfigurationCredentialsSourceAirtableAuthenticationOAuth20Result',
    'GetSourceAirtableConfigurationCredentialsSourceAirtableAuthenticationPersonalAccessTokenResult',
    'GetSourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationOAuth20Result',
    'GetSourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationPersonalAccessTokenResult',
    'GetSourceAlloydbConfigurationResult',
    'GetSourceAlloydbConfigurationReplicationMethodResult',
    'GetSourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodLogicalReplicationCdcResult',
    'GetSourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardResult',
    'GetSourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardXminResult',
    'GetSourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodLogicalReplicationCdcResult',
    'GetSourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardResult',
    'GetSourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardXminResult',
    'GetSourceAlloydbConfigurationSslModeResult',
    'GetSourceAlloydbConfigurationSslModeSourceAlloydbSslModesAllowResult',
    'GetSourceAlloydbConfigurationSslModeSourceAlloydbSslModesDisableResult',
    'GetSourceAlloydbConfigurationSslModeSourceAlloydbSslModesPreferResult',
    'GetSourceAlloydbConfigurationSslModeSourceAlloydbSslModesRequireResult',
    'GetSourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyCaResult',
    'GetSourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyFullResult',
    'GetSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesAllowResult',
    'GetSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesDisableResult',
    'GetSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesPreferResult',
    'GetSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesRequireResult',
    'GetSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyCaResult',
    'GetSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyFullResult',
    'GetSourceAlloydbConfigurationTunnelMethodResult',
    'GetSourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodNoTunnelResult',
    'GetSourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodPasswordAuthenticationResult',
    'GetSourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodSshKeyAuthenticationResult',
    'GetSourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodNoTunnelResult',
    'GetSourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodPasswordAuthenticationResult',
    'GetSourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodSshKeyAuthenticationResult',
    'GetSourceAmazonAdsConfigurationResult',
    'GetSourceAmazonSellerPartnerConfigurationResult',
    'GetSourceAmazonSqsConfigurationResult',
    'GetSourceAmplitudeConfigurationResult',
    'GetSourceApifyDatasetConfigurationResult',
    'GetSourceAppfollowConfigurationResult',
    'GetSourceAsanaConfigurationResult',
    'GetSourceAsanaConfigurationCredentialsResult',
    'GetSourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauthResult',
    'GetSourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessTokenResult',
    'GetSourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauthResult',
    'GetSourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessTokenResult',
    'GetSourceAuth0ConfigurationResult',
    'GetSourceAuth0ConfigurationCredentialsResult',
    'GetSourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2AccessTokenResult',
    'GetSourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2ConfidentialApplicationResult',
    'GetSourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2AccessTokenResult',
    'GetSourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplicationResult',
    'GetSourceAwsCloudtrailConfigurationResult',
    'GetSourceAzureBlobStorageConfigurationResult',
    'GetSourceAzureBlobStorageConfigurationFormatResult',
    'GetSourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJsonResult',
    'GetSourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJsonResult',
    'GetSourceAzureTableConfigurationResult',
    'GetSourceBambooHrConfigurationResult',
    'GetSourceBigcommerceConfigurationResult',
    'GetSourceBigqueryConfigurationResult',
    'GetSourceBingAdsConfigurationResult',
    'GetSourceBraintreeConfigurationResult',
    'GetSourceBrazeConfigurationResult',
    'GetSourceChargebeeConfigurationResult',
    'GetSourceChartmogulConfigurationResult',
    'GetSourceClickhouseConfigurationResult',
    'GetSourceClickhouseConfigurationTunnelMethodResult',
    'GetSourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodNoTunnelResult',
    'GetSourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodPasswordAuthenticationResult',
    'GetSourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodSshKeyAuthenticationResult',
    'GetSourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodNoTunnelResult',
    'GetSourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodPasswordAuthenticationResult',
    'GetSourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodSshKeyAuthenticationResult',
    'GetSourceClickupApiConfigurationResult',
    'GetSourceClockifyConfigurationResult',
    'GetSourceCloseComConfigurationResult',
    'GetSourceCodaConfigurationResult',
    'GetSourceCoinApiConfigurationResult',
    'GetSourceCoinmarketcapConfigurationResult',
    'GetSourceConfigcatConfigurationResult',
    'GetSourceConfluenceConfigurationResult',
    'GetSourceConvexConfigurationResult',
    'GetSourceDatadogConfigurationResult',
    'GetSourceDatadogConfigurationQueryResult',
    'GetSourceDatascopeConfigurationResult',
    'GetSourceDelightedConfigurationResult',
    'GetSourceDixaConfigurationResult',
    'GetSourceDockerhubConfigurationResult',
    'GetSourceDremioConfigurationResult',
    'GetSourceDynamodbConfigurationResult',
    'GetSourceE2eTestCloudConfigurationResult',
    'GetSourceE2eTestCloudConfigurationMockCatalogResult',
    'GetSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogMultiSchemaResult',
    'GetSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogSingleSchemaResult',
    'GetSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogMultiSchemaResult',
    'GetSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogSingleSchemaResult',
    'GetSourceEmailoctopusConfigurationResult',
    'GetSourceExchangeRatesConfigurationResult',
    'GetSourceFacebookMarketingConfigurationResult',
    'GetSourceFacebookMarketingConfigurationCustomInsightResult',
    'GetSourceFacebookPagesConfigurationResult',
    'GetSourceFakerConfigurationResult',
    'GetSourceFaunaConfigurationResult',
    'GetSourceFaunaConfigurationCollectionResult',
    'GetSourceFaunaConfigurationCollectionDeletionsResult',
    'GetSourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeDisabledResult',
    'GetSourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeEnabledResult',
    'GetSourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeDisabledResult',
    'GetSourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeEnabledResult',
    'GetSourceFileSecureConfigurationResult',
    'GetSourceFileSecureConfigurationProviderResult',
    'GetSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderAzBlobAzureBlobStorageResult',
    'GetSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderGcsGoogleCloudStorageResult',
    'GetSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderHttpsPublicWebResult',
    'GetSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderS3AmazonWebServicesResult',
    'GetSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderScpSecureCopyProtocolResult',
    'GetSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSftpSecureFileTransferProtocolResult',
    'GetSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSshSecureShellResult',
    'GetSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorageResult',
    'GetSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderGcsGoogleCloudStorageResult',
    'GetSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderHttpsPublicWebResult',
    'GetSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderS3AmazonWebServicesResult',
    'GetSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderScpSecureCopyProtocolResult',
    'GetSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSftpSecureFileTransferProtocolResult',
    'GetSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSshSecureShellResult',
    'GetSourceFireboltConfigurationResult',
    'GetSourceFreshcallerConfigurationResult',
    'GetSourceFreshdeskConfigurationResult',
    'GetSourceFreshsalesConfigurationResult',
    'GetSourceGainsightPxConfigurationResult',
    'GetSourceGcsConfigurationResult',
    'GetSourceGetlagoConfigurationResult',
    'GetSourceGithubConfigurationResult',
    'GetSourceGithubConfigurationCredentialsResult',
    'GetSourceGithubConfigurationCredentialsSourceGithubAuthenticationOAuthResult',
    'GetSourceGithubConfigurationCredentialsSourceGithubAuthenticationPersonalAccessTokenResult',
    'GetSourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationOAuthResult',
    'GetSourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationPersonalAccessTokenResult',
    'GetSourceGitlabConfigurationResult',
    'GetSourceGitlabConfigurationCredentialsResult',
    'GetSourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodOAuth20Result',
    'GetSourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodPrivateTokenResult',
    'GetSourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodOAuth20Result',
    'GetSourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodPrivateTokenResult',
    'GetSourceGlassfrogConfigurationResult',
    'GetSourceGnewsConfigurationResult',
    'GetSourceGoogleAdsConfigurationResult',
    'GetSourceGoogleAdsConfigurationCredentialsResult',
    'GetSourceGoogleAdsConfigurationCustomQueryResult',
    'GetSourceGoogleAnalyticsDataApiConfigurationResult',
    'GetSourceGoogleAnalyticsDataApiConfigurationCredentialsResult',
    'GetSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauthResult',
    'GetSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthenticationResult',
    'GetSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauthResult',
    'GetSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthenticationResult',
    'GetSourceGoogleAnalyticsV4ConfigurationResult',
    'GetSourceGoogleAnalyticsV4ConfigurationCredentialsResult',
    'GetSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauthResult',
    'GetSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthenticationResult',
    'GetSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauthResult',
    'GetSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthenticationResult',
    'GetSourceGoogleDirectoryConfigurationResult',
    'GetSourceGoogleDirectoryConfigurationCredentialsResult',
    'GetSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsServiceAccountKeyResult',
    'GetSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuthResult',
    'GetSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKeyResult',
    'GetSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuthResult',
    'GetSourceGooglePagespeedInsightsConfigurationResult',
    'GetSourceGoogleSearchConsoleConfigurationResult',
    'GetSourceGoogleSearchConsoleConfigurationAuthorizationResult',
    'GetSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeOAuthResult',
    'GetSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationResult',
    'GetSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeOAuthResult',
    'GetSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthenticationResult',
    'GetSourceGoogleSheetsConfigurationResult',
    'GetSourceGoogleSheetsConfigurationCredentialsResult',
    'GetSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuthResult',
    'GetSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationServiceAccountKeyAuthenticationResult',
    'GetSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuthResult',
    'GetSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthenticationResult',
    'GetSourceGoogleWebfontsConfigurationResult',
    'GetSourceGoogleWorkspaceAdminReportsConfigurationResult',
    'GetSourceGreenhouseConfigurationResult',
    'GetSourceGridlyConfigurationResult',
    'GetSourceHarvestConfigurationResult',
    'GetSourceHarvestConfigurationCredentialsResult',
    'GetSourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthResult',
    'GetSourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenResult',
    'GetSourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuthResult',
    'GetSourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessTokenResult',
    'GetSourceHubplannerConfigurationResult',
    'GetSourceHubspotConfigurationResult',
    'GetSourceHubspotConfigurationCredentialsResult',
    'GetSourceHubspotConfigurationCredentialsSourceHubspotAuthenticationOAuthResult',
    'GetSourceHubspotConfigurationCredentialsSourceHubspotAuthenticationPrivateAppResult',
    'GetSourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationOAuthResult',
    'GetSourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationPrivateAppResult',
    'GetSourceInsightlyConfigurationResult',
    'GetSourceInstagramConfigurationResult',
    'GetSourceInstatusConfigurationResult',
    'GetSourceIntercomConfigurationResult',
    'GetSourceIp2whoisConfigurationResult',
    'GetSourceIterableConfigurationResult',
    'GetSourceJiraConfigurationResult',
    'GetSourceK6CloudConfigurationResult',
    'GetSourceKlarnaConfigurationResult',
    'GetSourceKlaviyoConfigurationResult',
    'GetSourceKustomerSingerConfigurationResult',
    'GetSourceKyveConfigurationResult',
    'GetSourceLaunchdarklyConfigurationResult',
    'GetSourceLemlistConfigurationResult',
    'GetSourceLeverHiringConfigurationResult',
    'GetSourceLeverHiringConfigurationCredentialsResult',
    'GetSourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKeyResult',
    'GetSourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuthResult',
    'GetSourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKeyResult',
    'GetSourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuthResult',
    'GetSourceLinkedinAdsConfigurationResult',
    'GetSourceLinkedinAdsConfigurationAdAnalyticsReportResult',
    'GetSourceLinkedinAdsConfigurationCredentialsResult',
    'GetSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationAccessTokenResult',
    'GetSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationOAuth20Result',
    'GetSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationAccessTokenResult',
    'GetSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationOAuth20Result',
    'GetSourceLinkedinPagesConfigurationResult',
    'GetSourceLinkedinPagesConfigurationCredentialsResult',
    'GetSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationAccessTokenResult',
    'GetSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationOAuth20Result',
    'GetSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationAccessTokenResult',
    'GetSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationOAuth20Result',
    'GetSourceLinnworksConfigurationResult',
    'GetSourceLokaliseConfigurationResult',
    'GetSourceMailchimpConfigurationResult',
    'GetSourceMailchimpConfigurationCredentialsResult',
    'GetSourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationApiKeyResult',
    'GetSourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationOAuth20Result',
    'GetSourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationApiKeyResult',
    'GetSourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationOAuth20Result',
    'GetSourceMailgunConfigurationResult',
    'GetSourceMailjetSmsConfigurationResult',
    'GetSourceMarketoConfigurationResult',
    'GetSourceMetabaseConfigurationResult',
    'GetSourceMicrosoftTeamsConfigurationResult',
    'GetSourceMicrosoftTeamsConfigurationCredentialsResult',
    'GetSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftResult',
    'GetSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20Result',
    'GetSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftResult',
    'GetSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20Result',
    'GetSourceMixpanelConfigurationResult',
    'GetSourceMixpanelConfigurationCredentialsResult',
    'GetSourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecretResult',
    'GetSourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccountResult',
    'GetSourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecretResult',
    'GetSourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccountResult',
    'GetSourceMondayConfigurationResult',
    'GetSourceMondayConfigurationCredentialsResult',
    'GetSourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodApiTokenResult',
    'GetSourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodOAuth20Result',
    'GetSourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodApiTokenResult',
    'GetSourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodOAuth20Result',
    'GetSourceMongodbConfigurationResult',
    'GetSourceMongodbConfigurationInstanceTypeResult',
    'GetSourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeMongoDbAtlasResult',
    'GetSourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeReplicaSetResult',
    'GetSourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceResult',
    'GetSourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlasResult',
    'GetSourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSetResult',
    'GetSourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceResult',
    'GetSourceMongodbInternalPocConfigurationResult',
    'GetSourceMssqlConfigurationResult',
    'GetSourceMssqlConfigurationReplicationMethodResult',
    'GetSourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodLogicalReplicationCdcResult',
    'GetSourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodStandardResult',
    'GetSourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodLogicalReplicationCdcResult',
    'GetSourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodStandardResult',
    'GetSourceMssqlConfigurationSslMethodResult',
    'GetSourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedTrustServerCertificateResult',
    'GetSourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedVerifyCertificateResult',
    'GetSourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedTrustServerCertificateResult',
    'GetSourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedVerifyCertificateResult',
    'GetSourceMssqlConfigurationTunnelMethodResult',
    'GetSourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodNoTunnelResult',
    'GetSourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodPasswordAuthenticationResult',
    'GetSourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodSshKeyAuthenticationResult',
    'GetSourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodNoTunnelResult',
    'GetSourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodPasswordAuthenticationResult',
    'GetSourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodSshKeyAuthenticationResult',
    'GetSourceMyHoursConfigurationResult',
    'GetSourceMysqlConfigurationResult',
    'GetSourceMysqlConfigurationReplicationMethodResult',
    'GetSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodReadChangesUsingBinaryLogCdcResult',
    'GetSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodScanChangesWithUserDefinedCursorResult',
    'GetSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdcResult',
    'GetSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursorResult',
    'GetSourceMysqlConfigurationSslModeResult',
    'GetSourceMysqlConfigurationSslModeSourceMysqlSslModesPreferredResult',
    'GetSourceMysqlConfigurationSslModeSourceMysqlSslModesRequiredResult',
    'GetSourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyCaResult',
    'GetSourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyIdentityResult',
    'GetSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesPreferredResult',
    'GetSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesRequiredResult',
    'GetSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyCaResult',
    'GetSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyIdentityResult',
    'GetSourceMysqlConfigurationTunnelMethodResult',
    'GetSourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodNoTunnelResult',
    'GetSourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodPasswordAuthenticationResult',
    'GetSourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodSshKeyAuthenticationResult',
    'GetSourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodNoTunnelResult',
    'GetSourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodPasswordAuthenticationResult',
    'GetSourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodSshKeyAuthenticationResult',
    'GetSourceNetsuiteConfigurationResult',
    'GetSourceNotionConfigurationResult',
    'GetSourceNotionConfigurationCredentialsResult',
    'GetSourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingAccessTokenResult',
    'GetSourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingOAuth20Result',
    'GetSourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingAccessTokenResult',
    'GetSourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingOAuth20Result',
    'GetSourceNytimesConfigurationResult',
    'GetSourceOktaConfigurationResult',
    'GetSourceOktaConfigurationCredentialsResult',
    'GetSourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodApiTokenResult',
    'GetSourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodOAuth20Result',
    'GetSourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodApiTokenResult',
    'GetSourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodOAuth20Result',
    'GetSourceOmnisendConfigurationResult',
    'GetSourceOnesignalConfigurationResult',
    'GetSourceOnesignalConfigurationApplicationResult',
    'GetSourceOpenweatherConfigurationResult',
    'GetSourceOracleConfigurationResult',
    'GetSourceOracleConfigurationConnectionDataResult',
    'GetSourceOracleConfigurationConnectionDataSourceOracleConnectByServiceNameResult',
    'GetSourceOracleConfigurationConnectionDataSourceOracleConnectBySystemIdSidResult',
    'GetSourceOracleConfigurationConnectionDataSourceOracleUpdateConnectByServiceNameResult',
    'GetSourceOracleConfigurationConnectionDataSourceOracleUpdateConnectBySystemIdSidResult',
    'GetSourceOracleConfigurationEncryptionResult',
    'GetSourceOracleConfigurationEncryptionSourceOracleEncryptionNativeNetworkEncryptionNneResult',
    'GetSourceOracleConfigurationEncryptionSourceOracleEncryptionTlsEncryptedVerifyCertificateResult',
    'GetSourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionNativeNetworkEncryptionNneResult',
    'GetSourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionTlsEncryptedVerifyCertificateResult',
    'GetSourceOracleConfigurationTunnelMethodResult',
    'GetSourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodNoTunnelResult',
    'GetSourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodPasswordAuthenticationResult',
    'GetSourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodSshKeyAuthenticationResult',
    'GetSourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodNoTunnelResult',
    'GetSourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodPasswordAuthenticationResult',
    'GetSourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodSshKeyAuthenticationResult',
    'GetSourceOrbConfigurationResult',
    'GetSourceOrbitConfigurationResult',
    'GetSourceOutbrainAmplifyConfigurationResult',
    'GetSourceOutbrainAmplifyConfigurationCredentialsResult',
    'GetSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodAccessTokenResult',
    'GetSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodUsernamePasswordResult',
    'GetSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodAccessTokenResult',
    'GetSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePasswordResult',
    'GetSourceOutreachConfigurationResult',
    'GetSourcePaypalTransactionConfigurationResult',
    'GetSourcePaystackConfigurationResult',
    'GetSourcePendoConfigurationResult',
    'GetSourcePersistiqConfigurationResult',
    'GetSourcePexelsApiConfigurationResult',
    'GetSourcePinterestConfigurationResult',
    'GetSourcePinterestConfigurationCredentialsResult',
    'GetSourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodAccessTokenResult',
    'GetSourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodOAuth20Result',
    'GetSourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodAccessTokenResult',
    'GetSourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodOAuth20Result',
    'GetSourcePipedriveConfigurationResult',
    'GetSourcePipedriveConfigurationAuthorizationResult',
    'GetSourcePocketConfigurationResult',
    'GetSourcePokeapiConfigurationResult',
    'GetSourcePolygonStockApiConfigurationResult',
    'GetSourcePostgresConfigurationResult',
    'GetSourcePostgresConfigurationReplicationMethodResult',
    'GetSourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodLogicalReplicationCdcResult',
    'GetSourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardResult',
    'GetSourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardXminResult',
    'GetSourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodLogicalReplicationCdcResult',
    'GetSourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardResult',
    'GetSourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardXminResult',
    'GetSourcePostgresConfigurationSslModeResult',
    'GetSourcePostgresConfigurationSslModeSourcePostgresSslModesAllowResult',
    'GetSourcePostgresConfigurationSslModeSourcePostgresSslModesDisableResult',
    'GetSourcePostgresConfigurationSslModeSourcePostgresSslModesPreferResult',
    'GetSourcePostgresConfigurationSslModeSourcePostgresSslModesRequireResult',
    'GetSourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyCaResult',
    'GetSourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyFullResult',
    'GetSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesAllowResult',
    'GetSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesDisableResult',
    'GetSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesPreferResult',
    'GetSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesRequireResult',
    'GetSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyCaResult',
    'GetSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyFullResult',
    'GetSourcePostgresConfigurationTunnelMethodResult',
    'GetSourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodNoTunnelResult',
    'GetSourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodPasswordAuthenticationResult',
    'GetSourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodSshKeyAuthenticationResult',
    'GetSourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodNoTunnelResult',
    'GetSourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodPasswordAuthenticationResult',
    'GetSourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodSshKeyAuthenticationResult',
    'GetSourcePosthogConfigurationResult',
    'GetSourcePostmarkappConfigurationResult',
    'GetSourcePrestashopConfigurationResult',
    'GetSourcePublicApisConfigurationResult',
    'GetSourcePunkApiConfigurationResult',
    'GetSourcePypiConfigurationResult',
    'GetSourceQualarooConfigurationResult',
    'GetSourceQuickbooksConfigurationResult',
    'GetSourceQuickbooksConfigurationCredentialsResult',
    'GetSourceQuickbooksConfigurationCredentialsSourceQuickbooksAuthorizationMethodOAuth20Result',
    'GetSourceQuickbooksConfigurationCredentialsSourceQuickbooksUpdateAuthorizationMethodOAuth20Result',
    'GetSourceRailzConfigurationResult',
    'GetSourceRechargeConfigurationResult',
    'GetSourceRecreationConfigurationResult',
    'GetSourceRecruiteeConfigurationResult',
    'GetSourceRecurlyConfigurationResult',
    'GetSourceRedshiftConfigurationResult',
    'GetSourceRetentlyConfigurationResult',
    'GetSourceRetentlyConfigurationCredentialsResult',
    'GetSourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthResult',
    'GetSourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateWithApiTokenResult',
    'GetSourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuthResult',
    'GetSourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiTokenResult',
    'GetSourceRkiCovidConfigurationResult',
    'GetSourceRssConfigurationResult',
    'GetSourceS3ConfigurationResult',
    'GetSourceS3ConfigurationFormatResult',
    'GetSourceS3ConfigurationFormatSourceS3FileFormatAvroResult',
    'GetSourceS3ConfigurationFormatSourceS3FileFormatCsvResult',
    'GetSourceS3ConfigurationFormatSourceS3FileFormatJsonlResult',
    'GetSourceS3ConfigurationFormatSourceS3FileFormatParquetResult',
    'GetSourceS3ConfigurationFormatSourceS3UpdateFileFormatAvroResult',
    'GetSourceS3ConfigurationFormatSourceS3UpdateFileFormatCsvResult',
    'GetSourceS3ConfigurationFormatSourceS3UpdateFileFormatJsonlResult',
    'GetSourceS3ConfigurationFormatSourceS3UpdateFileFormatParquetResult',
    'GetSourceS3ConfigurationProviderResult',
    'GetSourceSalesforceConfigurationResult',
    'GetSourceSalesforceConfigurationStreamsCriteriaResult',
    'GetSourceSalesloftConfigurationResult',
    'GetSourceSalesloftConfigurationCredentialsResult',
    'GetSourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaApiKeyResult',
    'GetSourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaOAuthResult',
    'GetSourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaApiKeyResult',
    'GetSourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaOAuthResult',
    'GetSourceSapFieldglassConfigurationResult',
    'GetSourceSecodaConfigurationResult',
    'GetSourceSendgridConfigurationResult',
    'GetSourceSendinblueConfigurationResult',
    'GetSourceSenseforceConfigurationResult',
    'GetSourceSentryConfigurationResult',
    'GetSourceSftpBulkConfigurationResult',
    'GetSourceSftpConfigurationResult',
    'GetSourceSftpConfigurationCredentialsResult',
    'GetSourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardPasswordAuthenticationResult',
    'GetSourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardSshKeyAuthenticationResult',
    'GetSourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardPasswordAuthenticationResult',
    'GetSourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardSshKeyAuthenticationResult',
    'GetSourceShopifyConfigurationResult',
    'GetSourceShopifyConfigurationCredentialsResult',
    'GetSourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodApiPasswordResult',
    'GetSourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodOAuth20Result',
    'GetSourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodApiPasswordResult',
    'GetSourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodOAuth20Result',
    'GetSourceShortioConfigurationResult',
    'GetSourceSlackConfigurationResult',
    'GetSourceSlackConfigurationCredentialsResult',
    'GetSourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismApiTokenResult',
    'GetSourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismSignInViaSlackOAuthResult',
    'GetSourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismApiTokenResult',
    'GetSourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuthResult',
    'GetSourceSmailyConfigurationResult',
    'GetSourceSmartengageConfigurationResult',
    'GetSourceSmartsheetsConfigurationResult',
    'GetSourceSmartsheetsConfigurationCredentialsResult',
    'GetSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodApiAccessTokenResult',
    'GetSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodOAuth20Result',
    'GetSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodApiAccessTokenResult',
    'GetSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodOAuth20Result',
    'GetSourceSnapchatMarketingConfigurationResult',
    'GetSourceSnowflakeConfigurationResult',
    'GetSourceSnowflakeConfigurationCredentialsResult',
    'GetSourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodOAuth20Result',
    'GetSourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodUsernameAndPasswordResult',
    'GetSourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodOAuth20Result',
    'GetSourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodUsernameAndPasswordResult',
    'GetSourceSonarCloudConfigurationResult',
    'GetSourceSpaceXApiConfigurationResult',
    'GetSourceSquareConfigurationResult',
    'GetSourceSquareConfigurationCredentialsResult',
    'GetSourceSquareConfigurationCredentialsSourceSquareAuthenticationApiKeyResult',
    'GetSourceSquareConfigurationCredentialsSourceSquareAuthenticationOauthAuthenticationResult',
    'GetSourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationApiKeyResult',
    'GetSourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationOauthAuthenticationResult',
    'GetSourceStravaConfigurationResult',
    'GetSourceStripeConfigurationResult',
    'GetSourceSurveySparrowConfigurationResult',
    'GetSourceSurveySparrowConfigurationRegionResult',
    'GetSourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlEuBasedAccountResult',
    'GetSourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlGlobalAccountResult',
    'GetSourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlEuBasedAccountResult',
    'GetSourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlGlobalAccountResult',
    'GetSourceSurveymonkeyConfigurationResult',
    'GetSourceSurveymonkeyConfigurationCredentialsResult',
    'GetSourceTempoConfigurationResult',
    'GetSourceTheGuardianApiConfigurationResult',
    'GetSourceTiktokMarketingConfigurationResult',
    'GetSourceTiktokMarketingConfigurationCredentialsResult',
    'GetSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodOAuth20Result',
    'GetSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodSandboxAccessTokenResult',
    'GetSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodOAuth20Result',
    'GetSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessTokenResult',
    'GetSourceTodoistConfigurationResult',
    'GetSourceTrelloConfigurationResult',
    'GetSourceTrustpilotConfigurationResult',
    'GetSourceTrustpilotConfigurationCredentialsResult',
    'GetSourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodApiKeyResult',
    'GetSourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodOAuth20Result',
    'GetSourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodApiKeyResult',
    'GetSourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodOAuth20Result',
    'GetSourceTvmazeScheduleConfigurationResult',
    'GetSourceTwilioConfigurationResult',
    'GetSourceTwilioTaskrouterConfigurationResult',
    'GetSourceTwitterConfigurationResult',
    'GetSourceTypeformConfigurationResult',
    'GetSourceTypeformConfigurationCredentialsResult',
    'GetSourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodOAuth20Result',
    'GetSourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodPrivateTokenResult',
    'GetSourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodOAuth20Result',
    'GetSourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodPrivateTokenResult',
    'GetSourceUsCensusConfigurationResult',
    'GetSourceVantageConfigurationResult',
    'GetSourceWebflowConfigurationResult',
    'GetSourceWhiskyHunterConfigurationResult',
    'GetSourceWikipediaPageviewsConfigurationResult',
    'GetSourceWoocommerceConfigurationResult',
    'GetSourceXeroConfigurationResult',
    'GetSourceXeroConfigurationAuthenticationResult',
    'GetSourceXkcdConfigurationResult',
    'GetSourceYandexMetricaConfigurationResult',
    'GetSourceYotpoConfigurationResult',
    'GetSourceYouniumConfigurationResult',
    'GetSourceYoutubeAnalyticsConfigurationResult',
    'GetSourceYoutubeAnalyticsConfigurationCredentialsResult',
    'GetSourceZendeskChatConfigurationResult',
    'GetSourceZendeskChatConfigurationCredentialsResult',
    'GetSourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodAccessTokenResult',
    'GetSourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodOAuth20Result',
    'GetSourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodAccessTokenResult',
    'GetSourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodOAuth20Result',
    'GetSourceZendeskSunshineConfigurationResult',
    'GetSourceZendeskSunshineConfigurationCredentialsResult',
    'GetSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodApiTokenResult',
    'GetSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodOAuth20Result',
    'GetSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodApiTokenResult',
    'GetSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodOAuth20Result',
    'GetSourceZendeskSupportConfigurationResult',
    'GetSourceZendeskSupportConfigurationCredentialsResult',
    'GetSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationApiTokenResult',
    'GetSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationOAuth20Result',
    'GetSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationApiTokenResult',
    'GetSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationOAuth20Result',
    'GetSourceZendeskTalkConfigurationResult',
    'GetSourceZendeskTalkConfigurationCredentialsResult',
    'GetSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationApiTokenResult',
    'GetSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationOAuth20Result',
    'GetSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationApiTokenResult',
    'GetSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationOAuth20Result',
    'GetSourceZenloopConfigurationResult',
    'GetSourceZohoCrmConfigurationResult',
    'GetSourceZoomConfigurationResult',
    'GetSourceZuoraConfigurationResult',
]

@pulumi.output_type
class ConnectionConfigurations(dict):
    def __init__(__self__, *,
                 streams: Optional[Sequence['outputs.ConnectionConfigurationsStream']] = None):
        if streams is not None:
            pulumi.set(__self__, "streams", streams)

    @property
    @pulumi.getter
    def streams(self) -> Optional[Sequence['outputs.ConnectionConfigurationsStream']]:
        return pulumi.get(self, "streams")


@pulumi.output_type
class ConnectionConfigurationsStream(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cursorFields":
            suggest = "cursor_fields"
        elif key == "primaryKeys":
            suggest = "primary_keys"
        elif key == "syncMode":
            suggest = "sync_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionConfigurationsStream. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionConfigurationsStream.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionConfigurationsStream.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 cursor_fields: Optional[Sequence[str]] = None,
                 primary_keys: Optional[Sequence[Sequence[str]]] = None,
                 sync_mode: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if cursor_fields is not None:
            pulumi.set(__self__, "cursor_fields", cursor_fields)
        if primary_keys is not None:
            pulumi.set(__self__, "primary_keys", primary_keys)
        if sync_mode is not None:
            pulumi.set(__self__, "sync_mode", sync_mode)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="cursorFields")
    def cursor_fields(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cursor_fields")

    @property
    @pulumi.getter(name="primaryKeys")
    def primary_keys(self) -> Optional[Sequence[Sequence[str]]]:
        return pulumi.get(self, "primary_keys")

    @property
    @pulumi.getter(name="syncMode")
    def sync_mode(self) -> Optional[str]:
        return pulumi.get(self, "sync_mode")


@pulumi.output_type
class ConnectionSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scheduleType":
            suggest = "schedule_type"
        elif key == "basicTiming":
            suggest = "basic_timing"
        elif key == "cronExpression":
            suggest = "cron_expression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 schedule_type: str,
                 basic_timing: Optional[str] = None,
                 cron_expression: Optional[str] = None):
        pulumi.set(__self__, "schedule_type", schedule_type)
        if basic_timing is not None:
            pulumi.set(__self__, "basic_timing", basic_timing)
        if cron_expression is not None:
            pulumi.set(__self__, "cron_expression", cron_expression)

    @property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> str:
        return pulumi.get(self, "schedule_type")

    @property
    @pulumi.getter(name="basicTiming")
    def basic_timing(self) -> Optional[str]:
        return pulumi.get(self, "basic_timing")

    @property
    @pulumi.getter(name="cronExpression")
    def cron_expression(self) -> Optional[str]:
        return pulumi.get(self, "cron_expression")


@pulumi.output_type
class DestinationAWSDatalakeConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "destinationType":
            suggest = "destination_type"
        elif key == "lakeformationDatabaseName":
            suggest = "lakeformation_database_name"
        elif key == "awsAccountId":
            suggest = "aws_account_id"
        elif key == "bucketPrefix":
            suggest = "bucket_prefix"
        elif key == "glueCatalogFloatAsDecimal":
            suggest = "glue_catalog_float_as_decimal"
        elif key == "lakeformationDatabaseDefaultTagKey":
            suggest = "lakeformation_database_default_tag_key"
        elif key == "lakeformationDatabaseDefaultTagValues":
            suggest = "lakeformation_database_default_tag_values"
        elif key == "lakeformationGovernedTables":
            suggest = "lakeformation_governed_tables"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationAWSDatalakeConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationAWSDatalakeConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationAWSDatalakeConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket_name: str,
                 credentials: 'outputs.DestinationAWSDatalakeConfigurationCredentials',
                 destination_type: str,
                 lakeformation_database_name: str,
                 region: str,
                 aws_account_id: Optional[str] = None,
                 bucket_prefix: Optional[str] = None,
                 format: Optional['outputs.DestinationAWSDatalakeConfigurationFormat'] = None,
                 glue_catalog_float_as_decimal: Optional[bool] = None,
                 lakeformation_database_default_tag_key: Optional[str] = None,
                 lakeformation_database_default_tag_values: Optional[str] = None,
                 lakeformation_governed_tables: Optional[bool] = None,
                 partitioning: Optional[str] = None):
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "lakeformation_database_name", lakeformation_database_name)
        pulumi.set(__self__, "region", region)
        if aws_account_id is not None:
            pulumi.set(__self__, "aws_account_id", aws_account_id)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if glue_catalog_float_as_decimal is not None:
            pulumi.set(__self__, "glue_catalog_float_as_decimal", glue_catalog_float_as_decimal)
        if lakeformation_database_default_tag_key is not None:
            pulumi.set(__self__, "lakeformation_database_default_tag_key", lakeformation_database_default_tag_key)
        if lakeformation_database_default_tag_values is not None:
            pulumi.set(__self__, "lakeformation_database_default_tag_values", lakeformation_database_default_tag_values)
        if lakeformation_governed_tables is not None:
            pulumi.set(__self__, "lakeformation_governed_tables", lakeformation_governed_tables)
        if partitioning is not None:
            pulumi.set(__self__, "partitioning", partitioning)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> str:
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.DestinationAWSDatalakeConfigurationCredentials':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="lakeformationDatabaseName")
    def lakeformation_database_name(self) -> str:
        return pulumi.get(self, "lakeformation_database_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="awsAccountId")
    def aws_account_id(self) -> Optional[str]:
        return pulumi.get(self, "aws_account_id")

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[str]:
        return pulumi.get(self, "bucket_prefix")

    @property
    @pulumi.getter
    def format(self) -> Optional['outputs.DestinationAWSDatalakeConfigurationFormat']:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="glueCatalogFloatAsDecimal")
    def glue_catalog_float_as_decimal(self) -> Optional[bool]:
        return pulumi.get(self, "glue_catalog_float_as_decimal")

    @property
    @pulumi.getter(name="lakeformationDatabaseDefaultTagKey")
    def lakeformation_database_default_tag_key(self) -> Optional[str]:
        return pulumi.get(self, "lakeformation_database_default_tag_key")

    @property
    @pulumi.getter(name="lakeformationDatabaseDefaultTagValues")
    def lakeformation_database_default_tag_values(self) -> Optional[str]:
        return pulumi.get(self, "lakeformation_database_default_tag_values")

    @property
    @pulumi.getter(name="lakeformationGovernedTables")
    def lakeformation_governed_tables(self) -> Optional[bool]:
        return pulumi.get(self, "lakeformation_governed_tables")

    @property
    @pulumi.getter
    def partitioning(self) -> Optional[str]:
        return pulumi.get(self, "partitioning")


@pulumi.output_type
class DestinationAWSDatalakeConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationAwsDatalakeAuthenticationModeIamRole":
            suggest = "destination_aws_datalake_authentication_mode_iam_role"
        elif key == "destinationAwsDatalakeAuthenticationModeIamUser":
            suggest = "destination_aws_datalake_authentication_mode_iam_user"
        elif key == "destinationAwsDatalakeUpdateAuthenticationModeIamRole":
            suggest = "destination_aws_datalake_update_authentication_mode_iam_role"
        elif key == "destinationAwsDatalakeUpdateAuthenticationModeIamUser":
            suggest = "destination_aws_datalake_update_authentication_mode_iam_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationAWSDatalakeConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationAWSDatalakeConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationAWSDatalakeConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_aws_datalake_authentication_mode_iam_role: Optional['outputs.DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamRole'] = None,
                 destination_aws_datalake_authentication_mode_iam_user: Optional['outputs.DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamUser'] = None,
                 destination_aws_datalake_update_authentication_mode_iam_role: Optional['outputs.DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamRole'] = None,
                 destination_aws_datalake_update_authentication_mode_iam_user: Optional['outputs.DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamUser'] = None):
        if destination_aws_datalake_authentication_mode_iam_role is not None:
            pulumi.set(__self__, "destination_aws_datalake_authentication_mode_iam_role", destination_aws_datalake_authentication_mode_iam_role)
        if destination_aws_datalake_authentication_mode_iam_user is not None:
            pulumi.set(__self__, "destination_aws_datalake_authentication_mode_iam_user", destination_aws_datalake_authentication_mode_iam_user)
        if destination_aws_datalake_update_authentication_mode_iam_role is not None:
            pulumi.set(__self__, "destination_aws_datalake_update_authentication_mode_iam_role", destination_aws_datalake_update_authentication_mode_iam_role)
        if destination_aws_datalake_update_authentication_mode_iam_user is not None:
            pulumi.set(__self__, "destination_aws_datalake_update_authentication_mode_iam_user", destination_aws_datalake_update_authentication_mode_iam_user)

    @property
    @pulumi.getter(name="destinationAwsDatalakeAuthenticationModeIamRole")
    def destination_aws_datalake_authentication_mode_iam_role(self) -> Optional['outputs.DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamRole']:
        return pulumi.get(self, "destination_aws_datalake_authentication_mode_iam_role")

    @property
    @pulumi.getter(name="destinationAwsDatalakeAuthenticationModeIamUser")
    def destination_aws_datalake_authentication_mode_iam_user(self) -> Optional['outputs.DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamUser']:
        return pulumi.get(self, "destination_aws_datalake_authentication_mode_iam_user")

    @property
    @pulumi.getter(name="destinationAwsDatalakeUpdateAuthenticationModeIamRole")
    def destination_aws_datalake_update_authentication_mode_iam_role(self) -> Optional['outputs.DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamRole']:
        return pulumi.get(self, "destination_aws_datalake_update_authentication_mode_iam_role")

    @property
    @pulumi.getter(name="destinationAwsDatalakeUpdateAuthenticationModeIamUser")
    def destination_aws_datalake_update_authentication_mode_iam_user(self) -> Optional['outputs.DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamUser']:
        return pulumi.get(self, "destination_aws_datalake_update_authentication_mode_iam_user")


@pulumi.output_type
class DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialsTitle":
            suggest = "credentials_title"
        elif key == "roleArn":
            suggest = "role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials_title: str,
                 role_arn: str):
        pulumi.set(__self__, "credentials_title", credentials_title)
        pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> str:
        return pulumi.get(self, "credentials_title")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        return pulumi.get(self, "role_arn")


@pulumi.output_type
class DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsAccessKeyId":
            suggest = "aws_access_key_id"
        elif key == "awsSecretAccessKey":
            suggest = "aws_secret_access_key"
        elif key == "credentialsTitle":
            suggest = "credentials_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_access_key_id: str,
                 aws_secret_access_key: str,
                 credentials_title: str):
        pulumi.set(__self__, "aws_access_key_id", aws_access_key_id)
        pulumi.set(__self__, "aws_secret_access_key", aws_secret_access_key)
        pulumi.set(__self__, "credentials_title", credentials_title)

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> str:
        return pulumi.get(self, "aws_access_key_id")

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> str:
        return pulumi.get(self, "aws_secret_access_key")

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> str:
        return pulumi.get(self, "credentials_title")


@pulumi.output_type
class DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialsTitle":
            suggest = "credentials_title"
        elif key == "roleArn":
            suggest = "role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials_title: str,
                 role_arn: str):
        pulumi.set(__self__, "credentials_title", credentials_title)
        pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> str:
        return pulumi.get(self, "credentials_title")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        return pulumi.get(self, "role_arn")


@pulumi.output_type
class DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsAccessKeyId":
            suggest = "aws_access_key_id"
        elif key == "awsSecretAccessKey":
            suggest = "aws_secret_access_key"
        elif key == "credentialsTitle":
            suggest = "credentials_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_access_key_id: str,
                 aws_secret_access_key: str,
                 credentials_title: str):
        pulumi.set(__self__, "aws_access_key_id", aws_access_key_id)
        pulumi.set(__self__, "aws_secret_access_key", aws_secret_access_key)
        pulumi.set(__self__, "credentials_title", credentials_title)

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> str:
        return pulumi.get(self, "aws_access_key_id")

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> str:
        return pulumi.get(self, "aws_secret_access_key")

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> str:
        return pulumi.get(self, "credentials_title")


@pulumi.output_type
class DestinationAWSDatalakeConfigurationFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJson":
            suggest = "destination_aws_datalake_output_format_wildcard_json_lines_newline_delimited_json"
        elif key == "destinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage":
            suggest = "destination_aws_datalake_output_format_wildcard_parquet_columnar_storage"
        elif key == "destinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJson":
            suggest = "destination_aws_datalake_update_output_format_wildcard_json_lines_newline_delimited_json"
        elif key == "destinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage":
            suggest = "destination_aws_datalake_update_output_format_wildcard_parquet_columnar_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationAWSDatalakeConfigurationFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationAWSDatalakeConfigurationFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationAWSDatalakeConfigurationFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_aws_datalake_output_format_wildcard_json_lines_newline_delimited_json: Optional['outputs.DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJson'] = None,
                 destination_aws_datalake_output_format_wildcard_parquet_columnar_storage: Optional['outputs.DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage'] = None,
                 destination_aws_datalake_update_output_format_wildcard_json_lines_newline_delimited_json: Optional['outputs.DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJson'] = None,
                 destination_aws_datalake_update_output_format_wildcard_parquet_columnar_storage: Optional['outputs.DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage'] = None):
        if destination_aws_datalake_output_format_wildcard_json_lines_newline_delimited_json is not None:
            pulumi.set(__self__, "destination_aws_datalake_output_format_wildcard_json_lines_newline_delimited_json", destination_aws_datalake_output_format_wildcard_json_lines_newline_delimited_json)
        if destination_aws_datalake_output_format_wildcard_parquet_columnar_storage is not None:
            pulumi.set(__self__, "destination_aws_datalake_output_format_wildcard_parquet_columnar_storage", destination_aws_datalake_output_format_wildcard_parquet_columnar_storage)
        if destination_aws_datalake_update_output_format_wildcard_json_lines_newline_delimited_json is not None:
            pulumi.set(__self__, "destination_aws_datalake_update_output_format_wildcard_json_lines_newline_delimited_json", destination_aws_datalake_update_output_format_wildcard_json_lines_newline_delimited_json)
        if destination_aws_datalake_update_output_format_wildcard_parquet_columnar_storage is not None:
            pulumi.set(__self__, "destination_aws_datalake_update_output_format_wildcard_parquet_columnar_storage", destination_aws_datalake_update_output_format_wildcard_parquet_columnar_storage)

    @property
    @pulumi.getter(name="destinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJson")
    def destination_aws_datalake_output_format_wildcard_json_lines_newline_delimited_json(self) -> Optional['outputs.DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJson']:
        return pulumi.get(self, "destination_aws_datalake_output_format_wildcard_json_lines_newline_delimited_json")

    @property
    @pulumi.getter(name="destinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage")
    def destination_aws_datalake_output_format_wildcard_parquet_columnar_storage(self) -> Optional['outputs.DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage']:
        return pulumi.get(self, "destination_aws_datalake_output_format_wildcard_parquet_columnar_storage")

    @property
    @pulumi.getter(name="destinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJson")
    def destination_aws_datalake_update_output_format_wildcard_json_lines_newline_delimited_json(self) -> Optional['outputs.DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJson']:
        return pulumi.get(self, "destination_aws_datalake_update_output_format_wildcard_json_lines_newline_delimited_json")

    @property
    @pulumi.getter(name="destinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage")
    def destination_aws_datalake_update_output_format_wildcard_parquet_columnar_storage(self) -> Optional['outputs.DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage']:
        return pulumi.get(self, "destination_aws_datalake_update_output_format_wildcard_parquet_columnar_storage")


@pulumi.output_type
class DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJson(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatType":
            suggest = "format_type"
        elif key == "compressionCodec":
            suggest = "compression_codec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJson. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJson.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJson.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format_type: str,
                 compression_codec: Optional[str] = None):
        pulumi.set(__self__, "format_type", format_type)
        if compression_codec is not None:
            pulumi.set(__self__, "compression_codec", compression_codec)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> Optional[str]:
        return pulumi.get(self, "compression_codec")


@pulumi.output_type
class DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatType":
            suggest = "format_type"
        elif key == "compressionCodec":
            suggest = "compression_codec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format_type: str,
                 compression_codec: Optional[str] = None):
        pulumi.set(__self__, "format_type", format_type)
        if compression_codec is not None:
            pulumi.set(__self__, "compression_codec", compression_codec)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> Optional[str]:
        return pulumi.get(self, "compression_codec")


@pulumi.output_type
class DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJson(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatType":
            suggest = "format_type"
        elif key == "compressionCodec":
            suggest = "compression_codec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJson. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJson.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJson.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format_type: str,
                 compression_codec: Optional[str] = None):
        pulumi.set(__self__, "format_type", format_type)
        if compression_codec is not None:
            pulumi.set(__self__, "compression_codec", compression_codec)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> Optional[str]:
        return pulumi.get(self, "compression_codec")


@pulumi.output_type
class DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatType":
            suggest = "format_type"
        elif key == "compressionCodec":
            suggest = "compression_codec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format_type: str,
                 compression_codec: Optional[str] = None):
        pulumi.set(__self__, "format_type", format_type)
        if compression_codec is not None:
            pulumi.set(__self__, "compression_codec", compression_codec)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> Optional[str]:
        return pulumi.get(self, "compression_codec")


@pulumi.output_type
class DestinationAzurBlobStorageConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureBlobStorageAccountKey":
            suggest = "azure_blob_storage_account_key"
        elif key == "azureBlobStorageAccountName":
            suggest = "azure_blob_storage_account_name"
        elif key == "destinationType":
            suggest = "destination_type"
        elif key == "azureBlobStorageContainerName":
            suggest = "azure_blob_storage_container_name"
        elif key == "azureBlobStorageEndpointDomainName":
            suggest = "azure_blob_storage_endpoint_domain_name"
        elif key == "azureBlobStorageOutputBufferSize":
            suggest = "azure_blob_storage_output_buffer_size"
        elif key == "azureBlobStorageSpillSize":
            suggest = "azure_blob_storage_spill_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationAzurBlobStorageConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationAzurBlobStorageConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationAzurBlobStorageConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_blob_storage_account_key: str,
                 azure_blob_storage_account_name: str,
                 destination_type: str,
                 format: 'outputs.DestinationAzurBlobStorageConfigurationFormat',
                 azure_blob_storage_container_name: Optional[str] = None,
                 azure_blob_storage_endpoint_domain_name: Optional[str] = None,
                 azure_blob_storage_output_buffer_size: Optional[int] = None,
                 azure_blob_storage_spill_size: Optional[int] = None):
        pulumi.set(__self__, "azure_blob_storage_account_key", azure_blob_storage_account_key)
        pulumi.set(__self__, "azure_blob_storage_account_name", azure_blob_storage_account_name)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "format", format)
        if azure_blob_storage_container_name is not None:
            pulumi.set(__self__, "azure_blob_storage_container_name", azure_blob_storage_container_name)
        if azure_blob_storage_endpoint_domain_name is not None:
            pulumi.set(__self__, "azure_blob_storage_endpoint_domain_name", azure_blob_storage_endpoint_domain_name)
        if azure_blob_storage_output_buffer_size is not None:
            pulumi.set(__self__, "azure_blob_storage_output_buffer_size", azure_blob_storage_output_buffer_size)
        if azure_blob_storage_spill_size is not None:
            pulumi.set(__self__, "azure_blob_storage_spill_size", azure_blob_storage_spill_size)

    @property
    @pulumi.getter(name="azureBlobStorageAccountKey")
    def azure_blob_storage_account_key(self) -> str:
        return pulumi.get(self, "azure_blob_storage_account_key")

    @property
    @pulumi.getter(name="azureBlobStorageAccountName")
    def azure_blob_storage_account_name(self) -> str:
        return pulumi.get(self, "azure_blob_storage_account_name")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def format(self) -> 'outputs.DestinationAzurBlobStorageConfigurationFormat':
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="azureBlobStorageContainerName")
    def azure_blob_storage_container_name(self) -> Optional[str]:
        return pulumi.get(self, "azure_blob_storage_container_name")

    @property
    @pulumi.getter(name="azureBlobStorageEndpointDomainName")
    def azure_blob_storage_endpoint_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "azure_blob_storage_endpoint_domain_name")

    @property
    @pulumi.getter(name="azureBlobStorageOutputBufferSize")
    def azure_blob_storage_output_buffer_size(self) -> Optional[int]:
        return pulumi.get(self, "azure_blob_storage_output_buffer_size")

    @property
    @pulumi.getter(name="azureBlobStorageSpillSize")
    def azure_blob_storage_spill_size(self) -> Optional[int]:
        return pulumi.get(self, "azure_blob_storage_spill_size")


@pulumi.output_type
class DestinationAzurBlobStorageConfigurationFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationAzureBlobStorageOutputFormatCsvCommaSeparatedValues":
            suggest = "destination_azure_blob_storage_output_format_csv_comma_separated_values"
        elif key == "destinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJson":
            suggest = "destination_azure_blob_storage_output_format_json_lines_newline_delimited_json"
        elif key == "destinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValues":
            suggest = "destination_azure_blob_storage_update_output_format_csv_comma_separated_values"
        elif key == "destinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJson":
            suggest = "destination_azure_blob_storage_update_output_format_json_lines_newline_delimited_json"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationAzurBlobStorageConfigurationFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationAzurBlobStorageConfigurationFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationAzurBlobStorageConfigurationFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_azure_blob_storage_output_format_csv_comma_separated_values: Optional['outputs.DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatCsvCommaSeparatedValues'] = None,
                 destination_azure_blob_storage_output_format_json_lines_newline_delimited_json: Optional['outputs.DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJson'] = None,
                 destination_azure_blob_storage_update_output_format_csv_comma_separated_values: Optional['outputs.DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValues'] = None,
                 destination_azure_blob_storage_update_output_format_json_lines_newline_delimited_json: Optional['outputs.DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJson'] = None):
        if destination_azure_blob_storage_output_format_csv_comma_separated_values is not None:
            pulumi.set(__self__, "destination_azure_blob_storage_output_format_csv_comma_separated_values", destination_azure_blob_storage_output_format_csv_comma_separated_values)
        if destination_azure_blob_storage_output_format_json_lines_newline_delimited_json is not None:
            pulumi.set(__self__, "destination_azure_blob_storage_output_format_json_lines_newline_delimited_json", destination_azure_blob_storage_output_format_json_lines_newline_delimited_json)
        if destination_azure_blob_storage_update_output_format_csv_comma_separated_values is not None:
            pulumi.set(__self__, "destination_azure_blob_storage_update_output_format_csv_comma_separated_values", destination_azure_blob_storage_update_output_format_csv_comma_separated_values)
        if destination_azure_blob_storage_update_output_format_json_lines_newline_delimited_json is not None:
            pulumi.set(__self__, "destination_azure_blob_storage_update_output_format_json_lines_newline_delimited_json", destination_azure_blob_storage_update_output_format_json_lines_newline_delimited_json)

    @property
    @pulumi.getter(name="destinationAzureBlobStorageOutputFormatCsvCommaSeparatedValues")
    def destination_azure_blob_storage_output_format_csv_comma_separated_values(self) -> Optional['outputs.DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatCsvCommaSeparatedValues']:
        return pulumi.get(self, "destination_azure_blob_storage_output_format_csv_comma_separated_values")

    @property
    @pulumi.getter(name="destinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJson")
    def destination_azure_blob_storage_output_format_json_lines_newline_delimited_json(self) -> Optional['outputs.DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJson']:
        return pulumi.get(self, "destination_azure_blob_storage_output_format_json_lines_newline_delimited_json")

    @property
    @pulumi.getter(name="destinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValues")
    def destination_azure_blob_storage_update_output_format_csv_comma_separated_values(self) -> Optional['outputs.DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValues']:
        return pulumi.get(self, "destination_azure_blob_storage_update_output_format_csv_comma_separated_values")

    @property
    @pulumi.getter(name="destinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJson")
    def destination_azure_blob_storage_update_output_format_json_lines_newline_delimited_json(self) -> Optional['outputs.DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJson']:
        return pulumi.get(self, "destination_azure_blob_storage_update_output_format_json_lines_newline_delimited_json")


@pulumi.output_type
class DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatCsvCommaSeparatedValues(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatType":
            suggest = "format_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatCsvCommaSeparatedValues. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatCsvCommaSeparatedValues.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatCsvCommaSeparatedValues.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 flattening: str,
                 format_type: str):
        pulumi.set(__self__, "flattening", flattening)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter
    def flattening(self) -> str:
        return pulumi.get(self, "flattening")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJson(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatType":
            suggest = "format_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJson. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJson.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJson.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format_type: str):
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValues(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatType":
            suggest = "format_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValues. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValues.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValues.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 flattening: str,
                 format_type: str):
        pulumi.set(__self__, "flattening", flattening)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter
    def flattening(self) -> str:
        return pulumi.get(self, "flattening")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJson(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatType":
            suggest = "format_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJson. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJson.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJson.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format_type: str):
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class DestinationBigqueryConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datasetId":
            suggest = "dataset_id"
        elif key == "datasetLocation":
            suggest = "dataset_location"
        elif key == "destinationType":
            suggest = "destination_type"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "bigQueryClientBufferSizeMb":
            suggest = "big_query_client_buffer_size_mb"
        elif key == "credentialsJson":
            suggest = "credentials_json"
        elif key == "loadingMethod":
            suggest = "loading_method"
        elif key == "rawDataDataset":
            suggest = "raw_data_dataset"
        elif key == "transformationPriority":
            suggest = "transformation_priority"
        elif key == "use1s1tFormat":
            suggest = "use1s1t_format"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationBigqueryConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationBigqueryConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationBigqueryConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataset_id: str,
                 dataset_location: str,
                 destination_type: str,
                 project_id: str,
                 big_query_client_buffer_size_mb: Optional[int] = None,
                 credentials_json: Optional[str] = None,
                 loading_method: Optional['outputs.DestinationBigqueryConfigurationLoadingMethod'] = None,
                 raw_data_dataset: Optional[str] = None,
                 transformation_priority: Optional[str] = None,
                 use1s1t_format: Optional[bool] = None):
        pulumi.set(__self__, "dataset_id", dataset_id)
        pulumi.set(__self__, "dataset_location", dataset_location)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "project_id", project_id)
        if big_query_client_buffer_size_mb is not None:
            pulumi.set(__self__, "big_query_client_buffer_size_mb", big_query_client_buffer_size_mb)
        if credentials_json is not None:
            pulumi.set(__self__, "credentials_json", credentials_json)
        if loading_method is not None:
            pulumi.set(__self__, "loading_method", loading_method)
        if raw_data_dataset is not None:
            pulumi.set(__self__, "raw_data_dataset", raw_data_dataset)
        if transformation_priority is not None:
            pulumi.set(__self__, "transformation_priority", transformation_priority)
        if use1s1t_format is not None:
            pulumi.set(__self__, "use1s1t_format", use1s1t_format)

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> str:
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="datasetLocation")
    def dataset_location(self) -> str:
        return pulumi.get(self, "dataset_location")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="bigQueryClientBufferSizeMb")
    def big_query_client_buffer_size_mb(self) -> Optional[int]:
        return pulumi.get(self, "big_query_client_buffer_size_mb")

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> Optional[str]:
        return pulumi.get(self, "credentials_json")

    @property
    @pulumi.getter(name="loadingMethod")
    def loading_method(self) -> Optional['outputs.DestinationBigqueryConfigurationLoadingMethod']:
        return pulumi.get(self, "loading_method")

    @property
    @pulumi.getter(name="rawDataDataset")
    def raw_data_dataset(self) -> Optional[str]:
        return pulumi.get(self, "raw_data_dataset")

    @property
    @pulumi.getter(name="transformationPriority")
    def transformation_priority(self) -> Optional[str]:
        return pulumi.get(self, "transformation_priority")

    @property
    @pulumi.getter(name="use1s1tFormat")
    def use1s1t_format(self) -> Optional[bool]:
        return pulumi.get(self, "use1s1t_format")


@pulumi.output_type
class DestinationBigqueryConfigurationLoadingMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationBigqueryLoadingMethodGcsStaging":
            suggest = "destination_bigquery_loading_method_gcs_staging"
        elif key == "destinationBigqueryLoadingMethodStandardInserts":
            suggest = "destination_bigquery_loading_method_standard_inserts"
        elif key == "destinationBigqueryUpdateLoadingMethodGcsStaging":
            suggest = "destination_bigquery_update_loading_method_gcs_staging"
        elif key == "destinationBigqueryUpdateLoadingMethodStandardInserts":
            suggest = "destination_bigquery_update_loading_method_standard_inserts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationBigqueryConfigurationLoadingMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationBigqueryConfigurationLoadingMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationBigqueryConfigurationLoadingMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_bigquery_loading_method_gcs_staging: Optional['outputs.DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStaging'] = None,
                 destination_bigquery_loading_method_standard_inserts: Optional['outputs.DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodStandardInserts'] = None,
                 destination_bigquery_update_loading_method_gcs_staging: Optional['outputs.DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStaging'] = None,
                 destination_bigquery_update_loading_method_standard_inserts: Optional['outputs.DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodStandardInserts'] = None):
        if destination_bigquery_loading_method_gcs_staging is not None:
            pulumi.set(__self__, "destination_bigquery_loading_method_gcs_staging", destination_bigquery_loading_method_gcs_staging)
        if destination_bigquery_loading_method_standard_inserts is not None:
            pulumi.set(__self__, "destination_bigquery_loading_method_standard_inserts", destination_bigquery_loading_method_standard_inserts)
        if destination_bigquery_update_loading_method_gcs_staging is not None:
            pulumi.set(__self__, "destination_bigquery_update_loading_method_gcs_staging", destination_bigquery_update_loading_method_gcs_staging)
        if destination_bigquery_update_loading_method_standard_inserts is not None:
            pulumi.set(__self__, "destination_bigquery_update_loading_method_standard_inserts", destination_bigquery_update_loading_method_standard_inserts)

    @property
    @pulumi.getter(name="destinationBigqueryLoadingMethodGcsStaging")
    def destination_bigquery_loading_method_gcs_staging(self) -> Optional['outputs.DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStaging']:
        return pulumi.get(self, "destination_bigquery_loading_method_gcs_staging")

    @property
    @pulumi.getter(name="destinationBigqueryLoadingMethodStandardInserts")
    def destination_bigquery_loading_method_standard_inserts(self) -> Optional['outputs.DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodStandardInserts']:
        return pulumi.get(self, "destination_bigquery_loading_method_standard_inserts")

    @property
    @pulumi.getter(name="destinationBigqueryUpdateLoadingMethodGcsStaging")
    def destination_bigquery_update_loading_method_gcs_staging(self) -> Optional['outputs.DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStaging']:
        return pulumi.get(self, "destination_bigquery_update_loading_method_gcs_staging")

    @property
    @pulumi.getter(name="destinationBigqueryUpdateLoadingMethodStandardInserts")
    def destination_bigquery_update_loading_method_standard_inserts(self) -> Optional['outputs.DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodStandardInserts']:
        return pulumi.get(self, "destination_bigquery_update_loading_method_standard_inserts")


@pulumi.output_type
class DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStaging(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gcsBucketName":
            suggest = "gcs_bucket_name"
        elif key == "gcsBucketPath":
            suggest = "gcs_bucket_path"
        elif key == "fileBufferCount":
            suggest = "file_buffer_count"
        elif key == "keepFilesInGcsBucket":
            suggest = "keep_files_in_gcs_bucket"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStaging. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStaging.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStaging.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential: 'outputs.DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredential',
                 gcs_bucket_name: str,
                 gcs_bucket_path: str,
                 method: str,
                 file_buffer_count: Optional[int] = None,
                 keep_files_in_gcs_bucket: Optional[str] = None):
        pulumi.set(__self__, "credential", credential)
        pulumi.set(__self__, "gcs_bucket_name", gcs_bucket_name)
        pulumi.set(__self__, "gcs_bucket_path", gcs_bucket_path)
        pulumi.set(__self__, "method", method)
        if file_buffer_count is not None:
            pulumi.set(__self__, "file_buffer_count", file_buffer_count)
        if keep_files_in_gcs_bucket is not None:
            pulumi.set(__self__, "keep_files_in_gcs_bucket", keep_files_in_gcs_bucket)

    @property
    @pulumi.getter
    def credential(self) -> 'outputs.DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredential':
        return pulumi.get(self, "credential")

    @property
    @pulumi.getter(name="gcsBucketName")
    def gcs_bucket_name(self) -> str:
        return pulumi.get(self, "gcs_bucket_name")

    @property
    @pulumi.getter(name="gcsBucketPath")
    def gcs_bucket_path(self) -> str:
        return pulumi.get(self, "gcs_bucket_path")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="fileBufferCount")
    def file_buffer_count(self) -> Optional[int]:
        return pulumi.get(self, "file_buffer_count")

    @property
    @pulumi.getter(name="keepFilesInGcsBucket")
    def keep_files_in_gcs_bucket(self) -> Optional[str]:
        return pulumi.get(self, "keep_files_in_gcs_bucket")


@pulumi.output_type
class DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationBigqueryLoadingMethodGcsStagingCredentialHmacKey":
            suggest = "destination_bigquery_loading_method_gcs_staging_credential_hmac_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_bigquery_loading_method_gcs_staging_credential_hmac_key: Optional['outputs.DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialDestinationBigqueryLoadingMethodGcsStagingCredentialHmacKey'] = None):
        if destination_bigquery_loading_method_gcs_staging_credential_hmac_key is not None:
            pulumi.set(__self__, "destination_bigquery_loading_method_gcs_staging_credential_hmac_key", destination_bigquery_loading_method_gcs_staging_credential_hmac_key)

    @property
    @pulumi.getter(name="destinationBigqueryLoadingMethodGcsStagingCredentialHmacKey")
    def destination_bigquery_loading_method_gcs_staging_credential_hmac_key(self) -> Optional['outputs.DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialDestinationBigqueryLoadingMethodGcsStagingCredentialHmacKey']:
        return pulumi.get(self, "destination_bigquery_loading_method_gcs_staging_credential_hmac_key")


@pulumi.output_type
class DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialDestinationBigqueryLoadingMethodGcsStagingCredentialHmacKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialType":
            suggest = "credential_type"
        elif key == "hmacKeyAccessId":
            suggest = "hmac_key_access_id"
        elif key == "hmacKeySecret":
            suggest = "hmac_key_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialDestinationBigqueryLoadingMethodGcsStagingCredentialHmacKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialDestinationBigqueryLoadingMethodGcsStagingCredentialHmacKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialDestinationBigqueryLoadingMethodGcsStagingCredentialHmacKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_type: str,
                 hmac_key_access_id: str,
                 hmac_key_secret: str):
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "hmac_key_access_id", hmac_key_access_id)
        pulumi.set(__self__, "hmac_key_secret", hmac_key_secret)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="hmacKeyAccessId")
    def hmac_key_access_id(self) -> str:
        return pulumi.get(self, "hmac_key_access_id")

    @property
    @pulumi.getter(name="hmacKeySecret")
    def hmac_key_secret(self) -> str:
        return pulumi.get(self, "hmac_key_secret")


@pulumi.output_type
class DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodStandardInserts(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStaging(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gcsBucketName":
            suggest = "gcs_bucket_name"
        elif key == "gcsBucketPath":
            suggest = "gcs_bucket_path"
        elif key == "fileBufferCount":
            suggest = "file_buffer_count"
        elif key == "keepFilesInGcsBucket":
            suggest = "keep_files_in_gcs_bucket"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStaging. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStaging.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStaging.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential: 'outputs.DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredential',
                 gcs_bucket_name: str,
                 gcs_bucket_path: str,
                 method: str,
                 file_buffer_count: Optional[int] = None,
                 keep_files_in_gcs_bucket: Optional[str] = None):
        pulumi.set(__self__, "credential", credential)
        pulumi.set(__self__, "gcs_bucket_name", gcs_bucket_name)
        pulumi.set(__self__, "gcs_bucket_path", gcs_bucket_path)
        pulumi.set(__self__, "method", method)
        if file_buffer_count is not None:
            pulumi.set(__self__, "file_buffer_count", file_buffer_count)
        if keep_files_in_gcs_bucket is not None:
            pulumi.set(__self__, "keep_files_in_gcs_bucket", keep_files_in_gcs_bucket)

    @property
    @pulumi.getter
    def credential(self) -> 'outputs.DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredential':
        return pulumi.get(self, "credential")

    @property
    @pulumi.getter(name="gcsBucketName")
    def gcs_bucket_name(self) -> str:
        return pulumi.get(self, "gcs_bucket_name")

    @property
    @pulumi.getter(name="gcsBucketPath")
    def gcs_bucket_path(self) -> str:
        return pulumi.get(self, "gcs_bucket_path")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="fileBufferCount")
    def file_buffer_count(self) -> Optional[int]:
        return pulumi.get(self, "file_buffer_count")

    @property
    @pulumi.getter(name="keepFilesInGcsBucket")
    def keep_files_in_gcs_bucket(self) -> Optional[str]:
        return pulumi.get(self, "keep_files_in_gcs_bucket")


@pulumi.output_type
class DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKey":
            suggest = "destination_bigquery_update_loading_method_gcs_staging_credential_hmac_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_bigquery_update_loading_method_gcs_staging_credential_hmac_key: Optional['outputs.DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKey'] = None):
        if destination_bigquery_update_loading_method_gcs_staging_credential_hmac_key is not None:
            pulumi.set(__self__, "destination_bigquery_update_loading_method_gcs_staging_credential_hmac_key", destination_bigquery_update_loading_method_gcs_staging_credential_hmac_key)

    @property
    @pulumi.getter(name="destinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKey")
    def destination_bigquery_update_loading_method_gcs_staging_credential_hmac_key(self) -> Optional['outputs.DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKey']:
        return pulumi.get(self, "destination_bigquery_update_loading_method_gcs_staging_credential_hmac_key")


@pulumi.output_type
class DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialType":
            suggest = "credential_type"
        elif key == "hmacKeyAccessId":
            suggest = "hmac_key_access_id"
        elif key == "hmacKeySecret":
            suggest = "hmac_key_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_type: str,
                 hmac_key_access_id: str,
                 hmac_key_secret: str):
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "hmac_key_access_id", hmac_key_access_id)
        pulumi.set(__self__, "hmac_key_secret", hmac_key_secret)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="hmacKeyAccessId")
    def hmac_key_access_id(self) -> str:
        return pulumi.get(self, "hmac_key_access_id")

    @property
    @pulumi.getter(name="hmacKeySecret")
    def hmac_key_secret(self) -> str:
        return pulumi.get(self, "hmac_key_secret")


@pulumi.output_type
class DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodStandardInserts(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class DestinationBigqueryDenormalizedConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datasetId":
            suggest = "dataset_id"
        elif key == "destinationType":
            suggest = "destination_type"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "bigQueryClientBufferSizeMb":
            suggest = "big_query_client_buffer_size_mb"
        elif key == "credentialsJson":
            suggest = "credentials_json"
        elif key == "datasetLocation":
            suggest = "dataset_location"
        elif key == "loadingMethod":
            suggest = "loading_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationBigqueryDenormalizedConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationBigqueryDenormalizedConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationBigqueryDenormalizedConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataset_id: str,
                 destination_type: str,
                 project_id: str,
                 big_query_client_buffer_size_mb: Optional[int] = None,
                 credentials_json: Optional[str] = None,
                 dataset_location: Optional[str] = None,
                 loading_method: Optional['outputs.DestinationBigqueryDenormalizedConfigurationLoadingMethod'] = None):
        pulumi.set(__self__, "dataset_id", dataset_id)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "project_id", project_id)
        if big_query_client_buffer_size_mb is not None:
            pulumi.set(__self__, "big_query_client_buffer_size_mb", big_query_client_buffer_size_mb)
        if credentials_json is not None:
            pulumi.set(__self__, "credentials_json", credentials_json)
        if dataset_location is not None:
            pulumi.set(__self__, "dataset_location", dataset_location)
        if loading_method is not None:
            pulumi.set(__self__, "loading_method", loading_method)

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> str:
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="bigQueryClientBufferSizeMb")
    def big_query_client_buffer_size_mb(self) -> Optional[int]:
        return pulumi.get(self, "big_query_client_buffer_size_mb")

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> Optional[str]:
        return pulumi.get(self, "credentials_json")

    @property
    @pulumi.getter(name="datasetLocation")
    def dataset_location(self) -> Optional[str]:
        return pulumi.get(self, "dataset_location")

    @property
    @pulumi.getter(name="loadingMethod")
    def loading_method(self) -> Optional['outputs.DestinationBigqueryDenormalizedConfigurationLoadingMethod']:
        return pulumi.get(self, "loading_method")


@pulumi.output_type
class DestinationBigqueryDenormalizedConfigurationLoadingMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationBigqueryDenormalizedLoadingMethodGcsStaging":
            suggest = "destination_bigquery_denormalized_loading_method_gcs_staging"
        elif key == "destinationBigqueryDenormalizedLoadingMethodStandardInserts":
            suggest = "destination_bigquery_denormalized_loading_method_standard_inserts"
        elif key == "destinationBigqueryDenormalizedUpdateLoadingMethodGcsStaging":
            suggest = "destination_bigquery_denormalized_update_loading_method_gcs_staging"
        elif key == "destinationBigqueryDenormalizedUpdateLoadingMethodStandardInserts":
            suggest = "destination_bigquery_denormalized_update_loading_method_standard_inserts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationBigqueryDenormalizedConfigurationLoadingMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationBigqueryDenormalizedConfigurationLoadingMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationBigqueryDenormalizedConfigurationLoadingMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_bigquery_denormalized_loading_method_gcs_staging: Optional['outputs.DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStaging'] = None,
                 destination_bigquery_denormalized_loading_method_standard_inserts: Optional['outputs.DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodStandardInserts'] = None,
                 destination_bigquery_denormalized_update_loading_method_gcs_staging: Optional['outputs.DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStaging'] = None,
                 destination_bigquery_denormalized_update_loading_method_standard_inserts: Optional['outputs.DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodStandardInserts'] = None):
        if destination_bigquery_denormalized_loading_method_gcs_staging is not None:
            pulumi.set(__self__, "destination_bigquery_denormalized_loading_method_gcs_staging", destination_bigquery_denormalized_loading_method_gcs_staging)
        if destination_bigquery_denormalized_loading_method_standard_inserts is not None:
            pulumi.set(__self__, "destination_bigquery_denormalized_loading_method_standard_inserts", destination_bigquery_denormalized_loading_method_standard_inserts)
        if destination_bigquery_denormalized_update_loading_method_gcs_staging is not None:
            pulumi.set(__self__, "destination_bigquery_denormalized_update_loading_method_gcs_staging", destination_bigquery_denormalized_update_loading_method_gcs_staging)
        if destination_bigquery_denormalized_update_loading_method_standard_inserts is not None:
            pulumi.set(__self__, "destination_bigquery_denormalized_update_loading_method_standard_inserts", destination_bigquery_denormalized_update_loading_method_standard_inserts)

    @property
    @pulumi.getter(name="destinationBigqueryDenormalizedLoadingMethodGcsStaging")
    def destination_bigquery_denormalized_loading_method_gcs_staging(self) -> Optional['outputs.DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStaging']:
        return pulumi.get(self, "destination_bigquery_denormalized_loading_method_gcs_staging")

    @property
    @pulumi.getter(name="destinationBigqueryDenormalizedLoadingMethodStandardInserts")
    def destination_bigquery_denormalized_loading_method_standard_inserts(self) -> Optional['outputs.DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodStandardInserts']:
        return pulumi.get(self, "destination_bigquery_denormalized_loading_method_standard_inserts")

    @property
    @pulumi.getter(name="destinationBigqueryDenormalizedUpdateLoadingMethodGcsStaging")
    def destination_bigquery_denormalized_update_loading_method_gcs_staging(self) -> Optional['outputs.DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStaging']:
        return pulumi.get(self, "destination_bigquery_denormalized_update_loading_method_gcs_staging")

    @property
    @pulumi.getter(name="destinationBigqueryDenormalizedUpdateLoadingMethodStandardInserts")
    def destination_bigquery_denormalized_update_loading_method_standard_inserts(self) -> Optional['outputs.DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodStandardInserts']:
        return pulumi.get(self, "destination_bigquery_denormalized_update_loading_method_standard_inserts")


@pulumi.output_type
class DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStaging(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gcsBucketName":
            suggest = "gcs_bucket_name"
        elif key == "gcsBucketPath":
            suggest = "gcs_bucket_path"
        elif key == "fileBufferCount":
            suggest = "file_buffer_count"
        elif key == "keepFilesInGcsBucket":
            suggest = "keep_files_in_gcs_bucket"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStaging. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStaging.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStaging.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential: 'outputs.DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredential',
                 gcs_bucket_name: str,
                 gcs_bucket_path: str,
                 method: str,
                 file_buffer_count: Optional[int] = None,
                 keep_files_in_gcs_bucket: Optional[str] = None):
        pulumi.set(__self__, "credential", credential)
        pulumi.set(__self__, "gcs_bucket_name", gcs_bucket_name)
        pulumi.set(__self__, "gcs_bucket_path", gcs_bucket_path)
        pulumi.set(__self__, "method", method)
        if file_buffer_count is not None:
            pulumi.set(__self__, "file_buffer_count", file_buffer_count)
        if keep_files_in_gcs_bucket is not None:
            pulumi.set(__self__, "keep_files_in_gcs_bucket", keep_files_in_gcs_bucket)

    @property
    @pulumi.getter
    def credential(self) -> 'outputs.DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredential':
        return pulumi.get(self, "credential")

    @property
    @pulumi.getter(name="gcsBucketName")
    def gcs_bucket_name(self) -> str:
        return pulumi.get(self, "gcs_bucket_name")

    @property
    @pulumi.getter(name="gcsBucketPath")
    def gcs_bucket_path(self) -> str:
        return pulumi.get(self, "gcs_bucket_path")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="fileBufferCount")
    def file_buffer_count(self) -> Optional[int]:
        return pulumi.get(self, "file_buffer_count")

    @property
    @pulumi.getter(name="keepFilesInGcsBucket")
    def keep_files_in_gcs_bucket(self) -> Optional[str]:
        return pulumi.get(self, "keep_files_in_gcs_bucket")


@pulumi.output_type
class DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKey":
            suggest = "destination_bigquery_denormalized_loading_method_gcs_staging_credential_hmac_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_bigquery_denormalized_loading_method_gcs_staging_credential_hmac_key: Optional['outputs.DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKey'] = None):
        if destination_bigquery_denormalized_loading_method_gcs_staging_credential_hmac_key is not None:
            pulumi.set(__self__, "destination_bigquery_denormalized_loading_method_gcs_staging_credential_hmac_key", destination_bigquery_denormalized_loading_method_gcs_staging_credential_hmac_key)

    @property
    @pulumi.getter(name="destinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKey")
    def destination_bigquery_denormalized_loading_method_gcs_staging_credential_hmac_key(self) -> Optional['outputs.DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKey']:
        return pulumi.get(self, "destination_bigquery_denormalized_loading_method_gcs_staging_credential_hmac_key")


@pulumi.output_type
class DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialType":
            suggest = "credential_type"
        elif key == "hmacKeyAccessId":
            suggest = "hmac_key_access_id"
        elif key == "hmacKeySecret":
            suggest = "hmac_key_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_type: str,
                 hmac_key_access_id: str,
                 hmac_key_secret: str):
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "hmac_key_access_id", hmac_key_access_id)
        pulumi.set(__self__, "hmac_key_secret", hmac_key_secret)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="hmacKeyAccessId")
    def hmac_key_access_id(self) -> str:
        return pulumi.get(self, "hmac_key_access_id")

    @property
    @pulumi.getter(name="hmacKeySecret")
    def hmac_key_secret(self) -> str:
        return pulumi.get(self, "hmac_key_secret")


@pulumi.output_type
class DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodStandardInserts(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStaging(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gcsBucketName":
            suggest = "gcs_bucket_name"
        elif key == "gcsBucketPath":
            suggest = "gcs_bucket_path"
        elif key == "fileBufferCount":
            suggest = "file_buffer_count"
        elif key == "keepFilesInGcsBucket":
            suggest = "keep_files_in_gcs_bucket"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStaging. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStaging.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStaging.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential: 'outputs.DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredential',
                 gcs_bucket_name: str,
                 gcs_bucket_path: str,
                 method: str,
                 file_buffer_count: Optional[int] = None,
                 keep_files_in_gcs_bucket: Optional[str] = None):
        pulumi.set(__self__, "credential", credential)
        pulumi.set(__self__, "gcs_bucket_name", gcs_bucket_name)
        pulumi.set(__self__, "gcs_bucket_path", gcs_bucket_path)
        pulumi.set(__self__, "method", method)
        if file_buffer_count is not None:
            pulumi.set(__self__, "file_buffer_count", file_buffer_count)
        if keep_files_in_gcs_bucket is not None:
            pulumi.set(__self__, "keep_files_in_gcs_bucket", keep_files_in_gcs_bucket)

    @property
    @pulumi.getter
    def credential(self) -> 'outputs.DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredential':
        return pulumi.get(self, "credential")

    @property
    @pulumi.getter(name="gcsBucketName")
    def gcs_bucket_name(self) -> str:
        return pulumi.get(self, "gcs_bucket_name")

    @property
    @pulumi.getter(name="gcsBucketPath")
    def gcs_bucket_path(self) -> str:
        return pulumi.get(self, "gcs_bucket_path")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="fileBufferCount")
    def file_buffer_count(self) -> Optional[int]:
        return pulumi.get(self, "file_buffer_count")

    @property
    @pulumi.getter(name="keepFilesInGcsBucket")
    def keep_files_in_gcs_bucket(self) -> Optional[str]:
        return pulumi.get(self, "keep_files_in_gcs_bucket")


@pulumi.output_type
class DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKey":
            suggest = "destination_bigquery_denormalized_update_loading_method_gcs_staging_credential_hmac_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_bigquery_denormalized_update_loading_method_gcs_staging_credential_hmac_key: Optional['outputs.DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKey'] = None):
        if destination_bigquery_denormalized_update_loading_method_gcs_staging_credential_hmac_key is not None:
            pulumi.set(__self__, "destination_bigquery_denormalized_update_loading_method_gcs_staging_credential_hmac_key", destination_bigquery_denormalized_update_loading_method_gcs_staging_credential_hmac_key)

    @property
    @pulumi.getter(name="destinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKey")
    def destination_bigquery_denormalized_update_loading_method_gcs_staging_credential_hmac_key(self) -> Optional['outputs.DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKey']:
        return pulumi.get(self, "destination_bigquery_denormalized_update_loading_method_gcs_staging_credential_hmac_key")


@pulumi.output_type
class DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialType":
            suggest = "credential_type"
        elif key == "hmacKeyAccessId":
            suggest = "hmac_key_access_id"
        elif key == "hmacKeySecret":
            suggest = "hmac_key_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_type: str,
                 hmac_key_access_id: str,
                 hmac_key_secret: str):
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "hmac_key_access_id", hmac_key_access_id)
        pulumi.set(__self__, "hmac_key_secret", hmac_key_secret)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="hmacKeyAccessId")
    def hmac_key_access_id(self) -> str:
        return pulumi.get(self, "hmac_key_access_id")

    @property
    @pulumi.getter(name="hmacKeySecret")
    def hmac_key_secret(self) -> str:
        return pulumi.get(self, "hmac_key_secret")


@pulumi.output_type
class DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodStandardInserts(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class DestinationClickhouseConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "jdbcUrlParams":
            suggest = "jdbc_url_params"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationClickhouseConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationClickhouseConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationClickhouseConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: str,
                 destination_type: str,
                 host: str,
                 port: int,
                 username: str,
                 jdbc_url_params: Optional[str] = None,
                 password: Optional[str] = None,
                 tunnel_method: Optional['outputs.DestinationClickhouseConfigurationTunnelMethod'] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "username", username)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[str]:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional['outputs.DestinationClickhouseConfigurationTunnelMethod']:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class DestinationClickhouseConfigurationTunnelMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationClickhouseSshTunnelMethodNoTunnel":
            suggest = "destination_clickhouse_ssh_tunnel_method_no_tunnel"
        elif key == "destinationClickhouseSshTunnelMethodPasswordAuthentication":
            suggest = "destination_clickhouse_ssh_tunnel_method_password_authentication"
        elif key == "destinationClickhouseSshTunnelMethodSshKeyAuthentication":
            suggest = "destination_clickhouse_ssh_tunnel_method_ssh_key_authentication"
        elif key == "destinationClickhouseUpdateSshTunnelMethodNoTunnel":
            suggest = "destination_clickhouse_update_ssh_tunnel_method_no_tunnel"
        elif key == "destinationClickhouseUpdateSshTunnelMethodPasswordAuthentication":
            suggest = "destination_clickhouse_update_ssh_tunnel_method_password_authentication"
        elif key == "destinationClickhouseUpdateSshTunnelMethodSshKeyAuthentication":
            suggest = "destination_clickhouse_update_ssh_tunnel_method_ssh_key_authentication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationClickhouseConfigurationTunnelMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationClickhouseConfigurationTunnelMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationClickhouseConfigurationTunnelMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_clickhouse_ssh_tunnel_method_no_tunnel: Optional['outputs.DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodNoTunnel'] = None,
                 destination_clickhouse_ssh_tunnel_method_password_authentication: Optional['outputs.DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodPasswordAuthentication'] = None,
                 destination_clickhouse_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodSshKeyAuthentication'] = None,
                 destination_clickhouse_update_ssh_tunnel_method_no_tunnel: Optional['outputs.DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodNoTunnel'] = None,
                 destination_clickhouse_update_ssh_tunnel_method_password_authentication: Optional['outputs.DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodPasswordAuthentication'] = None,
                 destination_clickhouse_update_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodSshKeyAuthentication'] = None):
        if destination_clickhouse_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_clickhouse_ssh_tunnel_method_no_tunnel", destination_clickhouse_ssh_tunnel_method_no_tunnel)
        if destination_clickhouse_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_clickhouse_ssh_tunnel_method_password_authentication", destination_clickhouse_ssh_tunnel_method_password_authentication)
        if destination_clickhouse_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_clickhouse_ssh_tunnel_method_ssh_key_authentication", destination_clickhouse_ssh_tunnel_method_ssh_key_authentication)
        if destination_clickhouse_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_clickhouse_update_ssh_tunnel_method_no_tunnel", destination_clickhouse_update_ssh_tunnel_method_no_tunnel)
        if destination_clickhouse_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_clickhouse_update_ssh_tunnel_method_password_authentication", destination_clickhouse_update_ssh_tunnel_method_password_authentication)
        if destination_clickhouse_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_clickhouse_update_ssh_tunnel_method_ssh_key_authentication", destination_clickhouse_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="destinationClickhouseSshTunnelMethodNoTunnel")
    def destination_clickhouse_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "destination_clickhouse_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationClickhouseSshTunnelMethodPasswordAuthentication")
    def destination_clickhouse_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "destination_clickhouse_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationClickhouseSshTunnelMethodSshKeyAuthentication")
    def destination_clickhouse_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "destination_clickhouse_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="destinationClickhouseUpdateSshTunnelMethodNoTunnel")
    def destination_clickhouse_update_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "destination_clickhouse_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationClickhouseUpdateSshTunnelMethodPasswordAuthentication")
    def destination_clickhouse_update_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "destination_clickhouse_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationClickhouseUpdateSshTunnelMethodSshKeyAuthentication")
    def destination_clickhouse_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "destination_clickhouse_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class DestinationConvexConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "deploymentUrl":
            suggest = "deployment_url"
        elif key == "destinationType":
            suggest = "destination_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationConvexConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationConvexConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationConvexConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key: str,
                 deployment_url: str,
                 destination_type: str):
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "deployment_url", deployment_url)
        pulumi.set(__self__, "destination_type", destination_type)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="deploymentUrl")
    def deployment_url(self) -> str:
        return pulumi.get(self, "deployment_url")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")


@pulumi.output_type
class DestinationCumulioConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiHost":
            suggest = "api_host"
        elif key == "apiKey":
            suggest = "api_key"
        elif key == "apiToken":
            suggest = "api_token"
        elif key == "destinationType":
            suggest = "destination_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationCumulioConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationCumulioConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationCumulioConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_host: str,
                 api_key: str,
                 api_token: str,
                 destination_type: str):
        pulumi.set(__self__, "api_host", api_host)
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "destination_type", destination_type)

    @property
    @pulumi.getter(name="apiHost")
    def api_host(self) -> str:
        return pulumi.get(self, "api_host")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")


@pulumi.output_type
class DestinationDatabendConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationDatabendConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationDatabendConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationDatabendConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: str,
                 destination_type: str,
                 host: str,
                 username: str,
                 password: Optional[str] = None,
                 port: Optional[int] = None,
                 table: Optional[str] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "username", username)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if table is not None:
            pulumi.set(__self__, "table", table)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def table(self) -> Optional[str]:
        return pulumi.get(self, "table")


@pulumi.output_type
class DestinationDatabricksConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acceptTerms":
            suggest = "accept_terms"
        elif key == "dataSource":
            suggest = "data_source"
        elif key == "databricksHttpPath":
            suggest = "databricks_http_path"
        elif key == "databricksPersonalAccessToken":
            suggest = "databricks_personal_access_token"
        elif key == "databricksServerHostname":
            suggest = "databricks_server_hostname"
        elif key == "destinationType":
            suggest = "destination_type"
        elif key == "databricksPort":
            suggest = "databricks_port"
        elif key == "enableSchemaEvolution":
            suggest = "enable_schema_evolution"
        elif key == "purgeStagingData":
            suggest = "purge_staging_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationDatabricksConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationDatabricksConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationDatabricksConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accept_terms: bool,
                 data_source: 'outputs.DestinationDatabricksConfigurationDataSource',
                 databricks_http_path: str,
                 databricks_personal_access_token: str,
                 databricks_server_hostname: str,
                 destination_type: str,
                 database: Optional[str] = None,
                 databricks_port: Optional[str] = None,
                 enable_schema_evolution: Optional[bool] = None,
                 purge_staging_data: Optional[bool] = None,
                 schema: Optional[str] = None):
        pulumi.set(__self__, "accept_terms", accept_terms)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "databricks_http_path", databricks_http_path)
        pulumi.set(__self__, "databricks_personal_access_token", databricks_personal_access_token)
        pulumi.set(__self__, "databricks_server_hostname", databricks_server_hostname)
        pulumi.set(__self__, "destination_type", destination_type)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if databricks_port is not None:
            pulumi.set(__self__, "databricks_port", databricks_port)
        if enable_schema_evolution is not None:
            pulumi.set(__self__, "enable_schema_evolution", enable_schema_evolution)
        if purge_staging_data is not None:
            pulumi.set(__self__, "purge_staging_data", purge_staging_data)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter(name="acceptTerms")
    def accept_terms(self) -> bool:
        return pulumi.get(self, "accept_terms")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> 'outputs.DestinationDatabricksConfigurationDataSource':
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter(name="databricksHttpPath")
    def databricks_http_path(self) -> str:
        return pulumi.get(self, "databricks_http_path")

    @property
    @pulumi.getter(name="databricksPersonalAccessToken")
    def databricks_personal_access_token(self) -> str:
        return pulumi.get(self, "databricks_personal_access_token")

    @property
    @pulumi.getter(name="databricksServerHostname")
    def databricks_server_hostname(self) -> str:
        return pulumi.get(self, "databricks_server_hostname")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="databricksPort")
    def databricks_port(self) -> Optional[str]:
        return pulumi.get(self, "databricks_port")

    @property
    @pulumi.getter(name="enableSchemaEvolution")
    def enable_schema_evolution(self) -> Optional[bool]:
        return pulumi.get(self, "enable_schema_evolution")

    @property
    @pulumi.getter(name="purgeStagingData")
    def purge_staging_data(self) -> Optional[bool]:
        return pulumi.get(self, "purge_staging_data")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        return pulumi.get(self, "schema")


@pulumi.output_type
class DestinationDatabricksConfigurationDataSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationDatabricksDataSourceAmazonS3":
            suggest = "destination_databricks_data_source_amazon_s3"
        elif key == "destinationDatabricksDataSourceAzureBlobStorage":
            suggest = "destination_databricks_data_source_azure_blob_storage"
        elif key == "destinationDatabricksDataSourceRecommendedManagedTables":
            suggest = "destination_databricks_data_source_recommended_managed_tables"
        elif key == "destinationDatabricksUpdateDataSourceAmazonS3":
            suggest = "destination_databricks_update_data_source_amazon_s3"
        elif key == "destinationDatabricksUpdateDataSourceAzureBlobStorage":
            suggest = "destination_databricks_update_data_source_azure_blob_storage"
        elif key == "destinationDatabricksUpdateDataSourceRecommendedManagedTables":
            suggest = "destination_databricks_update_data_source_recommended_managed_tables"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationDatabricksConfigurationDataSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationDatabricksConfigurationDataSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationDatabricksConfigurationDataSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_databricks_data_source_amazon_s3: Optional['outputs.DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAmazonS3'] = None,
                 destination_databricks_data_source_azure_blob_storage: Optional['outputs.DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAzureBlobStorage'] = None,
                 destination_databricks_data_source_recommended_managed_tables: Optional['outputs.DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceRecommendedManagedTables'] = None,
                 destination_databricks_update_data_source_amazon_s3: Optional['outputs.DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAmazonS3'] = None,
                 destination_databricks_update_data_source_azure_blob_storage: Optional['outputs.DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAzureBlobStorage'] = None,
                 destination_databricks_update_data_source_recommended_managed_tables: Optional['outputs.DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceRecommendedManagedTables'] = None):
        if destination_databricks_data_source_amazon_s3 is not None:
            pulumi.set(__self__, "destination_databricks_data_source_amazon_s3", destination_databricks_data_source_amazon_s3)
        if destination_databricks_data_source_azure_blob_storage is not None:
            pulumi.set(__self__, "destination_databricks_data_source_azure_blob_storage", destination_databricks_data_source_azure_blob_storage)
        if destination_databricks_data_source_recommended_managed_tables is not None:
            pulumi.set(__self__, "destination_databricks_data_source_recommended_managed_tables", destination_databricks_data_source_recommended_managed_tables)
        if destination_databricks_update_data_source_amazon_s3 is not None:
            pulumi.set(__self__, "destination_databricks_update_data_source_amazon_s3", destination_databricks_update_data_source_amazon_s3)
        if destination_databricks_update_data_source_azure_blob_storage is not None:
            pulumi.set(__self__, "destination_databricks_update_data_source_azure_blob_storage", destination_databricks_update_data_source_azure_blob_storage)
        if destination_databricks_update_data_source_recommended_managed_tables is not None:
            pulumi.set(__self__, "destination_databricks_update_data_source_recommended_managed_tables", destination_databricks_update_data_source_recommended_managed_tables)

    @property
    @pulumi.getter(name="destinationDatabricksDataSourceAmazonS3")
    def destination_databricks_data_source_amazon_s3(self) -> Optional['outputs.DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAmazonS3']:
        return pulumi.get(self, "destination_databricks_data_source_amazon_s3")

    @property
    @pulumi.getter(name="destinationDatabricksDataSourceAzureBlobStorage")
    def destination_databricks_data_source_azure_blob_storage(self) -> Optional['outputs.DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAzureBlobStorage']:
        return pulumi.get(self, "destination_databricks_data_source_azure_blob_storage")

    @property
    @pulumi.getter(name="destinationDatabricksDataSourceRecommendedManagedTables")
    def destination_databricks_data_source_recommended_managed_tables(self) -> Optional['outputs.DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceRecommendedManagedTables']:
        return pulumi.get(self, "destination_databricks_data_source_recommended_managed_tables")

    @property
    @pulumi.getter(name="destinationDatabricksUpdateDataSourceAmazonS3")
    def destination_databricks_update_data_source_amazon_s3(self) -> Optional['outputs.DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAmazonS3']:
        return pulumi.get(self, "destination_databricks_update_data_source_amazon_s3")

    @property
    @pulumi.getter(name="destinationDatabricksUpdateDataSourceAzureBlobStorage")
    def destination_databricks_update_data_source_azure_blob_storage(self) -> Optional['outputs.DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAzureBlobStorage']:
        return pulumi.get(self, "destination_databricks_update_data_source_azure_blob_storage")

    @property
    @pulumi.getter(name="destinationDatabricksUpdateDataSourceRecommendedManagedTables")
    def destination_databricks_update_data_source_recommended_managed_tables(self) -> Optional['outputs.DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceRecommendedManagedTables']:
        return pulumi.get(self, "destination_databricks_update_data_source_recommended_managed_tables")


@pulumi.output_type
class DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAmazonS3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSourceType":
            suggest = "data_source_type"
        elif key == "s3AccessKeyId":
            suggest = "s3_access_key_id"
        elif key == "s3BucketName":
            suggest = "s3_bucket_name"
        elif key == "s3BucketPath":
            suggest = "s3_bucket_path"
        elif key == "s3BucketRegion":
            suggest = "s3_bucket_region"
        elif key == "s3SecretAccessKey":
            suggest = "s3_secret_access_key"
        elif key == "fileNamePattern":
            suggest = "file_name_pattern"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAmazonS3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAmazonS3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAmazonS3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source_type: str,
                 s3_access_key_id: str,
                 s3_bucket_name: str,
                 s3_bucket_path: str,
                 s3_bucket_region: str,
                 s3_secret_access_key: str,
                 file_name_pattern: Optional[str] = None):
        pulumi.set(__self__, "data_source_type", data_source_type)
        pulumi.set(__self__, "s3_access_key_id", s3_access_key_id)
        pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)
        pulumi.set(__self__, "s3_bucket_path", s3_bucket_path)
        pulumi.set(__self__, "s3_bucket_region", s3_bucket_region)
        pulumi.set(__self__, "s3_secret_access_key", s3_secret_access_key)
        if file_name_pattern is not None:
            pulumi.set(__self__, "file_name_pattern", file_name_pattern)

    @property
    @pulumi.getter(name="dataSourceType")
    def data_source_type(self) -> str:
        return pulumi.get(self, "data_source_type")

    @property
    @pulumi.getter(name="s3AccessKeyId")
    def s3_access_key_id(self) -> str:
        return pulumi.get(self, "s3_access_key_id")

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> str:
        return pulumi.get(self, "s3_bucket_name")

    @property
    @pulumi.getter(name="s3BucketPath")
    def s3_bucket_path(self) -> str:
        return pulumi.get(self, "s3_bucket_path")

    @property
    @pulumi.getter(name="s3BucketRegion")
    def s3_bucket_region(self) -> str:
        return pulumi.get(self, "s3_bucket_region")

    @property
    @pulumi.getter(name="s3SecretAccessKey")
    def s3_secret_access_key(self) -> str:
        return pulumi.get(self, "s3_secret_access_key")

    @property
    @pulumi.getter(name="fileNamePattern")
    def file_name_pattern(self) -> Optional[str]:
        return pulumi.get(self, "file_name_pattern")


@pulumi.output_type
class DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAzureBlobStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureBlobStorageAccountName":
            suggest = "azure_blob_storage_account_name"
        elif key == "azureBlobStorageContainerName":
            suggest = "azure_blob_storage_container_name"
        elif key == "azureBlobStorageSasToken":
            suggest = "azure_blob_storage_sas_token"
        elif key == "dataSourceType":
            suggest = "data_source_type"
        elif key == "azureBlobStorageEndpointDomainName":
            suggest = "azure_blob_storage_endpoint_domain_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAzureBlobStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAzureBlobStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAzureBlobStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_blob_storage_account_name: str,
                 azure_blob_storage_container_name: str,
                 azure_blob_storage_sas_token: str,
                 data_source_type: str,
                 azure_blob_storage_endpoint_domain_name: Optional[str] = None):
        pulumi.set(__self__, "azure_blob_storage_account_name", azure_blob_storage_account_name)
        pulumi.set(__self__, "azure_blob_storage_container_name", azure_blob_storage_container_name)
        pulumi.set(__self__, "azure_blob_storage_sas_token", azure_blob_storage_sas_token)
        pulumi.set(__self__, "data_source_type", data_source_type)
        if azure_blob_storage_endpoint_domain_name is not None:
            pulumi.set(__self__, "azure_blob_storage_endpoint_domain_name", azure_blob_storage_endpoint_domain_name)

    @property
    @pulumi.getter(name="azureBlobStorageAccountName")
    def azure_blob_storage_account_name(self) -> str:
        return pulumi.get(self, "azure_blob_storage_account_name")

    @property
    @pulumi.getter(name="azureBlobStorageContainerName")
    def azure_blob_storage_container_name(self) -> str:
        return pulumi.get(self, "azure_blob_storage_container_name")

    @property
    @pulumi.getter(name="azureBlobStorageSasToken")
    def azure_blob_storage_sas_token(self) -> str:
        return pulumi.get(self, "azure_blob_storage_sas_token")

    @property
    @pulumi.getter(name="dataSourceType")
    def data_source_type(self) -> str:
        return pulumi.get(self, "data_source_type")

    @property
    @pulumi.getter(name="azureBlobStorageEndpointDomainName")
    def azure_blob_storage_endpoint_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "azure_blob_storage_endpoint_domain_name")


@pulumi.output_type
class DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceRecommendedManagedTables(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSourceType":
            suggest = "data_source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceRecommendedManagedTables. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceRecommendedManagedTables.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceRecommendedManagedTables.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source_type: str):
        pulumi.set(__self__, "data_source_type", data_source_type)

    @property
    @pulumi.getter(name="dataSourceType")
    def data_source_type(self) -> str:
        return pulumi.get(self, "data_source_type")


@pulumi.output_type
class DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAmazonS3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSourceType":
            suggest = "data_source_type"
        elif key == "s3AccessKeyId":
            suggest = "s3_access_key_id"
        elif key == "s3BucketName":
            suggest = "s3_bucket_name"
        elif key == "s3BucketPath":
            suggest = "s3_bucket_path"
        elif key == "s3BucketRegion":
            suggest = "s3_bucket_region"
        elif key == "s3SecretAccessKey":
            suggest = "s3_secret_access_key"
        elif key == "fileNamePattern":
            suggest = "file_name_pattern"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAmazonS3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAmazonS3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAmazonS3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source_type: str,
                 s3_access_key_id: str,
                 s3_bucket_name: str,
                 s3_bucket_path: str,
                 s3_bucket_region: str,
                 s3_secret_access_key: str,
                 file_name_pattern: Optional[str] = None):
        pulumi.set(__self__, "data_source_type", data_source_type)
        pulumi.set(__self__, "s3_access_key_id", s3_access_key_id)
        pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)
        pulumi.set(__self__, "s3_bucket_path", s3_bucket_path)
        pulumi.set(__self__, "s3_bucket_region", s3_bucket_region)
        pulumi.set(__self__, "s3_secret_access_key", s3_secret_access_key)
        if file_name_pattern is not None:
            pulumi.set(__self__, "file_name_pattern", file_name_pattern)

    @property
    @pulumi.getter(name="dataSourceType")
    def data_source_type(self) -> str:
        return pulumi.get(self, "data_source_type")

    @property
    @pulumi.getter(name="s3AccessKeyId")
    def s3_access_key_id(self) -> str:
        return pulumi.get(self, "s3_access_key_id")

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> str:
        return pulumi.get(self, "s3_bucket_name")

    @property
    @pulumi.getter(name="s3BucketPath")
    def s3_bucket_path(self) -> str:
        return pulumi.get(self, "s3_bucket_path")

    @property
    @pulumi.getter(name="s3BucketRegion")
    def s3_bucket_region(self) -> str:
        return pulumi.get(self, "s3_bucket_region")

    @property
    @pulumi.getter(name="s3SecretAccessKey")
    def s3_secret_access_key(self) -> str:
        return pulumi.get(self, "s3_secret_access_key")

    @property
    @pulumi.getter(name="fileNamePattern")
    def file_name_pattern(self) -> Optional[str]:
        return pulumi.get(self, "file_name_pattern")


@pulumi.output_type
class DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAzureBlobStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureBlobStorageAccountName":
            suggest = "azure_blob_storage_account_name"
        elif key == "azureBlobStorageContainerName":
            suggest = "azure_blob_storage_container_name"
        elif key == "azureBlobStorageSasToken":
            suggest = "azure_blob_storage_sas_token"
        elif key == "dataSourceType":
            suggest = "data_source_type"
        elif key == "azureBlobStorageEndpointDomainName":
            suggest = "azure_blob_storage_endpoint_domain_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAzureBlobStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAzureBlobStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAzureBlobStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_blob_storage_account_name: str,
                 azure_blob_storage_container_name: str,
                 azure_blob_storage_sas_token: str,
                 data_source_type: str,
                 azure_blob_storage_endpoint_domain_name: Optional[str] = None):
        pulumi.set(__self__, "azure_blob_storage_account_name", azure_blob_storage_account_name)
        pulumi.set(__self__, "azure_blob_storage_container_name", azure_blob_storage_container_name)
        pulumi.set(__self__, "azure_blob_storage_sas_token", azure_blob_storage_sas_token)
        pulumi.set(__self__, "data_source_type", data_source_type)
        if azure_blob_storage_endpoint_domain_name is not None:
            pulumi.set(__self__, "azure_blob_storage_endpoint_domain_name", azure_blob_storage_endpoint_domain_name)

    @property
    @pulumi.getter(name="azureBlobStorageAccountName")
    def azure_blob_storage_account_name(self) -> str:
        return pulumi.get(self, "azure_blob_storage_account_name")

    @property
    @pulumi.getter(name="azureBlobStorageContainerName")
    def azure_blob_storage_container_name(self) -> str:
        return pulumi.get(self, "azure_blob_storage_container_name")

    @property
    @pulumi.getter(name="azureBlobStorageSasToken")
    def azure_blob_storage_sas_token(self) -> str:
        return pulumi.get(self, "azure_blob_storage_sas_token")

    @property
    @pulumi.getter(name="dataSourceType")
    def data_source_type(self) -> str:
        return pulumi.get(self, "data_source_type")

    @property
    @pulumi.getter(name="azureBlobStorageEndpointDomainName")
    def azure_blob_storage_endpoint_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "azure_blob_storage_endpoint_domain_name")


@pulumi.output_type
class DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceRecommendedManagedTables(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSourceType":
            suggest = "data_source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceRecommendedManagedTables. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceRecommendedManagedTables.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceRecommendedManagedTables.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source_type: str):
        pulumi.set(__self__, "data_source_type", data_source_type)

    @property
    @pulumi.getter(name="dataSourceType")
    def data_source_type(self) -> str:
        return pulumi.get(self, "data_source_type")


@pulumi.output_type
class DestinationDevNullConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "testDestination":
            suggest = "test_destination"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationDevNullConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationDevNullConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationDevNullConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_type: str,
                 test_destination: 'outputs.DestinationDevNullConfigurationTestDestination'):
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "test_destination", test_destination)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="testDestination")
    def test_destination(self) -> 'outputs.DestinationDevNullConfigurationTestDestination':
        return pulumi.get(self, "test_destination")


@pulumi.output_type
class DestinationDevNullConfigurationTestDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationDevNullTestDestinationSilent":
            suggest = "destination_dev_null_test_destination_silent"
        elif key == "destinationDevNullUpdateTestDestinationSilent":
            suggest = "destination_dev_null_update_test_destination_silent"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationDevNullConfigurationTestDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationDevNullConfigurationTestDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationDevNullConfigurationTestDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_dev_null_test_destination_silent: Optional['outputs.DestinationDevNullConfigurationTestDestinationDestinationDevNullTestDestinationSilent'] = None,
                 destination_dev_null_update_test_destination_silent: Optional['outputs.DestinationDevNullConfigurationTestDestinationDestinationDevNullUpdateTestDestinationSilent'] = None):
        if destination_dev_null_test_destination_silent is not None:
            pulumi.set(__self__, "destination_dev_null_test_destination_silent", destination_dev_null_test_destination_silent)
        if destination_dev_null_update_test_destination_silent is not None:
            pulumi.set(__self__, "destination_dev_null_update_test_destination_silent", destination_dev_null_update_test_destination_silent)

    @property
    @pulumi.getter(name="destinationDevNullTestDestinationSilent")
    def destination_dev_null_test_destination_silent(self) -> Optional['outputs.DestinationDevNullConfigurationTestDestinationDestinationDevNullTestDestinationSilent']:
        return pulumi.get(self, "destination_dev_null_test_destination_silent")

    @property
    @pulumi.getter(name="destinationDevNullUpdateTestDestinationSilent")
    def destination_dev_null_update_test_destination_silent(self) -> Optional['outputs.DestinationDevNullConfigurationTestDestinationDestinationDevNullUpdateTestDestinationSilent']:
        return pulumi.get(self, "destination_dev_null_update_test_destination_silent")


@pulumi.output_type
class DestinationDevNullConfigurationTestDestinationDestinationDevNullTestDestinationSilent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "testDestinationType":
            suggest = "test_destination_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationDevNullConfigurationTestDestinationDestinationDevNullTestDestinationSilent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationDevNullConfigurationTestDestinationDestinationDevNullTestDestinationSilent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationDevNullConfigurationTestDestinationDestinationDevNullTestDestinationSilent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 test_destination_type: str):
        pulumi.set(__self__, "test_destination_type", test_destination_type)

    @property
    @pulumi.getter(name="testDestinationType")
    def test_destination_type(self) -> str:
        return pulumi.get(self, "test_destination_type")


@pulumi.output_type
class DestinationDevNullConfigurationTestDestinationDestinationDevNullUpdateTestDestinationSilent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "testDestinationType":
            suggest = "test_destination_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationDevNullConfigurationTestDestinationDestinationDevNullUpdateTestDestinationSilent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationDevNullConfigurationTestDestinationDestinationDevNullUpdateTestDestinationSilent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationDevNullConfigurationTestDestinationDestinationDevNullUpdateTestDestinationSilent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 test_destination_type: str):
        pulumi.set(__self__, "test_destination_type", test_destination_type)

    @property
    @pulumi.getter(name="testDestinationType")
    def test_destination_type(self) -> str:
        return pulumi.get(self, "test_destination_type")


@pulumi.output_type
class DestinationDynamodbConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKeyId":
            suggest = "access_key_id"
        elif key == "destinationType":
            suggest = "destination_type"
        elif key == "dynamodbRegion":
            suggest = "dynamodb_region"
        elif key == "dynamodbTableNamePrefix":
            suggest = "dynamodb_table_name_prefix"
        elif key == "secretAccessKey":
            suggest = "secret_access_key"
        elif key == "dynamodbEndpoint":
            suggest = "dynamodb_endpoint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationDynamodbConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationDynamodbConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationDynamodbConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key_id: str,
                 destination_type: str,
                 dynamodb_region: str,
                 dynamodb_table_name_prefix: str,
                 secret_access_key: str,
                 dynamodb_endpoint: Optional[str] = None):
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "dynamodb_region", dynamodb_region)
        pulumi.set(__self__, "dynamodb_table_name_prefix", dynamodb_table_name_prefix)
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        if dynamodb_endpoint is not None:
            pulumi.set(__self__, "dynamodb_endpoint", dynamodb_endpoint)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> str:
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dynamodbRegion")
    def dynamodb_region(self) -> str:
        return pulumi.get(self, "dynamodb_region")

    @property
    @pulumi.getter(name="dynamodbTableNamePrefix")
    def dynamodb_table_name_prefix(self) -> str:
        return pulumi.get(self, "dynamodb_table_name_prefix")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> str:
        return pulumi.get(self, "secret_access_key")

    @property
    @pulumi.getter(name="dynamodbEndpoint")
    def dynamodb_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "dynamodb_endpoint")


@pulumi.output_type
class DestinationElasticsearchConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "authenticationMethod":
            suggest = "authentication_method"
        elif key == "caCertificate":
            suggest = "ca_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationElasticsearchConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationElasticsearchConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationElasticsearchConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_type: str,
                 endpoint: str,
                 authentication_method: Optional['outputs.DestinationElasticsearchConfigurationAuthenticationMethod'] = None,
                 ca_certificate: Optional[str] = None,
                 upsert: Optional[bool] = None):
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "endpoint", endpoint)
        if authentication_method is not None:
            pulumi.set(__self__, "authentication_method", authentication_method)
        if ca_certificate is not None:
            pulumi.set(__self__, "ca_certificate", ca_certificate)
        if upsert is not None:
            pulumi.set(__self__, "upsert", upsert)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> Optional['outputs.DestinationElasticsearchConfigurationAuthenticationMethod']:
        return pulumi.get(self, "authentication_method")

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> Optional[str]:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter
    def upsert(self) -> Optional[bool]:
        return pulumi.get(self, "upsert")


@pulumi.output_type
class DestinationElasticsearchConfigurationAuthenticationMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationElasticsearchAuthenticationMethodApiKeySecret":
            suggest = "destination_elasticsearch_authentication_method_api_key_secret"
        elif key == "destinationElasticsearchAuthenticationMethodUsernamePassword":
            suggest = "destination_elasticsearch_authentication_method_username_password"
        elif key == "destinationElasticsearchUpdateAuthenticationMethodApiKeySecret":
            suggest = "destination_elasticsearch_update_authentication_method_api_key_secret"
        elif key == "destinationElasticsearchUpdateAuthenticationMethodUsernamePassword":
            suggest = "destination_elasticsearch_update_authentication_method_username_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationElasticsearchConfigurationAuthenticationMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationElasticsearchConfigurationAuthenticationMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationElasticsearchConfigurationAuthenticationMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_elasticsearch_authentication_method_api_key_secret: Optional['outputs.DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodApiKeySecret'] = None,
                 destination_elasticsearch_authentication_method_username_password: Optional['outputs.DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodUsernamePassword'] = None,
                 destination_elasticsearch_update_authentication_method_api_key_secret: Optional['outputs.DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodApiKeySecret'] = None,
                 destination_elasticsearch_update_authentication_method_username_password: Optional['outputs.DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodUsernamePassword'] = None):
        if destination_elasticsearch_authentication_method_api_key_secret is not None:
            pulumi.set(__self__, "destination_elasticsearch_authentication_method_api_key_secret", destination_elasticsearch_authentication_method_api_key_secret)
        if destination_elasticsearch_authentication_method_username_password is not None:
            pulumi.set(__self__, "destination_elasticsearch_authentication_method_username_password", destination_elasticsearch_authentication_method_username_password)
        if destination_elasticsearch_update_authentication_method_api_key_secret is not None:
            pulumi.set(__self__, "destination_elasticsearch_update_authentication_method_api_key_secret", destination_elasticsearch_update_authentication_method_api_key_secret)
        if destination_elasticsearch_update_authentication_method_username_password is not None:
            pulumi.set(__self__, "destination_elasticsearch_update_authentication_method_username_password", destination_elasticsearch_update_authentication_method_username_password)

    @property
    @pulumi.getter(name="destinationElasticsearchAuthenticationMethodApiKeySecret")
    def destination_elasticsearch_authentication_method_api_key_secret(self) -> Optional['outputs.DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodApiKeySecret']:
        return pulumi.get(self, "destination_elasticsearch_authentication_method_api_key_secret")

    @property
    @pulumi.getter(name="destinationElasticsearchAuthenticationMethodUsernamePassword")
    def destination_elasticsearch_authentication_method_username_password(self) -> Optional['outputs.DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodUsernamePassword']:
        return pulumi.get(self, "destination_elasticsearch_authentication_method_username_password")

    @property
    @pulumi.getter(name="destinationElasticsearchUpdateAuthenticationMethodApiKeySecret")
    def destination_elasticsearch_update_authentication_method_api_key_secret(self) -> Optional['outputs.DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodApiKeySecret']:
        return pulumi.get(self, "destination_elasticsearch_update_authentication_method_api_key_secret")

    @property
    @pulumi.getter(name="destinationElasticsearchUpdateAuthenticationMethodUsernamePassword")
    def destination_elasticsearch_update_authentication_method_username_password(self) -> Optional['outputs.DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodUsernamePassword']:
        return pulumi.get(self, "destination_elasticsearch_update_authentication_method_username_password")


@pulumi.output_type
class DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodApiKeySecret(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKeyId":
            suggest = "api_key_id"
        elif key == "apiKeySecret":
            suggest = "api_key_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodApiKeySecret. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodApiKeySecret.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodApiKeySecret.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key_id: str,
                 api_key_secret: str,
                 method: str):
        pulumi.set(__self__, "api_key_id", api_key_id)
        pulumi.set(__self__, "api_key_secret", api_key_secret)
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter(name="apiKeyId")
    def api_key_id(self) -> str:
        return pulumi.get(self, "api_key_id")

    @property
    @pulumi.getter(name="apiKeySecret")
    def api_key_secret(self) -> str:
        return pulumi.get(self, "api_key_secret")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodUsernamePassword(dict):
    def __init__(__self__, *,
                 method: str,
                 password: str,
                 username: str):
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodApiKeySecret(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKeyId":
            suggest = "api_key_id"
        elif key == "apiKeySecret":
            suggest = "api_key_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodApiKeySecret. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodApiKeySecret.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodApiKeySecret.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key_id: str,
                 api_key_secret: str,
                 method: str):
        pulumi.set(__self__, "api_key_id", api_key_id)
        pulumi.set(__self__, "api_key_secret", api_key_secret)
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter(name="apiKeyId")
    def api_key_id(self) -> str:
        return pulumi.get(self, "api_key_id")

    @property
    @pulumi.getter(name="apiKeySecret")
    def api_key_secret(self) -> str:
        return pulumi.get(self, "api_key_secret")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodUsernamePassword(dict):
    def __init__(__self__, *,
                 method: str,
                 password: str,
                 username: str):
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class DestinationFireboltConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "loadingMethod":
            suggest = "loading_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationFireboltConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationFireboltConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationFireboltConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: str,
                 destination_type: str,
                 password: str,
                 username: str,
                 account: Optional[str] = None,
                 engine: Optional[str] = None,
                 host: Optional[str] = None,
                 loading_method: Optional['outputs.DestinationFireboltConfigurationLoadingMethod'] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)
        if account is not None:
            pulumi.set(__self__, "account", account)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if loading_method is not None:
            pulumi.set(__self__, "loading_method", loading_method)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def account(self) -> Optional[str]:
        return pulumi.get(self, "account")

    @property
    @pulumi.getter
    def engine(self) -> Optional[str]:
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="loadingMethod")
    def loading_method(self) -> Optional['outputs.DestinationFireboltConfigurationLoadingMethod']:
        return pulumi.get(self, "loading_method")


@pulumi.output_type
class DestinationFireboltConfigurationLoadingMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationFireboltLoadingMethodExternalTableViaS3":
            suggest = "destination_firebolt_loading_method_external_table_via_s3"
        elif key == "destinationFireboltLoadingMethodSqlInserts":
            suggest = "destination_firebolt_loading_method_sql_inserts"
        elif key == "destinationFireboltUpdateLoadingMethodExternalTableViaS3":
            suggest = "destination_firebolt_update_loading_method_external_table_via_s3"
        elif key == "destinationFireboltUpdateLoadingMethodSqlInserts":
            suggest = "destination_firebolt_update_loading_method_sql_inserts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationFireboltConfigurationLoadingMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationFireboltConfigurationLoadingMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationFireboltConfigurationLoadingMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_firebolt_loading_method_external_table_via_s3: Optional['outputs.DestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodExternalTableViaS3'] = None,
                 destination_firebolt_loading_method_sql_inserts: Optional['outputs.DestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodSqlInserts'] = None,
                 destination_firebolt_update_loading_method_external_table_via_s3: Optional['outputs.DestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodExternalTableViaS3'] = None,
                 destination_firebolt_update_loading_method_sql_inserts: Optional['outputs.DestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodSqlInserts'] = None):
        if destination_firebolt_loading_method_external_table_via_s3 is not None:
            pulumi.set(__self__, "destination_firebolt_loading_method_external_table_via_s3", destination_firebolt_loading_method_external_table_via_s3)
        if destination_firebolt_loading_method_sql_inserts is not None:
            pulumi.set(__self__, "destination_firebolt_loading_method_sql_inserts", destination_firebolt_loading_method_sql_inserts)
        if destination_firebolt_update_loading_method_external_table_via_s3 is not None:
            pulumi.set(__self__, "destination_firebolt_update_loading_method_external_table_via_s3", destination_firebolt_update_loading_method_external_table_via_s3)
        if destination_firebolt_update_loading_method_sql_inserts is not None:
            pulumi.set(__self__, "destination_firebolt_update_loading_method_sql_inserts", destination_firebolt_update_loading_method_sql_inserts)

    @property
    @pulumi.getter(name="destinationFireboltLoadingMethodExternalTableViaS3")
    def destination_firebolt_loading_method_external_table_via_s3(self) -> Optional['outputs.DestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodExternalTableViaS3']:
        return pulumi.get(self, "destination_firebolt_loading_method_external_table_via_s3")

    @property
    @pulumi.getter(name="destinationFireboltLoadingMethodSqlInserts")
    def destination_firebolt_loading_method_sql_inserts(self) -> Optional['outputs.DestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodSqlInserts']:
        return pulumi.get(self, "destination_firebolt_loading_method_sql_inserts")

    @property
    @pulumi.getter(name="destinationFireboltUpdateLoadingMethodExternalTableViaS3")
    def destination_firebolt_update_loading_method_external_table_via_s3(self) -> Optional['outputs.DestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodExternalTableViaS3']:
        return pulumi.get(self, "destination_firebolt_update_loading_method_external_table_via_s3")

    @property
    @pulumi.getter(name="destinationFireboltUpdateLoadingMethodSqlInserts")
    def destination_firebolt_update_loading_method_sql_inserts(self) -> Optional['outputs.DestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodSqlInserts']:
        return pulumi.get(self, "destination_firebolt_update_loading_method_sql_inserts")


@pulumi.output_type
class DestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodExternalTableViaS3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsKeyId":
            suggest = "aws_key_id"
        elif key == "awsKeySecret":
            suggest = "aws_key_secret"
        elif key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodExternalTableViaS3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodExternalTableViaS3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodExternalTableViaS3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_key_id: str,
                 aws_key_secret: str,
                 method: str,
                 s3_bucket: str,
                 s3_region: str):
        pulumi.set(__self__, "aws_key_id", aws_key_id)
        pulumi.set(__self__, "aws_key_secret", aws_key_secret)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)

    @property
    @pulumi.getter(name="awsKeyId")
    def aws_key_id(self) -> str:
        return pulumi.get(self, "aws_key_id")

    @property
    @pulumi.getter(name="awsKeySecret")
    def aws_key_secret(self) -> str:
        return pulumi.get(self, "aws_key_secret")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")


@pulumi.output_type
class DestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodSqlInserts(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class DestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodExternalTableViaS3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsKeyId":
            suggest = "aws_key_id"
        elif key == "awsKeySecret":
            suggest = "aws_key_secret"
        elif key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodExternalTableViaS3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodExternalTableViaS3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodExternalTableViaS3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_key_id: str,
                 aws_key_secret: str,
                 method: str,
                 s3_bucket: str,
                 s3_region: str):
        pulumi.set(__self__, "aws_key_id", aws_key_id)
        pulumi.set(__self__, "aws_key_secret", aws_key_secret)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)

    @property
    @pulumi.getter(name="awsKeyId")
    def aws_key_id(self) -> str:
        return pulumi.get(self, "aws_key_id")

    @property
    @pulumi.getter(name="awsKeySecret")
    def aws_key_secret(self) -> str:
        return pulumi.get(self, "aws_key_secret")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")


@pulumi.output_type
class DestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodSqlInserts(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class DestinationFirestoreConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "credentialsJson":
            suggest = "credentials_json"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationFirestoreConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationFirestoreConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationFirestoreConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_type: str,
                 project_id: str,
                 credentials_json: Optional[str] = None):
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "project_id", project_id)
        if credentials_json is not None:
            pulumi.set(__self__, "credentials_json", credentials_json)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> Optional[str]:
        return pulumi.get(self, "credentials_json")


@pulumi.output_type
class DestinationGcsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "gcsBucketName":
            suggest = "gcs_bucket_name"
        elif key == "gcsBucketPath":
            suggest = "gcs_bucket_path"
        elif key == "gcsBucketRegion":
            suggest = "gcs_bucket_region"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential: 'outputs.DestinationGcsConfigurationCredential',
                 destination_type: str,
                 format: 'outputs.DestinationGcsConfigurationFormat',
                 gcs_bucket_name: str,
                 gcs_bucket_path: str,
                 gcs_bucket_region: Optional[str] = None):
        pulumi.set(__self__, "credential", credential)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "gcs_bucket_name", gcs_bucket_name)
        pulumi.set(__self__, "gcs_bucket_path", gcs_bucket_path)
        if gcs_bucket_region is not None:
            pulumi.set(__self__, "gcs_bucket_region", gcs_bucket_region)

    @property
    @pulumi.getter
    def credential(self) -> 'outputs.DestinationGcsConfigurationCredential':
        return pulumi.get(self, "credential")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def format(self) -> 'outputs.DestinationGcsConfigurationFormat':
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="gcsBucketName")
    def gcs_bucket_name(self) -> str:
        return pulumi.get(self, "gcs_bucket_name")

    @property
    @pulumi.getter(name="gcsBucketPath")
    def gcs_bucket_path(self) -> str:
        return pulumi.get(self, "gcs_bucket_path")

    @property
    @pulumi.getter(name="gcsBucketRegion")
    def gcs_bucket_region(self) -> Optional[str]:
        return pulumi.get(self, "gcs_bucket_region")


@pulumi.output_type
class DestinationGcsConfigurationCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationGcsAuthenticationHmacKey":
            suggest = "destination_gcs_authentication_hmac_key"
        elif key == "destinationGcsUpdateAuthenticationHmacKey":
            suggest = "destination_gcs_update_authentication_hmac_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_gcs_authentication_hmac_key: Optional['outputs.DestinationGcsConfigurationCredentialDestinationGcsAuthenticationHmacKey'] = None,
                 destination_gcs_update_authentication_hmac_key: Optional['outputs.DestinationGcsConfigurationCredentialDestinationGcsUpdateAuthenticationHmacKey'] = None):
        if destination_gcs_authentication_hmac_key is not None:
            pulumi.set(__self__, "destination_gcs_authentication_hmac_key", destination_gcs_authentication_hmac_key)
        if destination_gcs_update_authentication_hmac_key is not None:
            pulumi.set(__self__, "destination_gcs_update_authentication_hmac_key", destination_gcs_update_authentication_hmac_key)

    @property
    @pulumi.getter(name="destinationGcsAuthenticationHmacKey")
    def destination_gcs_authentication_hmac_key(self) -> Optional['outputs.DestinationGcsConfigurationCredentialDestinationGcsAuthenticationHmacKey']:
        return pulumi.get(self, "destination_gcs_authentication_hmac_key")

    @property
    @pulumi.getter(name="destinationGcsUpdateAuthenticationHmacKey")
    def destination_gcs_update_authentication_hmac_key(self) -> Optional['outputs.DestinationGcsConfigurationCredentialDestinationGcsUpdateAuthenticationHmacKey']:
        return pulumi.get(self, "destination_gcs_update_authentication_hmac_key")


@pulumi.output_type
class DestinationGcsConfigurationCredentialDestinationGcsAuthenticationHmacKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialType":
            suggest = "credential_type"
        elif key == "hmacKeyAccessId":
            suggest = "hmac_key_access_id"
        elif key == "hmacKeySecret":
            suggest = "hmac_key_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationCredentialDestinationGcsAuthenticationHmacKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationCredentialDestinationGcsAuthenticationHmacKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationCredentialDestinationGcsAuthenticationHmacKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_type: str,
                 hmac_key_access_id: str,
                 hmac_key_secret: str):
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "hmac_key_access_id", hmac_key_access_id)
        pulumi.set(__self__, "hmac_key_secret", hmac_key_secret)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="hmacKeyAccessId")
    def hmac_key_access_id(self) -> str:
        return pulumi.get(self, "hmac_key_access_id")

    @property
    @pulumi.getter(name="hmacKeySecret")
    def hmac_key_secret(self) -> str:
        return pulumi.get(self, "hmac_key_secret")


@pulumi.output_type
class DestinationGcsConfigurationCredentialDestinationGcsUpdateAuthenticationHmacKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialType":
            suggest = "credential_type"
        elif key == "hmacKeyAccessId":
            suggest = "hmac_key_access_id"
        elif key == "hmacKeySecret":
            suggest = "hmac_key_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationCredentialDestinationGcsUpdateAuthenticationHmacKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationCredentialDestinationGcsUpdateAuthenticationHmacKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationCredentialDestinationGcsUpdateAuthenticationHmacKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_type: str,
                 hmac_key_access_id: str,
                 hmac_key_secret: str):
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "hmac_key_access_id", hmac_key_access_id)
        pulumi.set(__self__, "hmac_key_secret", hmac_key_secret)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="hmacKeyAccessId")
    def hmac_key_access_id(self) -> str:
        return pulumi.get(self, "hmac_key_access_id")

    @property
    @pulumi.getter(name="hmacKeySecret")
    def hmac_key_secret(self) -> str:
        return pulumi.get(self, "hmac_key_secret")


@pulumi.output_type
class DestinationGcsConfigurationFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationGcsOutputFormatAvroApacheAvro":
            suggest = "destination_gcs_output_format_avro_apache_avro"
        elif key == "destinationGcsOutputFormatCsvCommaSeparatedValues":
            suggest = "destination_gcs_output_format_csv_comma_separated_values"
        elif key == "destinationGcsOutputFormatJsonLinesNewlineDelimitedJson":
            suggest = "destination_gcs_output_format_json_lines_newline_delimited_json"
        elif key == "destinationGcsOutputFormatParquetColumnarStorage":
            suggest = "destination_gcs_output_format_parquet_columnar_storage"
        elif key == "destinationGcsUpdateOutputFormatAvroApacheAvro":
            suggest = "destination_gcs_update_output_format_avro_apache_avro"
        elif key == "destinationGcsUpdateOutputFormatCsvCommaSeparatedValues":
            suggest = "destination_gcs_update_output_format_csv_comma_separated_values"
        elif key == "destinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJson":
            suggest = "destination_gcs_update_output_format_json_lines_newline_delimited_json"
        elif key == "destinationGcsUpdateOutputFormatParquetColumnarStorage":
            suggest = "destination_gcs_update_output_format_parquet_columnar_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_gcs_output_format_avro_apache_avro: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvro'] = None,
                 destination_gcs_output_format_csv_comma_separated_values: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValues'] = None,
                 destination_gcs_output_format_json_lines_newline_delimited_json: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJson'] = None,
                 destination_gcs_output_format_parquet_columnar_storage: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatParquetColumnarStorage'] = None,
                 destination_gcs_update_output_format_avro_apache_avro: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvro'] = None,
                 destination_gcs_update_output_format_csv_comma_separated_values: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValues'] = None,
                 destination_gcs_update_output_format_json_lines_newline_delimited_json: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJson'] = None,
                 destination_gcs_update_output_format_parquet_columnar_storage: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatParquetColumnarStorage'] = None):
        if destination_gcs_output_format_avro_apache_avro is not None:
            pulumi.set(__self__, "destination_gcs_output_format_avro_apache_avro", destination_gcs_output_format_avro_apache_avro)
        if destination_gcs_output_format_csv_comma_separated_values is not None:
            pulumi.set(__self__, "destination_gcs_output_format_csv_comma_separated_values", destination_gcs_output_format_csv_comma_separated_values)
        if destination_gcs_output_format_json_lines_newline_delimited_json is not None:
            pulumi.set(__self__, "destination_gcs_output_format_json_lines_newline_delimited_json", destination_gcs_output_format_json_lines_newline_delimited_json)
        if destination_gcs_output_format_parquet_columnar_storage is not None:
            pulumi.set(__self__, "destination_gcs_output_format_parquet_columnar_storage", destination_gcs_output_format_parquet_columnar_storage)
        if destination_gcs_update_output_format_avro_apache_avro is not None:
            pulumi.set(__self__, "destination_gcs_update_output_format_avro_apache_avro", destination_gcs_update_output_format_avro_apache_avro)
        if destination_gcs_update_output_format_csv_comma_separated_values is not None:
            pulumi.set(__self__, "destination_gcs_update_output_format_csv_comma_separated_values", destination_gcs_update_output_format_csv_comma_separated_values)
        if destination_gcs_update_output_format_json_lines_newline_delimited_json is not None:
            pulumi.set(__self__, "destination_gcs_update_output_format_json_lines_newline_delimited_json", destination_gcs_update_output_format_json_lines_newline_delimited_json)
        if destination_gcs_update_output_format_parquet_columnar_storage is not None:
            pulumi.set(__self__, "destination_gcs_update_output_format_parquet_columnar_storage", destination_gcs_update_output_format_parquet_columnar_storage)

    @property
    @pulumi.getter(name="destinationGcsOutputFormatAvroApacheAvro")
    def destination_gcs_output_format_avro_apache_avro(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvro']:
        return pulumi.get(self, "destination_gcs_output_format_avro_apache_avro")

    @property
    @pulumi.getter(name="destinationGcsOutputFormatCsvCommaSeparatedValues")
    def destination_gcs_output_format_csv_comma_separated_values(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValues']:
        return pulumi.get(self, "destination_gcs_output_format_csv_comma_separated_values")

    @property
    @pulumi.getter(name="destinationGcsOutputFormatJsonLinesNewlineDelimitedJson")
    def destination_gcs_output_format_json_lines_newline_delimited_json(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJson']:
        return pulumi.get(self, "destination_gcs_output_format_json_lines_newline_delimited_json")

    @property
    @pulumi.getter(name="destinationGcsOutputFormatParquetColumnarStorage")
    def destination_gcs_output_format_parquet_columnar_storage(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatParquetColumnarStorage']:
        return pulumi.get(self, "destination_gcs_output_format_parquet_columnar_storage")

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatAvroApacheAvro")
    def destination_gcs_update_output_format_avro_apache_avro(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvro']:
        return pulumi.get(self, "destination_gcs_update_output_format_avro_apache_avro")

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatCsvCommaSeparatedValues")
    def destination_gcs_update_output_format_csv_comma_separated_values(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValues']:
        return pulumi.get(self, "destination_gcs_update_output_format_csv_comma_separated_values")

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJson")
    def destination_gcs_update_output_format_json_lines_newline_delimited_json(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJson']:
        return pulumi.get(self, "destination_gcs_update_output_format_json_lines_newline_delimited_json")

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatParquetColumnarStorage")
    def destination_gcs_update_output_format_parquet_columnar_storage(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatParquetColumnarStorage']:
        return pulumi.get(self, "destination_gcs_update_output_format_parquet_columnar_storage")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvro(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionCodec":
            suggest = "compression_codec"
        elif key == "formatType":
            suggest = "format_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvro. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvro.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvro.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compression_codec: 'outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodec',
                 format_type: str):
        pulumi.set(__self__, "compression_codec", compression_codec)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> 'outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodec':
        return pulumi.get(self, "compression_codec")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2":
            suggest = "destination_gcs_output_format_avro_apache_avro_compression_codec_bzip2"
        elif key == "destinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate":
            suggest = "destination_gcs_output_format_avro_apache_avro_compression_codec_deflate"
        elif key == "destinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression":
            suggest = "destination_gcs_output_format_avro_apache_avro_compression_codec_no_compression"
        elif key == "destinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy":
            suggest = "destination_gcs_output_format_avro_apache_avro_compression_codec_snappy"
        elif key == "destinationGcsOutputFormatAvroApacheAvroCompressionCodecXz":
            suggest = "destination_gcs_output_format_avro_apache_avro_compression_codec_xz"
        elif key == "destinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard":
            suggest = "destination_gcs_output_format_avro_apache_avro_compression_codec_zstandard"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_gcs_output_format_avro_apache_avro_compression_codec_bzip2: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2'] = None,
                 destination_gcs_output_format_avro_apache_avro_compression_codec_deflate: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate'] = None,
                 destination_gcs_output_format_avro_apache_avro_compression_codec_no_compression: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression'] = None,
                 destination_gcs_output_format_avro_apache_avro_compression_codec_snappy: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy'] = None,
                 destination_gcs_output_format_avro_apache_avro_compression_codec_xz: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz'] = None,
                 destination_gcs_output_format_avro_apache_avro_compression_codec_zstandard: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard'] = None):
        if destination_gcs_output_format_avro_apache_avro_compression_codec_bzip2 is not None:
            pulumi.set(__self__, "destination_gcs_output_format_avro_apache_avro_compression_codec_bzip2", destination_gcs_output_format_avro_apache_avro_compression_codec_bzip2)
        if destination_gcs_output_format_avro_apache_avro_compression_codec_deflate is not None:
            pulumi.set(__self__, "destination_gcs_output_format_avro_apache_avro_compression_codec_deflate", destination_gcs_output_format_avro_apache_avro_compression_codec_deflate)
        if destination_gcs_output_format_avro_apache_avro_compression_codec_no_compression is not None:
            pulumi.set(__self__, "destination_gcs_output_format_avro_apache_avro_compression_codec_no_compression", destination_gcs_output_format_avro_apache_avro_compression_codec_no_compression)
        if destination_gcs_output_format_avro_apache_avro_compression_codec_snappy is not None:
            pulumi.set(__self__, "destination_gcs_output_format_avro_apache_avro_compression_codec_snappy", destination_gcs_output_format_avro_apache_avro_compression_codec_snappy)
        if destination_gcs_output_format_avro_apache_avro_compression_codec_xz is not None:
            pulumi.set(__self__, "destination_gcs_output_format_avro_apache_avro_compression_codec_xz", destination_gcs_output_format_avro_apache_avro_compression_codec_xz)
        if destination_gcs_output_format_avro_apache_avro_compression_codec_zstandard is not None:
            pulumi.set(__self__, "destination_gcs_output_format_avro_apache_avro_compression_codec_zstandard", destination_gcs_output_format_avro_apache_avro_compression_codec_zstandard)

    @property
    @pulumi.getter(name="destinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2")
    def destination_gcs_output_format_avro_apache_avro_compression_codec_bzip2(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2']:
        return pulumi.get(self, "destination_gcs_output_format_avro_apache_avro_compression_codec_bzip2")

    @property
    @pulumi.getter(name="destinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate")
    def destination_gcs_output_format_avro_apache_avro_compression_codec_deflate(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate']:
        return pulumi.get(self, "destination_gcs_output_format_avro_apache_avro_compression_codec_deflate")

    @property
    @pulumi.getter(name="destinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression")
    def destination_gcs_output_format_avro_apache_avro_compression_codec_no_compression(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression']:
        return pulumi.get(self, "destination_gcs_output_format_avro_apache_avro_compression_codec_no_compression")

    @property
    @pulumi.getter(name="destinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy")
    def destination_gcs_output_format_avro_apache_avro_compression_codec_snappy(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy']:
        return pulumi.get(self, "destination_gcs_output_format_avro_apache_avro_compression_codec_snappy")

    @property
    @pulumi.getter(name="destinationGcsOutputFormatAvroApacheAvroCompressionCodecXz")
    def destination_gcs_output_format_avro_apache_avro_compression_codec_xz(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz']:
        return pulumi.get(self, "destination_gcs_output_format_avro_apache_avro_compression_codec_xz")

    @property
    @pulumi.getter(name="destinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard")
    def destination_gcs_output_format_avro_apache_avro_compression_codec_zstandard(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard']:
        return pulumi.get(self, "destination_gcs_output_format_avro_apache_avro_compression_codec_zstandard")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2(dict):
    def __init__(__self__, *,
                 codec: str):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionLevel":
            suggest = "compression_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 codec: str,
                 compression_level: Optional[int] = None):
        pulumi.set(__self__, "codec", codec)
        if compression_level is not None:
            pulumi.set(__self__, "compression_level", compression_level)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> Optional[int]:
        return pulumi.get(self, "compression_level")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression(dict):
    def __init__(__self__, *,
                 codec: str):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy(dict):
    def __init__(__self__, *,
                 codec: str):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionLevel":
            suggest = "compression_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 codec: str,
                 compression_level: Optional[int] = None):
        pulumi.set(__self__, "codec", codec)
        if compression_level is not None:
            pulumi.set(__self__, "compression_level", compression_level)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> Optional[int]:
        return pulumi.get(self, "compression_level")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionLevel":
            suggest = "compression_level"
        elif key == "includeChecksum":
            suggest = "include_checksum"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 codec: str,
                 compression_level: Optional[int] = None,
                 include_checksum: Optional[bool] = None):
        pulumi.set(__self__, "codec", codec)
        if compression_level is not None:
            pulumi.set(__self__, "compression_level", compression_level)
        if include_checksum is not None:
            pulumi.set(__self__, "include_checksum", include_checksum)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> Optional[int]:
        return pulumi.get(self, "compression_level")

    @property
    @pulumi.getter(name="includeChecksum")
    def include_checksum(self) -> Optional[bool]:
        return pulumi.get(self, "include_checksum")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValues(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatType":
            suggest = "format_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValues. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValues.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValues.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format_type: str,
                 compression: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompression'] = None,
                 flattening: Optional[str] = None):
        pulumi.set(__self__, "format_type", format_type)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if flattening is not None:
            pulumi.set(__self__, "flattening", flattening)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter
    def compression(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompression']:
        return pulumi.get(self, "compression")

    @property
    @pulumi.getter
    def flattening(self) -> Optional[str]:
        return pulumi.get(self, "flattening")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompression(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzip":
            suggest = "destination_gcs_output_format_csv_comma_separated_values_compression_gzip"
        elif key == "destinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompression":
            suggest = "destination_gcs_output_format_csv_comma_separated_values_compression_no_compression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompression. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompression.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompression.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_gcs_output_format_csv_comma_separated_values_compression_gzip: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzip'] = None,
                 destination_gcs_output_format_csv_comma_separated_values_compression_no_compression: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompression'] = None):
        if destination_gcs_output_format_csv_comma_separated_values_compression_gzip is not None:
            pulumi.set(__self__, "destination_gcs_output_format_csv_comma_separated_values_compression_gzip", destination_gcs_output_format_csv_comma_separated_values_compression_gzip)
        if destination_gcs_output_format_csv_comma_separated_values_compression_no_compression is not None:
            pulumi.set(__self__, "destination_gcs_output_format_csv_comma_separated_values_compression_no_compression", destination_gcs_output_format_csv_comma_separated_values_compression_no_compression)

    @property
    @pulumi.getter(name="destinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzip")
    def destination_gcs_output_format_csv_comma_separated_values_compression_gzip(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzip']:
        return pulumi.get(self, "destination_gcs_output_format_csv_comma_separated_values_compression_gzip")

    @property
    @pulumi.getter(name="destinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompression")
    def destination_gcs_output_format_csv_comma_separated_values_compression_no_compression(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompression']:
        return pulumi.get(self, "destination_gcs_output_format_csv_comma_separated_values_compression_no_compression")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionType":
            suggest = "compression_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compression_type: Optional[str] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompression(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionType":
            suggest = "compression_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompression. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompression.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompression.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compression_type: Optional[str] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJson(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatType":
            suggest = "format_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJson. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJson.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJson.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format_type: str,
                 compression: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompression'] = None):
        pulumi.set(__self__, "format_type", format_type)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter
    def compression(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompression']:
        return pulumi.get(self, "compression")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompression(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip":
            suggest = "destination_gcs_output_format_json_lines_newline_delimited_json_compression_gzip"
        elif key == "destinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression":
            suggest = "destination_gcs_output_format_json_lines_newline_delimited_json_compression_no_compression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompression. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompression.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompression.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_gcs_output_format_json_lines_newline_delimited_json_compression_gzip: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip'] = None,
                 destination_gcs_output_format_json_lines_newline_delimited_json_compression_no_compression: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression'] = None):
        if destination_gcs_output_format_json_lines_newline_delimited_json_compression_gzip is not None:
            pulumi.set(__self__, "destination_gcs_output_format_json_lines_newline_delimited_json_compression_gzip", destination_gcs_output_format_json_lines_newline_delimited_json_compression_gzip)
        if destination_gcs_output_format_json_lines_newline_delimited_json_compression_no_compression is not None:
            pulumi.set(__self__, "destination_gcs_output_format_json_lines_newline_delimited_json_compression_no_compression", destination_gcs_output_format_json_lines_newline_delimited_json_compression_no_compression)

    @property
    @pulumi.getter(name="destinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip")
    def destination_gcs_output_format_json_lines_newline_delimited_json_compression_gzip(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip']:
        return pulumi.get(self, "destination_gcs_output_format_json_lines_newline_delimited_json_compression_gzip")

    @property
    @pulumi.getter(name="destinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression")
    def destination_gcs_output_format_json_lines_newline_delimited_json_compression_no_compression(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression']:
        return pulumi.get(self, "destination_gcs_output_format_json_lines_newline_delimited_json_compression_no_compression")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionType":
            suggest = "compression_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compression_type: Optional[str] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionType":
            suggest = "compression_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compression_type: Optional[str] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatParquetColumnarStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatType":
            suggest = "format_type"
        elif key == "blockSizeMb":
            suggest = "block_size_mb"
        elif key == "compressionCodec":
            suggest = "compression_codec"
        elif key == "dictionaryEncoding":
            suggest = "dictionary_encoding"
        elif key == "dictionaryPageSizeKb":
            suggest = "dictionary_page_size_kb"
        elif key == "maxPaddingSizeMb":
            suggest = "max_padding_size_mb"
        elif key == "pageSizeKb":
            suggest = "page_size_kb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationFormatDestinationGcsOutputFormatParquetColumnarStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsOutputFormatParquetColumnarStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsOutputFormatParquetColumnarStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format_type: str,
                 block_size_mb: Optional[int] = None,
                 compression_codec: Optional[str] = None,
                 dictionary_encoding: Optional[bool] = None,
                 dictionary_page_size_kb: Optional[int] = None,
                 max_padding_size_mb: Optional[int] = None,
                 page_size_kb: Optional[int] = None):
        pulumi.set(__self__, "format_type", format_type)
        if block_size_mb is not None:
            pulumi.set(__self__, "block_size_mb", block_size_mb)
        if compression_codec is not None:
            pulumi.set(__self__, "compression_codec", compression_codec)
        if dictionary_encoding is not None:
            pulumi.set(__self__, "dictionary_encoding", dictionary_encoding)
        if dictionary_page_size_kb is not None:
            pulumi.set(__self__, "dictionary_page_size_kb", dictionary_page_size_kb)
        if max_padding_size_mb is not None:
            pulumi.set(__self__, "max_padding_size_mb", max_padding_size_mb)
        if page_size_kb is not None:
            pulumi.set(__self__, "page_size_kb", page_size_kb)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter(name="blockSizeMb")
    def block_size_mb(self) -> Optional[int]:
        return pulumi.get(self, "block_size_mb")

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> Optional[str]:
        return pulumi.get(self, "compression_codec")

    @property
    @pulumi.getter(name="dictionaryEncoding")
    def dictionary_encoding(self) -> Optional[bool]:
        return pulumi.get(self, "dictionary_encoding")

    @property
    @pulumi.getter(name="dictionaryPageSizeKb")
    def dictionary_page_size_kb(self) -> Optional[int]:
        return pulumi.get(self, "dictionary_page_size_kb")

    @property
    @pulumi.getter(name="maxPaddingSizeMb")
    def max_padding_size_mb(self) -> Optional[int]:
        return pulumi.get(self, "max_padding_size_mb")

    @property
    @pulumi.getter(name="pageSizeKb")
    def page_size_kb(self) -> Optional[int]:
        return pulumi.get(self, "page_size_kb")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvro(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionCodec":
            suggest = "compression_codec"
        elif key == "formatType":
            suggest = "format_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvro. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvro.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvro.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compression_codec: 'outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodec',
                 format_type: str):
        pulumi.set(__self__, "compression_codec", compression_codec)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> 'outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodec':
        return pulumi.get(self, "compression_codec")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecBzip2":
            suggest = "destination_gcs_update_output_format_avro_apache_avro_compression_codec_bzip2"
        elif key == "destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflate":
            suggest = "destination_gcs_update_output_format_avro_apache_avro_compression_codec_deflate"
        elif key == "destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression":
            suggest = "destination_gcs_update_output_format_avro_apache_avro_compression_codec_no_compression"
        elif key == "destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecSnappy":
            suggest = "destination_gcs_update_output_format_avro_apache_avro_compression_codec_snappy"
        elif key == "destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXz":
            suggest = "destination_gcs_update_output_format_avro_apache_avro_compression_codec_xz"
        elif key == "destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandard":
            suggest = "destination_gcs_update_output_format_avro_apache_avro_compression_codec_zstandard"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_gcs_update_output_format_avro_apache_avro_compression_codec_bzip2: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecBzip2'] = None,
                 destination_gcs_update_output_format_avro_apache_avro_compression_codec_deflate: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflate'] = None,
                 destination_gcs_update_output_format_avro_apache_avro_compression_codec_no_compression: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression'] = None,
                 destination_gcs_update_output_format_avro_apache_avro_compression_codec_snappy: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecSnappy'] = None,
                 destination_gcs_update_output_format_avro_apache_avro_compression_codec_xz: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXz'] = None,
                 destination_gcs_update_output_format_avro_apache_avro_compression_codec_zstandard: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandard'] = None):
        if destination_gcs_update_output_format_avro_apache_avro_compression_codec_bzip2 is not None:
            pulumi.set(__self__, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_bzip2", destination_gcs_update_output_format_avro_apache_avro_compression_codec_bzip2)
        if destination_gcs_update_output_format_avro_apache_avro_compression_codec_deflate is not None:
            pulumi.set(__self__, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_deflate", destination_gcs_update_output_format_avro_apache_avro_compression_codec_deflate)
        if destination_gcs_update_output_format_avro_apache_avro_compression_codec_no_compression is not None:
            pulumi.set(__self__, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_no_compression", destination_gcs_update_output_format_avro_apache_avro_compression_codec_no_compression)
        if destination_gcs_update_output_format_avro_apache_avro_compression_codec_snappy is not None:
            pulumi.set(__self__, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_snappy", destination_gcs_update_output_format_avro_apache_avro_compression_codec_snappy)
        if destination_gcs_update_output_format_avro_apache_avro_compression_codec_xz is not None:
            pulumi.set(__self__, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_xz", destination_gcs_update_output_format_avro_apache_avro_compression_codec_xz)
        if destination_gcs_update_output_format_avro_apache_avro_compression_codec_zstandard is not None:
            pulumi.set(__self__, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_zstandard", destination_gcs_update_output_format_avro_apache_avro_compression_codec_zstandard)

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecBzip2")
    def destination_gcs_update_output_format_avro_apache_avro_compression_codec_bzip2(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecBzip2']:
        return pulumi.get(self, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_bzip2")

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflate")
    def destination_gcs_update_output_format_avro_apache_avro_compression_codec_deflate(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflate']:
        return pulumi.get(self, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_deflate")

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression")
    def destination_gcs_update_output_format_avro_apache_avro_compression_codec_no_compression(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression']:
        return pulumi.get(self, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_no_compression")

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecSnappy")
    def destination_gcs_update_output_format_avro_apache_avro_compression_codec_snappy(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecSnappy']:
        return pulumi.get(self, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_snappy")

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXz")
    def destination_gcs_update_output_format_avro_apache_avro_compression_codec_xz(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXz']:
        return pulumi.get(self, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_xz")

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandard")
    def destination_gcs_update_output_format_avro_apache_avro_compression_codec_zstandard(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandard']:
        return pulumi.get(self, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_zstandard")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecBzip2(dict):
    def __init__(__self__, *,
                 codec: str):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionLevel":
            suggest = "compression_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 codec: str,
                 compression_level: Optional[int] = None):
        pulumi.set(__self__, "codec", codec)
        if compression_level is not None:
            pulumi.set(__self__, "compression_level", compression_level)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> Optional[int]:
        return pulumi.get(self, "compression_level")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression(dict):
    def __init__(__self__, *,
                 codec: str):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecSnappy(dict):
    def __init__(__self__, *,
                 codec: str):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXz(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionLevel":
            suggest = "compression_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXz. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXz.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXz.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 codec: str,
                 compression_level: Optional[int] = None):
        pulumi.set(__self__, "codec", codec)
        if compression_level is not None:
            pulumi.set(__self__, "compression_level", compression_level)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> Optional[int]:
        return pulumi.get(self, "compression_level")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionLevel":
            suggest = "compression_level"
        elif key == "includeChecksum":
            suggest = "include_checksum"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 codec: str,
                 compression_level: Optional[int] = None,
                 include_checksum: Optional[bool] = None):
        pulumi.set(__self__, "codec", codec)
        if compression_level is not None:
            pulumi.set(__self__, "compression_level", compression_level)
        if include_checksum is not None:
            pulumi.set(__self__, "include_checksum", include_checksum)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> Optional[int]:
        return pulumi.get(self, "compression_level")

    @property
    @pulumi.getter(name="includeChecksum")
    def include_checksum(self) -> Optional[bool]:
        return pulumi.get(self, "include_checksum")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValues(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatType":
            suggest = "format_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValues. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValues.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValues.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format_type: str,
                 compression: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompression'] = None,
                 flattening: Optional[str] = None):
        pulumi.set(__self__, "format_type", format_type)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if flattening is not None:
            pulumi.set(__self__, "flattening", flattening)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter
    def compression(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompression']:
        return pulumi.get(self, "compression")

    @property
    @pulumi.getter
    def flattening(self) -> Optional[str]:
        return pulumi.get(self, "flattening")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompression(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip":
            suggest = "destination_gcs_update_output_format_csv_comma_separated_values_compression_gzip"
        elif key == "destinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression":
            suggest = "destination_gcs_update_output_format_csv_comma_separated_values_compression_no_compression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompression. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompression.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompression.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_gcs_update_output_format_csv_comma_separated_values_compression_gzip: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip'] = None,
                 destination_gcs_update_output_format_csv_comma_separated_values_compression_no_compression: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression'] = None):
        if destination_gcs_update_output_format_csv_comma_separated_values_compression_gzip is not None:
            pulumi.set(__self__, "destination_gcs_update_output_format_csv_comma_separated_values_compression_gzip", destination_gcs_update_output_format_csv_comma_separated_values_compression_gzip)
        if destination_gcs_update_output_format_csv_comma_separated_values_compression_no_compression is not None:
            pulumi.set(__self__, "destination_gcs_update_output_format_csv_comma_separated_values_compression_no_compression", destination_gcs_update_output_format_csv_comma_separated_values_compression_no_compression)

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip")
    def destination_gcs_update_output_format_csv_comma_separated_values_compression_gzip(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip']:
        return pulumi.get(self, "destination_gcs_update_output_format_csv_comma_separated_values_compression_gzip")

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression")
    def destination_gcs_update_output_format_csv_comma_separated_values_compression_no_compression(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression']:
        return pulumi.get(self, "destination_gcs_update_output_format_csv_comma_separated_values_compression_no_compression")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionType":
            suggest = "compression_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compression_type: Optional[str] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionType":
            suggest = "compression_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compression_type: Optional[str] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJson(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatType":
            suggest = "format_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJson. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJson.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJson.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format_type: str,
                 compression: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression'] = None):
        pulumi.set(__self__, "format_type", format_type)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter
    def compression(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression']:
        return pulumi.get(self, "compression")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip":
            suggest = "destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_gzip"
        elif key == "destinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression":
            suggest = "destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_no_compression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_gzip: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip'] = None,
                 destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_no_compression: Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression'] = None):
        if destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_gzip is not None:
            pulumi.set(__self__, "destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_gzip", destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_gzip)
        if destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_no_compression is not None:
            pulumi.set(__self__, "destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_no_compression", destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_no_compression)

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip")
    def destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_gzip(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip']:
        return pulumi.get(self, "destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_gzip")

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression")
    def destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_no_compression(self) -> Optional['outputs.DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression']:
        return pulumi.get(self, "destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_no_compression")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionType":
            suggest = "compression_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compression_type: Optional[str] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionType":
            suggest = "compression_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compression_type: Optional[str] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatParquetColumnarStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatType":
            suggest = "format_type"
        elif key == "blockSizeMb":
            suggest = "block_size_mb"
        elif key == "compressionCodec":
            suggest = "compression_codec"
        elif key == "dictionaryEncoding":
            suggest = "dictionary_encoding"
        elif key == "dictionaryPageSizeKb":
            suggest = "dictionary_page_size_kb"
        elif key == "maxPaddingSizeMb":
            suggest = "max_padding_size_mb"
        elif key == "pageSizeKb":
            suggest = "page_size_kb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatParquetColumnarStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatParquetColumnarStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatParquetColumnarStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format_type: str,
                 block_size_mb: Optional[int] = None,
                 compression_codec: Optional[str] = None,
                 dictionary_encoding: Optional[bool] = None,
                 dictionary_page_size_kb: Optional[int] = None,
                 max_padding_size_mb: Optional[int] = None,
                 page_size_kb: Optional[int] = None):
        pulumi.set(__self__, "format_type", format_type)
        if block_size_mb is not None:
            pulumi.set(__self__, "block_size_mb", block_size_mb)
        if compression_codec is not None:
            pulumi.set(__self__, "compression_codec", compression_codec)
        if dictionary_encoding is not None:
            pulumi.set(__self__, "dictionary_encoding", dictionary_encoding)
        if dictionary_page_size_kb is not None:
            pulumi.set(__self__, "dictionary_page_size_kb", dictionary_page_size_kb)
        if max_padding_size_mb is not None:
            pulumi.set(__self__, "max_padding_size_mb", max_padding_size_mb)
        if page_size_kb is not None:
            pulumi.set(__self__, "page_size_kb", page_size_kb)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter(name="blockSizeMb")
    def block_size_mb(self) -> Optional[int]:
        return pulumi.get(self, "block_size_mb")

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> Optional[str]:
        return pulumi.get(self, "compression_codec")

    @property
    @pulumi.getter(name="dictionaryEncoding")
    def dictionary_encoding(self) -> Optional[bool]:
        return pulumi.get(self, "dictionary_encoding")

    @property
    @pulumi.getter(name="dictionaryPageSizeKb")
    def dictionary_page_size_kb(self) -> Optional[int]:
        return pulumi.get(self, "dictionary_page_size_kb")

    @property
    @pulumi.getter(name="maxPaddingSizeMb")
    def max_padding_size_mb(self) -> Optional[int]:
        return pulumi.get(self, "max_padding_size_mb")

    @property
    @pulumi.getter(name="pageSizeKb")
    def page_size_kb(self) -> Optional[int]:
        return pulumi.get(self, "page_size_kb")


@pulumi.output_type
class DestinationGoogleSheetsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "spreadsheetId":
            suggest = "spreadsheet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGoogleSheetsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGoogleSheetsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGoogleSheetsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials: 'outputs.DestinationGoogleSheetsConfigurationCredentials',
                 destination_type: str,
                 spreadsheet_id: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "spreadsheet_id", spreadsheet_id)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.DestinationGoogleSheetsConfigurationCredentials':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="spreadsheetId")
    def spreadsheet_id(self) -> str:
        return pulumi.get(self, "spreadsheet_id")


@pulumi.output_type
class DestinationGoogleSheetsConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationGoogleSheetsConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationGoogleSheetsConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationGoogleSheetsConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class DestinationKeenConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "destinationType":
            suggest = "destination_type"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "inferTimestamp":
            suggest = "infer_timestamp"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationKeenConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationKeenConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationKeenConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 destination_type: str,
                 project_id: str,
                 infer_timestamp: Optional[bool] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "project_id", project_id)
        if infer_timestamp is not None:
            pulumi.set(__self__, "infer_timestamp", infer_timestamp)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="inferTimestamp")
    def infer_timestamp(self) -> Optional[bool]:
        return pulumi.get(self, "infer_timestamp")


@pulumi.output_type
class DestinationKinesisConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "bufferSize":
            suggest = "buffer_size"
        elif key == "destinationType":
            suggest = "destination_type"
        elif key == "privateKey":
            suggest = "private_key"
        elif key == "shardCount":
            suggest = "shard_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationKinesisConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationKinesisConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationKinesisConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key: str,
                 buffer_size: int,
                 destination_type: str,
                 endpoint: str,
                 private_key: str,
                 region: str,
                 shard_count: int):
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "buffer_size", buffer_size)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "private_key", private_key)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "shard_count", shard_count)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="bufferSize")
    def buffer_size(self) -> int:
        return pulumi.get(self, "buffer_size")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> str:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="shardCount")
    def shard_count(self) -> int:
        return pulumi.get(self, "shard_count")


@pulumi.output_type
class DestinationLangchainConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationLangchainConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationLangchainConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationLangchainConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_type: str,
                 embedding: 'outputs.DestinationLangchainConfigurationEmbedding',
                 indexing: 'outputs.DestinationLangchainConfigurationIndexing',
                 processing: 'outputs.DestinationLangchainConfigurationProcessing'):
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "embedding", embedding)
        pulumi.set(__self__, "indexing", indexing)
        pulumi.set(__self__, "processing", processing)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def embedding(self) -> 'outputs.DestinationLangchainConfigurationEmbedding':
        return pulumi.get(self, "embedding")

    @property
    @pulumi.getter
    def indexing(self) -> 'outputs.DestinationLangchainConfigurationIndexing':
        return pulumi.get(self, "indexing")

    @property
    @pulumi.getter
    def processing(self) -> 'outputs.DestinationLangchainConfigurationProcessing':
        return pulumi.get(self, "processing")


@pulumi.output_type
class DestinationLangchainConfigurationEmbedding(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationLangchainEmbeddingFake":
            suggest = "destination_langchain_embedding_fake"
        elif key == "destinationLangchainEmbeddingOpenAi":
            suggest = "destination_langchain_embedding_open_ai"
        elif key == "destinationLangchainUpdateEmbeddingFake":
            suggest = "destination_langchain_update_embedding_fake"
        elif key == "destinationLangchainUpdateEmbeddingOpenAi":
            suggest = "destination_langchain_update_embedding_open_ai"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationLangchainConfigurationEmbedding. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationLangchainConfigurationEmbedding.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationLangchainConfigurationEmbedding.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_langchain_embedding_fake: Optional['outputs.DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingFake'] = None,
                 destination_langchain_embedding_open_ai: Optional['outputs.DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingOpenAi'] = None,
                 destination_langchain_update_embedding_fake: Optional['outputs.DestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingFake'] = None,
                 destination_langchain_update_embedding_open_ai: Optional['outputs.DestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingOpenAi'] = None):
        if destination_langchain_embedding_fake is not None:
            pulumi.set(__self__, "destination_langchain_embedding_fake", destination_langchain_embedding_fake)
        if destination_langchain_embedding_open_ai is not None:
            pulumi.set(__self__, "destination_langchain_embedding_open_ai", destination_langchain_embedding_open_ai)
        if destination_langchain_update_embedding_fake is not None:
            pulumi.set(__self__, "destination_langchain_update_embedding_fake", destination_langchain_update_embedding_fake)
        if destination_langchain_update_embedding_open_ai is not None:
            pulumi.set(__self__, "destination_langchain_update_embedding_open_ai", destination_langchain_update_embedding_open_ai)

    @property
    @pulumi.getter(name="destinationLangchainEmbeddingFake")
    def destination_langchain_embedding_fake(self) -> Optional['outputs.DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingFake']:
        return pulumi.get(self, "destination_langchain_embedding_fake")

    @property
    @pulumi.getter(name="destinationLangchainEmbeddingOpenAi")
    def destination_langchain_embedding_open_ai(self) -> Optional['outputs.DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingOpenAi']:
        return pulumi.get(self, "destination_langchain_embedding_open_ai")

    @property
    @pulumi.getter(name="destinationLangchainUpdateEmbeddingFake")
    def destination_langchain_update_embedding_fake(self) -> Optional['outputs.DestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingFake']:
        return pulumi.get(self, "destination_langchain_update_embedding_fake")

    @property
    @pulumi.getter(name="destinationLangchainUpdateEmbeddingOpenAi")
    def destination_langchain_update_embedding_open_ai(self) -> Optional['outputs.DestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingOpenAi']:
        return pulumi.get(self, "destination_langchain_update_embedding_open_ai")


@pulumi.output_type
class DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingFake(dict):
    def __init__(__self__, *,
                 mode: Optional[str] = None):
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingOpenAi(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "openaiKey":
            suggest = "openai_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingOpenAi. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingOpenAi.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingOpenAi.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 openai_key: str,
                 mode: Optional[str] = None):
        pulumi.set(__self__, "openai_key", openai_key)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="openaiKey")
    def openai_key(self) -> str:
        return pulumi.get(self, "openai_key")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class DestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingFake(dict):
    def __init__(__self__, *,
                 mode: Optional[str] = None):
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class DestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingOpenAi(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "openaiKey":
            suggest = "openai_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingOpenAi. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingOpenAi.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingOpenAi.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 openai_key: str,
                 mode: Optional[str] = None):
        pulumi.set(__self__, "openai_key", openai_key)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="openaiKey")
    def openai_key(self) -> str:
        return pulumi.get(self, "openai_key")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class DestinationLangchainConfigurationIndexing(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationLangchainIndexingChromaLocalPersistance":
            suggest = "destination_langchain_indexing_chroma_local_persistance"
        elif key == "destinationLangchainIndexingDocArrayHnswSearch":
            suggest = "destination_langchain_indexing_doc_array_hnsw_search"
        elif key == "destinationLangchainIndexingPinecone":
            suggest = "destination_langchain_indexing_pinecone"
        elif key == "destinationLangchainUpdateIndexingChromaLocalPersistance":
            suggest = "destination_langchain_update_indexing_chroma_local_persistance"
        elif key == "destinationLangchainUpdateIndexingDocArrayHnswSearch":
            suggest = "destination_langchain_update_indexing_doc_array_hnsw_search"
        elif key == "destinationLangchainUpdateIndexingPinecone":
            suggest = "destination_langchain_update_indexing_pinecone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationLangchainConfigurationIndexing. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationLangchainConfigurationIndexing.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationLangchainConfigurationIndexing.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_langchain_indexing_chroma_local_persistance: Optional['outputs.DestinationLangchainConfigurationIndexingDestinationLangchainIndexingChromaLocalPersistance'] = None,
                 destination_langchain_indexing_doc_array_hnsw_search: Optional['outputs.DestinationLangchainConfigurationIndexingDestinationLangchainIndexingDocArrayHnswSearch'] = None,
                 destination_langchain_indexing_pinecone: Optional['outputs.DestinationLangchainConfigurationIndexingDestinationLangchainIndexingPinecone'] = None,
                 destination_langchain_update_indexing_chroma_local_persistance: Optional['outputs.DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingChromaLocalPersistance'] = None,
                 destination_langchain_update_indexing_doc_array_hnsw_search: Optional['outputs.DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingDocArrayHnswSearch'] = None,
                 destination_langchain_update_indexing_pinecone: Optional['outputs.DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingPinecone'] = None):
        if destination_langchain_indexing_chroma_local_persistance is not None:
            pulumi.set(__self__, "destination_langchain_indexing_chroma_local_persistance", destination_langchain_indexing_chroma_local_persistance)
        if destination_langchain_indexing_doc_array_hnsw_search is not None:
            pulumi.set(__self__, "destination_langchain_indexing_doc_array_hnsw_search", destination_langchain_indexing_doc_array_hnsw_search)
        if destination_langchain_indexing_pinecone is not None:
            pulumi.set(__self__, "destination_langchain_indexing_pinecone", destination_langchain_indexing_pinecone)
        if destination_langchain_update_indexing_chroma_local_persistance is not None:
            pulumi.set(__self__, "destination_langchain_update_indexing_chroma_local_persistance", destination_langchain_update_indexing_chroma_local_persistance)
        if destination_langchain_update_indexing_doc_array_hnsw_search is not None:
            pulumi.set(__self__, "destination_langchain_update_indexing_doc_array_hnsw_search", destination_langchain_update_indexing_doc_array_hnsw_search)
        if destination_langchain_update_indexing_pinecone is not None:
            pulumi.set(__self__, "destination_langchain_update_indexing_pinecone", destination_langchain_update_indexing_pinecone)

    @property
    @pulumi.getter(name="destinationLangchainIndexingChromaLocalPersistance")
    def destination_langchain_indexing_chroma_local_persistance(self) -> Optional['outputs.DestinationLangchainConfigurationIndexingDestinationLangchainIndexingChromaLocalPersistance']:
        return pulumi.get(self, "destination_langchain_indexing_chroma_local_persistance")

    @property
    @pulumi.getter(name="destinationLangchainIndexingDocArrayHnswSearch")
    def destination_langchain_indexing_doc_array_hnsw_search(self) -> Optional['outputs.DestinationLangchainConfigurationIndexingDestinationLangchainIndexingDocArrayHnswSearch']:
        return pulumi.get(self, "destination_langchain_indexing_doc_array_hnsw_search")

    @property
    @pulumi.getter(name="destinationLangchainIndexingPinecone")
    def destination_langchain_indexing_pinecone(self) -> Optional['outputs.DestinationLangchainConfigurationIndexingDestinationLangchainIndexingPinecone']:
        return pulumi.get(self, "destination_langchain_indexing_pinecone")

    @property
    @pulumi.getter(name="destinationLangchainUpdateIndexingChromaLocalPersistance")
    def destination_langchain_update_indexing_chroma_local_persistance(self) -> Optional['outputs.DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingChromaLocalPersistance']:
        return pulumi.get(self, "destination_langchain_update_indexing_chroma_local_persistance")

    @property
    @pulumi.getter(name="destinationLangchainUpdateIndexingDocArrayHnswSearch")
    def destination_langchain_update_indexing_doc_array_hnsw_search(self) -> Optional['outputs.DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingDocArrayHnswSearch']:
        return pulumi.get(self, "destination_langchain_update_indexing_doc_array_hnsw_search")

    @property
    @pulumi.getter(name="destinationLangchainUpdateIndexingPinecone")
    def destination_langchain_update_indexing_pinecone(self) -> Optional['outputs.DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingPinecone']:
        return pulumi.get(self, "destination_langchain_update_indexing_pinecone")


@pulumi.output_type
class DestinationLangchainConfigurationIndexingDestinationLangchainIndexingChromaLocalPersistance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationPath":
            suggest = "destination_path"
        elif key == "collectionName":
            suggest = "collection_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationLangchainConfigurationIndexingDestinationLangchainIndexingChromaLocalPersistance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationLangchainConfigurationIndexingDestinationLangchainIndexingChromaLocalPersistance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationLangchainConfigurationIndexingDestinationLangchainIndexingChromaLocalPersistance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_path: str,
                 collection_name: Optional[str] = None,
                 mode: Optional[str] = None):
        pulumi.set(__self__, "destination_path", destination_path)
        if collection_name is not None:
            pulumi.set(__self__, "collection_name", collection_name)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> str:
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="collectionName")
    def collection_name(self) -> Optional[str]:
        return pulumi.get(self, "collection_name")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class DestinationLangchainConfigurationIndexingDestinationLangchainIndexingDocArrayHnswSearch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationPath":
            suggest = "destination_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationLangchainConfigurationIndexingDestinationLangchainIndexingDocArrayHnswSearch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationLangchainConfigurationIndexingDestinationLangchainIndexingDocArrayHnswSearch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationLangchainConfigurationIndexingDestinationLangchainIndexingDocArrayHnswSearch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_path: str,
                 mode: Optional[str] = None):
        pulumi.set(__self__, "destination_path", destination_path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> str:
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class DestinationLangchainConfigurationIndexingDestinationLangchainIndexingPinecone(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pineconeEnvironment":
            suggest = "pinecone_environment"
        elif key == "pineconeKey":
            suggest = "pinecone_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationLangchainConfigurationIndexingDestinationLangchainIndexingPinecone. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationLangchainConfigurationIndexingDestinationLangchainIndexingPinecone.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationLangchainConfigurationIndexingDestinationLangchainIndexingPinecone.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 pinecone_environment: str,
                 pinecone_key: str,
                 mode: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "pinecone_environment", pinecone_environment)
        pulumi.set(__self__, "pinecone_key", pinecone_key)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="pineconeEnvironment")
    def pinecone_environment(self) -> str:
        return pulumi.get(self, "pinecone_environment")

    @property
    @pulumi.getter(name="pineconeKey")
    def pinecone_key(self) -> str:
        return pulumi.get(self, "pinecone_key")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingChromaLocalPersistance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationPath":
            suggest = "destination_path"
        elif key == "collectionName":
            suggest = "collection_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingChromaLocalPersistance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingChromaLocalPersistance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingChromaLocalPersistance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_path: str,
                 collection_name: Optional[str] = None,
                 mode: Optional[str] = None):
        pulumi.set(__self__, "destination_path", destination_path)
        if collection_name is not None:
            pulumi.set(__self__, "collection_name", collection_name)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> str:
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="collectionName")
    def collection_name(self) -> Optional[str]:
        return pulumi.get(self, "collection_name")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingDocArrayHnswSearch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationPath":
            suggest = "destination_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingDocArrayHnswSearch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingDocArrayHnswSearch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingDocArrayHnswSearch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_path: str,
                 mode: Optional[str] = None):
        pulumi.set(__self__, "destination_path", destination_path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> str:
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingPinecone(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pineconeEnvironment":
            suggest = "pinecone_environment"
        elif key == "pineconeKey":
            suggest = "pinecone_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingPinecone. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingPinecone.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingPinecone.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 pinecone_environment: str,
                 pinecone_key: str,
                 mode: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "pinecone_environment", pinecone_environment)
        pulumi.set(__self__, "pinecone_key", pinecone_key)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="pineconeEnvironment")
    def pinecone_environment(self) -> str:
        return pulumi.get(self, "pinecone_environment")

    @property
    @pulumi.getter(name="pineconeKey")
    def pinecone_key(self) -> str:
        return pulumi.get(self, "pinecone_key")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class DestinationLangchainConfigurationProcessing(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "chunkSize":
            suggest = "chunk_size"
        elif key == "textFields":
            suggest = "text_fields"
        elif key == "chunkOverlap":
            suggest = "chunk_overlap"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationLangchainConfigurationProcessing. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationLangchainConfigurationProcessing.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationLangchainConfigurationProcessing.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chunk_size: int,
                 text_fields: Sequence[str],
                 chunk_overlap: Optional[int] = None):
        pulumi.set(__self__, "chunk_size", chunk_size)
        pulumi.set(__self__, "text_fields", text_fields)
        if chunk_overlap is not None:
            pulumi.set(__self__, "chunk_overlap", chunk_overlap)

    @property
    @pulumi.getter(name="chunkSize")
    def chunk_size(self) -> int:
        return pulumi.get(self, "chunk_size")

    @property
    @pulumi.getter(name="textFields")
    def text_fields(self) -> Sequence[str]:
        return pulumi.get(self, "text_fields")

    @property
    @pulumi.getter(name="chunkOverlap")
    def chunk_overlap(self) -> Optional[int]:
        return pulumi.get(self, "chunk_overlap")


@pulumi.output_type
class DestinationMSsqlConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "jdbcUrlParams":
            suggest = "jdbc_url_params"
        elif key == "sslMethod":
            suggest = "ssl_method"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMSsqlConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMSsqlConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMSsqlConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: str,
                 destination_type: str,
                 host: str,
                 port: int,
                 schema: str,
                 username: str,
                 jdbc_url_params: Optional[str] = None,
                 password: Optional[str] = None,
                 ssl_method: Optional['outputs.DestinationMSsqlConfigurationSslMethod'] = None,
                 tunnel_method: Optional['outputs.DestinationMSsqlConfigurationTunnelMethod'] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "username", username)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if ssl_method is not None:
            pulumi.set(__self__, "ssl_method", ssl_method)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[str]:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> Optional['outputs.DestinationMSsqlConfigurationSslMethod']:
        return pulumi.get(self, "ssl_method")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional['outputs.DestinationMSsqlConfigurationTunnelMethod']:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class DestinationMSsqlConfigurationSslMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationMssqlSslMethodEncryptedTrustServerCertificate":
            suggest = "destination_mssql_ssl_method_encrypted_trust_server_certificate"
        elif key == "destinationMssqlSslMethodEncryptedVerifyCertificate":
            suggest = "destination_mssql_ssl_method_encrypted_verify_certificate"
        elif key == "destinationMssqlUpdateSslMethodEncryptedTrustServerCertificate":
            suggest = "destination_mssql_update_ssl_method_encrypted_trust_server_certificate"
        elif key == "destinationMssqlUpdateSslMethodEncryptedVerifyCertificate":
            suggest = "destination_mssql_update_ssl_method_encrypted_verify_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMSsqlConfigurationSslMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMSsqlConfigurationSslMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMSsqlConfigurationSslMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_mssql_ssl_method_encrypted_trust_server_certificate: Optional['outputs.DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedTrustServerCertificate'] = None,
                 destination_mssql_ssl_method_encrypted_verify_certificate: Optional['outputs.DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedVerifyCertificate'] = None,
                 destination_mssql_update_ssl_method_encrypted_trust_server_certificate: Optional['outputs.DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedTrustServerCertificate'] = None,
                 destination_mssql_update_ssl_method_encrypted_verify_certificate: Optional['outputs.DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedVerifyCertificate'] = None):
        if destination_mssql_ssl_method_encrypted_trust_server_certificate is not None:
            pulumi.set(__self__, "destination_mssql_ssl_method_encrypted_trust_server_certificate", destination_mssql_ssl_method_encrypted_trust_server_certificate)
        if destination_mssql_ssl_method_encrypted_verify_certificate is not None:
            pulumi.set(__self__, "destination_mssql_ssl_method_encrypted_verify_certificate", destination_mssql_ssl_method_encrypted_verify_certificate)
        if destination_mssql_update_ssl_method_encrypted_trust_server_certificate is not None:
            pulumi.set(__self__, "destination_mssql_update_ssl_method_encrypted_trust_server_certificate", destination_mssql_update_ssl_method_encrypted_trust_server_certificate)
        if destination_mssql_update_ssl_method_encrypted_verify_certificate is not None:
            pulumi.set(__self__, "destination_mssql_update_ssl_method_encrypted_verify_certificate", destination_mssql_update_ssl_method_encrypted_verify_certificate)

    @property
    @pulumi.getter(name="destinationMssqlSslMethodEncryptedTrustServerCertificate")
    def destination_mssql_ssl_method_encrypted_trust_server_certificate(self) -> Optional['outputs.DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedTrustServerCertificate']:
        return pulumi.get(self, "destination_mssql_ssl_method_encrypted_trust_server_certificate")

    @property
    @pulumi.getter(name="destinationMssqlSslMethodEncryptedVerifyCertificate")
    def destination_mssql_ssl_method_encrypted_verify_certificate(self) -> Optional['outputs.DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedVerifyCertificate']:
        return pulumi.get(self, "destination_mssql_ssl_method_encrypted_verify_certificate")

    @property
    @pulumi.getter(name="destinationMssqlUpdateSslMethodEncryptedTrustServerCertificate")
    def destination_mssql_update_ssl_method_encrypted_trust_server_certificate(self) -> Optional['outputs.DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedTrustServerCertificate']:
        return pulumi.get(self, "destination_mssql_update_ssl_method_encrypted_trust_server_certificate")

    @property
    @pulumi.getter(name="destinationMssqlUpdateSslMethodEncryptedVerifyCertificate")
    def destination_mssql_update_ssl_method_encrypted_verify_certificate(self) -> Optional['outputs.DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedVerifyCertificate']:
        return pulumi.get(self, "destination_mssql_update_ssl_method_encrypted_verify_certificate")


@pulumi.output_type
class DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedTrustServerCertificate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sslMethod":
            suggest = "ssl_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedTrustServerCertificate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedTrustServerCertificate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedTrustServerCertificate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssl_method: str):
        pulumi.set(__self__, "ssl_method", ssl_method)

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> str:
        return pulumi.get(self, "ssl_method")


@pulumi.output_type
class DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedVerifyCertificate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sslMethod":
            suggest = "ssl_method"
        elif key == "hostNameInCertificate":
            suggest = "host_name_in_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedVerifyCertificate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedVerifyCertificate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedVerifyCertificate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssl_method: str,
                 host_name_in_certificate: Optional[str] = None):
        pulumi.set(__self__, "ssl_method", ssl_method)
        if host_name_in_certificate is not None:
            pulumi.set(__self__, "host_name_in_certificate", host_name_in_certificate)

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> str:
        return pulumi.get(self, "ssl_method")

    @property
    @pulumi.getter(name="hostNameInCertificate")
    def host_name_in_certificate(self) -> Optional[str]:
        return pulumi.get(self, "host_name_in_certificate")


@pulumi.output_type
class DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedTrustServerCertificate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sslMethod":
            suggest = "ssl_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedTrustServerCertificate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedTrustServerCertificate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedTrustServerCertificate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssl_method: str):
        pulumi.set(__self__, "ssl_method", ssl_method)

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> str:
        return pulumi.get(self, "ssl_method")


@pulumi.output_type
class DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedVerifyCertificate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sslMethod":
            suggest = "ssl_method"
        elif key == "hostNameInCertificate":
            suggest = "host_name_in_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedVerifyCertificate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedVerifyCertificate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedVerifyCertificate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssl_method: str,
                 host_name_in_certificate: Optional[str] = None):
        pulumi.set(__self__, "ssl_method", ssl_method)
        if host_name_in_certificate is not None:
            pulumi.set(__self__, "host_name_in_certificate", host_name_in_certificate)

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> str:
        return pulumi.get(self, "ssl_method")

    @property
    @pulumi.getter(name="hostNameInCertificate")
    def host_name_in_certificate(self) -> Optional[str]:
        return pulumi.get(self, "host_name_in_certificate")


@pulumi.output_type
class DestinationMSsqlConfigurationTunnelMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationMssqlSshTunnelMethodNoTunnel":
            suggest = "destination_mssql_ssh_tunnel_method_no_tunnel"
        elif key == "destinationMssqlSshTunnelMethodPasswordAuthentication":
            suggest = "destination_mssql_ssh_tunnel_method_password_authentication"
        elif key == "destinationMssqlSshTunnelMethodSshKeyAuthentication":
            suggest = "destination_mssql_ssh_tunnel_method_ssh_key_authentication"
        elif key == "destinationMssqlUpdateSshTunnelMethodNoTunnel":
            suggest = "destination_mssql_update_ssh_tunnel_method_no_tunnel"
        elif key == "destinationMssqlUpdateSshTunnelMethodPasswordAuthentication":
            suggest = "destination_mssql_update_ssh_tunnel_method_password_authentication"
        elif key == "destinationMssqlUpdateSshTunnelMethodSshKeyAuthentication":
            suggest = "destination_mssql_update_ssh_tunnel_method_ssh_key_authentication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMSsqlConfigurationTunnelMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMSsqlConfigurationTunnelMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMSsqlConfigurationTunnelMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_mssql_ssh_tunnel_method_no_tunnel: Optional['outputs.DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodNoTunnel'] = None,
                 destination_mssql_ssh_tunnel_method_password_authentication: Optional['outputs.DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodPasswordAuthentication'] = None,
                 destination_mssql_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodSshKeyAuthentication'] = None,
                 destination_mssql_update_ssh_tunnel_method_no_tunnel: Optional['outputs.DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodNoTunnel'] = None,
                 destination_mssql_update_ssh_tunnel_method_password_authentication: Optional['outputs.DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodPasswordAuthentication'] = None,
                 destination_mssql_update_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodSshKeyAuthentication'] = None):
        if destination_mssql_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_mssql_ssh_tunnel_method_no_tunnel", destination_mssql_ssh_tunnel_method_no_tunnel)
        if destination_mssql_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_mssql_ssh_tunnel_method_password_authentication", destination_mssql_ssh_tunnel_method_password_authentication)
        if destination_mssql_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_mssql_ssh_tunnel_method_ssh_key_authentication", destination_mssql_ssh_tunnel_method_ssh_key_authentication)
        if destination_mssql_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_mssql_update_ssh_tunnel_method_no_tunnel", destination_mssql_update_ssh_tunnel_method_no_tunnel)
        if destination_mssql_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_mssql_update_ssh_tunnel_method_password_authentication", destination_mssql_update_ssh_tunnel_method_password_authentication)
        if destination_mssql_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_mssql_update_ssh_tunnel_method_ssh_key_authentication", destination_mssql_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="destinationMssqlSshTunnelMethodNoTunnel")
    def destination_mssql_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "destination_mssql_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationMssqlSshTunnelMethodPasswordAuthentication")
    def destination_mssql_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "destination_mssql_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationMssqlSshTunnelMethodSshKeyAuthentication")
    def destination_mssql_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "destination_mssql_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="destinationMssqlUpdateSshTunnelMethodNoTunnel")
    def destination_mssql_update_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "destination_mssql_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationMssqlUpdateSshTunnelMethodPasswordAuthentication")
    def destination_mssql_update_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "destination_mssql_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationMssqlUpdateSshTunnelMethodSshKeyAuthentication")
    def destination_mssql_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "destination_mssql_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class DestinationMongodbConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"
        elif key == "destinationType":
            suggest = "destination_type"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMongodbConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMongodbConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMongodbConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_type: 'outputs.DestinationMongodbConfigurationAuthType',
                 database: str,
                 destination_type: str,
                 instance_type: Optional['outputs.DestinationMongodbConfigurationInstanceType'] = None,
                 tunnel_method: Optional['outputs.DestinationMongodbConfigurationTunnelMethod'] = None):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> 'outputs.DestinationMongodbConfigurationAuthType':
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional['outputs.DestinationMongodbConfigurationInstanceType']:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional['outputs.DestinationMongodbConfigurationTunnelMethod']:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class DestinationMongodbConfigurationAuthType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationMongodbAuthorizationTypeLoginPassword":
            suggest = "destination_mongodb_authorization_type_login_password"
        elif key == "destinationMongodbAuthorizationTypeNone":
            suggest = "destination_mongodb_authorization_type_none"
        elif key == "destinationMongodbUpdateAuthorizationTypeLoginPassword":
            suggest = "destination_mongodb_update_authorization_type_login_password"
        elif key == "destinationMongodbUpdateAuthorizationTypeNone":
            suggest = "destination_mongodb_update_authorization_type_none"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMongodbConfigurationAuthType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMongodbConfigurationAuthType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMongodbConfigurationAuthType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_mongodb_authorization_type_login_password: Optional['outputs.DestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeLoginPassword'] = None,
                 destination_mongodb_authorization_type_none: Optional['outputs.DestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeNone'] = None,
                 destination_mongodb_update_authorization_type_login_password: Optional['outputs.DestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeLoginPassword'] = None,
                 destination_mongodb_update_authorization_type_none: Optional['outputs.DestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeNone'] = None):
        if destination_mongodb_authorization_type_login_password is not None:
            pulumi.set(__self__, "destination_mongodb_authorization_type_login_password", destination_mongodb_authorization_type_login_password)
        if destination_mongodb_authorization_type_none is not None:
            pulumi.set(__self__, "destination_mongodb_authorization_type_none", destination_mongodb_authorization_type_none)
        if destination_mongodb_update_authorization_type_login_password is not None:
            pulumi.set(__self__, "destination_mongodb_update_authorization_type_login_password", destination_mongodb_update_authorization_type_login_password)
        if destination_mongodb_update_authorization_type_none is not None:
            pulumi.set(__self__, "destination_mongodb_update_authorization_type_none", destination_mongodb_update_authorization_type_none)

    @property
    @pulumi.getter(name="destinationMongodbAuthorizationTypeLoginPassword")
    def destination_mongodb_authorization_type_login_password(self) -> Optional['outputs.DestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeLoginPassword']:
        return pulumi.get(self, "destination_mongodb_authorization_type_login_password")

    @property
    @pulumi.getter(name="destinationMongodbAuthorizationTypeNone")
    def destination_mongodb_authorization_type_none(self) -> Optional['outputs.DestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeNone']:
        return pulumi.get(self, "destination_mongodb_authorization_type_none")

    @property
    @pulumi.getter(name="destinationMongodbUpdateAuthorizationTypeLoginPassword")
    def destination_mongodb_update_authorization_type_login_password(self) -> Optional['outputs.DestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeLoginPassword']:
        return pulumi.get(self, "destination_mongodb_update_authorization_type_login_password")

    @property
    @pulumi.getter(name="destinationMongodbUpdateAuthorizationTypeNone")
    def destination_mongodb_update_authorization_type_none(self) -> Optional['outputs.DestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeNone']:
        return pulumi.get(self, "destination_mongodb_update_authorization_type_none")


@pulumi.output_type
class DestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeLoginPassword(dict):
    def __init__(__self__, *,
                 authorization: str,
                 password: str,
                 username: str):
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def authorization(self) -> str:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class DestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeNone(dict):
    def __init__(__self__, *,
                 authorization: str):
        pulumi.set(__self__, "authorization", authorization)

    @property
    @pulumi.getter
    def authorization(self) -> str:
        return pulumi.get(self, "authorization")


@pulumi.output_type
class DestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeLoginPassword(dict):
    def __init__(__self__, *,
                 authorization: str,
                 password: str,
                 username: str):
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def authorization(self) -> str:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class DestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeNone(dict):
    def __init__(__self__, *,
                 authorization: str):
        pulumi.set(__self__, "authorization", authorization)

    @property
    @pulumi.getter
    def authorization(self) -> str:
        return pulumi.get(self, "authorization")


@pulumi.output_type
class DestinationMongodbConfigurationInstanceType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationMongodbMongoDbInstanceTypeMongoDbAtlas":
            suggest = "destination_mongodb_mongo_db_instance_type_mongo_db_atlas"
        elif key == "destinationMongodbMongoDbInstanceTypeReplicaSet":
            suggest = "destination_mongodb_mongo_db_instance_type_replica_set"
        elif key == "destinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance":
            suggest = "destination_mongodb_mongo_db_instance_type_standalone_mongo_db_instance"
        elif key == "destinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlas":
            suggest = "destination_mongodb_update_mongo_db_instance_type_mongo_db_atlas"
        elif key == "destinationMongodbUpdateMongoDbInstanceTypeReplicaSet":
            suggest = "destination_mongodb_update_mongo_db_instance_type_replica_set"
        elif key == "destinationMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance":
            suggest = "destination_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMongodbConfigurationInstanceType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMongodbConfigurationInstanceType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMongodbConfigurationInstanceType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_mongodb_mongo_db_instance_type_mongo_db_atlas: Optional['outputs.DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeMongoDbAtlas'] = None,
                 destination_mongodb_mongo_db_instance_type_replica_set: Optional['outputs.DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeReplicaSet'] = None,
                 destination_mongodb_mongo_db_instance_type_standalone_mongo_db_instance: Optional['outputs.DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance'] = None,
                 destination_mongodb_update_mongo_db_instance_type_mongo_db_atlas: Optional['outputs.DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlas'] = None,
                 destination_mongodb_update_mongo_db_instance_type_replica_set: Optional['outputs.DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeReplicaSet'] = None,
                 destination_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance: Optional['outputs.DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance'] = None):
        if destination_mongodb_mongo_db_instance_type_mongo_db_atlas is not None:
            pulumi.set(__self__, "destination_mongodb_mongo_db_instance_type_mongo_db_atlas", destination_mongodb_mongo_db_instance_type_mongo_db_atlas)
        if destination_mongodb_mongo_db_instance_type_replica_set is not None:
            pulumi.set(__self__, "destination_mongodb_mongo_db_instance_type_replica_set", destination_mongodb_mongo_db_instance_type_replica_set)
        if destination_mongodb_mongo_db_instance_type_standalone_mongo_db_instance is not None:
            pulumi.set(__self__, "destination_mongodb_mongo_db_instance_type_standalone_mongo_db_instance", destination_mongodb_mongo_db_instance_type_standalone_mongo_db_instance)
        if destination_mongodb_update_mongo_db_instance_type_mongo_db_atlas is not None:
            pulumi.set(__self__, "destination_mongodb_update_mongo_db_instance_type_mongo_db_atlas", destination_mongodb_update_mongo_db_instance_type_mongo_db_atlas)
        if destination_mongodb_update_mongo_db_instance_type_replica_set is not None:
            pulumi.set(__self__, "destination_mongodb_update_mongo_db_instance_type_replica_set", destination_mongodb_update_mongo_db_instance_type_replica_set)
        if destination_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance is not None:
            pulumi.set(__self__, "destination_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance", destination_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance)

    @property
    @pulumi.getter(name="destinationMongodbMongoDbInstanceTypeMongoDbAtlas")
    def destination_mongodb_mongo_db_instance_type_mongo_db_atlas(self) -> Optional['outputs.DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeMongoDbAtlas']:
        return pulumi.get(self, "destination_mongodb_mongo_db_instance_type_mongo_db_atlas")

    @property
    @pulumi.getter(name="destinationMongodbMongoDbInstanceTypeReplicaSet")
    def destination_mongodb_mongo_db_instance_type_replica_set(self) -> Optional['outputs.DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeReplicaSet']:
        return pulumi.get(self, "destination_mongodb_mongo_db_instance_type_replica_set")

    @property
    @pulumi.getter(name="destinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance")
    def destination_mongodb_mongo_db_instance_type_standalone_mongo_db_instance(self) -> Optional['outputs.DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance']:
        return pulumi.get(self, "destination_mongodb_mongo_db_instance_type_standalone_mongo_db_instance")

    @property
    @pulumi.getter(name="destinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlas")
    def destination_mongodb_update_mongo_db_instance_type_mongo_db_atlas(self) -> Optional['outputs.DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlas']:
        return pulumi.get(self, "destination_mongodb_update_mongo_db_instance_type_mongo_db_atlas")

    @property
    @pulumi.getter(name="destinationMongodbUpdateMongoDbInstanceTypeReplicaSet")
    def destination_mongodb_update_mongo_db_instance_type_replica_set(self) -> Optional['outputs.DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeReplicaSet']:
        return pulumi.get(self, "destination_mongodb_update_mongo_db_instance_type_replica_set")

    @property
    @pulumi.getter(name="destinationMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance")
    def destination_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance(self) -> Optional['outputs.DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance']:
        return pulumi.get(self, "destination_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance")


@pulumi.output_type
class DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeMongoDbAtlas(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterUrl":
            suggest = "cluster_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeMongoDbAtlas. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeMongoDbAtlas.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeMongoDbAtlas.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_url: str,
                 instance: str):
        pulumi.set(__self__, "cluster_url", cluster_url)
        pulumi.set(__self__, "instance", instance)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> str:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter
    def instance(self) -> str:
        return pulumi.get(self, "instance")


@pulumi.output_type
class DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeReplicaSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverAddresses":
            suggest = "server_addresses"
        elif key == "replicaSet":
            suggest = "replica_set"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeReplicaSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeReplicaSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeReplicaSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance: str,
                 server_addresses: str,
                 replica_set: Optional[str] = None):
        pulumi.set(__self__, "instance", instance)
        pulumi.set(__self__, "server_addresses", server_addresses)
        if replica_set is not None:
            pulumi.set(__self__, "replica_set", replica_set)

    @property
    @pulumi.getter
    def instance(self) -> str:
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter(name="serverAddresses")
    def server_addresses(self) -> str:
        return pulumi.get(self, "server_addresses")

    @property
    @pulumi.getter(name="replicaSet")
    def replica_set(self) -> Optional[str]:
        return pulumi.get(self, "replica_set")


@pulumi.output_type
class DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance(dict):
    def __init__(__self__, *,
                 host: str,
                 instance: str,
                 port: int):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "instance", instance)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def instance(self) -> str:
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")


@pulumi.output_type
class DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlas(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterUrl":
            suggest = "cluster_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlas. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlas.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlas.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_url: str,
                 instance: str):
        pulumi.set(__self__, "cluster_url", cluster_url)
        pulumi.set(__self__, "instance", instance)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> str:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter
    def instance(self) -> str:
        return pulumi.get(self, "instance")


@pulumi.output_type
class DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeReplicaSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverAddresses":
            suggest = "server_addresses"
        elif key == "replicaSet":
            suggest = "replica_set"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeReplicaSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeReplicaSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeReplicaSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance: str,
                 server_addresses: str,
                 replica_set: Optional[str] = None):
        pulumi.set(__self__, "instance", instance)
        pulumi.set(__self__, "server_addresses", server_addresses)
        if replica_set is not None:
            pulumi.set(__self__, "replica_set", replica_set)

    @property
    @pulumi.getter
    def instance(self) -> str:
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter(name="serverAddresses")
    def server_addresses(self) -> str:
        return pulumi.get(self, "server_addresses")

    @property
    @pulumi.getter(name="replicaSet")
    def replica_set(self) -> Optional[str]:
        return pulumi.get(self, "replica_set")


@pulumi.output_type
class DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance(dict):
    def __init__(__self__, *,
                 host: str,
                 instance: str,
                 port: int):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "instance", instance)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def instance(self) -> str:
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")


@pulumi.output_type
class DestinationMongodbConfigurationTunnelMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationMongodbSshTunnelMethodNoTunnel":
            suggest = "destination_mongodb_ssh_tunnel_method_no_tunnel"
        elif key == "destinationMongodbSshTunnelMethodPasswordAuthentication":
            suggest = "destination_mongodb_ssh_tunnel_method_password_authentication"
        elif key == "destinationMongodbSshTunnelMethodSshKeyAuthentication":
            suggest = "destination_mongodb_ssh_tunnel_method_ssh_key_authentication"
        elif key == "destinationMongodbUpdateSshTunnelMethodNoTunnel":
            suggest = "destination_mongodb_update_ssh_tunnel_method_no_tunnel"
        elif key == "destinationMongodbUpdateSshTunnelMethodPasswordAuthentication":
            suggest = "destination_mongodb_update_ssh_tunnel_method_password_authentication"
        elif key == "destinationMongodbUpdateSshTunnelMethodSshKeyAuthentication":
            suggest = "destination_mongodb_update_ssh_tunnel_method_ssh_key_authentication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMongodbConfigurationTunnelMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMongodbConfigurationTunnelMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMongodbConfigurationTunnelMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_mongodb_ssh_tunnel_method_no_tunnel: Optional['outputs.DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodNoTunnel'] = None,
                 destination_mongodb_ssh_tunnel_method_password_authentication: Optional['outputs.DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodPasswordAuthentication'] = None,
                 destination_mongodb_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodSshKeyAuthentication'] = None,
                 destination_mongodb_update_ssh_tunnel_method_no_tunnel: Optional['outputs.DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodNoTunnel'] = None,
                 destination_mongodb_update_ssh_tunnel_method_password_authentication: Optional['outputs.DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodPasswordAuthentication'] = None,
                 destination_mongodb_update_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodSshKeyAuthentication'] = None):
        if destination_mongodb_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_mongodb_ssh_tunnel_method_no_tunnel", destination_mongodb_ssh_tunnel_method_no_tunnel)
        if destination_mongodb_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_mongodb_ssh_tunnel_method_password_authentication", destination_mongodb_ssh_tunnel_method_password_authentication)
        if destination_mongodb_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_mongodb_ssh_tunnel_method_ssh_key_authentication", destination_mongodb_ssh_tunnel_method_ssh_key_authentication)
        if destination_mongodb_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_mongodb_update_ssh_tunnel_method_no_tunnel", destination_mongodb_update_ssh_tunnel_method_no_tunnel)
        if destination_mongodb_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_mongodb_update_ssh_tunnel_method_password_authentication", destination_mongodb_update_ssh_tunnel_method_password_authentication)
        if destination_mongodb_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_mongodb_update_ssh_tunnel_method_ssh_key_authentication", destination_mongodb_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="destinationMongodbSshTunnelMethodNoTunnel")
    def destination_mongodb_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "destination_mongodb_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationMongodbSshTunnelMethodPasswordAuthentication")
    def destination_mongodb_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "destination_mongodb_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationMongodbSshTunnelMethodSshKeyAuthentication")
    def destination_mongodb_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "destination_mongodb_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="destinationMongodbUpdateSshTunnelMethodNoTunnel")
    def destination_mongodb_update_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "destination_mongodb_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationMongodbUpdateSshTunnelMethodPasswordAuthentication")
    def destination_mongodb_update_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "destination_mongodb_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationMongodbUpdateSshTunnelMethodSshKeyAuthentication")
    def destination_mongodb_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "destination_mongodb_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class DestinationMysqlConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "jdbcUrlParams":
            suggest = "jdbc_url_params"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMysqlConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMysqlConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMysqlConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: str,
                 destination_type: str,
                 host: str,
                 port: int,
                 username: str,
                 jdbc_url_params: Optional[str] = None,
                 password: Optional[str] = None,
                 tunnel_method: Optional['outputs.DestinationMysqlConfigurationTunnelMethod'] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "username", username)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[str]:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional['outputs.DestinationMysqlConfigurationTunnelMethod']:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class DestinationMysqlConfigurationTunnelMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationMysqlSshTunnelMethodNoTunnel":
            suggest = "destination_mysql_ssh_tunnel_method_no_tunnel"
        elif key == "destinationMysqlSshTunnelMethodPasswordAuthentication":
            suggest = "destination_mysql_ssh_tunnel_method_password_authentication"
        elif key == "destinationMysqlSshTunnelMethodSshKeyAuthentication":
            suggest = "destination_mysql_ssh_tunnel_method_ssh_key_authentication"
        elif key == "destinationMysqlUpdateSshTunnelMethodNoTunnel":
            suggest = "destination_mysql_update_ssh_tunnel_method_no_tunnel"
        elif key == "destinationMysqlUpdateSshTunnelMethodPasswordAuthentication":
            suggest = "destination_mysql_update_ssh_tunnel_method_password_authentication"
        elif key == "destinationMysqlUpdateSshTunnelMethodSshKeyAuthentication":
            suggest = "destination_mysql_update_ssh_tunnel_method_ssh_key_authentication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMysqlConfigurationTunnelMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMysqlConfigurationTunnelMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMysqlConfigurationTunnelMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_mysql_ssh_tunnel_method_no_tunnel: Optional['outputs.DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodNoTunnel'] = None,
                 destination_mysql_ssh_tunnel_method_password_authentication: Optional['outputs.DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodPasswordAuthentication'] = None,
                 destination_mysql_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodSshKeyAuthentication'] = None,
                 destination_mysql_update_ssh_tunnel_method_no_tunnel: Optional['outputs.DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodNoTunnel'] = None,
                 destination_mysql_update_ssh_tunnel_method_password_authentication: Optional['outputs.DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodPasswordAuthentication'] = None,
                 destination_mysql_update_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodSshKeyAuthentication'] = None):
        if destination_mysql_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_mysql_ssh_tunnel_method_no_tunnel", destination_mysql_ssh_tunnel_method_no_tunnel)
        if destination_mysql_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_mysql_ssh_tunnel_method_password_authentication", destination_mysql_ssh_tunnel_method_password_authentication)
        if destination_mysql_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_mysql_ssh_tunnel_method_ssh_key_authentication", destination_mysql_ssh_tunnel_method_ssh_key_authentication)
        if destination_mysql_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_mysql_update_ssh_tunnel_method_no_tunnel", destination_mysql_update_ssh_tunnel_method_no_tunnel)
        if destination_mysql_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_mysql_update_ssh_tunnel_method_password_authentication", destination_mysql_update_ssh_tunnel_method_password_authentication)
        if destination_mysql_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_mysql_update_ssh_tunnel_method_ssh_key_authentication", destination_mysql_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="destinationMysqlSshTunnelMethodNoTunnel")
    def destination_mysql_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "destination_mysql_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationMysqlSshTunnelMethodPasswordAuthentication")
    def destination_mysql_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "destination_mysql_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationMysqlSshTunnelMethodSshKeyAuthentication")
    def destination_mysql_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "destination_mysql_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="destinationMysqlUpdateSshTunnelMethodNoTunnel")
    def destination_mysql_update_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "destination_mysql_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationMysqlUpdateSshTunnelMethodPasswordAuthentication")
    def destination_mysql_update_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "destination_mysql_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationMysqlUpdateSshTunnelMethodSshKeyAuthentication")
    def destination_mysql_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "destination_mysql_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class DestinationOracleConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "jdbcUrlParams":
            suggest = "jdbc_url_params"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationOracleConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationOracleConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationOracleConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_type: str,
                 host: str,
                 port: int,
                 sid: str,
                 username: str,
                 jdbc_url_params: Optional[str] = None,
                 password: Optional[str] = None,
                 schema: Optional[str] = None,
                 tunnel_method: Optional['outputs.DestinationOracleConfigurationTunnelMethod'] = None):
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "sid", sid)
        pulumi.set(__self__, "username", username)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def sid(self) -> str:
        return pulumi.get(self, "sid")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[str]:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional['outputs.DestinationOracleConfigurationTunnelMethod']:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class DestinationOracleConfigurationTunnelMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationOracleSshTunnelMethodNoTunnel":
            suggest = "destination_oracle_ssh_tunnel_method_no_tunnel"
        elif key == "destinationOracleSshTunnelMethodPasswordAuthentication":
            suggest = "destination_oracle_ssh_tunnel_method_password_authentication"
        elif key == "destinationOracleSshTunnelMethodSshKeyAuthentication":
            suggest = "destination_oracle_ssh_tunnel_method_ssh_key_authentication"
        elif key == "destinationOracleUpdateSshTunnelMethodNoTunnel":
            suggest = "destination_oracle_update_ssh_tunnel_method_no_tunnel"
        elif key == "destinationOracleUpdateSshTunnelMethodPasswordAuthentication":
            suggest = "destination_oracle_update_ssh_tunnel_method_password_authentication"
        elif key == "destinationOracleUpdateSshTunnelMethodSshKeyAuthentication":
            suggest = "destination_oracle_update_ssh_tunnel_method_ssh_key_authentication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationOracleConfigurationTunnelMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationOracleConfigurationTunnelMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationOracleConfigurationTunnelMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_oracle_ssh_tunnel_method_no_tunnel: Optional['outputs.DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodNoTunnel'] = None,
                 destination_oracle_ssh_tunnel_method_password_authentication: Optional['outputs.DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodPasswordAuthentication'] = None,
                 destination_oracle_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodSshKeyAuthentication'] = None,
                 destination_oracle_update_ssh_tunnel_method_no_tunnel: Optional['outputs.DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodNoTunnel'] = None,
                 destination_oracle_update_ssh_tunnel_method_password_authentication: Optional['outputs.DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodPasswordAuthentication'] = None,
                 destination_oracle_update_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodSshKeyAuthentication'] = None):
        if destination_oracle_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_oracle_ssh_tunnel_method_no_tunnel", destination_oracle_ssh_tunnel_method_no_tunnel)
        if destination_oracle_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_oracle_ssh_tunnel_method_password_authentication", destination_oracle_ssh_tunnel_method_password_authentication)
        if destination_oracle_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_oracle_ssh_tunnel_method_ssh_key_authentication", destination_oracle_ssh_tunnel_method_ssh_key_authentication)
        if destination_oracle_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_oracle_update_ssh_tunnel_method_no_tunnel", destination_oracle_update_ssh_tunnel_method_no_tunnel)
        if destination_oracle_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_oracle_update_ssh_tunnel_method_password_authentication", destination_oracle_update_ssh_tunnel_method_password_authentication)
        if destination_oracle_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_oracle_update_ssh_tunnel_method_ssh_key_authentication", destination_oracle_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="destinationOracleSshTunnelMethodNoTunnel")
    def destination_oracle_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "destination_oracle_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationOracleSshTunnelMethodPasswordAuthentication")
    def destination_oracle_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "destination_oracle_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationOracleSshTunnelMethodSshKeyAuthentication")
    def destination_oracle_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "destination_oracle_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="destinationOracleUpdateSshTunnelMethodNoTunnel")
    def destination_oracle_update_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "destination_oracle_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationOracleUpdateSshTunnelMethodPasswordAuthentication")
    def destination_oracle_update_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "destination_oracle_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationOracleUpdateSshTunnelMethodSshKeyAuthentication")
    def destination_oracle_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "destination_oracle_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class DestinationPostgresConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "jdbcUrlParams":
            suggest = "jdbc_url_params"
        elif key == "sslMode":
            suggest = "ssl_mode"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationPostgresConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationPostgresConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationPostgresConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: str,
                 destination_type: str,
                 host: str,
                 port: int,
                 schema: str,
                 username: str,
                 jdbc_url_params: Optional[str] = None,
                 password: Optional[str] = None,
                 ssl_mode: Optional['outputs.DestinationPostgresConfigurationSslMode'] = None,
                 tunnel_method: Optional['outputs.DestinationPostgresConfigurationTunnelMethod'] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "username", username)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if ssl_mode is not None:
            pulumi.set(__self__, "ssl_mode", ssl_mode)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[str]:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional['outputs.DestinationPostgresConfigurationSslMode']:
        return pulumi.get(self, "ssl_mode")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional['outputs.DestinationPostgresConfigurationTunnelMethod']:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class DestinationPostgresConfigurationSslMode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationPostgresSslModesAllow":
            suggest = "destination_postgres_ssl_modes_allow"
        elif key == "destinationPostgresSslModesDisable":
            suggest = "destination_postgres_ssl_modes_disable"
        elif key == "destinationPostgresSslModesPrefer":
            suggest = "destination_postgres_ssl_modes_prefer"
        elif key == "destinationPostgresSslModesRequire":
            suggest = "destination_postgres_ssl_modes_require"
        elif key == "destinationPostgresSslModesVerifyCa":
            suggest = "destination_postgres_ssl_modes_verify_ca"
        elif key == "destinationPostgresSslModesVerifyFull":
            suggest = "destination_postgres_ssl_modes_verify_full"
        elif key == "destinationPostgresUpdateSslModesAllow":
            suggest = "destination_postgres_update_ssl_modes_allow"
        elif key == "destinationPostgresUpdateSslModesDisable":
            suggest = "destination_postgres_update_ssl_modes_disable"
        elif key == "destinationPostgresUpdateSslModesPrefer":
            suggest = "destination_postgres_update_ssl_modes_prefer"
        elif key == "destinationPostgresUpdateSslModesRequire":
            suggest = "destination_postgres_update_ssl_modes_require"
        elif key == "destinationPostgresUpdateSslModesVerifyCa":
            suggest = "destination_postgres_update_ssl_modes_verify_ca"
        elif key == "destinationPostgresUpdateSslModesVerifyFull":
            suggest = "destination_postgres_update_ssl_modes_verify_full"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationPostgresConfigurationSslMode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationPostgresConfigurationSslMode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationPostgresConfigurationSslMode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_postgres_ssl_modes_allow: Optional['outputs.DestinationPostgresConfigurationSslModeDestinationPostgresSslModesAllow'] = None,
                 destination_postgres_ssl_modes_disable: Optional['outputs.DestinationPostgresConfigurationSslModeDestinationPostgresSslModesDisable'] = None,
                 destination_postgres_ssl_modes_prefer: Optional['outputs.DestinationPostgresConfigurationSslModeDestinationPostgresSslModesPrefer'] = None,
                 destination_postgres_ssl_modes_require: Optional['outputs.DestinationPostgresConfigurationSslModeDestinationPostgresSslModesRequire'] = None,
                 destination_postgres_ssl_modes_verify_ca: Optional['outputs.DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyCa'] = None,
                 destination_postgres_ssl_modes_verify_full: Optional['outputs.DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyFull'] = None,
                 destination_postgres_update_ssl_modes_allow: Optional['outputs.DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesAllow'] = None,
                 destination_postgres_update_ssl_modes_disable: Optional['outputs.DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesDisable'] = None,
                 destination_postgres_update_ssl_modes_prefer: Optional['outputs.DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesPrefer'] = None,
                 destination_postgres_update_ssl_modes_require: Optional['outputs.DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesRequire'] = None,
                 destination_postgres_update_ssl_modes_verify_ca: Optional['outputs.DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyCa'] = None,
                 destination_postgres_update_ssl_modes_verify_full: Optional['outputs.DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyFull'] = None):
        if destination_postgres_ssl_modes_allow is not None:
            pulumi.set(__self__, "destination_postgres_ssl_modes_allow", destination_postgres_ssl_modes_allow)
        if destination_postgres_ssl_modes_disable is not None:
            pulumi.set(__self__, "destination_postgres_ssl_modes_disable", destination_postgres_ssl_modes_disable)
        if destination_postgres_ssl_modes_prefer is not None:
            pulumi.set(__self__, "destination_postgres_ssl_modes_prefer", destination_postgres_ssl_modes_prefer)
        if destination_postgres_ssl_modes_require is not None:
            pulumi.set(__self__, "destination_postgres_ssl_modes_require", destination_postgres_ssl_modes_require)
        if destination_postgres_ssl_modes_verify_ca is not None:
            pulumi.set(__self__, "destination_postgres_ssl_modes_verify_ca", destination_postgres_ssl_modes_verify_ca)
        if destination_postgres_ssl_modes_verify_full is not None:
            pulumi.set(__self__, "destination_postgres_ssl_modes_verify_full", destination_postgres_ssl_modes_verify_full)
        if destination_postgres_update_ssl_modes_allow is not None:
            pulumi.set(__self__, "destination_postgres_update_ssl_modes_allow", destination_postgres_update_ssl_modes_allow)
        if destination_postgres_update_ssl_modes_disable is not None:
            pulumi.set(__self__, "destination_postgres_update_ssl_modes_disable", destination_postgres_update_ssl_modes_disable)
        if destination_postgres_update_ssl_modes_prefer is not None:
            pulumi.set(__self__, "destination_postgres_update_ssl_modes_prefer", destination_postgres_update_ssl_modes_prefer)
        if destination_postgres_update_ssl_modes_require is not None:
            pulumi.set(__self__, "destination_postgres_update_ssl_modes_require", destination_postgres_update_ssl_modes_require)
        if destination_postgres_update_ssl_modes_verify_ca is not None:
            pulumi.set(__self__, "destination_postgres_update_ssl_modes_verify_ca", destination_postgres_update_ssl_modes_verify_ca)
        if destination_postgres_update_ssl_modes_verify_full is not None:
            pulumi.set(__self__, "destination_postgres_update_ssl_modes_verify_full", destination_postgres_update_ssl_modes_verify_full)

    @property
    @pulumi.getter(name="destinationPostgresSslModesAllow")
    def destination_postgres_ssl_modes_allow(self) -> Optional['outputs.DestinationPostgresConfigurationSslModeDestinationPostgresSslModesAllow']:
        return pulumi.get(self, "destination_postgres_ssl_modes_allow")

    @property
    @pulumi.getter(name="destinationPostgresSslModesDisable")
    def destination_postgres_ssl_modes_disable(self) -> Optional['outputs.DestinationPostgresConfigurationSslModeDestinationPostgresSslModesDisable']:
        return pulumi.get(self, "destination_postgres_ssl_modes_disable")

    @property
    @pulumi.getter(name="destinationPostgresSslModesPrefer")
    def destination_postgres_ssl_modes_prefer(self) -> Optional['outputs.DestinationPostgresConfigurationSslModeDestinationPostgresSslModesPrefer']:
        return pulumi.get(self, "destination_postgres_ssl_modes_prefer")

    @property
    @pulumi.getter(name="destinationPostgresSslModesRequire")
    def destination_postgres_ssl_modes_require(self) -> Optional['outputs.DestinationPostgresConfigurationSslModeDestinationPostgresSslModesRequire']:
        return pulumi.get(self, "destination_postgres_ssl_modes_require")

    @property
    @pulumi.getter(name="destinationPostgresSslModesVerifyCa")
    def destination_postgres_ssl_modes_verify_ca(self) -> Optional['outputs.DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyCa']:
        return pulumi.get(self, "destination_postgres_ssl_modes_verify_ca")

    @property
    @pulumi.getter(name="destinationPostgresSslModesVerifyFull")
    def destination_postgres_ssl_modes_verify_full(self) -> Optional['outputs.DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyFull']:
        return pulumi.get(self, "destination_postgres_ssl_modes_verify_full")

    @property
    @pulumi.getter(name="destinationPostgresUpdateSslModesAllow")
    def destination_postgres_update_ssl_modes_allow(self) -> Optional['outputs.DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesAllow']:
        return pulumi.get(self, "destination_postgres_update_ssl_modes_allow")

    @property
    @pulumi.getter(name="destinationPostgresUpdateSslModesDisable")
    def destination_postgres_update_ssl_modes_disable(self) -> Optional['outputs.DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesDisable']:
        return pulumi.get(self, "destination_postgres_update_ssl_modes_disable")

    @property
    @pulumi.getter(name="destinationPostgresUpdateSslModesPrefer")
    def destination_postgres_update_ssl_modes_prefer(self) -> Optional['outputs.DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesPrefer']:
        return pulumi.get(self, "destination_postgres_update_ssl_modes_prefer")

    @property
    @pulumi.getter(name="destinationPostgresUpdateSslModesRequire")
    def destination_postgres_update_ssl_modes_require(self) -> Optional['outputs.DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesRequire']:
        return pulumi.get(self, "destination_postgres_update_ssl_modes_require")

    @property
    @pulumi.getter(name="destinationPostgresUpdateSslModesVerifyCa")
    def destination_postgres_update_ssl_modes_verify_ca(self) -> Optional['outputs.DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyCa']:
        return pulumi.get(self, "destination_postgres_update_ssl_modes_verify_ca")

    @property
    @pulumi.getter(name="destinationPostgresUpdateSslModesVerifyFull")
    def destination_postgres_update_ssl_modes_verify_full(self) -> Optional['outputs.DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyFull']:
        return pulumi.get(self, "destination_postgres_update_ssl_modes_verify_full")


@pulumi.output_type
class DestinationPostgresConfigurationSslModeDestinationPostgresSslModesAllow(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class DestinationPostgresConfigurationSslModeDestinationPostgresSslModesDisable(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class DestinationPostgresConfigurationSslModeDestinationPostgresSslModesPrefer(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class DestinationPostgresConfigurationSslModeDestinationPostgresSslModesRequire(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyCa(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"
        elif key == "clientKeyPassword":
            suggest = "client_key_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyCa. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyCa.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyCa.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: str,
                 mode: str,
                 client_key_password: Optional[str] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "mode", mode)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[str]:
        return pulumi.get(self, "client_key_password")


@pulumi.output_type
class DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyFull(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clientKey":
            suggest = "client_key"
        elif key == "clientKeyPassword":
            suggest = "client_key_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyFull. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyFull.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyFull.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: str,
                 client_certificate: str,
                 client_key: str,
                 mode: str,
                 client_key_password: Optional[str] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "client_certificate", client_certificate)
        pulumi.set(__self__, "client_key", client_key)
        pulumi.set(__self__, "mode", mode)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> str:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> str:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[str]:
        return pulumi.get(self, "client_key_password")


@pulumi.output_type
class DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesAllow(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesDisable(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesPrefer(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesRequire(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyCa(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"
        elif key == "clientKeyPassword":
            suggest = "client_key_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyCa. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyCa.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyCa.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: str,
                 mode: str,
                 client_key_password: Optional[str] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "mode", mode)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[str]:
        return pulumi.get(self, "client_key_password")


@pulumi.output_type
class DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyFull(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clientKey":
            suggest = "client_key"
        elif key == "clientKeyPassword":
            suggest = "client_key_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyFull. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyFull.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyFull.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: str,
                 client_certificate: str,
                 client_key: str,
                 mode: str,
                 client_key_password: Optional[str] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "client_certificate", client_certificate)
        pulumi.set(__self__, "client_key", client_key)
        pulumi.set(__self__, "mode", mode)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> str:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> str:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[str]:
        return pulumi.get(self, "client_key_password")


@pulumi.output_type
class DestinationPostgresConfigurationTunnelMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationPostgresSshTunnelMethodNoTunnel":
            suggest = "destination_postgres_ssh_tunnel_method_no_tunnel"
        elif key == "destinationPostgresSshTunnelMethodPasswordAuthentication":
            suggest = "destination_postgres_ssh_tunnel_method_password_authentication"
        elif key == "destinationPostgresSshTunnelMethodSshKeyAuthentication":
            suggest = "destination_postgres_ssh_tunnel_method_ssh_key_authentication"
        elif key == "destinationPostgresUpdateSshTunnelMethodNoTunnel":
            suggest = "destination_postgres_update_ssh_tunnel_method_no_tunnel"
        elif key == "destinationPostgresUpdateSshTunnelMethodPasswordAuthentication":
            suggest = "destination_postgres_update_ssh_tunnel_method_password_authentication"
        elif key == "destinationPostgresUpdateSshTunnelMethodSshKeyAuthentication":
            suggest = "destination_postgres_update_ssh_tunnel_method_ssh_key_authentication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationPostgresConfigurationTunnelMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationPostgresConfigurationTunnelMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationPostgresConfigurationTunnelMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_postgres_ssh_tunnel_method_no_tunnel: Optional['outputs.DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodNoTunnel'] = None,
                 destination_postgres_ssh_tunnel_method_password_authentication: Optional['outputs.DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodPasswordAuthentication'] = None,
                 destination_postgres_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodSshKeyAuthentication'] = None,
                 destination_postgres_update_ssh_tunnel_method_no_tunnel: Optional['outputs.DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodNoTunnel'] = None,
                 destination_postgres_update_ssh_tunnel_method_password_authentication: Optional['outputs.DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodPasswordAuthentication'] = None,
                 destination_postgres_update_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodSshKeyAuthentication'] = None):
        if destination_postgres_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_postgres_ssh_tunnel_method_no_tunnel", destination_postgres_ssh_tunnel_method_no_tunnel)
        if destination_postgres_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_postgres_ssh_tunnel_method_password_authentication", destination_postgres_ssh_tunnel_method_password_authentication)
        if destination_postgres_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_postgres_ssh_tunnel_method_ssh_key_authentication", destination_postgres_ssh_tunnel_method_ssh_key_authentication)
        if destination_postgres_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_postgres_update_ssh_tunnel_method_no_tunnel", destination_postgres_update_ssh_tunnel_method_no_tunnel)
        if destination_postgres_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_postgres_update_ssh_tunnel_method_password_authentication", destination_postgres_update_ssh_tunnel_method_password_authentication)
        if destination_postgres_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_postgres_update_ssh_tunnel_method_ssh_key_authentication", destination_postgres_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="destinationPostgresSshTunnelMethodNoTunnel")
    def destination_postgres_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "destination_postgres_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationPostgresSshTunnelMethodPasswordAuthentication")
    def destination_postgres_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "destination_postgres_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationPostgresSshTunnelMethodSshKeyAuthentication")
    def destination_postgres_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "destination_postgres_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="destinationPostgresUpdateSshTunnelMethodNoTunnel")
    def destination_postgres_update_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "destination_postgres_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationPostgresUpdateSshTunnelMethodPasswordAuthentication")
    def destination_postgres_update_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "destination_postgres_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationPostgresUpdateSshTunnelMethodSshKeyAuthentication")
    def destination_postgres_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "destination_postgres_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class DestinationPubsubConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "batchingEnabled":
            suggest = "batching_enabled"
        elif key == "credentialsJson":
            suggest = "credentials_json"
        elif key == "destinationType":
            suggest = "destination_type"
        elif key == "orderingEnabled":
            suggest = "ordering_enabled"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "topicId":
            suggest = "topic_id"
        elif key == "batchingDelayThreshold":
            suggest = "batching_delay_threshold"
        elif key == "batchingElementCountThreshold":
            suggest = "batching_element_count_threshold"
        elif key == "batchingRequestBytesThreshold":
            suggest = "batching_request_bytes_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationPubsubConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationPubsubConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationPubsubConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 batching_enabled: bool,
                 credentials_json: str,
                 destination_type: str,
                 ordering_enabled: bool,
                 project_id: str,
                 topic_id: str,
                 batching_delay_threshold: Optional[int] = None,
                 batching_element_count_threshold: Optional[int] = None,
                 batching_request_bytes_threshold: Optional[int] = None):
        pulumi.set(__self__, "batching_enabled", batching_enabled)
        pulumi.set(__self__, "credentials_json", credentials_json)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "ordering_enabled", ordering_enabled)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "topic_id", topic_id)
        if batching_delay_threshold is not None:
            pulumi.set(__self__, "batching_delay_threshold", batching_delay_threshold)
        if batching_element_count_threshold is not None:
            pulumi.set(__self__, "batching_element_count_threshold", batching_element_count_threshold)
        if batching_request_bytes_threshold is not None:
            pulumi.set(__self__, "batching_request_bytes_threshold", batching_request_bytes_threshold)

    @property
    @pulumi.getter(name="batchingEnabled")
    def batching_enabled(self) -> bool:
        return pulumi.get(self, "batching_enabled")

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> str:
        return pulumi.get(self, "credentials_json")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="orderingEnabled")
    def ordering_enabled(self) -> bool:
        return pulumi.get(self, "ordering_enabled")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> str:
        return pulumi.get(self, "topic_id")

    @property
    @pulumi.getter(name="batchingDelayThreshold")
    def batching_delay_threshold(self) -> Optional[int]:
        return pulumi.get(self, "batching_delay_threshold")

    @property
    @pulumi.getter(name="batchingElementCountThreshold")
    def batching_element_count_threshold(self) -> Optional[int]:
        return pulumi.get(self, "batching_element_count_threshold")

    @property
    @pulumi.getter(name="batchingRequestBytesThreshold")
    def batching_request_bytes_threshold(self) -> Optional[int]:
        return pulumi.get(self, "batching_request_bytes_threshold")


@pulumi.output_type
class DestinationRedisConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cacheType":
            suggest = "cache_type"
        elif key == "destinationType":
            suggest = "destination_type"
        elif key == "sslMode":
            suggest = "ssl_mode"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationRedisConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationRedisConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationRedisConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cache_type: str,
                 destination_type: str,
                 host: str,
                 port: int,
                 username: str,
                 password: Optional[str] = None,
                 ssl: Optional[bool] = None,
                 ssl_mode: Optional['outputs.DestinationRedisConfigurationSslMode'] = None,
                 tunnel_method: Optional['outputs.DestinationRedisConfigurationTunnelMethod'] = None):
        pulumi.set(__self__, "cache_type", cache_type)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "username", username)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if ssl_mode is not None:
            pulumi.set(__self__, "ssl_mode", ssl_mode)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="cacheType")
    def cache_type(self) -> str:
        return pulumi.get(self, "cache_type")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def ssl(self) -> Optional[bool]:
        return pulumi.get(self, "ssl")

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional['outputs.DestinationRedisConfigurationSslMode']:
        return pulumi.get(self, "ssl_mode")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional['outputs.DestinationRedisConfigurationTunnelMethod']:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class DestinationRedisConfigurationSslMode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationRedisSslModesDisable":
            suggest = "destination_redis_ssl_modes_disable"
        elif key == "destinationRedisSslModesVerifyFull":
            suggest = "destination_redis_ssl_modes_verify_full"
        elif key == "destinationRedisUpdateSslModesDisable":
            suggest = "destination_redis_update_ssl_modes_disable"
        elif key == "destinationRedisUpdateSslModesVerifyFull":
            suggest = "destination_redis_update_ssl_modes_verify_full"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationRedisConfigurationSslMode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationRedisConfigurationSslMode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationRedisConfigurationSslMode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_redis_ssl_modes_disable: Optional['outputs.DestinationRedisConfigurationSslModeDestinationRedisSslModesDisable'] = None,
                 destination_redis_ssl_modes_verify_full: Optional['outputs.DestinationRedisConfigurationSslModeDestinationRedisSslModesVerifyFull'] = None,
                 destination_redis_update_ssl_modes_disable: Optional['outputs.DestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesDisable'] = None,
                 destination_redis_update_ssl_modes_verify_full: Optional['outputs.DestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesVerifyFull'] = None):
        if destination_redis_ssl_modes_disable is not None:
            pulumi.set(__self__, "destination_redis_ssl_modes_disable", destination_redis_ssl_modes_disable)
        if destination_redis_ssl_modes_verify_full is not None:
            pulumi.set(__self__, "destination_redis_ssl_modes_verify_full", destination_redis_ssl_modes_verify_full)
        if destination_redis_update_ssl_modes_disable is not None:
            pulumi.set(__self__, "destination_redis_update_ssl_modes_disable", destination_redis_update_ssl_modes_disable)
        if destination_redis_update_ssl_modes_verify_full is not None:
            pulumi.set(__self__, "destination_redis_update_ssl_modes_verify_full", destination_redis_update_ssl_modes_verify_full)

    @property
    @pulumi.getter(name="destinationRedisSslModesDisable")
    def destination_redis_ssl_modes_disable(self) -> Optional['outputs.DestinationRedisConfigurationSslModeDestinationRedisSslModesDisable']:
        return pulumi.get(self, "destination_redis_ssl_modes_disable")

    @property
    @pulumi.getter(name="destinationRedisSslModesVerifyFull")
    def destination_redis_ssl_modes_verify_full(self) -> Optional['outputs.DestinationRedisConfigurationSslModeDestinationRedisSslModesVerifyFull']:
        return pulumi.get(self, "destination_redis_ssl_modes_verify_full")

    @property
    @pulumi.getter(name="destinationRedisUpdateSslModesDisable")
    def destination_redis_update_ssl_modes_disable(self) -> Optional['outputs.DestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesDisable']:
        return pulumi.get(self, "destination_redis_update_ssl_modes_disable")

    @property
    @pulumi.getter(name="destinationRedisUpdateSslModesVerifyFull")
    def destination_redis_update_ssl_modes_verify_full(self) -> Optional['outputs.DestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesVerifyFull']:
        return pulumi.get(self, "destination_redis_update_ssl_modes_verify_full")


@pulumi.output_type
class DestinationRedisConfigurationSslModeDestinationRedisSslModesDisable(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class DestinationRedisConfigurationSslModeDestinationRedisSslModesVerifyFull(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clientKey":
            suggest = "client_key"
        elif key == "clientKeyPassword":
            suggest = "client_key_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationRedisConfigurationSslModeDestinationRedisSslModesVerifyFull. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationRedisConfigurationSslModeDestinationRedisSslModesVerifyFull.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationRedisConfigurationSslModeDestinationRedisSslModesVerifyFull.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: str,
                 client_certificate: str,
                 client_key: str,
                 mode: str,
                 client_key_password: Optional[str] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "client_certificate", client_certificate)
        pulumi.set(__self__, "client_key", client_key)
        pulumi.set(__self__, "mode", mode)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> str:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> str:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[str]:
        return pulumi.get(self, "client_key_password")


@pulumi.output_type
class DestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesDisable(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class DestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesVerifyFull(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clientKey":
            suggest = "client_key"
        elif key == "clientKeyPassword":
            suggest = "client_key_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesVerifyFull. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesVerifyFull.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesVerifyFull.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: str,
                 client_certificate: str,
                 client_key: str,
                 mode: str,
                 client_key_password: Optional[str] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "client_certificate", client_certificate)
        pulumi.set(__self__, "client_key", client_key)
        pulumi.set(__self__, "mode", mode)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> str:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> str:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[str]:
        return pulumi.get(self, "client_key_password")


@pulumi.output_type
class DestinationRedisConfigurationTunnelMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationRedisSshTunnelMethodNoTunnel":
            suggest = "destination_redis_ssh_tunnel_method_no_tunnel"
        elif key == "destinationRedisSshTunnelMethodPasswordAuthentication":
            suggest = "destination_redis_ssh_tunnel_method_password_authentication"
        elif key == "destinationRedisSshTunnelMethodSshKeyAuthentication":
            suggest = "destination_redis_ssh_tunnel_method_ssh_key_authentication"
        elif key == "destinationRedisUpdateSshTunnelMethodNoTunnel":
            suggest = "destination_redis_update_ssh_tunnel_method_no_tunnel"
        elif key == "destinationRedisUpdateSshTunnelMethodPasswordAuthentication":
            suggest = "destination_redis_update_ssh_tunnel_method_password_authentication"
        elif key == "destinationRedisUpdateSshTunnelMethodSshKeyAuthentication":
            suggest = "destination_redis_update_ssh_tunnel_method_ssh_key_authentication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationRedisConfigurationTunnelMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationRedisConfigurationTunnelMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationRedisConfigurationTunnelMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_redis_ssh_tunnel_method_no_tunnel: Optional['outputs.DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodNoTunnel'] = None,
                 destination_redis_ssh_tunnel_method_password_authentication: Optional['outputs.DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodPasswordAuthentication'] = None,
                 destination_redis_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodSshKeyAuthentication'] = None,
                 destination_redis_update_ssh_tunnel_method_no_tunnel: Optional['outputs.DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodNoTunnel'] = None,
                 destination_redis_update_ssh_tunnel_method_password_authentication: Optional['outputs.DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodPasswordAuthentication'] = None,
                 destination_redis_update_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodSshKeyAuthentication'] = None):
        if destination_redis_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_redis_ssh_tunnel_method_no_tunnel", destination_redis_ssh_tunnel_method_no_tunnel)
        if destination_redis_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_redis_ssh_tunnel_method_password_authentication", destination_redis_ssh_tunnel_method_password_authentication)
        if destination_redis_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_redis_ssh_tunnel_method_ssh_key_authentication", destination_redis_ssh_tunnel_method_ssh_key_authentication)
        if destination_redis_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_redis_update_ssh_tunnel_method_no_tunnel", destination_redis_update_ssh_tunnel_method_no_tunnel)
        if destination_redis_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_redis_update_ssh_tunnel_method_password_authentication", destination_redis_update_ssh_tunnel_method_password_authentication)
        if destination_redis_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_redis_update_ssh_tunnel_method_ssh_key_authentication", destination_redis_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="destinationRedisSshTunnelMethodNoTunnel")
    def destination_redis_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "destination_redis_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationRedisSshTunnelMethodPasswordAuthentication")
    def destination_redis_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "destination_redis_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationRedisSshTunnelMethodSshKeyAuthentication")
    def destination_redis_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "destination_redis_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="destinationRedisUpdateSshTunnelMethodNoTunnel")
    def destination_redis_update_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "destination_redis_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationRedisUpdateSshTunnelMethodPasswordAuthentication")
    def destination_redis_update_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "destination_redis_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationRedisUpdateSshTunnelMethodSshKeyAuthentication")
    def destination_redis_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "destination_redis_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class DestinationRedshiftConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "jdbcUrlParams":
            suggest = "jdbc_url_params"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "uploadingMethod":
            suggest = "uploading_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationRedshiftConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationRedshiftConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationRedshiftConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: str,
                 destination_type: str,
                 host: str,
                 password: str,
                 port: int,
                 schema: str,
                 username: str,
                 jdbc_url_params: Optional[str] = None,
                 tunnel_method: Optional['outputs.DestinationRedshiftConfigurationTunnelMethod'] = None,
                 uploading_method: Optional['outputs.DestinationRedshiftConfigurationUploadingMethod'] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "username", username)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)
        if uploading_method is not None:
            pulumi.set(__self__, "uploading_method", uploading_method)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[str]:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional['outputs.DestinationRedshiftConfigurationTunnelMethod']:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="uploadingMethod")
    def uploading_method(self) -> Optional['outputs.DestinationRedshiftConfigurationUploadingMethod']:
        return pulumi.get(self, "uploading_method")


@pulumi.output_type
class DestinationRedshiftConfigurationTunnelMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationRedshiftSshTunnelMethodNoTunnel":
            suggest = "destination_redshift_ssh_tunnel_method_no_tunnel"
        elif key == "destinationRedshiftSshTunnelMethodPasswordAuthentication":
            suggest = "destination_redshift_ssh_tunnel_method_password_authentication"
        elif key == "destinationRedshiftSshTunnelMethodSshKeyAuthentication":
            suggest = "destination_redshift_ssh_tunnel_method_ssh_key_authentication"
        elif key == "destinationRedshiftUpdateSshTunnelMethodNoTunnel":
            suggest = "destination_redshift_update_ssh_tunnel_method_no_tunnel"
        elif key == "destinationRedshiftUpdateSshTunnelMethodPasswordAuthentication":
            suggest = "destination_redshift_update_ssh_tunnel_method_password_authentication"
        elif key == "destinationRedshiftUpdateSshTunnelMethodSshKeyAuthentication":
            suggest = "destination_redshift_update_ssh_tunnel_method_ssh_key_authentication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationRedshiftConfigurationTunnelMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationRedshiftConfigurationTunnelMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationRedshiftConfigurationTunnelMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_redshift_ssh_tunnel_method_no_tunnel: Optional['outputs.DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodNoTunnel'] = None,
                 destination_redshift_ssh_tunnel_method_password_authentication: Optional['outputs.DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodPasswordAuthentication'] = None,
                 destination_redshift_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodSshKeyAuthentication'] = None,
                 destination_redshift_update_ssh_tunnel_method_no_tunnel: Optional['outputs.DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodNoTunnel'] = None,
                 destination_redshift_update_ssh_tunnel_method_password_authentication: Optional['outputs.DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodPasswordAuthentication'] = None,
                 destination_redshift_update_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodSshKeyAuthentication'] = None):
        if destination_redshift_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_redshift_ssh_tunnel_method_no_tunnel", destination_redshift_ssh_tunnel_method_no_tunnel)
        if destination_redshift_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_redshift_ssh_tunnel_method_password_authentication", destination_redshift_ssh_tunnel_method_password_authentication)
        if destination_redshift_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_redshift_ssh_tunnel_method_ssh_key_authentication", destination_redshift_ssh_tunnel_method_ssh_key_authentication)
        if destination_redshift_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_redshift_update_ssh_tunnel_method_no_tunnel", destination_redshift_update_ssh_tunnel_method_no_tunnel)
        if destination_redshift_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_redshift_update_ssh_tunnel_method_password_authentication", destination_redshift_update_ssh_tunnel_method_password_authentication)
        if destination_redshift_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_redshift_update_ssh_tunnel_method_ssh_key_authentication", destination_redshift_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="destinationRedshiftSshTunnelMethodNoTunnel")
    def destination_redshift_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "destination_redshift_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationRedshiftSshTunnelMethodPasswordAuthentication")
    def destination_redshift_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "destination_redshift_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationRedshiftSshTunnelMethodSshKeyAuthentication")
    def destination_redshift_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "destination_redshift_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="destinationRedshiftUpdateSshTunnelMethodNoTunnel")
    def destination_redshift_update_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "destination_redshift_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationRedshiftUpdateSshTunnelMethodPasswordAuthentication")
    def destination_redshift_update_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "destination_redshift_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationRedshiftUpdateSshTunnelMethodSshKeyAuthentication")
    def destination_redshift_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "destination_redshift_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class DestinationRedshiftConfigurationUploadingMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationRedshiftUpdateUploadingMethodS3Staging":
            suggest = "destination_redshift_update_uploading_method_s3_staging"
        elif key == "destinationRedshiftUpdateUploadingMethodStandard":
            suggest = "destination_redshift_update_uploading_method_standard"
        elif key == "destinationRedshiftUploadingMethodS3Staging":
            suggest = "destination_redshift_uploading_method_s3_staging"
        elif key == "destinationRedshiftUploadingMethodStandard":
            suggest = "destination_redshift_uploading_method_standard"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationRedshiftConfigurationUploadingMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationRedshiftConfigurationUploadingMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationRedshiftConfigurationUploadingMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_redshift_update_uploading_method_s3_staging: Optional['outputs.DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3Staging'] = None,
                 destination_redshift_update_uploading_method_standard: Optional['outputs.DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodStandard'] = None,
                 destination_redshift_uploading_method_s3_staging: Optional['outputs.DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3Staging'] = None,
                 destination_redshift_uploading_method_standard: Optional['outputs.DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodStandard'] = None):
        if destination_redshift_update_uploading_method_s3_staging is not None:
            pulumi.set(__self__, "destination_redshift_update_uploading_method_s3_staging", destination_redshift_update_uploading_method_s3_staging)
        if destination_redshift_update_uploading_method_standard is not None:
            pulumi.set(__self__, "destination_redshift_update_uploading_method_standard", destination_redshift_update_uploading_method_standard)
        if destination_redshift_uploading_method_s3_staging is not None:
            pulumi.set(__self__, "destination_redshift_uploading_method_s3_staging", destination_redshift_uploading_method_s3_staging)
        if destination_redshift_uploading_method_standard is not None:
            pulumi.set(__self__, "destination_redshift_uploading_method_standard", destination_redshift_uploading_method_standard)

    @property
    @pulumi.getter(name="destinationRedshiftUpdateUploadingMethodS3Staging")
    def destination_redshift_update_uploading_method_s3_staging(self) -> Optional['outputs.DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3Staging']:
        return pulumi.get(self, "destination_redshift_update_uploading_method_s3_staging")

    @property
    @pulumi.getter(name="destinationRedshiftUpdateUploadingMethodStandard")
    def destination_redshift_update_uploading_method_standard(self) -> Optional['outputs.DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodStandard']:
        return pulumi.get(self, "destination_redshift_update_uploading_method_standard")

    @property
    @pulumi.getter(name="destinationRedshiftUploadingMethodS3Staging")
    def destination_redshift_uploading_method_s3_staging(self) -> Optional['outputs.DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3Staging']:
        return pulumi.get(self, "destination_redshift_uploading_method_s3_staging")

    @property
    @pulumi.getter(name="destinationRedshiftUploadingMethodStandard")
    def destination_redshift_uploading_method_standard(self) -> Optional['outputs.DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodStandard']:
        return pulumi.get(self, "destination_redshift_uploading_method_standard")


@pulumi.output_type
class DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3Staging(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKeyId":
            suggest = "access_key_id"
        elif key == "s3BucketName":
            suggest = "s3_bucket_name"
        elif key == "s3BucketRegion":
            suggest = "s3_bucket_region"
        elif key == "secretAccessKey":
            suggest = "secret_access_key"
        elif key == "fileBufferCount":
            suggest = "file_buffer_count"
        elif key == "fileNamePattern":
            suggest = "file_name_pattern"
        elif key == "purgeStagingData":
            suggest = "purge_staging_data"
        elif key == "s3BucketPath":
            suggest = "s3_bucket_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3Staging. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3Staging.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3Staging.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key_id: str,
                 method: str,
                 s3_bucket_name: str,
                 s3_bucket_region: str,
                 secret_access_key: str,
                 encryption: Optional['outputs.DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryption'] = None,
                 file_buffer_count: Optional[int] = None,
                 file_name_pattern: Optional[str] = None,
                 purge_staging_data: Optional[bool] = None,
                 s3_bucket_path: Optional[str] = None):
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)
        pulumi.set(__self__, "s3_bucket_region", s3_bucket_region)
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if file_buffer_count is not None:
            pulumi.set(__self__, "file_buffer_count", file_buffer_count)
        if file_name_pattern is not None:
            pulumi.set(__self__, "file_name_pattern", file_name_pattern)
        if purge_staging_data is not None:
            pulumi.set(__self__, "purge_staging_data", purge_staging_data)
        if s3_bucket_path is not None:
            pulumi.set(__self__, "s3_bucket_path", s3_bucket_path)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> str:
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> str:
        return pulumi.get(self, "s3_bucket_name")

    @property
    @pulumi.getter(name="s3BucketRegion")
    def s3_bucket_region(self) -> str:
        return pulumi.get(self, "s3_bucket_region")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> str:
        return pulumi.get(self, "secret_access_key")

    @property
    @pulumi.getter
    def encryption(self) -> Optional['outputs.DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryption']:
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter(name="fileBufferCount")
    def file_buffer_count(self) -> Optional[int]:
        return pulumi.get(self, "file_buffer_count")

    @property
    @pulumi.getter(name="fileNamePattern")
    def file_name_pattern(self) -> Optional[str]:
        return pulumi.get(self, "file_name_pattern")

    @property
    @pulumi.getter(name="purgeStagingData")
    def purge_staging_data(self) -> Optional[bool]:
        return pulumi.get(self, "purge_staging_data")

    @property
    @pulumi.getter(name="s3BucketPath")
    def s3_bucket_path(self) -> Optional[str]:
        return pulumi.get(self, "s3_bucket_path")


@pulumi.output_type
class DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption":
            suggest = "destination_redshift_update_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption"
        elif key == "destinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryption":
            suggest = "destination_redshift_update_uploading_method_s3_staging_encryption_no_encryption"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_redshift_update_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption: Optional['outputs.DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption'] = None,
                 destination_redshift_update_uploading_method_s3_staging_encryption_no_encryption: Optional['outputs.DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryption'] = None):
        if destination_redshift_update_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption is not None:
            pulumi.set(__self__, "destination_redshift_update_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption", destination_redshift_update_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption)
        if destination_redshift_update_uploading_method_s3_staging_encryption_no_encryption is not None:
            pulumi.set(__self__, "destination_redshift_update_uploading_method_s3_staging_encryption_no_encryption", destination_redshift_update_uploading_method_s3_staging_encryption_no_encryption)

    @property
    @pulumi.getter(name="destinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption")
    def destination_redshift_update_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption(self) -> Optional['outputs.DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption']:
        return pulumi.get(self, "destination_redshift_update_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption")

    @property
    @pulumi.getter(name="destinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryption")
    def destination_redshift_update_uploading_method_s3_staging_encryption_no_encryption(self) -> Optional['outputs.DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryption']:
        return pulumi.get(self, "destination_redshift_update_uploading_method_s3_staging_encryption_no_encryption")


@pulumi.output_type
class DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionType":
            suggest = "encryption_type"
        elif key == "keyEncryptingKey":
            suggest = "key_encrypting_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_type: str,
                 key_encrypting_key: Optional[str] = None):
        pulumi.set(__self__, "encryption_type", encryption_type)
        if key_encrypting_key is not None:
            pulumi.set(__self__, "key_encrypting_key", key_encrypting_key)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> str:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter(name="keyEncryptingKey")
    def key_encrypting_key(self) -> Optional[str]:
        return pulumi.get(self, "key_encrypting_key")


@pulumi.output_type
class DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionType":
            suggest = "encryption_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_type: str):
        pulumi.set(__self__, "encryption_type", encryption_type)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> str:
        return pulumi.get(self, "encryption_type")


@pulumi.output_type
class DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodStandard(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3Staging(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKeyId":
            suggest = "access_key_id"
        elif key == "s3BucketName":
            suggest = "s3_bucket_name"
        elif key == "s3BucketRegion":
            suggest = "s3_bucket_region"
        elif key == "secretAccessKey":
            suggest = "secret_access_key"
        elif key == "fileBufferCount":
            suggest = "file_buffer_count"
        elif key == "fileNamePattern":
            suggest = "file_name_pattern"
        elif key == "purgeStagingData":
            suggest = "purge_staging_data"
        elif key == "s3BucketPath":
            suggest = "s3_bucket_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3Staging. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3Staging.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3Staging.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key_id: str,
                 method: str,
                 s3_bucket_name: str,
                 s3_bucket_region: str,
                 secret_access_key: str,
                 encryption: Optional['outputs.DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryption'] = None,
                 file_buffer_count: Optional[int] = None,
                 file_name_pattern: Optional[str] = None,
                 purge_staging_data: Optional[bool] = None,
                 s3_bucket_path: Optional[str] = None):
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)
        pulumi.set(__self__, "s3_bucket_region", s3_bucket_region)
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if file_buffer_count is not None:
            pulumi.set(__self__, "file_buffer_count", file_buffer_count)
        if file_name_pattern is not None:
            pulumi.set(__self__, "file_name_pattern", file_name_pattern)
        if purge_staging_data is not None:
            pulumi.set(__self__, "purge_staging_data", purge_staging_data)
        if s3_bucket_path is not None:
            pulumi.set(__self__, "s3_bucket_path", s3_bucket_path)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> str:
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> str:
        return pulumi.get(self, "s3_bucket_name")

    @property
    @pulumi.getter(name="s3BucketRegion")
    def s3_bucket_region(self) -> str:
        return pulumi.get(self, "s3_bucket_region")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> str:
        return pulumi.get(self, "secret_access_key")

    @property
    @pulumi.getter
    def encryption(self) -> Optional['outputs.DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryption']:
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter(name="fileBufferCount")
    def file_buffer_count(self) -> Optional[int]:
        return pulumi.get(self, "file_buffer_count")

    @property
    @pulumi.getter(name="fileNamePattern")
    def file_name_pattern(self) -> Optional[str]:
        return pulumi.get(self, "file_name_pattern")

    @property
    @pulumi.getter(name="purgeStagingData")
    def purge_staging_data(self) -> Optional[bool]:
        return pulumi.get(self, "purge_staging_data")

    @property
    @pulumi.getter(name="s3BucketPath")
    def s3_bucket_path(self) -> Optional[str]:
        return pulumi.get(self, "s3_bucket_path")


@pulumi.output_type
class DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption":
            suggest = "destination_redshift_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption"
        elif key == "destinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption":
            suggest = "destination_redshift_uploading_method_s3_staging_encryption_no_encryption"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_redshift_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption: Optional['outputs.DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption'] = None,
                 destination_redshift_uploading_method_s3_staging_encryption_no_encryption: Optional['outputs.DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption'] = None):
        if destination_redshift_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption is not None:
            pulumi.set(__self__, "destination_redshift_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption", destination_redshift_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption)
        if destination_redshift_uploading_method_s3_staging_encryption_no_encryption is not None:
            pulumi.set(__self__, "destination_redshift_uploading_method_s3_staging_encryption_no_encryption", destination_redshift_uploading_method_s3_staging_encryption_no_encryption)

    @property
    @pulumi.getter(name="destinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption")
    def destination_redshift_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption(self) -> Optional['outputs.DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption']:
        return pulumi.get(self, "destination_redshift_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption")

    @property
    @pulumi.getter(name="destinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption")
    def destination_redshift_uploading_method_s3_staging_encryption_no_encryption(self) -> Optional['outputs.DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption']:
        return pulumi.get(self, "destination_redshift_uploading_method_s3_staging_encryption_no_encryption")


@pulumi.output_type
class DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionType":
            suggest = "encryption_type"
        elif key == "keyEncryptingKey":
            suggest = "key_encrypting_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_type: str,
                 key_encrypting_key: Optional[str] = None):
        pulumi.set(__self__, "encryption_type", encryption_type)
        if key_encrypting_key is not None:
            pulumi.set(__self__, "key_encrypting_key", key_encrypting_key)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> str:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter(name="keyEncryptingKey")
    def key_encrypting_key(self) -> Optional[str]:
        return pulumi.get(self, "key_encrypting_key")


@pulumi.output_type
class DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionType":
            suggest = "encryption_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_type: str):
        pulumi.set(__self__, "encryption_type", encryption_type)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> str:
        return pulumi.get(self, "encryption_type")


@pulumi.output_type
class DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodStandard(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class DestinationS3Configuration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "s3BucketName":
            suggest = "s3_bucket_name"
        elif key == "s3BucketPath":
            suggest = "s3_bucket_path"
        elif key == "s3BucketRegion":
            suggest = "s3_bucket_region"
        elif key == "accessKeyId":
            suggest = "access_key_id"
        elif key == "fileNamePattern":
            suggest = "file_name_pattern"
        elif key == "s3Endpoint":
            suggest = "s3_endpoint"
        elif key == "s3PathFormat":
            suggest = "s3_path_format"
        elif key == "secretAccessKey":
            suggest = "secret_access_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3Configuration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3Configuration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3Configuration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_type: str,
                 format: 'outputs.DestinationS3ConfigurationFormat',
                 s3_bucket_name: str,
                 s3_bucket_path: str,
                 s3_bucket_region: str,
                 access_key_id: Optional[str] = None,
                 file_name_pattern: Optional[str] = None,
                 s3_endpoint: Optional[str] = None,
                 s3_path_format: Optional[str] = None,
                 secret_access_key: Optional[str] = None):
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)
        pulumi.set(__self__, "s3_bucket_path", s3_bucket_path)
        pulumi.set(__self__, "s3_bucket_region", s3_bucket_region)
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if file_name_pattern is not None:
            pulumi.set(__self__, "file_name_pattern", file_name_pattern)
        if s3_endpoint is not None:
            pulumi.set(__self__, "s3_endpoint", s3_endpoint)
        if s3_path_format is not None:
            pulumi.set(__self__, "s3_path_format", s3_path_format)
        if secret_access_key is not None:
            pulumi.set(__self__, "secret_access_key", secret_access_key)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def format(self) -> 'outputs.DestinationS3ConfigurationFormat':
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> str:
        return pulumi.get(self, "s3_bucket_name")

    @property
    @pulumi.getter(name="s3BucketPath")
    def s3_bucket_path(self) -> str:
        return pulumi.get(self, "s3_bucket_path")

    @property
    @pulumi.getter(name="s3BucketRegion")
    def s3_bucket_region(self) -> str:
        return pulumi.get(self, "s3_bucket_region")

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> Optional[str]:
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="fileNamePattern")
    def file_name_pattern(self) -> Optional[str]:
        return pulumi.get(self, "file_name_pattern")

    @property
    @pulumi.getter(name="s3Endpoint")
    def s3_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "s3_endpoint")

    @property
    @pulumi.getter(name="s3PathFormat")
    def s3_path_format(self) -> Optional[str]:
        return pulumi.get(self, "s3_path_format")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_access_key")


@pulumi.output_type
class DestinationS3ConfigurationFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationS3OutputFormatAvroApacheAvro":
            suggest = "destination_s3_output_format_avro_apache_avro"
        elif key == "destinationS3OutputFormatCsvCommaSeparatedValues":
            suggest = "destination_s3_output_format_csv_comma_separated_values"
        elif key == "destinationS3OutputFormatJsonLinesNewlineDelimitedJson":
            suggest = "destination_s3_output_format_json_lines_newline_delimited_json"
        elif key == "destinationS3OutputFormatParquetColumnarStorage":
            suggest = "destination_s3_output_format_parquet_columnar_storage"
        elif key == "destinationS3UpdateOutputFormatAvroApacheAvro":
            suggest = "destination_s3_update_output_format_avro_apache_avro"
        elif key == "destinationS3UpdateOutputFormatCsvCommaSeparatedValues":
            suggest = "destination_s3_update_output_format_csv_comma_separated_values"
        elif key == "destinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJson":
            suggest = "destination_s3_update_output_format_json_lines_newline_delimited_json"
        elif key == "destinationS3UpdateOutputFormatParquetColumnarStorage":
            suggest = "destination_s3_update_output_format_parquet_columnar_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3ConfigurationFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3ConfigurationFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3ConfigurationFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_s3_output_format_avro_apache_avro: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvro'] = None,
                 destination_s3_output_format_csv_comma_separated_values: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValues'] = None,
                 destination_s3_output_format_json_lines_newline_delimited_json: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJson'] = None,
                 destination_s3_output_format_parquet_columnar_storage: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatParquetColumnarStorage'] = None,
                 destination_s3_update_output_format_avro_apache_avro: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvro'] = None,
                 destination_s3_update_output_format_csv_comma_separated_values: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValues'] = None,
                 destination_s3_update_output_format_json_lines_newline_delimited_json: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJson'] = None,
                 destination_s3_update_output_format_parquet_columnar_storage: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatParquetColumnarStorage'] = None):
        if destination_s3_output_format_avro_apache_avro is not None:
            pulumi.set(__self__, "destination_s3_output_format_avro_apache_avro", destination_s3_output_format_avro_apache_avro)
        if destination_s3_output_format_csv_comma_separated_values is not None:
            pulumi.set(__self__, "destination_s3_output_format_csv_comma_separated_values", destination_s3_output_format_csv_comma_separated_values)
        if destination_s3_output_format_json_lines_newline_delimited_json is not None:
            pulumi.set(__self__, "destination_s3_output_format_json_lines_newline_delimited_json", destination_s3_output_format_json_lines_newline_delimited_json)
        if destination_s3_output_format_parquet_columnar_storage is not None:
            pulumi.set(__self__, "destination_s3_output_format_parquet_columnar_storage", destination_s3_output_format_parquet_columnar_storage)
        if destination_s3_update_output_format_avro_apache_avro is not None:
            pulumi.set(__self__, "destination_s3_update_output_format_avro_apache_avro", destination_s3_update_output_format_avro_apache_avro)
        if destination_s3_update_output_format_csv_comma_separated_values is not None:
            pulumi.set(__self__, "destination_s3_update_output_format_csv_comma_separated_values", destination_s3_update_output_format_csv_comma_separated_values)
        if destination_s3_update_output_format_json_lines_newline_delimited_json is not None:
            pulumi.set(__self__, "destination_s3_update_output_format_json_lines_newline_delimited_json", destination_s3_update_output_format_json_lines_newline_delimited_json)
        if destination_s3_update_output_format_parquet_columnar_storage is not None:
            pulumi.set(__self__, "destination_s3_update_output_format_parquet_columnar_storage", destination_s3_update_output_format_parquet_columnar_storage)

    @property
    @pulumi.getter(name="destinationS3OutputFormatAvroApacheAvro")
    def destination_s3_output_format_avro_apache_avro(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvro']:
        return pulumi.get(self, "destination_s3_output_format_avro_apache_avro")

    @property
    @pulumi.getter(name="destinationS3OutputFormatCsvCommaSeparatedValues")
    def destination_s3_output_format_csv_comma_separated_values(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValues']:
        return pulumi.get(self, "destination_s3_output_format_csv_comma_separated_values")

    @property
    @pulumi.getter(name="destinationS3OutputFormatJsonLinesNewlineDelimitedJson")
    def destination_s3_output_format_json_lines_newline_delimited_json(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJson']:
        return pulumi.get(self, "destination_s3_output_format_json_lines_newline_delimited_json")

    @property
    @pulumi.getter(name="destinationS3OutputFormatParquetColumnarStorage")
    def destination_s3_output_format_parquet_columnar_storage(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatParquetColumnarStorage']:
        return pulumi.get(self, "destination_s3_output_format_parquet_columnar_storage")

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatAvroApacheAvro")
    def destination_s3_update_output_format_avro_apache_avro(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvro']:
        return pulumi.get(self, "destination_s3_update_output_format_avro_apache_avro")

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatCsvCommaSeparatedValues")
    def destination_s3_update_output_format_csv_comma_separated_values(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValues']:
        return pulumi.get(self, "destination_s3_update_output_format_csv_comma_separated_values")

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJson")
    def destination_s3_update_output_format_json_lines_newline_delimited_json(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJson']:
        return pulumi.get(self, "destination_s3_update_output_format_json_lines_newline_delimited_json")

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatParquetColumnarStorage")
    def destination_s3_update_output_format_parquet_columnar_storage(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatParquetColumnarStorage']:
        return pulumi.get(self, "destination_s3_update_output_format_parquet_columnar_storage")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvro(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionCodec":
            suggest = "compression_codec"
        elif key == "formatType":
            suggest = "format_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvro. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvro.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvro.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compression_codec: 'outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodec',
                 format_type: str):
        pulumi.set(__self__, "compression_codec", compression_codec)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> 'outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodec':
        return pulumi.get(self, "compression_codec")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2":
            suggest = "destination_s3_output_format_avro_apache_avro_compression_codec_bzip2"
        elif key == "destinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate":
            suggest = "destination_s3_output_format_avro_apache_avro_compression_codec_deflate"
        elif key == "destinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression":
            suggest = "destination_s3_output_format_avro_apache_avro_compression_codec_no_compression"
        elif key == "destinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy":
            suggest = "destination_s3_output_format_avro_apache_avro_compression_codec_snappy"
        elif key == "destinationS3OutputFormatAvroApacheAvroCompressionCodecXz":
            suggest = "destination_s3_output_format_avro_apache_avro_compression_codec_xz"
        elif key == "destinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard":
            suggest = "destination_s3_output_format_avro_apache_avro_compression_codec_zstandard"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_s3_output_format_avro_apache_avro_compression_codec_bzip2: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2'] = None,
                 destination_s3_output_format_avro_apache_avro_compression_codec_deflate: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate'] = None,
                 destination_s3_output_format_avro_apache_avro_compression_codec_no_compression: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression'] = None,
                 destination_s3_output_format_avro_apache_avro_compression_codec_snappy: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy'] = None,
                 destination_s3_output_format_avro_apache_avro_compression_codec_xz: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecXz'] = None,
                 destination_s3_output_format_avro_apache_avro_compression_codec_zstandard: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard'] = None):
        if destination_s3_output_format_avro_apache_avro_compression_codec_bzip2 is not None:
            pulumi.set(__self__, "destination_s3_output_format_avro_apache_avro_compression_codec_bzip2", destination_s3_output_format_avro_apache_avro_compression_codec_bzip2)
        if destination_s3_output_format_avro_apache_avro_compression_codec_deflate is not None:
            pulumi.set(__self__, "destination_s3_output_format_avro_apache_avro_compression_codec_deflate", destination_s3_output_format_avro_apache_avro_compression_codec_deflate)
        if destination_s3_output_format_avro_apache_avro_compression_codec_no_compression is not None:
            pulumi.set(__self__, "destination_s3_output_format_avro_apache_avro_compression_codec_no_compression", destination_s3_output_format_avro_apache_avro_compression_codec_no_compression)
        if destination_s3_output_format_avro_apache_avro_compression_codec_snappy is not None:
            pulumi.set(__self__, "destination_s3_output_format_avro_apache_avro_compression_codec_snappy", destination_s3_output_format_avro_apache_avro_compression_codec_snappy)
        if destination_s3_output_format_avro_apache_avro_compression_codec_xz is not None:
            pulumi.set(__self__, "destination_s3_output_format_avro_apache_avro_compression_codec_xz", destination_s3_output_format_avro_apache_avro_compression_codec_xz)
        if destination_s3_output_format_avro_apache_avro_compression_codec_zstandard is not None:
            pulumi.set(__self__, "destination_s3_output_format_avro_apache_avro_compression_codec_zstandard", destination_s3_output_format_avro_apache_avro_compression_codec_zstandard)

    @property
    @pulumi.getter(name="destinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2")
    def destination_s3_output_format_avro_apache_avro_compression_codec_bzip2(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2']:
        return pulumi.get(self, "destination_s3_output_format_avro_apache_avro_compression_codec_bzip2")

    @property
    @pulumi.getter(name="destinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate")
    def destination_s3_output_format_avro_apache_avro_compression_codec_deflate(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate']:
        return pulumi.get(self, "destination_s3_output_format_avro_apache_avro_compression_codec_deflate")

    @property
    @pulumi.getter(name="destinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression")
    def destination_s3_output_format_avro_apache_avro_compression_codec_no_compression(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression']:
        return pulumi.get(self, "destination_s3_output_format_avro_apache_avro_compression_codec_no_compression")

    @property
    @pulumi.getter(name="destinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy")
    def destination_s3_output_format_avro_apache_avro_compression_codec_snappy(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy']:
        return pulumi.get(self, "destination_s3_output_format_avro_apache_avro_compression_codec_snappy")

    @property
    @pulumi.getter(name="destinationS3OutputFormatAvroApacheAvroCompressionCodecXz")
    def destination_s3_output_format_avro_apache_avro_compression_codec_xz(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecXz']:
        return pulumi.get(self, "destination_s3_output_format_avro_apache_avro_compression_codec_xz")

    @property
    @pulumi.getter(name="destinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard")
    def destination_s3_output_format_avro_apache_avro_compression_codec_zstandard(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard']:
        return pulumi.get(self, "destination_s3_output_format_avro_apache_avro_compression_codec_zstandard")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2(dict):
    def __init__(__self__, *,
                 codec: str):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionLevel":
            suggest = "compression_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 codec: str,
                 compression_level: int):
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "compression_level", compression_level)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> int:
        return pulumi.get(self, "compression_level")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression(dict):
    def __init__(__self__, *,
                 codec: str):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy(dict):
    def __init__(__self__, *,
                 codec: str):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecXz(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionLevel":
            suggest = "compression_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecXz. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecXz.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecXz.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 codec: str,
                 compression_level: int):
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "compression_level", compression_level)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> int:
        return pulumi.get(self, "compression_level")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionLevel":
            suggest = "compression_level"
        elif key == "includeChecksum":
            suggest = "include_checksum"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 codec: str,
                 compression_level: int,
                 include_checksum: Optional[bool] = None):
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "compression_level", compression_level)
        if include_checksum is not None:
            pulumi.set(__self__, "include_checksum", include_checksum)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> int:
        return pulumi.get(self, "compression_level")

    @property
    @pulumi.getter(name="includeChecksum")
    def include_checksum(self) -> Optional[bool]:
        return pulumi.get(self, "include_checksum")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValues(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatType":
            suggest = "format_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValues. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValues.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValues.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 flattening: str,
                 format_type: str,
                 compression: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompression'] = None):
        pulumi.set(__self__, "flattening", flattening)
        pulumi.set(__self__, "format_type", format_type)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)

    @property
    @pulumi.getter
    def flattening(self) -> str:
        return pulumi.get(self, "flattening")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter
    def compression(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompression']:
        return pulumi.get(self, "compression")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompression(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzip":
            suggest = "destination_s3_output_format_csv_comma_separated_values_compression_gzip"
        elif key == "destinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompression":
            suggest = "destination_s3_output_format_csv_comma_separated_values_compression_no_compression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompression. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompression.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompression.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_s3_output_format_csv_comma_separated_values_compression_gzip: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzip'] = None,
                 destination_s3_output_format_csv_comma_separated_values_compression_no_compression: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompression'] = None):
        if destination_s3_output_format_csv_comma_separated_values_compression_gzip is not None:
            pulumi.set(__self__, "destination_s3_output_format_csv_comma_separated_values_compression_gzip", destination_s3_output_format_csv_comma_separated_values_compression_gzip)
        if destination_s3_output_format_csv_comma_separated_values_compression_no_compression is not None:
            pulumi.set(__self__, "destination_s3_output_format_csv_comma_separated_values_compression_no_compression", destination_s3_output_format_csv_comma_separated_values_compression_no_compression)

    @property
    @pulumi.getter(name="destinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzip")
    def destination_s3_output_format_csv_comma_separated_values_compression_gzip(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzip']:
        return pulumi.get(self, "destination_s3_output_format_csv_comma_separated_values_compression_gzip")

    @property
    @pulumi.getter(name="destinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompression")
    def destination_s3_output_format_csv_comma_separated_values_compression_no_compression(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompression']:
        return pulumi.get(self, "destination_s3_output_format_csv_comma_separated_values_compression_no_compression")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionType":
            suggest = "compression_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compression_type: Optional[str] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompression(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionType":
            suggest = "compression_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompression. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompression.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompression.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compression_type: Optional[str] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJson(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatType":
            suggest = "format_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJson. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJson.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJson.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format_type: str,
                 compression: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompression'] = None,
                 flattening: Optional[str] = None):
        pulumi.set(__self__, "format_type", format_type)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if flattening is not None:
            pulumi.set(__self__, "flattening", flattening)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter
    def compression(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompression']:
        return pulumi.get(self, "compression")

    @property
    @pulumi.getter
    def flattening(self) -> Optional[str]:
        return pulumi.get(self, "flattening")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompression(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip":
            suggest = "destination_s3_output_format_json_lines_newline_delimited_json_compression_gzip"
        elif key == "destinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression":
            suggest = "destination_s3_output_format_json_lines_newline_delimited_json_compression_no_compression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompression. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompression.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompression.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_s3_output_format_json_lines_newline_delimited_json_compression_gzip: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip'] = None,
                 destination_s3_output_format_json_lines_newline_delimited_json_compression_no_compression: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression'] = None):
        if destination_s3_output_format_json_lines_newline_delimited_json_compression_gzip is not None:
            pulumi.set(__self__, "destination_s3_output_format_json_lines_newline_delimited_json_compression_gzip", destination_s3_output_format_json_lines_newline_delimited_json_compression_gzip)
        if destination_s3_output_format_json_lines_newline_delimited_json_compression_no_compression is not None:
            pulumi.set(__self__, "destination_s3_output_format_json_lines_newline_delimited_json_compression_no_compression", destination_s3_output_format_json_lines_newline_delimited_json_compression_no_compression)

    @property
    @pulumi.getter(name="destinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip")
    def destination_s3_output_format_json_lines_newline_delimited_json_compression_gzip(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip']:
        return pulumi.get(self, "destination_s3_output_format_json_lines_newline_delimited_json_compression_gzip")

    @property
    @pulumi.getter(name="destinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression")
    def destination_s3_output_format_json_lines_newline_delimited_json_compression_no_compression(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression']:
        return pulumi.get(self, "destination_s3_output_format_json_lines_newline_delimited_json_compression_no_compression")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionType":
            suggest = "compression_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compression_type: Optional[str] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionType":
            suggest = "compression_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compression_type: Optional[str] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatParquetColumnarStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatType":
            suggest = "format_type"
        elif key == "blockSizeMb":
            suggest = "block_size_mb"
        elif key == "compressionCodec":
            suggest = "compression_codec"
        elif key == "dictionaryEncoding":
            suggest = "dictionary_encoding"
        elif key == "dictionaryPageSizeKb":
            suggest = "dictionary_page_size_kb"
        elif key == "maxPaddingSizeMb":
            suggest = "max_padding_size_mb"
        elif key == "pageSizeKb":
            suggest = "page_size_kb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3ConfigurationFormatDestinationS3OutputFormatParquetColumnarStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3ConfigurationFormatDestinationS3OutputFormatParquetColumnarStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3ConfigurationFormatDestinationS3OutputFormatParquetColumnarStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format_type: str,
                 block_size_mb: Optional[int] = None,
                 compression_codec: Optional[str] = None,
                 dictionary_encoding: Optional[bool] = None,
                 dictionary_page_size_kb: Optional[int] = None,
                 max_padding_size_mb: Optional[int] = None,
                 page_size_kb: Optional[int] = None):
        pulumi.set(__self__, "format_type", format_type)
        if block_size_mb is not None:
            pulumi.set(__self__, "block_size_mb", block_size_mb)
        if compression_codec is not None:
            pulumi.set(__self__, "compression_codec", compression_codec)
        if dictionary_encoding is not None:
            pulumi.set(__self__, "dictionary_encoding", dictionary_encoding)
        if dictionary_page_size_kb is not None:
            pulumi.set(__self__, "dictionary_page_size_kb", dictionary_page_size_kb)
        if max_padding_size_mb is not None:
            pulumi.set(__self__, "max_padding_size_mb", max_padding_size_mb)
        if page_size_kb is not None:
            pulumi.set(__self__, "page_size_kb", page_size_kb)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter(name="blockSizeMb")
    def block_size_mb(self) -> Optional[int]:
        return pulumi.get(self, "block_size_mb")

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> Optional[str]:
        return pulumi.get(self, "compression_codec")

    @property
    @pulumi.getter(name="dictionaryEncoding")
    def dictionary_encoding(self) -> Optional[bool]:
        return pulumi.get(self, "dictionary_encoding")

    @property
    @pulumi.getter(name="dictionaryPageSizeKb")
    def dictionary_page_size_kb(self) -> Optional[int]:
        return pulumi.get(self, "dictionary_page_size_kb")

    @property
    @pulumi.getter(name="maxPaddingSizeMb")
    def max_padding_size_mb(self) -> Optional[int]:
        return pulumi.get(self, "max_padding_size_mb")

    @property
    @pulumi.getter(name="pageSizeKb")
    def page_size_kb(self) -> Optional[int]:
        return pulumi.get(self, "page_size_kb")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvro(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionCodec":
            suggest = "compression_codec"
        elif key == "formatType":
            suggest = "format_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvro. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvro.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvro.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compression_codec: 'outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodec',
                 format_type: str):
        pulumi.set(__self__, "compression_codec", compression_codec)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> 'outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodec':
        return pulumi.get(self, "compression_codec")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecBzip2":
            suggest = "destination_s3_update_output_format_avro_apache_avro_compression_codec_bzip2"
        elif key == "destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflate":
            suggest = "destination_s3_update_output_format_avro_apache_avro_compression_codec_deflate"
        elif key == "destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression":
            suggest = "destination_s3_update_output_format_avro_apache_avro_compression_codec_no_compression"
        elif key == "destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecSnappy":
            suggest = "destination_s3_update_output_format_avro_apache_avro_compression_codec_snappy"
        elif key == "destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXz":
            suggest = "destination_s3_update_output_format_avro_apache_avro_compression_codec_xz"
        elif key == "destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandard":
            suggest = "destination_s3_update_output_format_avro_apache_avro_compression_codec_zstandard"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_s3_update_output_format_avro_apache_avro_compression_codec_bzip2: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecBzip2'] = None,
                 destination_s3_update_output_format_avro_apache_avro_compression_codec_deflate: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflate'] = None,
                 destination_s3_update_output_format_avro_apache_avro_compression_codec_no_compression: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression'] = None,
                 destination_s3_update_output_format_avro_apache_avro_compression_codec_snappy: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecSnappy'] = None,
                 destination_s3_update_output_format_avro_apache_avro_compression_codec_xz: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXz'] = None,
                 destination_s3_update_output_format_avro_apache_avro_compression_codec_zstandard: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandard'] = None):
        if destination_s3_update_output_format_avro_apache_avro_compression_codec_bzip2 is not None:
            pulumi.set(__self__, "destination_s3_update_output_format_avro_apache_avro_compression_codec_bzip2", destination_s3_update_output_format_avro_apache_avro_compression_codec_bzip2)
        if destination_s3_update_output_format_avro_apache_avro_compression_codec_deflate is not None:
            pulumi.set(__self__, "destination_s3_update_output_format_avro_apache_avro_compression_codec_deflate", destination_s3_update_output_format_avro_apache_avro_compression_codec_deflate)
        if destination_s3_update_output_format_avro_apache_avro_compression_codec_no_compression is not None:
            pulumi.set(__self__, "destination_s3_update_output_format_avro_apache_avro_compression_codec_no_compression", destination_s3_update_output_format_avro_apache_avro_compression_codec_no_compression)
        if destination_s3_update_output_format_avro_apache_avro_compression_codec_snappy is not None:
            pulumi.set(__self__, "destination_s3_update_output_format_avro_apache_avro_compression_codec_snappy", destination_s3_update_output_format_avro_apache_avro_compression_codec_snappy)
        if destination_s3_update_output_format_avro_apache_avro_compression_codec_xz is not None:
            pulumi.set(__self__, "destination_s3_update_output_format_avro_apache_avro_compression_codec_xz", destination_s3_update_output_format_avro_apache_avro_compression_codec_xz)
        if destination_s3_update_output_format_avro_apache_avro_compression_codec_zstandard is not None:
            pulumi.set(__self__, "destination_s3_update_output_format_avro_apache_avro_compression_codec_zstandard", destination_s3_update_output_format_avro_apache_avro_compression_codec_zstandard)

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecBzip2")
    def destination_s3_update_output_format_avro_apache_avro_compression_codec_bzip2(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecBzip2']:
        return pulumi.get(self, "destination_s3_update_output_format_avro_apache_avro_compression_codec_bzip2")

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflate")
    def destination_s3_update_output_format_avro_apache_avro_compression_codec_deflate(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflate']:
        return pulumi.get(self, "destination_s3_update_output_format_avro_apache_avro_compression_codec_deflate")

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression")
    def destination_s3_update_output_format_avro_apache_avro_compression_codec_no_compression(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression']:
        return pulumi.get(self, "destination_s3_update_output_format_avro_apache_avro_compression_codec_no_compression")

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecSnappy")
    def destination_s3_update_output_format_avro_apache_avro_compression_codec_snappy(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecSnappy']:
        return pulumi.get(self, "destination_s3_update_output_format_avro_apache_avro_compression_codec_snappy")

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXz")
    def destination_s3_update_output_format_avro_apache_avro_compression_codec_xz(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXz']:
        return pulumi.get(self, "destination_s3_update_output_format_avro_apache_avro_compression_codec_xz")

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandard")
    def destination_s3_update_output_format_avro_apache_avro_compression_codec_zstandard(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandard']:
        return pulumi.get(self, "destination_s3_update_output_format_avro_apache_avro_compression_codec_zstandard")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecBzip2(dict):
    def __init__(__self__, *,
                 codec: str):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionLevel":
            suggest = "compression_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 codec: str,
                 compression_level: int):
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "compression_level", compression_level)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> int:
        return pulumi.get(self, "compression_level")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression(dict):
    def __init__(__self__, *,
                 codec: str):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecSnappy(dict):
    def __init__(__self__, *,
                 codec: str):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXz(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionLevel":
            suggest = "compression_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXz. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXz.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXz.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 codec: str,
                 compression_level: int):
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "compression_level", compression_level)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> int:
        return pulumi.get(self, "compression_level")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionLevel":
            suggest = "compression_level"
        elif key == "includeChecksum":
            suggest = "include_checksum"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 codec: str,
                 compression_level: int,
                 include_checksum: Optional[bool] = None):
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "compression_level", compression_level)
        if include_checksum is not None:
            pulumi.set(__self__, "include_checksum", include_checksum)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> int:
        return pulumi.get(self, "compression_level")

    @property
    @pulumi.getter(name="includeChecksum")
    def include_checksum(self) -> Optional[bool]:
        return pulumi.get(self, "include_checksum")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValues(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatType":
            suggest = "format_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValues. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValues.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValues.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 flattening: str,
                 format_type: str,
                 compression: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompression'] = None):
        pulumi.set(__self__, "flattening", flattening)
        pulumi.set(__self__, "format_type", format_type)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)

    @property
    @pulumi.getter
    def flattening(self) -> str:
        return pulumi.get(self, "flattening")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter
    def compression(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompression']:
        return pulumi.get(self, "compression")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompression(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip":
            suggest = "destination_s3_update_output_format_csv_comma_separated_values_compression_gzip"
        elif key == "destinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression":
            suggest = "destination_s3_update_output_format_csv_comma_separated_values_compression_no_compression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompression. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompression.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompression.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_s3_update_output_format_csv_comma_separated_values_compression_gzip: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip'] = None,
                 destination_s3_update_output_format_csv_comma_separated_values_compression_no_compression: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression'] = None):
        if destination_s3_update_output_format_csv_comma_separated_values_compression_gzip is not None:
            pulumi.set(__self__, "destination_s3_update_output_format_csv_comma_separated_values_compression_gzip", destination_s3_update_output_format_csv_comma_separated_values_compression_gzip)
        if destination_s3_update_output_format_csv_comma_separated_values_compression_no_compression is not None:
            pulumi.set(__self__, "destination_s3_update_output_format_csv_comma_separated_values_compression_no_compression", destination_s3_update_output_format_csv_comma_separated_values_compression_no_compression)

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip")
    def destination_s3_update_output_format_csv_comma_separated_values_compression_gzip(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip']:
        return pulumi.get(self, "destination_s3_update_output_format_csv_comma_separated_values_compression_gzip")

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression")
    def destination_s3_update_output_format_csv_comma_separated_values_compression_no_compression(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression']:
        return pulumi.get(self, "destination_s3_update_output_format_csv_comma_separated_values_compression_no_compression")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionType":
            suggest = "compression_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compression_type: Optional[str] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionType":
            suggest = "compression_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compression_type: Optional[str] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJson(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatType":
            suggest = "format_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJson. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJson.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJson.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format_type: str,
                 compression: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression'] = None,
                 flattening: Optional[str] = None):
        pulumi.set(__self__, "format_type", format_type)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if flattening is not None:
            pulumi.set(__self__, "flattening", flattening)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter
    def compression(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression']:
        return pulumi.get(self, "compression")

    @property
    @pulumi.getter
    def flattening(self) -> Optional[str]:
        return pulumi.get(self, "flattening")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip":
            suggest = "destination_s3_update_output_format_json_lines_newline_delimited_json_compression_gzip"
        elif key == "destinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression":
            suggest = "destination_s3_update_output_format_json_lines_newline_delimited_json_compression_no_compression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_s3_update_output_format_json_lines_newline_delimited_json_compression_gzip: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip'] = None,
                 destination_s3_update_output_format_json_lines_newline_delimited_json_compression_no_compression: Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression'] = None):
        if destination_s3_update_output_format_json_lines_newline_delimited_json_compression_gzip is not None:
            pulumi.set(__self__, "destination_s3_update_output_format_json_lines_newline_delimited_json_compression_gzip", destination_s3_update_output_format_json_lines_newline_delimited_json_compression_gzip)
        if destination_s3_update_output_format_json_lines_newline_delimited_json_compression_no_compression is not None:
            pulumi.set(__self__, "destination_s3_update_output_format_json_lines_newline_delimited_json_compression_no_compression", destination_s3_update_output_format_json_lines_newline_delimited_json_compression_no_compression)

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip")
    def destination_s3_update_output_format_json_lines_newline_delimited_json_compression_gzip(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip']:
        return pulumi.get(self, "destination_s3_update_output_format_json_lines_newline_delimited_json_compression_gzip")

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression")
    def destination_s3_update_output_format_json_lines_newline_delimited_json_compression_no_compression(self) -> Optional['outputs.DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression']:
        return pulumi.get(self, "destination_s3_update_output_format_json_lines_newline_delimited_json_compression_no_compression")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionType":
            suggest = "compression_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compression_type: Optional[str] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionType":
            suggest = "compression_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compression_type: Optional[str] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatParquetColumnarStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatType":
            suggest = "format_type"
        elif key == "blockSizeMb":
            suggest = "block_size_mb"
        elif key == "compressionCodec":
            suggest = "compression_codec"
        elif key == "dictionaryEncoding":
            suggest = "dictionary_encoding"
        elif key == "dictionaryPageSizeKb":
            suggest = "dictionary_page_size_kb"
        elif key == "maxPaddingSizeMb":
            suggest = "max_padding_size_mb"
        elif key == "pageSizeKb":
            suggest = "page_size_kb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatParquetColumnarStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatParquetColumnarStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatParquetColumnarStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format_type: str,
                 block_size_mb: Optional[int] = None,
                 compression_codec: Optional[str] = None,
                 dictionary_encoding: Optional[bool] = None,
                 dictionary_page_size_kb: Optional[int] = None,
                 max_padding_size_mb: Optional[int] = None,
                 page_size_kb: Optional[int] = None):
        pulumi.set(__self__, "format_type", format_type)
        if block_size_mb is not None:
            pulumi.set(__self__, "block_size_mb", block_size_mb)
        if compression_codec is not None:
            pulumi.set(__self__, "compression_codec", compression_codec)
        if dictionary_encoding is not None:
            pulumi.set(__self__, "dictionary_encoding", dictionary_encoding)
        if dictionary_page_size_kb is not None:
            pulumi.set(__self__, "dictionary_page_size_kb", dictionary_page_size_kb)
        if max_padding_size_mb is not None:
            pulumi.set(__self__, "max_padding_size_mb", max_padding_size_mb)
        if page_size_kb is not None:
            pulumi.set(__self__, "page_size_kb", page_size_kb)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter(name="blockSizeMb")
    def block_size_mb(self) -> Optional[int]:
        return pulumi.get(self, "block_size_mb")

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> Optional[str]:
        return pulumi.get(self, "compression_codec")

    @property
    @pulumi.getter(name="dictionaryEncoding")
    def dictionary_encoding(self) -> Optional[bool]:
        return pulumi.get(self, "dictionary_encoding")

    @property
    @pulumi.getter(name="dictionaryPageSizeKb")
    def dictionary_page_size_kb(self) -> Optional[int]:
        return pulumi.get(self, "dictionary_page_size_kb")

    @property
    @pulumi.getter(name="maxPaddingSizeMb")
    def max_padding_size_mb(self) -> Optional[int]:
        return pulumi.get(self, "max_padding_size_mb")

    @property
    @pulumi.getter(name="pageSizeKb")
    def page_size_kb(self) -> Optional[int]:
        return pulumi.get(self, "page_size_kb")


@pulumi.output_type
class DestinationS3GlueConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "glueDatabase":
            suggest = "glue_database"
        elif key == "glueSerializationLibrary":
            suggest = "glue_serialization_library"
        elif key == "s3BucketName":
            suggest = "s3_bucket_name"
        elif key == "s3BucketPath":
            suggest = "s3_bucket_path"
        elif key == "s3BucketRegion":
            suggest = "s3_bucket_region"
        elif key == "accessKeyId":
            suggest = "access_key_id"
        elif key == "fileNamePattern":
            suggest = "file_name_pattern"
        elif key == "s3Endpoint":
            suggest = "s3_endpoint"
        elif key == "s3PathFormat":
            suggest = "s3_path_format"
        elif key == "secretAccessKey":
            suggest = "secret_access_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3GlueConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3GlueConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3GlueConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_type: str,
                 format: 'outputs.DestinationS3GlueConfigurationFormat',
                 glue_database: str,
                 glue_serialization_library: str,
                 s3_bucket_name: str,
                 s3_bucket_path: str,
                 s3_bucket_region: str,
                 access_key_id: Optional[str] = None,
                 file_name_pattern: Optional[str] = None,
                 s3_endpoint: Optional[str] = None,
                 s3_path_format: Optional[str] = None,
                 secret_access_key: Optional[str] = None):
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "glue_database", glue_database)
        pulumi.set(__self__, "glue_serialization_library", glue_serialization_library)
        pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)
        pulumi.set(__self__, "s3_bucket_path", s3_bucket_path)
        pulumi.set(__self__, "s3_bucket_region", s3_bucket_region)
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if file_name_pattern is not None:
            pulumi.set(__self__, "file_name_pattern", file_name_pattern)
        if s3_endpoint is not None:
            pulumi.set(__self__, "s3_endpoint", s3_endpoint)
        if s3_path_format is not None:
            pulumi.set(__self__, "s3_path_format", s3_path_format)
        if secret_access_key is not None:
            pulumi.set(__self__, "secret_access_key", secret_access_key)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def format(self) -> 'outputs.DestinationS3GlueConfigurationFormat':
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="glueDatabase")
    def glue_database(self) -> str:
        return pulumi.get(self, "glue_database")

    @property
    @pulumi.getter(name="glueSerializationLibrary")
    def glue_serialization_library(self) -> str:
        return pulumi.get(self, "glue_serialization_library")

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> str:
        return pulumi.get(self, "s3_bucket_name")

    @property
    @pulumi.getter(name="s3BucketPath")
    def s3_bucket_path(self) -> str:
        return pulumi.get(self, "s3_bucket_path")

    @property
    @pulumi.getter(name="s3BucketRegion")
    def s3_bucket_region(self) -> str:
        return pulumi.get(self, "s3_bucket_region")

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> Optional[str]:
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="fileNamePattern")
    def file_name_pattern(self) -> Optional[str]:
        return pulumi.get(self, "file_name_pattern")

    @property
    @pulumi.getter(name="s3Endpoint")
    def s3_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "s3_endpoint")

    @property
    @pulumi.getter(name="s3PathFormat")
    def s3_path_format(self) -> Optional[str]:
        return pulumi.get(self, "s3_path_format")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_access_key")


@pulumi.output_type
class DestinationS3GlueConfigurationFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationS3GlueOutputFormatJsonLinesNewlineDelimitedJson":
            suggest = "destination_s3_glue_output_format_json_lines_newline_delimited_json"
        elif key == "destinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJson":
            suggest = "destination_s3_glue_update_output_format_json_lines_newline_delimited_json"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3GlueConfigurationFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3GlueConfigurationFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3GlueConfigurationFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_s3_glue_output_format_json_lines_newline_delimited_json: Optional['outputs.DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJson'] = None,
                 destination_s3_glue_update_output_format_json_lines_newline_delimited_json: Optional['outputs.DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJson'] = None):
        if destination_s3_glue_output_format_json_lines_newline_delimited_json is not None:
            pulumi.set(__self__, "destination_s3_glue_output_format_json_lines_newline_delimited_json", destination_s3_glue_output_format_json_lines_newline_delimited_json)
        if destination_s3_glue_update_output_format_json_lines_newline_delimited_json is not None:
            pulumi.set(__self__, "destination_s3_glue_update_output_format_json_lines_newline_delimited_json", destination_s3_glue_update_output_format_json_lines_newline_delimited_json)

    @property
    @pulumi.getter(name="destinationS3GlueOutputFormatJsonLinesNewlineDelimitedJson")
    def destination_s3_glue_output_format_json_lines_newline_delimited_json(self) -> Optional['outputs.DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJson']:
        return pulumi.get(self, "destination_s3_glue_output_format_json_lines_newline_delimited_json")

    @property
    @pulumi.getter(name="destinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJson")
    def destination_s3_glue_update_output_format_json_lines_newline_delimited_json(self) -> Optional['outputs.DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJson']:
        return pulumi.get(self, "destination_s3_glue_update_output_format_json_lines_newline_delimited_json")


@pulumi.output_type
class DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJson(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatType":
            suggest = "format_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJson. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJson.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJson.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format_type: str,
                 compression: Optional['outputs.DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompression'] = None,
                 flattening: Optional[str] = None):
        pulumi.set(__self__, "format_type", format_type)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if flattening is not None:
            pulumi.set(__self__, "flattening", flattening)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter
    def compression(self) -> Optional['outputs.DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompression']:
        return pulumi.get(self, "compression")

    @property
    @pulumi.getter
    def flattening(self) -> Optional[str]:
        return pulumi.get(self, "flattening")


@pulumi.output_type
class DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompression(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip":
            suggest = "destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_gzip"
        elif key == "destinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression":
            suggest = "destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_no_compression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompression. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompression.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompression.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_gzip: Optional['outputs.DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip'] = None,
                 destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_no_compression: Optional['outputs.DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression'] = None):
        if destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_gzip is not None:
            pulumi.set(__self__, "destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_gzip", destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_gzip)
        if destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_no_compression is not None:
            pulumi.set(__self__, "destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_no_compression", destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_no_compression)

    @property
    @pulumi.getter(name="destinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip")
    def destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_gzip(self) -> Optional['outputs.DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip']:
        return pulumi.get(self, "destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_gzip")

    @property
    @pulumi.getter(name="destinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression")
    def destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_no_compression(self) -> Optional['outputs.DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression']:
        return pulumi.get(self, "destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_no_compression")


@pulumi.output_type
class DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionType":
            suggest = "compression_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compression_type: Optional[str] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionType":
            suggest = "compression_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compression_type: Optional[str] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJson(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatType":
            suggest = "format_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJson. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJson.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJson.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format_type: str,
                 compression: Optional['outputs.DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression'] = None,
                 flattening: Optional[str] = None):
        pulumi.set(__self__, "format_type", format_type)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if flattening is not None:
            pulumi.set(__self__, "flattening", flattening)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter
    def compression(self) -> Optional['outputs.DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression']:
        return pulumi.get(self, "compression")

    @property
    @pulumi.getter
    def flattening(self) -> Optional[str]:
        return pulumi.get(self, "flattening")


@pulumi.output_type
class DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip":
            suggest = "destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_gzip"
        elif key == "destinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression":
            suggest = "destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_no_compression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompression.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_gzip: Optional['outputs.DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip'] = None,
                 destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_no_compression: Optional['outputs.DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression'] = None):
        if destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_gzip is not None:
            pulumi.set(__self__, "destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_gzip", destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_gzip)
        if destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_no_compression is not None:
            pulumi.set(__self__, "destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_no_compression", destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_no_compression)

    @property
    @pulumi.getter(name="destinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip")
    def destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_gzip(self) -> Optional['outputs.DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip']:
        return pulumi.get(self, "destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_gzip")

    @property
    @pulumi.getter(name="destinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression")
    def destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_no_compression(self) -> Optional['outputs.DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression']:
        return pulumi.get(self, "destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_no_compression")


@pulumi.output_type
class DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionType":
            suggest = "compression_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compression_type: Optional[str] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionType":
            suggest = "compression_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compression_type: Optional[str] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class DestinationSftpJsonConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationPath":
            suggest = "destination_path"
        elif key == "destinationType":
            suggest = "destination_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationSftpJsonConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationSftpJsonConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationSftpJsonConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_path: str,
                 destination_type: str,
                 host: str,
                 password: str,
                 username: str,
                 port: Optional[int] = None):
        pulumi.set(__self__, "destination_path", destination_path)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> str:
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class DestinationSnowflakeConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "jdbcUrlParams":
            suggest = "jdbc_url_params"
        elif key == "rawDataSchema":
            suggest = "raw_data_schema"
        elif key == "use1s1tFormat":
            suggest = "use1s1t_format"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationSnowflakeConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationSnowflakeConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationSnowflakeConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: str,
                 destination_type: str,
                 host: str,
                 role: str,
                 schema: str,
                 username: str,
                 warehouse: str,
                 credentials: Optional['outputs.DestinationSnowflakeConfigurationCredentials'] = None,
                 jdbc_url_params: Optional[str] = None,
                 raw_data_schema: Optional[str] = None,
                 use1s1t_format: Optional[bool] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "username", username)
        pulumi.set(__self__, "warehouse", warehouse)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if raw_data_schema is not None:
            pulumi.set(__self__, "raw_data_schema", raw_data_schema)
        if use1s1t_format is not None:
            pulumi.set(__self__, "use1s1t_format", use1s1t_format)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def warehouse(self) -> str:
        return pulumi.get(self, "warehouse")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.DestinationSnowflakeConfigurationCredentials']:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[str]:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter(name="rawDataSchema")
    def raw_data_schema(self) -> Optional[str]:
        return pulumi.get(self, "raw_data_schema")

    @property
    @pulumi.getter(name="use1s1tFormat")
    def use1s1t_format(self) -> Optional[bool]:
        return pulumi.get(self, "use1s1t_format")


@pulumi.output_type
class DestinationSnowflakeConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationSnowflakeAuthorizationMethodKeyPairAuthentication":
            suggest = "destination_snowflake_authorization_method_key_pair_authentication"
        elif key == "destinationSnowflakeAuthorizationMethodOAuth20":
            suggest = "destination_snowflake_authorization_method_o_auth20"
        elif key == "destinationSnowflakeAuthorizationMethodUsernameAndPassword":
            suggest = "destination_snowflake_authorization_method_username_and_password"
        elif key == "destinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication":
            suggest = "destination_snowflake_update_authorization_method_key_pair_authentication"
        elif key == "destinationSnowflakeUpdateAuthorizationMethodOAuth20":
            suggest = "destination_snowflake_update_authorization_method_o_auth20"
        elif key == "destinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword":
            suggest = "destination_snowflake_update_authorization_method_username_and_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationSnowflakeConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationSnowflakeConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationSnowflakeConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_snowflake_authorization_method_key_pair_authentication: Optional['outputs.DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthentication'] = None,
                 destination_snowflake_authorization_method_o_auth20: Optional['outputs.DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20'] = None,
                 destination_snowflake_authorization_method_username_and_password: Optional['outputs.DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPassword'] = None,
                 destination_snowflake_update_authorization_method_key_pair_authentication: Optional['outputs.DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication'] = None,
                 destination_snowflake_update_authorization_method_o_auth20: Optional['outputs.DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20'] = None,
                 destination_snowflake_update_authorization_method_username_and_password: Optional['outputs.DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword'] = None):
        if destination_snowflake_authorization_method_key_pair_authentication is not None:
            pulumi.set(__self__, "destination_snowflake_authorization_method_key_pair_authentication", destination_snowflake_authorization_method_key_pair_authentication)
        if destination_snowflake_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "destination_snowflake_authorization_method_o_auth20", destination_snowflake_authorization_method_o_auth20)
        if destination_snowflake_authorization_method_username_and_password is not None:
            pulumi.set(__self__, "destination_snowflake_authorization_method_username_and_password", destination_snowflake_authorization_method_username_and_password)
        if destination_snowflake_update_authorization_method_key_pair_authentication is not None:
            pulumi.set(__self__, "destination_snowflake_update_authorization_method_key_pair_authentication", destination_snowflake_update_authorization_method_key_pair_authentication)
        if destination_snowflake_update_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "destination_snowflake_update_authorization_method_o_auth20", destination_snowflake_update_authorization_method_o_auth20)
        if destination_snowflake_update_authorization_method_username_and_password is not None:
            pulumi.set(__self__, "destination_snowflake_update_authorization_method_username_and_password", destination_snowflake_update_authorization_method_username_and_password)

    @property
    @pulumi.getter(name="destinationSnowflakeAuthorizationMethodKeyPairAuthentication")
    def destination_snowflake_authorization_method_key_pair_authentication(self) -> Optional['outputs.DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthentication']:
        return pulumi.get(self, "destination_snowflake_authorization_method_key_pair_authentication")

    @property
    @pulumi.getter(name="destinationSnowflakeAuthorizationMethodOAuth20")
    def destination_snowflake_authorization_method_o_auth20(self) -> Optional['outputs.DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20']:
        return pulumi.get(self, "destination_snowflake_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="destinationSnowflakeAuthorizationMethodUsernameAndPassword")
    def destination_snowflake_authorization_method_username_and_password(self) -> Optional['outputs.DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPassword']:
        return pulumi.get(self, "destination_snowflake_authorization_method_username_and_password")

    @property
    @pulumi.getter(name="destinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication")
    def destination_snowflake_update_authorization_method_key_pair_authentication(self) -> Optional['outputs.DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication']:
        return pulumi.get(self, "destination_snowflake_update_authorization_method_key_pair_authentication")

    @property
    @pulumi.getter(name="destinationSnowflakeUpdateAuthorizationMethodOAuth20")
    def destination_snowflake_update_authorization_method_o_auth20(self) -> Optional['outputs.DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20']:
        return pulumi.get(self, "destination_snowflake_update_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="destinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword")
    def destination_snowflake_update_authorization_method_username_and_password(self) -> Optional['outputs.DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword']:
        return pulumi.get(self, "destination_snowflake_update_authorization_method_username_and_password")


@pulumi.output_type
class DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateKey":
            suggest = "private_key"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "privateKeyPassword":
            suggest = "private_key_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 private_key: str,
                 auth_type: Optional[str] = None,
                 private_key_password: Optional[str] = None):
        pulumi.set(__self__, "private_key", private_key)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if private_key_password is not None:
            pulumi.set(__self__, "private_key_password", private_key_password)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> str:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="privateKeyPassword")
    def private_key_password(self) -> Optional[str]:
        return pulumi.get(self, "private_key_password")


@pulumi.output_type
class DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 refresh_token: str,
                 auth_type: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPassword(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPassword. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPassword.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPassword.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "password", password)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateKey":
            suggest = "private_key"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "privateKeyPassword":
            suggest = "private_key_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 private_key: str,
                 auth_type: Optional[str] = None,
                 private_key_password: Optional[str] = None):
        pulumi.set(__self__, "private_key", private_key)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if private_key_password is not None:
            pulumi.set(__self__, "private_key_password", private_key_password)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> str:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="privateKeyPassword")
    def private_key_password(self) -> Optional[str]:
        return pulumi.get(self, "private_key_password")


@pulumi.output_type
class DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 refresh_token: str,
                 auth_type: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "password", password)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class DestinationTimeplusConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationTimeplusConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationTimeplusConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationTimeplusConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apikey: str,
                 destination_type: str,
                 endpoint: str):
        pulumi.set(__self__, "apikey", apikey)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "endpoint", endpoint)

    @property
    @pulumi.getter
    def apikey(self) -> str:
        return pulumi.get(self, "apikey")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")


@pulumi.output_type
class DestinationTypesenseConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "destinationType":
            suggest = "destination_type"
        elif key == "batchSize":
            suggest = "batch_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationTypesenseConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationTypesenseConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationTypesenseConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 destination_type: str,
                 host: str,
                 batch_size: Optional[str] = None,
                 port: Optional[str] = None,
                 protocol: Optional[str] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        if batch_size is not None:
            pulumi.set(__self__, "batch_size", batch_size)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[str]:
        return pulumi.get(self, "batch_size")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class DestinationVerticaConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "jdbcUrlParams":
            suggest = "jdbc_url_params"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationVerticaConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationVerticaConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationVerticaConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: str,
                 destination_type: str,
                 host: str,
                 port: int,
                 schema: str,
                 username: str,
                 jdbc_url_params: Optional[str] = None,
                 password: Optional[str] = None,
                 tunnel_method: Optional['outputs.DestinationVerticaConfigurationTunnelMethod'] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "username", username)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[str]:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional['outputs.DestinationVerticaConfigurationTunnelMethod']:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class DestinationVerticaConfigurationTunnelMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationVerticaSshTunnelMethodNoTunnel":
            suggest = "destination_vertica_ssh_tunnel_method_no_tunnel"
        elif key == "destinationVerticaSshTunnelMethodPasswordAuthentication":
            suggest = "destination_vertica_ssh_tunnel_method_password_authentication"
        elif key == "destinationVerticaSshTunnelMethodSshKeyAuthentication":
            suggest = "destination_vertica_ssh_tunnel_method_ssh_key_authentication"
        elif key == "destinationVerticaUpdateSshTunnelMethodNoTunnel":
            suggest = "destination_vertica_update_ssh_tunnel_method_no_tunnel"
        elif key == "destinationVerticaUpdateSshTunnelMethodPasswordAuthentication":
            suggest = "destination_vertica_update_ssh_tunnel_method_password_authentication"
        elif key == "destinationVerticaUpdateSshTunnelMethodSshKeyAuthentication":
            suggest = "destination_vertica_update_ssh_tunnel_method_ssh_key_authentication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationVerticaConfigurationTunnelMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationVerticaConfigurationTunnelMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationVerticaConfigurationTunnelMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_vertica_ssh_tunnel_method_no_tunnel: Optional['outputs.DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodNoTunnel'] = None,
                 destination_vertica_ssh_tunnel_method_password_authentication: Optional['outputs.DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodPasswordAuthentication'] = None,
                 destination_vertica_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodSshKeyAuthentication'] = None,
                 destination_vertica_update_ssh_tunnel_method_no_tunnel: Optional['outputs.DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodNoTunnel'] = None,
                 destination_vertica_update_ssh_tunnel_method_password_authentication: Optional['outputs.DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodPasswordAuthentication'] = None,
                 destination_vertica_update_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodSshKeyAuthentication'] = None):
        if destination_vertica_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_vertica_ssh_tunnel_method_no_tunnel", destination_vertica_ssh_tunnel_method_no_tunnel)
        if destination_vertica_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_vertica_ssh_tunnel_method_password_authentication", destination_vertica_ssh_tunnel_method_password_authentication)
        if destination_vertica_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_vertica_ssh_tunnel_method_ssh_key_authentication", destination_vertica_ssh_tunnel_method_ssh_key_authentication)
        if destination_vertica_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_vertica_update_ssh_tunnel_method_no_tunnel", destination_vertica_update_ssh_tunnel_method_no_tunnel)
        if destination_vertica_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_vertica_update_ssh_tunnel_method_password_authentication", destination_vertica_update_ssh_tunnel_method_password_authentication)
        if destination_vertica_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_vertica_update_ssh_tunnel_method_ssh_key_authentication", destination_vertica_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="destinationVerticaSshTunnelMethodNoTunnel")
    def destination_vertica_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "destination_vertica_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationVerticaSshTunnelMethodPasswordAuthentication")
    def destination_vertica_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "destination_vertica_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationVerticaSshTunnelMethodSshKeyAuthentication")
    def destination_vertica_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "destination_vertica_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="destinationVerticaUpdateSshTunnelMethodNoTunnel")
    def destination_vertica_update_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "destination_vertica_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationVerticaUpdateSshTunnelMethodPasswordAuthentication")
    def destination_vertica_update_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "destination_vertica_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationVerticaUpdateSshTunnelMethodSshKeyAuthentication")
    def destination_vertica_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "destination_vertica_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class DestinationXataConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "dbUrl":
            suggest = "db_url"
        elif key == "destinationType":
            suggest = "destination_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationXataConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationXataConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationXataConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 db_url: str,
                 destination_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "db_url", db_url)
        pulumi.set(__self__, "destination_type", destination_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="dbUrl")
    def db_url(self) -> str:
        return pulumi.get(self, "db_url")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")


@pulumi.output_type
class SourceAhaConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAhaConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAhaConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAhaConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 source_type: str,
                 url: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class SourceAircallConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiId":
            suggest = "api_id"
        elif key == "apiToken":
            suggest = "api_token"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAircallConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAircallConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAircallConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_id: str,
                 api_token: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "api_id", api_id)
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiId")
    def api_id(self) -> str:
        return pulumi.get(self, "api_id")

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceAirtableConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAirtableConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAirtableConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAirtableConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials: Optional['outputs.SourceAirtableConfigurationCredentials'] = None,
                 source_type: Optional[str] = None):
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourceAirtableConfigurationCredentials']:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceAirtableConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceAirtableAuthenticationOAuth20":
            suggest = "source_airtable_authentication_o_auth20"
        elif key == "sourceAirtableAuthenticationPersonalAccessToken":
            suggest = "source_airtable_authentication_personal_access_token"
        elif key == "sourceAirtableUpdateAuthenticationOAuth20":
            suggest = "source_airtable_update_authentication_o_auth20"
        elif key == "sourceAirtableUpdateAuthenticationPersonalAccessToken":
            suggest = "source_airtable_update_authentication_personal_access_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAirtableConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAirtableConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAirtableConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_airtable_authentication_o_auth20: Optional['outputs.SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationOAuth20'] = None,
                 source_airtable_authentication_personal_access_token: Optional['outputs.SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationPersonalAccessToken'] = None,
                 source_airtable_update_authentication_o_auth20: Optional['outputs.SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationOAuth20'] = None,
                 source_airtable_update_authentication_personal_access_token: Optional['outputs.SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationPersonalAccessToken'] = None):
        if source_airtable_authentication_o_auth20 is not None:
            pulumi.set(__self__, "source_airtable_authentication_o_auth20", source_airtable_authentication_o_auth20)
        if source_airtable_authentication_personal_access_token is not None:
            pulumi.set(__self__, "source_airtable_authentication_personal_access_token", source_airtable_authentication_personal_access_token)
        if source_airtable_update_authentication_o_auth20 is not None:
            pulumi.set(__self__, "source_airtable_update_authentication_o_auth20", source_airtable_update_authentication_o_auth20)
        if source_airtable_update_authentication_personal_access_token is not None:
            pulumi.set(__self__, "source_airtable_update_authentication_personal_access_token", source_airtable_update_authentication_personal_access_token)

    @property
    @pulumi.getter(name="sourceAirtableAuthenticationOAuth20")
    def source_airtable_authentication_o_auth20(self) -> Optional['outputs.SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationOAuth20']:
        return pulumi.get(self, "source_airtable_authentication_o_auth20")

    @property
    @pulumi.getter(name="sourceAirtableAuthenticationPersonalAccessToken")
    def source_airtable_authentication_personal_access_token(self) -> Optional['outputs.SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationPersonalAccessToken']:
        return pulumi.get(self, "source_airtable_authentication_personal_access_token")

    @property
    @pulumi.getter(name="sourceAirtableUpdateAuthenticationOAuth20")
    def source_airtable_update_authentication_o_auth20(self) -> Optional['outputs.SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationOAuth20']:
        return pulumi.get(self, "source_airtable_update_authentication_o_auth20")

    @property
    @pulumi.getter(name="sourceAirtableUpdateAuthenticationPersonalAccessToken")
    def source_airtable_update_authentication_personal_access_token(self) -> Optional['outputs.SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationPersonalAccessToken']:
        return pulumi.get(self, "source_airtable_update_authentication_personal_access_token")


@pulumi.output_type
class SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "accessToken":
            suggest = "access_token"
        elif key == "authMethod":
            suggest = "auth_method"
        elif key == "tokenExpiryDate":
            suggest = "token_expiry_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 access_token: Optional[str] = None,
                 auth_method: Optional[str] = None,
                 token_expiry_date: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)
        if token_expiry_date is not None:
            pulumi.set(__self__, "token_expiry_date", token_expiry_date)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[str]:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[str]:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> Optional[str]:
        return pulumi.get(self, "token_expiry_date")


@pulumi.output_type
class SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationPersonalAccessToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "authMethod":
            suggest = "auth_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationPersonalAccessToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationPersonalAccessToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationPersonalAccessToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 auth_method: Optional[str] = None):
        pulumi.set(__self__, "api_key", api_key)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[str]:
        return pulumi.get(self, "auth_method")


@pulumi.output_type
class SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "accessToken":
            suggest = "access_token"
        elif key == "authMethod":
            suggest = "auth_method"
        elif key == "tokenExpiryDate":
            suggest = "token_expiry_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 access_token: Optional[str] = None,
                 auth_method: Optional[str] = None,
                 token_expiry_date: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)
        if token_expiry_date is not None:
            pulumi.set(__self__, "token_expiry_date", token_expiry_date)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[str]:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[str]:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> Optional[str]:
        return pulumi.get(self, "token_expiry_date")


@pulumi.output_type
class SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationPersonalAccessToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "authMethod":
            suggest = "auth_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationPersonalAccessToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationPersonalAccessToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationPersonalAccessToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 auth_method: Optional[str] = None):
        pulumi.set(__self__, "api_key", api_key)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[str]:
        return pulumi.get(self, "auth_method")


@pulumi.output_type
class SourceAlloydbConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "jdbcUrlParams":
            suggest = "jdbc_url_params"
        elif key == "replicationMethod":
            suggest = "replication_method"
        elif key == "sslMode":
            suggest = "ssl_mode"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAlloydbConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAlloydbConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAlloydbConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: str,
                 host: str,
                 port: int,
                 source_type: str,
                 username: str,
                 jdbc_url_params: Optional[str] = None,
                 password: Optional[str] = None,
                 replication_method: Optional['outputs.SourceAlloydbConfigurationReplicationMethod'] = None,
                 schemas: Optional[Sequence[str]] = None,
                 ssl_mode: Optional['outputs.SourceAlloydbConfigurationSslMode'] = None,
                 tunnel_method: Optional['outputs.SourceAlloydbConfigurationTunnelMethod'] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "username", username)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if replication_method is not None:
            pulumi.set(__self__, "replication_method", replication_method)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if ssl_mode is not None:
            pulumi.set(__self__, "ssl_mode", ssl_mode)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[str]:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="replicationMethod")
    def replication_method(self) -> Optional['outputs.SourceAlloydbConfigurationReplicationMethod']:
        return pulumi.get(self, "replication_method")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional['outputs.SourceAlloydbConfigurationSslMode']:
        return pulumi.get(self, "ssl_mode")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional['outputs.SourceAlloydbConfigurationTunnelMethod']:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class SourceAlloydbConfigurationReplicationMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceAlloydbReplicationMethodLogicalReplicationCdc":
            suggest = "source_alloydb_replication_method_logical_replication_cdc"
        elif key == "sourceAlloydbReplicationMethodStandard":
            suggest = "source_alloydb_replication_method_standard"
        elif key == "sourceAlloydbReplicationMethodStandardXmin":
            suggest = "source_alloydb_replication_method_standard_xmin"
        elif key == "sourceAlloydbUpdateReplicationMethodLogicalReplicationCdc":
            suggest = "source_alloydb_update_replication_method_logical_replication_cdc"
        elif key == "sourceAlloydbUpdateReplicationMethodStandard":
            suggest = "source_alloydb_update_replication_method_standard"
        elif key == "sourceAlloydbUpdateReplicationMethodStandardXmin":
            suggest = "source_alloydb_update_replication_method_standard_xmin"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAlloydbConfigurationReplicationMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAlloydbConfigurationReplicationMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAlloydbConfigurationReplicationMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_alloydb_replication_method_logical_replication_cdc: Optional['outputs.SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodLogicalReplicationCdc'] = None,
                 source_alloydb_replication_method_standard: Optional['outputs.SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandard'] = None,
                 source_alloydb_replication_method_standard_xmin: Optional['outputs.SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardXmin'] = None,
                 source_alloydb_update_replication_method_logical_replication_cdc: Optional['outputs.SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodLogicalReplicationCdc'] = None,
                 source_alloydb_update_replication_method_standard: Optional['outputs.SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandard'] = None,
                 source_alloydb_update_replication_method_standard_xmin: Optional['outputs.SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardXmin'] = None):
        if source_alloydb_replication_method_logical_replication_cdc is not None:
            pulumi.set(__self__, "source_alloydb_replication_method_logical_replication_cdc", source_alloydb_replication_method_logical_replication_cdc)
        if source_alloydb_replication_method_standard is not None:
            pulumi.set(__self__, "source_alloydb_replication_method_standard", source_alloydb_replication_method_standard)
        if source_alloydb_replication_method_standard_xmin is not None:
            pulumi.set(__self__, "source_alloydb_replication_method_standard_xmin", source_alloydb_replication_method_standard_xmin)
        if source_alloydb_update_replication_method_logical_replication_cdc is not None:
            pulumi.set(__self__, "source_alloydb_update_replication_method_logical_replication_cdc", source_alloydb_update_replication_method_logical_replication_cdc)
        if source_alloydb_update_replication_method_standard is not None:
            pulumi.set(__self__, "source_alloydb_update_replication_method_standard", source_alloydb_update_replication_method_standard)
        if source_alloydb_update_replication_method_standard_xmin is not None:
            pulumi.set(__self__, "source_alloydb_update_replication_method_standard_xmin", source_alloydb_update_replication_method_standard_xmin)

    @property
    @pulumi.getter(name="sourceAlloydbReplicationMethodLogicalReplicationCdc")
    def source_alloydb_replication_method_logical_replication_cdc(self) -> Optional['outputs.SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodLogicalReplicationCdc']:
        return pulumi.get(self, "source_alloydb_replication_method_logical_replication_cdc")

    @property
    @pulumi.getter(name="sourceAlloydbReplicationMethodStandard")
    def source_alloydb_replication_method_standard(self) -> Optional['outputs.SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandard']:
        return pulumi.get(self, "source_alloydb_replication_method_standard")

    @property
    @pulumi.getter(name="sourceAlloydbReplicationMethodStandardXmin")
    def source_alloydb_replication_method_standard_xmin(self) -> Optional['outputs.SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardXmin']:
        return pulumi.get(self, "source_alloydb_replication_method_standard_xmin")

    @property
    @pulumi.getter(name="sourceAlloydbUpdateReplicationMethodLogicalReplicationCdc")
    def source_alloydb_update_replication_method_logical_replication_cdc(self) -> Optional['outputs.SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodLogicalReplicationCdc']:
        return pulumi.get(self, "source_alloydb_update_replication_method_logical_replication_cdc")

    @property
    @pulumi.getter(name="sourceAlloydbUpdateReplicationMethodStandard")
    def source_alloydb_update_replication_method_standard(self) -> Optional['outputs.SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandard']:
        return pulumi.get(self, "source_alloydb_update_replication_method_standard")

    @property
    @pulumi.getter(name="sourceAlloydbUpdateReplicationMethodStandardXmin")
    def source_alloydb_update_replication_method_standard_xmin(self) -> Optional['outputs.SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardXmin']:
        return pulumi.get(self, "source_alloydb_update_replication_method_standard_xmin")


@pulumi.output_type
class SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodLogicalReplicationCdc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "replicationSlot":
            suggest = "replication_slot"
        elif key == "additionalProperties":
            suggest = "additional_properties"
        elif key == "initialWaitingSeconds":
            suggest = "initial_waiting_seconds"
        elif key == "lsnCommitBehaviour":
            suggest = "lsn_commit_behaviour"
        elif key == "queueSize":
            suggest = "queue_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodLogicalReplicationCdc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodLogicalReplicationCdc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodLogicalReplicationCdc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 method: str,
                 publication: str,
                 replication_slot: str,
                 additional_properties: Optional[str] = None,
                 initial_waiting_seconds: Optional[int] = None,
                 lsn_commit_behaviour: Optional[str] = None,
                 plugin: Optional[str] = None,
                 queue_size: Optional[int] = None):
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "publication", publication)
        pulumi.set(__self__, "replication_slot", replication_slot)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if initial_waiting_seconds is not None:
            pulumi.set(__self__, "initial_waiting_seconds", initial_waiting_seconds)
        if lsn_commit_behaviour is not None:
            pulumi.set(__self__, "lsn_commit_behaviour", lsn_commit_behaviour)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if queue_size is not None:
            pulumi.set(__self__, "queue_size", queue_size)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def publication(self) -> str:
        return pulumi.get(self, "publication")

    @property
    @pulumi.getter(name="replicationSlot")
    def replication_slot(self) -> str:
        return pulumi.get(self, "replication_slot")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter(name="initialWaitingSeconds")
    def initial_waiting_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_waiting_seconds")

    @property
    @pulumi.getter(name="lsnCommitBehaviour")
    def lsn_commit_behaviour(self) -> Optional[str]:
        return pulumi.get(self, "lsn_commit_behaviour")

    @property
    @pulumi.getter
    def plugin(self) -> Optional[str]:
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter(name="queueSize")
    def queue_size(self) -> Optional[int]:
        return pulumi.get(self, "queue_size")


@pulumi.output_type
class SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandard(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardXmin(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodLogicalReplicationCdc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "replicationSlot":
            suggest = "replication_slot"
        elif key == "additionalProperties":
            suggest = "additional_properties"
        elif key == "initialWaitingSeconds":
            suggest = "initial_waiting_seconds"
        elif key == "lsnCommitBehaviour":
            suggest = "lsn_commit_behaviour"
        elif key == "queueSize":
            suggest = "queue_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodLogicalReplicationCdc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodLogicalReplicationCdc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodLogicalReplicationCdc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 method: str,
                 publication: str,
                 replication_slot: str,
                 additional_properties: Optional[str] = None,
                 initial_waiting_seconds: Optional[int] = None,
                 lsn_commit_behaviour: Optional[str] = None,
                 plugin: Optional[str] = None,
                 queue_size: Optional[int] = None):
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "publication", publication)
        pulumi.set(__self__, "replication_slot", replication_slot)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if initial_waiting_seconds is not None:
            pulumi.set(__self__, "initial_waiting_seconds", initial_waiting_seconds)
        if lsn_commit_behaviour is not None:
            pulumi.set(__self__, "lsn_commit_behaviour", lsn_commit_behaviour)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if queue_size is not None:
            pulumi.set(__self__, "queue_size", queue_size)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def publication(self) -> str:
        return pulumi.get(self, "publication")

    @property
    @pulumi.getter(name="replicationSlot")
    def replication_slot(self) -> str:
        return pulumi.get(self, "replication_slot")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter(name="initialWaitingSeconds")
    def initial_waiting_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_waiting_seconds")

    @property
    @pulumi.getter(name="lsnCommitBehaviour")
    def lsn_commit_behaviour(self) -> Optional[str]:
        return pulumi.get(self, "lsn_commit_behaviour")

    @property
    @pulumi.getter
    def plugin(self) -> Optional[str]:
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter(name="queueSize")
    def queue_size(self) -> Optional[int]:
        return pulumi.get(self, "queue_size")


@pulumi.output_type
class SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandard(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardXmin(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class SourceAlloydbConfigurationSslMode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceAlloydbSslModesAllow":
            suggest = "source_alloydb_ssl_modes_allow"
        elif key == "sourceAlloydbSslModesDisable":
            suggest = "source_alloydb_ssl_modes_disable"
        elif key == "sourceAlloydbSslModesPrefer":
            suggest = "source_alloydb_ssl_modes_prefer"
        elif key == "sourceAlloydbSslModesRequire":
            suggest = "source_alloydb_ssl_modes_require"
        elif key == "sourceAlloydbSslModesVerifyCa":
            suggest = "source_alloydb_ssl_modes_verify_ca"
        elif key == "sourceAlloydbSslModesVerifyFull":
            suggest = "source_alloydb_ssl_modes_verify_full"
        elif key == "sourceAlloydbUpdateSslModesAllow":
            suggest = "source_alloydb_update_ssl_modes_allow"
        elif key == "sourceAlloydbUpdateSslModesDisable":
            suggest = "source_alloydb_update_ssl_modes_disable"
        elif key == "sourceAlloydbUpdateSslModesPrefer":
            suggest = "source_alloydb_update_ssl_modes_prefer"
        elif key == "sourceAlloydbUpdateSslModesRequire":
            suggest = "source_alloydb_update_ssl_modes_require"
        elif key == "sourceAlloydbUpdateSslModesVerifyCa":
            suggest = "source_alloydb_update_ssl_modes_verify_ca"
        elif key == "sourceAlloydbUpdateSslModesVerifyFull":
            suggest = "source_alloydb_update_ssl_modes_verify_full"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAlloydbConfigurationSslMode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAlloydbConfigurationSslMode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAlloydbConfigurationSslMode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_alloydb_ssl_modes_allow: Optional['outputs.SourceAlloydbConfigurationSslModeSourceAlloydbSslModesAllow'] = None,
                 source_alloydb_ssl_modes_disable: Optional['outputs.SourceAlloydbConfigurationSslModeSourceAlloydbSslModesDisable'] = None,
                 source_alloydb_ssl_modes_prefer: Optional['outputs.SourceAlloydbConfigurationSslModeSourceAlloydbSslModesPrefer'] = None,
                 source_alloydb_ssl_modes_require: Optional['outputs.SourceAlloydbConfigurationSslModeSourceAlloydbSslModesRequire'] = None,
                 source_alloydb_ssl_modes_verify_ca: Optional['outputs.SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyCa'] = None,
                 source_alloydb_ssl_modes_verify_full: Optional['outputs.SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyFull'] = None,
                 source_alloydb_update_ssl_modes_allow: Optional['outputs.SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesAllow'] = None,
                 source_alloydb_update_ssl_modes_disable: Optional['outputs.SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesDisable'] = None,
                 source_alloydb_update_ssl_modes_prefer: Optional['outputs.SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesPrefer'] = None,
                 source_alloydb_update_ssl_modes_require: Optional['outputs.SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesRequire'] = None,
                 source_alloydb_update_ssl_modes_verify_ca: Optional['outputs.SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyCa'] = None,
                 source_alloydb_update_ssl_modes_verify_full: Optional['outputs.SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyFull'] = None):
        if source_alloydb_ssl_modes_allow is not None:
            pulumi.set(__self__, "source_alloydb_ssl_modes_allow", source_alloydb_ssl_modes_allow)
        if source_alloydb_ssl_modes_disable is not None:
            pulumi.set(__self__, "source_alloydb_ssl_modes_disable", source_alloydb_ssl_modes_disable)
        if source_alloydb_ssl_modes_prefer is not None:
            pulumi.set(__self__, "source_alloydb_ssl_modes_prefer", source_alloydb_ssl_modes_prefer)
        if source_alloydb_ssl_modes_require is not None:
            pulumi.set(__self__, "source_alloydb_ssl_modes_require", source_alloydb_ssl_modes_require)
        if source_alloydb_ssl_modes_verify_ca is not None:
            pulumi.set(__self__, "source_alloydb_ssl_modes_verify_ca", source_alloydb_ssl_modes_verify_ca)
        if source_alloydb_ssl_modes_verify_full is not None:
            pulumi.set(__self__, "source_alloydb_ssl_modes_verify_full", source_alloydb_ssl_modes_verify_full)
        if source_alloydb_update_ssl_modes_allow is not None:
            pulumi.set(__self__, "source_alloydb_update_ssl_modes_allow", source_alloydb_update_ssl_modes_allow)
        if source_alloydb_update_ssl_modes_disable is not None:
            pulumi.set(__self__, "source_alloydb_update_ssl_modes_disable", source_alloydb_update_ssl_modes_disable)
        if source_alloydb_update_ssl_modes_prefer is not None:
            pulumi.set(__self__, "source_alloydb_update_ssl_modes_prefer", source_alloydb_update_ssl_modes_prefer)
        if source_alloydb_update_ssl_modes_require is not None:
            pulumi.set(__self__, "source_alloydb_update_ssl_modes_require", source_alloydb_update_ssl_modes_require)
        if source_alloydb_update_ssl_modes_verify_ca is not None:
            pulumi.set(__self__, "source_alloydb_update_ssl_modes_verify_ca", source_alloydb_update_ssl_modes_verify_ca)
        if source_alloydb_update_ssl_modes_verify_full is not None:
            pulumi.set(__self__, "source_alloydb_update_ssl_modes_verify_full", source_alloydb_update_ssl_modes_verify_full)

    @property
    @pulumi.getter(name="sourceAlloydbSslModesAllow")
    def source_alloydb_ssl_modes_allow(self) -> Optional['outputs.SourceAlloydbConfigurationSslModeSourceAlloydbSslModesAllow']:
        return pulumi.get(self, "source_alloydb_ssl_modes_allow")

    @property
    @pulumi.getter(name="sourceAlloydbSslModesDisable")
    def source_alloydb_ssl_modes_disable(self) -> Optional['outputs.SourceAlloydbConfigurationSslModeSourceAlloydbSslModesDisable']:
        return pulumi.get(self, "source_alloydb_ssl_modes_disable")

    @property
    @pulumi.getter(name="sourceAlloydbSslModesPrefer")
    def source_alloydb_ssl_modes_prefer(self) -> Optional['outputs.SourceAlloydbConfigurationSslModeSourceAlloydbSslModesPrefer']:
        return pulumi.get(self, "source_alloydb_ssl_modes_prefer")

    @property
    @pulumi.getter(name="sourceAlloydbSslModesRequire")
    def source_alloydb_ssl_modes_require(self) -> Optional['outputs.SourceAlloydbConfigurationSslModeSourceAlloydbSslModesRequire']:
        return pulumi.get(self, "source_alloydb_ssl_modes_require")

    @property
    @pulumi.getter(name="sourceAlloydbSslModesVerifyCa")
    def source_alloydb_ssl_modes_verify_ca(self) -> Optional['outputs.SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyCa']:
        return pulumi.get(self, "source_alloydb_ssl_modes_verify_ca")

    @property
    @pulumi.getter(name="sourceAlloydbSslModesVerifyFull")
    def source_alloydb_ssl_modes_verify_full(self) -> Optional['outputs.SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyFull']:
        return pulumi.get(self, "source_alloydb_ssl_modes_verify_full")

    @property
    @pulumi.getter(name="sourceAlloydbUpdateSslModesAllow")
    def source_alloydb_update_ssl_modes_allow(self) -> Optional['outputs.SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesAllow']:
        return pulumi.get(self, "source_alloydb_update_ssl_modes_allow")

    @property
    @pulumi.getter(name="sourceAlloydbUpdateSslModesDisable")
    def source_alloydb_update_ssl_modes_disable(self) -> Optional['outputs.SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesDisable']:
        return pulumi.get(self, "source_alloydb_update_ssl_modes_disable")

    @property
    @pulumi.getter(name="sourceAlloydbUpdateSslModesPrefer")
    def source_alloydb_update_ssl_modes_prefer(self) -> Optional['outputs.SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesPrefer']:
        return pulumi.get(self, "source_alloydb_update_ssl_modes_prefer")

    @property
    @pulumi.getter(name="sourceAlloydbUpdateSslModesRequire")
    def source_alloydb_update_ssl_modes_require(self) -> Optional['outputs.SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesRequire']:
        return pulumi.get(self, "source_alloydb_update_ssl_modes_require")

    @property
    @pulumi.getter(name="sourceAlloydbUpdateSslModesVerifyCa")
    def source_alloydb_update_ssl_modes_verify_ca(self) -> Optional['outputs.SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyCa']:
        return pulumi.get(self, "source_alloydb_update_ssl_modes_verify_ca")

    @property
    @pulumi.getter(name="sourceAlloydbUpdateSslModesVerifyFull")
    def source_alloydb_update_ssl_modes_verify_full(self) -> Optional['outputs.SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyFull']:
        return pulumi.get(self, "source_alloydb_update_ssl_modes_verify_full")


@pulumi.output_type
class SourceAlloydbConfigurationSslModeSourceAlloydbSslModesAllow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalProperties":
            suggest = "additional_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAlloydbConfigurationSslModeSourceAlloydbSslModesAllow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAlloydbConfigurationSslModeSourceAlloydbSslModesAllow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAlloydbConfigurationSslModeSourceAlloydbSslModesAllow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class SourceAlloydbConfigurationSslModeSourceAlloydbSslModesDisable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalProperties":
            suggest = "additional_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAlloydbConfigurationSslModeSourceAlloydbSslModesDisable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAlloydbConfigurationSslModeSourceAlloydbSslModesDisable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAlloydbConfigurationSslModeSourceAlloydbSslModesDisable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class SourceAlloydbConfigurationSslModeSourceAlloydbSslModesPrefer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalProperties":
            suggest = "additional_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAlloydbConfigurationSslModeSourceAlloydbSslModesPrefer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAlloydbConfigurationSslModeSourceAlloydbSslModesPrefer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAlloydbConfigurationSslModeSourceAlloydbSslModesPrefer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class SourceAlloydbConfigurationSslModeSourceAlloydbSslModesRequire(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalProperties":
            suggest = "additional_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAlloydbConfigurationSslModeSourceAlloydbSslModesRequire. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAlloydbConfigurationSslModeSourceAlloydbSslModesRequire.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAlloydbConfigurationSslModeSourceAlloydbSslModesRequire.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyCa(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"
        elif key == "additionalProperties":
            suggest = "additional_properties"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clientKey":
            suggest = "client_key"
        elif key == "clientKeyPassword":
            suggest = "client_key_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyCa. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyCa.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyCa.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: str,
                 mode: str,
                 additional_properties: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 client_key: Optional[str] = None,
                 client_key_password: Optional[str] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[str]:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[str]:
        return pulumi.get(self, "client_key_password")


@pulumi.output_type
class SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyFull(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"
        elif key == "additionalProperties":
            suggest = "additional_properties"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clientKey":
            suggest = "client_key"
        elif key == "clientKeyPassword":
            suggest = "client_key_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyFull. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyFull.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyFull.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: str,
                 mode: str,
                 additional_properties: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 client_key: Optional[str] = None,
                 client_key_password: Optional[str] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[str]:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[str]:
        return pulumi.get(self, "client_key_password")


@pulumi.output_type
class SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesAllow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalProperties":
            suggest = "additional_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesAllow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesAllow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesAllow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesDisable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalProperties":
            suggest = "additional_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesDisable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesDisable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesDisable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesPrefer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalProperties":
            suggest = "additional_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesPrefer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesPrefer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesPrefer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesRequire(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalProperties":
            suggest = "additional_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesRequire. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesRequire.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesRequire.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyCa(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"
        elif key == "additionalProperties":
            suggest = "additional_properties"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clientKey":
            suggest = "client_key"
        elif key == "clientKeyPassword":
            suggest = "client_key_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyCa. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyCa.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyCa.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: str,
                 mode: str,
                 additional_properties: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 client_key: Optional[str] = None,
                 client_key_password: Optional[str] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[str]:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[str]:
        return pulumi.get(self, "client_key_password")


@pulumi.output_type
class SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyFull(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"
        elif key == "additionalProperties":
            suggest = "additional_properties"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clientKey":
            suggest = "client_key"
        elif key == "clientKeyPassword":
            suggest = "client_key_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyFull. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyFull.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyFull.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: str,
                 mode: str,
                 additional_properties: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 client_key: Optional[str] = None,
                 client_key_password: Optional[str] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[str]:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[str]:
        return pulumi.get(self, "client_key_password")


@pulumi.output_type
class SourceAlloydbConfigurationTunnelMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceAlloydbSshTunnelMethodNoTunnel":
            suggest = "source_alloydb_ssh_tunnel_method_no_tunnel"
        elif key == "sourceAlloydbSshTunnelMethodPasswordAuthentication":
            suggest = "source_alloydb_ssh_tunnel_method_password_authentication"
        elif key == "sourceAlloydbSshTunnelMethodSshKeyAuthentication":
            suggest = "source_alloydb_ssh_tunnel_method_ssh_key_authentication"
        elif key == "sourceAlloydbUpdateSshTunnelMethodNoTunnel":
            suggest = "source_alloydb_update_ssh_tunnel_method_no_tunnel"
        elif key == "sourceAlloydbUpdateSshTunnelMethodPasswordAuthentication":
            suggest = "source_alloydb_update_ssh_tunnel_method_password_authentication"
        elif key == "sourceAlloydbUpdateSshTunnelMethodSshKeyAuthentication":
            suggest = "source_alloydb_update_ssh_tunnel_method_ssh_key_authentication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAlloydbConfigurationTunnelMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAlloydbConfigurationTunnelMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAlloydbConfigurationTunnelMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_alloydb_ssh_tunnel_method_no_tunnel: Optional['outputs.SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodNoTunnel'] = None,
                 source_alloydb_ssh_tunnel_method_password_authentication: Optional['outputs.SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodPasswordAuthentication'] = None,
                 source_alloydb_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodSshKeyAuthentication'] = None,
                 source_alloydb_update_ssh_tunnel_method_no_tunnel: Optional['outputs.SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodNoTunnel'] = None,
                 source_alloydb_update_ssh_tunnel_method_password_authentication: Optional['outputs.SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodPasswordAuthentication'] = None,
                 source_alloydb_update_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodSshKeyAuthentication'] = None):
        if source_alloydb_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "source_alloydb_ssh_tunnel_method_no_tunnel", source_alloydb_ssh_tunnel_method_no_tunnel)
        if source_alloydb_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "source_alloydb_ssh_tunnel_method_password_authentication", source_alloydb_ssh_tunnel_method_password_authentication)
        if source_alloydb_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "source_alloydb_ssh_tunnel_method_ssh_key_authentication", source_alloydb_ssh_tunnel_method_ssh_key_authentication)
        if source_alloydb_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "source_alloydb_update_ssh_tunnel_method_no_tunnel", source_alloydb_update_ssh_tunnel_method_no_tunnel)
        if source_alloydb_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "source_alloydb_update_ssh_tunnel_method_password_authentication", source_alloydb_update_ssh_tunnel_method_password_authentication)
        if source_alloydb_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "source_alloydb_update_ssh_tunnel_method_ssh_key_authentication", source_alloydb_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="sourceAlloydbSshTunnelMethodNoTunnel")
    def source_alloydb_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "source_alloydb_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="sourceAlloydbSshTunnelMethodPasswordAuthentication")
    def source_alloydb_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "source_alloydb_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="sourceAlloydbSshTunnelMethodSshKeyAuthentication")
    def source_alloydb_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "source_alloydb_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="sourceAlloydbUpdateSshTunnelMethodNoTunnel")
    def source_alloydb_update_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "source_alloydb_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="sourceAlloydbUpdateSshTunnelMethodPasswordAuthentication")
    def source_alloydb_update_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "source_alloydb_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="sourceAlloydbUpdateSshTunnelMethodSshKeyAuthentication")
    def source_alloydb_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "source_alloydb_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class SourceAmazonAdsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "lookBackWindow":
            suggest = "look_back_window"
        elif key == "reportRecordTypes":
            suggest = "report_record_types"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "stateFilters":
            suggest = "state_filters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAmazonAdsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAmazonAdsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAmazonAdsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 source_type: str,
                 auth_type: Optional[str] = None,
                 look_back_window: Optional[int] = None,
                 profiles: Optional[Sequence[int]] = None,
                 region: Optional[str] = None,
                 report_record_types: Optional[Sequence[str]] = None,
                 start_date: Optional[str] = None,
                 state_filters: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "source_type", source_type)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if look_back_window is not None:
            pulumi.set(__self__, "look_back_window", look_back_window)
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if report_record_types is not None:
            pulumi.set(__self__, "report_record_types", report_record_types)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if state_filters is not None:
            pulumi.set(__self__, "state_filters", state_filters)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="lookBackWindow")
    def look_back_window(self) -> Optional[int]:
        return pulumi.get(self, "look_back_window")

    @property
    @pulumi.getter
    def profiles(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="reportRecordTypes")
    def report_record_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "report_record_types")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="stateFilters")
    def state_filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "state_filters")


@pulumi.output_type
class SourceAmazonSellerPartnerConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsEnvironment":
            suggest = "aws_environment"
        elif key == "lwaAppId":
            suggest = "lwa_app_id"
        elif key == "lwaClientSecret":
            suggest = "lwa_client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "replicationStartDate":
            suggest = "replication_start_date"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "advancedStreamOptions":
            suggest = "advanced_stream_options"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "awsAccessKey":
            suggest = "aws_access_key"
        elif key == "awsSecretKey":
            suggest = "aws_secret_key"
        elif key == "maxWaitSeconds":
            suggest = "max_wait_seconds"
        elif key == "periodInDays":
            suggest = "period_in_days"
        elif key == "replicationEndDate":
            suggest = "replication_end_date"
        elif key == "reportOptions":
            suggest = "report_options"
        elif key == "roleArn":
            suggest = "role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAmazonSellerPartnerConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAmazonSellerPartnerConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAmazonSellerPartnerConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_environment: str,
                 lwa_app_id: str,
                 lwa_client_secret: str,
                 refresh_token: str,
                 region: str,
                 replication_start_date: str,
                 source_type: str,
                 advanced_stream_options: Optional[str] = None,
                 auth_type: Optional[str] = None,
                 aws_access_key: Optional[str] = None,
                 aws_secret_key: Optional[str] = None,
                 max_wait_seconds: Optional[int] = None,
                 period_in_days: Optional[int] = None,
                 replication_end_date: Optional[str] = None,
                 report_options: Optional[str] = None,
                 role_arn: Optional[str] = None):
        pulumi.set(__self__, "aws_environment", aws_environment)
        pulumi.set(__self__, "lwa_app_id", lwa_app_id)
        pulumi.set(__self__, "lwa_client_secret", lwa_client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "replication_start_date", replication_start_date)
        pulumi.set(__self__, "source_type", source_type)
        if advanced_stream_options is not None:
            pulumi.set(__self__, "advanced_stream_options", advanced_stream_options)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if aws_access_key is not None:
            pulumi.set(__self__, "aws_access_key", aws_access_key)
        if aws_secret_key is not None:
            pulumi.set(__self__, "aws_secret_key", aws_secret_key)
        if max_wait_seconds is not None:
            pulumi.set(__self__, "max_wait_seconds", max_wait_seconds)
        if period_in_days is not None:
            pulumi.set(__self__, "period_in_days", period_in_days)
        if replication_end_date is not None:
            pulumi.set(__self__, "replication_end_date", replication_end_date)
        if report_options is not None:
            pulumi.set(__self__, "report_options", report_options)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="awsEnvironment")
    def aws_environment(self) -> str:
        return pulumi.get(self, "aws_environment")

    @property
    @pulumi.getter(name="lwaAppId")
    def lwa_app_id(self) -> str:
        return pulumi.get(self, "lwa_app_id")

    @property
    @pulumi.getter(name="lwaClientSecret")
    def lwa_client_secret(self) -> str:
        return pulumi.get(self, "lwa_client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="replicationStartDate")
    def replication_start_date(self) -> str:
        return pulumi.get(self, "replication_start_date")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="advancedStreamOptions")
    def advanced_stream_options(self) -> Optional[str]:
        return pulumi.get(self, "advanced_stream_options")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="awsAccessKey")
    def aws_access_key(self) -> Optional[str]:
        return pulumi.get(self, "aws_access_key")

    @property
    @pulumi.getter(name="awsSecretKey")
    def aws_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "aws_secret_key")

    @property
    @pulumi.getter(name="maxWaitSeconds")
    def max_wait_seconds(self) -> Optional[int]:
        return pulumi.get(self, "max_wait_seconds")

    @property
    @pulumi.getter(name="periodInDays")
    def period_in_days(self) -> Optional[int]:
        return pulumi.get(self, "period_in_days")

    @property
    @pulumi.getter(name="replicationEndDate")
    def replication_end_date(self) -> Optional[str]:
        return pulumi.get(self, "replication_end_date")

    @property
    @pulumi.getter(name="reportOptions")
    def report_options(self) -> Optional[str]:
        return pulumi.get(self, "report_options")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        return pulumi.get(self, "role_arn")


@pulumi.output_type
class SourceAmazonSqsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteMessages":
            suggest = "delete_messages"
        elif key == "queueUrl":
            suggest = "queue_url"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "accessKey":
            suggest = "access_key"
        elif key == "attributesToReturn":
            suggest = "attributes_to_return"
        elif key == "maxBatchSize":
            suggest = "max_batch_size"
        elif key == "maxWaitTime":
            suggest = "max_wait_time"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "visibilityTimeout":
            suggest = "visibility_timeout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAmazonSqsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAmazonSqsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAmazonSqsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delete_messages: bool,
                 queue_url: str,
                 region: str,
                 source_type: str,
                 access_key: Optional[str] = None,
                 attributes_to_return: Optional[str] = None,
                 max_batch_size: Optional[int] = None,
                 max_wait_time: Optional[int] = None,
                 secret_key: Optional[str] = None,
                 visibility_timeout: Optional[int] = None):
        pulumi.set(__self__, "delete_messages", delete_messages)
        pulumi.set(__self__, "queue_url", queue_url)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "source_type", source_type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if attributes_to_return is not None:
            pulumi.set(__self__, "attributes_to_return", attributes_to_return)
        if max_batch_size is not None:
            pulumi.set(__self__, "max_batch_size", max_batch_size)
        if max_wait_time is not None:
            pulumi.set(__self__, "max_wait_time", max_wait_time)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if visibility_timeout is not None:
            pulumi.set(__self__, "visibility_timeout", visibility_timeout)

    @property
    @pulumi.getter(name="deleteMessages")
    def delete_messages(self) -> bool:
        return pulumi.get(self, "delete_messages")

    @property
    @pulumi.getter(name="queueUrl")
    def queue_url(self) -> str:
        return pulumi.get(self, "queue_url")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="attributesToReturn")
    def attributes_to_return(self) -> Optional[str]:
        return pulumi.get(self, "attributes_to_return")

    @property
    @pulumi.getter(name="maxBatchSize")
    def max_batch_size(self) -> Optional[int]:
        return pulumi.get(self, "max_batch_size")

    @property
    @pulumi.getter(name="maxWaitTime")
    def max_wait_time(self) -> Optional[int]:
        return pulumi.get(self, "max_wait_time")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="visibilityTimeout")
    def visibility_timeout(self) -> Optional[int]:
        return pulumi.get(self, "visibility_timeout")


@pulumi.output_type
class SourceAmplitudeConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "dataRegion":
            suggest = "data_region"
        elif key == "requestTimeRange":
            suggest = "request_time_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAmplitudeConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAmplitudeConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAmplitudeConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 secret_key: str,
                 source_type: str,
                 start_date: str,
                 data_region: Optional[str] = None,
                 request_time_range: Optional[int] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if data_region is not None:
            pulumi.set(__self__, "data_region", data_region)
        if request_time_range is not None:
            pulumi.set(__self__, "request_time_range", request_time_range)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="dataRegion")
    def data_region(self) -> Optional[str]:
        return pulumi.get(self, "data_region")

    @property
    @pulumi.getter(name="requestTimeRange")
    def request_time_range(self) -> Optional[int]:
        return pulumi.get(self, "request_time_range")


@pulumi.output_type
class SourceApifyDatasetConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datasetId":
            suggest = "dataset_id"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceApifyDatasetConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceApifyDatasetConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceApifyDatasetConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataset_id: str,
                 source_type: str,
                 clean: Optional[bool] = None):
        pulumi.set(__self__, "dataset_id", dataset_id)
        pulumi.set(__self__, "source_type", source_type)
        if clean is not None:
            pulumi.set(__self__, "clean", clean)

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> str:
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def clean(self) -> Optional[bool]:
        return pulumi.get(self, "clean")


@pulumi.output_type
class SourceAppfollowConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "apiSecret":
            suggest = "api_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAppfollowConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAppfollowConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAppfollowConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 api_secret: Optional[str] = None):
        pulumi.set(__self__, "source_type", source_type)
        if api_secret is not None:
            pulumi.set(__self__, "api_secret", api_secret)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="apiSecret")
    def api_secret(self) -> Optional[str]:
        return pulumi.get(self, "api_secret")


@pulumi.output_type
class SourceAsanaConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAsanaConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAsanaConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAsanaConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials: Optional['outputs.SourceAsanaConfigurationCredentials'] = None,
                 source_type: Optional[str] = None):
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourceAsanaConfigurationCredentials']:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceAsanaConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth":
            suggest = "source_asana_authentication_mechanism_authenticate_via_asana_oauth"
        elif key == "sourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken":
            suggest = "source_asana_authentication_mechanism_authenticate_with_personal_access_token"
        elif key == "sourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauth":
            suggest = "source_asana_update_authentication_mechanism_authenticate_via_asana_oauth"
        elif key == "sourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken":
            suggest = "source_asana_update_authentication_mechanism_authenticate_with_personal_access_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAsanaConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAsanaConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAsanaConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_asana_authentication_mechanism_authenticate_via_asana_oauth: Optional['outputs.SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth'] = None,
                 source_asana_authentication_mechanism_authenticate_with_personal_access_token: Optional['outputs.SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken'] = None,
                 source_asana_update_authentication_mechanism_authenticate_via_asana_oauth: Optional['outputs.SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauth'] = None,
                 source_asana_update_authentication_mechanism_authenticate_with_personal_access_token: Optional['outputs.SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken'] = None):
        if source_asana_authentication_mechanism_authenticate_via_asana_oauth is not None:
            pulumi.set(__self__, "source_asana_authentication_mechanism_authenticate_via_asana_oauth", source_asana_authentication_mechanism_authenticate_via_asana_oauth)
        if source_asana_authentication_mechanism_authenticate_with_personal_access_token is not None:
            pulumi.set(__self__, "source_asana_authentication_mechanism_authenticate_with_personal_access_token", source_asana_authentication_mechanism_authenticate_with_personal_access_token)
        if source_asana_update_authentication_mechanism_authenticate_via_asana_oauth is not None:
            pulumi.set(__self__, "source_asana_update_authentication_mechanism_authenticate_via_asana_oauth", source_asana_update_authentication_mechanism_authenticate_via_asana_oauth)
        if source_asana_update_authentication_mechanism_authenticate_with_personal_access_token is not None:
            pulumi.set(__self__, "source_asana_update_authentication_mechanism_authenticate_with_personal_access_token", source_asana_update_authentication_mechanism_authenticate_with_personal_access_token)

    @property
    @pulumi.getter(name="sourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth")
    def source_asana_authentication_mechanism_authenticate_via_asana_oauth(self) -> Optional['outputs.SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth']:
        return pulumi.get(self, "source_asana_authentication_mechanism_authenticate_via_asana_oauth")

    @property
    @pulumi.getter(name="sourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken")
    def source_asana_authentication_mechanism_authenticate_with_personal_access_token(self) -> Optional['outputs.SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken']:
        return pulumi.get(self, "source_asana_authentication_mechanism_authenticate_with_personal_access_token")

    @property
    @pulumi.getter(name="sourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauth")
    def source_asana_update_authentication_mechanism_authenticate_via_asana_oauth(self) -> Optional['outputs.SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauth']:
        return pulumi.get(self, "source_asana_update_authentication_mechanism_authenticate_via_asana_oauth")

    @property
    @pulumi.getter(name="sourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken")
    def source_asana_update_authentication_mechanism_authenticate_with_personal_access_token(self) -> Optional['outputs.SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken']:
        return pulumi.get(self, "source_asana_update_authentication_mechanism_authenticate_with_personal_access_token")


@pulumi.output_type
class SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "optionTitle":
            suggest = "option_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 option_title: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[str]:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "personalAccessToken":
            suggest = "personal_access_token"
        elif key == "optionTitle":
            suggest = "option_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 personal_access_token: str,
                 option_title: Optional[str] = None):
        pulumi.set(__self__, "personal_access_token", personal_access_token)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="personalAccessToken")
    def personal_access_token(self) -> str:
        return pulumi.get(self, "personal_access_token")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[str]:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "optionTitle":
            suggest = "option_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 option_title: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[str]:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "personalAccessToken":
            suggest = "personal_access_token"
        elif key == "optionTitle":
            suggest = "option_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 personal_access_token: str,
                 option_title: Optional[str] = None):
        pulumi.set(__self__, "personal_access_token", personal_access_token)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="personalAccessToken")
    def personal_access_token(self) -> str:
        return pulumi.get(self, "personal_access_token")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[str]:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class SourceAuth0Configuration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseUrl":
            suggest = "base_url"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAuth0Configuration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAuth0Configuration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAuth0Configuration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_url: str,
                 credentials: 'outputs.SourceAuth0ConfigurationCredentials',
                 source_type: str):
        pulumi.set(__self__, "base_url", base_url)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> str:
        return pulumi.get(self, "base_url")

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.SourceAuth0ConfigurationCredentials':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceAuth0ConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceAuth0AuthenticationMethodOAuth2AccessToken":
            suggest = "source_auth0_authentication_method_o_auth2_access_token"
        elif key == "sourceAuth0AuthenticationMethodOAuth2ConfidentialApplication":
            suggest = "source_auth0_authentication_method_o_auth2_confidential_application"
        elif key == "sourceAuth0UpdateAuthenticationMethodOAuth2AccessToken":
            suggest = "source_auth0_update_authentication_method_o_auth2_access_token"
        elif key == "sourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication":
            suggest = "source_auth0_update_authentication_method_o_auth2_confidential_application"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAuth0ConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAuth0ConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAuth0ConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_auth0_authentication_method_o_auth2_access_token: Optional['outputs.SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2AccessToken'] = None,
                 source_auth0_authentication_method_o_auth2_confidential_application: Optional['outputs.SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2ConfidentialApplication'] = None,
                 source_auth0_update_authentication_method_o_auth2_access_token: Optional['outputs.SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2AccessToken'] = None,
                 source_auth0_update_authentication_method_o_auth2_confidential_application: Optional['outputs.SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication'] = None):
        if source_auth0_authentication_method_o_auth2_access_token is not None:
            pulumi.set(__self__, "source_auth0_authentication_method_o_auth2_access_token", source_auth0_authentication_method_o_auth2_access_token)
        if source_auth0_authentication_method_o_auth2_confidential_application is not None:
            pulumi.set(__self__, "source_auth0_authentication_method_o_auth2_confidential_application", source_auth0_authentication_method_o_auth2_confidential_application)
        if source_auth0_update_authentication_method_o_auth2_access_token is not None:
            pulumi.set(__self__, "source_auth0_update_authentication_method_o_auth2_access_token", source_auth0_update_authentication_method_o_auth2_access_token)
        if source_auth0_update_authentication_method_o_auth2_confidential_application is not None:
            pulumi.set(__self__, "source_auth0_update_authentication_method_o_auth2_confidential_application", source_auth0_update_authentication_method_o_auth2_confidential_application)

    @property
    @pulumi.getter(name="sourceAuth0AuthenticationMethodOAuth2AccessToken")
    def source_auth0_authentication_method_o_auth2_access_token(self) -> Optional['outputs.SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2AccessToken']:
        return pulumi.get(self, "source_auth0_authentication_method_o_auth2_access_token")

    @property
    @pulumi.getter(name="sourceAuth0AuthenticationMethodOAuth2ConfidentialApplication")
    def source_auth0_authentication_method_o_auth2_confidential_application(self) -> Optional['outputs.SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2ConfidentialApplication']:
        return pulumi.get(self, "source_auth0_authentication_method_o_auth2_confidential_application")

    @property
    @pulumi.getter(name="sourceAuth0UpdateAuthenticationMethodOAuth2AccessToken")
    def source_auth0_update_authentication_method_o_auth2_access_token(self) -> Optional['outputs.SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2AccessToken']:
        return pulumi.get(self, "source_auth0_update_authentication_method_o_auth2_access_token")

    @property
    @pulumi.getter(name="sourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication")
    def source_auth0_update_authentication_method_o_auth2_confidential_application(self) -> Optional['outputs.SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication']:
        return pulumi.get(self, "source_auth0_update_authentication_method_o_auth2_confidential_application")


@pulumi.output_type
class SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2AccessToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2AccessToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2AccessToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2AccessToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2ConfidentialApplication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2ConfidentialApplication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2ConfidentialApplication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2ConfidentialApplication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audience: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str):
        pulumi.set(__self__, "audience", audience)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter
    def audience(self) -> str:
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2AccessToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2AccessToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2AccessToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2AccessToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audience: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str):
        pulumi.set(__self__, "audience", audience)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter
    def audience(self) -> str:
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class SourceAwsCloudtrailConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsKeyId":
            suggest = "aws_key_id"
        elif key == "awsRegionName":
            suggest = "aws_region_name"
        elif key == "awsSecretKey":
            suggest = "aws_secret_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAwsCloudtrailConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAwsCloudtrailConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAwsCloudtrailConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_key_id: str,
                 aws_region_name: str,
                 aws_secret_key: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "aws_key_id", aws_key_id)
        pulumi.set(__self__, "aws_region_name", aws_region_name)
        pulumi.set(__self__, "aws_secret_key", aws_secret_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="awsKeyId")
    def aws_key_id(self) -> str:
        return pulumi.get(self, "aws_key_id")

    @property
    @pulumi.getter(name="awsRegionName")
    def aws_region_name(self) -> str:
        return pulumi.get(self, "aws_region_name")

    @property
    @pulumi.getter(name="awsSecretKey")
    def aws_secret_key(self) -> str:
        return pulumi.get(self, "aws_secret_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceAzureBlobStorageConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureBlobStorageAccountKey":
            suggest = "azure_blob_storage_account_key"
        elif key == "azureBlobStorageAccountName":
            suggest = "azure_blob_storage_account_name"
        elif key == "azureBlobStorageContainerName":
            suggest = "azure_blob_storage_container_name"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "azureBlobStorageBlobsPrefix":
            suggest = "azure_blob_storage_blobs_prefix"
        elif key == "azureBlobStorageEndpoint":
            suggest = "azure_blob_storage_endpoint"
        elif key == "azureBlobStorageSchemaInferenceLimit":
            suggest = "azure_blob_storage_schema_inference_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAzureBlobStorageConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAzureBlobStorageConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAzureBlobStorageConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_blob_storage_account_key: str,
                 azure_blob_storage_account_name: str,
                 azure_blob_storage_container_name: str,
                 format: 'outputs.SourceAzureBlobStorageConfigurationFormat',
                 source_type: str,
                 azure_blob_storage_blobs_prefix: Optional[str] = None,
                 azure_blob_storage_endpoint: Optional[str] = None,
                 azure_blob_storage_schema_inference_limit: Optional[int] = None):
        pulumi.set(__self__, "azure_blob_storage_account_key", azure_blob_storage_account_key)
        pulumi.set(__self__, "azure_blob_storage_account_name", azure_blob_storage_account_name)
        pulumi.set(__self__, "azure_blob_storage_container_name", azure_blob_storage_container_name)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "source_type", source_type)
        if azure_blob_storage_blobs_prefix is not None:
            pulumi.set(__self__, "azure_blob_storage_blobs_prefix", azure_blob_storage_blobs_prefix)
        if azure_blob_storage_endpoint is not None:
            pulumi.set(__self__, "azure_blob_storage_endpoint", azure_blob_storage_endpoint)
        if azure_blob_storage_schema_inference_limit is not None:
            pulumi.set(__self__, "azure_blob_storage_schema_inference_limit", azure_blob_storage_schema_inference_limit)

    @property
    @pulumi.getter(name="azureBlobStorageAccountKey")
    def azure_blob_storage_account_key(self) -> str:
        return pulumi.get(self, "azure_blob_storage_account_key")

    @property
    @pulumi.getter(name="azureBlobStorageAccountName")
    def azure_blob_storage_account_name(self) -> str:
        return pulumi.get(self, "azure_blob_storage_account_name")

    @property
    @pulumi.getter(name="azureBlobStorageContainerName")
    def azure_blob_storage_container_name(self) -> str:
        return pulumi.get(self, "azure_blob_storage_container_name")

    @property
    @pulumi.getter
    def format(self) -> 'outputs.SourceAzureBlobStorageConfigurationFormat':
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="azureBlobStorageBlobsPrefix")
    def azure_blob_storage_blobs_prefix(self) -> Optional[str]:
        return pulumi.get(self, "azure_blob_storage_blobs_prefix")

    @property
    @pulumi.getter(name="azureBlobStorageEndpoint")
    def azure_blob_storage_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "azure_blob_storage_endpoint")

    @property
    @pulumi.getter(name="azureBlobStorageSchemaInferenceLimit")
    def azure_blob_storage_schema_inference_limit(self) -> Optional[int]:
        return pulumi.get(self, "azure_blob_storage_schema_inference_limit")


@pulumi.output_type
class SourceAzureBlobStorageConfigurationFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJson":
            suggest = "source_azure_blob_storage_input_format_json_lines_newline_delimited_json"
        elif key == "sourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJson":
            suggest = "source_azure_blob_storage_update_input_format_json_lines_newline_delimited_json"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAzureBlobStorageConfigurationFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAzureBlobStorageConfigurationFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAzureBlobStorageConfigurationFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_azure_blob_storage_input_format_json_lines_newline_delimited_json: Optional['outputs.SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJson'] = None,
                 source_azure_blob_storage_update_input_format_json_lines_newline_delimited_json: Optional['outputs.SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJson'] = None):
        if source_azure_blob_storage_input_format_json_lines_newline_delimited_json is not None:
            pulumi.set(__self__, "source_azure_blob_storage_input_format_json_lines_newline_delimited_json", source_azure_blob_storage_input_format_json_lines_newline_delimited_json)
        if source_azure_blob_storage_update_input_format_json_lines_newline_delimited_json is not None:
            pulumi.set(__self__, "source_azure_blob_storage_update_input_format_json_lines_newline_delimited_json", source_azure_blob_storage_update_input_format_json_lines_newline_delimited_json)

    @property
    @pulumi.getter(name="sourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJson")
    def source_azure_blob_storage_input_format_json_lines_newline_delimited_json(self) -> Optional['outputs.SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJson']:
        return pulumi.get(self, "source_azure_blob_storage_input_format_json_lines_newline_delimited_json")

    @property
    @pulumi.getter(name="sourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJson")
    def source_azure_blob_storage_update_input_format_json_lines_newline_delimited_json(self) -> Optional['outputs.SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJson']:
        return pulumi.get(self, "source_azure_blob_storage_update_input_format_json_lines_newline_delimited_json")


@pulumi.output_type
class SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJson(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatType":
            suggest = "format_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJson. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJson.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJson.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format_type: str):
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJson(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatType":
            suggest = "format_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJson. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJson.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJson.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format_type: str):
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class SourceAzureTableConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "storageAccessKey":
            suggest = "storage_access_key"
        elif key == "storageAccountName":
            suggest = "storage_account_name"
        elif key == "storageEndpointSuffix":
            suggest = "storage_endpoint_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceAzureTableConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceAzureTableConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceAzureTableConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 storage_access_key: str,
                 storage_account_name: str,
                 storage_endpoint_suffix: Optional[str] = None):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "storage_access_key", storage_access_key)
        pulumi.set(__self__, "storage_account_name", storage_account_name)
        if storage_endpoint_suffix is not None:
            pulumi.set(__self__, "storage_endpoint_suffix", storage_endpoint_suffix)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="storageAccessKey")
    def storage_access_key(self) -> str:
        return pulumi.get(self, "storage_access_key")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> str:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="storageEndpointSuffix")
    def storage_endpoint_suffix(self) -> Optional[str]:
        return pulumi.get(self, "storage_endpoint_suffix")


@pulumi.output_type
class SourceBambooHrConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "customReportsFields":
            suggest = "custom_reports_fields"
        elif key == "customReportsIncludeDefaultFields":
            suggest = "custom_reports_include_default_fields"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceBambooHrConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceBambooHrConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceBambooHrConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 source_type: str,
                 subdomain: str,
                 custom_reports_fields: Optional[str] = None,
                 custom_reports_include_default_fields: Optional[bool] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "subdomain", subdomain)
        if custom_reports_fields is not None:
            pulumi.set(__self__, "custom_reports_fields", custom_reports_fields)
        if custom_reports_include_default_fields is not None:
            pulumi.set(__self__, "custom_reports_include_default_fields", custom_reports_include_default_fields)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def subdomain(self) -> str:
        return pulumi.get(self, "subdomain")

    @property
    @pulumi.getter(name="customReportsFields")
    def custom_reports_fields(self) -> Optional[str]:
        return pulumi.get(self, "custom_reports_fields")

    @property
    @pulumi.getter(name="customReportsIncludeDefaultFields")
    def custom_reports_include_default_fields(self) -> Optional[bool]:
        return pulumi.get(self, "custom_reports_include_default_fields")


@pulumi.output_type
class SourceBigcommerceConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "storeHash":
            suggest = "store_hash"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceBigcommerceConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceBigcommerceConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceBigcommerceConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 source_type: str,
                 start_date: str,
                 store_hash: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "store_hash", store_hash)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="storeHash")
    def store_hash(self) -> str:
        return pulumi.get(self, "store_hash")


@pulumi.output_type
class SourceBigqueryConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialsJson":
            suggest = "credentials_json"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "datasetId":
            suggest = "dataset_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceBigqueryConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceBigqueryConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceBigqueryConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials_json: str,
                 project_id: str,
                 source_type: str,
                 dataset_id: Optional[str] = None):
        pulumi.set(__self__, "credentials_json", credentials_json)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "source_type", source_type)
        if dataset_id is not None:
            pulumi.set(__self__, "dataset_id", dataset_id)

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> str:
        return pulumi.get(self, "credentials_json")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> Optional[str]:
        return pulumi.get(self, "dataset_id")


@pulumi.output_type
class SourceBingAdsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "developerToken":
            suggest = "developer_token"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "reportsStartDate":
            suggest = "reports_start_date"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "authMethod":
            suggest = "auth_method"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "lookbackWindow":
            suggest = "lookback_window"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceBingAdsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceBingAdsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceBingAdsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 developer_token: str,
                 refresh_token: str,
                 reports_start_date: str,
                 source_type: str,
                 auth_method: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 lookback_window: Optional[int] = None,
                 tenant_id: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "developer_token", developer_token)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "reports_start_date", reports_start_date)
        pulumi.set(__self__, "source_type", source_type)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if lookback_window is not None:
            pulumi.set(__self__, "lookback_window", lookback_window)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="developerToken")
    def developer_token(self) -> str:
        return pulumi.get(self, "developer_token")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="reportsStartDate")
    def reports_start_date(self) -> str:
        return pulumi.get(self, "reports_start_date")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[str]:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="lookbackWindow")
    def lookback_window(self) -> Optional[int]:
        return pulumi.get(self, "lookback_window")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class SourceBraintreeConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "merchantId":
            suggest = "merchant_id"
        elif key == "privateKey":
            suggest = "private_key"
        elif key == "publicKey":
            suggest = "public_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceBraintreeConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceBraintreeConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceBraintreeConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 environment: str,
                 merchant_id: str,
                 private_key: str,
                 public_key: str,
                 source_type: str,
                 start_date: Optional[str] = None):
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "merchant_id", merchant_id)
        pulumi.set(__self__, "private_key", private_key)
        pulumi.set(__self__, "public_key", public_key)
        pulumi.set(__self__, "source_type", source_type)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def environment(self) -> str:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="merchantId")
    def merchant_id(self) -> str:
        return pulumi.get(self, "merchant_id")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> str:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> str:
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceBrazeConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceBrazeConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceBrazeConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceBrazeConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 source_type: str,
                 start_date: str,
                 url: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class SourceChargebeeConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "productCatalog":
            suggest = "product_catalog"
        elif key == "siteApiKey":
            suggest = "site_api_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceChargebeeConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceChargebeeConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceChargebeeConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 product_catalog: str,
                 site: str,
                 site_api_key: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "product_catalog", product_catalog)
        pulumi.set(__self__, "site", site)
        pulumi.set(__self__, "site_api_key", site_api_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="productCatalog")
    def product_catalog(self) -> str:
        return pulumi.get(self, "product_catalog")

    @property
    @pulumi.getter
    def site(self) -> str:
        return pulumi.get(self, "site")

    @property
    @pulumi.getter(name="siteApiKey")
    def site_api_key(self) -> str:
        return pulumi.get(self, "site_api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceChartmogulConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceChartmogulConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceChartmogulConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceChartmogulConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 interval: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter
    def interval(self) -> str:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceClickhouseConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceClickhouseConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceClickhouseConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceClickhouseConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: str,
                 host: str,
                 port: int,
                 source_type: str,
                 username: str,
                 password: Optional[str] = None,
                 tunnel_method: Optional['outputs.SourceClickhouseConfigurationTunnelMethod'] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "username", username)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional['outputs.SourceClickhouseConfigurationTunnelMethod']:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class SourceClickhouseConfigurationTunnelMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceClickhouseSshTunnelMethodNoTunnel":
            suggest = "source_clickhouse_ssh_tunnel_method_no_tunnel"
        elif key == "sourceClickhouseSshTunnelMethodPasswordAuthentication":
            suggest = "source_clickhouse_ssh_tunnel_method_password_authentication"
        elif key == "sourceClickhouseSshTunnelMethodSshKeyAuthentication":
            suggest = "source_clickhouse_ssh_tunnel_method_ssh_key_authentication"
        elif key == "sourceClickhouseUpdateSshTunnelMethodNoTunnel":
            suggest = "source_clickhouse_update_ssh_tunnel_method_no_tunnel"
        elif key == "sourceClickhouseUpdateSshTunnelMethodPasswordAuthentication":
            suggest = "source_clickhouse_update_ssh_tunnel_method_password_authentication"
        elif key == "sourceClickhouseUpdateSshTunnelMethodSshKeyAuthentication":
            suggest = "source_clickhouse_update_ssh_tunnel_method_ssh_key_authentication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceClickhouseConfigurationTunnelMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceClickhouseConfigurationTunnelMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceClickhouseConfigurationTunnelMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_clickhouse_ssh_tunnel_method_no_tunnel: Optional['outputs.SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodNoTunnel'] = None,
                 source_clickhouse_ssh_tunnel_method_password_authentication: Optional['outputs.SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodPasswordAuthentication'] = None,
                 source_clickhouse_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodSshKeyAuthentication'] = None,
                 source_clickhouse_update_ssh_tunnel_method_no_tunnel: Optional['outputs.SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodNoTunnel'] = None,
                 source_clickhouse_update_ssh_tunnel_method_password_authentication: Optional['outputs.SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodPasswordAuthentication'] = None,
                 source_clickhouse_update_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodSshKeyAuthentication'] = None):
        if source_clickhouse_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "source_clickhouse_ssh_tunnel_method_no_tunnel", source_clickhouse_ssh_tunnel_method_no_tunnel)
        if source_clickhouse_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "source_clickhouse_ssh_tunnel_method_password_authentication", source_clickhouse_ssh_tunnel_method_password_authentication)
        if source_clickhouse_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "source_clickhouse_ssh_tunnel_method_ssh_key_authentication", source_clickhouse_ssh_tunnel_method_ssh_key_authentication)
        if source_clickhouse_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "source_clickhouse_update_ssh_tunnel_method_no_tunnel", source_clickhouse_update_ssh_tunnel_method_no_tunnel)
        if source_clickhouse_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "source_clickhouse_update_ssh_tunnel_method_password_authentication", source_clickhouse_update_ssh_tunnel_method_password_authentication)
        if source_clickhouse_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "source_clickhouse_update_ssh_tunnel_method_ssh_key_authentication", source_clickhouse_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="sourceClickhouseSshTunnelMethodNoTunnel")
    def source_clickhouse_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "source_clickhouse_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="sourceClickhouseSshTunnelMethodPasswordAuthentication")
    def source_clickhouse_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "source_clickhouse_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="sourceClickhouseSshTunnelMethodSshKeyAuthentication")
    def source_clickhouse_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "source_clickhouse_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="sourceClickhouseUpdateSshTunnelMethodNoTunnel")
    def source_clickhouse_update_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "source_clickhouse_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="sourceClickhouseUpdateSshTunnelMethodPasswordAuthentication")
    def source_clickhouse_update_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "source_clickhouse_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="sourceClickhouseUpdateSshTunnelMethodSshKeyAuthentication")
    def source_clickhouse_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "source_clickhouse_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class SourceClickupApiConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiToken":
            suggest = "api_token"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "folderId":
            suggest = "folder_id"
        elif key == "includeClosedTasks":
            suggest = "include_closed_tasks"
        elif key == "listId":
            suggest = "list_id"
        elif key == "spaceId":
            suggest = "space_id"
        elif key == "teamId":
            suggest = "team_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceClickupApiConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceClickupApiConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceClickupApiConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token: str,
                 source_type: str,
                 folder_id: Optional[str] = None,
                 include_closed_tasks: Optional[bool] = None,
                 list_id: Optional[str] = None,
                 space_id: Optional[str] = None,
                 team_id: Optional[str] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "source_type", source_type)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if include_closed_tasks is not None:
            pulumi.set(__self__, "include_closed_tasks", include_closed_tasks)
        if list_id is not None:
            pulumi.set(__self__, "list_id", list_id)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)
        if team_id is not None:
            pulumi.set(__self__, "team_id", team_id)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[str]:
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter(name="includeClosedTasks")
    def include_closed_tasks(self) -> Optional[bool]:
        return pulumi.get(self, "include_closed_tasks")

    @property
    @pulumi.getter(name="listId")
    def list_id(self) -> Optional[str]:
        return pulumi.get(self, "list_id")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[str]:
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> Optional[str]:
        return pulumi.get(self, "team_id")


@pulumi.output_type
class SourceClockifyConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "workspaceId":
            suggest = "workspace_id"
        elif key == "apiUrl":
            suggest = "api_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceClockifyConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceClockifyConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceClockifyConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 source_type: str,
                 workspace_id: str,
                 api_url: Optional[str] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if api_url is not None:
            pulumi.set(__self__, "api_url", api_url)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        return pulumi.get(self, "workspace_id")

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> Optional[str]:
        return pulumi.get(self, "api_url")


@pulumi.output_type
class SourceCloseComConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceCloseComConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceCloseComConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceCloseComConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 source_type: str,
                 start_date: Optional[str] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceCodaConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authToken":
            suggest = "auth_token"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceCodaConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceCodaConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceCodaConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_token: str,
                 source_type: str):
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> str:
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceCoinApiConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "symbolId":
            suggest = "symbol_id"
        elif key == "endDate":
            suggest = "end_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceCoinApiConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceCoinApiConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceCoinApiConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 environment: str,
                 period: str,
                 source_type: str,
                 start_date: str,
                 symbol_id: str,
                 end_date: Optional[str] = None,
                 limit: Optional[int] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "symbol_id", symbol_id)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter
    def environment(self) -> str:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def period(self) -> str:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="symbolId")
    def symbol_id(self) -> str:
        return pulumi.get(self, "symbol_id")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")


@pulumi.output_type
class SourceCoinmarketcapConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "dataType":
            suggest = "data_type"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceCoinmarketcapConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceCoinmarketcapConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceCoinmarketcapConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 data_type: str,
                 source_type: str,
                 symbols: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "source_type", source_type)
        if symbols is not None:
            pulumi.set(__self__, "symbols", symbols)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> str:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def symbols(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "symbols")


@pulumi.output_type
class SourceConfigcatConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceConfigcatConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceConfigcatConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceConfigcatConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password: str,
                 source_type: str,
                 username: str):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class SourceConfluenceConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiToken":
            suggest = "api_token"
        elif key == "domainName":
            suggest = "domain_name"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceConfluenceConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceConfluenceConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceConfluenceConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token: str,
                 domain_name: str,
                 email: str,
                 source_type: str):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> str:
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceConvexConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "deploymentUrl":
            suggest = "deployment_url"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceConvexConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceConvexConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceConvexConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key: str,
                 deployment_url: str,
                 source_type: str):
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "deployment_url", deployment_url)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="deploymentUrl")
    def deployment_url(self) -> str:
        return pulumi.get(self, "deployment_url")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceDatadogConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "applicationKey":
            suggest = "application_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "endDate":
            suggest = "end_date"
        elif key == "maxRecordsPerRequest":
            suggest = "max_records_per_request"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceDatadogConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceDatadogConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceDatadogConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 application_key: str,
                 source_type: str,
                 end_date: Optional[str] = None,
                 max_records_per_request: Optional[int] = None,
                 queries: Optional[Sequence['outputs.SourceDatadogConfigurationQuery']] = None,
                 query: Optional[str] = None,
                 site: Optional[str] = None,
                 start_date: Optional[str] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "application_key", application_key)
        pulumi.set(__self__, "source_type", source_type)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if max_records_per_request is not None:
            pulumi.set(__self__, "max_records_per_request", max_records_per_request)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if site is not None:
            pulumi.set(__self__, "site", site)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="applicationKey")
    def application_key(self) -> str:
        return pulumi.get(self, "application_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="maxRecordsPerRequest")
    def max_records_per_request(self) -> Optional[int]:
        return pulumi.get(self, "max_records_per_request")

    @property
    @pulumi.getter
    def queries(self) -> Optional[Sequence['outputs.SourceDatadogConfigurationQuery']]:
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter
    def query(self) -> Optional[str]:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def site(self) -> Optional[str]:
        return pulumi.get(self, "site")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceDatadogConfigurationQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceDatadogConfigurationQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceDatadogConfigurationQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceDatadogConfigurationQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 name: str,
                 query: str):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")


@pulumi.output_type
class SourceDatascopeConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceDatascopeConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceDatascopeConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceDatascopeConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceDelightedConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceDelightedConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceDelightedConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceDelightedConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 since: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "since", since)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter
    def since(self) -> str:
        return pulumi.get(self, "since")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceDixaConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiToken":
            suggest = "api_token"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "batchSize":
            suggest = "batch_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceDixaConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceDixaConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceDixaConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token: str,
                 source_type: str,
                 start_date: str,
                 batch_size: Optional[int] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if batch_size is not None:
            pulumi.set(__self__, "batch_size", batch_size)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[int]:
        return pulumi.get(self, "batch_size")


@pulumi.output_type
class SourceDockerhubConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dockerUsername":
            suggest = "docker_username"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceDockerhubConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceDockerhubConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceDockerhubConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 docker_username: str,
                 source_type: str):
        pulumi.set(__self__, "docker_username", docker_username)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="dockerUsername")
    def docker_username(self) -> str:
        return pulumi.get(self, "docker_username")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceDremioConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "baseUrl":
            suggest = "base_url"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceDremioConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceDremioConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceDremioConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 base_url: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "base_url", base_url)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> str:
        return pulumi.get(self, "base_url")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceDynamodbConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKeyId":
            suggest = "access_key_id"
        elif key == "secretAccessKey":
            suggest = "secret_access_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "reservedAttributeNames":
            suggest = "reserved_attribute_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceDynamodbConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceDynamodbConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceDynamodbConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key_id: str,
                 secret_access_key: str,
                 source_type: str,
                 endpoint: Optional[str] = None,
                 region: Optional[str] = None,
                 reserved_attribute_names: Optional[str] = None):
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        pulumi.set(__self__, "source_type", source_type)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if reserved_attribute_names is not None:
            pulumi.set(__self__, "reserved_attribute_names", reserved_attribute_names)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> str:
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> str:
        return pulumi.get(self, "secret_access_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="reservedAttributeNames")
    def reserved_attribute_names(self) -> Optional[str]:
        return pulumi.get(self, "reserved_attribute_names")


@pulumi.output_type
class SourceE2eTestCloudConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxMessages":
            suggest = "max_messages"
        elif key == "mockCatalog":
            suggest = "mock_catalog"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "messageIntervalMs":
            suggest = "message_interval_ms"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceE2eTestCloudConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceE2eTestCloudConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceE2eTestCloudConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_messages: int,
                 mock_catalog: 'outputs.SourceE2eTestCloudConfigurationMockCatalog',
                 source_type: str,
                 message_interval_ms: Optional[int] = None,
                 seed: Optional[int] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "max_messages", max_messages)
        pulumi.set(__self__, "mock_catalog", mock_catalog)
        pulumi.set(__self__, "source_type", source_type)
        if message_interval_ms is not None:
            pulumi.set(__self__, "message_interval_ms", message_interval_ms)
        if seed is not None:
            pulumi.set(__self__, "seed", seed)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="maxMessages")
    def max_messages(self) -> int:
        return pulumi.get(self, "max_messages")

    @property
    @pulumi.getter(name="mockCatalog")
    def mock_catalog(self) -> 'outputs.SourceE2eTestCloudConfigurationMockCatalog':
        return pulumi.get(self, "mock_catalog")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="messageIntervalMs")
    def message_interval_ms(self) -> Optional[int]:
        return pulumi.get(self, "message_interval_ms")

    @property
    @pulumi.getter
    def seed(self) -> Optional[int]:
        return pulumi.get(self, "seed")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class SourceE2eTestCloudConfigurationMockCatalog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceE2eTestCloudMockCatalogMultiSchema":
            suggest = "source_e2e_test_cloud_mock_catalog_multi_schema"
        elif key == "sourceE2eTestCloudMockCatalogSingleSchema":
            suggest = "source_e2e_test_cloud_mock_catalog_single_schema"
        elif key == "sourceE2eTestCloudUpdateMockCatalogMultiSchema":
            suggest = "source_e2e_test_cloud_update_mock_catalog_multi_schema"
        elif key == "sourceE2eTestCloudUpdateMockCatalogSingleSchema":
            suggest = "source_e2e_test_cloud_update_mock_catalog_single_schema"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceE2eTestCloudConfigurationMockCatalog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceE2eTestCloudConfigurationMockCatalog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceE2eTestCloudConfigurationMockCatalog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_e2e_test_cloud_mock_catalog_multi_schema: Optional['outputs.SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogMultiSchema'] = None,
                 source_e2e_test_cloud_mock_catalog_single_schema: Optional['outputs.SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogSingleSchema'] = None,
                 source_e2e_test_cloud_update_mock_catalog_multi_schema: Optional['outputs.SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogMultiSchema'] = None,
                 source_e2e_test_cloud_update_mock_catalog_single_schema: Optional['outputs.SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogSingleSchema'] = None):
        if source_e2e_test_cloud_mock_catalog_multi_schema is not None:
            pulumi.set(__self__, "source_e2e_test_cloud_mock_catalog_multi_schema", source_e2e_test_cloud_mock_catalog_multi_schema)
        if source_e2e_test_cloud_mock_catalog_single_schema is not None:
            pulumi.set(__self__, "source_e2e_test_cloud_mock_catalog_single_schema", source_e2e_test_cloud_mock_catalog_single_schema)
        if source_e2e_test_cloud_update_mock_catalog_multi_schema is not None:
            pulumi.set(__self__, "source_e2e_test_cloud_update_mock_catalog_multi_schema", source_e2e_test_cloud_update_mock_catalog_multi_schema)
        if source_e2e_test_cloud_update_mock_catalog_single_schema is not None:
            pulumi.set(__self__, "source_e2e_test_cloud_update_mock_catalog_single_schema", source_e2e_test_cloud_update_mock_catalog_single_schema)

    @property
    @pulumi.getter(name="sourceE2eTestCloudMockCatalogMultiSchema")
    def source_e2e_test_cloud_mock_catalog_multi_schema(self) -> Optional['outputs.SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogMultiSchema']:
        return pulumi.get(self, "source_e2e_test_cloud_mock_catalog_multi_schema")

    @property
    @pulumi.getter(name="sourceE2eTestCloudMockCatalogSingleSchema")
    def source_e2e_test_cloud_mock_catalog_single_schema(self) -> Optional['outputs.SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogSingleSchema']:
        return pulumi.get(self, "source_e2e_test_cloud_mock_catalog_single_schema")

    @property
    @pulumi.getter(name="sourceE2eTestCloudUpdateMockCatalogMultiSchema")
    def source_e2e_test_cloud_update_mock_catalog_multi_schema(self) -> Optional['outputs.SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogMultiSchema']:
        return pulumi.get(self, "source_e2e_test_cloud_update_mock_catalog_multi_schema")

    @property
    @pulumi.getter(name="sourceE2eTestCloudUpdateMockCatalogSingleSchema")
    def source_e2e_test_cloud_update_mock_catalog_single_schema(self) -> Optional['outputs.SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogSingleSchema']:
        return pulumi.get(self, "source_e2e_test_cloud_update_mock_catalog_single_schema")


@pulumi.output_type
class SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogMultiSchema(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "streamSchemas":
            suggest = "stream_schemas"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogMultiSchema. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogMultiSchema.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogMultiSchema.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 stream_schemas: str,
                 type: str):
        pulumi.set(__self__, "stream_schemas", stream_schemas)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="streamSchemas")
    def stream_schemas(self) -> str:
        return pulumi.get(self, "stream_schemas")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogSingleSchema(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "streamName":
            suggest = "stream_name"
        elif key == "streamSchema":
            suggest = "stream_schema"
        elif key == "streamDuplication":
            suggest = "stream_duplication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogSingleSchema. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogSingleSchema.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogSingleSchema.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 stream_name: str,
                 stream_schema: str,
                 type: str,
                 stream_duplication: Optional[int] = None):
        pulumi.set(__self__, "stream_name", stream_name)
        pulumi.set(__self__, "stream_schema", stream_schema)
        pulumi.set(__self__, "type", type)
        if stream_duplication is not None:
            pulumi.set(__self__, "stream_duplication", stream_duplication)

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        return pulumi.get(self, "stream_name")

    @property
    @pulumi.getter(name="streamSchema")
    def stream_schema(self) -> str:
        return pulumi.get(self, "stream_schema")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="streamDuplication")
    def stream_duplication(self) -> Optional[int]:
        return pulumi.get(self, "stream_duplication")


@pulumi.output_type
class SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogMultiSchema(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "streamSchemas":
            suggest = "stream_schemas"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogMultiSchema. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogMultiSchema.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogMultiSchema.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 stream_schemas: str,
                 type: str):
        pulumi.set(__self__, "stream_schemas", stream_schemas)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="streamSchemas")
    def stream_schemas(self) -> str:
        return pulumi.get(self, "stream_schemas")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogSingleSchema(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "streamName":
            suggest = "stream_name"
        elif key == "streamSchema":
            suggest = "stream_schema"
        elif key == "streamDuplication":
            suggest = "stream_duplication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogSingleSchema. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogSingleSchema.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogSingleSchema.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 stream_name: str,
                 stream_schema: str,
                 type: str,
                 stream_duplication: Optional[int] = None):
        pulumi.set(__self__, "stream_name", stream_name)
        pulumi.set(__self__, "stream_schema", stream_schema)
        pulumi.set(__self__, "type", type)
        if stream_duplication is not None:
            pulumi.set(__self__, "stream_duplication", stream_duplication)

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        return pulumi.get(self, "stream_name")

    @property
    @pulumi.getter(name="streamSchema")
    def stream_schema(self) -> str:
        return pulumi.get(self, "stream_schema")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="streamDuplication")
    def stream_duplication(self) -> Optional[int]:
        return pulumi.get(self, "stream_duplication")


@pulumi.output_type
class SourceEmailoctopusConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceEmailoctopusConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceEmailoctopusConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceEmailoctopusConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceExchangeRatesConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "ignoreWeekends":
            suggest = "ignore_weekends"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceExchangeRatesConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceExchangeRatesConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceExchangeRatesConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key: str,
                 source_type: str,
                 start_date: str,
                 base: Optional[str] = None,
                 ignore_weekends: Optional[bool] = None):
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if base is not None:
            pulumi.set(__self__, "base", base)
        if ignore_weekends is not None:
            pulumi.set(__self__, "ignore_weekends", ignore_weekends)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def base(self) -> Optional[str]:
        return pulumi.get(self, "base")

    @property
    @pulumi.getter(name="ignoreWeekends")
    def ignore_weekends(self) -> Optional[bool]:
        return pulumi.get(self, "ignore_weekends")


@pulumi.output_type
class SourceFacebookMarketingConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "accountId":
            suggest = "account_id"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "actionBreakdownsAllowEmpty":
            suggest = "action_breakdowns_allow_empty"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "customInsights":
            suggest = "custom_insights"
        elif key == "endDate":
            suggest = "end_date"
        elif key == "fetchThumbnailImages":
            suggest = "fetch_thumbnail_images"
        elif key == "includeDeleted":
            suggest = "include_deleted"
        elif key == "insightsLookbackWindow":
            suggest = "insights_lookback_window"
        elif key == "maxBatchSize":
            suggest = "max_batch_size"
        elif key == "pageSize":
            suggest = "page_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceFacebookMarketingConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceFacebookMarketingConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceFacebookMarketingConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 account_id: str,
                 source_type: str,
                 start_date: str,
                 action_breakdowns_allow_empty: Optional[bool] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 custom_insights: Optional[Sequence['outputs.SourceFacebookMarketingConfigurationCustomInsight']] = None,
                 end_date: Optional[str] = None,
                 fetch_thumbnail_images: Optional[bool] = None,
                 include_deleted: Optional[bool] = None,
                 insights_lookback_window: Optional[int] = None,
                 max_batch_size: Optional[int] = None,
                 page_size: Optional[int] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if action_breakdowns_allow_empty is not None:
            pulumi.set(__self__, "action_breakdowns_allow_empty", action_breakdowns_allow_empty)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if custom_insights is not None:
            pulumi.set(__self__, "custom_insights", custom_insights)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if fetch_thumbnail_images is not None:
            pulumi.set(__self__, "fetch_thumbnail_images", fetch_thumbnail_images)
        if include_deleted is not None:
            pulumi.set(__self__, "include_deleted", include_deleted)
        if insights_lookback_window is not None:
            pulumi.set(__self__, "insights_lookback_window", insights_lookback_window)
        if max_batch_size is not None:
            pulumi.set(__self__, "max_batch_size", max_batch_size)
        if page_size is not None:
            pulumi.set(__self__, "page_size", page_size)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="actionBreakdownsAllowEmpty")
    def action_breakdowns_allow_empty(self) -> Optional[bool]:
        return pulumi.get(self, "action_breakdowns_allow_empty")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="customInsights")
    def custom_insights(self) -> Optional[Sequence['outputs.SourceFacebookMarketingConfigurationCustomInsight']]:
        return pulumi.get(self, "custom_insights")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="fetchThumbnailImages")
    def fetch_thumbnail_images(self) -> Optional[bool]:
        return pulumi.get(self, "fetch_thumbnail_images")

    @property
    @pulumi.getter(name="includeDeleted")
    def include_deleted(self) -> Optional[bool]:
        return pulumi.get(self, "include_deleted")

    @property
    @pulumi.getter(name="insightsLookbackWindow")
    def insights_lookback_window(self) -> Optional[int]:
        return pulumi.get(self, "insights_lookback_window")

    @property
    @pulumi.getter(name="maxBatchSize")
    def max_batch_size(self) -> Optional[int]:
        return pulumi.get(self, "max_batch_size")

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> Optional[int]:
        return pulumi.get(self, "page_size")


@pulumi.output_type
class SourceFacebookMarketingConfigurationCustomInsight(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionBreakdowns":
            suggest = "action_breakdowns"
        elif key == "actionReportTime":
            suggest = "action_report_time"
        elif key == "endDate":
            suggest = "end_date"
        elif key == "insightsLookbackWindow":
            suggest = "insights_lookback_window"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "timeIncrement":
            suggest = "time_increment"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceFacebookMarketingConfigurationCustomInsight. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceFacebookMarketingConfigurationCustomInsight.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceFacebookMarketingConfigurationCustomInsight.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 action_breakdowns: Optional[Sequence[str]] = None,
                 action_report_time: Optional[str] = None,
                 breakdowns: Optional[Sequence[str]] = None,
                 end_date: Optional[str] = None,
                 fields: Optional[Sequence[str]] = None,
                 insights_lookback_window: Optional[int] = None,
                 level: Optional[str] = None,
                 start_date: Optional[str] = None,
                 time_increment: Optional[int] = None):
        pulumi.set(__self__, "name", name)
        if action_breakdowns is not None:
            pulumi.set(__self__, "action_breakdowns", action_breakdowns)
        if action_report_time is not None:
            pulumi.set(__self__, "action_report_time", action_report_time)
        if breakdowns is not None:
            pulumi.set(__self__, "breakdowns", breakdowns)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if insights_lookback_window is not None:
            pulumi.set(__self__, "insights_lookback_window", insights_lookback_window)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if time_increment is not None:
            pulumi.set(__self__, "time_increment", time_increment)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="actionBreakdowns")
    def action_breakdowns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "action_breakdowns")

    @property
    @pulumi.getter(name="actionReportTime")
    def action_report_time(self) -> Optional[str]:
        return pulumi.get(self, "action_report_time")

    @property
    @pulumi.getter
    def breakdowns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "breakdowns")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter
    def fields(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter(name="insightsLookbackWindow")
    def insights_lookback_window(self) -> Optional[int]:
        return pulumi.get(self, "insights_lookback_window")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="timeIncrement")
    def time_increment(self) -> Optional[int]:
        return pulumi.get(self, "time_increment")


@pulumi.output_type
class SourceFacebookPagesConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "pageId":
            suggest = "page_id"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceFacebookPagesConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceFacebookPagesConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceFacebookPagesConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 page_id: str,
                 source_type: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "page_id", page_id)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="pageId")
    def page_id(self) -> str:
        return pulumi.get(self, "page_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceFakerConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "alwaysUpdated":
            suggest = "always_updated"
        elif key == "recordsPerSlice":
            suggest = "records_per_slice"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceFakerConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceFakerConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceFakerConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: int,
                 source_type: str,
                 always_updated: Optional[bool] = None,
                 parallelism: Optional[int] = None,
                 records_per_slice: Optional[int] = None,
                 seed: Optional[int] = None):
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "source_type", source_type)
        if always_updated is not None:
            pulumi.set(__self__, "always_updated", always_updated)
        if parallelism is not None:
            pulumi.set(__self__, "parallelism", parallelism)
        if records_per_slice is not None:
            pulumi.set(__self__, "records_per_slice", records_per_slice)
        if seed is not None:
            pulumi.set(__self__, "seed", seed)

    @property
    @pulumi.getter
    def count(self) -> int:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="alwaysUpdated")
    def always_updated(self) -> Optional[bool]:
        return pulumi.get(self, "always_updated")

    @property
    @pulumi.getter
    def parallelism(self) -> Optional[int]:
        return pulumi.get(self, "parallelism")

    @property
    @pulumi.getter(name="recordsPerSlice")
    def records_per_slice(self) -> Optional[int]:
        return pulumi.get(self, "records_per_slice")

    @property
    @pulumi.getter
    def seed(self) -> Optional[int]:
        return pulumi.get(self, "seed")


@pulumi.output_type
class SourceFaunaConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceFaunaConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceFaunaConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceFaunaConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain: str,
                 port: int,
                 scheme: str,
                 secret: str,
                 source_type: str,
                 collection: Optional['outputs.SourceFaunaConfigurationCollection'] = None):
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "source_type", source_type)
        if collection is not None:
            pulumi.set(__self__, "collection", collection)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def scheme(self) -> str:
        return pulumi.get(self, "scheme")

    @property
    @pulumi.getter
    def secret(self) -> str:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def collection(self) -> Optional['outputs.SourceFaunaConfigurationCollection']:
        return pulumi.get(self, "collection")


@pulumi.output_type
class SourceFaunaConfigurationCollection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pageSize":
            suggest = "page_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceFaunaConfigurationCollection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceFaunaConfigurationCollection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceFaunaConfigurationCollection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deletions: 'outputs.SourceFaunaConfigurationCollectionDeletions',
                 page_size: int):
        pulumi.set(__self__, "deletions", deletions)
        pulumi.set(__self__, "page_size", page_size)

    @property
    @pulumi.getter
    def deletions(self) -> 'outputs.SourceFaunaConfigurationCollectionDeletions':
        return pulumi.get(self, "deletions")

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> int:
        return pulumi.get(self, "page_size")


@pulumi.output_type
class SourceFaunaConfigurationCollectionDeletions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceFaunaCollectionDeletionModeDisabled":
            suggest = "source_fauna_collection_deletion_mode_disabled"
        elif key == "sourceFaunaCollectionDeletionModeEnabled":
            suggest = "source_fauna_collection_deletion_mode_enabled"
        elif key == "sourceFaunaUpdateCollectionDeletionModeDisabled":
            suggest = "source_fauna_update_collection_deletion_mode_disabled"
        elif key == "sourceFaunaUpdateCollectionDeletionModeEnabled":
            suggest = "source_fauna_update_collection_deletion_mode_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceFaunaConfigurationCollectionDeletions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceFaunaConfigurationCollectionDeletions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceFaunaConfigurationCollectionDeletions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_fauna_collection_deletion_mode_disabled: Optional['outputs.SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeDisabled'] = None,
                 source_fauna_collection_deletion_mode_enabled: Optional['outputs.SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeEnabled'] = None,
                 source_fauna_update_collection_deletion_mode_disabled: Optional['outputs.SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeDisabled'] = None,
                 source_fauna_update_collection_deletion_mode_enabled: Optional['outputs.SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeEnabled'] = None):
        if source_fauna_collection_deletion_mode_disabled is not None:
            pulumi.set(__self__, "source_fauna_collection_deletion_mode_disabled", source_fauna_collection_deletion_mode_disabled)
        if source_fauna_collection_deletion_mode_enabled is not None:
            pulumi.set(__self__, "source_fauna_collection_deletion_mode_enabled", source_fauna_collection_deletion_mode_enabled)
        if source_fauna_update_collection_deletion_mode_disabled is not None:
            pulumi.set(__self__, "source_fauna_update_collection_deletion_mode_disabled", source_fauna_update_collection_deletion_mode_disabled)
        if source_fauna_update_collection_deletion_mode_enabled is not None:
            pulumi.set(__self__, "source_fauna_update_collection_deletion_mode_enabled", source_fauna_update_collection_deletion_mode_enabled)

    @property
    @pulumi.getter(name="sourceFaunaCollectionDeletionModeDisabled")
    def source_fauna_collection_deletion_mode_disabled(self) -> Optional['outputs.SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeDisabled']:
        return pulumi.get(self, "source_fauna_collection_deletion_mode_disabled")

    @property
    @pulumi.getter(name="sourceFaunaCollectionDeletionModeEnabled")
    def source_fauna_collection_deletion_mode_enabled(self) -> Optional['outputs.SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeEnabled']:
        return pulumi.get(self, "source_fauna_collection_deletion_mode_enabled")

    @property
    @pulumi.getter(name="sourceFaunaUpdateCollectionDeletionModeDisabled")
    def source_fauna_update_collection_deletion_mode_disabled(self) -> Optional['outputs.SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeDisabled']:
        return pulumi.get(self, "source_fauna_update_collection_deletion_mode_disabled")

    @property
    @pulumi.getter(name="sourceFaunaUpdateCollectionDeletionModeEnabled")
    def source_fauna_update_collection_deletion_mode_enabled(self) -> Optional['outputs.SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeEnabled']:
        return pulumi.get(self, "source_fauna_update_collection_deletion_mode_enabled")


@pulumi.output_type
class SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeDisabled(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deletionMode":
            suggest = "deletion_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeDisabled. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeDisabled.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeDisabled.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deletion_mode: str):
        pulumi.set(__self__, "deletion_mode", deletion_mode)

    @property
    @pulumi.getter(name="deletionMode")
    def deletion_mode(self) -> str:
        return pulumi.get(self, "deletion_mode")


@pulumi.output_type
class SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeEnabled(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deletionMode":
            suggest = "deletion_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeEnabled. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeEnabled.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeEnabled.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: str,
                 deletion_mode: str):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "deletion_mode", deletion_mode)

    @property
    @pulumi.getter
    def column(self) -> str:
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="deletionMode")
    def deletion_mode(self) -> str:
        return pulumi.get(self, "deletion_mode")


@pulumi.output_type
class SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeDisabled(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deletionMode":
            suggest = "deletion_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeDisabled. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeDisabled.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeDisabled.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deletion_mode: str):
        pulumi.set(__self__, "deletion_mode", deletion_mode)

    @property
    @pulumi.getter(name="deletionMode")
    def deletion_mode(self) -> str:
        return pulumi.get(self, "deletion_mode")


@pulumi.output_type
class SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeEnabled(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deletionMode":
            suggest = "deletion_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeEnabled. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeEnabled.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeEnabled.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: str,
                 deletion_mode: str):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "deletion_mode", deletion_mode)

    @property
    @pulumi.getter
    def column(self) -> str:
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="deletionMode")
    def deletion_mode(self) -> str:
        return pulumi.get(self, "deletion_mode")


@pulumi.output_type
class SourceFileSecureConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datasetName":
            suggest = "dataset_name"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "readerOptions":
            suggest = "reader_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceFileSecureConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceFileSecureConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceFileSecureConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataset_name: str,
                 format: str,
                 provider: 'outputs.SourceFileSecureConfigurationProvider',
                 source_type: str,
                 url: str,
                 reader_options: Optional[str] = None):
        pulumi.set(__self__, "dataset_name", dataset_name)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "url", url)
        if reader_options is not None:
            pulumi.set(__self__, "reader_options", reader_options)

    @property
    @pulumi.getter(name="datasetName")
    def dataset_name(self) -> str:
        return pulumi.get(self, "dataset_name")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def provider(self) -> 'outputs.SourceFileSecureConfigurationProvider':
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="readerOptions")
    def reader_options(self) -> Optional[str]:
        return pulumi.get(self, "reader_options")


@pulumi.output_type
class SourceFileSecureConfigurationProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceFileSecureStorageProviderAzBlobAzureBlobStorage":
            suggest = "source_file_secure_storage_provider_az_blob_azure_blob_storage"
        elif key == "sourceFileSecureStorageProviderGcsGoogleCloudStorage":
            suggest = "source_file_secure_storage_provider_gcs_google_cloud_storage"
        elif key == "sourceFileSecureStorageProviderHttpsPublicWeb":
            suggest = "source_file_secure_storage_provider_https_public_web"
        elif key == "sourceFileSecureStorageProviderS3AmazonWebServices":
            suggest = "source_file_secure_storage_provider_s3_amazon_web_services"
        elif key == "sourceFileSecureStorageProviderScpSecureCopyProtocol":
            suggest = "source_file_secure_storage_provider_scp_secure_copy_protocol"
        elif key == "sourceFileSecureStorageProviderSftpSecureFileTransferProtocol":
            suggest = "source_file_secure_storage_provider_sftp_secure_file_transfer_protocol"
        elif key == "sourceFileSecureStorageProviderSshSecureShell":
            suggest = "source_file_secure_storage_provider_ssh_secure_shell"
        elif key == "sourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorage":
            suggest = "source_file_secure_update_storage_provider_az_blob_azure_blob_storage"
        elif key == "sourceFileSecureUpdateStorageProviderGcsGoogleCloudStorage":
            suggest = "source_file_secure_update_storage_provider_gcs_google_cloud_storage"
        elif key == "sourceFileSecureUpdateStorageProviderHttpsPublicWeb":
            suggest = "source_file_secure_update_storage_provider_https_public_web"
        elif key == "sourceFileSecureUpdateStorageProviderS3AmazonWebServices":
            suggest = "source_file_secure_update_storage_provider_s3_amazon_web_services"
        elif key == "sourceFileSecureUpdateStorageProviderScpSecureCopyProtocol":
            suggest = "source_file_secure_update_storage_provider_scp_secure_copy_protocol"
        elif key == "sourceFileSecureUpdateStorageProviderSftpSecureFileTransferProtocol":
            suggest = "source_file_secure_update_storage_provider_sftp_secure_file_transfer_protocol"
        elif key == "sourceFileSecureUpdateStorageProviderSshSecureShell":
            suggest = "source_file_secure_update_storage_provider_ssh_secure_shell"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceFileSecureConfigurationProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceFileSecureConfigurationProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceFileSecureConfigurationProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_file_secure_storage_provider_az_blob_azure_blob_storage: Optional['outputs.SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderAzBlobAzureBlobStorage'] = None,
                 source_file_secure_storage_provider_gcs_google_cloud_storage: Optional['outputs.SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderGcsGoogleCloudStorage'] = None,
                 source_file_secure_storage_provider_https_public_web: Optional['outputs.SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderHttpsPublicWeb'] = None,
                 source_file_secure_storage_provider_s3_amazon_web_services: Optional['outputs.SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderS3AmazonWebServices'] = None,
                 source_file_secure_storage_provider_scp_secure_copy_protocol: Optional['outputs.SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderScpSecureCopyProtocol'] = None,
                 source_file_secure_storage_provider_sftp_secure_file_transfer_protocol: Optional['outputs.SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSftpSecureFileTransferProtocol'] = None,
                 source_file_secure_storage_provider_ssh_secure_shell: Optional['outputs.SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSshSecureShell'] = None,
                 source_file_secure_update_storage_provider_az_blob_azure_blob_storage: Optional['outputs.SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorage'] = None,
                 source_file_secure_update_storage_provider_gcs_google_cloud_storage: Optional['outputs.SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderGcsGoogleCloudStorage'] = None,
                 source_file_secure_update_storage_provider_https_public_web: Optional['outputs.SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderHttpsPublicWeb'] = None,
                 source_file_secure_update_storage_provider_s3_amazon_web_services: Optional['outputs.SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderS3AmazonWebServices'] = None,
                 source_file_secure_update_storage_provider_scp_secure_copy_protocol: Optional['outputs.SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderScpSecureCopyProtocol'] = None,
                 source_file_secure_update_storage_provider_sftp_secure_file_transfer_protocol: Optional['outputs.SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSftpSecureFileTransferProtocol'] = None,
                 source_file_secure_update_storage_provider_ssh_secure_shell: Optional['outputs.SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSshSecureShell'] = None):
        if source_file_secure_storage_provider_az_blob_azure_blob_storage is not None:
            pulumi.set(__self__, "source_file_secure_storage_provider_az_blob_azure_blob_storage", source_file_secure_storage_provider_az_blob_azure_blob_storage)
        if source_file_secure_storage_provider_gcs_google_cloud_storage is not None:
            pulumi.set(__self__, "source_file_secure_storage_provider_gcs_google_cloud_storage", source_file_secure_storage_provider_gcs_google_cloud_storage)
        if source_file_secure_storage_provider_https_public_web is not None:
            pulumi.set(__self__, "source_file_secure_storage_provider_https_public_web", source_file_secure_storage_provider_https_public_web)
        if source_file_secure_storage_provider_s3_amazon_web_services is not None:
            pulumi.set(__self__, "source_file_secure_storage_provider_s3_amazon_web_services", source_file_secure_storage_provider_s3_amazon_web_services)
        if source_file_secure_storage_provider_scp_secure_copy_protocol is not None:
            pulumi.set(__self__, "source_file_secure_storage_provider_scp_secure_copy_protocol", source_file_secure_storage_provider_scp_secure_copy_protocol)
        if source_file_secure_storage_provider_sftp_secure_file_transfer_protocol is not None:
            pulumi.set(__self__, "source_file_secure_storage_provider_sftp_secure_file_transfer_protocol", source_file_secure_storage_provider_sftp_secure_file_transfer_protocol)
        if source_file_secure_storage_provider_ssh_secure_shell is not None:
            pulumi.set(__self__, "source_file_secure_storage_provider_ssh_secure_shell", source_file_secure_storage_provider_ssh_secure_shell)
        if source_file_secure_update_storage_provider_az_blob_azure_blob_storage is not None:
            pulumi.set(__self__, "source_file_secure_update_storage_provider_az_blob_azure_blob_storage", source_file_secure_update_storage_provider_az_blob_azure_blob_storage)
        if source_file_secure_update_storage_provider_gcs_google_cloud_storage is not None:
            pulumi.set(__self__, "source_file_secure_update_storage_provider_gcs_google_cloud_storage", source_file_secure_update_storage_provider_gcs_google_cloud_storage)
        if source_file_secure_update_storage_provider_https_public_web is not None:
            pulumi.set(__self__, "source_file_secure_update_storage_provider_https_public_web", source_file_secure_update_storage_provider_https_public_web)
        if source_file_secure_update_storage_provider_s3_amazon_web_services is not None:
            pulumi.set(__self__, "source_file_secure_update_storage_provider_s3_amazon_web_services", source_file_secure_update_storage_provider_s3_amazon_web_services)
        if source_file_secure_update_storage_provider_scp_secure_copy_protocol is not None:
            pulumi.set(__self__, "source_file_secure_update_storage_provider_scp_secure_copy_protocol", source_file_secure_update_storage_provider_scp_secure_copy_protocol)
        if source_file_secure_update_storage_provider_sftp_secure_file_transfer_protocol is not None:
            pulumi.set(__self__, "source_file_secure_update_storage_provider_sftp_secure_file_transfer_protocol", source_file_secure_update_storage_provider_sftp_secure_file_transfer_protocol)
        if source_file_secure_update_storage_provider_ssh_secure_shell is not None:
            pulumi.set(__self__, "source_file_secure_update_storage_provider_ssh_secure_shell", source_file_secure_update_storage_provider_ssh_secure_shell)

    @property
    @pulumi.getter(name="sourceFileSecureStorageProviderAzBlobAzureBlobStorage")
    def source_file_secure_storage_provider_az_blob_azure_blob_storage(self) -> Optional['outputs.SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderAzBlobAzureBlobStorage']:
        return pulumi.get(self, "source_file_secure_storage_provider_az_blob_azure_blob_storage")

    @property
    @pulumi.getter(name="sourceFileSecureStorageProviderGcsGoogleCloudStorage")
    def source_file_secure_storage_provider_gcs_google_cloud_storage(self) -> Optional['outputs.SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderGcsGoogleCloudStorage']:
        return pulumi.get(self, "source_file_secure_storage_provider_gcs_google_cloud_storage")

    @property
    @pulumi.getter(name="sourceFileSecureStorageProviderHttpsPublicWeb")
    def source_file_secure_storage_provider_https_public_web(self) -> Optional['outputs.SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderHttpsPublicWeb']:
        return pulumi.get(self, "source_file_secure_storage_provider_https_public_web")

    @property
    @pulumi.getter(name="sourceFileSecureStorageProviderS3AmazonWebServices")
    def source_file_secure_storage_provider_s3_amazon_web_services(self) -> Optional['outputs.SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderS3AmazonWebServices']:
        return pulumi.get(self, "source_file_secure_storage_provider_s3_amazon_web_services")

    @property
    @pulumi.getter(name="sourceFileSecureStorageProviderScpSecureCopyProtocol")
    def source_file_secure_storage_provider_scp_secure_copy_protocol(self) -> Optional['outputs.SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderScpSecureCopyProtocol']:
        return pulumi.get(self, "source_file_secure_storage_provider_scp_secure_copy_protocol")

    @property
    @pulumi.getter(name="sourceFileSecureStorageProviderSftpSecureFileTransferProtocol")
    def source_file_secure_storage_provider_sftp_secure_file_transfer_protocol(self) -> Optional['outputs.SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSftpSecureFileTransferProtocol']:
        return pulumi.get(self, "source_file_secure_storage_provider_sftp_secure_file_transfer_protocol")

    @property
    @pulumi.getter(name="sourceFileSecureStorageProviderSshSecureShell")
    def source_file_secure_storage_provider_ssh_secure_shell(self) -> Optional['outputs.SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSshSecureShell']:
        return pulumi.get(self, "source_file_secure_storage_provider_ssh_secure_shell")

    @property
    @pulumi.getter(name="sourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorage")
    def source_file_secure_update_storage_provider_az_blob_azure_blob_storage(self) -> Optional['outputs.SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorage']:
        return pulumi.get(self, "source_file_secure_update_storage_provider_az_blob_azure_blob_storage")

    @property
    @pulumi.getter(name="sourceFileSecureUpdateStorageProviderGcsGoogleCloudStorage")
    def source_file_secure_update_storage_provider_gcs_google_cloud_storage(self) -> Optional['outputs.SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderGcsGoogleCloudStorage']:
        return pulumi.get(self, "source_file_secure_update_storage_provider_gcs_google_cloud_storage")

    @property
    @pulumi.getter(name="sourceFileSecureUpdateStorageProviderHttpsPublicWeb")
    def source_file_secure_update_storage_provider_https_public_web(self) -> Optional['outputs.SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderHttpsPublicWeb']:
        return pulumi.get(self, "source_file_secure_update_storage_provider_https_public_web")

    @property
    @pulumi.getter(name="sourceFileSecureUpdateStorageProviderS3AmazonWebServices")
    def source_file_secure_update_storage_provider_s3_amazon_web_services(self) -> Optional['outputs.SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderS3AmazonWebServices']:
        return pulumi.get(self, "source_file_secure_update_storage_provider_s3_amazon_web_services")

    @property
    @pulumi.getter(name="sourceFileSecureUpdateStorageProviderScpSecureCopyProtocol")
    def source_file_secure_update_storage_provider_scp_secure_copy_protocol(self) -> Optional['outputs.SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderScpSecureCopyProtocol']:
        return pulumi.get(self, "source_file_secure_update_storage_provider_scp_secure_copy_protocol")

    @property
    @pulumi.getter(name="sourceFileSecureUpdateStorageProviderSftpSecureFileTransferProtocol")
    def source_file_secure_update_storage_provider_sftp_secure_file_transfer_protocol(self) -> Optional['outputs.SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSftpSecureFileTransferProtocol']:
        return pulumi.get(self, "source_file_secure_update_storage_provider_sftp_secure_file_transfer_protocol")

    @property
    @pulumi.getter(name="sourceFileSecureUpdateStorageProviderSshSecureShell")
    def source_file_secure_update_storage_provider_ssh_secure_shell(self) -> Optional['outputs.SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSshSecureShell']:
        return pulumi.get(self, "source_file_secure_update_storage_provider_ssh_secure_shell")


@pulumi.output_type
class SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderAzBlobAzureBlobStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageAccount":
            suggest = "storage_account"
        elif key == "sasToken":
            suggest = "sas_token"
        elif key == "sharedKey":
            suggest = "shared_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderAzBlobAzureBlobStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderAzBlobAzureBlobStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderAzBlobAzureBlobStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 storage: str,
                 storage_account: str,
                 sas_token: Optional[str] = None,
                 shared_key: Optional[str] = None):
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "storage_account", storage_account)
        if sas_token is not None:
            pulumi.set(__self__, "sas_token", sas_token)
        if shared_key is not None:
            pulumi.set(__self__, "shared_key", shared_key)

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="storageAccount")
    def storage_account(self) -> str:
        return pulumi.get(self, "storage_account")

    @property
    @pulumi.getter(name="sasToken")
    def sas_token(self) -> Optional[str]:
        return pulumi.get(self, "sas_token")

    @property
    @pulumi.getter(name="sharedKey")
    def shared_key(self) -> Optional[str]:
        return pulumi.get(self, "shared_key")


@pulumi.output_type
class SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderGcsGoogleCloudStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceAccountJson":
            suggest = "service_account_json"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderGcsGoogleCloudStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderGcsGoogleCloudStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderGcsGoogleCloudStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 storage: str,
                 service_account_json: Optional[str] = None):
        pulumi.set(__self__, "storage", storage)
        if service_account_json is not None:
            pulumi.set(__self__, "service_account_json", service_account_json)

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="serviceAccountJson")
    def service_account_json(self) -> Optional[str]:
        return pulumi.get(self, "service_account_json")


@pulumi.output_type
class SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderHttpsPublicWeb(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userAgent":
            suggest = "user_agent"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderHttpsPublicWeb. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderHttpsPublicWeb.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderHttpsPublicWeb.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 storage: str,
                 user_agent: Optional[bool] = None):
        pulumi.set(__self__, "storage", storage)
        if user_agent is not None:
            pulumi.set(__self__, "user_agent", user_agent)

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> Optional[bool]:
        return pulumi.get(self, "user_agent")


@pulumi.output_type
class SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderS3AmazonWebServices(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsAccessKeyId":
            suggest = "aws_access_key_id"
        elif key == "awsSecretAccessKey":
            suggest = "aws_secret_access_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderS3AmazonWebServices. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderS3AmazonWebServices.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderS3AmazonWebServices.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 storage: str,
                 aws_access_key_id: Optional[str] = None,
                 aws_secret_access_key: Optional[str] = None):
        pulumi.set(__self__, "storage", storage)
        if aws_access_key_id is not None:
            pulumi.set(__self__, "aws_access_key_id", aws_access_key_id)
        if aws_secret_access_key is not None:
            pulumi.set(__self__, "aws_secret_access_key", aws_secret_access_key)

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> Optional[str]:
        return pulumi.get(self, "aws_access_key_id")

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> Optional[str]:
        return pulumi.get(self, "aws_secret_access_key")


@pulumi.output_type
class SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderScpSecureCopyProtocol(dict):
    def __init__(__self__, *,
                 host: str,
                 storage: str,
                 user: str,
                 password: Optional[str] = None,
                 port: Optional[str] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "user", user)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")


@pulumi.output_type
class SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSftpSecureFileTransferProtocol(dict):
    def __init__(__self__, *,
                 host: str,
                 storage: str,
                 user: str,
                 password: Optional[str] = None,
                 port: Optional[str] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "user", user)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")


@pulumi.output_type
class SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSshSecureShell(dict):
    def __init__(__self__, *,
                 host: str,
                 storage: str,
                 user: str,
                 password: Optional[str] = None,
                 port: Optional[str] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "user", user)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")


@pulumi.output_type
class SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageAccount":
            suggest = "storage_account"
        elif key == "sasToken":
            suggest = "sas_token"
        elif key == "sharedKey":
            suggest = "shared_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 storage: str,
                 storage_account: str,
                 sas_token: Optional[str] = None,
                 shared_key: Optional[str] = None):
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "storage_account", storage_account)
        if sas_token is not None:
            pulumi.set(__self__, "sas_token", sas_token)
        if shared_key is not None:
            pulumi.set(__self__, "shared_key", shared_key)

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="storageAccount")
    def storage_account(self) -> str:
        return pulumi.get(self, "storage_account")

    @property
    @pulumi.getter(name="sasToken")
    def sas_token(self) -> Optional[str]:
        return pulumi.get(self, "sas_token")

    @property
    @pulumi.getter(name="sharedKey")
    def shared_key(self) -> Optional[str]:
        return pulumi.get(self, "shared_key")


@pulumi.output_type
class SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderGcsGoogleCloudStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceAccountJson":
            suggest = "service_account_json"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderGcsGoogleCloudStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderGcsGoogleCloudStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderGcsGoogleCloudStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 storage: str,
                 service_account_json: Optional[str] = None):
        pulumi.set(__self__, "storage", storage)
        if service_account_json is not None:
            pulumi.set(__self__, "service_account_json", service_account_json)

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="serviceAccountJson")
    def service_account_json(self) -> Optional[str]:
        return pulumi.get(self, "service_account_json")


@pulumi.output_type
class SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderHttpsPublicWeb(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userAgent":
            suggest = "user_agent"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderHttpsPublicWeb. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderHttpsPublicWeb.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderHttpsPublicWeb.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 storage: str,
                 user_agent: Optional[bool] = None):
        pulumi.set(__self__, "storage", storage)
        if user_agent is not None:
            pulumi.set(__self__, "user_agent", user_agent)

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> Optional[bool]:
        return pulumi.get(self, "user_agent")


@pulumi.output_type
class SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderS3AmazonWebServices(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsAccessKeyId":
            suggest = "aws_access_key_id"
        elif key == "awsSecretAccessKey":
            suggest = "aws_secret_access_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderS3AmazonWebServices. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderS3AmazonWebServices.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderS3AmazonWebServices.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 storage: str,
                 aws_access_key_id: Optional[str] = None,
                 aws_secret_access_key: Optional[str] = None):
        pulumi.set(__self__, "storage", storage)
        if aws_access_key_id is not None:
            pulumi.set(__self__, "aws_access_key_id", aws_access_key_id)
        if aws_secret_access_key is not None:
            pulumi.set(__self__, "aws_secret_access_key", aws_secret_access_key)

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> Optional[str]:
        return pulumi.get(self, "aws_access_key_id")

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> Optional[str]:
        return pulumi.get(self, "aws_secret_access_key")


@pulumi.output_type
class SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderScpSecureCopyProtocol(dict):
    def __init__(__self__, *,
                 host: str,
                 storage: str,
                 user: str,
                 password: Optional[str] = None,
                 port: Optional[str] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "user", user)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")


@pulumi.output_type
class SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSftpSecureFileTransferProtocol(dict):
    def __init__(__self__, *,
                 host: str,
                 storage: str,
                 user: str,
                 password: Optional[str] = None,
                 port: Optional[str] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "user", user)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")


@pulumi.output_type
class SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSshSecureShell(dict):
    def __init__(__self__, *,
                 host: str,
                 storage: str,
                 user: str,
                 password: Optional[str] = None,
                 port: Optional[str] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "user", user)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")


@pulumi.output_type
class SourceFireboltConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceFireboltConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceFireboltConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceFireboltConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: str,
                 password: str,
                 source_type: str,
                 username: str,
                 account: Optional[str] = None,
                 engine: Optional[str] = None,
                 host: Optional[str] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "username", username)
        if account is not None:
            pulumi.set(__self__, "account", account)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def account(self) -> Optional[str]:
        return pulumi.get(self, "account")

    @property
    @pulumi.getter
    def engine(self) -> Optional[str]:
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")


@pulumi.output_type
class SourceFreshcallerConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "requestsPerMinute":
            suggest = "requests_per_minute"
        elif key == "syncLagMinutes":
            suggest = "sync_lag_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceFreshcallerConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceFreshcallerConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceFreshcallerConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 domain: str,
                 source_type: str,
                 start_date: str,
                 requests_per_minute: Optional[int] = None,
                 sync_lag_minutes: Optional[int] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if requests_per_minute is not None:
            pulumi.set(__self__, "requests_per_minute", requests_per_minute)
        if sync_lag_minutes is not None:
            pulumi.set(__self__, "sync_lag_minutes", sync_lag_minutes)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="requestsPerMinute")
    def requests_per_minute(self) -> Optional[int]:
        return pulumi.get(self, "requests_per_minute")

    @property
    @pulumi.getter(name="syncLagMinutes")
    def sync_lag_minutes(self) -> Optional[int]:
        return pulumi.get(self, "sync_lag_minutes")


@pulumi.output_type
class SourceFreshdeskConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "requestsPerMinute":
            suggest = "requests_per_minute"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceFreshdeskConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceFreshdeskConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceFreshdeskConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 domain: str,
                 source_type: str,
                 requests_per_minute: Optional[int] = None,
                 start_date: Optional[str] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "source_type", source_type)
        if requests_per_minute is not None:
            pulumi.set(__self__, "requests_per_minute", requests_per_minute)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="requestsPerMinute")
    def requests_per_minute(self) -> Optional[int]:
        return pulumi.get(self, "requests_per_minute")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceFreshsalesConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "domainName":
            suggest = "domain_name"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceFreshsalesConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceFreshsalesConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceFreshsalesConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 domain_name: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> str:
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceGainsightPxConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGainsightPxConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGainsightPxConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGainsightPxConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceGcsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gcsBucket":
            suggest = "gcs_bucket"
        elif key == "gcsPath":
            suggest = "gcs_path"
        elif key == "serviceAccount":
            suggest = "service_account"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGcsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGcsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGcsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gcs_bucket: str,
                 gcs_path: str,
                 service_account: str,
                 source_type: str):
        pulumi.set(__self__, "gcs_bucket", gcs_bucket)
        pulumi.set(__self__, "gcs_path", gcs_path)
        pulumi.set(__self__, "service_account", service_account)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="gcsBucket")
    def gcs_bucket(self) -> str:
        return pulumi.get(self, "gcs_bucket")

    @property
    @pulumi.getter(name="gcsPath")
    def gcs_path(self) -> str:
        return pulumi.get(self, "gcs_path")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> str:
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceGetlagoConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGetlagoConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGetlagoConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGetlagoConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceGithubConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "requestsPerHour":
            suggest = "requests_per_hour"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGithubConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGithubConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGithubConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repository: str,
                 source_type: str,
                 start_date: str,
                 branch: Optional[str] = None,
                 credentials: Optional['outputs.SourceGithubConfigurationCredentials'] = None,
                 requests_per_hour: Optional[int] = None):
        pulumi.set(__self__, "repository", repository)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if requests_per_hour is not None:
            pulumi.set(__self__, "requests_per_hour", requests_per_hour)

    @property
    @pulumi.getter
    def repository(self) -> str:
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def branch(self) -> Optional[str]:
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourceGithubConfigurationCredentials']:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="requestsPerHour")
    def requests_per_hour(self) -> Optional[int]:
        return pulumi.get(self, "requests_per_hour")


@pulumi.output_type
class SourceGithubConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceGithubAuthenticationOAuth":
            suggest = "source_github_authentication_o_auth"
        elif key == "sourceGithubAuthenticationPersonalAccessToken":
            suggest = "source_github_authentication_personal_access_token"
        elif key == "sourceGithubUpdateAuthenticationOAuth":
            suggest = "source_github_update_authentication_o_auth"
        elif key == "sourceGithubUpdateAuthenticationPersonalAccessToken":
            suggest = "source_github_update_authentication_personal_access_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGithubConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGithubConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGithubConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_github_authentication_o_auth: Optional['outputs.SourceGithubConfigurationCredentialsSourceGithubAuthenticationOAuth'] = None,
                 source_github_authentication_personal_access_token: Optional['outputs.SourceGithubConfigurationCredentialsSourceGithubAuthenticationPersonalAccessToken'] = None,
                 source_github_update_authentication_o_auth: Optional['outputs.SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationOAuth'] = None,
                 source_github_update_authentication_personal_access_token: Optional['outputs.SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationPersonalAccessToken'] = None):
        if source_github_authentication_o_auth is not None:
            pulumi.set(__self__, "source_github_authentication_o_auth", source_github_authentication_o_auth)
        if source_github_authentication_personal_access_token is not None:
            pulumi.set(__self__, "source_github_authentication_personal_access_token", source_github_authentication_personal_access_token)
        if source_github_update_authentication_o_auth is not None:
            pulumi.set(__self__, "source_github_update_authentication_o_auth", source_github_update_authentication_o_auth)
        if source_github_update_authentication_personal_access_token is not None:
            pulumi.set(__self__, "source_github_update_authentication_personal_access_token", source_github_update_authentication_personal_access_token)

    @property
    @pulumi.getter(name="sourceGithubAuthenticationOAuth")
    def source_github_authentication_o_auth(self) -> Optional['outputs.SourceGithubConfigurationCredentialsSourceGithubAuthenticationOAuth']:
        return pulumi.get(self, "source_github_authentication_o_auth")

    @property
    @pulumi.getter(name="sourceGithubAuthenticationPersonalAccessToken")
    def source_github_authentication_personal_access_token(self) -> Optional['outputs.SourceGithubConfigurationCredentialsSourceGithubAuthenticationPersonalAccessToken']:
        return pulumi.get(self, "source_github_authentication_personal_access_token")

    @property
    @pulumi.getter(name="sourceGithubUpdateAuthenticationOAuth")
    def source_github_update_authentication_o_auth(self) -> Optional['outputs.SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationOAuth']:
        return pulumi.get(self, "source_github_update_authentication_o_auth")

    @property
    @pulumi.getter(name="sourceGithubUpdateAuthenticationPersonalAccessToken")
    def source_github_update_authentication_personal_access_token(self) -> Optional['outputs.SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationPersonalAccessToken']:
        return pulumi.get(self, "source_github_update_authentication_personal_access_token")


@pulumi.output_type
class SourceGithubConfigurationCredentialsSourceGithubAuthenticationOAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "optionTitle":
            suggest = "option_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGithubConfigurationCredentialsSourceGithubAuthenticationOAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGithubConfigurationCredentialsSourceGithubAuthenticationOAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGithubConfigurationCredentialsSourceGithubAuthenticationOAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 option_title: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[str]:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class SourceGithubConfigurationCredentialsSourceGithubAuthenticationPersonalAccessToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "personalAccessToken":
            suggest = "personal_access_token"
        elif key == "optionTitle":
            suggest = "option_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGithubConfigurationCredentialsSourceGithubAuthenticationPersonalAccessToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGithubConfigurationCredentialsSourceGithubAuthenticationPersonalAccessToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGithubConfigurationCredentialsSourceGithubAuthenticationPersonalAccessToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 personal_access_token: str,
                 option_title: Optional[str] = None):
        pulumi.set(__self__, "personal_access_token", personal_access_token)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="personalAccessToken")
    def personal_access_token(self) -> str:
        return pulumi.get(self, "personal_access_token")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[str]:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationOAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "optionTitle":
            suggest = "option_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationOAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationOAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationOAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 option_title: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[str]:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationPersonalAccessToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "personalAccessToken":
            suggest = "personal_access_token"
        elif key == "optionTitle":
            suggest = "option_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationPersonalAccessToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationPersonalAccessToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationPersonalAccessToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 personal_access_token: str,
                 option_title: Optional[str] = None):
        pulumi.set(__self__, "personal_access_token", personal_access_token)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="personalAccessToken")
    def personal_access_token(self) -> str:
        return pulumi.get(self, "personal_access_token")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[str]:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class SourceGitlabConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "apiUrl":
            suggest = "api_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGitlabConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGitlabConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGitlabConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials: 'outputs.SourceGitlabConfigurationCredentials',
                 source_type: str,
                 start_date: str,
                 api_url: Optional[str] = None,
                 groups: Optional[str] = None,
                 projects: Optional[str] = None):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if api_url is not None:
            pulumi.set(__self__, "api_url", api_url)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if projects is not None:
            pulumi.set(__self__, "projects", projects)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.SourceGitlabConfigurationCredentials':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> Optional[str]:
        return pulumi.get(self, "api_url")

    @property
    @pulumi.getter
    def groups(self) -> Optional[str]:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def projects(self) -> Optional[str]:
        return pulumi.get(self, "projects")


@pulumi.output_type
class SourceGitlabConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceGitlabAuthorizationMethodOAuth20":
            suggest = "source_gitlab_authorization_method_o_auth20"
        elif key == "sourceGitlabAuthorizationMethodPrivateToken":
            suggest = "source_gitlab_authorization_method_private_token"
        elif key == "sourceGitlabUpdateAuthorizationMethodOAuth20":
            suggest = "source_gitlab_update_authorization_method_o_auth20"
        elif key == "sourceGitlabUpdateAuthorizationMethodPrivateToken":
            suggest = "source_gitlab_update_authorization_method_private_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGitlabConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGitlabConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGitlabConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_gitlab_authorization_method_o_auth20: Optional['outputs.SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodOAuth20'] = None,
                 source_gitlab_authorization_method_private_token: Optional['outputs.SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodPrivateToken'] = None,
                 source_gitlab_update_authorization_method_o_auth20: Optional['outputs.SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodOAuth20'] = None,
                 source_gitlab_update_authorization_method_private_token: Optional['outputs.SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodPrivateToken'] = None):
        if source_gitlab_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_gitlab_authorization_method_o_auth20", source_gitlab_authorization_method_o_auth20)
        if source_gitlab_authorization_method_private_token is not None:
            pulumi.set(__self__, "source_gitlab_authorization_method_private_token", source_gitlab_authorization_method_private_token)
        if source_gitlab_update_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_gitlab_update_authorization_method_o_auth20", source_gitlab_update_authorization_method_o_auth20)
        if source_gitlab_update_authorization_method_private_token is not None:
            pulumi.set(__self__, "source_gitlab_update_authorization_method_private_token", source_gitlab_update_authorization_method_private_token)

    @property
    @pulumi.getter(name="sourceGitlabAuthorizationMethodOAuth20")
    def source_gitlab_authorization_method_o_auth20(self) -> Optional['outputs.SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodOAuth20']:
        return pulumi.get(self, "source_gitlab_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourceGitlabAuthorizationMethodPrivateToken")
    def source_gitlab_authorization_method_private_token(self) -> Optional['outputs.SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodPrivateToken']:
        return pulumi.get(self, "source_gitlab_authorization_method_private_token")

    @property
    @pulumi.getter(name="sourceGitlabUpdateAuthorizationMethodOAuth20")
    def source_gitlab_update_authorization_method_o_auth20(self) -> Optional['outputs.SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodOAuth20']:
        return pulumi.get(self, "source_gitlab_update_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourceGitlabUpdateAuthorizationMethodPrivateToken")
    def source_gitlab_update_authorization_method_private_token(self) -> Optional['outputs.SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodPrivateToken']:
        return pulumi.get(self, "source_gitlab_update_authorization_method_private_token")


@pulumi.output_type
class SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "tokenExpiryDate":
            suggest = "token_expiry_date"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 token_expiry_date: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> str:
        return pulumi.get(self, "token_expiry_date")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodPrivateToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodPrivateToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodPrivateToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodPrivateToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "tokenExpiryDate":
            suggest = "token_expiry_date"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 token_expiry_date: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> str:
        return pulumi.get(self, "token_expiry_date")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodPrivateToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodPrivateToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodPrivateToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodPrivateToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceGlassfrogConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGlassfrogConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGlassfrogConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGlassfrogConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceGnewsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "endDate":
            suggest = "end_date"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "topHeadlinesQuery":
            suggest = "top_headlines_query"
        elif key == "topHeadlinesTopic":
            suggest = "top_headlines_topic"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGnewsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGnewsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGnewsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 query: str,
                 source_type: str,
                 country: Optional[str] = None,
                 end_date: Optional[str] = None,
                 ins: Optional[Sequence[str]] = None,
                 language: Optional[str] = None,
                 nullables: Optional[Sequence[str]] = None,
                 sortby: Optional[str] = None,
                 start_date: Optional[str] = None,
                 top_headlines_query: Optional[str] = None,
                 top_headlines_topic: Optional[str] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "source_type", source_type)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if ins is not None:
            pulumi.set(__self__, "ins", ins)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if nullables is not None:
            pulumi.set(__self__, "nullables", nullables)
        if sortby is not None:
            pulumi.set(__self__, "sortby", sortby)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if top_headlines_query is not None:
            pulumi.set(__self__, "top_headlines_query", top_headlines_query)
        if top_headlines_topic is not None:
            pulumi.set(__self__, "top_headlines_topic", top_headlines_topic)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter
    def ins(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ins")

    @property
    @pulumi.getter
    def language(self) -> Optional[str]:
        return pulumi.get(self, "language")

    @property
    @pulumi.getter
    def nullables(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nullables")

    @property
    @pulumi.getter
    def sortby(self) -> Optional[str]:
        return pulumi.get(self, "sortby")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="topHeadlinesQuery")
    def top_headlines_query(self) -> Optional[str]:
        return pulumi.get(self, "top_headlines_query")

    @property
    @pulumi.getter(name="topHeadlinesTopic")
    def top_headlines_topic(self) -> Optional[str]:
        return pulumi.get(self, "top_headlines_topic")


@pulumi.output_type
class SourceGoogleAdsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customerId":
            suggest = "customer_id"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "conversionWindowDays":
            suggest = "conversion_window_days"
        elif key == "customQueries":
            suggest = "custom_queries"
        elif key == "endDate":
            suggest = "end_date"
        elif key == "loginCustomerId":
            suggest = "login_customer_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleAdsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleAdsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleAdsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials: 'outputs.SourceGoogleAdsConfigurationCredentials',
                 customer_id: str,
                 source_type: str,
                 start_date: str,
                 conversion_window_days: Optional[int] = None,
                 custom_queries: Optional[Sequence['outputs.SourceGoogleAdsConfigurationCustomQuery']] = None,
                 end_date: Optional[str] = None,
                 login_customer_id: Optional[str] = None):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "customer_id", customer_id)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if conversion_window_days is not None:
            pulumi.set(__self__, "conversion_window_days", conversion_window_days)
        if custom_queries is not None:
            pulumi.set(__self__, "custom_queries", custom_queries)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if login_customer_id is not None:
            pulumi.set(__self__, "login_customer_id", login_customer_id)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.SourceGoogleAdsConfigurationCredentials':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="customerId")
    def customer_id(self) -> str:
        return pulumi.get(self, "customer_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="conversionWindowDays")
    def conversion_window_days(self) -> Optional[int]:
        return pulumi.get(self, "conversion_window_days")

    @property
    @pulumi.getter(name="customQueries")
    def custom_queries(self) -> Optional[Sequence['outputs.SourceGoogleAdsConfigurationCustomQuery']]:
        return pulumi.get(self, "custom_queries")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="loginCustomerId")
    def login_customer_id(self) -> Optional[str]:
        return pulumi.get(self, "login_customer_id")


@pulumi.output_type
class SourceGoogleAdsConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "developerToken":
            suggest = "developer_token"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "accessToken":
            suggest = "access_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleAdsConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleAdsConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleAdsConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 developer_token: str,
                 refresh_token: str,
                 access_token: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "developer_token", developer_token)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="developerToken")
    def developer_token(self) -> str:
        return pulumi.get(self, "developer_token")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[str]:
        return pulumi.get(self, "access_token")


@pulumi.output_type
class SourceGoogleAdsConfigurationCustomQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tableName":
            suggest = "table_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleAdsConfigurationCustomQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleAdsConfigurationCustomQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleAdsConfigurationCustomQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 query: str,
                 table_name: str):
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        return pulumi.get(self, "table_name")


@pulumi.output_type
class SourceGoogleAnalyticsDataApiConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateRangesStartDate":
            suggest = "date_ranges_start_date"
        elif key == "propertyId":
            suggest = "property_id"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "customReports":
            suggest = "custom_reports"
        elif key == "windowInDays":
            suggest = "window_in_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleAnalyticsDataApiConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleAnalyticsDataApiConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleAnalyticsDataApiConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_ranges_start_date: str,
                 property_id: str,
                 source_type: str,
                 credentials: Optional['outputs.SourceGoogleAnalyticsDataApiConfigurationCredentials'] = None,
                 custom_reports: Optional[str] = None,
                 window_in_days: Optional[int] = None):
        pulumi.set(__self__, "date_ranges_start_date", date_ranges_start_date)
        pulumi.set(__self__, "property_id", property_id)
        pulumi.set(__self__, "source_type", source_type)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if custom_reports is not None:
            pulumi.set(__self__, "custom_reports", custom_reports)
        if window_in_days is not None:
            pulumi.set(__self__, "window_in_days", window_in_days)

    @property
    @pulumi.getter(name="dateRangesStartDate")
    def date_ranges_start_date(self) -> str:
        return pulumi.get(self, "date_ranges_start_date")

    @property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> str:
        return pulumi.get(self, "property_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourceGoogleAnalyticsDataApiConfigurationCredentials']:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="customReports")
    def custom_reports(self) -> Optional[str]:
        return pulumi.get(self, "custom_reports")

    @property
    @pulumi.getter(name="windowInDays")
    def window_in_days(self) -> Optional[int]:
        return pulumi.get(self, "window_in_days")


@pulumi.output_type
class SourceGoogleAnalyticsDataApiConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauth":
            suggest = "source_google_analytics_data_api_credentials_authenticate_via_google_oauth"
        elif key == "sourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthentication":
            suggest = "source_google_analytics_data_api_credentials_service_account_key_authentication"
        elif key == "sourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauth":
            suggest = "source_google_analytics_data_api_update_credentials_authenticate_via_google_oauth"
        elif key == "sourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthentication":
            suggest = "source_google_analytics_data_api_update_credentials_service_account_key_authentication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleAnalyticsDataApiConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleAnalyticsDataApiConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleAnalyticsDataApiConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_google_analytics_data_api_credentials_authenticate_via_google_oauth: Optional['outputs.SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauth'] = None,
                 source_google_analytics_data_api_credentials_service_account_key_authentication: Optional['outputs.SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthentication'] = None,
                 source_google_analytics_data_api_update_credentials_authenticate_via_google_oauth: Optional['outputs.SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauth'] = None,
                 source_google_analytics_data_api_update_credentials_service_account_key_authentication: Optional['outputs.SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthentication'] = None):
        if source_google_analytics_data_api_credentials_authenticate_via_google_oauth is not None:
            pulumi.set(__self__, "source_google_analytics_data_api_credentials_authenticate_via_google_oauth", source_google_analytics_data_api_credentials_authenticate_via_google_oauth)
        if source_google_analytics_data_api_credentials_service_account_key_authentication is not None:
            pulumi.set(__self__, "source_google_analytics_data_api_credentials_service_account_key_authentication", source_google_analytics_data_api_credentials_service_account_key_authentication)
        if source_google_analytics_data_api_update_credentials_authenticate_via_google_oauth is not None:
            pulumi.set(__self__, "source_google_analytics_data_api_update_credentials_authenticate_via_google_oauth", source_google_analytics_data_api_update_credentials_authenticate_via_google_oauth)
        if source_google_analytics_data_api_update_credentials_service_account_key_authentication is not None:
            pulumi.set(__self__, "source_google_analytics_data_api_update_credentials_service_account_key_authentication", source_google_analytics_data_api_update_credentials_service_account_key_authentication)

    @property
    @pulumi.getter(name="sourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauth")
    def source_google_analytics_data_api_credentials_authenticate_via_google_oauth(self) -> Optional['outputs.SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauth']:
        return pulumi.get(self, "source_google_analytics_data_api_credentials_authenticate_via_google_oauth")

    @property
    @pulumi.getter(name="sourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthentication")
    def source_google_analytics_data_api_credentials_service_account_key_authentication(self) -> Optional['outputs.SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthentication']:
        return pulumi.get(self, "source_google_analytics_data_api_credentials_service_account_key_authentication")

    @property
    @pulumi.getter(name="sourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauth")
    def source_google_analytics_data_api_update_credentials_authenticate_via_google_oauth(self) -> Optional['outputs.SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauth']:
        return pulumi.get(self, "source_google_analytics_data_api_update_credentials_authenticate_via_google_oauth")

    @property
    @pulumi.getter(name="sourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthentication")
    def source_google_analytics_data_api_update_credentials_service_account_key_authentication(self) -> Optional['outputs.SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthentication']:
        return pulumi.get(self, "source_google_analytics_data_api_update_credentials_service_account_key_authentication")


@pulumi.output_type
class SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "accessToken":
            suggest = "access_token"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 access_token: Optional[str] = None,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[str]:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialsJson":
            suggest = "credentials_json"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials_json: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "credentials_json", credentials_json)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> str:
        return pulumi.get(self, "credentials_json")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "accessToken":
            suggest = "access_token"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 access_token: Optional[str] = None,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[str]:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialsJson":
            suggest = "credentials_json"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials_json: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "credentials_json", credentials_json)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> str:
        return pulumi.get(self, "credentials_json")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceGoogleAnalyticsV4Configuration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "viewId":
            suggest = "view_id"
        elif key == "customReports":
            suggest = "custom_reports"
        elif key == "windowInDays":
            suggest = "window_in_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleAnalyticsV4Configuration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleAnalyticsV4Configuration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleAnalyticsV4Configuration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 start_date: str,
                 view_id: str,
                 credentials: Optional['outputs.SourceGoogleAnalyticsV4ConfigurationCredentials'] = None,
                 custom_reports: Optional[str] = None,
                 window_in_days: Optional[int] = None):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "view_id", view_id)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if custom_reports is not None:
            pulumi.set(__self__, "custom_reports", custom_reports)
        if window_in_days is not None:
            pulumi.set(__self__, "window_in_days", window_in_days)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="viewId")
    def view_id(self) -> str:
        return pulumi.get(self, "view_id")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourceGoogleAnalyticsV4ConfigurationCredentials']:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="customReports")
    def custom_reports(self) -> Optional[str]:
        return pulumi.get(self, "custom_reports")

    @property
    @pulumi.getter(name="windowInDays")
    def window_in_days(self) -> Optional[int]:
        return pulumi.get(self, "window_in_days")


@pulumi.output_type
class SourceGoogleAnalyticsV4ConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth":
            suggest = "source_google_analytics_v4_credentials_authenticate_via_google_oauth"
        elif key == "sourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication":
            suggest = "source_google_analytics_v4_credentials_service_account_key_authentication"
        elif key == "sourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth":
            suggest = "source_google_analytics_v4_update_credentials_authenticate_via_google_oauth"
        elif key == "sourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication":
            suggest = "source_google_analytics_v4_update_credentials_service_account_key_authentication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleAnalyticsV4ConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleAnalyticsV4ConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleAnalyticsV4ConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_google_analytics_v4_credentials_authenticate_via_google_oauth: Optional['outputs.SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth'] = None,
                 source_google_analytics_v4_credentials_service_account_key_authentication: Optional['outputs.SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication'] = None,
                 source_google_analytics_v4_update_credentials_authenticate_via_google_oauth: Optional['outputs.SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth'] = None,
                 source_google_analytics_v4_update_credentials_service_account_key_authentication: Optional['outputs.SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication'] = None):
        if source_google_analytics_v4_credentials_authenticate_via_google_oauth is not None:
            pulumi.set(__self__, "source_google_analytics_v4_credentials_authenticate_via_google_oauth", source_google_analytics_v4_credentials_authenticate_via_google_oauth)
        if source_google_analytics_v4_credentials_service_account_key_authentication is not None:
            pulumi.set(__self__, "source_google_analytics_v4_credentials_service_account_key_authentication", source_google_analytics_v4_credentials_service_account_key_authentication)
        if source_google_analytics_v4_update_credentials_authenticate_via_google_oauth is not None:
            pulumi.set(__self__, "source_google_analytics_v4_update_credentials_authenticate_via_google_oauth", source_google_analytics_v4_update_credentials_authenticate_via_google_oauth)
        if source_google_analytics_v4_update_credentials_service_account_key_authentication is not None:
            pulumi.set(__self__, "source_google_analytics_v4_update_credentials_service_account_key_authentication", source_google_analytics_v4_update_credentials_service_account_key_authentication)

    @property
    @pulumi.getter(name="sourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth")
    def source_google_analytics_v4_credentials_authenticate_via_google_oauth(self) -> Optional['outputs.SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth']:
        return pulumi.get(self, "source_google_analytics_v4_credentials_authenticate_via_google_oauth")

    @property
    @pulumi.getter(name="sourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication")
    def source_google_analytics_v4_credentials_service_account_key_authentication(self) -> Optional['outputs.SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication']:
        return pulumi.get(self, "source_google_analytics_v4_credentials_service_account_key_authentication")

    @property
    @pulumi.getter(name="sourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth")
    def source_google_analytics_v4_update_credentials_authenticate_via_google_oauth(self) -> Optional['outputs.SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth']:
        return pulumi.get(self, "source_google_analytics_v4_update_credentials_authenticate_via_google_oauth")

    @property
    @pulumi.getter(name="sourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication")
    def source_google_analytics_v4_update_credentials_service_account_key_authentication(self) -> Optional['outputs.SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication']:
        return pulumi.get(self, "source_google_analytics_v4_update_credentials_service_account_key_authentication")


@pulumi.output_type
class SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "accessToken":
            suggest = "access_token"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 access_token: Optional[str] = None,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[str]:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialsJson":
            suggest = "credentials_json"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials_json: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "credentials_json", credentials_json)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> str:
        return pulumi.get(self, "credentials_json")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "accessToken":
            suggest = "access_token"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 access_token: Optional[str] = None,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[str]:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialsJson":
            suggest = "credentials_json"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials_json: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "credentials_json", credentials_json)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> str:
        return pulumi.get(self, "credentials_json")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceGoogleDirectoryConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleDirectoryConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleDirectoryConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleDirectoryConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 credentials: Optional['outputs.SourceGoogleDirectoryConfigurationCredentials'] = None):
        pulumi.set(__self__, "source_type", source_type)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourceGoogleDirectoryConfigurationCredentials']:
        return pulumi.get(self, "credentials")


@pulumi.output_type
class SourceGoogleDirectoryConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceGoogleDirectoryGoogleCredentialsServiceAccountKey":
            suggest = "source_google_directory_google_credentials_service_account_key"
        elif key == "sourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuth":
            suggest = "source_google_directory_google_credentials_sign_in_via_google_o_auth"
        elif key == "sourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey":
            suggest = "source_google_directory_update_google_credentials_service_account_key"
        elif key == "sourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth":
            suggest = "source_google_directory_update_google_credentials_sign_in_via_google_o_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleDirectoryConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleDirectoryConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleDirectoryConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_google_directory_google_credentials_service_account_key: Optional['outputs.SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsServiceAccountKey'] = None,
                 source_google_directory_google_credentials_sign_in_via_google_o_auth: Optional['outputs.SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuth'] = None,
                 source_google_directory_update_google_credentials_service_account_key: Optional['outputs.SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey'] = None,
                 source_google_directory_update_google_credentials_sign_in_via_google_o_auth: Optional['outputs.SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth'] = None):
        if source_google_directory_google_credentials_service_account_key is not None:
            pulumi.set(__self__, "source_google_directory_google_credentials_service_account_key", source_google_directory_google_credentials_service_account_key)
        if source_google_directory_google_credentials_sign_in_via_google_o_auth is not None:
            pulumi.set(__self__, "source_google_directory_google_credentials_sign_in_via_google_o_auth", source_google_directory_google_credentials_sign_in_via_google_o_auth)
        if source_google_directory_update_google_credentials_service_account_key is not None:
            pulumi.set(__self__, "source_google_directory_update_google_credentials_service_account_key", source_google_directory_update_google_credentials_service_account_key)
        if source_google_directory_update_google_credentials_sign_in_via_google_o_auth is not None:
            pulumi.set(__self__, "source_google_directory_update_google_credentials_sign_in_via_google_o_auth", source_google_directory_update_google_credentials_sign_in_via_google_o_auth)

    @property
    @pulumi.getter(name="sourceGoogleDirectoryGoogleCredentialsServiceAccountKey")
    def source_google_directory_google_credentials_service_account_key(self) -> Optional['outputs.SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsServiceAccountKey']:
        return pulumi.get(self, "source_google_directory_google_credentials_service_account_key")

    @property
    @pulumi.getter(name="sourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuth")
    def source_google_directory_google_credentials_sign_in_via_google_o_auth(self) -> Optional['outputs.SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuth']:
        return pulumi.get(self, "source_google_directory_google_credentials_sign_in_via_google_o_auth")

    @property
    @pulumi.getter(name="sourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey")
    def source_google_directory_update_google_credentials_service_account_key(self) -> Optional['outputs.SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey']:
        return pulumi.get(self, "source_google_directory_update_google_credentials_service_account_key")

    @property
    @pulumi.getter(name="sourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth")
    def source_google_directory_update_google_credentials_sign_in_via_google_o_auth(self) -> Optional['outputs.SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth']:
        return pulumi.get(self, "source_google_directory_update_google_credentials_sign_in_via_google_o_auth")


@pulumi.output_type
class SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsServiceAccountKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialsJson":
            suggest = "credentials_json"
        elif key == "credentialsTitle":
            suggest = "credentials_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsServiceAccountKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsServiceAccountKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsServiceAccountKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials_json: str,
                 email: str,
                 credentials_title: Optional[str] = None):
        pulumi.set(__self__, "credentials_json", credentials_json)
        pulumi.set(__self__, "email", email)
        if credentials_title is not None:
            pulumi.set(__self__, "credentials_title", credentials_title)

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> str:
        return pulumi.get(self, "credentials_json")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> Optional[str]:
        return pulumi.get(self, "credentials_title")


@pulumi.output_type
class SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "credentialsTitle":
            suggest = "credentials_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 credentials_title: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if credentials_title is not None:
            pulumi.set(__self__, "credentials_title", credentials_title)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> Optional[str]:
        return pulumi.get(self, "credentials_title")


@pulumi.output_type
class SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialsJson":
            suggest = "credentials_json"
        elif key == "credentialsTitle":
            suggest = "credentials_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials_json: str,
                 email: str,
                 credentials_title: Optional[str] = None):
        pulumi.set(__self__, "credentials_json", credentials_json)
        pulumi.set(__self__, "email", email)
        if credentials_title is not None:
            pulumi.set(__self__, "credentials_title", credentials_title)

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> str:
        return pulumi.get(self, "credentials_json")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> Optional[str]:
        return pulumi.get(self, "credentials_title")


@pulumi.output_type
class SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "credentialsTitle":
            suggest = "credentials_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 credentials_title: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if credentials_title is not None:
            pulumi.set(__self__, "credentials_title", credentials_title)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> Optional[str]:
        return pulumi.get(self, "credentials_title")


@pulumi.output_type
class SourceGooglePagespeedInsightsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "apiKey":
            suggest = "api_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGooglePagespeedInsightsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGooglePagespeedInsightsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGooglePagespeedInsightsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 categories: Sequence[str],
                 source_type: str,
                 strategies: Sequence[str],
                 urls: Sequence[str],
                 api_key: Optional[str] = None):
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "strategies", strategies)
        pulumi.set(__self__, "urls", urls)
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)

    @property
    @pulumi.getter
    def categories(self) -> Sequence[str]:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def strategies(self) -> Sequence[str]:
        return pulumi.get(self, "strategies")

    @property
    @pulumi.getter
    def urls(self) -> Sequence[str]:
        return pulumi.get(self, "urls")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[str]:
        return pulumi.get(self, "api_key")


@pulumi.output_type
class SourceGoogleSearchConsoleConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "siteUrls":
            suggest = "site_urls"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "customReports":
            suggest = "custom_reports"
        elif key == "dataState":
            suggest = "data_state"
        elif key == "endDate":
            suggest = "end_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleSearchConsoleConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleSearchConsoleConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleSearchConsoleConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authorization: 'outputs.SourceGoogleSearchConsoleConfigurationAuthorization',
                 site_urls: Sequence[str],
                 source_type: str,
                 start_date: str,
                 custom_reports: Optional[str] = None,
                 data_state: Optional[str] = None,
                 end_date: Optional[str] = None):
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "site_urls", site_urls)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if custom_reports is not None:
            pulumi.set(__self__, "custom_reports", custom_reports)
        if data_state is not None:
            pulumi.set(__self__, "data_state", data_state)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)

    @property
    @pulumi.getter
    def authorization(self) -> 'outputs.SourceGoogleSearchConsoleConfigurationAuthorization':
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="siteUrls")
    def site_urls(self) -> Sequence[str]:
        return pulumi.get(self, "site_urls")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="customReports")
    def custom_reports(self) -> Optional[str]:
        return pulumi.get(self, "custom_reports")

    @property
    @pulumi.getter(name="dataState")
    def data_state(self) -> Optional[str]:
        return pulumi.get(self, "data_state")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")


@pulumi.output_type
class SourceGoogleSearchConsoleConfigurationAuthorization(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceGoogleSearchConsoleAuthenticationTypeOAuth":
            suggest = "source_google_search_console_authentication_type_o_auth"
        elif key == "sourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication":
            suggest = "source_google_search_console_authentication_type_service_account_key_authentication"
        elif key == "sourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth":
            suggest = "source_google_search_console_update_authentication_type_o_auth"
        elif key == "sourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication":
            suggest = "source_google_search_console_update_authentication_type_service_account_key_authentication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleSearchConsoleConfigurationAuthorization. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleSearchConsoleConfigurationAuthorization.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleSearchConsoleConfigurationAuthorization.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_google_search_console_authentication_type_o_auth: Optional['outputs.SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeOAuth'] = None,
                 source_google_search_console_authentication_type_service_account_key_authentication: Optional['outputs.SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication'] = None,
                 source_google_search_console_update_authentication_type_o_auth: Optional['outputs.SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth'] = None,
                 source_google_search_console_update_authentication_type_service_account_key_authentication: Optional['outputs.SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication'] = None):
        if source_google_search_console_authentication_type_o_auth is not None:
            pulumi.set(__self__, "source_google_search_console_authentication_type_o_auth", source_google_search_console_authentication_type_o_auth)
        if source_google_search_console_authentication_type_service_account_key_authentication is not None:
            pulumi.set(__self__, "source_google_search_console_authentication_type_service_account_key_authentication", source_google_search_console_authentication_type_service_account_key_authentication)
        if source_google_search_console_update_authentication_type_o_auth is not None:
            pulumi.set(__self__, "source_google_search_console_update_authentication_type_o_auth", source_google_search_console_update_authentication_type_o_auth)
        if source_google_search_console_update_authentication_type_service_account_key_authentication is not None:
            pulumi.set(__self__, "source_google_search_console_update_authentication_type_service_account_key_authentication", source_google_search_console_update_authentication_type_service_account_key_authentication)

    @property
    @pulumi.getter(name="sourceGoogleSearchConsoleAuthenticationTypeOAuth")
    def source_google_search_console_authentication_type_o_auth(self) -> Optional['outputs.SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeOAuth']:
        return pulumi.get(self, "source_google_search_console_authentication_type_o_auth")

    @property
    @pulumi.getter(name="sourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication")
    def source_google_search_console_authentication_type_service_account_key_authentication(self) -> Optional['outputs.SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication']:
        return pulumi.get(self, "source_google_search_console_authentication_type_service_account_key_authentication")

    @property
    @pulumi.getter(name="sourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth")
    def source_google_search_console_update_authentication_type_o_auth(self) -> Optional['outputs.SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth']:
        return pulumi.get(self, "source_google_search_console_update_authentication_type_o_auth")

    @property
    @pulumi.getter(name="sourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication")
    def source_google_search_console_update_authentication_type_service_account_key_authentication(self) -> Optional['outputs.SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication']:
        return pulumi.get(self, "source_google_search_console_update_authentication_type_service_account_key_authentication")


@pulumi.output_type
class SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeOAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "accessToken":
            suggest = "access_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeOAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeOAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeOAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 access_token: Optional[str] = None):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[str]:
        return pulumi.get(self, "access_token")


@pulumi.output_type
class SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"
        elif key == "serviceAccountInfo":
            suggest = "service_account_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_type: str,
                 email: str,
                 service_account_info: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "service_account_info", service_account_info)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="serviceAccountInfo")
    def service_account_info(self) -> str:
        return pulumi.get(self, "service_account_info")


@pulumi.output_type
class SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "accessToken":
            suggest = "access_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 access_token: Optional[str] = None):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[str]:
        return pulumi.get(self, "access_token")


@pulumi.output_type
class SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"
        elif key == "serviceAccountInfo":
            suggest = "service_account_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_type: str,
                 email: str,
                 service_account_info: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "service_account_info", service_account_info)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="serviceAccountInfo")
    def service_account_info(self) -> str:
        return pulumi.get(self, "service_account_info")


@pulumi.output_type
class SourceGoogleSheetsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "spreadsheetId":
            suggest = "spreadsheet_id"
        elif key == "namesConversion":
            suggest = "names_conversion"
        elif key == "rowBatchSize":
            suggest = "row_batch_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleSheetsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleSheetsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleSheetsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials: 'outputs.SourceGoogleSheetsConfigurationCredentials',
                 source_type: str,
                 spreadsheet_id: str,
                 names_conversion: Optional[bool] = None,
                 row_batch_size: Optional[int] = None):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "spreadsheet_id", spreadsheet_id)
        if names_conversion is not None:
            pulumi.set(__self__, "names_conversion", names_conversion)
        if row_batch_size is not None:
            pulumi.set(__self__, "row_batch_size", row_batch_size)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.SourceGoogleSheetsConfigurationCredentials':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="spreadsheetId")
    def spreadsheet_id(self) -> str:
        return pulumi.get(self, "spreadsheet_id")

    @property
    @pulumi.getter(name="namesConversion")
    def names_conversion(self) -> Optional[bool]:
        return pulumi.get(self, "names_conversion")

    @property
    @pulumi.getter(name="rowBatchSize")
    def row_batch_size(self) -> Optional[int]:
        return pulumi.get(self, "row_batch_size")


@pulumi.output_type
class SourceGoogleSheetsConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth":
            suggest = "source_google_sheets_authentication_authenticate_via_google_o_auth"
        elif key == "sourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication":
            suggest = "source_google_sheets_authentication_service_account_key_authentication"
        elif key == "sourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth":
            suggest = "source_google_sheets_update_authentication_authenticate_via_google_o_auth"
        elif key == "sourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication":
            suggest = "source_google_sheets_update_authentication_service_account_key_authentication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleSheetsConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleSheetsConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleSheetsConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_google_sheets_authentication_authenticate_via_google_o_auth: Optional['outputs.SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth'] = None,
                 source_google_sheets_authentication_service_account_key_authentication: Optional['outputs.SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication'] = None,
                 source_google_sheets_update_authentication_authenticate_via_google_o_auth: Optional['outputs.SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth'] = None,
                 source_google_sheets_update_authentication_service_account_key_authentication: Optional['outputs.SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication'] = None):
        if source_google_sheets_authentication_authenticate_via_google_o_auth is not None:
            pulumi.set(__self__, "source_google_sheets_authentication_authenticate_via_google_o_auth", source_google_sheets_authentication_authenticate_via_google_o_auth)
        if source_google_sheets_authentication_service_account_key_authentication is not None:
            pulumi.set(__self__, "source_google_sheets_authentication_service_account_key_authentication", source_google_sheets_authentication_service_account_key_authentication)
        if source_google_sheets_update_authentication_authenticate_via_google_o_auth is not None:
            pulumi.set(__self__, "source_google_sheets_update_authentication_authenticate_via_google_o_auth", source_google_sheets_update_authentication_authenticate_via_google_o_auth)
        if source_google_sheets_update_authentication_service_account_key_authentication is not None:
            pulumi.set(__self__, "source_google_sheets_update_authentication_service_account_key_authentication", source_google_sheets_update_authentication_service_account_key_authentication)

    @property
    @pulumi.getter(name="sourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth")
    def source_google_sheets_authentication_authenticate_via_google_o_auth(self) -> Optional['outputs.SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth']:
        return pulumi.get(self, "source_google_sheets_authentication_authenticate_via_google_o_auth")

    @property
    @pulumi.getter(name="sourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication")
    def source_google_sheets_authentication_service_account_key_authentication(self) -> Optional['outputs.SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication']:
        return pulumi.get(self, "source_google_sheets_authentication_service_account_key_authentication")

    @property
    @pulumi.getter(name="sourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth")
    def source_google_sheets_update_authentication_authenticate_via_google_o_auth(self) -> Optional['outputs.SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth']:
        return pulumi.get(self, "source_google_sheets_update_authentication_authenticate_via_google_o_auth")

    @property
    @pulumi.getter(name="sourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication")
    def source_google_sheets_update_authentication_service_account_key_authentication(self) -> Optional['outputs.SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication']:
        return pulumi.get(self, "source_google_sheets_update_authentication_service_account_key_authentication")


@pulumi.output_type
class SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"
        elif key == "serviceAccountInfo":
            suggest = "service_account_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_type: str,
                 service_account_info: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "service_account_info", service_account_info)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="serviceAccountInfo")
    def service_account_info(self) -> str:
        return pulumi.get(self, "service_account_info")


@pulumi.output_type
class SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"
        elif key == "serviceAccountInfo":
            suggest = "service_account_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_type: str,
                 service_account_info: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "service_account_info", service_account_info)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="serviceAccountInfo")
    def service_account_info(self) -> str:
        return pulumi.get(self, "service_account_info")


@pulumi.output_type
class SourceGoogleWebfontsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "prettyPrint":
            suggest = "pretty_print"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleWebfontsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleWebfontsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleWebfontsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 source_type: str,
                 alt: Optional[str] = None,
                 pretty_print: Optional[str] = None,
                 sort: Optional[str] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        if alt is not None:
            pulumi.set(__self__, "alt", alt)
        if pretty_print is not None:
            pulumi.set(__self__, "pretty_print", pretty_print)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def alt(self) -> Optional[str]:
        return pulumi.get(self, "alt")

    @property
    @pulumi.getter(name="prettyPrint")
    def pretty_print(self) -> Optional[str]:
        return pulumi.get(self, "pretty_print")

    @property
    @pulumi.getter
    def sort(self) -> Optional[str]:
        return pulumi.get(self, "sort")


@pulumi.output_type
class SourceGoogleWorkspaceAdminReportsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialsJson":
            suggest = "credentials_json"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGoogleWorkspaceAdminReportsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGoogleWorkspaceAdminReportsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGoogleWorkspaceAdminReportsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials_json: str,
                 email: str,
                 source_type: str,
                 lookback: Optional[int] = None):
        pulumi.set(__self__, "credentials_json", credentials_json)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "source_type", source_type)
        if lookback is not None:
            pulumi.set(__self__, "lookback", lookback)

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> str:
        return pulumi.get(self, "credentials_json")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def lookback(self) -> Optional[int]:
        return pulumi.get(self, "lookback")


@pulumi.output_type
class SourceGreenhouseConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGreenhouseConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGreenhouseConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGreenhouseConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceGridlyConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "gridId":
            suggest = "grid_id"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceGridlyConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceGridlyConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceGridlyConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 grid_id: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "grid_id", grid_id)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="gridId")
    def grid_id(self) -> str:
        return pulumi.get(self, "grid_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceHarvestConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "replicationStartDate":
            suggest = "replication_start_date"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "replicationEndDate":
            suggest = "replication_end_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceHarvestConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceHarvestConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceHarvestConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: str,
                 replication_start_date: str,
                 source_type: str,
                 credentials: Optional['outputs.SourceHarvestConfigurationCredentials'] = None,
                 replication_end_date: Optional[str] = None):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "replication_start_date", replication_start_date)
        pulumi.set(__self__, "source_type", source_type)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if replication_end_date is not None:
            pulumi.set(__self__, "replication_end_date", replication_end_date)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="replicationStartDate")
    def replication_start_date(self) -> str:
        return pulumi.get(self, "replication_start_date")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourceHarvestConfigurationCredentials']:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="replicationEndDate")
    def replication_end_date(self) -> Optional[str]:
        return pulumi.get(self, "replication_end_date")


@pulumi.output_type
class SourceHarvestConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth":
            suggest = "source_harvest_authentication_mechanism_authenticate_via_harvest_o_auth"
        elif key == "sourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken":
            suggest = "source_harvest_authentication_mechanism_authenticate_with_personal_access_token"
        elif key == "sourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth":
            suggest = "source_harvest_update_authentication_mechanism_authenticate_via_harvest_o_auth"
        elif key == "sourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken":
            suggest = "source_harvest_update_authentication_mechanism_authenticate_with_personal_access_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceHarvestConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceHarvestConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceHarvestConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_harvest_authentication_mechanism_authenticate_via_harvest_o_auth: Optional['outputs.SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth'] = None,
                 source_harvest_authentication_mechanism_authenticate_with_personal_access_token: Optional['outputs.SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken'] = None,
                 source_harvest_update_authentication_mechanism_authenticate_via_harvest_o_auth: Optional['outputs.SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth'] = None,
                 source_harvest_update_authentication_mechanism_authenticate_with_personal_access_token: Optional['outputs.SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken'] = None):
        if source_harvest_authentication_mechanism_authenticate_via_harvest_o_auth is not None:
            pulumi.set(__self__, "source_harvest_authentication_mechanism_authenticate_via_harvest_o_auth", source_harvest_authentication_mechanism_authenticate_via_harvest_o_auth)
        if source_harvest_authentication_mechanism_authenticate_with_personal_access_token is not None:
            pulumi.set(__self__, "source_harvest_authentication_mechanism_authenticate_with_personal_access_token", source_harvest_authentication_mechanism_authenticate_with_personal_access_token)
        if source_harvest_update_authentication_mechanism_authenticate_via_harvest_o_auth is not None:
            pulumi.set(__self__, "source_harvest_update_authentication_mechanism_authenticate_via_harvest_o_auth", source_harvest_update_authentication_mechanism_authenticate_via_harvest_o_auth)
        if source_harvest_update_authentication_mechanism_authenticate_with_personal_access_token is not None:
            pulumi.set(__self__, "source_harvest_update_authentication_mechanism_authenticate_with_personal_access_token", source_harvest_update_authentication_mechanism_authenticate_with_personal_access_token)

    @property
    @pulumi.getter(name="sourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth")
    def source_harvest_authentication_mechanism_authenticate_via_harvest_o_auth(self) -> Optional['outputs.SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth']:
        return pulumi.get(self, "source_harvest_authentication_mechanism_authenticate_via_harvest_o_auth")

    @property
    @pulumi.getter(name="sourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken")
    def source_harvest_authentication_mechanism_authenticate_with_personal_access_token(self) -> Optional['outputs.SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken']:
        return pulumi.get(self, "source_harvest_authentication_mechanism_authenticate_with_personal_access_token")

    @property
    @pulumi.getter(name="sourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth")
    def source_harvest_update_authentication_mechanism_authenticate_via_harvest_o_auth(self) -> Optional['outputs.SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth']:
        return pulumi.get(self, "source_harvest_update_authentication_mechanism_authenticate_via_harvest_o_auth")

    @property
    @pulumi.getter(name="sourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken")
    def source_harvest_update_authentication_mechanism_authenticate_with_personal_access_token(self) -> Optional['outputs.SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken']:
        return pulumi.get(self, "source_harvest_update_authentication_mechanism_authenticate_with_personal_access_token")


@pulumi.output_type
class SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "additionalProperties":
            suggest = "additional_properties"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 additional_properties: Optional[str] = None,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiToken":
            suggest = "api_token"
        elif key == "additionalProperties":
            suggest = "additional_properties"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token: str,
                 additional_properties: Optional[str] = None,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "api_token", api_token)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "additionalProperties":
            suggest = "additional_properties"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 additional_properties: Optional[str] = None,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiToken":
            suggest = "api_token"
        elif key == "additionalProperties":
            suggest = "additional_properties"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token: str,
                 additional_properties: Optional[str] = None,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "api_token", api_token)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceHubplannerConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceHubplannerConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceHubplannerConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceHubplannerConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceHubspotConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceHubspotConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceHubspotConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceHubspotConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials: 'outputs.SourceHubspotConfigurationCredentials',
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.SourceHubspotConfigurationCredentials':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceHubspotConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceHubspotAuthenticationOAuth":
            suggest = "source_hubspot_authentication_o_auth"
        elif key == "sourceHubspotAuthenticationPrivateApp":
            suggest = "source_hubspot_authentication_private_app"
        elif key == "sourceHubspotUpdateAuthenticationOAuth":
            suggest = "source_hubspot_update_authentication_o_auth"
        elif key == "sourceHubspotUpdateAuthenticationPrivateApp":
            suggest = "source_hubspot_update_authentication_private_app"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceHubspotConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceHubspotConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceHubspotConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_hubspot_authentication_o_auth: Optional['outputs.SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationOAuth'] = None,
                 source_hubspot_authentication_private_app: Optional['outputs.SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationPrivateApp'] = None,
                 source_hubspot_update_authentication_o_auth: Optional['outputs.SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationOAuth'] = None,
                 source_hubspot_update_authentication_private_app: Optional['outputs.SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationPrivateApp'] = None):
        if source_hubspot_authentication_o_auth is not None:
            pulumi.set(__self__, "source_hubspot_authentication_o_auth", source_hubspot_authentication_o_auth)
        if source_hubspot_authentication_private_app is not None:
            pulumi.set(__self__, "source_hubspot_authentication_private_app", source_hubspot_authentication_private_app)
        if source_hubspot_update_authentication_o_auth is not None:
            pulumi.set(__self__, "source_hubspot_update_authentication_o_auth", source_hubspot_update_authentication_o_auth)
        if source_hubspot_update_authentication_private_app is not None:
            pulumi.set(__self__, "source_hubspot_update_authentication_private_app", source_hubspot_update_authentication_private_app)

    @property
    @pulumi.getter(name="sourceHubspotAuthenticationOAuth")
    def source_hubspot_authentication_o_auth(self) -> Optional['outputs.SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationOAuth']:
        return pulumi.get(self, "source_hubspot_authentication_o_auth")

    @property
    @pulumi.getter(name="sourceHubspotAuthenticationPrivateApp")
    def source_hubspot_authentication_private_app(self) -> Optional['outputs.SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationPrivateApp']:
        return pulumi.get(self, "source_hubspot_authentication_private_app")

    @property
    @pulumi.getter(name="sourceHubspotUpdateAuthenticationOAuth")
    def source_hubspot_update_authentication_o_auth(self) -> Optional['outputs.SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationOAuth']:
        return pulumi.get(self, "source_hubspot_update_authentication_o_auth")

    @property
    @pulumi.getter(name="sourceHubspotUpdateAuthenticationPrivateApp")
    def source_hubspot_update_authentication_private_app(self) -> Optional['outputs.SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationPrivateApp']:
        return pulumi.get(self, "source_hubspot_update_authentication_private_app")


@pulumi.output_type
class SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationOAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "credentialsTitle":
            suggest = "credentials_title"
        elif key == "refreshToken":
            suggest = "refresh_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationOAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationOAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationOAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 credentials_title: str,
                 refresh_token: str):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "credentials_title", credentials_title)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> str:
        return pulumi.get(self, "credentials_title")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationPrivateApp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "credentialsTitle":
            suggest = "credentials_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationPrivateApp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationPrivateApp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationPrivateApp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 credentials_title: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "credentials_title", credentials_title)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> str:
        return pulumi.get(self, "credentials_title")


@pulumi.output_type
class SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationOAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "credentialsTitle":
            suggest = "credentials_title"
        elif key == "refreshToken":
            suggest = "refresh_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationOAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationOAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationOAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 credentials_title: str,
                 refresh_token: str):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "credentials_title", credentials_title)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> str:
        return pulumi.get(self, "credentials_title")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationPrivateApp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "credentialsTitle":
            suggest = "credentials_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationPrivateApp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationPrivateApp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationPrivateApp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 credentials_title: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "credentials_title", credentials_title)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> str:
        return pulumi.get(self, "credentials_title")


@pulumi.output_type
class SourceInsightlyConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceInsightlyConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceInsightlyConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceInsightlyConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 start_date: str,
                 token: str):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def token(self) -> str:
        return pulumi.get(self, "token")


@pulumi.output_type
class SourceInstagramConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceInstagramConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceInstagramConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceInstagramConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 source_type: str,
                 start_date: str,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class SourceInstatusConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceInstatusConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceInstatusConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceInstatusConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceIntercomConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceIntercomConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceIntercomConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceIntercomConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceIp2whoisConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceIp2whoisConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceIp2whoisConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceIp2whoisConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: Optional[str] = None,
                 domain: Optional[str] = None,
                 source_type: Optional[str] = None):
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[str]:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceIterableConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceIterableConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceIterableConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceIterableConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceJiraConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiToken":
            suggest = "api_token"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "enableExperimentalStreams":
            suggest = "enable_experimental_streams"
        elif key == "expandIssueChangelog":
            suggest = "expand_issue_changelog"
        elif key == "renderFields":
            suggest = "render_fields"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceJiraConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceJiraConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceJiraConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token: str,
                 domain: str,
                 email: str,
                 source_type: str,
                 enable_experimental_streams: Optional[bool] = None,
                 expand_issue_changelog: Optional[bool] = None,
                 projects: Optional[Sequence[str]] = None,
                 render_fields: Optional[bool] = None,
                 start_date: Optional[str] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "source_type", source_type)
        if enable_experimental_streams is not None:
            pulumi.set(__self__, "enable_experimental_streams", enable_experimental_streams)
        if expand_issue_changelog is not None:
            pulumi.set(__self__, "expand_issue_changelog", expand_issue_changelog)
        if projects is not None:
            pulumi.set(__self__, "projects", projects)
        if render_fields is not None:
            pulumi.set(__self__, "render_fields", render_fields)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="enableExperimentalStreams")
    def enable_experimental_streams(self) -> Optional[bool]:
        return pulumi.get(self, "enable_experimental_streams")

    @property
    @pulumi.getter(name="expandIssueChangelog")
    def expand_issue_changelog(self) -> Optional[bool]:
        return pulumi.get(self, "expand_issue_changelog")

    @property
    @pulumi.getter
    def projects(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "projects")

    @property
    @pulumi.getter(name="renderFields")
    def render_fields(self) -> Optional[bool]:
        return pulumi.get(self, "render_fields")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceK6CloudConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiToken":
            suggest = "api_token"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceK6CloudConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceK6CloudConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceK6CloudConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token: str,
                 source_type: str):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceKlarnaConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceKlarnaConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceKlarnaConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceKlarnaConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password: str,
                 playground: bool,
                 region: str,
                 source_type: str,
                 username: str):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "playground", playground)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def playground(self) -> bool:
        return pulumi.get(self, "playground")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class SourceKlaviyoConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceKlaviyoConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceKlaviyoConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceKlaviyoConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceKustomerSingerConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiToken":
            suggest = "api_token"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceKustomerSingerConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceKustomerSingerConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceKustomerSingerConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceKyveConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "poolIds":
            suggest = "pool_ids"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startIds":
            suggest = "start_ids"
        elif key == "maxPages":
            suggest = "max_pages"
        elif key == "pageSize":
            suggest = "page_size"
        elif key == "urlBase":
            suggest = "url_base"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceKyveConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceKyveConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceKyveConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pool_ids: str,
                 source_type: str,
                 start_ids: str,
                 max_pages: Optional[int] = None,
                 page_size: Optional[int] = None,
                 url_base: Optional[str] = None):
        pulumi.set(__self__, "pool_ids", pool_ids)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_ids", start_ids)
        if max_pages is not None:
            pulumi.set(__self__, "max_pages", max_pages)
        if page_size is not None:
            pulumi.set(__self__, "page_size", page_size)
        if url_base is not None:
            pulumi.set(__self__, "url_base", url_base)

    @property
    @pulumi.getter(name="poolIds")
    def pool_ids(self) -> str:
        return pulumi.get(self, "pool_ids")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startIds")
    def start_ids(self) -> str:
        return pulumi.get(self, "start_ids")

    @property
    @pulumi.getter(name="maxPages")
    def max_pages(self) -> Optional[int]:
        return pulumi.get(self, "max_pages")

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> Optional[int]:
        return pulumi.get(self, "page_size")

    @property
    @pulumi.getter(name="urlBase")
    def url_base(self) -> Optional[str]:
        return pulumi.get(self, "url_base")


@pulumi.output_type
class SourceLaunchdarklyConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceLaunchdarklyConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceLaunchdarklyConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceLaunchdarklyConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 source_type: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceLemlistConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceLemlistConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceLemlistConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceLemlistConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceLeverHiringConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceLeverHiringConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceLeverHiringConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceLeverHiringConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 start_date: str,
                 credentials: Optional['outputs.SourceLeverHiringConfigurationCredentials'] = None,
                 environment: Optional[str] = None):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourceLeverHiringConfigurationCredentials']:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def environment(self) -> Optional[str]:
        return pulumi.get(self, "environment")


@pulumi.output_type
class SourceLeverHiringConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKey":
            suggest = "source_lever_hiring_authentication_mechanism_authenticate_via_lever_api_key"
        elif key == "sourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth":
            suggest = "source_lever_hiring_authentication_mechanism_authenticate_via_lever_o_auth"
        elif key == "sourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKey":
            suggest = "source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_api_key"
        elif key == "sourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth":
            suggest = "source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_o_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceLeverHiringConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceLeverHiringConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceLeverHiringConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_lever_hiring_authentication_mechanism_authenticate_via_lever_api_key: Optional['outputs.SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKey'] = None,
                 source_lever_hiring_authentication_mechanism_authenticate_via_lever_o_auth: Optional['outputs.SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth'] = None,
                 source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_api_key: Optional['outputs.SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKey'] = None,
                 source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_o_auth: Optional['outputs.SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth'] = None):
        if source_lever_hiring_authentication_mechanism_authenticate_via_lever_api_key is not None:
            pulumi.set(__self__, "source_lever_hiring_authentication_mechanism_authenticate_via_lever_api_key", source_lever_hiring_authentication_mechanism_authenticate_via_lever_api_key)
        if source_lever_hiring_authentication_mechanism_authenticate_via_lever_o_auth is not None:
            pulumi.set(__self__, "source_lever_hiring_authentication_mechanism_authenticate_via_lever_o_auth", source_lever_hiring_authentication_mechanism_authenticate_via_lever_o_auth)
        if source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_api_key is not None:
            pulumi.set(__self__, "source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_api_key", source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_api_key)
        if source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_o_auth is not None:
            pulumi.set(__self__, "source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_o_auth", source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_o_auth)

    @property
    @pulumi.getter(name="sourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKey")
    def source_lever_hiring_authentication_mechanism_authenticate_via_lever_api_key(self) -> Optional['outputs.SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKey']:
        return pulumi.get(self, "source_lever_hiring_authentication_mechanism_authenticate_via_lever_api_key")

    @property
    @pulumi.getter(name="sourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth")
    def source_lever_hiring_authentication_mechanism_authenticate_via_lever_o_auth(self) -> Optional['outputs.SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth']:
        return pulumi.get(self, "source_lever_hiring_authentication_mechanism_authenticate_via_lever_o_auth")

    @property
    @pulumi.getter(name="sourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKey")
    def source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_api_key(self) -> Optional['outputs.SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKey']:
        return pulumi.get(self, "source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_api_key")

    @property
    @pulumi.getter(name="sourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth")
    def source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_o_auth(self) -> Optional['outputs.SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth']:
        return pulumi.get(self, "source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_o_auth")


@pulumi.output_type
class SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "api_key", api_key)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refreshToken":
            suggest = "refresh_token"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 refresh_token: str,
                 auth_type: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None):
        pulumi.set(__self__, "refresh_token", refresh_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "api_key", api_key)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refreshToken":
            suggest = "refresh_token"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 refresh_token: str,
                 auth_type: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None):
        pulumi.set(__self__, "refresh_token", refresh_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class SourceLinkedinAdsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "accountIds":
            suggest = "account_ids"
        elif key == "adAnalyticsReports":
            suggest = "ad_analytics_reports"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceLinkedinAdsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceLinkedinAdsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceLinkedinAdsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 start_date: str,
                 account_ids: Optional[Sequence[int]] = None,
                 ad_analytics_reports: Optional[Sequence['outputs.SourceLinkedinAdsConfigurationAdAnalyticsReport']] = None,
                 credentials: Optional['outputs.SourceLinkedinAdsConfigurationCredentials'] = None):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if account_ids is not None:
            pulumi.set(__self__, "account_ids", account_ids)
        if ad_analytics_reports is not None:
            pulumi.set(__self__, "ad_analytics_reports", ad_analytics_reports)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "account_ids")

    @property
    @pulumi.getter(name="adAnalyticsReports")
    def ad_analytics_reports(self) -> Optional[Sequence['outputs.SourceLinkedinAdsConfigurationAdAnalyticsReport']]:
        return pulumi.get(self, "ad_analytics_reports")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourceLinkedinAdsConfigurationCredentials']:
        return pulumi.get(self, "credentials")


@pulumi.output_type
class SourceLinkedinAdsConfigurationAdAnalyticsReport(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pivotBy":
            suggest = "pivot_by"
        elif key == "timeGranularity":
            suggest = "time_granularity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceLinkedinAdsConfigurationAdAnalyticsReport. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceLinkedinAdsConfigurationAdAnalyticsReport.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceLinkedinAdsConfigurationAdAnalyticsReport.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 pivot_by: str,
                 time_granularity: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "pivot_by", pivot_by)
        pulumi.set(__self__, "time_granularity", time_granularity)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pivotBy")
    def pivot_by(self) -> str:
        return pulumi.get(self, "pivot_by")

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> str:
        return pulumi.get(self, "time_granularity")


@pulumi.output_type
class SourceLinkedinAdsConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceLinkedinAdsAuthenticationAccessToken":
            suggest = "source_linkedin_ads_authentication_access_token"
        elif key == "sourceLinkedinAdsAuthenticationOAuth20":
            suggest = "source_linkedin_ads_authentication_o_auth20"
        elif key == "sourceLinkedinAdsUpdateAuthenticationAccessToken":
            suggest = "source_linkedin_ads_update_authentication_access_token"
        elif key == "sourceLinkedinAdsUpdateAuthenticationOAuth20":
            suggest = "source_linkedin_ads_update_authentication_o_auth20"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceLinkedinAdsConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceLinkedinAdsConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceLinkedinAdsConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_linkedin_ads_authentication_access_token: Optional['outputs.SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationAccessToken'] = None,
                 source_linkedin_ads_authentication_o_auth20: Optional['outputs.SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationOAuth20'] = None,
                 source_linkedin_ads_update_authentication_access_token: Optional['outputs.SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationAccessToken'] = None,
                 source_linkedin_ads_update_authentication_o_auth20: Optional['outputs.SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationOAuth20'] = None):
        if source_linkedin_ads_authentication_access_token is not None:
            pulumi.set(__self__, "source_linkedin_ads_authentication_access_token", source_linkedin_ads_authentication_access_token)
        if source_linkedin_ads_authentication_o_auth20 is not None:
            pulumi.set(__self__, "source_linkedin_ads_authentication_o_auth20", source_linkedin_ads_authentication_o_auth20)
        if source_linkedin_ads_update_authentication_access_token is not None:
            pulumi.set(__self__, "source_linkedin_ads_update_authentication_access_token", source_linkedin_ads_update_authentication_access_token)
        if source_linkedin_ads_update_authentication_o_auth20 is not None:
            pulumi.set(__self__, "source_linkedin_ads_update_authentication_o_auth20", source_linkedin_ads_update_authentication_o_auth20)

    @property
    @pulumi.getter(name="sourceLinkedinAdsAuthenticationAccessToken")
    def source_linkedin_ads_authentication_access_token(self) -> Optional['outputs.SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationAccessToken']:
        return pulumi.get(self, "source_linkedin_ads_authentication_access_token")

    @property
    @pulumi.getter(name="sourceLinkedinAdsAuthenticationOAuth20")
    def source_linkedin_ads_authentication_o_auth20(self) -> Optional['outputs.SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationOAuth20']:
        return pulumi.get(self, "source_linkedin_ads_authentication_o_auth20")

    @property
    @pulumi.getter(name="sourceLinkedinAdsUpdateAuthenticationAccessToken")
    def source_linkedin_ads_update_authentication_access_token(self) -> Optional['outputs.SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationAccessToken']:
        return pulumi.get(self, "source_linkedin_ads_update_authentication_access_token")

    @property
    @pulumi.getter(name="sourceLinkedinAdsUpdateAuthenticationOAuth20")
    def source_linkedin_ads_update_authentication_o_auth20(self) -> Optional['outputs.SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationOAuth20']:
        return pulumi.get(self, "source_linkedin_ads_update_authentication_o_auth20")


@pulumi.output_type
class SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationAccessToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "authMethod":
            suggest = "auth_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationAccessToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationAccessToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationAccessToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 auth_method: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[str]:
        return pulumi.get(self, "auth_method")


@pulumi.output_type
class SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "authMethod":
            suggest = "auth_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 auth_method: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[str]:
        return pulumi.get(self, "auth_method")


@pulumi.output_type
class SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationAccessToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "authMethod":
            suggest = "auth_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationAccessToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationAccessToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationAccessToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 auth_method: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[str]:
        return pulumi.get(self, "auth_method")


@pulumi.output_type
class SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "authMethod":
            suggest = "auth_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 auth_method: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[str]:
        return pulumi.get(self, "auth_method")


@pulumi.output_type
class SourceLinkedinPagesConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "orgId":
            suggest = "org_id"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceLinkedinPagesConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceLinkedinPagesConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceLinkedinPagesConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 org_id: str,
                 source_type: str,
                 credentials: Optional['outputs.SourceLinkedinPagesConfigurationCredentials'] = None):
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "source_type", source_type)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourceLinkedinPagesConfigurationCredentials']:
        return pulumi.get(self, "credentials")


@pulumi.output_type
class SourceLinkedinPagesConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceLinkedinPagesAuthenticationAccessToken":
            suggest = "source_linkedin_pages_authentication_access_token"
        elif key == "sourceLinkedinPagesAuthenticationOAuth20":
            suggest = "source_linkedin_pages_authentication_o_auth20"
        elif key == "sourceLinkedinPagesUpdateAuthenticationAccessToken":
            suggest = "source_linkedin_pages_update_authentication_access_token"
        elif key == "sourceLinkedinPagesUpdateAuthenticationOAuth20":
            suggest = "source_linkedin_pages_update_authentication_o_auth20"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceLinkedinPagesConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceLinkedinPagesConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceLinkedinPagesConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_linkedin_pages_authentication_access_token: Optional['outputs.SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationAccessToken'] = None,
                 source_linkedin_pages_authentication_o_auth20: Optional['outputs.SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationOAuth20'] = None,
                 source_linkedin_pages_update_authentication_access_token: Optional['outputs.SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationAccessToken'] = None,
                 source_linkedin_pages_update_authentication_o_auth20: Optional['outputs.SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationOAuth20'] = None):
        if source_linkedin_pages_authentication_access_token is not None:
            pulumi.set(__self__, "source_linkedin_pages_authentication_access_token", source_linkedin_pages_authentication_access_token)
        if source_linkedin_pages_authentication_o_auth20 is not None:
            pulumi.set(__self__, "source_linkedin_pages_authentication_o_auth20", source_linkedin_pages_authentication_o_auth20)
        if source_linkedin_pages_update_authentication_access_token is not None:
            pulumi.set(__self__, "source_linkedin_pages_update_authentication_access_token", source_linkedin_pages_update_authentication_access_token)
        if source_linkedin_pages_update_authentication_o_auth20 is not None:
            pulumi.set(__self__, "source_linkedin_pages_update_authentication_o_auth20", source_linkedin_pages_update_authentication_o_auth20)

    @property
    @pulumi.getter(name="sourceLinkedinPagesAuthenticationAccessToken")
    def source_linkedin_pages_authentication_access_token(self) -> Optional['outputs.SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationAccessToken']:
        return pulumi.get(self, "source_linkedin_pages_authentication_access_token")

    @property
    @pulumi.getter(name="sourceLinkedinPagesAuthenticationOAuth20")
    def source_linkedin_pages_authentication_o_auth20(self) -> Optional['outputs.SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationOAuth20']:
        return pulumi.get(self, "source_linkedin_pages_authentication_o_auth20")

    @property
    @pulumi.getter(name="sourceLinkedinPagesUpdateAuthenticationAccessToken")
    def source_linkedin_pages_update_authentication_access_token(self) -> Optional['outputs.SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationAccessToken']:
        return pulumi.get(self, "source_linkedin_pages_update_authentication_access_token")

    @property
    @pulumi.getter(name="sourceLinkedinPagesUpdateAuthenticationOAuth20")
    def source_linkedin_pages_update_authentication_o_auth20(self) -> Optional['outputs.SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationOAuth20']:
        return pulumi.get(self, "source_linkedin_pages_update_authentication_o_auth20")


@pulumi.output_type
class SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationAccessToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "authMethod":
            suggest = "auth_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationAccessToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationAccessToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationAccessToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 auth_method: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[str]:
        return pulumi.get(self, "auth_method")


@pulumi.output_type
class SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "authMethod":
            suggest = "auth_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 auth_method: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[str]:
        return pulumi.get(self, "auth_method")


@pulumi.output_type
class SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationAccessToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "authMethod":
            suggest = "auth_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationAccessToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationAccessToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationAccessToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 auth_method: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[str]:
        return pulumi.get(self, "auth_method")


@pulumi.output_type
class SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "authMethod":
            suggest = "auth_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 auth_method: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[str]:
        return pulumi.get(self, "auth_method")


@pulumi.output_type
class SourceLinnworksConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationId":
            suggest = "application_id"
        elif key == "applicationSecret":
            suggest = "application_secret"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceLinnworksConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceLinnworksConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceLinnworksConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_id: str,
                 application_secret: str,
                 source_type: str,
                 start_date: str,
                 token: str):
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "application_secret", application_secret)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> str:
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="applicationSecret")
    def application_secret(self) -> str:
        return pulumi.get(self, "application_secret")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def token(self) -> str:
        return pulumi.get(self, "token")


@pulumi.output_type
class SourceLokaliseConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceLokaliseConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceLokaliseConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceLokaliseConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 project_id: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceMailchimpConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "campaignId":
            suggest = "campaign_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMailchimpConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMailchimpConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMailchimpConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 campaign_id: Optional[str] = None,
                 credentials: Optional['outputs.SourceMailchimpConfigurationCredentials'] = None):
        pulumi.set(__self__, "source_type", source_type)
        if campaign_id is not None:
            pulumi.set(__self__, "campaign_id", campaign_id)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="campaignId")
    def campaign_id(self) -> Optional[str]:
        return pulumi.get(self, "campaign_id")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourceMailchimpConfigurationCredentials']:
        return pulumi.get(self, "credentials")


@pulumi.output_type
class SourceMailchimpConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceMailchimpAuthenticationApiKey":
            suggest = "source_mailchimp_authentication_api_key"
        elif key == "sourceMailchimpAuthenticationOAuth20":
            suggest = "source_mailchimp_authentication_o_auth20"
        elif key == "sourceMailchimpUpdateAuthenticationApiKey":
            suggest = "source_mailchimp_update_authentication_api_key"
        elif key == "sourceMailchimpUpdateAuthenticationOAuth20":
            suggest = "source_mailchimp_update_authentication_o_auth20"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMailchimpConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMailchimpConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMailchimpConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_mailchimp_authentication_api_key: Optional['outputs.SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationApiKey'] = None,
                 source_mailchimp_authentication_o_auth20: Optional['outputs.SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationOAuth20'] = None,
                 source_mailchimp_update_authentication_api_key: Optional['outputs.SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationApiKey'] = None,
                 source_mailchimp_update_authentication_o_auth20: Optional['outputs.SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationOAuth20'] = None):
        if source_mailchimp_authentication_api_key is not None:
            pulumi.set(__self__, "source_mailchimp_authentication_api_key", source_mailchimp_authentication_api_key)
        if source_mailchimp_authentication_o_auth20 is not None:
            pulumi.set(__self__, "source_mailchimp_authentication_o_auth20", source_mailchimp_authentication_o_auth20)
        if source_mailchimp_update_authentication_api_key is not None:
            pulumi.set(__self__, "source_mailchimp_update_authentication_api_key", source_mailchimp_update_authentication_api_key)
        if source_mailchimp_update_authentication_o_auth20 is not None:
            pulumi.set(__self__, "source_mailchimp_update_authentication_o_auth20", source_mailchimp_update_authentication_o_auth20)

    @property
    @pulumi.getter(name="sourceMailchimpAuthenticationApiKey")
    def source_mailchimp_authentication_api_key(self) -> Optional['outputs.SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationApiKey']:
        return pulumi.get(self, "source_mailchimp_authentication_api_key")

    @property
    @pulumi.getter(name="sourceMailchimpAuthenticationOAuth20")
    def source_mailchimp_authentication_o_auth20(self) -> Optional['outputs.SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationOAuth20']:
        return pulumi.get(self, "source_mailchimp_authentication_o_auth20")

    @property
    @pulumi.getter(name="sourceMailchimpUpdateAuthenticationApiKey")
    def source_mailchimp_update_authentication_api_key(self) -> Optional['outputs.SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationApiKey']:
        return pulumi.get(self, "source_mailchimp_update_authentication_api_key")

    @property
    @pulumi.getter(name="sourceMailchimpUpdateAuthenticationOAuth20")
    def source_mailchimp_update_authentication_o_auth20(self) -> Optional['outputs.SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationOAuth20']:
        return pulumi.get(self, "source_mailchimp_update_authentication_o_auth20")


@pulumi.output_type
class SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationApiKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationApiKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationApiKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationApiKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apikey: str,
                 auth_type: str):
        pulumi.set(__self__, "apikey", apikey)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter
    def apikey(self) -> str:
        return pulumi.get(self, "apikey")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationApiKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationApiKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationApiKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationApiKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apikey: str,
                 auth_type: str):
        pulumi.set(__self__, "apikey", apikey)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter
    def apikey(self) -> str:
        return pulumi.get(self, "apikey")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class SourceMailgunConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateKey":
            suggest = "private_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "domainRegion":
            suggest = "domain_region"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMailgunConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMailgunConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMailgunConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 private_key: str,
                 source_type: str,
                 domain_region: Optional[str] = None,
                 start_date: Optional[str] = None):
        pulumi.set(__self__, "private_key", private_key)
        pulumi.set(__self__, "source_type", source_type)
        if domain_region is not None:
            pulumi.set(__self__, "domain_region", domain_region)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> str:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="domainRegion")
    def domain_region(self) -> Optional[str]:
        return pulumi.get(self, "domain_region")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceMailjetSmsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "endDate":
            suggest = "end_date"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMailjetSmsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMailjetSmsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMailjetSmsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 token: str,
                 end_date: Optional[int] = None,
                 start_date: Optional[int] = None):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "token", token)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def token(self) -> str:
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[int]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[int]:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceMarketoConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "domainUrl":
            suggest = "domain_url"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMarketoConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMarketoConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMarketoConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 domain_url: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "domain_url", domain_url)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="domainUrl")
    def domain_url(self) -> str:
        return pulumi.get(self, "domain_url")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceMetabaseConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceApiUrl":
            suggest = "instance_api_url"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "sessionToken":
            suggest = "session_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMetabaseConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMetabaseConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMetabaseConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_api_url: str,
                 source_type: str,
                 password: Optional[str] = None,
                 session_token: Optional[str] = None,
                 username: Optional[str] = None):
        pulumi.set(__self__, "instance_api_url", instance_api_url)
        pulumi.set(__self__, "source_type", source_type)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if session_token is not None:
            pulumi.set(__self__, "session_token", session_token)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="instanceApiUrl")
    def instance_api_url(self) -> str:
        return pulumi.get(self, "instance_api_url")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="sessionToken")
    def session_token(self) -> Optional[str]:
        return pulumi.get(self, "session_token")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class SourceMicrosoftTeamsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMicrosoftTeamsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMicrosoftTeamsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMicrosoftTeamsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 period: str,
                 source_type: str,
                 credentials: Optional['outputs.SourceMicrosoftTeamsConfigurationCredentials'] = None):
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "source_type", source_type)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter
    def period(self) -> str:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourceMicrosoftTeamsConfigurationCredentials']:
        return pulumi.get(self, "credentials")


@pulumi.output_type
class SourceMicrosoftTeamsConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft":
            suggest = "source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft"
        elif key == "sourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20":
            suggest = "source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft_o_auth20"
        elif key == "sourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoft":
            suggest = "source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft"
        elif key == "sourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20":
            suggest = "source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft_o_auth20"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMicrosoftTeamsConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMicrosoftTeamsConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMicrosoftTeamsConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft: Optional['outputs.SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft'] = None,
                 source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft_o_auth20: Optional['outputs.SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20'] = None,
                 source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft: Optional['outputs.SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoft'] = None,
                 source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft_o_auth20: Optional['outputs.SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20'] = None):
        if source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft is not None:
            pulumi.set(__self__, "source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft", source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft)
        if source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft_o_auth20 is not None:
            pulumi.set(__self__, "source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft_o_auth20", source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft_o_auth20)
        if source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft is not None:
            pulumi.set(__self__, "source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft", source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft)
        if source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft_o_auth20 is not None:
            pulumi.set(__self__, "source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft_o_auth20", source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft_o_auth20)

    @property
    @pulumi.getter(name="sourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft")
    def source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft(self) -> Optional['outputs.SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft']:
        return pulumi.get(self, "source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft")

    @property
    @pulumi.getter(name="sourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20")
    def source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft_o_auth20(self) -> Optional['outputs.SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20']:
        return pulumi.get(self, "source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft_o_auth20")

    @property
    @pulumi.getter(name="sourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoft")
    def source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft(self) -> Optional['outputs.SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoft']:
        return pulumi.get(self, "source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft")

    @property
    @pulumi.getter(name="sourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20")
    def source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft_o_auth20(self) -> Optional['outputs.SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20']:
        return pulumi.get(self, "source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft_o_auth20")


@pulumi.output_type
class SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 tenant_id: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 tenant_id: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoft(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoft. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoft.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoft.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 tenant_id: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 tenant_id: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceMixpanelConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attributionWindow":
            suggest = "attribution_window"
        elif key == "dateWindowSize":
            suggest = "date_window_size"
        elif key == "endDate":
            suggest = "end_date"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "projectTimezone":
            suggest = "project_timezone"
        elif key == "selectPropertiesByDefault":
            suggest = "select_properties_by_default"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMixpanelConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMixpanelConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMixpanelConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attribution_window: Optional[int] = None,
                 credentials: Optional['outputs.SourceMixpanelConfigurationCredentials'] = None,
                 date_window_size: Optional[int] = None,
                 end_date: Optional[str] = None,
                 project_id: Optional[int] = None,
                 project_timezone: Optional[str] = None,
                 region: Optional[str] = None,
                 select_properties_by_default: Optional[bool] = None,
                 source_type: Optional[str] = None,
                 start_date: Optional[str] = None):
        if attribution_window is not None:
            pulumi.set(__self__, "attribution_window", attribution_window)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if date_window_size is not None:
            pulumi.set(__self__, "date_window_size", date_window_size)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if project_timezone is not None:
            pulumi.set(__self__, "project_timezone", project_timezone)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if select_properties_by_default is not None:
            pulumi.set(__self__, "select_properties_by_default", select_properties_by_default)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="attributionWindow")
    def attribution_window(self) -> Optional[int]:
        return pulumi.get(self, "attribution_window")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourceMixpanelConfigurationCredentials']:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="dateWindowSize")
    def date_window_size(self) -> Optional[int]:
        return pulumi.get(self, "date_window_size")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[int]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="projectTimezone")
    def project_timezone(self) -> Optional[str]:
        return pulumi.get(self, "project_timezone")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="selectPropertiesByDefault")
    def select_properties_by_default(self) -> Optional[bool]:
        return pulumi.get(self, "select_properties_by_default")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceMixpanelConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceMixpanelAuthenticationWildcardProjectSecret":
            suggest = "source_mixpanel_authentication_wildcard_project_secret"
        elif key == "sourceMixpanelAuthenticationWildcardServiceAccount":
            suggest = "source_mixpanel_authentication_wildcard_service_account"
        elif key == "sourceMixpanelUpdateAuthenticationWildcardProjectSecret":
            suggest = "source_mixpanel_update_authentication_wildcard_project_secret"
        elif key == "sourceMixpanelUpdateAuthenticationWildcardServiceAccount":
            suggest = "source_mixpanel_update_authentication_wildcard_service_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMixpanelConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMixpanelConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMixpanelConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_mixpanel_authentication_wildcard_project_secret: Optional['outputs.SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecret'] = None,
                 source_mixpanel_authentication_wildcard_service_account: Optional['outputs.SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccount'] = None,
                 source_mixpanel_update_authentication_wildcard_project_secret: Optional['outputs.SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecret'] = None,
                 source_mixpanel_update_authentication_wildcard_service_account: Optional['outputs.SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccount'] = None):
        if source_mixpanel_authentication_wildcard_project_secret is not None:
            pulumi.set(__self__, "source_mixpanel_authentication_wildcard_project_secret", source_mixpanel_authentication_wildcard_project_secret)
        if source_mixpanel_authentication_wildcard_service_account is not None:
            pulumi.set(__self__, "source_mixpanel_authentication_wildcard_service_account", source_mixpanel_authentication_wildcard_service_account)
        if source_mixpanel_update_authentication_wildcard_project_secret is not None:
            pulumi.set(__self__, "source_mixpanel_update_authentication_wildcard_project_secret", source_mixpanel_update_authentication_wildcard_project_secret)
        if source_mixpanel_update_authentication_wildcard_service_account is not None:
            pulumi.set(__self__, "source_mixpanel_update_authentication_wildcard_service_account", source_mixpanel_update_authentication_wildcard_service_account)

    @property
    @pulumi.getter(name="sourceMixpanelAuthenticationWildcardProjectSecret")
    def source_mixpanel_authentication_wildcard_project_secret(self) -> Optional['outputs.SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecret']:
        return pulumi.get(self, "source_mixpanel_authentication_wildcard_project_secret")

    @property
    @pulumi.getter(name="sourceMixpanelAuthenticationWildcardServiceAccount")
    def source_mixpanel_authentication_wildcard_service_account(self) -> Optional['outputs.SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccount']:
        return pulumi.get(self, "source_mixpanel_authentication_wildcard_service_account")

    @property
    @pulumi.getter(name="sourceMixpanelUpdateAuthenticationWildcardProjectSecret")
    def source_mixpanel_update_authentication_wildcard_project_secret(self) -> Optional['outputs.SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecret']:
        return pulumi.get(self, "source_mixpanel_update_authentication_wildcard_project_secret")

    @property
    @pulumi.getter(name="sourceMixpanelUpdateAuthenticationWildcardServiceAccount")
    def source_mixpanel_update_authentication_wildcard_service_account(self) -> Optional['outputs.SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccount']:
        return pulumi.get(self, "source_mixpanel_update_authentication_wildcard_service_account")


@pulumi.output_type
class SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecret(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiSecret":
            suggest = "api_secret"
        elif key == "optionTitle":
            suggest = "option_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecret. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecret.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecret.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_secret: str,
                 option_title: Optional[str] = None):
        pulumi.set(__self__, "api_secret", api_secret)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="apiSecret")
    def api_secret(self) -> str:
        return pulumi.get(self, "api_secret")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[str]:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "optionTitle":
            suggest = "option_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secret: str,
                 username: str,
                 option_title: Optional[str] = None):
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "username", username)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter
    def secret(self) -> str:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[str]:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecret(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiSecret":
            suggest = "api_secret"
        elif key == "optionTitle":
            suggest = "option_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecret. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecret.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecret.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_secret: str,
                 option_title: Optional[str] = None):
        pulumi.set(__self__, "api_secret", api_secret)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="apiSecret")
    def api_secret(self) -> str:
        return pulumi.get(self, "api_secret")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[str]:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "optionTitle":
            suggest = "option_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secret: str,
                 username: str,
                 option_title: Optional[str] = None):
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "username", username)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter
    def secret(self) -> str:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[str]:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class SourceMondayConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMondayConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMondayConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMondayConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 credentials: Optional['outputs.SourceMondayConfigurationCredentials'] = None):
        pulumi.set(__self__, "source_type", source_type)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourceMondayConfigurationCredentials']:
        return pulumi.get(self, "credentials")


@pulumi.output_type
class SourceMondayConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceMondayAuthorizationMethodApiToken":
            suggest = "source_monday_authorization_method_api_token"
        elif key == "sourceMondayAuthorizationMethodOAuth20":
            suggest = "source_monday_authorization_method_o_auth20"
        elif key == "sourceMondayUpdateAuthorizationMethodApiToken":
            suggest = "source_monday_update_authorization_method_api_token"
        elif key == "sourceMondayUpdateAuthorizationMethodOAuth20":
            suggest = "source_monday_update_authorization_method_o_auth20"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMondayConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMondayConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMondayConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_monday_authorization_method_api_token: Optional['outputs.SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodApiToken'] = None,
                 source_monday_authorization_method_o_auth20: Optional['outputs.SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodOAuth20'] = None,
                 source_monday_update_authorization_method_api_token: Optional['outputs.SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodApiToken'] = None,
                 source_monday_update_authorization_method_o_auth20: Optional['outputs.SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodOAuth20'] = None):
        if source_monday_authorization_method_api_token is not None:
            pulumi.set(__self__, "source_monday_authorization_method_api_token", source_monday_authorization_method_api_token)
        if source_monday_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_monday_authorization_method_o_auth20", source_monday_authorization_method_o_auth20)
        if source_monday_update_authorization_method_api_token is not None:
            pulumi.set(__self__, "source_monday_update_authorization_method_api_token", source_monday_update_authorization_method_api_token)
        if source_monday_update_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_monday_update_authorization_method_o_auth20", source_monday_update_authorization_method_o_auth20)

    @property
    @pulumi.getter(name="sourceMondayAuthorizationMethodApiToken")
    def source_monday_authorization_method_api_token(self) -> Optional['outputs.SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodApiToken']:
        return pulumi.get(self, "source_monday_authorization_method_api_token")

    @property
    @pulumi.getter(name="sourceMondayAuthorizationMethodOAuth20")
    def source_monday_authorization_method_o_auth20(self) -> Optional['outputs.SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodOAuth20']:
        return pulumi.get(self, "source_monday_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourceMondayUpdateAuthorizationMethodApiToken")
    def source_monday_update_authorization_method_api_token(self) -> Optional['outputs.SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodApiToken']:
        return pulumi.get(self, "source_monday_update_authorization_method_api_token")

    @property
    @pulumi.getter(name="sourceMondayUpdateAuthorizationMethodOAuth20")
    def source_monday_update_authorization_method_o_auth20(self) -> Optional['outputs.SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodOAuth20']:
        return pulumi.get(self, "source_monday_update_authorization_method_o_auth20")


@pulumi.output_type
class SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodApiToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiToken":
            suggest = "api_token"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodApiToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodApiToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodApiToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token: str,
                 auth_type: str):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 subdomain: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[str]:
        return pulumi.get(self, "subdomain")


@pulumi.output_type
class SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodApiToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiToken":
            suggest = "api_token"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodApiToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodApiToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodApiToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token: str,
                 auth_type: str):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 subdomain: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[str]:
        return pulumi.get(self, "subdomain")


@pulumi.output_type
class SourceMongodbConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "authSource":
            suggest = "auth_source"
        elif key == "instanceType":
            suggest = "instance_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMongodbConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMongodbConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMongodbConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: str,
                 source_type: str,
                 auth_source: Optional[str] = None,
                 instance_type: Optional['outputs.SourceMongodbConfigurationInstanceType'] = None,
                 password: Optional[str] = None,
                 user: Optional[str] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "source_type", source_type)
        if auth_source is not None:
            pulumi.set(__self__, "auth_source", auth_source)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="authSource")
    def auth_source(self) -> Optional[str]:
        return pulumi.get(self, "auth_source")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional['outputs.SourceMongodbConfigurationInstanceType']:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")


@pulumi.output_type
class SourceMongodbConfigurationInstanceType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceMongodbMongoDbInstanceTypeMongoDbAtlas":
            suggest = "source_mongodb_mongo_db_instance_type_mongo_db_atlas"
        elif key == "sourceMongodbMongoDbInstanceTypeReplicaSet":
            suggest = "source_mongodb_mongo_db_instance_type_replica_set"
        elif key == "sourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance":
            suggest = "source_mongodb_mongo_db_instance_type_standalone_mongo_db_instance"
        elif key == "sourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlas":
            suggest = "source_mongodb_update_mongo_db_instance_type_mongo_db_atlas"
        elif key == "sourceMongodbUpdateMongoDbInstanceTypeReplicaSet":
            suggest = "source_mongodb_update_mongo_db_instance_type_replica_set"
        elif key == "sourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance":
            suggest = "source_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMongodbConfigurationInstanceType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMongodbConfigurationInstanceType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMongodbConfigurationInstanceType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_mongodb_mongo_db_instance_type_mongo_db_atlas: Optional['outputs.SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeMongoDbAtlas'] = None,
                 source_mongodb_mongo_db_instance_type_replica_set: Optional['outputs.SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeReplicaSet'] = None,
                 source_mongodb_mongo_db_instance_type_standalone_mongo_db_instance: Optional['outputs.SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance'] = None,
                 source_mongodb_update_mongo_db_instance_type_mongo_db_atlas: Optional['outputs.SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlas'] = None,
                 source_mongodb_update_mongo_db_instance_type_replica_set: Optional['outputs.SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSet'] = None,
                 source_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance: Optional['outputs.SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance'] = None):
        if source_mongodb_mongo_db_instance_type_mongo_db_atlas is not None:
            pulumi.set(__self__, "source_mongodb_mongo_db_instance_type_mongo_db_atlas", source_mongodb_mongo_db_instance_type_mongo_db_atlas)
        if source_mongodb_mongo_db_instance_type_replica_set is not None:
            pulumi.set(__self__, "source_mongodb_mongo_db_instance_type_replica_set", source_mongodb_mongo_db_instance_type_replica_set)
        if source_mongodb_mongo_db_instance_type_standalone_mongo_db_instance is not None:
            pulumi.set(__self__, "source_mongodb_mongo_db_instance_type_standalone_mongo_db_instance", source_mongodb_mongo_db_instance_type_standalone_mongo_db_instance)
        if source_mongodb_update_mongo_db_instance_type_mongo_db_atlas is not None:
            pulumi.set(__self__, "source_mongodb_update_mongo_db_instance_type_mongo_db_atlas", source_mongodb_update_mongo_db_instance_type_mongo_db_atlas)
        if source_mongodb_update_mongo_db_instance_type_replica_set is not None:
            pulumi.set(__self__, "source_mongodb_update_mongo_db_instance_type_replica_set", source_mongodb_update_mongo_db_instance_type_replica_set)
        if source_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance is not None:
            pulumi.set(__self__, "source_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance", source_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance)

    @property
    @pulumi.getter(name="sourceMongodbMongoDbInstanceTypeMongoDbAtlas")
    def source_mongodb_mongo_db_instance_type_mongo_db_atlas(self) -> Optional['outputs.SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeMongoDbAtlas']:
        return pulumi.get(self, "source_mongodb_mongo_db_instance_type_mongo_db_atlas")

    @property
    @pulumi.getter(name="sourceMongodbMongoDbInstanceTypeReplicaSet")
    def source_mongodb_mongo_db_instance_type_replica_set(self) -> Optional['outputs.SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeReplicaSet']:
        return pulumi.get(self, "source_mongodb_mongo_db_instance_type_replica_set")

    @property
    @pulumi.getter(name="sourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance")
    def source_mongodb_mongo_db_instance_type_standalone_mongo_db_instance(self) -> Optional['outputs.SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance']:
        return pulumi.get(self, "source_mongodb_mongo_db_instance_type_standalone_mongo_db_instance")

    @property
    @pulumi.getter(name="sourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlas")
    def source_mongodb_update_mongo_db_instance_type_mongo_db_atlas(self) -> Optional['outputs.SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlas']:
        return pulumi.get(self, "source_mongodb_update_mongo_db_instance_type_mongo_db_atlas")

    @property
    @pulumi.getter(name="sourceMongodbUpdateMongoDbInstanceTypeReplicaSet")
    def source_mongodb_update_mongo_db_instance_type_replica_set(self) -> Optional['outputs.SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSet']:
        return pulumi.get(self, "source_mongodb_update_mongo_db_instance_type_replica_set")

    @property
    @pulumi.getter(name="sourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance")
    def source_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance(self) -> Optional['outputs.SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance']:
        return pulumi.get(self, "source_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance")


@pulumi.output_type
class SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeMongoDbAtlas(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterUrl":
            suggest = "cluster_url"
        elif key == "additionalProperties":
            suggest = "additional_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeMongoDbAtlas. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeMongoDbAtlas.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeMongoDbAtlas.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_url: str,
                 instance: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "cluster_url", cluster_url)
        pulumi.set(__self__, "instance", instance)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> str:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter
    def instance(self) -> str:
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeReplicaSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverAddresses":
            suggest = "server_addresses"
        elif key == "replicaSet":
            suggest = "replica_set"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeReplicaSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeReplicaSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeReplicaSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance: str,
                 server_addresses: str,
                 replica_set: Optional[str] = None):
        pulumi.set(__self__, "instance", instance)
        pulumi.set(__self__, "server_addresses", server_addresses)
        if replica_set is not None:
            pulumi.set(__self__, "replica_set", replica_set)

    @property
    @pulumi.getter
    def instance(self) -> str:
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter(name="serverAddresses")
    def server_addresses(self) -> str:
        return pulumi.get(self, "server_addresses")

    @property
    @pulumi.getter(name="replicaSet")
    def replica_set(self) -> Optional[str]:
        return pulumi.get(self, "replica_set")


@pulumi.output_type
class SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance(dict):
    def __init__(__self__, *,
                 host: str,
                 instance: str,
                 port: int):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "instance", instance)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def instance(self) -> str:
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")


@pulumi.output_type
class SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlas(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterUrl":
            suggest = "cluster_url"
        elif key == "additionalProperties":
            suggest = "additional_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlas. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlas.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlas.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_url: str,
                 instance: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "cluster_url", cluster_url)
        pulumi.set(__self__, "instance", instance)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> str:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter
    def instance(self) -> str:
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverAddresses":
            suggest = "server_addresses"
        elif key == "replicaSet":
            suggest = "replica_set"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance: str,
                 server_addresses: str,
                 replica_set: Optional[str] = None):
        pulumi.set(__self__, "instance", instance)
        pulumi.set(__self__, "server_addresses", server_addresses)
        if replica_set is not None:
            pulumi.set(__self__, "replica_set", replica_set)

    @property
    @pulumi.getter
    def instance(self) -> str:
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter(name="serverAddresses")
    def server_addresses(self) -> str:
        return pulumi.get(self, "server_addresses")

    @property
    @pulumi.getter(name="replicaSet")
    def replica_set(self) -> Optional[str]:
        return pulumi.get(self, "replica_set")


@pulumi.output_type
class SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance(dict):
    def __init__(__self__, *,
                 host: str,
                 instance: str,
                 port: int):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "instance", instance)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def instance(self) -> str:
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")


@pulumi.output_type
class SourceMongodbInternalPocConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "authSource":
            suggest = "auth_source"
        elif key == "connectionString":
            suggest = "connection_string"
        elif key == "replicaSet":
            suggest = "replica_set"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMongodbInternalPocConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMongodbInternalPocConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMongodbInternalPocConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 auth_source: Optional[str] = None,
                 connection_string: Optional[str] = None,
                 password: Optional[str] = None,
                 replica_set: Optional[str] = None,
                 user: Optional[str] = None):
        pulumi.set(__self__, "source_type", source_type)
        if auth_source is not None:
            pulumi.set(__self__, "auth_source", auth_source)
        if connection_string is not None:
            pulumi.set(__self__, "connection_string", connection_string)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if replica_set is not None:
            pulumi.set(__self__, "replica_set", replica_set)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="authSource")
    def auth_source(self) -> Optional[str]:
        return pulumi.get(self, "auth_source")

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> Optional[str]:
        return pulumi.get(self, "connection_string")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="replicaSet")
    def replica_set(self) -> Optional[str]:
        return pulumi.get(self, "replica_set")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")


@pulumi.output_type
class SourceMssqlConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "jdbcUrlParams":
            suggest = "jdbc_url_params"
        elif key == "replicationMethod":
            suggest = "replication_method"
        elif key == "sslMethod":
            suggest = "ssl_method"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMssqlConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMssqlConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMssqlConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: str,
                 host: str,
                 port: int,
                 source_type: str,
                 username: str,
                 jdbc_url_params: Optional[str] = None,
                 password: Optional[str] = None,
                 replication_method: Optional['outputs.SourceMssqlConfigurationReplicationMethod'] = None,
                 schemas: Optional[Sequence[str]] = None,
                 ssl_method: Optional['outputs.SourceMssqlConfigurationSslMethod'] = None,
                 tunnel_method: Optional['outputs.SourceMssqlConfigurationTunnelMethod'] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "username", username)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if replication_method is not None:
            pulumi.set(__self__, "replication_method", replication_method)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if ssl_method is not None:
            pulumi.set(__self__, "ssl_method", ssl_method)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[str]:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="replicationMethod")
    def replication_method(self) -> Optional['outputs.SourceMssqlConfigurationReplicationMethod']:
        return pulumi.get(self, "replication_method")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> Optional['outputs.SourceMssqlConfigurationSslMethod']:
        return pulumi.get(self, "ssl_method")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional['outputs.SourceMssqlConfigurationTunnelMethod']:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class SourceMssqlConfigurationReplicationMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceMssqlReplicationMethodLogicalReplicationCdc":
            suggest = "source_mssql_replication_method_logical_replication_cdc"
        elif key == "sourceMssqlReplicationMethodStandard":
            suggest = "source_mssql_replication_method_standard"
        elif key == "sourceMssqlUpdateReplicationMethodLogicalReplicationCdc":
            suggest = "source_mssql_update_replication_method_logical_replication_cdc"
        elif key == "sourceMssqlUpdateReplicationMethodStandard":
            suggest = "source_mssql_update_replication_method_standard"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMssqlConfigurationReplicationMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMssqlConfigurationReplicationMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMssqlConfigurationReplicationMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_mssql_replication_method_logical_replication_cdc: Optional['outputs.SourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodLogicalReplicationCdc'] = None,
                 source_mssql_replication_method_standard: Optional['outputs.SourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodStandard'] = None,
                 source_mssql_update_replication_method_logical_replication_cdc: Optional['outputs.SourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodLogicalReplicationCdc'] = None,
                 source_mssql_update_replication_method_standard: Optional['outputs.SourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodStandard'] = None):
        if source_mssql_replication_method_logical_replication_cdc is not None:
            pulumi.set(__self__, "source_mssql_replication_method_logical_replication_cdc", source_mssql_replication_method_logical_replication_cdc)
        if source_mssql_replication_method_standard is not None:
            pulumi.set(__self__, "source_mssql_replication_method_standard", source_mssql_replication_method_standard)
        if source_mssql_update_replication_method_logical_replication_cdc is not None:
            pulumi.set(__self__, "source_mssql_update_replication_method_logical_replication_cdc", source_mssql_update_replication_method_logical_replication_cdc)
        if source_mssql_update_replication_method_standard is not None:
            pulumi.set(__self__, "source_mssql_update_replication_method_standard", source_mssql_update_replication_method_standard)

    @property
    @pulumi.getter(name="sourceMssqlReplicationMethodLogicalReplicationCdc")
    def source_mssql_replication_method_logical_replication_cdc(self) -> Optional['outputs.SourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodLogicalReplicationCdc']:
        return pulumi.get(self, "source_mssql_replication_method_logical_replication_cdc")

    @property
    @pulumi.getter(name="sourceMssqlReplicationMethodStandard")
    def source_mssql_replication_method_standard(self) -> Optional['outputs.SourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodStandard']:
        return pulumi.get(self, "source_mssql_replication_method_standard")

    @property
    @pulumi.getter(name="sourceMssqlUpdateReplicationMethodLogicalReplicationCdc")
    def source_mssql_update_replication_method_logical_replication_cdc(self) -> Optional['outputs.SourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodLogicalReplicationCdc']:
        return pulumi.get(self, "source_mssql_update_replication_method_logical_replication_cdc")

    @property
    @pulumi.getter(name="sourceMssqlUpdateReplicationMethodStandard")
    def source_mssql_update_replication_method_standard(self) -> Optional['outputs.SourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodStandard']:
        return pulumi.get(self, "source_mssql_update_replication_method_standard")


@pulumi.output_type
class SourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodLogicalReplicationCdc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataToSync":
            suggest = "data_to_sync"
        elif key == "initialWaitingSeconds":
            suggest = "initial_waiting_seconds"
        elif key == "snapshotIsolation":
            suggest = "snapshot_isolation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodLogicalReplicationCdc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodLogicalReplicationCdc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodLogicalReplicationCdc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 method: str,
                 data_to_sync: Optional[str] = None,
                 initial_waiting_seconds: Optional[int] = None,
                 snapshot_isolation: Optional[str] = None):
        pulumi.set(__self__, "method", method)
        if data_to_sync is not None:
            pulumi.set(__self__, "data_to_sync", data_to_sync)
        if initial_waiting_seconds is not None:
            pulumi.set(__self__, "initial_waiting_seconds", initial_waiting_seconds)
        if snapshot_isolation is not None:
            pulumi.set(__self__, "snapshot_isolation", snapshot_isolation)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="dataToSync")
    def data_to_sync(self) -> Optional[str]:
        return pulumi.get(self, "data_to_sync")

    @property
    @pulumi.getter(name="initialWaitingSeconds")
    def initial_waiting_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_waiting_seconds")

    @property
    @pulumi.getter(name="snapshotIsolation")
    def snapshot_isolation(self) -> Optional[str]:
        return pulumi.get(self, "snapshot_isolation")


@pulumi.output_type
class SourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodStandard(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class SourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodLogicalReplicationCdc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataToSync":
            suggest = "data_to_sync"
        elif key == "initialWaitingSeconds":
            suggest = "initial_waiting_seconds"
        elif key == "snapshotIsolation":
            suggest = "snapshot_isolation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodLogicalReplicationCdc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodLogicalReplicationCdc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodLogicalReplicationCdc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 method: str,
                 data_to_sync: Optional[str] = None,
                 initial_waiting_seconds: Optional[int] = None,
                 snapshot_isolation: Optional[str] = None):
        pulumi.set(__self__, "method", method)
        if data_to_sync is not None:
            pulumi.set(__self__, "data_to_sync", data_to_sync)
        if initial_waiting_seconds is not None:
            pulumi.set(__self__, "initial_waiting_seconds", initial_waiting_seconds)
        if snapshot_isolation is not None:
            pulumi.set(__self__, "snapshot_isolation", snapshot_isolation)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="dataToSync")
    def data_to_sync(self) -> Optional[str]:
        return pulumi.get(self, "data_to_sync")

    @property
    @pulumi.getter(name="initialWaitingSeconds")
    def initial_waiting_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_waiting_seconds")

    @property
    @pulumi.getter(name="snapshotIsolation")
    def snapshot_isolation(self) -> Optional[str]:
        return pulumi.get(self, "snapshot_isolation")


@pulumi.output_type
class SourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodStandard(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class SourceMssqlConfigurationSslMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceMssqlSslMethodEncryptedTrustServerCertificate":
            suggest = "source_mssql_ssl_method_encrypted_trust_server_certificate"
        elif key == "sourceMssqlSslMethodEncryptedVerifyCertificate":
            suggest = "source_mssql_ssl_method_encrypted_verify_certificate"
        elif key == "sourceMssqlUpdateSslMethodEncryptedTrustServerCertificate":
            suggest = "source_mssql_update_ssl_method_encrypted_trust_server_certificate"
        elif key == "sourceMssqlUpdateSslMethodEncryptedVerifyCertificate":
            suggest = "source_mssql_update_ssl_method_encrypted_verify_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMssqlConfigurationSslMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMssqlConfigurationSslMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMssqlConfigurationSslMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_mssql_ssl_method_encrypted_trust_server_certificate: Optional['outputs.SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedTrustServerCertificate'] = None,
                 source_mssql_ssl_method_encrypted_verify_certificate: Optional['outputs.SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedVerifyCertificate'] = None,
                 source_mssql_update_ssl_method_encrypted_trust_server_certificate: Optional['outputs.SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedTrustServerCertificate'] = None,
                 source_mssql_update_ssl_method_encrypted_verify_certificate: Optional['outputs.SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedVerifyCertificate'] = None):
        if source_mssql_ssl_method_encrypted_trust_server_certificate is not None:
            pulumi.set(__self__, "source_mssql_ssl_method_encrypted_trust_server_certificate", source_mssql_ssl_method_encrypted_trust_server_certificate)
        if source_mssql_ssl_method_encrypted_verify_certificate is not None:
            pulumi.set(__self__, "source_mssql_ssl_method_encrypted_verify_certificate", source_mssql_ssl_method_encrypted_verify_certificate)
        if source_mssql_update_ssl_method_encrypted_trust_server_certificate is not None:
            pulumi.set(__self__, "source_mssql_update_ssl_method_encrypted_trust_server_certificate", source_mssql_update_ssl_method_encrypted_trust_server_certificate)
        if source_mssql_update_ssl_method_encrypted_verify_certificate is not None:
            pulumi.set(__self__, "source_mssql_update_ssl_method_encrypted_verify_certificate", source_mssql_update_ssl_method_encrypted_verify_certificate)

    @property
    @pulumi.getter(name="sourceMssqlSslMethodEncryptedTrustServerCertificate")
    def source_mssql_ssl_method_encrypted_trust_server_certificate(self) -> Optional['outputs.SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedTrustServerCertificate']:
        return pulumi.get(self, "source_mssql_ssl_method_encrypted_trust_server_certificate")

    @property
    @pulumi.getter(name="sourceMssqlSslMethodEncryptedVerifyCertificate")
    def source_mssql_ssl_method_encrypted_verify_certificate(self) -> Optional['outputs.SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedVerifyCertificate']:
        return pulumi.get(self, "source_mssql_ssl_method_encrypted_verify_certificate")

    @property
    @pulumi.getter(name="sourceMssqlUpdateSslMethodEncryptedTrustServerCertificate")
    def source_mssql_update_ssl_method_encrypted_trust_server_certificate(self) -> Optional['outputs.SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedTrustServerCertificate']:
        return pulumi.get(self, "source_mssql_update_ssl_method_encrypted_trust_server_certificate")

    @property
    @pulumi.getter(name="sourceMssqlUpdateSslMethodEncryptedVerifyCertificate")
    def source_mssql_update_ssl_method_encrypted_verify_certificate(self) -> Optional['outputs.SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedVerifyCertificate']:
        return pulumi.get(self, "source_mssql_update_ssl_method_encrypted_verify_certificate")


@pulumi.output_type
class SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedTrustServerCertificate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sslMethod":
            suggest = "ssl_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedTrustServerCertificate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedTrustServerCertificate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedTrustServerCertificate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssl_method: str):
        pulumi.set(__self__, "ssl_method", ssl_method)

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> str:
        return pulumi.get(self, "ssl_method")


@pulumi.output_type
class SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedVerifyCertificate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sslMethod":
            suggest = "ssl_method"
        elif key == "hostNameInCertificate":
            suggest = "host_name_in_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedVerifyCertificate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedVerifyCertificate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedVerifyCertificate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssl_method: str,
                 host_name_in_certificate: Optional[str] = None):
        pulumi.set(__self__, "ssl_method", ssl_method)
        if host_name_in_certificate is not None:
            pulumi.set(__self__, "host_name_in_certificate", host_name_in_certificate)

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> str:
        return pulumi.get(self, "ssl_method")

    @property
    @pulumi.getter(name="hostNameInCertificate")
    def host_name_in_certificate(self) -> Optional[str]:
        return pulumi.get(self, "host_name_in_certificate")


@pulumi.output_type
class SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedTrustServerCertificate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sslMethod":
            suggest = "ssl_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedTrustServerCertificate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedTrustServerCertificate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedTrustServerCertificate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssl_method: str):
        pulumi.set(__self__, "ssl_method", ssl_method)

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> str:
        return pulumi.get(self, "ssl_method")


@pulumi.output_type
class SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedVerifyCertificate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sslMethod":
            suggest = "ssl_method"
        elif key == "hostNameInCertificate":
            suggest = "host_name_in_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedVerifyCertificate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedVerifyCertificate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedVerifyCertificate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssl_method: str,
                 host_name_in_certificate: Optional[str] = None):
        pulumi.set(__self__, "ssl_method", ssl_method)
        if host_name_in_certificate is not None:
            pulumi.set(__self__, "host_name_in_certificate", host_name_in_certificate)

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> str:
        return pulumi.get(self, "ssl_method")

    @property
    @pulumi.getter(name="hostNameInCertificate")
    def host_name_in_certificate(self) -> Optional[str]:
        return pulumi.get(self, "host_name_in_certificate")


@pulumi.output_type
class SourceMssqlConfigurationTunnelMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceMssqlSshTunnelMethodNoTunnel":
            suggest = "source_mssql_ssh_tunnel_method_no_tunnel"
        elif key == "sourceMssqlSshTunnelMethodPasswordAuthentication":
            suggest = "source_mssql_ssh_tunnel_method_password_authentication"
        elif key == "sourceMssqlSshTunnelMethodSshKeyAuthentication":
            suggest = "source_mssql_ssh_tunnel_method_ssh_key_authentication"
        elif key == "sourceMssqlUpdateSshTunnelMethodNoTunnel":
            suggest = "source_mssql_update_ssh_tunnel_method_no_tunnel"
        elif key == "sourceMssqlUpdateSshTunnelMethodPasswordAuthentication":
            suggest = "source_mssql_update_ssh_tunnel_method_password_authentication"
        elif key == "sourceMssqlUpdateSshTunnelMethodSshKeyAuthentication":
            suggest = "source_mssql_update_ssh_tunnel_method_ssh_key_authentication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMssqlConfigurationTunnelMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMssqlConfigurationTunnelMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMssqlConfigurationTunnelMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_mssql_ssh_tunnel_method_no_tunnel: Optional['outputs.SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodNoTunnel'] = None,
                 source_mssql_ssh_tunnel_method_password_authentication: Optional['outputs.SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodPasswordAuthentication'] = None,
                 source_mssql_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodSshKeyAuthentication'] = None,
                 source_mssql_update_ssh_tunnel_method_no_tunnel: Optional['outputs.SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodNoTunnel'] = None,
                 source_mssql_update_ssh_tunnel_method_password_authentication: Optional['outputs.SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodPasswordAuthentication'] = None,
                 source_mssql_update_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodSshKeyAuthentication'] = None):
        if source_mssql_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "source_mssql_ssh_tunnel_method_no_tunnel", source_mssql_ssh_tunnel_method_no_tunnel)
        if source_mssql_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "source_mssql_ssh_tunnel_method_password_authentication", source_mssql_ssh_tunnel_method_password_authentication)
        if source_mssql_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "source_mssql_ssh_tunnel_method_ssh_key_authentication", source_mssql_ssh_tunnel_method_ssh_key_authentication)
        if source_mssql_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "source_mssql_update_ssh_tunnel_method_no_tunnel", source_mssql_update_ssh_tunnel_method_no_tunnel)
        if source_mssql_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "source_mssql_update_ssh_tunnel_method_password_authentication", source_mssql_update_ssh_tunnel_method_password_authentication)
        if source_mssql_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "source_mssql_update_ssh_tunnel_method_ssh_key_authentication", source_mssql_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="sourceMssqlSshTunnelMethodNoTunnel")
    def source_mssql_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "source_mssql_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="sourceMssqlSshTunnelMethodPasswordAuthentication")
    def source_mssql_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "source_mssql_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="sourceMssqlSshTunnelMethodSshKeyAuthentication")
    def source_mssql_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "source_mssql_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="sourceMssqlUpdateSshTunnelMethodNoTunnel")
    def source_mssql_update_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "source_mssql_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="sourceMssqlUpdateSshTunnelMethodPasswordAuthentication")
    def source_mssql_update_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "source_mssql_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="sourceMssqlUpdateSshTunnelMethodSshKeyAuthentication")
    def source_mssql_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "source_mssql_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class SourceMyHoursConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "logsBatchSize":
            suggest = "logs_batch_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMyHoursConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMyHoursConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMyHoursConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email: str,
                 password: str,
                 source_type: str,
                 start_date: str,
                 logs_batch_size: Optional[int] = None):
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if logs_batch_size is not None:
            pulumi.set(__self__, "logs_batch_size", logs_batch_size)

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="logsBatchSize")
    def logs_batch_size(self) -> Optional[int]:
        return pulumi.get(self, "logs_batch_size")


@pulumi.output_type
class SourceMysqlConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "replicationMethod":
            suggest = "replication_method"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "jdbcUrlParams":
            suggest = "jdbc_url_params"
        elif key == "sslMode":
            suggest = "ssl_mode"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMysqlConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMysqlConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMysqlConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: str,
                 host: str,
                 port: int,
                 replication_method: 'outputs.SourceMysqlConfigurationReplicationMethod',
                 source_type: str,
                 username: str,
                 jdbc_url_params: Optional[str] = None,
                 password: Optional[str] = None,
                 ssl_mode: Optional['outputs.SourceMysqlConfigurationSslMode'] = None,
                 tunnel_method: Optional['outputs.SourceMysqlConfigurationTunnelMethod'] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "replication_method", replication_method)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "username", username)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if ssl_mode is not None:
            pulumi.set(__self__, "ssl_mode", ssl_mode)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="replicationMethod")
    def replication_method(self) -> 'outputs.SourceMysqlConfigurationReplicationMethod':
        return pulumi.get(self, "replication_method")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[str]:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional['outputs.SourceMysqlConfigurationSslMode']:
        return pulumi.get(self, "ssl_mode")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional['outputs.SourceMysqlConfigurationTunnelMethod']:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class SourceMysqlConfigurationReplicationMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceMysqlUpdateMethodReadChangesUsingBinaryLogCdc":
            suggest = "source_mysql_update_method_read_changes_using_binary_log_cdc"
        elif key == "sourceMysqlUpdateMethodScanChangesWithUserDefinedCursor":
            suggest = "source_mysql_update_method_scan_changes_with_user_defined_cursor"
        elif key == "sourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdc":
            suggest = "source_mysql_update_update_method_read_changes_using_binary_log_cdc"
        elif key == "sourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursor":
            suggest = "source_mysql_update_update_method_scan_changes_with_user_defined_cursor"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMysqlConfigurationReplicationMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMysqlConfigurationReplicationMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMysqlConfigurationReplicationMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_mysql_update_method_read_changes_using_binary_log_cdc: Optional['outputs.SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodReadChangesUsingBinaryLogCdc'] = None,
                 source_mysql_update_method_scan_changes_with_user_defined_cursor: Optional['outputs.SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodScanChangesWithUserDefinedCursor'] = None,
                 source_mysql_update_update_method_read_changes_using_binary_log_cdc: Optional['outputs.SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdc'] = None,
                 source_mysql_update_update_method_scan_changes_with_user_defined_cursor: Optional['outputs.SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursor'] = None):
        if source_mysql_update_method_read_changes_using_binary_log_cdc is not None:
            pulumi.set(__self__, "source_mysql_update_method_read_changes_using_binary_log_cdc", source_mysql_update_method_read_changes_using_binary_log_cdc)
        if source_mysql_update_method_scan_changes_with_user_defined_cursor is not None:
            pulumi.set(__self__, "source_mysql_update_method_scan_changes_with_user_defined_cursor", source_mysql_update_method_scan_changes_with_user_defined_cursor)
        if source_mysql_update_update_method_read_changes_using_binary_log_cdc is not None:
            pulumi.set(__self__, "source_mysql_update_update_method_read_changes_using_binary_log_cdc", source_mysql_update_update_method_read_changes_using_binary_log_cdc)
        if source_mysql_update_update_method_scan_changes_with_user_defined_cursor is not None:
            pulumi.set(__self__, "source_mysql_update_update_method_scan_changes_with_user_defined_cursor", source_mysql_update_update_method_scan_changes_with_user_defined_cursor)

    @property
    @pulumi.getter(name="sourceMysqlUpdateMethodReadChangesUsingBinaryLogCdc")
    def source_mysql_update_method_read_changes_using_binary_log_cdc(self) -> Optional['outputs.SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodReadChangesUsingBinaryLogCdc']:
        return pulumi.get(self, "source_mysql_update_method_read_changes_using_binary_log_cdc")

    @property
    @pulumi.getter(name="sourceMysqlUpdateMethodScanChangesWithUserDefinedCursor")
    def source_mysql_update_method_scan_changes_with_user_defined_cursor(self) -> Optional['outputs.SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodScanChangesWithUserDefinedCursor']:
        return pulumi.get(self, "source_mysql_update_method_scan_changes_with_user_defined_cursor")

    @property
    @pulumi.getter(name="sourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdc")
    def source_mysql_update_update_method_read_changes_using_binary_log_cdc(self) -> Optional['outputs.SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdc']:
        return pulumi.get(self, "source_mysql_update_update_method_read_changes_using_binary_log_cdc")

    @property
    @pulumi.getter(name="sourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursor")
    def source_mysql_update_update_method_scan_changes_with_user_defined_cursor(self) -> Optional['outputs.SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursor']:
        return pulumi.get(self, "source_mysql_update_update_method_scan_changes_with_user_defined_cursor")


@pulumi.output_type
class SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodReadChangesUsingBinaryLogCdc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialWaitingSeconds":
            suggest = "initial_waiting_seconds"
        elif key == "serverTimeZone":
            suggest = "server_time_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodReadChangesUsingBinaryLogCdc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodReadChangesUsingBinaryLogCdc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodReadChangesUsingBinaryLogCdc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 method: str,
                 initial_waiting_seconds: Optional[int] = None,
                 server_time_zone: Optional[str] = None):
        pulumi.set(__self__, "method", method)
        if initial_waiting_seconds is not None:
            pulumi.set(__self__, "initial_waiting_seconds", initial_waiting_seconds)
        if server_time_zone is not None:
            pulumi.set(__self__, "server_time_zone", server_time_zone)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="initialWaitingSeconds")
    def initial_waiting_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_waiting_seconds")

    @property
    @pulumi.getter(name="serverTimeZone")
    def server_time_zone(self) -> Optional[str]:
        return pulumi.get(self, "server_time_zone")


@pulumi.output_type
class SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodScanChangesWithUserDefinedCursor(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialWaitingSeconds":
            suggest = "initial_waiting_seconds"
        elif key == "serverTimeZone":
            suggest = "server_time_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 method: str,
                 initial_waiting_seconds: Optional[int] = None,
                 server_time_zone: Optional[str] = None):
        pulumi.set(__self__, "method", method)
        if initial_waiting_seconds is not None:
            pulumi.set(__self__, "initial_waiting_seconds", initial_waiting_seconds)
        if server_time_zone is not None:
            pulumi.set(__self__, "server_time_zone", server_time_zone)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="initialWaitingSeconds")
    def initial_waiting_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_waiting_seconds")

    @property
    @pulumi.getter(name="serverTimeZone")
    def server_time_zone(self) -> Optional[str]:
        return pulumi.get(self, "server_time_zone")


@pulumi.output_type
class SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursor(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class SourceMysqlConfigurationSslMode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceMysqlSslModesPreferred":
            suggest = "source_mysql_ssl_modes_preferred"
        elif key == "sourceMysqlSslModesRequired":
            suggest = "source_mysql_ssl_modes_required"
        elif key == "sourceMysqlSslModesVerifyCa":
            suggest = "source_mysql_ssl_modes_verify_ca"
        elif key == "sourceMysqlSslModesVerifyIdentity":
            suggest = "source_mysql_ssl_modes_verify_identity"
        elif key == "sourceMysqlUpdateSslModesPreferred":
            suggest = "source_mysql_update_ssl_modes_preferred"
        elif key == "sourceMysqlUpdateSslModesRequired":
            suggest = "source_mysql_update_ssl_modes_required"
        elif key == "sourceMysqlUpdateSslModesVerifyCa":
            suggest = "source_mysql_update_ssl_modes_verify_ca"
        elif key == "sourceMysqlUpdateSslModesVerifyIdentity":
            suggest = "source_mysql_update_ssl_modes_verify_identity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMysqlConfigurationSslMode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMysqlConfigurationSslMode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMysqlConfigurationSslMode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_mysql_ssl_modes_preferred: Optional['outputs.SourceMysqlConfigurationSslModeSourceMysqlSslModesPreferred'] = None,
                 source_mysql_ssl_modes_required: Optional['outputs.SourceMysqlConfigurationSslModeSourceMysqlSslModesRequired'] = None,
                 source_mysql_ssl_modes_verify_ca: Optional['outputs.SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyCa'] = None,
                 source_mysql_ssl_modes_verify_identity: Optional['outputs.SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyIdentity'] = None,
                 source_mysql_update_ssl_modes_preferred: Optional['outputs.SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesPreferred'] = None,
                 source_mysql_update_ssl_modes_required: Optional['outputs.SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesRequired'] = None,
                 source_mysql_update_ssl_modes_verify_ca: Optional['outputs.SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyCa'] = None,
                 source_mysql_update_ssl_modes_verify_identity: Optional['outputs.SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyIdentity'] = None):
        if source_mysql_ssl_modes_preferred is not None:
            pulumi.set(__self__, "source_mysql_ssl_modes_preferred", source_mysql_ssl_modes_preferred)
        if source_mysql_ssl_modes_required is not None:
            pulumi.set(__self__, "source_mysql_ssl_modes_required", source_mysql_ssl_modes_required)
        if source_mysql_ssl_modes_verify_ca is not None:
            pulumi.set(__self__, "source_mysql_ssl_modes_verify_ca", source_mysql_ssl_modes_verify_ca)
        if source_mysql_ssl_modes_verify_identity is not None:
            pulumi.set(__self__, "source_mysql_ssl_modes_verify_identity", source_mysql_ssl_modes_verify_identity)
        if source_mysql_update_ssl_modes_preferred is not None:
            pulumi.set(__self__, "source_mysql_update_ssl_modes_preferred", source_mysql_update_ssl_modes_preferred)
        if source_mysql_update_ssl_modes_required is not None:
            pulumi.set(__self__, "source_mysql_update_ssl_modes_required", source_mysql_update_ssl_modes_required)
        if source_mysql_update_ssl_modes_verify_ca is not None:
            pulumi.set(__self__, "source_mysql_update_ssl_modes_verify_ca", source_mysql_update_ssl_modes_verify_ca)
        if source_mysql_update_ssl_modes_verify_identity is not None:
            pulumi.set(__self__, "source_mysql_update_ssl_modes_verify_identity", source_mysql_update_ssl_modes_verify_identity)

    @property
    @pulumi.getter(name="sourceMysqlSslModesPreferred")
    def source_mysql_ssl_modes_preferred(self) -> Optional['outputs.SourceMysqlConfigurationSslModeSourceMysqlSslModesPreferred']:
        return pulumi.get(self, "source_mysql_ssl_modes_preferred")

    @property
    @pulumi.getter(name="sourceMysqlSslModesRequired")
    def source_mysql_ssl_modes_required(self) -> Optional['outputs.SourceMysqlConfigurationSslModeSourceMysqlSslModesRequired']:
        return pulumi.get(self, "source_mysql_ssl_modes_required")

    @property
    @pulumi.getter(name="sourceMysqlSslModesVerifyCa")
    def source_mysql_ssl_modes_verify_ca(self) -> Optional['outputs.SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyCa']:
        return pulumi.get(self, "source_mysql_ssl_modes_verify_ca")

    @property
    @pulumi.getter(name="sourceMysqlSslModesVerifyIdentity")
    def source_mysql_ssl_modes_verify_identity(self) -> Optional['outputs.SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyIdentity']:
        return pulumi.get(self, "source_mysql_ssl_modes_verify_identity")

    @property
    @pulumi.getter(name="sourceMysqlUpdateSslModesPreferred")
    def source_mysql_update_ssl_modes_preferred(self) -> Optional['outputs.SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesPreferred']:
        return pulumi.get(self, "source_mysql_update_ssl_modes_preferred")

    @property
    @pulumi.getter(name="sourceMysqlUpdateSslModesRequired")
    def source_mysql_update_ssl_modes_required(self) -> Optional['outputs.SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesRequired']:
        return pulumi.get(self, "source_mysql_update_ssl_modes_required")

    @property
    @pulumi.getter(name="sourceMysqlUpdateSslModesVerifyCa")
    def source_mysql_update_ssl_modes_verify_ca(self) -> Optional['outputs.SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyCa']:
        return pulumi.get(self, "source_mysql_update_ssl_modes_verify_ca")

    @property
    @pulumi.getter(name="sourceMysqlUpdateSslModesVerifyIdentity")
    def source_mysql_update_ssl_modes_verify_identity(self) -> Optional['outputs.SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyIdentity']:
        return pulumi.get(self, "source_mysql_update_ssl_modes_verify_identity")


@pulumi.output_type
class SourceMysqlConfigurationSslModeSourceMysqlSslModesPreferred(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class SourceMysqlConfigurationSslModeSourceMysqlSslModesRequired(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyCa(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clientKey":
            suggest = "client_key"
        elif key == "clientKeyPassword":
            suggest = "client_key_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyCa. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyCa.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyCa.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: str,
                 mode: str,
                 client_certificate: Optional[str] = None,
                 client_key: Optional[str] = None,
                 client_key_password: Optional[str] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "mode", mode)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[str]:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[str]:
        return pulumi.get(self, "client_key_password")


@pulumi.output_type
class SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyIdentity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clientKey":
            suggest = "client_key"
        elif key == "clientKeyPassword":
            suggest = "client_key_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: str,
                 mode: str,
                 client_certificate: Optional[str] = None,
                 client_key: Optional[str] = None,
                 client_key_password: Optional[str] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "mode", mode)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[str]:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[str]:
        return pulumi.get(self, "client_key_password")


@pulumi.output_type
class SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesPreferred(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesRequired(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyCa(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clientKey":
            suggest = "client_key"
        elif key == "clientKeyPassword":
            suggest = "client_key_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyCa. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyCa.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyCa.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: str,
                 mode: str,
                 client_certificate: Optional[str] = None,
                 client_key: Optional[str] = None,
                 client_key_password: Optional[str] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "mode", mode)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[str]:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[str]:
        return pulumi.get(self, "client_key_password")


@pulumi.output_type
class SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyIdentity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clientKey":
            suggest = "client_key"
        elif key == "clientKeyPassword":
            suggest = "client_key_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: str,
                 mode: str,
                 client_certificate: Optional[str] = None,
                 client_key: Optional[str] = None,
                 client_key_password: Optional[str] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "mode", mode)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[str]:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[str]:
        return pulumi.get(self, "client_key_password")


@pulumi.output_type
class SourceMysqlConfigurationTunnelMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceMysqlSshTunnelMethodNoTunnel":
            suggest = "source_mysql_ssh_tunnel_method_no_tunnel"
        elif key == "sourceMysqlSshTunnelMethodPasswordAuthentication":
            suggest = "source_mysql_ssh_tunnel_method_password_authentication"
        elif key == "sourceMysqlSshTunnelMethodSshKeyAuthentication":
            suggest = "source_mysql_ssh_tunnel_method_ssh_key_authentication"
        elif key == "sourceMysqlUpdateSshTunnelMethodNoTunnel":
            suggest = "source_mysql_update_ssh_tunnel_method_no_tunnel"
        elif key == "sourceMysqlUpdateSshTunnelMethodPasswordAuthentication":
            suggest = "source_mysql_update_ssh_tunnel_method_password_authentication"
        elif key == "sourceMysqlUpdateSshTunnelMethodSshKeyAuthentication":
            suggest = "source_mysql_update_ssh_tunnel_method_ssh_key_authentication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMysqlConfigurationTunnelMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMysqlConfigurationTunnelMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMysqlConfigurationTunnelMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_mysql_ssh_tunnel_method_no_tunnel: Optional['outputs.SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodNoTunnel'] = None,
                 source_mysql_ssh_tunnel_method_password_authentication: Optional['outputs.SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodPasswordAuthentication'] = None,
                 source_mysql_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodSshKeyAuthentication'] = None,
                 source_mysql_update_ssh_tunnel_method_no_tunnel: Optional['outputs.SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodNoTunnel'] = None,
                 source_mysql_update_ssh_tunnel_method_password_authentication: Optional['outputs.SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodPasswordAuthentication'] = None,
                 source_mysql_update_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodSshKeyAuthentication'] = None):
        if source_mysql_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "source_mysql_ssh_tunnel_method_no_tunnel", source_mysql_ssh_tunnel_method_no_tunnel)
        if source_mysql_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "source_mysql_ssh_tunnel_method_password_authentication", source_mysql_ssh_tunnel_method_password_authentication)
        if source_mysql_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "source_mysql_ssh_tunnel_method_ssh_key_authentication", source_mysql_ssh_tunnel_method_ssh_key_authentication)
        if source_mysql_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "source_mysql_update_ssh_tunnel_method_no_tunnel", source_mysql_update_ssh_tunnel_method_no_tunnel)
        if source_mysql_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "source_mysql_update_ssh_tunnel_method_password_authentication", source_mysql_update_ssh_tunnel_method_password_authentication)
        if source_mysql_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "source_mysql_update_ssh_tunnel_method_ssh_key_authentication", source_mysql_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="sourceMysqlSshTunnelMethodNoTunnel")
    def source_mysql_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "source_mysql_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="sourceMysqlSshTunnelMethodPasswordAuthentication")
    def source_mysql_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "source_mysql_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="sourceMysqlSshTunnelMethodSshKeyAuthentication")
    def source_mysql_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "source_mysql_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="sourceMysqlUpdateSshTunnelMethodNoTunnel")
    def source_mysql_update_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "source_mysql_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="sourceMysqlUpdateSshTunnelMethodPasswordAuthentication")
    def source_mysql_update_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "source_mysql_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="sourceMysqlUpdateSshTunnelMethodSshKeyAuthentication")
    def source_mysql_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "source_mysql_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class SourceNetsuiteConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "consumerKey":
            suggest = "consumer_key"
        elif key == "consumerSecret":
            suggest = "consumer_secret"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDatetime":
            suggest = "start_datetime"
        elif key == "tokenKey":
            suggest = "token_key"
        elif key == "tokenSecret":
            suggest = "token_secret"
        elif key == "objectTypes":
            suggest = "object_types"
        elif key == "windowInDays":
            suggest = "window_in_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceNetsuiteConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceNetsuiteConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceNetsuiteConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 consumer_key: str,
                 consumer_secret: str,
                 realm: str,
                 source_type: str,
                 start_datetime: str,
                 token_key: str,
                 token_secret: str,
                 object_types: Optional[Sequence[str]] = None,
                 window_in_days: Optional[int] = None):
        pulumi.set(__self__, "consumer_key", consumer_key)
        pulumi.set(__self__, "consumer_secret", consumer_secret)
        pulumi.set(__self__, "realm", realm)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_datetime", start_datetime)
        pulumi.set(__self__, "token_key", token_key)
        pulumi.set(__self__, "token_secret", token_secret)
        if object_types is not None:
            pulumi.set(__self__, "object_types", object_types)
        if window_in_days is not None:
            pulumi.set(__self__, "window_in_days", window_in_days)

    @property
    @pulumi.getter(name="consumerKey")
    def consumer_key(self) -> str:
        return pulumi.get(self, "consumer_key")

    @property
    @pulumi.getter(name="consumerSecret")
    def consumer_secret(self) -> str:
        return pulumi.get(self, "consumer_secret")

    @property
    @pulumi.getter
    def realm(self) -> str:
        return pulumi.get(self, "realm")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDatetime")
    def start_datetime(self) -> str:
        return pulumi.get(self, "start_datetime")

    @property
    @pulumi.getter(name="tokenKey")
    def token_key(self) -> str:
        return pulumi.get(self, "token_key")

    @property
    @pulumi.getter(name="tokenSecret")
    def token_secret(self) -> str:
        return pulumi.get(self, "token_secret")

    @property
    @pulumi.getter(name="objectTypes")
    def object_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "object_types")

    @property
    @pulumi.getter(name="windowInDays")
    def window_in_days(self) -> Optional[int]:
        return pulumi.get(self, "window_in_days")


@pulumi.output_type
class SourceNotionConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceNotionConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceNotionConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceNotionConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 start_date: str,
                 credentials: Optional['outputs.SourceNotionConfigurationCredentials'] = None):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourceNotionConfigurationCredentials']:
        return pulumi.get(self, "credentials")


@pulumi.output_type
class SourceNotionConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceNotionAuthenticateUsingAccessToken":
            suggest = "source_notion_authenticate_using_access_token"
        elif key == "sourceNotionAuthenticateUsingOAuth20":
            suggest = "source_notion_authenticate_using_o_auth20"
        elif key == "sourceNotionUpdateAuthenticateUsingAccessToken":
            suggest = "source_notion_update_authenticate_using_access_token"
        elif key == "sourceNotionUpdateAuthenticateUsingOAuth20":
            suggest = "source_notion_update_authenticate_using_o_auth20"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceNotionConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceNotionConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceNotionConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_notion_authenticate_using_access_token: Optional['outputs.SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingAccessToken'] = None,
                 source_notion_authenticate_using_o_auth20: Optional['outputs.SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingOAuth20'] = None,
                 source_notion_update_authenticate_using_access_token: Optional['outputs.SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingAccessToken'] = None,
                 source_notion_update_authenticate_using_o_auth20: Optional['outputs.SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingOAuth20'] = None):
        if source_notion_authenticate_using_access_token is not None:
            pulumi.set(__self__, "source_notion_authenticate_using_access_token", source_notion_authenticate_using_access_token)
        if source_notion_authenticate_using_o_auth20 is not None:
            pulumi.set(__self__, "source_notion_authenticate_using_o_auth20", source_notion_authenticate_using_o_auth20)
        if source_notion_update_authenticate_using_access_token is not None:
            pulumi.set(__self__, "source_notion_update_authenticate_using_access_token", source_notion_update_authenticate_using_access_token)
        if source_notion_update_authenticate_using_o_auth20 is not None:
            pulumi.set(__self__, "source_notion_update_authenticate_using_o_auth20", source_notion_update_authenticate_using_o_auth20)

    @property
    @pulumi.getter(name="sourceNotionAuthenticateUsingAccessToken")
    def source_notion_authenticate_using_access_token(self) -> Optional['outputs.SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingAccessToken']:
        return pulumi.get(self, "source_notion_authenticate_using_access_token")

    @property
    @pulumi.getter(name="sourceNotionAuthenticateUsingOAuth20")
    def source_notion_authenticate_using_o_auth20(self) -> Optional['outputs.SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingOAuth20']:
        return pulumi.get(self, "source_notion_authenticate_using_o_auth20")

    @property
    @pulumi.getter(name="sourceNotionUpdateAuthenticateUsingAccessToken")
    def source_notion_update_authenticate_using_access_token(self) -> Optional['outputs.SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingAccessToken']:
        return pulumi.get(self, "source_notion_update_authenticate_using_access_token")

    @property
    @pulumi.getter(name="sourceNotionUpdateAuthenticateUsingOAuth20")
    def source_notion_update_authenticate_using_o_auth20(self) -> Optional['outputs.SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingOAuth20']:
        return pulumi.get(self, "source_notion_update_authenticate_using_o_auth20")


@pulumi.output_type
class SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingAccessToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingAccessToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingAccessToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingAccessToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_type: str,
                 token: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def token(self) -> str:
        return pulumi.get(self, "token")


@pulumi.output_type
class SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingAccessToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingAccessToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingAccessToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingAccessToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_type: str,
                 token: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def token(self) -> str:
        return pulumi.get(self, "token")


@pulumi.output_type
class SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class SourceNytimesConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "endDate":
            suggest = "end_date"
        elif key == "shareType":
            suggest = "share_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceNytimesConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceNytimesConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceNytimesConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 period: int,
                 source_type: str,
                 start_date: str,
                 end_date: Optional[str] = None,
                 share_type: Optional[str] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if share_type is not None:
            pulumi.set(__self__, "share_type", share_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter
    def period(self) -> int:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="shareType")
    def share_type(self) -> Optional[str]:
        return pulumi.get(self, "share_type")


@pulumi.output_type
class SourceOktaConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOktaConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOktaConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOktaConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 credentials: Optional['outputs.SourceOktaConfigurationCredentials'] = None,
                 domain: Optional[str] = None,
                 start_date: Optional[str] = None):
        pulumi.set(__self__, "source_type", source_type)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourceOktaConfigurationCredentials']:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceOktaConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceOktaAuthorizationMethodApiToken":
            suggest = "source_okta_authorization_method_api_token"
        elif key == "sourceOktaAuthorizationMethodOAuth20":
            suggest = "source_okta_authorization_method_o_auth20"
        elif key == "sourceOktaUpdateAuthorizationMethodApiToken":
            suggest = "source_okta_update_authorization_method_api_token"
        elif key == "sourceOktaUpdateAuthorizationMethodOAuth20":
            suggest = "source_okta_update_authorization_method_o_auth20"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOktaConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOktaConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOktaConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_okta_authorization_method_api_token: Optional['outputs.SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodApiToken'] = None,
                 source_okta_authorization_method_o_auth20: Optional['outputs.SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodOAuth20'] = None,
                 source_okta_update_authorization_method_api_token: Optional['outputs.SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodApiToken'] = None,
                 source_okta_update_authorization_method_o_auth20: Optional['outputs.SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodOAuth20'] = None):
        if source_okta_authorization_method_api_token is not None:
            pulumi.set(__self__, "source_okta_authorization_method_api_token", source_okta_authorization_method_api_token)
        if source_okta_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_okta_authorization_method_o_auth20", source_okta_authorization_method_o_auth20)
        if source_okta_update_authorization_method_api_token is not None:
            pulumi.set(__self__, "source_okta_update_authorization_method_api_token", source_okta_update_authorization_method_api_token)
        if source_okta_update_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_okta_update_authorization_method_o_auth20", source_okta_update_authorization_method_o_auth20)

    @property
    @pulumi.getter(name="sourceOktaAuthorizationMethodApiToken")
    def source_okta_authorization_method_api_token(self) -> Optional['outputs.SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodApiToken']:
        return pulumi.get(self, "source_okta_authorization_method_api_token")

    @property
    @pulumi.getter(name="sourceOktaAuthorizationMethodOAuth20")
    def source_okta_authorization_method_o_auth20(self) -> Optional['outputs.SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodOAuth20']:
        return pulumi.get(self, "source_okta_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourceOktaUpdateAuthorizationMethodApiToken")
    def source_okta_update_authorization_method_api_token(self) -> Optional['outputs.SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodApiToken']:
        return pulumi.get(self, "source_okta_update_authorization_method_api_token")

    @property
    @pulumi.getter(name="sourceOktaUpdateAuthorizationMethodOAuth20")
    def source_okta_update_authorization_method_o_auth20(self) -> Optional['outputs.SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodOAuth20']:
        return pulumi.get(self, "source_okta_update_authorization_method_o_auth20")


@pulumi.output_type
class SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodApiToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiToken":
            suggest = "api_token"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodApiToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodApiToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodApiToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token: str,
                 auth_type: str):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodApiToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiToken":
            suggest = "api_token"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodApiToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodApiToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodApiToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token: str,
                 auth_type: str):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class SourceOmnisendConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOmnisendConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOmnisendConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOmnisendConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceOnesignalConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outcomeNames":
            suggest = "outcome_names"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "userAuthKey":
            suggest = "user_auth_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOnesignalConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOnesignalConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOnesignalConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 applications: Sequence['outputs.SourceOnesignalConfigurationApplication'],
                 outcome_names: str,
                 source_type: str,
                 start_date: str,
                 user_auth_key: str):
        pulumi.set(__self__, "applications", applications)
        pulumi.set(__self__, "outcome_names", outcome_names)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "user_auth_key", user_auth_key)

    @property
    @pulumi.getter
    def applications(self) -> Sequence['outputs.SourceOnesignalConfigurationApplication']:
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter(name="outcomeNames")
    def outcome_names(self) -> str:
        return pulumi.get(self, "outcome_names")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="userAuthKey")
    def user_auth_key(self) -> str:
        return pulumi.get(self, "user_auth_key")


@pulumi.output_type
class SourceOnesignalConfigurationApplication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appApiKey":
            suggest = "app_api_key"
        elif key == "appId":
            suggest = "app_id"
        elif key == "appName":
            suggest = "app_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOnesignalConfigurationApplication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOnesignalConfigurationApplication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOnesignalConfigurationApplication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_api_key: str,
                 app_id: str,
                 app_name: Optional[str] = None):
        pulumi.set(__self__, "app_api_key", app_api_key)
        pulumi.set(__self__, "app_id", app_id)
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)

    @property
    @pulumi.getter(name="appApiKey")
    def app_api_key(self) -> str:
        return pulumi.get(self, "app_api_key")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[str]:
        return pulumi.get(self, "app_name")


@pulumi.output_type
class SourceOpenweatherConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOpenweatherConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOpenweatherConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOpenweatherConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 appid: str,
                 lat: str,
                 lon: str,
                 source_type: str,
                 lang: Optional[str] = None,
                 units: Optional[str] = None):
        pulumi.set(__self__, "appid", appid)
        pulumi.set(__self__, "lat", lat)
        pulumi.set(__self__, "lon", lon)
        pulumi.set(__self__, "source_type", source_type)
        if lang is not None:
            pulumi.set(__self__, "lang", lang)
        if units is not None:
            pulumi.set(__self__, "units", units)

    @property
    @pulumi.getter
    def appid(self) -> str:
        return pulumi.get(self, "appid")

    @property
    @pulumi.getter
    def lat(self) -> str:
        return pulumi.get(self, "lat")

    @property
    @pulumi.getter
    def lon(self) -> str:
        return pulumi.get(self, "lon")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def lang(self) -> Optional[str]:
        return pulumi.get(self, "lang")

    @property
    @pulumi.getter
    def units(self) -> Optional[str]:
        return pulumi.get(self, "units")


@pulumi.output_type
class SourceOracleConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "connectionData":
            suggest = "connection_data"
        elif key == "jdbcUrlParams":
            suggest = "jdbc_url_params"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOracleConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOracleConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOracleConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption: 'outputs.SourceOracleConfigurationEncryption',
                 host: str,
                 port: int,
                 source_type: str,
                 username: str,
                 connection_data: Optional['outputs.SourceOracleConfigurationConnectionData'] = None,
                 jdbc_url_params: Optional[str] = None,
                 password: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 tunnel_method: Optional['outputs.SourceOracleConfigurationTunnelMethod'] = None):
        pulumi.set(__self__, "encryption", encryption)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "username", username)
        if connection_data is not None:
            pulumi.set(__self__, "connection_data", connection_data)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter
    def encryption(self) -> 'outputs.SourceOracleConfigurationEncryption':
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="connectionData")
    def connection_data(self) -> Optional['outputs.SourceOracleConfigurationConnectionData']:
        return pulumi.get(self, "connection_data")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[str]:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional['outputs.SourceOracleConfigurationTunnelMethod']:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class SourceOracleConfigurationConnectionData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceOracleConnectByServiceName":
            suggest = "source_oracle_connect_by_service_name"
        elif key == "sourceOracleConnectBySystemIdSid":
            suggest = "source_oracle_connect_by_system_id_sid"
        elif key == "sourceOracleUpdateConnectByServiceName":
            suggest = "source_oracle_update_connect_by_service_name"
        elif key == "sourceOracleUpdateConnectBySystemIdSid":
            suggest = "source_oracle_update_connect_by_system_id_sid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOracleConfigurationConnectionData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOracleConfigurationConnectionData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOracleConfigurationConnectionData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_oracle_connect_by_service_name: Optional['outputs.SourceOracleConfigurationConnectionDataSourceOracleConnectByServiceName'] = None,
                 source_oracle_connect_by_system_id_sid: Optional['outputs.SourceOracleConfigurationConnectionDataSourceOracleConnectBySystemIdSid'] = None,
                 source_oracle_update_connect_by_service_name: Optional['outputs.SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectByServiceName'] = None,
                 source_oracle_update_connect_by_system_id_sid: Optional['outputs.SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectBySystemIdSid'] = None):
        if source_oracle_connect_by_service_name is not None:
            pulumi.set(__self__, "source_oracle_connect_by_service_name", source_oracle_connect_by_service_name)
        if source_oracle_connect_by_system_id_sid is not None:
            pulumi.set(__self__, "source_oracle_connect_by_system_id_sid", source_oracle_connect_by_system_id_sid)
        if source_oracle_update_connect_by_service_name is not None:
            pulumi.set(__self__, "source_oracle_update_connect_by_service_name", source_oracle_update_connect_by_service_name)
        if source_oracle_update_connect_by_system_id_sid is not None:
            pulumi.set(__self__, "source_oracle_update_connect_by_system_id_sid", source_oracle_update_connect_by_system_id_sid)

    @property
    @pulumi.getter(name="sourceOracleConnectByServiceName")
    def source_oracle_connect_by_service_name(self) -> Optional['outputs.SourceOracleConfigurationConnectionDataSourceOracleConnectByServiceName']:
        return pulumi.get(self, "source_oracle_connect_by_service_name")

    @property
    @pulumi.getter(name="sourceOracleConnectBySystemIdSid")
    def source_oracle_connect_by_system_id_sid(self) -> Optional['outputs.SourceOracleConfigurationConnectionDataSourceOracleConnectBySystemIdSid']:
        return pulumi.get(self, "source_oracle_connect_by_system_id_sid")

    @property
    @pulumi.getter(name="sourceOracleUpdateConnectByServiceName")
    def source_oracle_update_connect_by_service_name(self) -> Optional['outputs.SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectByServiceName']:
        return pulumi.get(self, "source_oracle_update_connect_by_service_name")

    @property
    @pulumi.getter(name="sourceOracleUpdateConnectBySystemIdSid")
    def source_oracle_update_connect_by_system_id_sid(self) -> Optional['outputs.SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectBySystemIdSid']:
        return pulumi.get(self, "source_oracle_update_connect_by_system_id_sid")


@pulumi.output_type
class SourceOracleConfigurationConnectionDataSourceOracleConnectByServiceName(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"
        elif key == "connectionType":
            suggest = "connection_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOracleConfigurationConnectionDataSourceOracleConnectByServiceName. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOracleConfigurationConnectionDataSourceOracleConnectByServiceName.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOracleConfigurationConnectionDataSourceOracleConnectByServiceName.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_name: str,
                 connection_type: Optional[str] = None):
        pulumi.set(__self__, "service_name", service_name)
        if connection_type is not None:
            pulumi.set(__self__, "connection_type", connection_type)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> Optional[str]:
        return pulumi.get(self, "connection_type")


@pulumi.output_type
class SourceOracleConfigurationConnectionDataSourceOracleConnectBySystemIdSid(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionType":
            suggest = "connection_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOracleConfigurationConnectionDataSourceOracleConnectBySystemIdSid. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOracleConfigurationConnectionDataSourceOracleConnectBySystemIdSid.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOracleConfigurationConnectionDataSourceOracleConnectBySystemIdSid.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sid: str,
                 connection_type: Optional[str] = None):
        pulumi.set(__self__, "sid", sid)
        if connection_type is not None:
            pulumi.set(__self__, "connection_type", connection_type)

    @property
    @pulumi.getter
    def sid(self) -> str:
        return pulumi.get(self, "sid")

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> Optional[str]:
        return pulumi.get(self, "connection_type")


@pulumi.output_type
class SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectByServiceName(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"
        elif key == "connectionType":
            suggest = "connection_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectByServiceName. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectByServiceName.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectByServiceName.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_name: str,
                 connection_type: Optional[str] = None):
        pulumi.set(__self__, "service_name", service_name)
        if connection_type is not None:
            pulumi.set(__self__, "connection_type", connection_type)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> Optional[str]:
        return pulumi.get(self, "connection_type")


@pulumi.output_type
class SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectBySystemIdSid(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionType":
            suggest = "connection_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectBySystemIdSid. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectBySystemIdSid.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectBySystemIdSid.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sid: str,
                 connection_type: Optional[str] = None):
        pulumi.set(__self__, "sid", sid)
        if connection_type is not None:
            pulumi.set(__self__, "connection_type", connection_type)

    @property
    @pulumi.getter
    def sid(self) -> str:
        return pulumi.get(self, "sid")

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> Optional[str]:
        return pulumi.get(self, "connection_type")


@pulumi.output_type
class SourceOracleConfigurationEncryption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceOracleEncryptionNativeNetworkEncryptionNne":
            suggest = "source_oracle_encryption_native_network_encryption_nne"
        elif key == "sourceOracleEncryptionTlsEncryptedVerifyCertificate":
            suggest = "source_oracle_encryption_tls_encrypted_verify_certificate"
        elif key == "sourceOracleUpdateEncryptionNativeNetworkEncryptionNne":
            suggest = "source_oracle_update_encryption_native_network_encryption_nne"
        elif key == "sourceOracleUpdateEncryptionTlsEncryptedVerifyCertificate":
            suggest = "source_oracle_update_encryption_tls_encrypted_verify_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOracleConfigurationEncryption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOracleConfigurationEncryption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOracleConfigurationEncryption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_oracle_encryption_native_network_encryption_nne: Optional['outputs.SourceOracleConfigurationEncryptionSourceOracleEncryptionNativeNetworkEncryptionNne'] = None,
                 source_oracle_encryption_tls_encrypted_verify_certificate: Optional['outputs.SourceOracleConfigurationEncryptionSourceOracleEncryptionTlsEncryptedVerifyCertificate'] = None,
                 source_oracle_update_encryption_native_network_encryption_nne: Optional['outputs.SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionNativeNetworkEncryptionNne'] = None,
                 source_oracle_update_encryption_tls_encrypted_verify_certificate: Optional['outputs.SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionTlsEncryptedVerifyCertificate'] = None):
        if source_oracle_encryption_native_network_encryption_nne is not None:
            pulumi.set(__self__, "source_oracle_encryption_native_network_encryption_nne", source_oracle_encryption_native_network_encryption_nne)
        if source_oracle_encryption_tls_encrypted_verify_certificate is not None:
            pulumi.set(__self__, "source_oracle_encryption_tls_encrypted_verify_certificate", source_oracle_encryption_tls_encrypted_verify_certificate)
        if source_oracle_update_encryption_native_network_encryption_nne is not None:
            pulumi.set(__self__, "source_oracle_update_encryption_native_network_encryption_nne", source_oracle_update_encryption_native_network_encryption_nne)
        if source_oracle_update_encryption_tls_encrypted_verify_certificate is not None:
            pulumi.set(__self__, "source_oracle_update_encryption_tls_encrypted_verify_certificate", source_oracle_update_encryption_tls_encrypted_verify_certificate)

    @property
    @pulumi.getter(name="sourceOracleEncryptionNativeNetworkEncryptionNne")
    def source_oracle_encryption_native_network_encryption_nne(self) -> Optional['outputs.SourceOracleConfigurationEncryptionSourceOracleEncryptionNativeNetworkEncryptionNne']:
        return pulumi.get(self, "source_oracle_encryption_native_network_encryption_nne")

    @property
    @pulumi.getter(name="sourceOracleEncryptionTlsEncryptedVerifyCertificate")
    def source_oracle_encryption_tls_encrypted_verify_certificate(self) -> Optional['outputs.SourceOracleConfigurationEncryptionSourceOracleEncryptionTlsEncryptedVerifyCertificate']:
        return pulumi.get(self, "source_oracle_encryption_tls_encrypted_verify_certificate")

    @property
    @pulumi.getter(name="sourceOracleUpdateEncryptionNativeNetworkEncryptionNne")
    def source_oracle_update_encryption_native_network_encryption_nne(self) -> Optional['outputs.SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionNativeNetworkEncryptionNne']:
        return pulumi.get(self, "source_oracle_update_encryption_native_network_encryption_nne")

    @property
    @pulumi.getter(name="sourceOracleUpdateEncryptionTlsEncryptedVerifyCertificate")
    def source_oracle_update_encryption_tls_encrypted_verify_certificate(self) -> Optional['outputs.SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionTlsEncryptedVerifyCertificate']:
        return pulumi.get(self, "source_oracle_update_encryption_tls_encrypted_verify_certificate")


@pulumi.output_type
class SourceOracleConfigurationEncryptionSourceOracleEncryptionNativeNetworkEncryptionNne(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionMethod":
            suggest = "encryption_method"
        elif key == "encryptionAlgorithm":
            suggest = "encryption_algorithm"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOracleConfigurationEncryptionSourceOracleEncryptionNativeNetworkEncryptionNne. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOracleConfigurationEncryptionSourceOracleEncryptionNativeNetworkEncryptionNne.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOracleConfigurationEncryptionSourceOracleEncryptionNativeNetworkEncryptionNne.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_method: str,
                 encryption_algorithm: Optional[str] = None):
        pulumi.set(__self__, "encryption_method", encryption_method)
        if encryption_algorithm is not None:
            pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)

    @property
    @pulumi.getter(name="encryptionMethod")
    def encryption_method(self) -> str:
        return pulumi.get(self, "encryption_method")

    @property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "encryption_algorithm")


@pulumi.output_type
class SourceOracleConfigurationEncryptionSourceOracleEncryptionTlsEncryptedVerifyCertificate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionMethod":
            suggest = "encryption_method"
        elif key == "sslCertificate":
            suggest = "ssl_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOracleConfigurationEncryptionSourceOracleEncryptionTlsEncryptedVerifyCertificate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOracleConfigurationEncryptionSourceOracleEncryptionTlsEncryptedVerifyCertificate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOracleConfigurationEncryptionSourceOracleEncryptionTlsEncryptedVerifyCertificate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_method: str,
                 ssl_certificate: str):
        pulumi.set(__self__, "encryption_method", encryption_method)
        pulumi.set(__self__, "ssl_certificate", ssl_certificate)

    @property
    @pulumi.getter(name="encryptionMethod")
    def encryption_method(self) -> str:
        return pulumi.get(self, "encryption_method")

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> str:
        return pulumi.get(self, "ssl_certificate")


@pulumi.output_type
class SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionNativeNetworkEncryptionNne(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionMethod":
            suggest = "encryption_method"
        elif key == "encryptionAlgorithm":
            suggest = "encryption_algorithm"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionNativeNetworkEncryptionNne. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionNativeNetworkEncryptionNne.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionNativeNetworkEncryptionNne.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_method: str,
                 encryption_algorithm: Optional[str] = None):
        pulumi.set(__self__, "encryption_method", encryption_method)
        if encryption_algorithm is not None:
            pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)

    @property
    @pulumi.getter(name="encryptionMethod")
    def encryption_method(self) -> str:
        return pulumi.get(self, "encryption_method")

    @property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "encryption_algorithm")


@pulumi.output_type
class SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionTlsEncryptedVerifyCertificate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionMethod":
            suggest = "encryption_method"
        elif key == "sslCertificate":
            suggest = "ssl_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionTlsEncryptedVerifyCertificate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionTlsEncryptedVerifyCertificate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionTlsEncryptedVerifyCertificate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_method: str,
                 ssl_certificate: str):
        pulumi.set(__self__, "encryption_method", encryption_method)
        pulumi.set(__self__, "ssl_certificate", ssl_certificate)

    @property
    @pulumi.getter(name="encryptionMethod")
    def encryption_method(self) -> str:
        return pulumi.get(self, "encryption_method")

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> str:
        return pulumi.get(self, "ssl_certificate")


@pulumi.output_type
class SourceOracleConfigurationTunnelMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceOracleSshTunnelMethodNoTunnel":
            suggest = "source_oracle_ssh_tunnel_method_no_tunnel"
        elif key == "sourceOracleSshTunnelMethodPasswordAuthentication":
            suggest = "source_oracle_ssh_tunnel_method_password_authentication"
        elif key == "sourceOracleSshTunnelMethodSshKeyAuthentication":
            suggest = "source_oracle_ssh_tunnel_method_ssh_key_authentication"
        elif key == "sourceOracleUpdateSshTunnelMethodNoTunnel":
            suggest = "source_oracle_update_ssh_tunnel_method_no_tunnel"
        elif key == "sourceOracleUpdateSshTunnelMethodPasswordAuthentication":
            suggest = "source_oracle_update_ssh_tunnel_method_password_authentication"
        elif key == "sourceOracleUpdateSshTunnelMethodSshKeyAuthentication":
            suggest = "source_oracle_update_ssh_tunnel_method_ssh_key_authentication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOracleConfigurationTunnelMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOracleConfigurationTunnelMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOracleConfigurationTunnelMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_oracle_ssh_tunnel_method_no_tunnel: Optional['outputs.SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodNoTunnel'] = None,
                 source_oracle_ssh_tunnel_method_password_authentication: Optional['outputs.SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodPasswordAuthentication'] = None,
                 source_oracle_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodSshKeyAuthentication'] = None,
                 source_oracle_update_ssh_tunnel_method_no_tunnel: Optional['outputs.SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodNoTunnel'] = None,
                 source_oracle_update_ssh_tunnel_method_password_authentication: Optional['outputs.SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodPasswordAuthentication'] = None,
                 source_oracle_update_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodSshKeyAuthentication'] = None):
        if source_oracle_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "source_oracle_ssh_tunnel_method_no_tunnel", source_oracle_ssh_tunnel_method_no_tunnel)
        if source_oracle_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "source_oracle_ssh_tunnel_method_password_authentication", source_oracle_ssh_tunnel_method_password_authentication)
        if source_oracle_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "source_oracle_ssh_tunnel_method_ssh_key_authentication", source_oracle_ssh_tunnel_method_ssh_key_authentication)
        if source_oracle_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "source_oracle_update_ssh_tunnel_method_no_tunnel", source_oracle_update_ssh_tunnel_method_no_tunnel)
        if source_oracle_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "source_oracle_update_ssh_tunnel_method_password_authentication", source_oracle_update_ssh_tunnel_method_password_authentication)
        if source_oracle_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "source_oracle_update_ssh_tunnel_method_ssh_key_authentication", source_oracle_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="sourceOracleSshTunnelMethodNoTunnel")
    def source_oracle_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "source_oracle_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="sourceOracleSshTunnelMethodPasswordAuthentication")
    def source_oracle_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "source_oracle_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="sourceOracleSshTunnelMethodSshKeyAuthentication")
    def source_oracle_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "source_oracle_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="sourceOracleUpdateSshTunnelMethodNoTunnel")
    def source_oracle_update_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "source_oracle_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="sourceOracleUpdateSshTunnelMethodPasswordAuthentication")
    def source_oracle_update_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "source_oracle_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="sourceOracleUpdateSshTunnelMethodSshKeyAuthentication")
    def source_oracle_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "source_oracle_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class SourceOrbConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "lookbackWindowDays":
            suggest = "lookback_window_days"
        elif key == "numericEventPropertiesKeys":
            suggest = "numeric_event_properties_keys"
        elif key == "planId":
            suggest = "plan_id"
        elif key == "stringEventPropertiesKeys":
            suggest = "string_event_properties_keys"
        elif key == "subscriptionUsageGroupingKey":
            suggest = "subscription_usage_grouping_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOrbConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOrbConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOrbConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 source_type: str,
                 start_date: str,
                 lookback_window_days: Optional[int] = None,
                 numeric_event_properties_keys: Optional[Sequence[str]] = None,
                 plan_id: Optional[str] = None,
                 string_event_properties_keys: Optional[Sequence[str]] = None,
                 subscription_usage_grouping_key: Optional[str] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if lookback_window_days is not None:
            pulumi.set(__self__, "lookback_window_days", lookback_window_days)
        if numeric_event_properties_keys is not None:
            pulumi.set(__self__, "numeric_event_properties_keys", numeric_event_properties_keys)
        if plan_id is not None:
            pulumi.set(__self__, "plan_id", plan_id)
        if string_event_properties_keys is not None:
            pulumi.set(__self__, "string_event_properties_keys", string_event_properties_keys)
        if subscription_usage_grouping_key is not None:
            pulumi.set(__self__, "subscription_usage_grouping_key", subscription_usage_grouping_key)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="lookbackWindowDays")
    def lookback_window_days(self) -> Optional[int]:
        return pulumi.get(self, "lookback_window_days")

    @property
    @pulumi.getter(name="numericEventPropertiesKeys")
    def numeric_event_properties_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "numeric_event_properties_keys")

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> Optional[str]:
        return pulumi.get(self, "plan_id")

    @property
    @pulumi.getter(name="stringEventPropertiesKeys")
    def string_event_properties_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "string_event_properties_keys")

    @property
    @pulumi.getter(name="subscriptionUsageGroupingKey")
    def subscription_usage_grouping_key(self) -> Optional[str]:
        return pulumi.get(self, "subscription_usage_grouping_key")


@pulumi.output_type
class SourceOrbitConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiToken":
            suggest = "api_token"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOrbitConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOrbitConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOrbitConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token: str,
                 source_type: str,
                 workspace: str,
                 start_date: Optional[str] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "workspace", workspace)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def workspace(self) -> str:
        return pulumi.get(self, "workspace")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceOutbrainAmplifyConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "endDate":
            suggest = "end_date"
        elif key == "geoLocationBreakdown":
            suggest = "geo_location_breakdown"
        elif key == "reportGranularity":
            suggest = "report_granularity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOutbrainAmplifyConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOutbrainAmplifyConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOutbrainAmplifyConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials: 'outputs.SourceOutbrainAmplifyConfigurationCredentials',
                 source_type: str,
                 start_date: str,
                 end_date: Optional[str] = None,
                 geo_location_breakdown: Optional[str] = None,
                 report_granularity: Optional[str] = None):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if geo_location_breakdown is not None:
            pulumi.set(__self__, "geo_location_breakdown", geo_location_breakdown)
        if report_granularity is not None:
            pulumi.set(__self__, "report_granularity", report_granularity)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.SourceOutbrainAmplifyConfigurationCredentials':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="geoLocationBreakdown")
    def geo_location_breakdown(self) -> Optional[str]:
        return pulumi.get(self, "geo_location_breakdown")

    @property
    @pulumi.getter(name="reportGranularity")
    def report_granularity(self) -> Optional[str]:
        return pulumi.get(self, "report_granularity")


@pulumi.output_type
class SourceOutbrainAmplifyConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceOutbrainAmplifyAuthenticationMethodAccessToken":
            suggest = "source_outbrain_amplify_authentication_method_access_token"
        elif key == "sourceOutbrainAmplifyAuthenticationMethodUsernamePassword":
            suggest = "source_outbrain_amplify_authentication_method_username_password"
        elif key == "sourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken":
            suggest = "source_outbrain_amplify_update_authentication_method_access_token"
        elif key == "sourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword":
            suggest = "source_outbrain_amplify_update_authentication_method_username_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOutbrainAmplifyConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOutbrainAmplifyConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOutbrainAmplifyConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_outbrain_amplify_authentication_method_access_token: Optional['outputs.SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodAccessToken'] = None,
                 source_outbrain_amplify_authentication_method_username_password: Optional['outputs.SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodUsernamePassword'] = None,
                 source_outbrain_amplify_update_authentication_method_access_token: Optional['outputs.SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken'] = None,
                 source_outbrain_amplify_update_authentication_method_username_password: Optional['outputs.SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword'] = None):
        if source_outbrain_amplify_authentication_method_access_token is not None:
            pulumi.set(__self__, "source_outbrain_amplify_authentication_method_access_token", source_outbrain_amplify_authentication_method_access_token)
        if source_outbrain_amplify_authentication_method_username_password is not None:
            pulumi.set(__self__, "source_outbrain_amplify_authentication_method_username_password", source_outbrain_amplify_authentication_method_username_password)
        if source_outbrain_amplify_update_authentication_method_access_token is not None:
            pulumi.set(__self__, "source_outbrain_amplify_update_authentication_method_access_token", source_outbrain_amplify_update_authentication_method_access_token)
        if source_outbrain_amplify_update_authentication_method_username_password is not None:
            pulumi.set(__self__, "source_outbrain_amplify_update_authentication_method_username_password", source_outbrain_amplify_update_authentication_method_username_password)

    @property
    @pulumi.getter(name="sourceOutbrainAmplifyAuthenticationMethodAccessToken")
    def source_outbrain_amplify_authentication_method_access_token(self) -> Optional['outputs.SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodAccessToken']:
        return pulumi.get(self, "source_outbrain_amplify_authentication_method_access_token")

    @property
    @pulumi.getter(name="sourceOutbrainAmplifyAuthenticationMethodUsernamePassword")
    def source_outbrain_amplify_authentication_method_username_password(self) -> Optional['outputs.SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodUsernamePassword']:
        return pulumi.get(self, "source_outbrain_amplify_authentication_method_username_password")

    @property
    @pulumi.getter(name="sourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken")
    def source_outbrain_amplify_update_authentication_method_access_token(self) -> Optional['outputs.SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken']:
        return pulumi.get(self, "source_outbrain_amplify_update_authentication_method_access_token")

    @property
    @pulumi.getter(name="sourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword")
    def source_outbrain_amplify_update_authentication_method_username_password(self) -> Optional['outputs.SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword']:
        return pulumi.get(self, "source_outbrain_amplify_update_authentication_method_username_password")


@pulumi.output_type
class SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodAccessToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodAccessToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodAccessToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodAccessToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 type: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodUsernamePassword(dict):
    def __init__(__self__, *,
                 password: str,
                 type: str,
                 username: str):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 type: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword(dict):
    def __init__(__self__, *,
                 password: str,
                 type: str,
                 username: str):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class SourceOutreachConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "redirectUri":
            suggest = "redirect_uri"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOutreachConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOutreachConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOutreachConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 redirect_uri: str,
                 refresh_token: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "redirect_uri", redirect_uri)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="redirectUri")
    def redirect_uri(self) -> str:
        return pulumi.get(self, "redirect_uri")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourcePaypalTransactionConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "isSandbox":
            suggest = "is_sandbox"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "refreshToken":
            suggest = "refresh_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePaypalTransactionConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePaypalTransactionConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePaypalTransactionConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 is_sandbox: bool,
                 source_type: str,
                 start_date: str,
                 refresh_token: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "is_sandbox", is_sandbox)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="isSandbox")
    def is_sandbox(self) -> bool:
        return pulumi.get(self, "is_sandbox")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[str]:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class SourcePaystackConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretKey":
            suggest = "secret_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "lookbackWindowDays":
            suggest = "lookback_window_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePaystackConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePaystackConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePaystackConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secret_key: str,
                 source_type: str,
                 start_date: str,
                 lookback_window_days: Optional[int] = None):
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if lookback_window_days is not None:
            pulumi.set(__self__, "lookback_window_days", lookback_window_days)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="lookbackWindowDays")
    def lookback_window_days(self) -> Optional[int]:
        return pulumi.get(self, "lookback_window_days")


@pulumi.output_type
class SourcePendoConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePendoConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePendoConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePendoConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourcePersistiqConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePersistiqConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePersistiqConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePersistiqConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourcePexelsApiConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePexelsApiConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePexelsApiConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePexelsApiConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 query: str,
                 source_type: str,
                 color: Optional[str] = None,
                 locale: Optional[str] = None,
                 orientation: Optional[str] = None,
                 size: Optional[str] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "source_type", source_type)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if locale is not None:
            pulumi.set(__self__, "locale", locale)
        if orientation is not None:
            pulumi.set(__self__, "orientation", orientation)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def locale(self) -> Optional[str]:
        return pulumi.get(self, "locale")

    @property
    @pulumi.getter
    def orientation(self) -> Optional[str]:
        return pulumi.get(self, "orientation")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        return pulumi.get(self, "size")


@pulumi.output_type
class SourcePinterestConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePinterestConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePinterestConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePinterestConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 start_date: str,
                 credentials: Optional['outputs.SourcePinterestConfigurationCredentials'] = None,
                 statuses: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if statuses is not None:
            pulumi.set(__self__, "statuses", statuses)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourcePinterestConfigurationCredentials']:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "statuses")


@pulumi.output_type
class SourcePinterestConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourcePinterestAuthorizationMethodAccessToken":
            suggest = "source_pinterest_authorization_method_access_token"
        elif key == "sourcePinterestAuthorizationMethodOAuth20":
            suggest = "source_pinterest_authorization_method_o_auth20"
        elif key == "sourcePinterestUpdateAuthorizationMethodAccessToken":
            suggest = "source_pinterest_update_authorization_method_access_token"
        elif key == "sourcePinterestUpdateAuthorizationMethodOAuth20":
            suggest = "source_pinterest_update_authorization_method_o_auth20"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePinterestConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePinterestConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePinterestConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_pinterest_authorization_method_access_token: Optional['outputs.SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodAccessToken'] = None,
                 source_pinterest_authorization_method_o_auth20: Optional['outputs.SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodOAuth20'] = None,
                 source_pinterest_update_authorization_method_access_token: Optional['outputs.SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodAccessToken'] = None,
                 source_pinterest_update_authorization_method_o_auth20: Optional['outputs.SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodOAuth20'] = None):
        if source_pinterest_authorization_method_access_token is not None:
            pulumi.set(__self__, "source_pinterest_authorization_method_access_token", source_pinterest_authorization_method_access_token)
        if source_pinterest_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_pinterest_authorization_method_o_auth20", source_pinterest_authorization_method_o_auth20)
        if source_pinterest_update_authorization_method_access_token is not None:
            pulumi.set(__self__, "source_pinterest_update_authorization_method_access_token", source_pinterest_update_authorization_method_access_token)
        if source_pinterest_update_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_pinterest_update_authorization_method_o_auth20", source_pinterest_update_authorization_method_o_auth20)

    @property
    @pulumi.getter(name="sourcePinterestAuthorizationMethodAccessToken")
    def source_pinterest_authorization_method_access_token(self) -> Optional['outputs.SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodAccessToken']:
        return pulumi.get(self, "source_pinterest_authorization_method_access_token")

    @property
    @pulumi.getter(name="sourcePinterestAuthorizationMethodOAuth20")
    def source_pinterest_authorization_method_o_auth20(self) -> Optional['outputs.SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodOAuth20']:
        return pulumi.get(self, "source_pinterest_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourcePinterestUpdateAuthorizationMethodAccessToken")
    def source_pinterest_update_authorization_method_access_token(self) -> Optional['outputs.SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodAccessToken']:
        return pulumi.get(self, "source_pinterest_update_authorization_method_access_token")

    @property
    @pulumi.getter(name="sourcePinterestUpdateAuthorizationMethodOAuth20")
    def source_pinterest_update_authorization_method_o_auth20(self) -> Optional['outputs.SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodOAuth20']:
        return pulumi.get(self, "source_pinterest_update_authorization_method_o_auth20")


@pulumi.output_type
class SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodAccessToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "authMethod":
            suggest = "auth_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodAccessToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodAccessToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodAccessToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 auth_method: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")


@pulumi.output_type
class SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authMethod":
            suggest = "auth_method"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_method: str,
                 refresh_token: str,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None):
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodAccessToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "authMethod":
            suggest = "auth_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodAccessToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodAccessToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodAccessToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 auth_method: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")


@pulumi.output_type
class SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authMethod":
            suggest = "auth_method"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_method: str,
                 refresh_token: str,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None):
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class SourcePipedriveConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "replicationStartDate":
            suggest = "replication_start_date"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePipedriveConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePipedriveConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePipedriveConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 replication_start_date: str,
                 source_type: str,
                 authorization: Optional['outputs.SourcePipedriveConfigurationAuthorization'] = None):
        pulumi.set(__self__, "replication_start_date", replication_start_date)
        pulumi.set(__self__, "source_type", source_type)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)

    @property
    @pulumi.getter(name="replicationStartDate")
    def replication_start_date(self) -> str:
        return pulumi.get(self, "replication_start_date")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def authorization(self) -> Optional['outputs.SourcePipedriveConfigurationAuthorization']:
        return pulumi.get(self, "authorization")


@pulumi.output_type
class SourcePipedriveConfigurationAuthorization(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiToken":
            suggest = "api_token"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePipedriveConfigurationAuthorization. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePipedriveConfigurationAuthorization.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePipedriveConfigurationAuthorization.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token: str,
                 auth_type: str):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourcePocketConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "consumerKey":
            suggest = "consumer_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "contentType":
            suggest = "content_type"
        elif key == "detailType":
            suggest = "detail_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePocketConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePocketConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePocketConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 consumer_key: str,
                 source_type: str,
                 content_type: Optional[str] = None,
                 detail_type: Optional[str] = None,
                 domain: Optional[str] = None,
                 favorite: Optional[bool] = None,
                 search: Optional[str] = None,
                 since: Optional[str] = None,
                 sort: Optional[str] = None,
                 state: Optional[str] = None,
                 tag: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "consumer_key", consumer_key)
        pulumi.set(__self__, "source_type", source_type)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if detail_type is not None:
            pulumi.set(__self__, "detail_type", detail_type)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if favorite is not None:
            pulumi.set(__self__, "favorite", favorite)
        if search is not None:
            pulumi.set(__self__, "search", search)
        if since is not None:
            pulumi.set(__self__, "since", since)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="consumerKey")
    def consumer_key(self) -> str:
        return pulumi.get(self, "consumer_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="detailType")
    def detail_type(self) -> Optional[str]:
        return pulumi.get(self, "detail_type")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def favorite(self) -> Optional[bool]:
        return pulumi.get(self, "favorite")

    @property
    @pulumi.getter
    def search(self) -> Optional[str]:
        return pulumi.get(self, "search")

    @property
    @pulumi.getter
    def since(self) -> Optional[str]:
        return pulumi.get(self, "since")

    @property
    @pulumi.getter
    def sort(self) -> Optional[str]:
        return pulumi.get(self, "sort")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")


@pulumi.output_type
class SourcePokeapiConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pokemonName":
            suggest = "pokemon_name"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePokeapiConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePokeapiConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePokeapiConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pokemon_name: str,
                 source_type: str):
        pulumi.set(__self__, "pokemon_name", pokemon_name)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="pokemonName")
    def pokemon_name(self) -> str:
        return pulumi.get(self, "pokemon_name")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourcePolygonStockApiConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "endDate":
            suggest = "end_date"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "stocksTicker":
            suggest = "stocks_ticker"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePolygonStockApiConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePolygonStockApiConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePolygonStockApiConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 end_date: str,
                 multiplier: int,
                 source_type: str,
                 start_date: str,
                 stocks_ticker: str,
                 timespan: str,
                 adjusted: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort: Optional[str] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "multiplier", multiplier)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "stocks_ticker", stocks_ticker)
        pulumi.set(__self__, "timespan", timespan)
        if adjusted is not None:
            pulumi.set(__self__, "adjusted", adjusted)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter
    def multiplier(self) -> int:
        return pulumi.get(self, "multiplier")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="stocksTicker")
    def stocks_ticker(self) -> str:
        return pulumi.get(self, "stocks_ticker")

    @property
    @pulumi.getter
    def timespan(self) -> str:
        return pulumi.get(self, "timespan")

    @property
    @pulumi.getter
    def adjusted(self) -> Optional[str]:
        return pulumi.get(self, "adjusted")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional[str]:
        return pulumi.get(self, "sort")


@pulumi.output_type
class SourcePostgresConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "jdbcUrlParams":
            suggest = "jdbc_url_params"
        elif key == "replicationMethod":
            suggest = "replication_method"
        elif key == "sslMode":
            suggest = "ssl_mode"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePostgresConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePostgresConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePostgresConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: str,
                 host: str,
                 port: int,
                 source_type: str,
                 username: str,
                 jdbc_url_params: Optional[str] = None,
                 password: Optional[str] = None,
                 replication_method: Optional['outputs.SourcePostgresConfigurationReplicationMethod'] = None,
                 schemas: Optional[Sequence[str]] = None,
                 ssl_mode: Optional['outputs.SourcePostgresConfigurationSslMode'] = None,
                 tunnel_method: Optional['outputs.SourcePostgresConfigurationTunnelMethod'] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "username", username)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if replication_method is not None:
            pulumi.set(__self__, "replication_method", replication_method)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if ssl_mode is not None:
            pulumi.set(__self__, "ssl_mode", ssl_mode)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[str]:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="replicationMethod")
    def replication_method(self) -> Optional['outputs.SourcePostgresConfigurationReplicationMethod']:
        return pulumi.get(self, "replication_method")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional['outputs.SourcePostgresConfigurationSslMode']:
        return pulumi.get(self, "ssl_mode")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional['outputs.SourcePostgresConfigurationTunnelMethod']:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class SourcePostgresConfigurationReplicationMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourcePostgresReplicationMethodLogicalReplicationCdc":
            suggest = "source_postgres_replication_method_logical_replication_cdc"
        elif key == "sourcePostgresReplicationMethodStandard":
            suggest = "source_postgres_replication_method_standard"
        elif key == "sourcePostgresReplicationMethodStandardXmin":
            suggest = "source_postgres_replication_method_standard_xmin"
        elif key == "sourcePostgresUpdateReplicationMethodLogicalReplicationCdc":
            suggest = "source_postgres_update_replication_method_logical_replication_cdc"
        elif key == "sourcePostgresUpdateReplicationMethodStandard":
            suggest = "source_postgres_update_replication_method_standard"
        elif key == "sourcePostgresUpdateReplicationMethodStandardXmin":
            suggest = "source_postgres_update_replication_method_standard_xmin"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePostgresConfigurationReplicationMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePostgresConfigurationReplicationMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePostgresConfigurationReplicationMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_postgres_replication_method_logical_replication_cdc: Optional['outputs.SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodLogicalReplicationCdc'] = None,
                 source_postgres_replication_method_standard: Optional['outputs.SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandard'] = None,
                 source_postgres_replication_method_standard_xmin: Optional['outputs.SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardXmin'] = None,
                 source_postgres_update_replication_method_logical_replication_cdc: Optional['outputs.SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodLogicalReplicationCdc'] = None,
                 source_postgres_update_replication_method_standard: Optional['outputs.SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandard'] = None,
                 source_postgres_update_replication_method_standard_xmin: Optional['outputs.SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardXmin'] = None):
        if source_postgres_replication_method_logical_replication_cdc is not None:
            pulumi.set(__self__, "source_postgres_replication_method_logical_replication_cdc", source_postgres_replication_method_logical_replication_cdc)
        if source_postgres_replication_method_standard is not None:
            pulumi.set(__self__, "source_postgres_replication_method_standard", source_postgres_replication_method_standard)
        if source_postgres_replication_method_standard_xmin is not None:
            pulumi.set(__self__, "source_postgres_replication_method_standard_xmin", source_postgres_replication_method_standard_xmin)
        if source_postgres_update_replication_method_logical_replication_cdc is not None:
            pulumi.set(__self__, "source_postgres_update_replication_method_logical_replication_cdc", source_postgres_update_replication_method_logical_replication_cdc)
        if source_postgres_update_replication_method_standard is not None:
            pulumi.set(__self__, "source_postgres_update_replication_method_standard", source_postgres_update_replication_method_standard)
        if source_postgres_update_replication_method_standard_xmin is not None:
            pulumi.set(__self__, "source_postgres_update_replication_method_standard_xmin", source_postgres_update_replication_method_standard_xmin)

    @property
    @pulumi.getter(name="sourcePostgresReplicationMethodLogicalReplicationCdc")
    def source_postgres_replication_method_logical_replication_cdc(self) -> Optional['outputs.SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodLogicalReplicationCdc']:
        return pulumi.get(self, "source_postgres_replication_method_logical_replication_cdc")

    @property
    @pulumi.getter(name="sourcePostgresReplicationMethodStandard")
    def source_postgres_replication_method_standard(self) -> Optional['outputs.SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandard']:
        return pulumi.get(self, "source_postgres_replication_method_standard")

    @property
    @pulumi.getter(name="sourcePostgresReplicationMethodStandardXmin")
    def source_postgres_replication_method_standard_xmin(self) -> Optional['outputs.SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardXmin']:
        return pulumi.get(self, "source_postgres_replication_method_standard_xmin")

    @property
    @pulumi.getter(name="sourcePostgresUpdateReplicationMethodLogicalReplicationCdc")
    def source_postgres_update_replication_method_logical_replication_cdc(self) -> Optional['outputs.SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodLogicalReplicationCdc']:
        return pulumi.get(self, "source_postgres_update_replication_method_logical_replication_cdc")

    @property
    @pulumi.getter(name="sourcePostgresUpdateReplicationMethodStandard")
    def source_postgres_update_replication_method_standard(self) -> Optional['outputs.SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandard']:
        return pulumi.get(self, "source_postgres_update_replication_method_standard")

    @property
    @pulumi.getter(name="sourcePostgresUpdateReplicationMethodStandardXmin")
    def source_postgres_update_replication_method_standard_xmin(self) -> Optional['outputs.SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardXmin']:
        return pulumi.get(self, "source_postgres_update_replication_method_standard_xmin")


@pulumi.output_type
class SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodLogicalReplicationCdc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "replicationSlot":
            suggest = "replication_slot"
        elif key == "additionalProperties":
            suggest = "additional_properties"
        elif key == "initialWaitingSeconds":
            suggest = "initial_waiting_seconds"
        elif key == "lsnCommitBehaviour":
            suggest = "lsn_commit_behaviour"
        elif key == "queueSize":
            suggest = "queue_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodLogicalReplicationCdc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodLogicalReplicationCdc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodLogicalReplicationCdc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 method: str,
                 publication: str,
                 replication_slot: str,
                 additional_properties: Optional[str] = None,
                 initial_waiting_seconds: Optional[int] = None,
                 lsn_commit_behaviour: Optional[str] = None,
                 plugin: Optional[str] = None,
                 queue_size: Optional[int] = None):
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "publication", publication)
        pulumi.set(__self__, "replication_slot", replication_slot)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if initial_waiting_seconds is not None:
            pulumi.set(__self__, "initial_waiting_seconds", initial_waiting_seconds)
        if lsn_commit_behaviour is not None:
            pulumi.set(__self__, "lsn_commit_behaviour", lsn_commit_behaviour)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if queue_size is not None:
            pulumi.set(__self__, "queue_size", queue_size)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def publication(self) -> str:
        return pulumi.get(self, "publication")

    @property
    @pulumi.getter(name="replicationSlot")
    def replication_slot(self) -> str:
        return pulumi.get(self, "replication_slot")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter(name="initialWaitingSeconds")
    def initial_waiting_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_waiting_seconds")

    @property
    @pulumi.getter(name="lsnCommitBehaviour")
    def lsn_commit_behaviour(self) -> Optional[str]:
        return pulumi.get(self, "lsn_commit_behaviour")

    @property
    @pulumi.getter
    def plugin(self) -> Optional[str]:
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter(name="queueSize")
    def queue_size(self) -> Optional[int]:
        return pulumi.get(self, "queue_size")


@pulumi.output_type
class SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandard(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardXmin(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodLogicalReplicationCdc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "replicationSlot":
            suggest = "replication_slot"
        elif key == "additionalProperties":
            suggest = "additional_properties"
        elif key == "initialWaitingSeconds":
            suggest = "initial_waiting_seconds"
        elif key == "lsnCommitBehaviour":
            suggest = "lsn_commit_behaviour"
        elif key == "queueSize":
            suggest = "queue_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodLogicalReplicationCdc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodLogicalReplicationCdc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodLogicalReplicationCdc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 method: str,
                 publication: str,
                 replication_slot: str,
                 additional_properties: Optional[str] = None,
                 initial_waiting_seconds: Optional[int] = None,
                 lsn_commit_behaviour: Optional[str] = None,
                 plugin: Optional[str] = None,
                 queue_size: Optional[int] = None):
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "publication", publication)
        pulumi.set(__self__, "replication_slot", replication_slot)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if initial_waiting_seconds is not None:
            pulumi.set(__self__, "initial_waiting_seconds", initial_waiting_seconds)
        if lsn_commit_behaviour is not None:
            pulumi.set(__self__, "lsn_commit_behaviour", lsn_commit_behaviour)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if queue_size is not None:
            pulumi.set(__self__, "queue_size", queue_size)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def publication(self) -> str:
        return pulumi.get(self, "publication")

    @property
    @pulumi.getter(name="replicationSlot")
    def replication_slot(self) -> str:
        return pulumi.get(self, "replication_slot")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter(name="initialWaitingSeconds")
    def initial_waiting_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_waiting_seconds")

    @property
    @pulumi.getter(name="lsnCommitBehaviour")
    def lsn_commit_behaviour(self) -> Optional[str]:
        return pulumi.get(self, "lsn_commit_behaviour")

    @property
    @pulumi.getter
    def plugin(self) -> Optional[str]:
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter(name="queueSize")
    def queue_size(self) -> Optional[int]:
        return pulumi.get(self, "queue_size")


@pulumi.output_type
class SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandard(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardXmin(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class SourcePostgresConfigurationSslMode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourcePostgresSslModesAllow":
            suggest = "source_postgres_ssl_modes_allow"
        elif key == "sourcePostgresSslModesDisable":
            suggest = "source_postgres_ssl_modes_disable"
        elif key == "sourcePostgresSslModesPrefer":
            suggest = "source_postgres_ssl_modes_prefer"
        elif key == "sourcePostgresSslModesRequire":
            suggest = "source_postgres_ssl_modes_require"
        elif key == "sourcePostgresSslModesVerifyCa":
            suggest = "source_postgres_ssl_modes_verify_ca"
        elif key == "sourcePostgresSslModesVerifyFull":
            suggest = "source_postgres_ssl_modes_verify_full"
        elif key == "sourcePostgresUpdateSslModesAllow":
            suggest = "source_postgres_update_ssl_modes_allow"
        elif key == "sourcePostgresUpdateSslModesDisable":
            suggest = "source_postgres_update_ssl_modes_disable"
        elif key == "sourcePostgresUpdateSslModesPrefer":
            suggest = "source_postgres_update_ssl_modes_prefer"
        elif key == "sourcePostgresUpdateSslModesRequire":
            suggest = "source_postgres_update_ssl_modes_require"
        elif key == "sourcePostgresUpdateSslModesVerifyCa":
            suggest = "source_postgres_update_ssl_modes_verify_ca"
        elif key == "sourcePostgresUpdateSslModesVerifyFull":
            suggest = "source_postgres_update_ssl_modes_verify_full"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePostgresConfigurationSslMode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePostgresConfigurationSslMode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePostgresConfigurationSslMode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_postgres_ssl_modes_allow: Optional['outputs.SourcePostgresConfigurationSslModeSourcePostgresSslModesAllow'] = None,
                 source_postgres_ssl_modes_disable: Optional['outputs.SourcePostgresConfigurationSslModeSourcePostgresSslModesDisable'] = None,
                 source_postgres_ssl_modes_prefer: Optional['outputs.SourcePostgresConfigurationSslModeSourcePostgresSslModesPrefer'] = None,
                 source_postgres_ssl_modes_require: Optional['outputs.SourcePostgresConfigurationSslModeSourcePostgresSslModesRequire'] = None,
                 source_postgres_ssl_modes_verify_ca: Optional['outputs.SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyCa'] = None,
                 source_postgres_ssl_modes_verify_full: Optional['outputs.SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyFull'] = None,
                 source_postgres_update_ssl_modes_allow: Optional['outputs.SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesAllow'] = None,
                 source_postgres_update_ssl_modes_disable: Optional['outputs.SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesDisable'] = None,
                 source_postgres_update_ssl_modes_prefer: Optional['outputs.SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesPrefer'] = None,
                 source_postgres_update_ssl_modes_require: Optional['outputs.SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesRequire'] = None,
                 source_postgres_update_ssl_modes_verify_ca: Optional['outputs.SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyCa'] = None,
                 source_postgres_update_ssl_modes_verify_full: Optional['outputs.SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyFull'] = None):
        if source_postgres_ssl_modes_allow is not None:
            pulumi.set(__self__, "source_postgres_ssl_modes_allow", source_postgres_ssl_modes_allow)
        if source_postgres_ssl_modes_disable is not None:
            pulumi.set(__self__, "source_postgres_ssl_modes_disable", source_postgres_ssl_modes_disable)
        if source_postgres_ssl_modes_prefer is not None:
            pulumi.set(__self__, "source_postgres_ssl_modes_prefer", source_postgres_ssl_modes_prefer)
        if source_postgres_ssl_modes_require is not None:
            pulumi.set(__self__, "source_postgres_ssl_modes_require", source_postgres_ssl_modes_require)
        if source_postgres_ssl_modes_verify_ca is not None:
            pulumi.set(__self__, "source_postgres_ssl_modes_verify_ca", source_postgres_ssl_modes_verify_ca)
        if source_postgres_ssl_modes_verify_full is not None:
            pulumi.set(__self__, "source_postgres_ssl_modes_verify_full", source_postgres_ssl_modes_verify_full)
        if source_postgres_update_ssl_modes_allow is not None:
            pulumi.set(__self__, "source_postgres_update_ssl_modes_allow", source_postgres_update_ssl_modes_allow)
        if source_postgres_update_ssl_modes_disable is not None:
            pulumi.set(__self__, "source_postgres_update_ssl_modes_disable", source_postgres_update_ssl_modes_disable)
        if source_postgres_update_ssl_modes_prefer is not None:
            pulumi.set(__self__, "source_postgres_update_ssl_modes_prefer", source_postgres_update_ssl_modes_prefer)
        if source_postgres_update_ssl_modes_require is not None:
            pulumi.set(__self__, "source_postgres_update_ssl_modes_require", source_postgres_update_ssl_modes_require)
        if source_postgres_update_ssl_modes_verify_ca is not None:
            pulumi.set(__self__, "source_postgres_update_ssl_modes_verify_ca", source_postgres_update_ssl_modes_verify_ca)
        if source_postgres_update_ssl_modes_verify_full is not None:
            pulumi.set(__self__, "source_postgres_update_ssl_modes_verify_full", source_postgres_update_ssl_modes_verify_full)

    @property
    @pulumi.getter(name="sourcePostgresSslModesAllow")
    def source_postgres_ssl_modes_allow(self) -> Optional['outputs.SourcePostgresConfigurationSslModeSourcePostgresSslModesAllow']:
        return pulumi.get(self, "source_postgres_ssl_modes_allow")

    @property
    @pulumi.getter(name="sourcePostgresSslModesDisable")
    def source_postgres_ssl_modes_disable(self) -> Optional['outputs.SourcePostgresConfigurationSslModeSourcePostgresSslModesDisable']:
        return pulumi.get(self, "source_postgres_ssl_modes_disable")

    @property
    @pulumi.getter(name="sourcePostgresSslModesPrefer")
    def source_postgres_ssl_modes_prefer(self) -> Optional['outputs.SourcePostgresConfigurationSslModeSourcePostgresSslModesPrefer']:
        return pulumi.get(self, "source_postgres_ssl_modes_prefer")

    @property
    @pulumi.getter(name="sourcePostgresSslModesRequire")
    def source_postgres_ssl_modes_require(self) -> Optional['outputs.SourcePostgresConfigurationSslModeSourcePostgresSslModesRequire']:
        return pulumi.get(self, "source_postgres_ssl_modes_require")

    @property
    @pulumi.getter(name="sourcePostgresSslModesVerifyCa")
    def source_postgres_ssl_modes_verify_ca(self) -> Optional['outputs.SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyCa']:
        return pulumi.get(self, "source_postgres_ssl_modes_verify_ca")

    @property
    @pulumi.getter(name="sourcePostgresSslModesVerifyFull")
    def source_postgres_ssl_modes_verify_full(self) -> Optional['outputs.SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyFull']:
        return pulumi.get(self, "source_postgres_ssl_modes_verify_full")

    @property
    @pulumi.getter(name="sourcePostgresUpdateSslModesAllow")
    def source_postgres_update_ssl_modes_allow(self) -> Optional['outputs.SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesAllow']:
        return pulumi.get(self, "source_postgres_update_ssl_modes_allow")

    @property
    @pulumi.getter(name="sourcePostgresUpdateSslModesDisable")
    def source_postgres_update_ssl_modes_disable(self) -> Optional['outputs.SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesDisable']:
        return pulumi.get(self, "source_postgres_update_ssl_modes_disable")

    @property
    @pulumi.getter(name="sourcePostgresUpdateSslModesPrefer")
    def source_postgres_update_ssl_modes_prefer(self) -> Optional['outputs.SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesPrefer']:
        return pulumi.get(self, "source_postgres_update_ssl_modes_prefer")

    @property
    @pulumi.getter(name="sourcePostgresUpdateSslModesRequire")
    def source_postgres_update_ssl_modes_require(self) -> Optional['outputs.SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesRequire']:
        return pulumi.get(self, "source_postgres_update_ssl_modes_require")

    @property
    @pulumi.getter(name="sourcePostgresUpdateSslModesVerifyCa")
    def source_postgres_update_ssl_modes_verify_ca(self) -> Optional['outputs.SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyCa']:
        return pulumi.get(self, "source_postgres_update_ssl_modes_verify_ca")

    @property
    @pulumi.getter(name="sourcePostgresUpdateSslModesVerifyFull")
    def source_postgres_update_ssl_modes_verify_full(self) -> Optional['outputs.SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyFull']:
        return pulumi.get(self, "source_postgres_update_ssl_modes_verify_full")


@pulumi.output_type
class SourcePostgresConfigurationSslModeSourcePostgresSslModesAllow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalProperties":
            suggest = "additional_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePostgresConfigurationSslModeSourcePostgresSslModesAllow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePostgresConfigurationSslModeSourcePostgresSslModesAllow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePostgresConfigurationSslModeSourcePostgresSslModesAllow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class SourcePostgresConfigurationSslModeSourcePostgresSslModesDisable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalProperties":
            suggest = "additional_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePostgresConfigurationSslModeSourcePostgresSslModesDisable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePostgresConfigurationSslModeSourcePostgresSslModesDisable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePostgresConfigurationSslModeSourcePostgresSslModesDisable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class SourcePostgresConfigurationSslModeSourcePostgresSslModesPrefer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalProperties":
            suggest = "additional_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePostgresConfigurationSslModeSourcePostgresSslModesPrefer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePostgresConfigurationSslModeSourcePostgresSslModesPrefer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePostgresConfigurationSslModeSourcePostgresSslModesPrefer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class SourcePostgresConfigurationSslModeSourcePostgresSslModesRequire(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalProperties":
            suggest = "additional_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePostgresConfigurationSslModeSourcePostgresSslModesRequire. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePostgresConfigurationSslModeSourcePostgresSslModesRequire.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePostgresConfigurationSslModeSourcePostgresSslModesRequire.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyCa(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"
        elif key == "additionalProperties":
            suggest = "additional_properties"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clientKey":
            suggest = "client_key"
        elif key == "clientKeyPassword":
            suggest = "client_key_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyCa. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyCa.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyCa.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: str,
                 mode: str,
                 additional_properties: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 client_key: Optional[str] = None,
                 client_key_password: Optional[str] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[str]:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[str]:
        return pulumi.get(self, "client_key_password")


@pulumi.output_type
class SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyFull(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"
        elif key == "additionalProperties":
            suggest = "additional_properties"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clientKey":
            suggest = "client_key"
        elif key == "clientKeyPassword":
            suggest = "client_key_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyFull. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyFull.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyFull.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: str,
                 mode: str,
                 additional_properties: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 client_key: Optional[str] = None,
                 client_key_password: Optional[str] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[str]:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[str]:
        return pulumi.get(self, "client_key_password")


@pulumi.output_type
class SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesAllow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalProperties":
            suggest = "additional_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesAllow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesAllow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesAllow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesDisable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalProperties":
            suggest = "additional_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesDisable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesDisable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesDisable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesPrefer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalProperties":
            suggest = "additional_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesPrefer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesPrefer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesPrefer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesRequire(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalProperties":
            suggest = "additional_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesRequire. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesRequire.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesRequire.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyCa(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"
        elif key == "additionalProperties":
            suggest = "additional_properties"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clientKey":
            suggest = "client_key"
        elif key == "clientKeyPassword":
            suggest = "client_key_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyCa. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyCa.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyCa.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: str,
                 mode: str,
                 additional_properties: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 client_key: Optional[str] = None,
                 client_key_password: Optional[str] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[str]:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[str]:
        return pulumi.get(self, "client_key_password")


@pulumi.output_type
class SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyFull(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"
        elif key == "additionalProperties":
            suggest = "additional_properties"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clientKey":
            suggest = "client_key"
        elif key == "clientKeyPassword":
            suggest = "client_key_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyFull. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyFull.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyFull.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: str,
                 mode: str,
                 additional_properties: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 client_key: Optional[str] = None,
                 client_key_password: Optional[str] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[str]:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[str]:
        return pulumi.get(self, "client_key_password")


@pulumi.output_type
class SourcePostgresConfigurationTunnelMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourcePostgresSshTunnelMethodNoTunnel":
            suggest = "source_postgres_ssh_tunnel_method_no_tunnel"
        elif key == "sourcePostgresSshTunnelMethodPasswordAuthentication":
            suggest = "source_postgres_ssh_tunnel_method_password_authentication"
        elif key == "sourcePostgresSshTunnelMethodSshKeyAuthentication":
            suggest = "source_postgres_ssh_tunnel_method_ssh_key_authentication"
        elif key == "sourcePostgresUpdateSshTunnelMethodNoTunnel":
            suggest = "source_postgres_update_ssh_tunnel_method_no_tunnel"
        elif key == "sourcePostgresUpdateSshTunnelMethodPasswordAuthentication":
            suggest = "source_postgres_update_ssh_tunnel_method_password_authentication"
        elif key == "sourcePostgresUpdateSshTunnelMethodSshKeyAuthentication":
            suggest = "source_postgres_update_ssh_tunnel_method_ssh_key_authentication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePostgresConfigurationTunnelMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePostgresConfigurationTunnelMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePostgresConfigurationTunnelMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_postgres_ssh_tunnel_method_no_tunnel: Optional['outputs.SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodNoTunnel'] = None,
                 source_postgres_ssh_tunnel_method_password_authentication: Optional['outputs.SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodPasswordAuthentication'] = None,
                 source_postgres_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodSshKeyAuthentication'] = None,
                 source_postgres_update_ssh_tunnel_method_no_tunnel: Optional['outputs.SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodNoTunnel'] = None,
                 source_postgres_update_ssh_tunnel_method_password_authentication: Optional['outputs.SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodPasswordAuthentication'] = None,
                 source_postgres_update_ssh_tunnel_method_ssh_key_authentication: Optional['outputs.SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodSshKeyAuthentication'] = None):
        if source_postgres_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "source_postgres_ssh_tunnel_method_no_tunnel", source_postgres_ssh_tunnel_method_no_tunnel)
        if source_postgres_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "source_postgres_ssh_tunnel_method_password_authentication", source_postgres_ssh_tunnel_method_password_authentication)
        if source_postgres_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "source_postgres_ssh_tunnel_method_ssh_key_authentication", source_postgres_ssh_tunnel_method_ssh_key_authentication)
        if source_postgres_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "source_postgres_update_ssh_tunnel_method_no_tunnel", source_postgres_update_ssh_tunnel_method_no_tunnel)
        if source_postgres_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "source_postgres_update_ssh_tunnel_method_password_authentication", source_postgres_update_ssh_tunnel_method_password_authentication)
        if source_postgres_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "source_postgres_update_ssh_tunnel_method_ssh_key_authentication", source_postgres_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="sourcePostgresSshTunnelMethodNoTunnel")
    def source_postgres_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "source_postgres_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="sourcePostgresSshTunnelMethodPasswordAuthentication")
    def source_postgres_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "source_postgres_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="sourcePostgresSshTunnelMethodSshKeyAuthentication")
    def source_postgres_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "source_postgres_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="sourcePostgresUpdateSshTunnelMethodNoTunnel")
    def source_postgres_update_ssh_tunnel_method_no_tunnel(self) -> Optional['outputs.SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodNoTunnel']:
        return pulumi.get(self, "source_postgres_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="sourcePostgresUpdateSshTunnelMethodPasswordAuthentication")
    def source_postgres_update_ssh_tunnel_method_password_authentication(self) -> Optional['outputs.SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodPasswordAuthentication']:
        return pulumi.get(self, "source_postgres_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="sourcePostgresUpdateSshTunnelMethodSshKeyAuthentication")
    def source_postgres_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional['outputs.SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodSshKeyAuthentication']:
        return pulumi.get(self, "source_postgres_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodNoTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelMethod":
            suggest = "tunnel_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodNoTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodNoTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"
        elif key == "tunnelUserPassword":
            suggest = "tunnel_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tunnelHost":
            suggest = "tunnel_host"
        elif key == "tunnelMethod":
            suggest = "tunnel_method"
        elif key == "tunnelPort":
            suggest = "tunnel_port"
        elif key == "tunnelUser":
            suggest = "tunnel_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class SourcePosthogConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "baseUrl":
            suggest = "base_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePosthogConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePosthogConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePosthogConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 source_type: str,
                 start_date: str,
                 base_url: Optional[str] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if base_url is not None:
            pulumi.set(__self__, "base_url", base_url)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> Optional[str]:
        return pulumi.get(self, "base_url")


@pulumi.output_type
class SourcePostmarkappConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "xPostmarkAccountToken":
            suggest = "x_postmark_account_token"
        elif key == "xPostmarkServerToken":
            suggest = "x_postmark_server_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePostmarkappConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePostmarkappConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePostmarkappConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 x_postmark_account_token: str,
                 x_postmark_server_token: str):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "x_postmark_account_token", x_postmark_account_token)
        pulumi.set(__self__, "x_postmark_server_token", x_postmark_server_token)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="xPostmarkAccountToken")
    def x_postmark_account_token(self) -> str:
        return pulumi.get(self, "x_postmark_account_token")

    @property
    @pulumi.getter(name="xPostmarkServerToken")
    def x_postmark_server_token(self) -> str:
        return pulumi.get(self, "x_postmark_server_token")


@pulumi.output_type
class SourcePrestashopConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePrestashopConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePrestashopConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePrestashopConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key: str,
                 source_type: str,
                 start_date: str,
                 url: str):
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class SourcePublicApisConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePublicApisConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePublicApisConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePublicApisConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str):
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourcePunkApiConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "brewedAfter":
            suggest = "brewed_after"
        elif key == "brewedBefore":
            suggest = "brewed_before"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePunkApiConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePunkApiConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePunkApiConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 brewed_after: str,
                 brewed_before: str,
                 source_type: str,
                 id: Optional[str] = None):
        pulumi.set(__self__, "brewed_after", brewed_after)
        pulumi.set(__self__, "brewed_before", brewed_before)
        pulumi.set(__self__, "source_type", source_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="brewedAfter")
    def brewed_after(self) -> str:
        return pulumi.get(self, "brewed_after")

    @property
    @pulumi.getter(name="brewedBefore")
    def brewed_before(self) -> str:
        return pulumi.get(self, "brewed_before")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class SourcePypiConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "projectName":
            suggest = "project_name"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourcePypiConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourcePypiConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourcePypiConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 project_name: str,
                 source_type: str,
                 version: Optional[str] = None):
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "source_type", source_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> str:
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class SourceQualarooConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "surveyIds":
            suggest = "survey_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceQualarooConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceQualarooConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceQualarooConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 source_type: str,
                 start_date: str,
                 token: str,
                 survey_ids: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "token", token)
        if survey_ids is not None:
            pulumi.set(__self__, "survey_ids", survey_ids)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def token(self) -> str:
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="surveyIds")
    def survey_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "survey_ids")


@pulumi.output_type
class SourceQuickbooksConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceQuickbooksConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceQuickbooksConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceQuickbooksConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials: 'outputs.SourceQuickbooksConfigurationCredentials',
                 sandbox: bool,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "sandbox", sandbox)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.SourceQuickbooksConfigurationCredentials':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def sandbox(self) -> bool:
        return pulumi.get(self, "sandbox")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceQuickbooksConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceQuickbooksAuthorizationMethodOAuth20":
            suggest = "source_quickbooks_authorization_method_o_auth20"
        elif key == "sourceQuickbooksUpdateAuthorizationMethodOAuth20":
            suggest = "source_quickbooks_update_authorization_method_o_auth20"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceQuickbooksConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceQuickbooksConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceQuickbooksConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_quickbooks_authorization_method_o_auth20: Optional['outputs.SourceQuickbooksConfigurationCredentialsSourceQuickbooksAuthorizationMethodOAuth20'] = None,
                 source_quickbooks_update_authorization_method_o_auth20: Optional['outputs.SourceQuickbooksConfigurationCredentialsSourceQuickbooksUpdateAuthorizationMethodOAuth20'] = None):
        if source_quickbooks_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_quickbooks_authorization_method_o_auth20", source_quickbooks_authorization_method_o_auth20)
        if source_quickbooks_update_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_quickbooks_update_authorization_method_o_auth20", source_quickbooks_update_authorization_method_o_auth20)

    @property
    @pulumi.getter(name="sourceQuickbooksAuthorizationMethodOAuth20")
    def source_quickbooks_authorization_method_o_auth20(self) -> Optional['outputs.SourceQuickbooksConfigurationCredentialsSourceQuickbooksAuthorizationMethodOAuth20']:
        return pulumi.get(self, "source_quickbooks_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourceQuickbooksUpdateAuthorizationMethodOAuth20")
    def source_quickbooks_update_authorization_method_o_auth20(self) -> Optional['outputs.SourceQuickbooksConfigurationCredentialsSourceQuickbooksUpdateAuthorizationMethodOAuth20']:
        return pulumi.get(self, "source_quickbooks_update_authorization_method_o_auth20")


@pulumi.output_type
class SourceQuickbooksConfigurationCredentialsSourceQuickbooksAuthorizationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "realmId":
            suggest = "realm_id"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "tokenExpiryDate":
            suggest = "token_expiry_date"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceQuickbooksConfigurationCredentialsSourceQuickbooksAuthorizationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceQuickbooksConfigurationCredentialsSourceQuickbooksAuthorizationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceQuickbooksConfigurationCredentialsSourceQuickbooksAuthorizationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 client_id: str,
                 client_secret: str,
                 realm_id: str,
                 refresh_token: str,
                 token_expiry_date: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "realm_id", realm_id)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="realmId")
    def realm_id(self) -> str:
        return pulumi.get(self, "realm_id")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> str:
        return pulumi.get(self, "token_expiry_date")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceQuickbooksConfigurationCredentialsSourceQuickbooksUpdateAuthorizationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "realmId":
            suggest = "realm_id"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "tokenExpiryDate":
            suggest = "token_expiry_date"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceQuickbooksConfigurationCredentialsSourceQuickbooksUpdateAuthorizationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceQuickbooksConfigurationCredentialsSourceQuickbooksUpdateAuthorizationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceQuickbooksConfigurationCredentialsSourceQuickbooksUpdateAuthorizationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 client_id: str,
                 client_secret: str,
                 realm_id: str,
                 refresh_token: str,
                 token_expiry_date: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "realm_id", realm_id)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="realmId")
    def realm_id(self) -> str:
        return pulumi.get(self, "realm_id")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> str:
        return pulumi.get(self, "token_expiry_date")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceRailzConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceRailzConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceRailzConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceRailzConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 secret_key: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceRechargeConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceRechargeConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceRechargeConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceRechargeConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceRecreationConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "queryCampsites":
            suggest = "query_campsites"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceRecreationConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceRecreationConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceRecreationConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apikey: str,
                 source_type: str,
                 query_campsites: Optional[str] = None):
        pulumi.set(__self__, "apikey", apikey)
        pulumi.set(__self__, "source_type", source_type)
        if query_campsites is not None:
            pulumi.set(__self__, "query_campsites", query_campsites)

    @property
    @pulumi.getter
    def apikey(self) -> str:
        return pulumi.get(self, "apikey")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="queryCampsites")
    def query_campsites(self) -> Optional[str]:
        return pulumi.get(self, "query_campsites")


@pulumi.output_type
class SourceRecruiteeConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "companyId":
            suggest = "company_id"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceRecruiteeConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceRecruiteeConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceRecruiteeConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 company_id: int,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "company_id", company_id)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="companyId")
    def company_id(self) -> int:
        return pulumi.get(self, "company_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceRecurlyConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "beginTime":
            suggest = "begin_time"
        elif key == "endTime":
            suggest = "end_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceRecurlyConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceRecurlyConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceRecurlyConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 source_type: str,
                 begin_time: Optional[str] = None,
                 end_time: Optional[str] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        if begin_time is not None:
            pulumi.set(__self__, "begin_time", begin_time)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> Optional[str]:
        return pulumi.get(self, "begin_time")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        return pulumi.get(self, "end_time")


@pulumi.output_type
class SourceRedshiftConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "jdbcUrlParams":
            suggest = "jdbc_url_params"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceRedshiftConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceRedshiftConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceRedshiftConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: str,
                 host: str,
                 password: str,
                 port: int,
                 source_type: str,
                 username: str,
                 jdbc_url_params: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "username", username)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[str]:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")


@pulumi.output_type
class SourceRetentlyConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceRetentlyConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceRetentlyConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceRetentlyConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials: Optional['outputs.SourceRetentlyConfigurationCredentials'] = None,
                 source_type: Optional[str] = None):
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourceRetentlyConfigurationCredentials']:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceRetentlyConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth":
            suggest = "source_retently_authentication_mechanism_authenticate_via_retently_o_auth"
        elif key == "sourceRetentlyAuthenticationMechanismAuthenticateWithApiToken":
            suggest = "source_retently_authentication_mechanism_authenticate_with_api_token"
        elif key == "sourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth":
            suggest = "source_retently_update_authentication_mechanism_authenticate_via_retently_o_auth"
        elif key == "sourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiToken":
            suggest = "source_retently_update_authentication_mechanism_authenticate_with_api_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceRetentlyConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceRetentlyConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceRetentlyConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_retently_authentication_mechanism_authenticate_via_retently_o_auth: Optional['outputs.SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth'] = None,
                 source_retently_authentication_mechanism_authenticate_with_api_token: Optional['outputs.SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateWithApiToken'] = None,
                 source_retently_update_authentication_mechanism_authenticate_via_retently_o_auth: Optional['outputs.SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth'] = None,
                 source_retently_update_authentication_mechanism_authenticate_with_api_token: Optional['outputs.SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiToken'] = None):
        if source_retently_authentication_mechanism_authenticate_via_retently_o_auth is not None:
            pulumi.set(__self__, "source_retently_authentication_mechanism_authenticate_via_retently_o_auth", source_retently_authentication_mechanism_authenticate_via_retently_o_auth)
        if source_retently_authentication_mechanism_authenticate_with_api_token is not None:
            pulumi.set(__self__, "source_retently_authentication_mechanism_authenticate_with_api_token", source_retently_authentication_mechanism_authenticate_with_api_token)
        if source_retently_update_authentication_mechanism_authenticate_via_retently_o_auth is not None:
            pulumi.set(__self__, "source_retently_update_authentication_mechanism_authenticate_via_retently_o_auth", source_retently_update_authentication_mechanism_authenticate_via_retently_o_auth)
        if source_retently_update_authentication_mechanism_authenticate_with_api_token is not None:
            pulumi.set(__self__, "source_retently_update_authentication_mechanism_authenticate_with_api_token", source_retently_update_authentication_mechanism_authenticate_with_api_token)

    @property
    @pulumi.getter(name="sourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth")
    def source_retently_authentication_mechanism_authenticate_via_retently_o_auth(self) -> Optional['outputs.SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth']:
        return pulumi.get(self, "source_retently_authentication_mechanism_authenticate_via_retently_o_auth")

    @property
    @pulumi.getter(name="sourceRetentlyAuthenticationMechanismAuthenticateWithApiToken")
    def source_retently_authentication_mechanism_authenticate_with_api_token(self) -> Optional['outputs.SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateWithApiToken']:
        return pulumi.get(self, "source_retently_authentication_mechanism_authenticate_with_api_token")

    @property
    @pulumi.getter(name="sourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth")
    def source_retently_update_authentication_mechanism_authenticate_via_retently_o_auth(self) -> Optional['outputs.SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth']:
        return pulumi.get(self, "source_retently_update_authentication_mechanism_authenticate_via_retently_o_auth")

    @property
    @pulumi.getter(name="sourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiToken")
    def source_retently_update_authentication_mechanism_authenticate_with_api_token(self) -> Optional['outputs.SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiToken']:
        return pulumi.get(self, "source_retently_update_authentication_mechanism_authenticate_with_api_token")


@pulumi.output_type
class SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "additionalProperties":
            suggest = "additional_properties"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 additional_properties: Optional[str] = None,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateWithApiToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "additionalProperties":
            suggest = "additional_properties"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateWithApiToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateWithApiToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateWithApiToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 additional_properties: Optional[str] = None,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "api_key", api_key)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "additionalProperties":
            suggest = "additional_properties"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 additional_properties: Optional[str] = None,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "additionalProperties":
            suggest = "additional_properties"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 additional_properties: Optional[str] = None,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "api_key", api_key)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceRkiCovidConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceRkiCovidConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceRkiCovidConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceRkiCovidConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceRssConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceRssConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceRssConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceRssConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 url: str):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class SourceS3Configuration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pathPattern":
            suggest = "path_pattern"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceS3Configuration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceS3Configuration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceS3Configuration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataset: str,
                 path_pattern: str,
                 provider: 'outputs.SourceS3ConfigurationProvider',
                 source_type: str,
                 format: Optional['outputs.SourceS3ConfigurationFormat'] = None,
                 schema: Optional[str] = None):
        pulumi.set(__self__, "dataset", dataset)
        pulumi.set(__self__, "path_pattern", path_pattern)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "source_type", source_type)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def dataset(self) -> str:
        return pulumi.get(self, "dataset")

    @property
    @pulumi.getter(name="pathPattern")
    def path_pattern(self) -> str:
        return pulumi.get(self, "path_pattern")

    @property
    @pulumi.getter
    def provider(self) -> 'outputs.SourceS3ConfigurationProvider':
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def format(self) -> Optional['outputs.SourceS3ConfigurationFormat']:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        return pulumi.get(self, "schema")


@pulumi.output_type
class SourceS3ConfigurationFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceS3FileFormatAvro":
            suggest = "source_s3_file_format_avro"
        elif key == "sourceS3FileFormatCsv":
            suggest = "source_s3_file_format_csv"
        elif key == "sourceS3FileFormatJsonl":
            suggest = "source_s3_file_format_jsonl"
        elif key == "sourceS3FileFormatParquet":
            suggest = "source_s3_file_format_parquet"
        elif key == "sourceS3UpdateFileFormatAvro":
            suggest = "source_s3_update_file_format_avro"
        elif key == "sourceS3UpdateFileFormatCsv":
            suggest = "source_s3_update_file_format_csv"
        elif key == "sourceS3UpdateFileFormatJsonl":
            suggest = "source_s3_update_file_format_jsonl"
        elif key == "sourceS3UpdateFileFormatParquet":
            suggest = "source_s3_update_file_format_parquet"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceS3ConfigurationFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceS3ConfigurationFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceS3ConfigurationFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_s3_file_format_avro: Optional['outputs.SourceS3ConfigurationFormatSourceS3FileFormatAvro'] = None,
                 source_s3_file_format_csv: Optional['outputs.SourceS3ConfigurationFormatSourceS3FileFormatCsv'] = None,
                 source_s3_file_format_jsonl: Optional['outputs.SourceS3ConfigurationFormatSourceS3FileFormatJsonl'] = None,
                 source_s3_file_format_parquet: Optional['outputs.SourceS3ConfigurationFormatSourceS3FileFormatParquet'] = None,
                 source_s3_update_file_format_avro: Optional['outputs.SourceS3ConfigurationFormatSourceS3UpdateFileFormatAvro'] = None,
                 source_s3_update_file_format_csv: Optional['outputs.SourceS3ConfigurationFormatSourceS3UpdateFileFormatCsv'] = None,
                 source_s3_update_file_format_jsonl: Optional['outputs.SourceS3ConfigurationFormatSourceS3UpdateFileFormatJsonl'] = None,
                 source_s3_update_file_format_parquet: Optional['outputs.SourceS3ConfigurationFormatSourceS3UpdateFileFormatParquet'] = None):
        if source_s3_file_format_avro is not None:
            pulumi.set(__self__, "source_s3_file_format_avro", source_s3_file_format_avro)
        if source_s3_file_format_csv is not None:
            pulumi.set(__self__, "source_s3_file_format_csv", source_s3_file_format_csv)
        if source_s3_file_format_jsonl is not None:
            pulumi.set(__self__, "source_s3_file_format_jsonl", source_s3_file_format_jsonl)
        if source_s3_file_format_parquet is not None:
            pulumi.set(__self__, "source_s3_file_format_parquet", source_s3_file_format_parquet)
        if source_s3_update_file_format_avro is not None:
            pulumi.set(__self__, "source_s3_update_file_format_avro", source_s3_update_file_format_avro)
        if source_s3_update_file_format_csv is not None:
            pulumi.set(__self__, "source_s3_update_file_format_csv", source_s3_update_file_format_csv)
        if source_s3_update_file_format_jsonl is not None:
            pulumi.set(__self__, "source_s3_update_file_format_jsonl", source_s3_update_file_format_jsonl)
        if source_s3_update_file_format_parquet is not None:
            pulumi.set(__self__, "source_s3_update_file_format_parquet", source_s3_update_file_format_parquet)

    @property
    @pulumi.getter(name="sourceS3FileFormatAvro")
    def source_s3_file_format_avro(self) -> Optional['outputs.SourceS3ConfigurationFormatSourceS3FileFormatAvro']:
        return pulumi.get(self, "source_s3_file_format_avro")

    @property
    @pulumi.getter(name="sourceS3FileFormatCsv")
    def source_s3_file_format_csv(self) -> Optional['outputs.SourceS3ConfigurationFormatSourceS3FileFormatCsv']:
        return pulumi.get(self, "source_s3_file_format_csv")

    @property
    @pulumi.getter(name="sourceS3FileFormatJsonl")
    def source_s3_file_format_jsonl(self) -> Optional['outputs.SourceS3ConfigurationFormatSourceS3FileFormatJsonl']:
        return pulumi.get(self, "source_s3_file_format_jsonl")

    @property
    @pulumi.getter(name="sourceS3FileFormatParquet")
    def source_s3_file_format_parquet(self) -> Optional['outputs.SourceS3ConfigurationFormatSourceS3FileFormatParquet']:
        return pulumi.get(self, "source_s3_file_format_parquet")

    @property
    @pulumi.getter(name="sourceS3UpdateFileFormatAvro")
    def source_s3_update_file_format_avro(self) -> Optional['outputs.SourceS3ConfigurationFormatSourceS3UpdateFileFormatAvro']:
        return pulumi.get(self, "source_s3_update_file_format_avro")

    @property
    @pulumi.getter(name="sourceS3UpdateFileFormatCsv")
    def source_s3_update_file_format_csv(self) -> Optional['outputs.SourceS3ConfigurationFormatSourceS3UpdateFileFormatCsv']:
        return pulumi.get(self, "source_s3_update_file_format_csv")

    @property
    @pulumi.getter(name="sourceS3UpdateFileFormatJsonl")
    def source_s3_update_file_format_jsonl(self) -> Optional['outputs.SourceS3ConfigurationFormatSourceS3UpdateFileFormatJsonl']:
        return pulumi.get(self, "source_s3_update_file_format_jsonl")

    @property
    @pulumi.getter(name="sourceS3UpdateFileFormatParquet")
    def source_s3_update_file_format_parquet(self) -> Optional['outputs.SourceS3ConfigurationFormatSourceS3UpdateFileFormatParquet']:
        return pulumi.get(self, "source_s3_update_file_format_parquet")


@pulumi.output_type
class SourceS3ConfigurationFormatSourceS3FileFormatAvro(dict):
    def __init__(__self__, *,
                 filetype: Optional[str] = None):
        if filetype is not None:
            pulumi.set(__self__, "filetype", filetype)

    @property
    @pulumi.getter
    def filetype(self) -> Optional[str]:
        return pulumi.get(self, "filetype")


@pulumi.output_type
class SourceS3ConfigurationFormatSourceS3FileFormatCsv(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalReaderOptions":
            suggest = "additional_reader_options"
        elif key == "advancedOptions":
            suggest = "advanced_options"
        elif key == "blockSize":
            suggest = "block_size"
        elif key == "doubleQuote":
            suggest = "double_quote"
        elif key == "escapeChar":
            suggest = "escape_char"
        elif key == "inferDatatypes":
            suggest = "infer_datatypes"
        elif key == "newlinesInValues":
            suggest = "newlines_in_values"
        elif key == "quoteChar":
            suggest = "quote_char"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceS3ConfigurationFormatSourceS3FileFormatCsv. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceS3ConfigurationFormatSourceS3FileFormatCsv.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceS3ConfigurationFormatSourceS3FileFormatCsv.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_reader_options: Optional[str] = None,
                 advanced_options: Optional[str] = None,
                 block_size: Optional[int] = None,
                 delimiter: Optional[str] = None,
                 double_quote: Optional[bool] = None,
                 encoding: Optional[str] = None,
                 escape_char: Optional[str] = None,
                 filetype: Optional[str] = None,
                 infer_datatypes: Optional[bool] = None,
                 newlines_in_values: Optional[bool] = None,
                 quote_char: Optional[str] = None):
        if additional_reader_options is not None:
            pulumi.set(__self__, "additional_reader_options", additional_reader_options)
        if advanced_options is not None:
            pulumi.set(__self__, "advanced_options", advanced_options)
        if block_size is not None:
            pulumi.set(__self__, "block_size", block_size)
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if double_quote is not None:
            pulumi.set(__self__, "double_quote", double_quote)
        if encoding is not None:
            pulumi.set(__self__, "encoding", encoding)
        if escape_char is not None:
            pulumi.set(__self__, "escape_char", escape_char)
        if filetype is not None:
            pulumi.set(__self__, "filetype", filetype)
        if infer_datatypes is not None:
            pulumi.set(__self__, "infer_datatypes", infer_datatypes)
        if newlines_in_values is not None:
            pulumi.set(__self__, "newlines_in_values", newlines_in_values)
        if quote_char is not None:
            pulumi.set(__self__, "quote_char", quote_char)

    @property
    @pulumi.getter(name="additionalReaderOptions")
    def additional_reader_options(self) -> Optional[str]:
        return pulumi.get(self, "additional_reader_options")

    @property
    @pulumi.getter(name="advancedOptions")
    def advanced_options(self) -> Optional[str]:
        return pulumi.get(self, "advanced_options")

    @property
    @pulumi.getter(name="blockSize")
    def block_size(self) -> Optional[int]:
        return pulumi.get(self, "block_size")

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[str]:
        return pulumi.get(self, "delimiter")

    @property
    @pulumi.getter(name="doubleQuote")
    def double_quote(self) -> Optional[bool]:
        return pulumi.get(self, "double_quote")

    @property
    @pulumi.getter
    def encoding(self) -> Optional[str]:
        return pulumi.get(self, "encoding")

    @property
    @pulumi.getter(name="escapeChar")
    def escape_char(self) -> Optional[str]:
        return pulumi.get(self, "escape_char")

    @property
    @pulumi.getter
    def filetype(self) -> Optional[str]:
        return pulumi.get(self, "filetype")

    @property
    @pulumi.getter(name="inferDatatypes")
    def infer_datatypes(self) -> Optional[bool]:
        return pulumi.get(self, "infer_datatypes")

    @property
    @pulumi.getter(name="newlinesInValues")
    def newlines_in_values(self) -> Optional[bool]:
        return pulumi.get(self, "newlines_in_values")

    @property
    @pulumi.getter(name="quoteChar")
    def quote_char(self) -> Optional[str]:
        return pulumi.get(self, "quote_char")


@pulumi.output_type
class SourceS3ConfigurationFormatSourceS3FileFormatJsonl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockSize":
            suggest = "block_size"
        elif key == "newlinesInValues":
            suggest = "newlines_in_values"
        elif key == "unexpectedFieldBehavior":
            suggest = "unexpected_field_behavior"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceS3ConfigurationFormatSourceS3FileFormatJsonl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceS3ConfigurationFormatSourceS3FileFormatJsonl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceS3ConfigurationFormatSourceS3FileFormatJsonl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_size: Optional[int] = None,
                 filetype: Optional[str] = None,
                 newlines_in_values: Optional[bool] = None,
                 unexpected_field_behavior: Optional[str] = None):
        if block_size is not None:
            pulumi.set(__self__, "block_size", block_size)
        if filetype is not None:
            pulumi.set(__self__, "filetype", filetype)
        if newlines_in_values is not None:
            pulumi.set(__self__, "newlines_in_values", newlines_in_values)
        if unexpected_field_behavior is not None:
            pulumi.set(__self__, "unexpected_field_behavior", unexpected_field_behavior)

    @property
    @pulumi.getter(name="blockSize")
    def block_size(self) -> Optional[int]:
        return pulumi.get(self, "block_size")

    @property
    @pulumi.getter
    def filetype(self) -> Optional[str]:
        return pulumi.get(self, "filetype")

    @property
    @pulumi.getter(name="newlinesInValues")
    def newlines_in_values(self) -> Optional[bool]:
        return pulumi.get(self, "newlines_in_values")

    @property
    @pulumi.getter(name="unexpectedFieldBehavior")
    def unexpected_field_behavior(self) -> Optional[str]:
        return pulumi.get(self, "unexpected_field_behavior")


@pulumi.output_type
class SourceS3ConfigurationFormatSourceS3FileFormatParquet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "batchSize":
            suggest = "batch_size"
        elif key == "bufferSize":
            suggest = "buffer_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceS3ConfigurationFormatSourceS3FileFormatParquet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceS3ConfigurationFormatSourceS3FileFormatParquet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceS3ConfigurationFormatSourceS3FileFormatParquet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 batch_size: Optional[int] = None,
                 buffer_size: Optional[int] = None,
                 columns: Optional[Sequence[str]] = None,
                 filetype: Optional[str] = None):
        if batch_size is not None:
            pulumi.set(__self__, "batch_size", batch_size)
        if buffer_size is not None:
            pulumi.set(__self__, "buffer_size", buffer_size)
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if filetype is not None:
            pulumi.set(__self__, "filetype", filetype)

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[int]:
        return pulumi.get(self, "batch_size")

    @property
    @pulumi.getter(name="bufferSize")
    def buffer_size(self) -> Optional[int]:
        return pulumi.get(self, "buffer_size")

    @property
    @pulumi.getter
    def columns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter
    def filetype(self) -> Optional[str]:
        return pulumi.get(self, "filetype")


@pulumi.output_type
class SourceS3ConfigurationFormatSourceS3UpdateFileFormatAvro(dict):
    def __init__(__self__, *,
                 filetype: Optional[str] = None):
        if filetype is not None:
            pulumi.set(__self__, "filetype", filetype)

    @property
    @pulumi.getter
    def filetype(self) -> Optional[str]:
        return pulumi.get(self, "filetype")


@pulumi.output_type
class SourceS3ConfigurationFormatSourceS3UpdateFileFormatCsv(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalReaderOptions":
            suggest = "additional_reader_options"
        elif key == "advancedOptions":
            suggest = "advanced_options"
        elif key == "blockSize":
            suggest = "block_size"
        elif key == "doubleQuote":
            suggest = "double_quote"
        elif key == "escapeChar":
            suggest = "escape_char"
        elif key == "inferDatatypes":
            suggest = "infer_datatypes"
        elif key == "newlinesInValues":
            suggest = "newlines_in_values"
        elif key == "quoteChar":
            suggest = "quote_char"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceS3ConfigurationFormatSourceS3UpdateFileFormatCsv. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceS3ConfigurationFormatSourceS3UpdateFileFormatCsv.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceS3ConfigurationFormatSourceS3UpdateFileFormatCsv.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_reader_options: Optional[str] = None,
                 advanced_options: Optional[str] = None,
                 block_size: Optional[int] = None,
                 delimiter: Optional[str] = None,
                 double_quote: Optional[bool] = None,
                 encoding: Optional[str] = None,
                 escape_char: Optional[str] = None,
                 filetype: Optional[str] = None,
                 infer_datatypes: Optional[bool] = None,
                 newlines_in_values: Optional[bool] = None,
                 quote_char: Optional[str] = None):
        if additional_reader_options is not None:
            pulumi.set(__self__, "additional_reader_options", additional_reader_options)
        if advanced_options is not None:
            pulumi.set(__self__, "advanced_options", advanced_options)
        if block_size is not None:
            pulumi.set(__self__, "block_size", block_size)
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if double_quote is not None:
            pulumi.set(__self__, "double_quote", double_quote)
        if encoding is not None:
            pulumi.set(__self__, "encoding", encoding)
        if escape_char is not None:
            pulumi.set(__self__, "escape_char", escape_char)
        if filetype is not None:
            pulumi.set(__self__, "filetype", filetype)
        if infer_datatypes is not None:
            pulumi.set(__self__, "infer_datatypes", infer_datatypes)
        if newlines_in_values is not None:
            pulumi.set(__self__, "newlines_in_values", newlines_in_values)
        if quote_char is not None:
            pulumi.set(__self__, "quote_char", quote_char)

    @property
    @pulumi.getter(name="additionalReaderOptions")
    def additional_reader_options(self) -> Optional[str]:
        return pulumi.get(self, "additional_reader_options")

    @property
    @pulumi.getter(name="advancedOptions")
    def advanced_options(self) -> Optional[str]:
        return pulumi.get(self, "advanced_options")

    @property
    @pulumi.getter(name="blockSize")
    def block_size(self) -> Optional[int]:
        return pulumi.get(self, "block_size")

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[str]:
        return pulumi.get(self, "delimiter")

    @property
    @pulumi.getter(name="doubleQuote")
    def double_quote(self) -> Optional[bool]:
        return pulumi.get(self, "double_quote")

    @property
    @pulumi.getter
    def encoding(self) -> Optional[str]:
        return pulumi.get(self, "encoding")

    @property
    @pulumi.getter(name="escapeChar")
    def escape_char(self) -> Optional[str]:
        return pulumi.get(self, "escape_char")

    @property
    @pulumi.getter
    def filetype(self) -> Optional[str]:
        return pulumi.get(self, "filetype")

    @property
    @pulumi.getter(name="inferDatatypes")
    def infer_datatypes(self) -> Optional[bool]:
        return pulumi.get(self, "infer_datatypes")

    @property
    @pulumi.getter(name="newlinesInValues")
    def newlines_in_values(self) -> Optional[bool]:
        return pulumi.get(self, "newlines_in_values")

    @property
    @pulumi.getter(name="quoteChar")
    def quote_char(self) -> Optional[str]:
        return pulumi.get(self, "quote_char")


@pulumi.output_type
class SourceS3ConfigurationFormatSourceS3UpdateFileFormatJsonl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockSize":
            suggest = "block_size"
        elif key == "newlinesInValues":
            suggest = "newlines_in_values"
        elif key == "unexpectedFieldBehavior":
            suggest = "unexpected_field_behavior"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceS3ConfigurationFormatSourceS3UpdateFileFormatJsonl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceS3ConfigurationFormatSourceS3UpdateFileFormatJsonl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceS3ConfigurationFormatSourceS3UpdateFileFormatJsonl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_size: Optional[int] = None,
                 filetype: Optional[str] = None,
                 newlines_in_values: Optional[bool] = None,
                 unexpected_field_behavior: Optional[str] = None):
        if block_size is not None:
            pulumi.set(__self__, "block_size", block_size)
        if filetype is not None:
            pulumi.set(__self__, "filetype", filetype)
        if newlines_in_values is not None:
            pulumi.set(__self__, "newlines_in_values", newlines_in_values)
        if unexpected_field_behavior is not None:
            pulumi.set(__self__, "unexpected_field_behavior", unexpected_field_behavior)

    @property
    @pulumi.getter(name="blockSize")
    def block_size(self) -> Optional[int]:
        return pulumi.get(self, "block_size")

    @property
    @pulumi.getter
    def filetype(self) -> Optional[str]:
        return pulumi.get(self, "filetype")

    @property
    @pulumi.getter(name="newlinesInValues")
    def newlines_in_values(self) -> Optional[bool]:
        return pulumi.get(self, "newlines_in_values")

    @property
    @pulumi.getter(name="unexpectedFieldBehavior")
    def unexpected_field_behavior(self) -> Optional[str]:
        return pulumi.get(self, "unexpected_field_behavior")


@pulumi.output_type
class SourceS3ConfigurationFormatSourceS3UpdateFileFormatParquet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "batchSize":
            suggest = "batch_size"
        elif key == "bufferSize":
            suggest = "buffer_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceS3ConfigurationFormatSourceS3UpdateFileFormatParquet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceS3ConfigurationFormatSourceS3UpdateFileFormatParquet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceS3ConfigurationFormatSourceS3UpdateFileFormatParquet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 batch_size: Optional[int] = None,
                 buffer_size: Optional[int] = None,
                 columns: Optional[Sequence[str]] = None,
                 filetype: Optional[str] = None):
        if batch_size is not None:
            pulumi.set(__self__, "batch_size", batch_size)
        if buffer_size is not None:
            pulumi.set(__self__, "buffer_size", buffer_size)
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if filetype is not None:
            pulumi.set(__self__, "filetype", filetype)

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[int]:
        return pulumi.get(self, "batch_size")

    @property
    @pulumi.getter(name="bufferSize")
    def buffer_size(self) -> Optional[int]:
        return pulumi.get(self, "buffer_size")

    @property
    @pulumi.getter
    def columns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter
    def filetype(self) -> Optional[str]:
        return pulumi.get(self, "filetype")


@pulumi.output_type
class SourceS3ConfigurationProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsAccessKeyId":
            suggest = "aws_access_key_id"
        elif key == "awsSecretAccessKey":
            suggest = "aws_secret_access_key"
        elif key == "pathPrefix":
            suggest = "path_prefix"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceS3ConfigurationProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceS3ConfigurationProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceS3ConfigurationProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: str,
                 aws_access_key_id: Optional[str] = None,
                 aws_secret_access_key: Optional[str] = None,
                 endpoint: Optional[str] = None,
                 path_prefix: Optional[str] = None,
                 start_date: Optional[str] = None):
        pulumi.set(__self__, "bucket", bucket)
        if aws_access_key_id is not None:
            pulumi.set(__self__, "aws_access_key_id", aws_access_key_id)
        if aws_secret_access_key is not None:
            pulumi.set(__self__, "aws_secret_access_key", aws_secret_access_key)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if path_prefix is not None:
            pulumi.set(__self__, "path_prefix", path_prefix)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> Optional[str]:
        return pulumi.get(self, "aws_access_key_id")

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> Optional[str]:
        return pulumi.get(self, "aws_secret_access_key")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="pathPrefix")
    def path_prefix(self) -> Optional[str]:
        return pulumi.get(self, "path_prefix")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceSalesforceConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "forceUseBulkApi":
            suggest = "force_use_bulk_api"
        elif key == "isSandbox":
            suggest = "is_sandbox"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "streamsCriterias":
            suggest = "streams_criterias"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSalesforceConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSalesforceConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSalesforceConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 source_type: str,
                 auth_type: Optional[str] = None,
                 force_use_bulk_api: Optional[bool] = None,
                 is_sandbox: Optional[bool] = None,
                 start_date: Optional[str] = None,
                 streams_criterias: Optional[Sequence['outputs.SourceSalesforceConfigurationStreamsCriteria']] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "source_type", source_type)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if force_use_bulk_api is not None:
            pulumi.set(__self__, "force_use_bulk_api", force_use_bulk_api)
        if is_sandbox is not None:
            pulumi.set(__self__, "is_sandbox", is_sandbox)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if streams_criterias is not None:
            pulumi.set(__self__, "streams_criterias", streams_criterias)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="forceUseBulkApi")
    def force_use_bulk_api(self) -> Optional[bool]:
        return pulumi.get(self, "force_use_bulk_api")

    @property
    @pulumi.getter(name="isSandbox")
    def is_sandbox(self) -> Optional[bool]:
        return pulumi.get(self, "is_sandbox")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="streamsCriterias")
    def streams_criterias(self) -> Optional[Sequence['outputs.SourceSalesforceConfigurationStreamsCriteria']]:
        return pulumi.get(self, "streams_criterias")


@pulumi.output_type
class SourceSalesforceConfigurationStreamsCriteria(dict):
    def __init__(__self__, *,
                 criteria: str,
                 value: str):
        pulumi.set(__self__, "criteria", criteria)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def criteria(self) -> str:
        return pulumi.get(self, "criteria")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class SourceSalesloftConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSalesloftConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSalesloftConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSalesloftConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials: 'outputs.SourceSalesloftConfigurationCredentials',
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.SourceSalesloftConfigurationCredentials':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceSalesloftConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceSalesloftCredentialsAuthenticateViaApiKey":
            suggest = "source_salesloft_credentials_authenticate_via_api_key"
        elif key == "sourceSalesloftCredentialsAuthenticateViaOAuth":
            suggest = "source_salesloft_credentials_authenticate_via_o_auth"
        elif key == "sourceSalesloftUpdateCredentialsAuthenticateViaApiKey":
            suggest = "source_salesloft_update_credentials_authenticate_via_api_key"
        elif key == "sourceSalesloftUpdateCredentialsAuthenticateViaOAuth":
            suggest = "source_salesloft_update_credentials_authenticate_via_o_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSalesloftConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSalesloftConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSalesloftConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_salesloft_credentials_authenticate_via_api_key: Optional['outputs.SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaApiKey'] = None,
                 source_salesloft_credentials_authenticate_via_o_auth: Optional['outputs.SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaOAuth'] = None,
                 source_salesloft_update_credentials_authenticate_via_api_key: Optional['outputs.SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaApiKey'] = None,
                 source_salesloft_update_credentials_authenticate_via_o_auth: Optional['outputs.SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaOAuth'] = None):
        if source_salesloft_credentials_authenticate_via_api_key is not None:
            pulumi.set(__self__, "source_salesloft_credentials_authenticate_via_api_key", source_salesloft_credentials_authenticate_via_api_key)
        if source_salesloft_credentials_authenticate_via_o_auth is not None:
            pulumi.set(__self__, "source_salesloft_credentials_authenticate_via_o_auth", source_salesloft_credentials_authenticate_via_o_auth)
        if source_salesloft_update_credentials_authenticate_via_api_key is not None:
            pulumi.set(__self__, "source_salesloft_update_credentials_authenticate_via_api_key", source_salesloft_update_credentials_authenticate_via_api_key)
        if source_salesloft_update_credentials_authenticate_via_o_auth is not None:
            pulumi.set(__self__, "source_salesloft_update_credentials_authenticate_via_o_auth", source_salesloft_update_credentials_authenticate_via_o_auth)

    @property
    @pulumi.getter(name="sourceSalesloftCredentialsAuthenticateViaApiKey")
    def source_salesloft_credentials_authenticate_via_api_key(self) -> Optional['outputs.SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaApiKey']:
        return pulumi.get(self, "source_salesloft_credentials_authenticate_via_api_key")

    @property
    @pulumi.getter(name="sourceSalesloftCredentialsAuthenticateViaOAuth")
    def source_salesloft_credentials_authenticate_via_o_auth(self) -> Optional['outputs.SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaOAuth']:
        return pulumi.get(self, "source_salesloft_credentials_authenticate_via_o_auth")

    @property
    @pulumi.getter(name="sourceSalesloftUpdateCredentialsAuthenticateViaApiKey")
    def source_salesloft_update_credentials_authenticate_via_api_key(self) -> Optional['outputs.SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaApiKey']:
        return pulumi.get(self, "source_salesloft_update_credentials_authenticate_via_api_key")

    @property
    @pulumi.getter(name="sourceSalesloftUpdateCredentialsAuthenticateViaOAuth")
    def source_salesloft_update_credentials_authenticate_via_o_auth(self) -> Optional['outputs.SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaOAuth']:
        return pulumi.get(self, "source_salesloft_update_credentials_authenticate_via_o_auth")


@pulumi.output_type
class SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaApiKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaApiKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaApiKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaApiKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 auth_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaOAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "tokenExpiryDate":
            suggest = "token_expiry_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaOAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaOAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaOAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 token_expiry_date: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> str:
        return pulumi.get(self, "token_expiry_date")


@pulumi.output_type
class SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaApiKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaApiKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaApiKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaApiKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 auth_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaOAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "tokenExpiryDate":
            suggest = "token_expiry_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaOAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaOAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaOAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 token_expiry_date: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> str:
        return pulumi.get(self, "token_expiry_date")


@pulumi.output_type
class SourceSapFieldglassConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSapFieldglassConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSapFieldglassConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSapFieldglassConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceSecodaConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSecodaConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSecodaConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSecodaConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceSendgridConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSendgridConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSendgridConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSendgridConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apikey: str,
                 source_type: str,
                 start_time: Optional[str] = None):
        pulumi.set(__self__, "apikey", apikey)
        pulumi.set(__self__, "source_type", source_type)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def apikey(self) -> str:
        return pulumi.get(self, "apikey")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")


@pulumi.output_type
class SourceSendinblueConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSendinblueConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSendinblueConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSendinblueConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceSenseforceConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "backendUrl":
            suggest = "backend_url"
        elif key == "datasetId":
            suggest = "dataset_id"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "sliceRange":
            suggest = "slice_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSenseforceConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSenseforceConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSenseforceConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 backend_url: str,
                 dataset_id: str,
                 source_type: str,
                 start_date: str,
                 slice_range: Optional[int] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "backend_url", backend_url)
        pulumi.set(__self__, "dataset_id", dataset_id)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if slice_range is not None:
            pulumi.set(__self__, "slice_range", slice_range)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="backendUrl")
    def backend_url(self) -> str:
        return pulumi.get(self, "backend_url")

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> str:
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="sliceRange")
    def slice_range(self) -> Optional[int]:
        return pulumi.get(self, "slice_range")


@pulumi.output_type
class SourceSentryConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authToken":
            suggest = "auth_token"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "discoverFields":
            suggest = "discover_fields"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSentryConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSentryConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSentryConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_token: str,
                 organization: str,
                 project: str,
                 source_type: str,
                 discover_fields: Optional[Sequence[str]] = None,
                 hostname: Optional[str] = None):
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "source_type", source_type)
        if discover_fields is not None:
            pulumi.set(__self__, "discover_fields", discover_fields)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> str:
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def project(self) -> str:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="discoverFields")
    def discover_fields(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "discover_fields")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")


@pulumi.output_type
class SourceSftpBulkConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "folderPath":
            suggest = "folder_path"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "streamName":
            suggest = "stream_name"
        elif key == "fileMostRecent":
            suggest = "file_most_recent"
        elif key == "filePattern":
            suggest = "file_pattern"
        elif key == "fileType":
            suggest = "file_type"
        elif key == "privateKey":
            suggest = "private_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSftpBulkConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSftpBulkConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSftpBulkConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 folder_path: str,
                 host: str,
                 port: int,
                 source_type: str,
                 start_date: str,
                 stream_name: str,
                 username: str,
                 file_most_recent: Optional[bool] = None,
                 file_pattern: Optional[str] = None,
                 file_type: Optional[str] = None,
                 password: Optional[str] = None,
                 private_key: Optional[str] = None,
                 separator: Optional[str] = None):
        pulumi.set(__self__, "folder_path", folder_path)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "stream_name", stream_name)
        pulumi.set(__self__, "username", username)
        if file_most_recent is not None:
            pulumi.set(__self__, "file_most_recent", file_most_recent)
        if file_pattern is not None:
            pulumi.set(__self__, "file_pattern", file_pattern)
        if file_type is not None:
            pulumi.set(__self__, "file_type", file_type)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if separator is not None:
            pulumi.set(__self__, "separator", separator)

    @property
    @pulumi.getter(name="folderPath")
    def folder_path(self) -> str:
        return pulumi.get(self, "folder_path")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        return pulumi.get(self, "stream_name")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="fileMostRecent")
    def file_most_recent(self) -> Optional[bool]:
        return pulumi.get(self, "file_most_recent")

    @property
    @pulumi.getter(name="filePattern")
    def file_pattern(self) -> Optional[str]:
        return pulumi.get(self, "file_pattern")

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> Optional[str]:
        return pulumi.get(self, "file_type")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[str]:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter
    def separator(self) -> Optional[str]:
        return pulumi.get(self, "separator")


@pulumi.output_type
class SourceSftpConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "filePattern":
            suggest = "file_pattern"
        elif key == "fileTypes":
            suggest = "file_types"
        elif key == "folderPath":
            suggest = "folder_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSftpConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSftpConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSftpConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: str,
                 port: int,
                 source_type: str,
                 user: str,
                 credentials: Optional['outputs.SourceSftpConfigurationCredentials'] = None,
                 file_pattern: Optional[str] = None,
                 file_types: Optional[str] = None,
                 folder_path: Optional[str] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "user", user)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if file_pattern is not None:
            pulumi.set(__self__, "file_pattern", file_pattern)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if folder_path is not None:
            pulumi.set(__self__, "folder_path", folder_path)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourceSftpConfigurationCredentials']:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="filePattern")
    def file_pattern(self) -> Optional[str]:
        return pulumi.get(self, "file_pattern")

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[str]:
        return pulumi.get(self, "file_types")

    @property
    @pulumi.getter(name="folderPath")
    def folder_path(self) -> Optional[str]:
        return pulumi.get(self, "folder_path")


@pulumi.output_type
class SourceSftpConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceSftpAuthenticationWildcardPasswordAuthentication":
            suggest = "source_sftp_authentication_wildcard_password_authentication"
        elif key == "sourceSftpAuthenticationWildcardSshKeyAuthentication":
            suggest = "source_sftp_authentication_wildcard_ssh_key_authentication"
        elif key == "sourceSftpUpdateAuthenticationWildcardPasswordAuthentication":
            suggest = "source_sftp_update_authentication_wildcard_password_authentication"
        elif key == "sourceSftpUpdateAuthenticationWildcardSshKeyAuthentication":
            suggest = "source_sftp_update_authentication_wildcard_ssh_key_authentication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSftpConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSftpConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSftpConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_sftp_authentication_wildcard_password_authentication: Optional['outputs.SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardPasswordAuthentication'] = None,
                 source_sftp_authentication_wildcard_ssh_key_authentication: Optional['outputs.SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardSshKeyAuthentication'] = None,
                 source_sftp_update_authentication_wildcard_password_authentication: Optional['outputs.SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardPasswordAuthentication'] = None,
                 source_sftp_update_authentication_wildcard_ssh_key_authentication: Optional['outputs.SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardSshKeyAuthentication'] = None):
        if source_sftp_authentication_wildcard_password_authentication is not None:
            pulumi.set(__self__, "source_sftp_authentication_wildcard_password_authentication", source_sftp_authentication_wildcard_password_authentication)
        if source_sftp_authentication_wildcard_ssh_key_authentication is not None:
            pulumi.set(__self__, "source_sftp_authentication_wildcard_ssh_key_authentication", source_sftp_authentication_wildcard_ssh_key_authentication)
        if source_sftp_update_authentication_wildcard_password_authentication is not None:
            pulumi.set(__self__, "source_sftp_update_authentication_wildcard_password_authentication", source_sftp_update_authentication_wildcard_password_authentication)
        if source_sftp_update_authentication_wildcard_ssh_key_authentication is not None:
            pulumi.set(__self__, "source_sftp_update_authentication_wildcard_ssh_key_authentication", source_sftp_update_authentication_wildcard_ssh_key_authentication)

    @property
    @pulumi.getter(name="sourceSftpAuthenticationWildcardPasswordAuthentication")
    def source_sftp_authentication_wildcard_password_authentication(self) -> Optional['outputs.SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardPasswordAuthentication']:
        return pulumi.get(self, "source_sftp_authentication_wildcard_password_authentication")

    @property
    @pulumi.getter(name="sourceSftpAuthenticationWildcardSshKeyAuthentication")
    def source_sftp_authentication_wildcard_ssh_key_authentication(self) -> Optional['outputs.SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardSshKeyAuthentication']:
        return pulumi.get(self, "source_sftp_authentication_wildcard_ssh_key_authentication")

    @property
    @pulumi.getter(name="sourceSftpUpdateAuthenticationWildcardPasswordAuthentication")
    def source_sftp_update_authentication_wildcard_password_authentication(self) -> Optional['outputs.SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardPasswordAuthentication']:
        return pulumi.get(self, "source_sftp_update_authentication_wildcard_password_authentication")

    @property
    @pulumi.getter(name="sourceSftpUpdateAuthenticationWildcardSshKeyAuthentication")
    def source_sftp_update_authentication_wildcard_ssh_key_authentication(self) -> Optional['outputs.SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardSshKeyAuthentication']:
        return pulumi.get(self, "source_sftp_update_authentication_wildcard_ssh_key_authentication")


@pulumi.output_type
class SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authMethod":
            suggest = "auth_method"
        elif key == "authUserPassword":
            suggest = "auth_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_method: str,
                 auth_user_password: str):
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "auth_user_password", auth_user_password)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="authUserPassword")
    def auth_user_password(self) -> str:
        return pulumi.get(self, "auth_user_password")


@pulumi.output_type
class SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authMethod":
            suggest = "auth_method"
        elif key == "authSshKey":
            suggest = "auth_ssh_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_method: str,
                 auth_ssh_key: str):
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "auth_ssh_key", auth_ssh_key)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="authSshKey")
    def auth_ssh_key(self) -> str:
        return pulumi.get(self, "auth_ssh_key")


@pulumi.output_type
class SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardPasswordAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authMethod":
            suggest = "auth_method"
        elif key == "authUserPassword":
            suggest = "auth_user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardPasswordAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardPasswordAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardPasswordAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_method: str,
                 auth_user_password: str):
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "auth_user_password", auth_user_password)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="authUserPassword")
    def auth_user_password(self) -> str:
        return pulumi.get(self, "auth_user_password")


@pulumi.output_type
class SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardSshKeyAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authMethod":
            suggest = "auth_method"
        elif key == "authSshKey":
            suggest = "auth_ssh_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardSshKeyAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardSshKeyAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardSshKeyAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_method: str,
                 auth_ssh_key: str):
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "auth_ssh_key", auth_ssh_key)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="authSshKey")
    def auth_ssh_key(self) -> str:
        return pulumi.get(self, "auth_ssh_key")


@pulumi.output_type
class SourceShopifyConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceShopifyConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceShopifyConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceShopifyConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 shop: str,
                 source_type: str,
                 start_date: str,
                 credentials: Optional['outputs.SourceShopifyConfigurationCredentials'] = None):
        pulumi.set(__self__, "shop", shop)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter
    def shop(self) -> str:
        return pulumi.get(self, "shop")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourceShopifyConfigurationCredentials']:
        return pulumi.get(self, "credentials")


@pulumi.output_type
class SourceShopifyConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceShopifyShopifyAuthorizationMethodApiPassword":
            suggest = "source_shopify_shopify_authorization_method_api_password"
        elif key == "sourceShopifyShopifyAuthorizationMethodOAuth20":
            suggest = "source_shopify_shopify_authorization_method_o_auth20"
        elif key == "sourceShopifyUpdateShopifyAuthorizationMethodApiPassword":
            suggest = "source_shopify_update_shopify_authorization_method_api_password"
        elif key == "sourceShopifyUpdateShopifyAuthorizationMethodOAuth20":
            suggest = "source_shopify_update_shopify_authorization_method_o_auth20"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceShopifyConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceShopifyConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceShopifyConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_shopify_shopify_authorization_method_api_password: Optional['outputs.SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodApiPassword'] = None,
                 source_shopify_shopify_authorization_method_o_auth20: Optional['outputs.SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodOAuth20'] = None,
                 source_shopify_update_shopify_authorization_method_api_password: Optional['outputs.SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodApiPassword'] = None,
                 source_shopify_update_shopify_authorization_method_o_auth20: Optional['outputs.SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodOAuth20'] = None):
        if source_shopify_shopify_authorization_method_api_password is not None:
            pulumi.set(__self__, "source_shopify_shopify_authorization_method_api_password", source_shopify_shopify_authorization_method_api_password)
        if source_shopify_shopify_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_shopify_shopify_authorization_method_o_auth20", source_shopify_shopify_authorization_method_o_auth20)
        if source_shopify_update_shopify_authorization_method_api_password is not None:
            pulumi.set(__self__, "source_shopify_update_shopify_authorization_method_api_password", source_shopify_update_shopify_authorization_method_api_password)
        if source_shopify_update_shopify_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_shopify_update_shopify_authorization_method_o_auth20", source_shopify_update_shopify_authorization_method_o_auth20)

    @property
    @pulumi.getter(name="sourceShopifyShopifyAuthorizationMethodApiPassword")
    def source_shopify_shopify_authorization_method_api_password(self) -> Optional['outputs.SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodApiPassword']:
        return pulumi.get(self, "source_shopify_shopify_authorization_method_api_password")

    @property
    @pulumi.getter(name="sourceShopifyShopifyAuthorizationMethodOAuth20")
    def source_shopify_shopify_authorization_method_o_auth20(self) -> Optional['outputs.SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodOAuth20']:
        return pulumi.get(self, "source_shopify_shopify_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourceShopifyUpdateShopifyAuthorizationMethodApiPassword")
    def source_shopify_update_shopify_authorization_method_api_password(self) -> Optional['outputs.SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodApiPassword']:
        return pulumi.get(self, "source_shopify_update_shopify_authorization_method_api_password")

    @property
    @pulumi.getter(name="sourceShopifyUpdateShopifyAuthorizationMethodOAuth20")
    def source_shopify_update_shopify_authorization_method_o_auth20(self) -> Optional['outputs.SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodOAuth20']:
        return pulumi.get(self, "source_shopify_update_shopify_authorization_method_o_auth20")


@pulumi.output_type
class SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodApiPassword(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiPassword":
            suggest = "api_password"
        elif key == "authMethod":
            suggest = "auth_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodApiPassword. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodApiPassword.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodApiPassword.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_password: str,
                 auth_method: str):
        pulumi.set(__self__, "api_password", api_password)
        pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="apiPassword")
    def api_password(self) -> str:
        return pulumi.get(self, "api_password")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")


@pulumi.output_type
class SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authMethod":
            suggest = "auth_method"
        elif key == "accessToken":
            suggest = "access_token"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_method: str,
                 access_token: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None):
        pulumi.set(__self__, "auth_method", auth_method)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[str]:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodApiPassword(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiPassword":
            suggest = "api_password"
        elif key == "authMethod":
            suggest = "auth_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodApiPassword. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodApiPassword.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodApiPassword.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_password: str,
                 auth_method: str):
        pulumi.set(__self__, "api_password", api_password)
        pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="apiPassword")
    def api_password(self) -> str:
        return pulumi.get(self, "api_password")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")


@pulumi.output_type
class SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authMethod":
            suggest = "auth_method"
        elif key == "accessToken":
            suggest = "access_token"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_method: str,
                 access_token: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None):
        pulumi.set(__self__, "auth_method", auth_method)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[str]:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class SourceShortioConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainId":
            suggest = "domain_id"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceShortioConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceShortioConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceShortioConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_id: str,
                 secret_key: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> str:
        return pulumi.get(self, "domain_id")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceSlackConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "joinChannels":
            suggest = "join_channels"
        elif key == "lookbackWindow":
            suggest = "lookback_window"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "channelFilters":
            suggest = "channel_filters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSlackConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSlackConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSlackConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 join_channels: bool,
                 lookback_window: int,
                 source_type: str,
                 start_date: str,
                 channel_filters: Optional[Sequence[str]] = None,
                 credentials: Optional['outputs.SourceSlackConfigurationCredentials'] = None):
        pulumi.set(__self__, "join_channels", join_channels)
        pulumi.set(__self__, "lookback_window", lookback_window)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if channel_filters is not None:
            pulumi.set(__self__, "channel_filters", channel_filters)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="joinChannels")
    def join_channels(self) -> bool:
        return pulumi.get(self, "join_channels")

    @property
    @pulumi.getter(name="lookbackWindow")
    def lookback_window(self) -> int:
        return pulumi.get(self, "lookback_window")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="channelFilters")
    def channel_filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "channel_filters")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourceSlackConfigurationCredentials']:
        return pulumi.get(self, "credentials")


@pulumi.output_type
class SourceSlackConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceSlackAuthenticationMechanismApiToken":
            suggest = "source_slack_authentication_mechanism_api_token"
        elif key == "sourceSlackAuthenticationMechanismSignInViaSlackOAuth":
            suggest = "source_slack_authentication_mechanism_sign_in_via_slack_o_auth"
        elif key == "sourceSlackUpdateAuthenticationMechanismApiToken":
            suggest = "source_slack_update_authentication_mechanism_api_token"
        elif key == "sourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth":
            suggest = "source_slack_update_authentication_mechanism_sign_in_via_slack_o_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSlackConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSlackConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSlackConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_slack_authentication_mechanism_api_token: Optional['outputs.SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismApiToken'] = None,
                 source_slack_authentication_mechanism_sign_in_via_slack_o_auth: Optional['outputs.SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismSignInViaSlackOAuth'] = None,
                 source_slack_update_authentication_mechanism_api_token: Optional['outputs.SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismApiToken'] = None,
                 source_slack_update_authentication_mechanism_sign_in_via_slack_o_auth: Optional['outputs.SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth'] = None):
        if source_slack_authentication_mechanism_api_token is not None:
            pulumi.set(__self__, "source_slack_authentication_mechanism_api_token", source_slack_authentication_mechanism_api_token)
        if source_slack_authentication_mechanism_sign_in_via_slack_o_auth is not None:
            pulumi.set(__self__, "source_slack_authentication_mechanism_sign_in_via_slack_o_auth", source_slack_authentication_mechanism_sign_in_via_slack_o_auth)
        if source_slack_update_authentication_mechanism_api_token is not None:
            pulumi.set(__self__, "source_slack_update_authentication_mechanism_api_token", source_slack_update_authentication_mechanism_api_token)
        if source_slack_update_authentication_mechanism_sign_in_via_slack_o_auth is not None:
            pulumi.set(__self__, "source_slack_update_authentication_mechanism_sign_in_via_slack_o_auth", source_slack_update_authentication_mechanism_sign_in_via_slack_o_auth)

    @property
    @pulumi.getter(name="sourceSlackAuthenticationMechanismApiToken")
    def source_slack_authentication_mechanism_api_token(self) -> Optional['outputs.SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismApiToken']:
        return pulumi.get(self, "source_slack_authentication_mechanism_api_token")

    @property
    @pulumi.getter(name="sourceSlackAuthenticationMechanismSignInViaSlackOAuth")
    def source_slack_authentication_mechanism_sign_in_via_slack_o_auth(self) -> Optional['outputs.SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismSignInViaSlackOAuth']:
        return pulumi.get(self, "source_slack_authentication_mechanism_sign_in_via_slack_o_auth")

    @property
    @pulumi.getter(name="sourceSlackUpdateAuthenticationMechanismApiToken")
    def source_slack_update_authentication_mechanism_api_token(self) -> Optional['outputs.SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismApiToken']:
        return pulumi.get(self, "source_slack_update_authentication_mechanism_api_token")

    @property
    @pulumi.getter(name="sourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth")
    def source_slack_update_authentication_mechanism_sign_in_via_slack_o_auth(self) -> Optional['outputs.SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth']:
        return pulumi.get(self, "source_slack_update_authentication_mechanism_sign_in_via_slack_o_auth")


@pulumi.output_type
class SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismApiToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiToken":
            suggest = "api_token"
        elif key == "optionTitle":
            suggest = "option_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismApiToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismApiToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismApiToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token: str,
                 option_title: str):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> str:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismSignInViaSlackOAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "optionTitle":
            suggest = "option_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismSignInViaSlackOAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismSignInViaSlackOAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismSignInViaSlackOAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 client_id: str,
                 client_secret: str,
                 option_title: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> str:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismApiToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiToken":
            suggest = "api_token"
        elif key == "optionTitle":
            suggest = "option_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismApiToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismApiToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismApiToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token: str,
                 option_title: str):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> str:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "optionTitle":
            suggest = "option_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 client_id: str,
                 client_secret: str,
                 option_title: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> str:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class SourceSmailyConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiPassword":
            suggest = "api_password"
        elif key == "apiSubdomain":
            suggest = "api_subdomain"
        elif key == "apiUsername":
            suggest = "api_username"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSmailyConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSmailyConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSmailyConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_password: str,
                 api_subdomain: str,
                 api_username: str,
                 source_type: str):
        pulumi.set(__self__, "api_password", api_password)
        pulumi.set(__self__, "api_subdomain", api_subdomain)
        pulumi.set(__self__, "api_username", api_username)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiPassword")
    def api_password(self) -> str:
        return pulumi.get(self, "api_password")

    @property
    @pulumi.getter(name="apiSubdomain")
    def api_subdomain(self) -> str:
        return pulumi.get(self, "api_subdomain")

    @property
    @pulumi.getter(name="apiUsername")
    def api_username(self) -> str:
        return pulumi.get(self, "api_username")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceSmartengageConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSmartengageConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSmartengageConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSmartengageConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceSmartsheetsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "spreadsheetId":
            suggest = "spreadsheet_id"
        elif key == "metadataFields":
            suggest = "metadata_fields"
        elif key == "startDatetime":
            suggest = "start_datetime"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSmartsheetsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSmartsheetsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSmartsheetsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials: 'outputs.SourceSmartsheetsConfigurationCredentials',
                 source_type: str,
                 spreadsheet_id: str,
                 metadata_fields: Optional[Sequence[str]] = None,
                 start_datetime: Optional[str] = None):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "spreadsheet_id", spreadsheet_id)
        if metadata_fields is not None:
            pulumi.set(__self__, "metadata_fields", metadata_fields)
        if start_datetime is not None:
            pulumi.set(__self__, "start_datetime", start_datetime)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.SourceSmartsheetsConfigurationCredentials':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="spreadsheetId")
    def spreadsheet_id(self) -> str:
        return pulumi.get(self, "spreadsheet_id")

    @property
    @pulumi.getter(name="metadataFields")
    def metadata_fields(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "metadata_fields")

    @property
    @pulumi.getter(name="startDatetime")
    def start_datetime(self) -> Optional[str]:
        return pulumi.get(self, "start_datetime")


@pulumi.output_type
class SourceSmartsheetsConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceSmartsheetsAuthorizationMethodApiAccessToken":
            suggest = "source_smartsheets_authorization_method_api_access_token"
        elif key == "sourceSmartsheetsAuthorizationMethodOAuth20":
            suggest = "source_smartsheets_authorization_method_o_auth20"
        elif key == "sourceSmartsheetsUpdateAuthorizationMethodApiAccessToken":
            suggest = "source_smartsheets_update_authorization_method_api_access_token"
        elif key == "sourceSmartsheetsUpdateAuthorizationMethodOAuth20":
            suggest = "source_smartsheets_update_authorization_method_o_auth20"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSmartsheetsConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSmartsheetsConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSmartsheetsConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_smartsheets_authorization_method_api_access_token: Optional['outputs.SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodApiAccessToken'] = None,
                 source_smartsheets_authorization_method_o_auth20: Optional['outputs.SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodOAuth20'] = None,
                 source_smartsheets_update_authorization_method_api_access_token: Optional['outputs.SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodApiAccessToken'] = None,
                 source_smartsheets_update_authorization_method_o_auth20: Optional['outputs.SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodOAuth20'] = None):
        if source_smartsheets_authorization_method_api_access_token is not None:
            pulumi.set(__self__, "source_smartsheets_authorization_method_api_access_token", source_smartsheets_authorization_method_api_access_token)
        if source_smartsheets_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_smartsheets_authorization_method_o_auth20", source_smartsheets_authorization_method_o_auth20)
        if source_smartsheets_update_authorization_method_api_access_token is not None:
            pulumi.set(__self__, "source_smartsheets_update_authorization_method_api_access_token", source_smartsheets_update_authorization_method_api_access_token)
        if source_smartsheets_update_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_smartsheets_update_authorization_method_o_auth20", source_smartsheets_update_authorization_method_o_auth20)

    @property
    @pulumi.getter(name="sourceSmartsheetsAuthorizationMethodApiAccessToken")
    def source_smartsheets_authorization_method_api_access_token(self) -> Optional['outputs.SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodApiAccessToken']:
        return pulumi.get(self, "source_smartsheets_authorization_method_api_access_token")

    @property
    @pulumi.getter(name="sourceSmartsheetsAuthorizationMethodOAuth20")
    def source_smartsheets_authorization_method_o_auth20(self) -> Optional['outputs.SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodOAuth20']:
        return pulumi.get(self, "source_smartsheets_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourceSmartsheetsUpdateAuthorizationMethodApiAccessToken")
    def source_smartsheets_update_authorization_method_api_access_token(self) -> Optional['outputs.SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodApiAccessToken']:
        return pulumi.get(self, "source_smartsheets_update_authorization_method_api_access_token")

    @property
    @pulumi.getter(name="sourceSmartsheetsUpdateAuthorizationMethodOAuth20")
    def source_smartsheets_update_authorization_method_o_auth20(self) -> Optional['outputs.SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodOAuth20']:
        return pulumi.get(self, "source_smartsheets_update_authorization_method_o_auth20")


@pulumi.output_type
class SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodApiAccessToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodApiAccessToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodApiAccessToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodApiAccessToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "tokenExpiryDate":
            suggest = "token_expiry_date"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 token_expiry_date: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> str:
        return pulumi.get(self, "token_expiry_date")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodApiAccessToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodApiAccessToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodApiAccessToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodApiAccessToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "tokenExpiryDate":
            suggest = "token_expiry_date"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 token_expiry_date: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> str:
        return pulumi.get(self, "token_expiry_date")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceSnapchatMarketingConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "endDate":
            suggest = "end_date"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSnapchatMarketingConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSnapchatMarketingConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSnapchatMarketingConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 source_type: str,
                 end_date: Optional[str] = None,
                 start_date: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "source_type", source_type)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceSnowflakeConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "jdbcUrlParams":
            suggest = "jdbc_url_params"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSnowflakeConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSnowflakeConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSnowflakeConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: str,
                 host: str,
                 role: str,
                 source_type: str,
                 warehouse: str,
                 credentials: Optional['outputs.SourceSnowflakeConfigurationCredentials'] = None,
                 jdbc_url_params: Optional[str] = None,
                 schema: Optional[str] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "warehouse", warehouse)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def warehouse(self) -> str:
        return pulumi.get(self, "warehouse")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourceSnowflakeConfigurationCredentials']:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[str]:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        return pulumi.get(self, "schema")


@pulumi.output_type
class SourceSnowflakeConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceSnowflakeAuthorizationMethodOAuth20":
            suggest = "source_snowflake_authorization_method_o_auth20"
        elif key == "sourceSnowflakeAuthorizationMethodUsernameAndPassword":
            suggest = "source_snowflake_authorization_method_username_and_password"
        elif key == "sourceSnowflakeUpdateAuthorizationMethodOAuth20":
            suggest = "source_snowflake_update_authorization_method_o_auth20"
        elif key == "sourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword":
            suggest = "source_snowflake_update_authorization_method_username_and_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSnowflakeConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSnowflakeConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSnowflakeConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_snowflake_authorization_method_o_auth20: Optional['outputs.SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodOAuth20'] = None,
                 source_snowflake_authorization_method_username_and_password: Optional['outputs.SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodUsernameAndPassword'] = None,
                 source_snowflake_update_authorization_method_o_auth20: Optional['outputs.SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodOAuth20'] = None,
                 source_snowflake_update_authorization_method_username_and_password: Optional['outputs.SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword'] = None):
        if source_snowflake_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_snowflake_authorization_method_o_auth20", source_snowflake_authorization_method_o_auth20)
        if source_snowflake_authorization_method_username_and_password is not None:
            pulumi.set(__self__, "source_snowflake_authorization_method_username_and_password", source_snowflake_authorization_method_username_and_password)
        if source_snowflake_update_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_snowflake_update_authorization_method_o_auth20", source_snowflake_update_authorization_method_o_auth20)
        if source_snowflake_update_authorization_method_username_and_password is not None:
            pulumi.set(__self__, "source_snowflake_update_authorization_method_username_and_password", source_snowflake_update_authorization_method_username_and_password)

    @property
    @pulumi.getter(name="sourceSnowflakeAuthorizationMethodOAuth20")
    def source_snowflake_authorization_method_o_auth20(self) -> Optional['outputs.SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodOAuth20']:
        return pulumi.get(self, "source_snowflake_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourceSnowflakeAuthorizationMethodUsernameAndPassword")
    def source_snowflake_authorization_method_username_and_password(self) -> Optional['outputs.SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodUsernameAndPassword']:
        return pulumi.get(self, "source_snowflake_authorization_method_username_and_password")

    @property
    @pulumi.getter(name="sourceSnowflakeUpdateAuthorizationMethodOAuth20")
    def source_snowflake_update_authorization_method_o_auth20(self) -> Optional['outputs.SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodOAuth20']:
        return pulumi.get(self, "source_snowflake_update_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword")
    def source_snowflake_update_authorization_method_username_and_password(self) -> Optional['outputs.SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword']:
        return pulumi.get(self, "source_snowflake_update_authorization_method_username_and_password")


@pulumi.output_type
class SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "accessToken":
            suggest = "access_token"
        elif key == "refreshToken":
            suggest = "refresh_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 access_token: Optional[str] = None,
                 refresh_token: Optional[str] = None):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[str]:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[str]:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodUsernameAndPassword(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodUsernameAndPassword. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodUsernameAndPassword.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodUsernameAndPassword.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_type: str,
                 password: str,
                 username: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "accessToken":
            suggest = "access_token"
        elif key == "refreshToken":
            suggest = "refresh_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 access_token: Optional[str] = None,
                 refresh_token: Optional[str] = None):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[str]:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[str]:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_type: str,
                 password: str,
                 username: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class SourceSonarCloudConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "componentKeys":
            suggest = "component_keys"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "userToken":
            suggest = "user_token"
        elif key == "endDate":
            suggest = "end_date"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSonarCloudConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSonarCloudConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSonarCloudConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 component_keys: Sequence[str],
                 organization: str,
                 source_type: str,
                 user_token: str,
                 end_date: Optional[str] = None,
                 start_date: Optional[str] = None):
        pulumi.set(__self__, "component_keys", component_keys)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "user_token", user_token)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="componentKeys")
    def component_keys(self) -> Sequence[str]:
        return pulumi.get(self, "component_keys")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="userToken")
    def user_token(self) -> str:
        return pulumi.get(self, "user_token")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceSpaceXApiConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSpaceXApiConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSpaceXApiConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSpaceXApiConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[str] = None,
                 options: Optional[str] = None,
                 source_type: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceSquareConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSandbox":
            suggest = "is_sandbox"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "includeDeletedObjects":
            suggest = "include_deleted_objects"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSquareConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSquareConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSquareConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_sandbox: bool,
                 source_type: str,
                 credentials: Optional['outputs.SourceSquareConfigurationCredentials'] = None,
                 include_deleted_objects: Optional[bool] = None,
                 start_date: Optional[str] = None):
        pulumi.set(__self__, "is_sandbox", is_sandbox)
        pulumi.set(__self__, "source_type", source_type)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if include_deleted_objects is not None:
            pulumi.set(__self__, "include_deleted_objects", include_deleted_objects)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="isSandbox")
    def is_sandbox(self) -> bool:
        return pulumi.get(self, "is_sandbox")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourceSquareConfigurationCredentials']:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="includeDeletedObjects")
    def include_deleted_objects(self) -> Optional[bool]:
        return pulumi.get(self, "include_deleted_objects")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceSquareConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceSquareAuthenticationApiKey":
            suggest = "source_square_authentication_api_key"
        elif key == "sourceSquareAuthenticationOauthAuthentication":
            suggest = "source_square_authentication_oauth_authentication"
        elif key == "sourceSquareUpdateAuthenticationApiKey":
            suggest = "source_square_update_authentication_api_key"
        elif key == "sourceSquareUpdateAuthenticationOauthAuthentication":
            suggest = "source_square_update_authentication_oauth_authentication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSquareConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSquareConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSquareConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_square_authentication_api_key: Optional['outputs.SourceSquareConfigurationCredentialsSourceSquareAuthenticationApiKey'] = None,
                 source_square_authentication_oauth_authentication: Optional['outputs.SourceSquareConfigurationCredentialsSourceSquareAuthenticationOauthAuthentication'] = None,
                 source_square_update_authentication_api_key: Optional['outputs.SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationApiKey'] = None,
                 source_square_update_authentication_oauth_authentication: Optional['outputs.SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationOauthAuthentication'] = None):
        if source_square_authentication_api_key is not None:
            pulumi.set(__self__, "source_square_authentication_api_key", source_square_authentication_api_key)
        if source_square_authentication_oauth_authentication is not None:
            pulumi.set(__self__, "source_square_authentication_oauth_authentication", source_square_authentication_oauth_authentication)
        if source_square_update_authentication_api_key is not None:
            pulumi.set(__self__, "source_square_update_authentication_api_key", source_square_update_authentication_api_key)
        if source_square_update_authentication_oauth_authentication is not None:
            pulumi.set(__self__, "source_square_update_authentication_oauth_authentication", source_square_update_authentication_oauth_authentication)

    @property
    @pulumi.getter(name="sourceSquareAuthenticationApiKey")
    def source_square_authentication_api_key(self) -> Optional['outputs.SourceSquareConfigurationCredentialsSourceSquareAuthenticationApiKey']:
        return pulumi.get(self, "source_square_authentication_api_key")

    @property
    @pulumi.getter(name="sourceSquareAuthenticationOauthAuthentication")
    def source_square_authentication_oauth_authentication(self) -> Optional['outputs.SourceSquareConfigurationCredentialsSourceSquareAuthenticationOauthAuthentication']:
        return pulumi.get(self, "source_square_authentication_oauth_authentication")

    @property
    @pulumi.getter(name="sourceSquareUpdateAuthenticationApiKey")
    def source_square_update_authentication_api_key(self) -> Optional['outputs.SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationApiKey']:
        return pulumi.get(self, "source_square_update_authentication_api_key")

    @property
    @pulumi.getter(name="sourceSquareUpdateAuthenticationOauthAuthentication")
    def source_square_update_authentication_oauth_authentication(self) -> Optional['outputs.SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationOauthAuthentication']:
        return pulumi.get(self, "source_square_update_authentication_oauth_authentication")


@pulumi.output_type
class SourceSquareConfigurationCredentialsSourceSquareAuthenticationApiKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSquareConfigurationCredentialsSourceSquareAuthenticationApiKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSquareConfigurationCredentialsSourceSquareAuthenticationApiKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSquareConfigurationCredentialsSourceSquareAuthenticationApiKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 auth_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceSquareConfigurationCredentialsSourceSquareAuthenticationOauthAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSquareConfigurationCredentialsSourceSquareAuthenticationOauthAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSquareConfigurationCredentialsSourceSquareAuthenticationOauthAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSquareConfigurationCredentialsSourceSquareAuthenticationOauthAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationApiKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationApiKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationApiKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationApiKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 auth_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationOauthAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationOauthAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationOauthAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationOauthAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class SourceStravaConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "athleteId":
            suggest = "athlete_id"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceStravaConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceStravaConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceStravaConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 athlete_id: int,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 source_type: str,
                 start_date: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "athlete_id", athlete_id)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="athleteId")
    def athlete_id(self) -> int:
        return pulumi.get(self, "athlete_id")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceStripeConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "lookbackWindowDays":
            suggest = "lookback_window_days"
        elif key == "sliceRange":
            suggest = "slice_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceStripeConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceStripeConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceStripeConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: str,
                 client_secret: str,
                 source_type: str,
                 start_date: str,
                 lookback_window_days: Optional[int] = None,
                 slice_range: Optional[int] = None):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if lookback_window_days is not None:
            pulumi.set(__self__, "lookback_window_days", lookback_window_days)
        if slice_range is not None:
            pulumi.set(__self__, "slice_range", slice_range)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="lookbackWindowDays")
    def lookback_window_days(self) -> Optional[int]:
        return pulumi.get(self, "lookback_window_days")

    @property
    @pulumi.getter(name="sliceRange")
    def slice_range(self) -> Optional[int]:
        return pulumi.get(self, "slice_range")


@pulumi.output_type
class SourceSurveySparrowConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "surveyIds":
            suggest = "survey_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSurveySparrowConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSurveySparrowConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSurveySparrowConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 source_type: str,
                 region: Optional['outputs.SourceSurveySparrowConfigurationRegion'] = None,
                 survey_ids: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "source_type", source_type)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if survey_ids is not None:
            pulumi.set(__self__, "survey_ids", survey_ids)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def region(self) -> Optional['outputs.SourceSurveySparrowConfigurationRegion']:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="surveyIds")
    def survey_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "survey_ids")


@pulumi.output_type
class SourceSurveySparrowConfigurationRegion(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceSurveySparrowBaseUrlEuBasedAccount":
            suggest = "source_survey_sparrow_base_url_eu_based_account"
        elif key == "sourceSurveySparrowBaseUrlGlobalAccount":
            suggest = "source_survey_sparrow_base_url_global_account"
        elif key == "sourceSurveySparrowUpdateBaseUrlEuBasedAccount":
            suggest = "source_survey_sparrow_update_base_url_eu_based_account"
        elif key == "sourceSurveySparrowUpdateBaseUrlGlobalAccount":
            suggest = "source_survey_sparrow_update_base_url_global_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSurveySparrowConfigurationRegion. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSurveySparrowConfigurationRegion.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSurveySparrowConfigurationRegion.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_survey_sparrow_base_url_eu_based_account: Optional['outputs.SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlEuBasedAccount'] = None,
                 source_survey_sparrow_base_url_global_account: Optional['outputs.SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlGlobalAccount'] = None,
                 source_survey_sparrow_update_base_url_eu_based_account: Optional['outputs.SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlEuBasedAccount'] = None,
                 source_survey_sparrow_update_base_url_global_account: Optional['outputs.SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlGlobalAccount'] = None):
        if source_survey_sparrow_base_url_eu_based_account is not None:
            pulumi.set(__self__, "source_survey_sparrow_base_url_eu_based_account", source_survey_sparrow_base_url_eu_based_account)
        if source_survey_sparrow_base_url_global_account is not None:
            pulumi.set(__self__, "source_survey_sparrow_base_url_global_account", source_survey_sparrow_base_url_global_account)
        if source_survey_sparrow_update_base_url_eu_based_account is not None:
            pulumi.set(__self__, "source_survey_sparrow_update_base_url_eu_based_account", source_survey_sparrow_update_base_url_eu_based_account)
        if source_survey_sparrow_update_base_url_global_account is not None:
            pulumi.set(__self__, "source_survey_sparrow_update_base_url_global_account", source_survey_sparrow_update_base_url_global_account)

    @property
    @pulumi.getter(name="sourceSurveySparrowBaseUrlEuBasedAccount")
    def source_survey_sparrow_base_url_eu_based_account(self) -> Optional['outputs.SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlEuBasedAccount']:
        return pulumi.get(self, "source_survey_sparrow_base_url_eu_based_account")

    @property
    @pulumi.getter(name="sourceSurveySparrowBaseUrlGlobalAccount")
    def source_survey_sparrow_base_url_global_account(self) -> Optional['outputs.SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlGlobalAccount']:
        return pulumi.get(self, "source_survey_sparrow_base_url_global_account")

    @property
    @pulumi.getter(name="sourceSurveySparrowUpdateBaseUrlEuBasedAccount")
    def source_survey_sparrow_update_base_url_eu_based_account(self) -> Optional['outputs.SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlEuBasedAccount']:
        return pulumi.get(self, "source_survey_sparrow_update_base_url_eu_based_account")

    @property
    @pulumi.getter(name="sourceSurveySparrowUpdateBaseUrlGlobalAccount")
    def source_survey_sparrow_update_base_url_global_account(self) -> Optional['outputs.SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlGlobalAccount']:
        return pulumi.get(self, "source_survey_sparrow_update_base_url_global_account")


@pulumi.output_type
class SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlEuBasedAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "urlBase":
            suggest = "url_base"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlEuBasedAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlEuBasedAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlEuBasedAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url_base: Optional[str] = None):
        if url_base is not None:
            pulumi.set(__self__, "url_base", url_base)

    @property
    @pulumi.getter(name="urlBase")
    def url_base(self) -> Optional[str]:
        return pulumi.get(self, "url_base")


@pulumi.output_type
class SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlGlobalAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "urlBase":
            suggest = "url_base"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlGlobalAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlGlobalAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlGlobalAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url_base: Optional[str] = None):
        if url_base is not None:
            pulumi.set(__self__, "url_base", url_base)

    @property
    @pulumi.getter(name="urlBase")
    def url_base(self) -> Optional[str]:
        return pulumi.get(self, "url_base")


@pulumi.output_type
class SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlEuBasedAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "urlBase":
            suggest = "url_base"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlEuBasedAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlEuBasedAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlEuBasedAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url_base: Optional[str] = None):
        if url_base is not None:
            pulumi.set(__self__, "url_base", url_base)

    @property
    @pulumi.getter(name="urlBase")
    def url_base(self) -> Optional[str]:
        return pulumi.get(self, "url_base")


@pulumi.output_type
class SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlGlobalAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "urlBase":
            suggest = "url_base"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlGlobalAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlGlobalAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlGlobalAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url_base: Optional[str] = None):
        if url_base is not None:
            pulumi.set(__self__, "url_base", url_base)

    @property
    @pulumi.getter(name="urlBase")
    def url_base(self) -> Optional[str]:
        return pulumi.get(self, "url_base")


@pulumi.output_type
class SourceSurveymonkeyConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "surveyIds":
            suggest = "survey_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSurveymonkeyConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSurveymonkeyConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSurveymonkeyConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 start_date: str,
                 credentials: Optional['outputs.SourceSurveymonkeyConfigurationCredentials'] = None,
                 origin: Optional[str] = None,
                 survey_ids: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if survey_ids is not None:
            pulumi.set(__self__, "survey_ids", survey_ids)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourceSurveymonkeyConfigurationCredentials']:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def origin(self) -> Optional[str]:
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter(name="surveyIds")
    def survey_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "survey_ids")


@pulumi.output_type
class SourceSurveymonkeyConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "authMethod":
            suggest = "auth_method"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSurveymonkeyConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSurveymonkeyConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSurveymonkeyConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 auth_method: str,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_method", auth_method)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class SourceTempoConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiToken":
            suggest = "api_token"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceTempoConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceTempoConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceTempoConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token: str,
                 source_type: str):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceTheGuardianApiConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "endDate":
            suggest = "end_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceTheGuardianApiConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceTheGuardianApiConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceTheGuardianApiConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 source_type: str,
                 start_date: str,
                 end_date: Optional[str] = None,
                 query: Optional[str] = None,
                 section: Optional[str] = None,
                 tag: Optional[str] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if section is not None:
            pulumi.set(__self__, "section", section)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter
    def query(self) -> Optional[str]:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def section(self) -> Optional[str]:
        return pulumi.get(self, "section")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")


@pulumi.output_type
class SourceTiktokMarketingConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attributionWindow":
            suggest = "attribution_window"
        elif key == "endDate":
            suggest = "end_date"
        elif key == "includeDeleted":
            suggest = "include_deleted"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceTiktokMarketingConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceTiktokMarketingConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceTiktokMarketingConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attribution_window: Optional[int] = None,
                 credentials: Optional['outputs.SourceTiktokMarketingConfigurationCredentials'] = None,
                 end_date: Optional[str] = None,
                 include_deleted: Optional[bool] = None,
                 source_type: Optional[str] = None,
                 start_date: Optional[str] = None):
        if attribution_window is not None:
            pulumi.set(__self__, "attribution_window", attribution_window)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if include_deleted is not None:
            pulumi.set(__self__, "include_deleted", include_deleted)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="attributionWindow")
    def attribution_window(self) -> Optional[int]:
        return pulumi.get(self, "attribution_window")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourceTiktokMarketingConfigurationCredentials']:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="includeDeleted")
    def include_deleted(self) -> Optional[bool]:
        return pulumi.get(self, "include_deleted")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceTiktokMarketingConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceTiktokMarketingAuthenticationMethodOAuth20":
            suggest = "source_tiktok_marketing_authentication_method_o_auth20"
        elif key == "sourceTiktokMarketingAuthenticationMethodSandboxAccessToken":
            suggest = "source_tiktok_marketing_authentication_method_sandbox_access_token"
        elif key == "sourceTiktokMarketingUpdateAuthenticationMethodOAuth20":
            suggest = "source_tiktok_marketing_update_authentication_method_o_auth20"
        elif key == "sourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken":
            suggest = "source_tiktok_marketing_update_authentication_method_sandbox_access_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceTiktokMarketingConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceTiktokMarketingConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceTiktokMarketingConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_tiktok_marketing_authentication_method_o_auth20: Optional['outputs.SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodOAuth20'] = None,
                 source_tiktok_marketing_authentication_method_sandbox_access_token: Optional['outputs.SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodSandboxAccessToken'] = None,
                 source_tiktok_marketing_update_authentication_method_o_auth20: Optional['outputs.SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodOAuth20'] = None,
                 source_tiktok_marketing_update_authentication_method_sandbox_access_token: Optional['outputs.SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken'] = None):
        if source_tiktok_marketing_authentication_method_o_auth20 is not None:
            pulumi.set(__self__, "source_tiktok_marketing_authentication_method_o_auth20", source_tiktok_marketing_authentication_method_o_auth20)
        if source_tiktok_marketing_authentication_method_sandbox_access_token is not None:
            pulumi.set(__self__, "source_tiktok_marketing_authentication_method_sandbox_access_token", source_tiktok_marketing_authentication_method_sandbox_access_token)
        if source_tiktok_marketing_update_authentication_method_o_auth20 is not None:
            pulumi.set(__self__, "source_tiktok_marketing_update_authentication_method_o_auth20", source_tiktok_marketing_update_authentication_method_o_auth20)
        if source_tiktok_marketing_update_authentication_method_sandbox_access_token is not None:
            pulumi.set(__self__, "source_tiktok_marketing_update_authentication_method_sandbox_access_token", source_tiktok_marketing_update_authentication_method_sandbox_access_token)

    @property
    @pulumi.getter(name="sourceTiktokMarketingAuthenticationMethodOAuth20")
    def source_tiktok_marketing_authentication_method_o_auth20(self) -> Optional['outputs.SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodOAuth20']:
        return pulumi.get(self, "source_tiktok_marketing_authentication_method_o_auth20")

    @property
    @pulumi.getter(name="sourceTiktokMarketingAuthenticationMethodSandboxAccessToken")
    def source_tiktok_marketing_authentication_method_sandbox_access_token(self) -> Optional['outputs.SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodSandboxAccessToken']:
        return pulumi.get(self, "source_tiktok_marketing_authentication_method_sandbox_access_token")

    @property
    @pulumi.getter(name="sourceTiktokMarketingUpdateAuthenticationMethodOAuth20")
    def source_tiktok_marketing_update_authentication_method_o_auth20(self) -> Optional['outputs.SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodOAuth20']:
        return pulumi.get(self, "source_tiktok_marketing_update_authentication_method_o_auth20")

    @property
    @pulumi.getter(name="sourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken")
    def source_tiktok_marketing_update_authentication_method_sandbox_access_token(self) -> Optional['outputs.SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken']:
        return pulumi.get(self, "source_tiktok_marketing_update_authentication_method_sandbox_access_token")


@pulumi.output_type
class SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "appId":
            suggest = "app_id"
        elif key == "advertiserId":
            suggest = "advertiser_id"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 app_id: str,
                 secret: str,
                 advertiser_id: Optional[str] = None,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "secret", secret)
        if advertiser_id is not None:
            pulumi.set(__self__, "advertiser_id", advertiser_id)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter
    def secret(self) -> str:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="advertiserId")
    def advertiser_id(self) -> Optional[str]:
        return pulumi.get(self, "advertiser_id")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodSandboxAccessToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "advertiserId":
            suggest = "advertiser_id"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodSandboxAccessToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodSandboxAccessToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodSandboxAccessToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 advertiser_id: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "advertiser_id", advertiser_id)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="advertiserId")
    def advertiser_id(self) -> str:
        return pulumi.get(self, "advertiser_id")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "appId":
            suggest = "app_id"
        elif key == "advertiserId":
            suggest = "advertiser_id"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 app_id: str,
                 secret: str,
                 advertiser_id: Optional[str] = None,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "secret", secret)
        if advertiser_id is not None:
            pulumi.set(__self__, "advertiser_id", advertiser_id)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter
    def secret(self) -> str:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="advertiserId")
    def advertiser_id(self) -> Optional[str]:
        return pulumi.get(self, "advertiser_id")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "advertiserId":
            suggest = "advertiser_id"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 advertiser_id: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "advertiser_id", advertiser_id)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="advertiserId")
    def advertiser_id(self) -> str:
        return pulumi.get(self, "advertiser_id")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceTodoistConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceTodoistConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceTodoistConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceTodoistConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 token: str):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def token(self) -> str:
        return pulumi.get(self, "token")


@pulumi.output_type
class SourceTrelloConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "boardIds":
            suggest = "board_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceTrelloConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceTrelloConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceTrelloConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 source_type: str,
                 start_date: str,
                 token: str,
                 board_ids: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "token", token)
        if board_ids is not None:
            pulumi.set(__self__, "board_ids", board_ids)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def token(self) -> str:
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="boardIds")
    def board_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "board_ids")


@pulumi.output_type
class SourceTrustpilotConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "businessUnits":
            suggest = "business_units"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceTrustpilotConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceTrustpilotConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceTrustpilotConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 business_units: Sequence[str],
                 credentials: 'outputs.SourceTrustpilotConfigurationCredentials',
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "business_units", business_units)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="businessUnits")
    def business_units(self) -> Sequence[str]:
        return pulumi.get(self, "business_units")

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.SourceTrustpilotConfigurationCredentials':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceTrustpilotConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceTrustpilotAuthorizationMethodApiKey":
            suggest = "source_trustpilot_authorization_method_api_key"
        elif key == "sourceTrustpilotAuthorizationMethodOAuth20":
            suggest = "source_trustpilot_authorization_method_o_auth20"
        elif key == "sourceTrustpilotUpdateAuthorizationMethodApiKey":
            suggest = "source_trustpilot_update_authorization_method_api_key"
        elif key == "sourceTrustpilotUpdateAuthorizationMethodOAuth20":
            suggest = "source_trustpilot_update_authorization_method_o_auth20"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceTrustpilotConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceTrustpilotConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceTrustpilotConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_trustpilot_authorization_method_api_key: Optional['outputs.SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodApiKey'] = None,
                 source_trustpilot_authorization_method_o_auth20: Optional['outputs.SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodOAuth20'] = None,
                 source_trustpilot_update_authorization_method_api_key: Optional['outputs.SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodApiKey'] = None,
                 source_trustpilot_update_authorization_method_o_auth20: Optional['outputs.SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodOAuth20'] = None):
        if source_trustpilot_authorization_method_api_key is not None:
            pulumi.set(__self__, "source_trustpilot_authorization_method_api_key", source_trustpilot_authorization_method_api_key)
        if source_trustpilot_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_trustpilot_authorization_method_o_auth20", source_trustpilot_authorization_method_o_auth20)
        if source_trustpilot_update_authorization_method_api_key is not None:
            pulumi.set(__self__, "source_trustpilot_update_authorization_method_api_key", source_trustpilot_update_authorization_method_api_key)
        if source_trustpilot_update_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_trustpilot_update_authorization_method_o_auth20", source_trustpilot_update_authorization_method_o_auth20)

    @property
    @pulumi.getter(name="sourceTrustpilotAuthorizationMethodApiKey")
    def source_trustpilot_authorization_method_api_key(self) -> Optional['outputs.SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodApiKey']:
        return pulumi.get(self, "source_trustpilot_authorization_method_api_key")

    @property
    @pulumi.getter(name="sourceTrustpilotAuthorizationMethodOAuth20")
    def source_trustpilot_authorization_method_o_auth20(self) -> Optional['outputs.SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodOAuth20']:
        return pulumi.get(self, "source_trustpilot_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourceTrustpilotUpdateAuthorizationMethodApiKey")
    def source_trustpilot_update_authorization_method_api_key(self) -> Optional['outputs.SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodApiKey']:
        return pulumi.get(self, "source_trustpilot_update_authorization_method_api_key")

    @property
    @pulumi.getter(name="sourceTrustpilotUpdateAuthorizationMethodOAuth20")
    def source_trustpilot_update_authorization_method_o_auth20(self) -> Optional['outputs.SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodOAuth20']:
        return pulumi.get(self, "source_trustpilot_update_authorization_method_o_auth20")


@pulumi.output_type
class SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodApiKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodApiKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodApiKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodApiKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "tokenExpiryDate":
            suggest = "token_expiry_date"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 token_expiry_date: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> str:
        return pulumi.get(self, "token_expiry_date")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodApiKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodApiKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodApiKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodApiKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "tokenExpiryDate":
            suggest = "token_expiry_date"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 token_expiry_date: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> str:
        return pulumi.get(self, "token_expiry_date")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceTvmazeScheduleConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domesticScheduleCountryCode":
            suggest = "domestic_schedule_country_code"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "endDate":
            suggest = "end_date"
        elif key == "webScheduleCountryCode":
            suggest = "web_schedule_country_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceTvmazeScheduleConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceTvmazeScheduleConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceTvmazeScheduleConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domestic_schedule_country_code: str,
                 source_type: str,
                 start_date: str,
                 end_date: Optional[str] = None,
                 web_schedule_country_code: Optional[str] = None):
        pulumi.set(__self__, "domestic_schedule_country_code", domestic_schedule_country_code)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if web_schedule_country_code is not None:
            pulumi.set(__self__, "web_schedule_country_code", web_schedule_country_code)

    @property
    @pulumi.getter(name="domesticScheduleCountryCode")
    def domestic_schedule_country_code(self) -> str:
        return pulumi.get(self, "domestic_schedule_country_code")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="webScheduleCountryCode")
    def web_schedule_country_code(self) -> Optional[str]:
        return pulumi.get(self, "web_schedule_country_code")


@pulumi.output_type
class SourceTwilioConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountSid":
            suggest = "account_sid"
        elif key == "authToken":
            suggest = "auth_token"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "lookbackWindow":
            suggest = "lookback_window"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceTwilioConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceTwilioConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceTwilioConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_sid: str,
                 auth_token: str,
                 source_type: str,
                 start_date: str,
                 lookback_window: Optional[int] = None):
        pulumi.set(__self__, "account_sid", account_sid)
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if lookback_window is not None:
            pulumi.set(__self__, "lookback_window", lookback_window)

    @property
    @pulumi.getter(name="accountSid")
    def account_sid(self) -> str:
        return pulumi.get(self, "account_sid")

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> str:
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="lookbackWindow")
    def lookback_window(self) -> Optional[int]:
        return pulumi.get(self, "lookback_window")


@pulumi.output_type
class SourceTwilioTaskrouterConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountSid":
            suggest = "account_sid"
        elif key == "authToken":
            suggest = "auth_token"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceTwilioTaskrouterConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceTwilioTaskrouterConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceTwilioTaskrouterConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_sid: str,
                 auth_token: str,
                 source_type: str):
        pulumi.set(__self__, "account_sid", account_sid)
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="accountSid")
    def account_sid(self) -> str:
        return pulumi.get(self, "account_sid")

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> str:
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceTwitterConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "endDate":
            suggest = "end_date"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceTwitterConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceTwitterConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceTwitterConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 query: str,
                 source_type: str,
                 end_date: Optional[str] = None,
                 start_date: Optional[str] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "source_type", source_type)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceTypeformConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "formIds":
            suggest = "form_ids"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceTypeformConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceTypeformConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceTypeformConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials: 'outputs.SourceTypeformConfigurationCredentials',
                 source_type: str,
                 form_ids: Optional[Sequence[str]] = None,
                 start_date: Optional[str] = None):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)
        if form_ids is not None:
            pulumi.set(__self__, "form_ids", form_ids)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.SourceTypeformConfigurationCredentials':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="formIds")
    def form_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "form_ids")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceTypeformConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceTypeformAuthorizationMethodOAuth20":
            suggest = "source_typeform_authorization_method_o_auth20"
        elif key == "sourceTypeformAuthorizationMethodPrivateToken":
            suggest = "source_typeform_authorization_method_private_token"
        elif key == "sourceTypeformUpdateAuthorizationMethodOAuth20":
            suggest = "source_typeform_update_authorization_method_o_auth20"
        elif key == "sourceTypeformUpdateAuthorizationMethodPrivateToken":
            suggest = "source_typeform_update_authorization_method_private_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceTypeformConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceTypeformConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceTypeformConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_typeform_authorization_method_o_auth20: Optional['outputs.SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodOAuth20'] = None,
                 source_typeform_authorization_method_private_token: Optional['outputs.SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodPrivateToken'] = None,
                 source_typeform_update_authorization_method_o_auth20: Optional['outputs.SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodOAuth20'] = None,
                 source_typeform_update_authorization_method_private_token: Optional['outputs.SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodPrivateToken'] = None):
        if source_typeform_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_typeform_authorization_method_o_auth20", source_typeform_authorization_method_o_auth20)
        if source_typeform_authorization_method_private_token is not None:
            pulumi.set(__self__, "source_typeform_authorization_method_private_token", source_typeform_authorization_method_private_token)
        if source_typeform_update_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_typeform_update_authorization_method_o_auth20", source_typeform_update_authorization_method_o_auth20)
        if source_typeform_update_authorization_method_private_token is not None:
            pulumi.set(__self__, "source_typeform_update_authorization_method_private_token", source_typeform_update_authorization_method_private_token)

    @property
    @pulumi.getter(name="sourceTypeformAuthorizationMethodOAuth20")
    def source_typeform_authorization_method_o_auth20(self) -> Optional['outputs.SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodOAuth20']:
        return pulumi.get(self, "source_typeform_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourceTypeformAuthorizationMethodPrivateToken")
    def source_typeform_authorization_method_private_token(self) -> Optional['outputs.SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodPrivateToken']:
        return pulumi.get(self, "source_typeform_authorization_method_private_token")

    @property
    @pulumi.getter(name="sourceTypeformUpdateAuthorizationMethodOAuth20")
    def source_typeform_update_authorization_method_o_auth20(self) -> Optional['outputs.SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodOAuth20']:
        return pulumi.get(self, "source_typeform_update_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourceTypeformUpdateAuthorizationMethodPrivateToken")
    def source_typeform_update_authorization_method_private_token(self) -> Optional['outputs.SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodPrivateToken']:
        return pulumi.get(self, "source_typeform_update_authorization_method_private_token")


@pulumi.output_type
class SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "tokenExpiryDate":
            suggest = "token_expiry_date"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 token_expiry_date: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> str:
        return pulumi.get(self, "token_expiry_date")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodPrivateToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodPrivateToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodPrivateToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodPrivateToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "tokenExpiryDate":
            suggest = "token_expiry_date"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 token_expiry_date: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> str:
        return pulumi.get(self, "token_expiry_date")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodPrivateToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodPrivateToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodPrivateToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodPrivateToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceUsCensusConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "queryPath":
            suggest = "query_path"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "queryParams":
            suggest = "query_params"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceUsCensusConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceUsCensusConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceUsCensusConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 query_path: str,
                 source_type: str,
                 query_params: Optional[str] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "query_path", query_path)
        pulumi.set(__self__, "source_type", source_type)
        if query_params is not None:
            pulumi.set(__self__, "query_params", query_params)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="queryPath")
    def query_path(self) -> str:
        return pulumi.get(self, "query_path")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="queryParams")
    def query_params(self) -> Optional[str]:
        return pulumi.get(self, "query_params")


@pulumi.output_type
class SourceVantageConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceVantageConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceVantageConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceVantageConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 source_type: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceWebflowConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "siteId":
            suggest = "site_id"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceWebflowConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceWebflowConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceWebflowConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 site_id: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "site_id", site_id)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> str:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceWhiskyHunterConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceWhiskyHunterConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceWhiskyHunterConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceWhiskyHunterConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: Optional[str] = None):
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceWikipediaPageviewsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceWikipediaPageviewsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceWikipediaPageviewsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceWikipediaPageviewsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access: str,
                 agent: str,
                 article: str,
                 country: str,
                 end: str,
                 project: str,
                 source_type: str,
                 start: str):
        pulumi.set(__self__, "access", access)
        pulumi.set(__self__, "agent", agent)
        pulumi.set(__self__, "article", article)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def access(self) -> str:
        return pulumi.get(self, "access")

    @property
    @pulumi.getter
    def agent(self) -> str:
        return pulumi.get(self, "agent")

    @property
    @pulumi.getter
    def article(self) -> str:
        return pulumi.get(self, "article")

    @property
    @pulumi.getter
    def country(self) -> str:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def end(self) -> str:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def project(self) -> str:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def start(self) -> str:
        return pulumi.get(self, "start")


@pulumi.output_type
class SourceWoocommerceConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "apiSecret":
            suggest = "api_secret"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceWoocommerceConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceWoocommerceConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceWoocommerceConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 api_secret: str,
                 shop: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "api_secret", api_secret)
        pulumi.set(__self__, "shop", shop)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="apiSecret")
    def api_secret(self) -> str:
        return pulumi.get(self, "api_secret")

    @property
    @pulumi.getter
    def shop(self) -> str:
        return pulumi.get(self, "shop")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceXeroConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceXeroConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceXeroConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceXeroConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication: 'outputs.SourceXeroConfigurationAuthentication',
                 source_type: str,
                 start_date: str,
                 tenant_id: str):
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter
    def authentication(self) -> 'outputs.SourceXeroConfigurationAuthentication':
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class SourceXeroConfigurationAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "tokenExpiryDate":
            suggest = "token_expiry_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceXeroConfigurationAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceXeroConfigurationAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceXeroConfigurationAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 token_expiry_date: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> str:
        return pulumi.get(self, "token_expiry_date")


@pulumi.output_type
class SourceXkcdConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceXkcdConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceXkcdConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceXkcdConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: Optional[str] = None):
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceYandexMetricaConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authToken":
            suggest = "auth_token"
        elif key == "counterId":
            suggest = "counter_id"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "endDate":
            suggest = "end_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceYandexMetricaConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceYandexMetricaConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceYandexMetricaConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_token: str,
                 counter_id: str,
                 source_type: str,
                 start_date: str,
                 end_date: Optional[str] = None):
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "counter_id", counter_id)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> str:
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="counterId")
    def counter_id(self) -> str:
        return pulumi.get(self, "counter_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")


@pulumi.output_type
class SourceYotpoConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "appKey":
            suggest = "app_key"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceYotpoConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceYotpoConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceYotpoConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 app_key: str,
                 email: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "app_key", app_key)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="appKey")
    def app_key(self) -> str:
        return pulumi.get(self, "app_key")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceYouniumConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "legalEntity":
            suggest = "legal_entity"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceYouniumConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceYouniumConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceYouniumConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 legal_entity: str,
                 password: str,
                 source_type: str,
                 username: str,
                 playground: Optional[bool] = None):
        pulumi.set(__self__, "legal_entity", legal_entity)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "username", username)
        if playground is not None:
            pulumi.set(__self__, "playground", playground)

    @property
    @pulumi.getter(name="legalEntity")
    def legal_entity(self) -> str:
        return pulumi.get(self, "legal_entity")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def playground(self) -> Optional[bool]:
        return pulumi.get(self, "playground")


@pulumi.output_type
class SourceYoutubeAnalyticsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceYoutubeAnalyticsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceYoutubeAnalyticsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceYoutubeAnalyticsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials: 'outputs.SourceYoutubeAnalyticsConfigurationCredentials',
                 source_type: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.SourceYoutubeAnalyticsConfigurationCredentials':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceYoutubeAnalyticsConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "additionalProperties":
            suggest = "additional_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceYoutubeAnalyticsConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceYoutubeAnalyticsConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceYoutubeAnalyticsConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class SourceZendeskChatConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceZendeskChatConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceZendeskChatConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceZendeskChatConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 start_date: str,
                 credentials: Optional['outputs.SourceZendeskChatConfigurationCredentials'] = None,
                 subdomain: Optional[str] = None):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourceZendeskChatConfigurationCredentials']:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[str]:
        return pulumi.get(self, "subdomain")


@pulumi.output_type
class SourceZendeskChatConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceZendeskChatAuthorizationMethodAccessToken":
            suggest = "source_zendesk_chat_authorization_method_access_token"
        elif key == "sourceZendeskChatAuthorizationMethodOAuth20":
            suggest = "source_zendesk_chat_authorization_method_o_auth20"
        elif key == "sourceZendeskChatUpdateAuthorizationMethodAccessToken":
            suggest = "source_zendesk_chat_update_authorization_method_access_token"
        elif key == "sourceZendeskChatUpdateAuthorizationMethodOAuth20":
            suggest = "source_zendesk_chat_update_authorization_method_o_auth20"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceZendeskChatConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceZendeskChatConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceZendeskChatConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_zendesk_chat_authorization_method_access_token: Optional['outputs.SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodAccessToken'] = None,
                 source_zendesk_chat_authorization_method_o_auth20: Optional['outputs.SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodOAuth20'] = None,
                 source_zendesk_chat_update_authorization_method_access_token: Optional['outputs.SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodAccessToken'] = None,
                 source_zendesk_chat_update_authorization_method_o_auth20: Optional['outputs.SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodOAuth20'] = None):
        if source_zendesk_chat_authorization_method_access_token is not None:
            pulumi.set(__self__, "source_zendesk_chat_authorization_method_access_token", source_zendesk_chat_authorization_method_access_token)
        if source_zendesk_chat_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_zendesk_chat_authorization_method_o_auth20", source_zendesk_chat_authorization_method_o_auth20)
        if source_zendesk_chat_update_authorization_method_access_token is not None:
            pulumi.set(__self__, "source_zendesk_chat_update_authorization_method_access_token", source_zendesk_chat_update_authorization_method_access_token)
        if source_zendesk_chat_update_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_zendesk_chat_update_authorization_method_o_auth20", source_zendesk_chat_update_authorization_method_o_auth20)

    @property
    @pulumi.getter(name="sourceZendeskChatAuthorizationMethodAccessToken")
    def source_zendesk_chat_authorization_method_access_token(self) -> Optional['outputs.SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodAccessToken']:
        return pulumi.get(self, "source_zendesk_chat_authorization_method_access_token")

    @property
    @pulumi.getter(name="sourceZendeskChatAuthorizationMethodOAuth20")
    def source_zendesk_chat_authorization_method_o_auth20(self) -> Optional['outputs.SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodOAuth20']:
        return pulumi.get(self, "source_zendesk_chat_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourceZendeskChatUpdateAuthorizationMethodAccessToken")
    def source_zendesk_chat_update_authorization_method_access_token(self) -> Optional['outputs.SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodAccessToken']:
        return pulumi.get(self, "source_zendesk_chat_update_authorization_method_access_token")

    @property
    @pulumi.getter(name="sourceZendeskChatUpdateAuthorizationMethodOAuth20")
    def source_zendesk_chat_update_authorization_method_o_auth20(self) -> Optional['outputs.SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodOAuth20']:
        return pulumi.get(self, "source_zendesk_chat_update_authorization_method_o_auth20")


@pulumi.output_type
class SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodAccessToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodAccessToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodAccessToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodAccessToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 credentials: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter
    def credentials(self) -> str:
        return pulumi.get(self, "credentials")


@pulumi.output_type
class SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials: str,
                 access_token: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 refresh_token: Optional[str] = None):
        pulumi.set(__self__, "credentials", credentials)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter
    def credentials(self) -> str:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[str]:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[str]:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodAccessToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodAccessToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodAccessToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodAccessToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 credentials: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter
    def credentials(self) -> str:
        return pulumi.get(self, "credentials")


@pulumi.output_type
class SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials: str,
                 access_token: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 refresh_token: Optional[str] = None):
        pulumi.set(__self__, "credentials", credentials)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter
    def credentials(self) -> str:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[str]:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[str]:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class SourceZendeskSunshineConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceZendeskSunshineConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceZendeskSunshineConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceZendeskSunshineConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 start_date: str,
                 subdomain: str,
                 credentials: Optional['outputs.SourceZendeskSunshineConfigurationCredentials'] = None):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "subdomain", subdomain)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def subdomain(self) -> str:
        return pulumi.get(self, "subdomain")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourceZendeskSunshineConfigurationCredentials']:
        return pulumi.get(self, "credentials")


@pulumi.output_type
class SourceZendeskSunshineConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceZendeskSunshineAuthorizationMethodApiToken":
            suggest = "source_zendesk_sunshine_authorization_method_api_token"
        elif key == "sourceZendeskSunshineAuthorizationMethodOAuth20":
            suggest = "source_zendesk_sunshine_authorization_method_o_auth20"
        elif key == "sourceZendeskSunshineUpdateAuthorizationMethodApiToken":
            suggest = "source_zendesk_sunshine_update_authorization_method_api_token"
        elif key == "sourceZendeskSunshineUpdateAuthorizationMethodOAuth20":
            suggest = "source_zendesk_sunshine_update_authorization_method_o_auth20"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceZendeskSunshineConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceZendeskSunshineConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceZendeskSunshineConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_zendesk_sunshine_authorization_method_api_token: Optional['outputs.SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodApiToken'] = None,
                 source_zendesk_sunshine_authorization_method_o_auth20: Optional['outputs.SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodOAuth20'] = None,
                 source_zendesk_sunshine_update_authorization_method_api_token: Optional['outputs.SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodApiToken'] = None,
                 source_zendesk_sunshine_update_authorization_method_o_auth20: Optional['outputs.SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodOAuth20'] = None):
        if source_zendesk_sunshine_authorization_method_api_token is not None:
            pulumi.set(__self__, "source_zendesk_sunshine_authorization_method_api_token", source_zendesk_sunshine_authorization_method_api_token)
        if source_zendesk_sunshine_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_zendesk_sunshine_authorization_method_o_auth20", source_zendesk_sunshine_authorization_method_o_auth20)
        if source_zendesk_sunshine_update_authorization_method_api_token is not None:
            pulumi.set(__self__, "source_zendesk_sunshine_update_authorization_method_api_token", source_zendesk_sunshine_update_authorization_method_api_token)
        if source_zendesk_sunshine_update_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_zendesk_sunshine_update_authorization_method_o_auth20", source_zendesk_sunshine_update_authorization_method_o_auth20)

    @property
    @pulumi.getter(name="sourceZendeskSunshineAuthorizationMethodApiToken")
    def source_zendesk_sunshine_authorization_method_api_token(self) -> Optional['outputs.SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodApiToken']:
        return pulumi.get(self, "source_zendesk_sunshine_authorization_method_api_token")

    @property
    @pulumi.getter(name="sourceZendeskSunshineAuthorizationMethodOAuth20")
    def source_zendesk_sunshine_authorization_method_o_auth20(self) -> Optional['outputs.SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodOAuth20']:
        return pulumi.get(self, "source_zendesk_sunshine_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourceZendeskSunshineUpdateAuthorizationMethodApiToken")
    def source_zendesk_sunshine_update_authorization_method_api_token(self) -> Optional['outputs.SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodApiToken']:
        return pulumi.get(self, "source_zendesk_sunshine_update_authorization_method_api_token")

    @property
    @pulumi.getter(name="sourceZendeskSunshineUpdateAuthorizationMethodOAuth20")
    def source_zendesk_sunshine_update_authorization_method_o_auth20(self) -> Optional['outputs.SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodOAuth20']:
        return pulumi.get(self, "source_zendesk_sunshine_update_authorization_method_o_auth20")


@pulumi.output_type
class SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodApiToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiToken":
            suggest = "api_token"
        elif key == "authMethod":
            suggest = "auth_method"
        elif key == "additionalProperties":
            suggest = "additional_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodApiToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodApiToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodApiToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token: str,
                 auth_method: str,
                 email: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "email", email)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "authMethod":
            suggest = "auth_method"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "additionalProperties":
            suggest = "additional_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 auth_method: str,
                 client_id: str,
                 client_secret: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodApiToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiToken":
            suggest = "api_token"
        elif key == "authMethod":
            suggest = "auth_method"
        elif key == "additionalProperties":
            suggest = "additional_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodApiToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodApiToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodApiToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token: str,
                 auth_method: str,
                 email: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "email", email)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "authMethod":
            suggest = "auth_method"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "additionalProperties":
            suggest = "additional_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 auth_method: str,
                 client_id: str,
                 client_secret: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class SourceZendeskSupportConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "ignorePagination":
            suggest = "ignore_pagination"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceZendeskSupportConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceZendeskSupportConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceZendeskSupportConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 start_date: str,
                 subdomain: str,
                 credentials: Optional['outputs.SourceZendeskSupportConfigurationCredentials'] = None,
                 ignore_pagination: Optional[bool] = None):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "subdomain", subdomain)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if ignore_pagination is not None:
            pulumi.set(__self__, "ignore_pagination", ignore_pagination)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def subdomain(self) -> str:
        return pulumi.get(self, "subdomain")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourceZendeskSupportConfigurationCredentials']:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="ignorePagination")
    def ignore_pagination(self) -> Optional[bool]:
        return pulumi.get(self, "ignore_pagination")


@pulumi.output_type
class SourceZendeskSupportConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceZendeskSupportAuthenticationApiToken":
            suggest = "source_zendesk_support_authentication_api_token"
        elif key == "sourceZendeskSupportAuthenticationOAuth20":
            suggest = "source_zendesk_support_authentication_o_auth20"
        elif key == "sourceZendeskSupportUpdateAuthenticationApiToken":
            suggest = "source_zendesk_support_update_authentication_api_token"
        elif key == "sourceZendeskSupportUpdateAuthenticationOAuth20":
            suggest = "source_zendesk_support_update_authentication_o_auth20"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceZendeskSupportConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceZendeskSupportConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceZendeskSupportConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_zendesk_support_authentication_api_token: Optional['outputs.SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationApiToken'] = None,
                 source_zendesk_support_authentication_o_auth20: Optional['outputs.SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationOAuth20'] = None,
                 source_zendesk_support_update_authentication_api_token: Optional['outputs.SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationApiToken'] = None,
                 source_zendesk_support_update_authentication_o_auth20: Optional['outputs.SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationOAuth20'] = None):
        if source_zendesk_support_authentication_api_token is not None:
            pulumi.set(__self__, "source_zendesk_support_authentication_api_token", source_zendesk_support_authentication_api_token)
        if source_zendesk_support_authentication_o_auth20 is not None:
            pulumi.set(__self__, "source_zendesk_support_authentication_o_auth20", source_zendesk_support_authentication_o_auth20)
        if source_zendesk_support_update_authentication_api_token is not None:
            pulumi.set(__self__, "source_zendesk_support_update_authentication_api_token", source_zendesk_support_update_authentication_api_token)
        if source_zendesk_support_update_authentication_o_auth20 is not None:
            pulumi.set(__self__, "source_zendesk_support_update_authentication_o_auth20", source_zendesk_support_update_authentication_o_auth20)

    @property
    @pulumi.getter(name="sourceZendeskSupportAuthenticationApiToken")
    def source_zendesk_support_authentication_api_token(self) -> Optional['outputs.SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationApiToken']:
        return pulumi.get(self, "source_zendesk_support_authentication_api_token")

    @property
    @pulumi.getter(name="sourceZendeskSupportAuthenticationOAuth20")
    def source_zendesk_support_authentication_o_auth20(self) -> Optional['outputs.SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationOAuth20']:
        return pulumi.get(self, "source_zendesk_support_authentication_o_auth20")

    @property
    @pulumi.getter(name="sourceZendeskSupportUpdateAuthenticationApiToken")
    def source_zendesk_support_update_authentication_api_token(self) -> Optional['outputs.SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationApiToken']:
        return pulumi.get(self, "source_zendesk_support_update_authentication_api_token")

    @property
    @pulumi.getter(name="sourceZendeskSupportUpdateAuthenticationOAuth20")
    def source_zendesk_support_update_authentication_o_auth20(self) -> Optional['outputs.SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationOAuth20']:
        return pulumi.get(self, "source_zendesk_support_update_authentication_o_auth20")


@pulumi.output_type
class SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationApiToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiToken":
            suggest = "api_token"
        elif key == "additionalProperties":
            suggest = "additional_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationApiToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationApiToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationApiToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token: str,
                 email: str,
                 additional_properties: Optional[str] = None,
                 credentials: Optional[str] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "email", email)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter
    def credentials(self) -> Optional[str]:
        return pulumi.get(self, "credentials")


@pulumi.output_type
class SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "additionalProperties":
            suggest = "additional_properties"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 additional_properties: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 credentials: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter
    def credentials(self) -> Optional[str]:
        return pulumi.get(self, "credentials")


@pulumi.output_type
class SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationApiToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiToken":
            suggest = "api_token"
        elif key == "additionalProperties":
            suggest = "additional_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationApiToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationApiToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationApiToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token: str,
                 email: str,
                 additional_properties: Optional[str] = None,
                 credentials: Optional[str] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "email", email)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter
    def credentials(self) -> Optional[str]:
        return pulumi.get(self, "credentials")


@pulumi.output_type
class SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "additionalProperties":
            suggest = "additional_properties"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 additional_properties: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 credentials: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter
    def credentials(self) -> Optional[str]:
        return pulumi.get(self, "credentials")


@pulumi.output_type
class SourceZendeskTalkConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceZendeskTalkConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceZendeskTalkConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceZendeskTalkConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 start_date: str,
                 subdomain: str,
                 credentials: Optional['outputs.SourceZendeskTalkConfigurationCredentials'] = None):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "subdomain", subdomain)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def subdomain(self) -> str:
        return pulumi.get(self, "subdomain")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourceZendeskTalkConfigurationCredentials']:
        return pulumi.get(self, "credentials")


@pulumi.output_type
class SourceZendeskTalkConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceZendeskTalkAuthenticationApiToken":
            suggest = "source_zendesk_talk_authentication_api_token"
        elif key == "sourceZendeskTalkAuthenticationOAuth20":
            suggest = "source_zendesk_talk_authentication_o_auth20"
        elif key == "sourceZendeskTalkUpdateAuthenticationApiToken":
            suggest = "source_zendesk_talk_update_authentication_api_token"
        elif key == "sourceZendeskTalkUpdateAuthenticationOAuth20":
            suggest = "source_zendesk_talk_update_authentication_o_auth20"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceZendeskTalkConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceZendeskTalkConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceZendeskTalkConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_zendesk_talk_authentication_api_token: Optional['outputs.SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationApiToken'] = None,
                 source_zendesk_talk_authentication_o_auth20: Optional['outputs.SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationOAuth20'] = None,
                 source_zendesk_talk_update_authentication_api_token: Optional['outputs.SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationApiToken'] = None,
                 source_zendesk_talk_update_authentication_o_auth20: Optional['outputs.SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationOAuth20'] = None):
        if source_zendesk_talk_authentication_api_token is not None:
            pulumi.set(__self__, "source_zendesk_talk_authentication_api_token", source_zendesk_talk_authentication_api_token)
        if source_zendesk_talk_authentication_o_auth20 is not None:
            pulumi.set(__self__, "source_zendesk_talk_authentication_o_auth20", source_zendesk_talk_authentication_o_auth20)
        if source_zendesk_talk_update_authentication_api_token is not None:
            pulumi.set(__self__, "source_zendesk_talk_update_authentication_api_token", source_zendesk_talk_update_authentication_api_token)
        if source_zendesk_talk_update_authentication_o_auth20 is not None:
            pulumi.set(__self__, "source_zendesk_talk_update_authentication_o_auth20", source_zendesk_talk_update_authentication_o_auth20)

    @property
    @pulumi.getter(name="sourceZendeskTalkAuthenticationApiToken")
    def source_zendesk_talk_authentication_api_token(self) -> Optional['outputs.SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationApiToken']:
        return pulumi.get(self, "source_zendesk_talk_authentication_api_token")

    @property
    @pulumi.getter(name="sourceZendeskTalkAuthenticationOAuth20")
    def source_zendesk_talk_authentication_o_auth20(self) -> Optional['outputs.SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationOAuth20']:
        return pulumi.get(self, "source_zendesk_talk_authentication_o_auth20")

    @property
    @pulumi.getter(name="sourceZendeskTalkUpdateAuthenticationApiToken")
    def source_zendesk_talk_update_authentication_api_token(self) -> Optional['outputs.SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationApiToken']:
        return pulumi.get(self, "source_zendesk_talk_update_authentication_api_token")

    @property
    @pulumi.getter(name="sourceZendeskTalkUpdateAuthenticationOAuth20")
    def source_zendesk_talk_update_authentication_o_auth20(self) -> Optional['outputs.SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationOAuth20']:
        return pulumi.get(self, "source_zendesk_talk_update_authentication_o_auth20")


@pulumi.output_type
class SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationApiToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiToken":
            suggest = "api_token"
        elif key == "additionalProperties":
            suggest = "additional_properties"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationApiToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationApiToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationApiToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token: str,
                 email: str,
                 additional_properties: Optional[str] = None,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "email", email)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "additionalProperties":
            suggest = "additional_properties"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 additional_properties: Optional[str] = None,
                 auth_type: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationApiToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiToken":
            suggest = "api_token"
        elif key == "additionalProperties":
            suggest = "additional_properties"
        elif key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationApiToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationApiToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationApiToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token: str,
                 email: str,
                 additional_properties: Optional[str] = None,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "email", email)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "additionalProperties":
            suggest = "additional_properties"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 additional_properties: Optional[str] = None,
                 auth_type: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class SourceZenloopConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiToken":
            suggest = "api_token"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "dateFrom":
            suggest = "date_from"
        elif key == "surveyGroupId":
            suggest = "survey_group_id"
        elif key == "surveyId":
            suggest = "survey_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceZenloopConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceZenloopConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceZenloopConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token: str,
                 source_type: str,
                 date_from: Optional[str] = None,
                 survey_group_id: Optional[str] = None,
                 survey_id: Optional[str] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "source_type", source_type)
        if date_from is not None:
            pulumi.set(__self__, "date_from", date_from)
        if survey_group_id is not None:
            pulumi.set(__self__, "survey_group_id", survey_group_id)
        if survey_id is not None:
            pulumi.set(__self__, "survey_id", survey_id)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="dateFrom")
    def date_from(self) -> Optional[str]:
        return pulumi.get(self, "date_from")

    @property
    @pulumi.getter(name="surveyGroupId")
    def survey_group_id(self) -> Optional[str]:
        return pulumi.get(self, "survey_group_id")

    @property
    @pulumi.getter(name="surveyId")
    def survey_id(self) -> Optional[str]:
        return pulumi.get(self, "survey_id")


@pulumi.output_type
class SourceZohoCrmConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "dcRegion":
            suggest = "dc_region"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDatetime":
            suggest = "start_datetime"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceZohoCrmConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceZohoCrmConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceZohoCrmConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 dc_region: str,
                 edition: str,
                 environment: str,
                 refresh_token: str,
                 source_type: str,
                 start_datetime: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "dc_region", dc_region)
        pulumi.set(__self__, "edition", edition)
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "source_type", source_type)
        if start_datetime is not None:
            pulumi.set(__self__, "start_datetime", start_datetime)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="dcRegion")
    def dc_region(self) -> str:
        return pulumi.get(self, "dc_region")

    @property
    @pulumi.getter
    def edition(self) -> str:
        return pulumi.get(self, "edition")

    @property
    @pulumi.getter
    def environment(self) -> str:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDatetime")
    def start_datetime(self) -> Optional[str]:
        return pulumi.get(self, "start_datetime")


@pulumi.output_type
class SourceZoomConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jwtToken":
            suggest = "jwt_token"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceZoomConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceZoomConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceZoomConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 jwt_token: str,
                 source_type: str):
        pulumi.set(__self__, "jwt_token", jwt_token)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="jwtToken")
    def jwt_token(self) -> str:
        return pulumi.get(self, "jwt_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SourceZuoraConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "dataQuery":
            suggest = "data_query"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "tenantEndpoint":
            suggest = "tenant_endpoint"
        elif key == "windowInDays":
            suggest = "window_in_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceZuoraConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceZuoraConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceZuoraConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 data_query: str,
                 source_type: str,
                 start_date: str,
                 tenant_endpoint: str,
                 window_in_days: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "data_query", data_query)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "tenant_endpoint", tenant_endpoint)
        if window_in_days is not None:
            pulumi.set(__self__, "window_in_days", window_in_days)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="dataQuery")
    def data_query(self) -> str:
        return pulumi.get(self, "data_query")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="tenantEndpoint")
    def tenant_endpoint(self) -> str:
        return pulumi.get(self, "tenant_endpoint")

    @property
    @pulumi.getter(name="windowInDays")
    def window_in_days(self) -> Optional[str]:
        return pulumi.get(self, "window_in_days")


@pulumi.output_type
class GetConnectionConfigurationsResult(dict):
    def __init__(__self__, *,
                 streams: Sequence['outputs.GetConnectionConfigurationsStreamResult']):
        pulumi.set(__self__, "streams", streams)

    @property
    @pulumi.getter
    def streams(self) -> Sequence['outputs.GetConnectionConfigurationsStreamResult']:
        return pulumi.get(self, "streams")


@pulumi.output_type
class GetConnectionConfigurationsStreamResult(dict):
    def __init__(__self__, *,
                 cursor_fields: Sequence[str],
                 name: str,
                 primary_keys: Sequence[Sequence[str]],
                 sync_mode: str):
        pulumi.set(__self__, "cursor_fields", cursor_fields)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_keys", primary_keys)
        pulumi.set(__self__, "sync_mode", sync_mode)

    @property
    @pulumi.getter(name="cursorFields")
    def cursor_fields(self) -> Sequence[str]:
        return pulumi.get(self, "cursor_fields")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="primaryKeys")
    def primary_keys(self) -> Sequence[Sequence[str]]:
        return pulumi.get(self, "primary_keys")

    @property
    @pulumi.getter(name="syncMode")
    def sync_mode(self) -> str:
        return pulumi.get(self, "sync_mode")


@pulumi.output_type
class GetConnectionScheduleResult(dict):
    def __init__(__self__, *,
                 basic_timing: str,
                 cron_expression: str,
                 schedule_type: str):
        pulumi.set(__self__, "basic_timing", basic_timing)
        pulumi.set(__self__, "cron_expression", cron_expression)
        pulumi.set(__self__, "schedule_type", schedule_type)

    @property
    @pulumi.getter(name="basicTiming")
    def basic_timing(self) -> str:
        return pulumi.get(self, "basic_timing")

    @property
    @pulumi.getter(name="cronExpression")
    def cron_expression(self) -> str:
        return pulumi.get(self, "cron_expression")

    @property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> str:
        return pulumi.get(self, "schedule_type")


@pulumi.output_type
class GetDestinationAWSDatalakeConfigurationResult(dict):
    def __init__(__self__, *,
                 aws_account_id: str,
                 bucket_name: str,
                 bucket_prefix: str,
                 credentials: 'outputs.GetDestinationAWSDatalakeConfigurationCredentialsResult',
                 destination_type: str,
                 format: 'outputs.GetDestinationAWSDatalakeConfigurationFormatResult',
                 glue_catalog_float_as_decimal: bool,
                 lakeformation_database_default_tag_key: str,
                 lakeformation_database_default_tag_values: str,
                 lakeformation_database_name: str,
                 lakeformation_governed_tables: bool,
                 partitioning: str,
                 region: str):
        pulumi.set(__self__, "aws_account_id", aws_account_id)
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "glue_catalog_float_as_decimal", glue_catalog_float_as_decimal)
        pulumi.set(__self__, "lakeformation_database_default_tag_key", lakeformation_database_default_tag_key)
        pulumi.set(__self__, "lakeformation_database_default_tag_values", lakeformation_database_default_tag_values)
        pulumi.set(__self__, "lakeformation_database_name", lakeformation_database_name)
        pulumi.set(__self__, "lakeformation_governed_tables", lakeformation_governed_tables)
        pulumi.set(__self__, "partitioning", partitioning)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="awsAccountId")
    def aws_account_id(self) -> str:
        return pulumi.get(self, "aws_account_id")

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> str:
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> str:
        return pulumi.get(self, "bucket_prefix")

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetDestinationAWSDatalakeConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def format(self) -> 'outputs.GetDestinationAWSDatalakeConfigurationFormatResult':
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="glueCatalogFloatAsDecimal")
    def glue_catalog_float_as_decimal(self) -> bool:
        return pulumi.get(self, "glue_catalog_float_as_decimal")

    @property
    @pulumi.getter(name="lakeformationDatabaseDefaultTagKey")
    def lakeformation_database_default_tag_key(self) -> str:
        return pulumi.get(self, "lakeformation_database_default_tag_key")

    @property
    @pulumi.getter(name="lakeformationDatabaseDefaultTagValues")
    def lakeformation_database_default_tag_values(self) -> str:
        return pulumi.get(self, "lakeformation_database_default_tag_values")

    @property
    @pulumi.getter(name="lakeformationDatabaseName")
    def lakeformation_database_name(self) -> str:
        return pulumi.get(self, "lakeformation_database_name")

    @property
    @pulumi.getter(name="lakeformationGovernedTables")
    def lakeformation_governed_tables(self) -> bool:
        return pulumi.get(self, "lakeformation_governed_tables")

    @property
    @pulumi.getter
    def partitioning(self) -> str:
        return pulumi.get(self, "partitioning")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetDestinationAWSDatalakeConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 destination_aws_datalake_authentication_mode_iam_role: 'outputs.GetDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamRoleResult',
                 destination_aws_datalake_authentication_mode_iam_user: 'outputs.GetDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamUserResult',
                 destination_aws_datalake_update_authentication_mode_iam_role: 'outputs.GetDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamRoleResult',
                 destination_aws_datalake_update_authentication_mode_iam_user: 'outputs.GetDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamUserResult'):
        pulumi.set(__self__, "destination_aws_datalake_authentication_mode_iam_role", destination_aws_datalake_authentication_mode_iam_role)
        pulumi.set(__self__, "destination_aws_datalake_authentication_mode_iam_user", destination_aws_datalake_authentication_mode_iam_user)
        pulumi.set(__self__, "destination_aws_datalake_update_authentication_mode_iam_role", destination_aws_datalake_update_authentication_mode_iam_role)
        pulumi.set(__self__, "destination_aws_datalake_update_authentication_mode_iam_user", destination_aws_datalake_update_authentication_mode_iam_user)

    @property
    @pulumi.getter(name="destinationAwsDatalakeAuthenticationModeIamRole")
    def destination_aws_datalake_authentication_mode_iam_role(self) -> 'outputs.GetDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamRoleResult':
        return pulumi.get(self, "destination_aws_datalake_authentication_mode_iam_role")

    @property
    @pulumi.getter(name="destinationAwsDatalakeAuthenticationModeIamUser")
    def destination_aws_datalake_authentication_mode_iam_user(self) -> 'outputs.GetDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamUserResult':
        return pulumi.get(self, "destination_aws_datalake_authentication_mode_iam_user")

    @property
    @pulumi.getter(name="destinationAwsDatalakeUpdateAuthenticationModeIamRole")
    def destination_aws_datalake_update_authentication_mode_iam_role(self) -> 'outputs.GetDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamRoleResult':
        return pulumi.get(self, "destination_aws_datalake_update_authentication_mode_iam_role")

    @property
    @pulumi.getter(name="destinationAwsDatalakeUpdateAuthenticationModeIamUser")
    def destination_aws_datalake_update_authentication_mode_iam_user(self) -> 'outputs.GetDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamUserResult':
        return pulumi.get(self, "destination_aws_datalake_update_authentication_mode_iam_user")


@pulumi.output_type
class GetDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamRoleResult(dict):
    def __init__(__self__, *,
                 credentials_title: str,
                 role_arn: str):
        pulumi.set(__self__, "credentials_title", credentials_title)
        pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> str:
        return pulumi.get(self, "credentials_title")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        return pulumi.get(self, "role_arn")


@pulumi.output_type
class GetDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamUserResult(dict):
    def __init__(__self__, *,
                 aws_access_key_id: str,
                 aws_secret_access_key: str,
                 credentials_title: str):
        pulumi.set(__self__, "aws_access_key_id", aws_access_key_id)
        pulumi.set(__self__, "aws_secret_access_key", aws_secret_access_key)
        pulumi.set(__self__, "credentials_title", credentials_title)

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> str:
        return pulumi.get(self, "aws_access_key_id")

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> str:
        return pulumi.get(self, "aws_secret_access_key")

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> str:
        return pulumi.get(self, "credentials_title")


@pulumi.output_type
class GetDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamRoleResult(dict):
    def __init__(__self__, *,
                 credentials_title: str,
                 role_arn: str):
        pulumi.set(__self__, "credentials_title", credentials_title)
        pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> str:
        return pulumi.get(self, "credentials_title")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        return pulumi.get(self, "role_arn")


@pulumi.output_type
class GetDestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamUserResult(dict):
    def __init__(__self__, *,
                 aws_access_key_id: str,
                 aws_secret_access_key: str,
                 credentials_title: str):
        pulumi.set(__self__, "aws_access_key_id", aws_access_key_id)
        pulumi.set(__self__, "aws_secret_access_key", aws_secret_access_key)
        pulumi.set(__self__, "credentials_title", credentials_title)

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> str:
        return pulumi.get(self, "aws_access_key_id")

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> str:
        return pulumi.get(self, "aws_secret_access_key")

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> str:
        return pulumi.get(self, "credentials_title")


@pulumi.output_type
class GetDestinationAWSDatalakeConfigurationFormatResult(dict):
    def __init__(__self__, *,
                 destination_aws_datalake_output_format_wildcard_json_lines_newline_delimited_json: 'outputs.GetDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJsonResult',
                 destination_aws_datalake_output_format_wildcard_parquet_columnar_storage: 'outputs.GetDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorageResult',
                 destination_aws_datalake_update_output_format_wildcard_json_lines_newline_delimited_json: 'outputs.GetDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJsonResult',
                 destination_aws_datalake_update_output_format_wildcard_parquet_columnar_storage: 'outputs.GetDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorageResult'):
        pulumi.set(__self__, "destination_aws_datalake_output_format_wildcard_json_lines_newline_delimited_json", destination_aws_datalake_output_format_wildcard_json_lines_newline_delimited_json)
        pulumi.set(__self__, "destination_aws_datalake_output_format_wildcard_parquet_columnar_storage", destination_aws_datalake_output_format_wildcard_parquet_columnar_storage)
        pulumi.set(__self__, "destination_aws_datalake_update_output_format_wildcard_json_lines_newline_delimited_json", destination_aws_datalake_update_output_format_wildcard_json_lines_newline_delimited_json)
        pulumi.set(__self__, "destination_aws_datalake_update_output_format_wildcard_parquet_columnar_storage", destination_aws_datalake_update_output_format_wildcard_parquet_columnar_storage)

    @property
    @pulumi.getter(name="destinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJson")
    def destination_aws_datalake_output_format_wildcard_json_lines_newline_delimited_json(self) -> 'outputs.GetDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJsonResult':
        return pulumi.get(self, "destination_aws_datalake_output_format_wildcard_json_lines_newline_delimited_json")

    @property
    @pulumi.getter(name="destinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage")
    def destination_aws_datalake_output_format_wildcard_parquet_columnar_storage(self) -> 'outputs.GetDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorageResult':
        return pulumi.get(self, "destination_aws_datalake_output_format_wildcard_parquet_columnar_storage")

    @property
    @pulumi.getter(name="destinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJson")
    def destination_aws_datalake_update_output_format_wildcard_json_lines_newline_delimited_json(self) -> 'outputs.GetDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJsonResult':
        return pulumi.get(self, "destination_aws_datalake_update_output_format_wildcard_json_lines_newline_delimited_json")

    @property
    @pulumi.getter(name="destinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage")
    def destination_aws_datalake_update_output_format_wildcard_parquet_columnar_storage(self) -> 'outputs.GetDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorageResult':
        return pulumi.get(self, "destination_aws_datalake_update_output_format_wildcard_parquet_columnar_storage")


@pulumi.output_type
class GetDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJsonResult(dict):
    def __init__(__self__, *,
                 compression_codec: str,
                 format_type: str):
        pulumi.set(__self__, "compression_codec", compression_codec)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> str:
        return pulumi.get(self, "compression_codec")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class GetDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorageResult(dict):
    def __init__(__self__, *,
                 compression_codec: str,
                 format_type: str):
        pulumi.set(__self__, "compression_codec", compression_codec)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> str:
        return pulumi.get(self, "compression_codec")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class GetDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJsonResult(dict):
    def __init__(__self__, *,
                 compression_codec: str,
                 format_type: str):
        pulumi.set(__self__, "compression_codec", compression_codec)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> str:
        return pulumi.get(self, "compression_codec")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class GetDestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorageResult(dict):
    def __init__(__self__, *,
                 compression_codec: str,
                 format_type: str):
        pulumi.set(__self__, "compression_codec", compression_codec)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> str:
        return pulumi.get(self, "compression_codec")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class GetDestinationAzurBlobStorageConfigurationResult(dict):
    def __init__(__self__, *,
                 azure_blob_storage_account_key: str,
                 azure_blob_storage_account_name: str,
                 azure_blob_storage_container_name: str,
                 azure_blob_storage_endpoint_domain_name: str,
                 azure_blob_storage_output_buffer_size: int,
                 azure_blob_storage_spill_size: int,
                 destination_type: str,
                 format: 'outputs.GetDestinationAzurBlobStorageConfigurationFormatResult'):
        pulumi.set(__self__, "azure_blob_storage_account_key", azure_blob_storage_account_key)
        pulumi.set(__self__, "azure_blob_storage_account_name", azure_blob_storage_account_name)
        pulumi.set(__self__, "azure_blob_storage_container_name", azure_blob_storage_container_name)
        pulumi.set(__self__, "azure_blob_storage_endpoint_domain_name", azure_blob_storage_endpoint_domain_name)
        pulumi.set(__self__, "azure_blob_storage_output_buffer_size", azure_blob_storage_output_buffer_size)
        pulumi.set(__self__, "azure_blob_storage_spill_size", azure_blob_storage_spill_size)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "format", format)

    @property
    @pulumi.getter(name="azureBlobStorageAccountKey")
    def azure_blob_storage_account_key(self) -> str:
        return pulumi.get(self, "azure_blob_storage_account_key")

    @property
    @pulumi.getter(name="azureBlobStorageAccountName")
    def azure_blob_storage_account_name(self) -> str:
        return pulumi.get(self, "azure_blob_storage_account_name")

    @property
    @pulumi.getter(name="azureBlobStorageContainerName")
    def azure_blob_storage_container_name(self) -> str:
        return pulumi.get(self, "azure_blob_storage_container_name")

    @property
    @pulumi.getter(name="azureBlobStorageEndpointDomainName")
    def azure_blob_storage_endpoint_domain_name(self) -> str:
        return pulumi.get(self, "azure_blob_storage_endpoint_domain_name")

    @property
    @pulumi.getter(name="azureBlobStorageOutputBufferSize")
    def azure_blob_storage_output_buffer_size(self) -> int:
        return pulumi.get(self, "azure_blob_storage_output_buffer_size")

    @property
    @pulumi.getter(name="azureBlobStorageSpillSize")
    def azure_blob_storage_spill_size(self) -> int:
        return pulumi.get(self, "azure_blob_storage_spill_size")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def format(self) -> 'outputs.GetDestinationAzurBlobStorageConfigurationFormatResult':
        return pulumi.get(self, "format")


@pulumi.output_type
class GetDestinationAzurBlobStorageConfigurationFormatResult(dict):
    def __init__(__self__, *,
                 destination_azure_blob_storage_output_format_csv_comma_separated_values: 'outputs.GetDestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatCsvCommaSeparatedValuesResult',
                 destination_azure_blob_storage_output_format_json_lines_newline_delimited_json: 'outputs.GetDestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJsonResult',
                 destination_azure_blob_storage_update_output_format_csv_comma_separated_values: 'outputs.GetDestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValuesResult',
                 destination_azure_blob_storage_update_output_format_json_lines_newline_delimited_json: 'outputs.GetDestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJsonResult'):
        pulumi.set(__self__, "destination_azure_blob_storage_output_format_csv_comma_separated_values", destination_azure_blob_storage_output_format_csv_comma_separated_values)
        pulumi.set(__self__, "destination_azure_blob_storage_output_format_json_lines_newline_delimited_json", destination_azure_blob_storage_output_format_json_lines_newline_delimited_json)
        pulumi.set(__self__, "destination_azure_blob_storage_update_output_format_csv_comma_separated_values", destination_azure_blob_storage_update_output_format_csv_comma_separated_values)
        pulumi.set(__self__, "destination_azure_blob_storage_update_output_format_json_lines_newline_delimited_json", destination_azure_blob_storage_update_output_format_json_lines_newline_delimited_json)

    @property
    @pulumi.getter(name="destinationAzureBlobStorageOutputFormatCsvCommaSeparatedValues")
    def destination_azure_blob_storage_output_format_csv_comma_separated_values(self) -> 'outputs.GetDestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatCsvCommaSeparatedValuesResult':
        return pulumi.get(self, "destination_azure_blob_storage_output_format_csv_comma_separated_values")

    @property
    @pulumi.getter(name="destinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJson")
    def destination_azure_blob_storage_output_format_json_lines_newline_delimited_json(self) -> 'outputs.GetDestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJsonResult':
        return pulumi.get(self, "destination_azure_blob_storage_output_format_json_lines_newline_delimited_json")

    @property
    @pulumi.getter(name="destinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValues")
    def destination_azure_blob_storage_update_output_format_csv_comma_separated_values(self) -> 'outputs.GetDestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValuesResult':
        return pulumi.get(self, "destination_azure_blob_storage_update_output_format_csv_comma_separated_values")

    @property
    @pulumi.getter(name="destinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJson")
    def destination_azure_blob_storage_update_output_format_json_lines_newline_delimited_json(self) -> 'outputs.GetDestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJsonResult':
        return pulumi.get(self, "destination_azure_blob_storage_update_output_format_json_lines_newline_delimited_json")


@pulumi.output_type
class GetDestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatCsvCommaSeparatedValuesResult(dict):
    def __init__(__self__, *,
                 flattening: str,
                 format_type: str):
        pulumi.set(__self__, "flattening", flattening)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter
    def flattening(self) -> str:
        return pulumi.get(self, "flattening")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class GetDestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJsonResult(dict):
    def __init__(__self__, *,
                 format_type: str):
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class GetDestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValuesResult(dict):
    def __init__(__self__, *,
                 flattening: str,
                 format_type: str):
        pulumi.set(__self__, "flattening", flattening)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter
    def flattening(self) -> str:
        return pulumi.get(self, "flattening")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class GetDestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJsonResult(dict):
    def __init__(__self__, *,
                 format_type: str):
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class GetDestinationBigqueryConfigurationResult(dict):
    def __init__(__self__, *,
                 big_query_client_buffer_size_mb: int,
                 credentials_json: str,
                 dataset_id: str,
                 dataset_location: str,
                 destination_type: str,
                 loading_method: 'outputs.GetDestinationBigqueryConfigurationLoadingMethodResult',
                 project_id: str,
                 raw_data_dataset: str,
                 transformation_priority: str,
                 use1s1t_format: bool):
        pulumi.set(__self__, "big_query_client_buffer_size_mb", big_query_client_buffer_size_mb)
        pulumi.set(__self__, "credentials_json", credentials_json)
        pulumi.set(__self__, "dataset_id", dataset_id)
        pulumi.set(__self__, "dataset_location", dataset_location)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "loading_method", loading_method)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "raw_data_dataset", raw_data_dataset)
        pulumi.set(__self__, "transformation_priority", transformation_priority)
        pulumi.set(__self__, "use1s1t_format", use1s1t_format)

    @property
    @pulumi.getter(name="bigQueryClientBufferSizeMb")
    def big_query_client_buffer_size_mb(self) -> int:
        return pulumi.get(self, "big_query_client_buffer_size_mb")

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> str:
        return pulumi.get(self, "credentials_json")

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> str:
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="datasetLocation")
    def dataset_location(self) -> str:
        return pulumi.get(self, "dataset_location")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="loadingMethod")
    def loading_method(self) -> 'outputs.GetDestinationBigqueryConfigurationLoadingMethodResult':
        return pulumi.get(self, "loading_method")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="rawDataDataset")
    def raw_data_dataset(self) -> str:
        return pulumi.get(self, "raw_data_dataset")

    @property
    @pulumi.getter(name="transformationPriority")
    def transformation_priority(self) -> str:
        return pulumi.get(self, "transformation_priority")

    @property
    @pulumi.getter(name="use1s1tFormat")
    def use1s1t_format(self) -> bool:
        return pulumi.get(self, "use1s1t_format")


@pulumi.output_type
class GetDestinationBigqueryConfigurationLoadingMethodResult(dict):
    def __init__(__self__, *,
                 destination_bigquery_loading_method_gcs_staging: 'outputs.GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingResult',
                 destination_bigquery_loading_method_standard_inserts: 'outputs.GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodStandardInsertsResult',
                 destination_bigquery_update_loading_method_gcs_staging: 'outputs.GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingResult',
                 destination_bigquery_update_loading_method_standard_inserts: 'outputs.GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodStandardInsertsResult'):
        pulumi.set(__self__, "destination_bigquery_loading_method_gcs_staging", destination_bigquery_loading_method_gcs_staging)
        pulumi.set(__self__, "destination_bigquery_loading_method_standard_inserts", destination_bigquery_loading_method_standard_inserts)
        pulumi.set(__self__, "destination_bigquery_update_loading_method_gcs_staging", destination_bigquery_update_loading_method_gcs_staging)
        pulumi.set(__self__, "destination_bigquery_update_loading_method_standard_inserts", destination_bigquery_update_loading_method_standard_inserts)

    @property
    @pulumi.getter(name="destinationBigqueryLoadingMethodGcsStaging")
    def destination_bigquery_loading_method_gcs_staging(self) -> 'outputs.GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingResult':
        return pulumi.get(self, "destination_bigquery_loading_method_gcs_staging")

    @property
    @pulumi.getter(name="destinationBigqueryLoadingMethodStandardInserts")
    def destination_bigquery_loading_method_standard_inserts(self) -> 'outputs.GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodStandardInsertsResult':
        return pulumi.get(self, "destination_bigquery_loading_method_standard_inserts")

    @property
    @pulumi.getter(name="destinationBigqueryUpdateLoadingMethodGcsStaging")
    def destination_bigquery_update_loading_method_gcs_staging(self) -> 'outputs.GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingResult':
        return pulumi.get(self, "destination_bigquery_update_loading_method_gcs_staging")

    @property
    @pulumi.getter(name="destinationBigqueryUpdateLoadingMethodStandardInserts")
    def destination_bigquery_update_loading_method_standard_inserts(self) -> 'outputs.GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodStandardInsertsResult':
        return pulumi.get(self, "destination_bigquery_update_loading_method_standard_inserts")


@pulumi.output_type
class GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingResult(dict):
    def __init__(__self__, *,
                 credential: 'outputs.GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialResult',
                 file_buffer_count: int,
                 gcs_bucket_name: str,
                 gcs_bucket_path: str,
                 keep_files_in_gcs_bucket: str,
                 method: str):
        pulumi.set(__self__, "credential", credential)
        pulumi.set(__self__, "file_buffer_count", file_buffer_count)
        pulumi.set(__self__, "gcs_bucket_name", gcs_bucket_name)
        pulumi.set(__self__, "gcs_bucket_path", gcs_bucket_path)
        pulumi.set(__self__, "keep_files_in_gcs_bucket", keep_files_in_gcs_bucket)
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def credential(self) -> 'outputs.GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialResult':
        return pulumi.get(self, "credential")

    @property
    @pulumi.getter(name="fileBufferCount")
    def file_buffer_count(self) -> int:
        return pulumi.get(self, "file_buffer_count")

    @property
    @pulumi.getter(name="gcsBucketName")
    def gcs_bucket_name(self) -> str:
        return pulumi.get(self, "gcs_bucket_name")

    @property
    @pulumi.getter(name="gcsBucketPath")
    def gcs_bucket_path(self) -> str:
        return pulumi.get(self, "gcs_bucket_path")

    @property
    @pulumi.getter(name="keepFilesInGcsBucket")
    def keep_files_in_gcs_bucket(self) -> str:
        return pulumi.get(self, "keep_files_in_gcs_bucket")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialResult(dict):
    def __init__(__self__, *,
                 destination_bigquery_loading_method_gcs_staging_credential_hmac_key: 'outputs.GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialDestinationBigqueryLoadingMethodGcsStagingCredentialHmacKeyResult'):
        pulumi.set(__self__, "destination_bigquery_loading_method_gcs_staging_credential_hmac_key", destination_bigquery_loading_method_gcs_staging_credential_hmac_key)

    @property
    @pulumi.getter(name="destinationBigqueryLoadingMethodGcsStagingCredentialHmacKey")
    def destination_bigquery_loading_method_gcs_staging_credential_hmac_key(self) -> 'outputs.GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialDestinationBigqueryLoadingMethodGcsStagingCredentialHmacKeyResult':
        return pulumi.get(self, "destination_bigquery_loading_method_gcs_staging_credential_hmac_key")


@pulumi.output_type
class GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialDestinationBigqueryLoadingMethodGcsStagingCredentialHmacKeyResult(dict):
    def __init__(__self__, *,
                 credential_type: str,
                 hmac_key_access_id: str,
                 hmac_key_secret: str):
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "hmac_key_access_id", hmac_key_access_id)
        pulumi.set(__self__, "hmac_key_secret", hmac_key_secret)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="hmacKeyAccessId")
    def hmac_key_access_id(self) -> str:
        return pulumi.get(self, "hmac_key_access_id")

    @property
    @pulumi.getter(name="hmacKeySecret")
    def hmac_key_secret(self) -> str:
        return pulumi.get(self, "hmac_key_secret")


@pulumi.output_type
class GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodStandardInsertsResult(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingResult(dict):
    def __init__(__self__, *,
                 credential: 'outputs.GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialResult',
                 file_buffer_count: int,
                 gcs_bucket_name: str,
                 gcs_bucket_path: str,
                 keep_files_in_gcs_bucket: str,
                 method: str):
        pulumi.set(__self__, "credential", credential)
        pulumi.set(__self__, "file_buffer_count", file_buffer_count)
        pulumi.set(__self__, "gcs_bucket_name", gcs_bucket_name)
        pulumi.set(__self__, "gcs_bucket_path", gcs_bucket_path)
        pulumi.set(__self__, "keep_files_in_gcs_bucket", keep_files_in_gcs_bucket)
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def credential(self) -> 'outputs.GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialResult':
        return pulumi.get(self, "credential")

    @property
    @pulumi.getter(name="fileBufferCount")
    def file_buffer_count(self) -> int:
        return pulumi.get(self, "file_buffer_count")

    @property
    @pulumi.getter(name="gcsBucketName")
    def gcs_bucket_name(self) -> str:
        return pulumi.get(self, "gcs_bucket_name")

    @property
    @pulumi.getter(name="gcsBucketPath")
    def gcs_bucket_path(self) -> str:
        return pulumi.get(self, "gcs_bucket_path")

    @property
    @pulumi.getter(name="keepFilesInGcsBucket")
    def keep_files_in_gcs_bucket(self) -> str:
        return pulumi.get(self, "keep_files_in_gcs_bucket")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialResult(dict):
    def __init__(__self__, *,
                 destination_bigquery_update_loading_method_gcs_staging_credential_hmac_key: 'outputs.GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKeyResult'):
        pulumi.set(__self__, "destination_bigquery_update_loading_method_gcs_staging_credential_hmac_key", destination_bigquery_update_loading_method_gcs_staging_credential_hmac_key)

    @property
    @pulumi.getter(name="destinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKey")
    def destination_bigquery_update_loading_method_gcs_staging_credential_hmac_key(self) -> 'outputs.GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKeyResult':
        return pulumi.get(self, "destination_bigquery_update_loading_method_gcs_staging_credential_hmac_key")


@pulumi.output_type
class GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKeyResult(dict):
    def __init__(__self__, *,
                 credential_type: str,
                 hmac_key_access_id: str,
                 hmac_key_secret: str):
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "hmac_key_access_id", hmac_key_access_id)
        pulumi.set(__self__, "hmac_key_secret", hmac_key_secret)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="hmacKeyAccessId")
    def hmac_key_access_id(self) -> str:
        return pulumi.get(self, "hmac_key_access_id")

    @property
    @pulumi.getter(name="hmacKeySecret")
    def hmac_key_secret(self) -> str:
        return pulumi.get(self, "hmac_key_secret")


@pulumi.output_type
class GetDestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodStandardInsertsResult(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class GetDestinationBigqueryDenormalizedConfigurationResult(dict):
    def __init__(__self__, *,
                 big_query_client_buffer_size_mb: int,
                 credentials_json: str,
                 dataset_id: str,
                 dataset_location: str,
                 destination_type: str,
                 loading_method: 'outputs.GetDestinationBigqueryDenormalizedConfigurationLoadingMethodResult',
                 project_id: str):
        pulumi.set(__self__, "big_query_client_buffer_size_mb", big_query_client_buffer_size_mb)
        pulumi.set(__self__, "credentials_json", credentials_json)
        pulumi.set(__self__, "dataset_id", dataset_id)
        pulumi.set(__self__, "dataset_location", dataset_location)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "loading_method", loading_method)
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter(name="bigQueryClientBufferSizeMb")
    def big_query_client_buffer_size_mb(self) -> int:
        return pulumi.get(self, "big_query_client_buffer_size_mb")

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> str:
        return pulumi.get(self, "credentials_json")

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> str:
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="datasetLocation")
    def dataset_location(self) -> str:
        return pulumi.get(self, "dataset_location")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="loadingMethod")
    def loading_method(self) -> 'outputs.GetDestinationBigqueryDenormalizedConfigurationLoadingMethodResult':
        return pulumi.get(self, "loading_method")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetDestinationBigqueryDenormalizedConfigurationLoadingMethodResult(dict):
    def __init__(__self__, *,
                 destination_bigquery_denormalized_loading_method_gcs_staging: 'outputs.GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingResult',
                 destination_bigquery_denormalized_loading_method_standard_inserts: 'outputs.GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodStandardInsertsResult',
                 destination_bigquery_denormalized_update_loading_method_gcs_staging: 'outputs.GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingResult',
                 destination_bigquery_denormalized_update_loading_method_standard_inserts: 'outputs.GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodStandardInsertsResult'):
        pulumi.set(__self__, "destination_bigquery_denormalized_loading_method_gcs_staging", destination_bigquery_denormalized_loading_method_gcs_staging)
        pulumi.set(__self__, "destination_bigquery_denormalized_loading_method_standard_inserts", destination_bigquery_denormalized_loading_method_standard_inserts)
        pulumi.set(__self__, "destination_bigquery_denormalized_update_loading_method_gcs_staging", destination_bigquery_denormalized_update_loading_method_gcs_staging)
        pulumi.set(__self__, "destination_bigquery_denormalized_update_loading_method_standard_inserts", destination_bigquery_denormalized_update_loading_method_standard_inserts)

    @property
    @pulumi.getter(name="destinationBigqueryDenormalizedLoadingMethodGcsStaging")
    def destination_bigquery_denormalized_loading_method_gcs_staging(self) -> 'outputs.GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingResult':
        return pulumi.get(self, "destination_bigquery_denormalized_loading_method_gcs_staging")

    @property
    @pulumi.getter(name="destinationBigqueryDenormalizedLoadingMethodStandardInserts")
    def destination_bigquery_denormalized_loading_method_standard_inserts(self) -> 'outputs.GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodStandardInsertsResult':
        return pulumi.get(self, "destination_bigquery_denormalized_loading_method_standard_inserts")

    @property
    @pulumi.getter(name="destinationBigqueryDenormalizedUpdateLoadingMethodGcsStaging")
    def destination_bigquery_denormalized_update_loading_method_gcs_staging(self) -> 'outputs.GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingResult':
        return pulumi.get(self, "destination_bigquery_denormalized_update_loading_method_gcs_staging")

    @property
    @pulumi.getter(name="destinationBigqueryDenormalizedUpdateLoadingMethodStandardInserts")
    def destination_bigquery_denormalized_update_loading_method_standard_inserts(self) -> 'outputs.GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodStandardInsertsResult':
        return pulumi.get(self, "destination_bigquery_denormalized_update_loading_method_standard_inserts")


@pulumi.output_type
class GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingResult(dict):
    def __init__(__self__, *,
                 credential: 'outputs.GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialResult',
                 file_buffer_count: int,
                 gcs_bucket_name: str,
                 gcs_bucket_path: str,
                 keep_files_in_gcs_bucket: str,
                 method: str):
        pulumi.set(__self__, "credential", credential)
        pulumi.set(__self__, "file_buffer_count", file_buffer_count)
        pulumi.set(__self__, "gcs_bucket_name", gcs_bucket_name)
        pulumi.set(__self__, "gcs_bucket_path", gcs_bucket_path)
        pulumi.set(__self__, "keep_files_in_gcs_bucket", keep_files_in_gcs_bucket)
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def credential(self) -> 'outputs.GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialResult':
        return pulumi.get(self, "credential")

    @property
    @pulumi.getter(name="fileBufferCount")
    def file_buffer_count(self) -> int:
        return pulumi.get(self, "file_buffer_count")

    @property
    @pulumi.getter(name="gcsBucketName")
    def gcs_bucket_name(self) -> str:
        return pulumi.get(self, "gcs_bucket_name")

    @property
    @pulumi.getter(name="gcsBucketPath")
    def gcs_bucket_path(self) -> str:
        return pulumi.get(self, "gcs_bucket_path")

    @property
    @pulumi.getter(name="keepFilesInGcsBucket")
    def keep_files_in_gcs_bucket(self) -> str:
        return pulumi.get(self, "keep_files_in_gcs_bucket")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialResult(dict):
    def __init__(__self__, *,
                 destination_bigquery_denormalized_loading_method_gcs_staging_credential_hmac_key: 'outputs.GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKeyResult'):
        pulumi.set(__self__, "destination_bigquery_denormalized_loading_method_gcs_staging_credential_hmac_key", destination_bigquery_denormalized_loading_method_gcs_staging_credential_hmac_key)

    @property
    @pulumi.getter(name="destinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKey")
    def destination_bigquery_denormalized_loading_method_gcs_staging_credential_hmac_key(self) -> 'outputs.GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKeyResult':
        return pulumi.get(self, "destination_bigquery_denormalized_loading_method_gcs_staging_credential_hmac_key")


@pulumi.output_type
class GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKeyResult(dict):
    def __init__(__self__, *,
                 credential_type: str,
                 hmac_key_access_id: str,
                 hmac_key_secret: str):
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "hmac_key_access_id", hmac_key_access_id)
        pulumi.set(__self__, "hmac_key_secret", hmac_key_secret)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="hmacKeyAccessId")
    def hmac_key_access_id(self) -> str:
        return pulumi.get(self, "hmac_key_access_id")

    @property
    @pulumi.getter(name="hmacKeySecret")
    def hmac_key_secret(self) -> str:
        return pulumi.get(self, "hmac_key_secret")


@pulumi.output_type
class GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodStandardInsertsResult(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingResult(dict):
    def __init__(__self__, *,
                 credential: 'outputs.GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialResult',
                 file_buffer_count: int,
                 gcs_bucket_name: str,
                 gcs_bucket_path: str,
                 keep_files_in_gcs_bucket: str,
                 method: str):
        pulumi.set(__self__, "credential", credential)
        pulumi.set(__self__, "file_buffer_count", file_buffer_count)
        pulumi.set(__self__, "gcs_bucket_name", gcs_bucket_name)
        pulumi.set(__self__, "gcs_bucket_path", gcs_bucket_path)
        pulumi.set(__self__, "keep_files_in_gcs_bucket", keep_files_in_gcs_bucket)
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def credential(self) -> 'outputs.GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialResult':
        return pulumi.get(self, "credential")

    @property
    @pulumi.getter(name="fileBufferCount")
    def file_buffer_count(self) -> int:
        return pulumi.get(self, "file_buffer_count")

    @property
    @pulumi.getter(name="gcsBucketName")
    def gcs_bucket_name(self) -> str:
        return pulumi.get(self, "gcs_bucket_name")

    @property
    @pulumi.getter(name="gcsBucketPath")
    def gcs_bucket_path(self) -> str:
        return pulumi.get(self, "gcs_bucket_path")

    @property
    @pulumi.getter(name="keepFilesInGcsBucket")
    def keep_files_in_gcs_bucket(self) -> str:
        return pulumi.get(self, "keep_files_in_gcs_bucket")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialResult(dict):
    def __init__(__self__, *,
                 destination_bigquery_denormalized_update_loading_method_gcs_staging_credential_hmac_key: 'outputs.GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKeyResult'):
        pulumi.set(__self__, "destination_bigquery_denormalized_update_loading_method_gcs_staging_credential_hmac_key", destination_bigquery_denormalized_update_loading_method_gcs_staging_credential_hmac_key)

    @property
    @pulumi.getter(name="destinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKey")
    def destination_bigquery_denormalized_update_loading_method_gcs_staging_credential_hmac_key(self) -> 'outputs.GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKeyResult':
        return pulumi.get(self, "destination_bigquery_denormalized_update_loading_method_gcs_staging_credential_hmac_key")


@pulumi.output_type
class GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKeyResult(dict):
    def __init__(__self__, *,
                 credential_type: str,
                 hmac_key_access_id: str,
                 hmac_key_secret: str):
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "hmac_key_access_id", hmac_key_access_id)
        pulumi.set(__self__, "hmac_key_secret", hmac_key_secret)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="hmacKeyAccessId")
    def hmac_key_access_id(self) -> str:
        return pulumi.get(self, "hmac_key_access_id")

    @property
    @pulumi.getter(name="hmacKeySecret")
    def hmac_key_secret(self) -> str:
        return pulumi.get(self, "hmac_key_secret")


@pulumi.output_type
class GetDestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodStandardInsertsResult(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class GetDestinationClickhouseConfigurationResult(dict):
    def __init__(__self__, *,
                 database: str,
                 destination_type: str,
                 host: str,
                 jdbc_url_params: str,
                 password: str,
                 port: int,
                 tunnel_method: 'outputs.GetDestinationClickhouseConfigurationTunnelMethodResult',
                 username: str):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> str:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> 'outputs.GetDestinationClickhouseConfigurationTunnelMethodResult':
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetDestinationClickhouseConfigurationTunnelMethodResult(dict):
    def __init__(__self__, *,
                 destination_clickhouse_ssh_tunnel_method_no_tunnel: 'outputs.GetDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodNoTunnelResult',
                 destination_clickhouse_ssh_tunnel_method_password_authentication: 'outputs.GetDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodPasswordAuthenticationResult',
                 destination_clickhouse_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodSshKeyAuthenticationResult',
                 destination_clickhouse_update_ssh_tunnel_method_no_tunnel: 'outputs.GetDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodNoTunnelResult',
                 destination_clickhouse_update_ssh_tunnel_method_password_authentication: 'outputs.GetDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodPasswordAuthenticationResult',
                 destination_clickhouse_update_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodSshKeyAuthenticationResult'):
        pulumi.set(__self__, "destination_clickhouse_ssh_tunnel_method_no_tunnel", destination_clickhouse_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "destination_clickhouse_ssh_tunnel_method_password_authentication", destination_clickhouse_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "destination_clickhouse_ssh_tunnel_method_ssh_key_authentication", destination_clickhouse_ssh_tunnel_method_ssh_key_authentication)
        pulumi.set(__self__, "destination_clickhouse_update_ssh_tunnel_method_no_tunnel", destination_clickhouse_update_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "destination_clickhouse_update_ssh_tunnel_method_password_authentication", destination_clickhouse_update_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "destination_clickhouse_update_ssh_tunnel_method_ssh_key_authentication", destination_clickhouse_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="destinationClickhouseSshTunnelMethodNoTunnel")
    def destination_clickhouse_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "destination_clickhouse_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationClickhouseSshTunnelMethodPasswordAuthentication")
    def destination_clickhouse_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "destination_clickhouse_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationClickhouseSshTunnelMethodSshKeyAuthentication")
    def destination_clickhouse_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "destination_clickhouse_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="destinationClickhouseUpdateSshTunnelMethodNoTunnel")
    def destination_clickhouse_update_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "destination_clickhouse_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationClickhouseUpdateSshTunnelMethodPasswordAuthentication")
    def destination_clickhouse_update_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "destination_clickhouse_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationClickhouseUpdateSshTunnelMethodSshKeyAuthentication")
    def destination_clickhouse_update_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "destination_clickhouse_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class GetDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetDestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetDestinationConvexConfigurationResult(dict):
    def __init__(__self__, *,
                 access_key: str,
                 deployment_url: str,
                 destination_type: str):
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "deployment_url", deployment_url)
        pulumi.set(__self__, "destination_type", destination_type)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="deploymentUrl")
    def deployment_url(self) -> str:
        return pulumi.get(self, "deployment_url")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")


@pulumi.output_type
class GetDestinationCumulioConfigurationResult(dict):
    def __init__(__self__, *,
                 api_host: str,
                 api_key: str,
                 api_token: str,
                 destination_type: str):
        pulumi.set(__self__, "api_host", api_host)
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "destination_type", destination_type)

    @property
    @pulumi.getter(name="apiHost")
    def api_host(self) -> str:
        return pulumi.get(self, "api_host")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")


@pulumi.output_type
class GetDestinationDatabendConfigurationResult(dict):
    def __init__(__self__, *,
                 database: str,
                 destination_type: str,
                 host: str,
                 password: str,
                 port: int,
                 table: str,
                 username: str):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "table", table)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def table(self) -> str:
        return pulumi.get(self, "table")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetDestinationDatabricksConfigurationResult(dict):
    def __init__(__self__, *,
                 accept_terms: bool,
                 data_source: 'outputs.GetDestinationDatabricksConfigurationDataSourceResult',
                 database: str,
                 databricks_http_path: str,
                 databricks_personal_access_token: str,
                 databricks_port: str,
                 databricks_server_hostname: str,
                 destination_type: str,
                 enable_schema_evolution: bool,
                 purge_staging_data: bool,
                 schema: str):
        pulumi.set(__self__, "accept_terms", accept_terms)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "databricks_http_path", databricks_http_path)
        pulumi.set(__self__, "databricks_personal_access_token", databricks_personal_access_token)
        pulumi.set(__self__, "databricks_port", databricks_port)
        pulumi.set(__self__, "databricks_server_hostname", databricks_server_hostname)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "enable_schema_evolution", enable_schema_evolution)
        pulumi.set(__self__, "purge_staging_data", purge_staging_data)
        pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter(name="acceptTerms")
    def accept_terms(self) -> bool:
        return pulumi.get(self, "accept_terms")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> 'outputs.GetDestinationDatabricksConfigurationDataSourceResult':
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="databricksHttpPath")
    def databricks_http_path(self) -> str:
        return pulumi.get(self, "databricks_http_path")

    @property
    @pulumi.getter(name="databricksPersonalAccessToken")
    def databricks_personal_access_token(self) -> str:
        return pulumi.get(self, "databricks_personal_access_token")

    @property
    @pulumi.getter(name="databricksPort")
    def databricks_port(self) -> str:
        return pulumi.get(self, "databricks_port")

    @property
    @pulumi.getter(name="databricksServerHostname")
    def databricks_server_hostname(self) -> str:
        return pulumi.get(self, "databricks_server_hostname")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="enableSchemaEvolution")
    def enable_schema_evolution(self) -> bool:
        return pulumi.get(self, "enable_schema_evolution")

    @property
    @pulumi.getter(name="purgeStagingData")
    def purge_staging_data(self) -> bool:
        return pulumi.get(self, "purge_staging_data")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")


@pulumi.output_type
class GetDestinationDatabricksConfigurationDataSourceResult(dict):
    def __init__(__self__, *,
                 destination_databricks_data_source_amazon_s3: 'outputs.GetDestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAmazonS3Result',
                 destination_databricks_data_source_azure_blob_storage: 'outputs.GetDestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAzureBlobStorageResult',
                 destination_databricks_data_source_recommended_managed_tables: 'outputs.GetDestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceRecommendedManagedTablesResult',
                 destination_databricks_update_data_source_amazon_s3: 'outputs.GetDestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAmazonS3Result',
                 destination_databricks_update_data_source_azure_blob_storage: 'outputs.GetDestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAzureBlobStorageResult',
                 destination_databricks_update_data_source_recommended_managed_tables: 'outputs.GetDestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceRecommendedManagedTablesResult'):
        pulumi.set(__self__, "destination_databricks_data_source_amazon_s3", destination_databricks_data_source_amazon_s3)
        pulumi.set(__self__, "destination_databricks_data_source_azure_blob_storage", destination_databricks_data_source_azure_blob_storage)
        pulumi.set(__self__, "destination_databricks_data_source_recommended_managed_tables", destination_databricks_data_source_recommended_managed_tables)
        pulumi.set(__self__, "destination_databricks_update_data_source_amazon_s3", destination_databricks_update_data_source_amazon_s3)
        pulumi.set(__self__, "destination_databricks_update_data_source_azure_blob_storage", destination_databricks_update_data_source_azure_blob_storage)
        pulumi.set(__self__, "destination_databricks_update_data_source_recommended_managed_tables", destination_databricks_update_data_source_recommended_managed_tables)

    @property
    @pulumi.getter(name="destinationDatabricksDataSourceAmazonS3")
    def destination_databricks_data_source_amazon_s3(self) -> 'outputs.GetDestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAmazonS3Result':
        return pulumi.get(self, "destination_databricks_data_source_amazon_s3")

    @property
    @pulumi.getter(name="destinationDatabricksDataSourceAzureBlobStorage")
    def destination_databricks_data_source_azure_blob_storage(self) -> 'outputs.GetDestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAzureBlobStorageResult':
        return pulumi.get(self, "destination_databricks_data_source_azure_blob_storage")

    @property
    @pulumi.getter(name="destinationDatabricksDataSourceRecommendedManagedTables")
    def destination_databricks_data_source_recommended_managed_tables(self) -> 'outputs.GetDestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceRecommendedManagedTablesResult':
        return pulumi.get(self, "destination_databricks_data_source_recommended_managed_tables")

    @property
    @pulumi.getter(name="destinationDatabricksUpdateDataSourceAmazonS3")
    def destination_databricks_update_data_source_amazon_s3(self) -> 'outputs.GetDestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAmazonS3Result':
        return pulumi.get(self, "destination_databricks_update_data_source_amazon_s3")

    @property
    @pulumi.getter(name="destinationDatabricksUpdateDataSourceAzureBlobStorage")
    def destination_databricks_update_data_source_azure_blob_storage(self) -> 'outputs.GetDestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAzureBlobStorageResult':
        return pulumi.get(self, "destination_databricks_update_data_source_azure_blob_storage")

    @property
    @pulumi.getter(name="destinationDatabricksUpdateDataSourceRecommendedManagedTables")
    def destination_databricks_update_data_source_recommended_managed_tables(self) -> 'outputs.GetDestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceRecommendedManagedTablesResult':
        return pulumi.get(self, "destination_databricks_update_data_source_recommended_managed_tables")


@pulumi.output_type
class GetDestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAmazonS3Result(dict):
    def __init__(__self__, *,
                 data_source_type: str,
                 file_name_pattern: str,
                 s3_access_key_id: str,
                 s3_bucket_name: str,
                 s3_bucket_path: str,
                 s3_bucket_region: str,
                 s3_secret_access_key: str):
        pulumi.set(__self__, "data_source_type", data_source_type)
        pulumi.set(__self__, "file_name_pattern", file_name_pattern)
        pulumi.set(__self__, "s3_access_key_id", s3_access_key_id)
        pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)
        pulumi.set(__self__, "s3_bucket_path", s3_bucket_path)
        pulumi.set(__self__, "s3_bucket_region", s3_bucket_region)
        pulumi.set(__self__, "s3_secret_access_key", s3_secret_access_key)

    @property
    @pulumi.getter(name="dataSourceType")
    def data_source_type(self) -> str:
        return pulumi.get(self, "data_source_type")

    @property
    @pulumi.getter(name="fileNamePattern")
    def file_name_pattern(self) -> str:
        return pulumi.get(self, "file_name_pattern")

    @property
    @pulumi.getter(name="s3AccessKeyId")
    def s3_access_key_id(self) -> str:
        return pulumi.get(self, "s3_access_key_id")

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> str:
        return pulumi.get(self, "s3_bucket_name")

    @property
    @pulumi.getter(name="s3BucketPath")
    def s3_bucket_path(self) -> str:
        return pulumi.get(self, "s3_bucket_path")

    @property
    @pulumi.getter(name="s3BucketRegion")
    def s3_bucket_region(self) -> str:
        return pulumi.get(self, "s3_bucket_region")

    @property
    @pulumi.getter(name="s3SecretAccessKey")
    def s3_secret_access_key(self) -> str:
        return pulumi.get(self, "s3_secret_access_key")


@pulumi.output_type
class GetDestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAzureBlobStorageResult(dict):
    def __init__(__self__, *,
                 azure_blob_storage_account_name: str,
                 azure_blob_storage_container_name: str,
                 azure_blob_storage_endpoint_domain_name: str,
                 azure_blob_storage_sas_token: str,
                 data_source_type: str):
        pulumi.set(__self__, "azure_blob_storage_account_name", azure_blob_storage_account_name)
        pulumi.set(__self__, "azure_blob_storage_container_name", azure_blob_storage_container_name)
        pulumi.set(__self__, "azure_blob_storage_endpoint_domain_name", azure_blob_storage_endpoint_domain_name)
        pulumi.set(__self__, "azure_blob_storage_sas_token", azure_blob_storage_sas_token)
        pulumi.set(__self__, "data_source_type", data_source_type)

    @property
    @pulumi.getter(name="azureBlobStorageAccountName")
    def azure_blob_storage_account_name(self) -> str:
        return pulumi.get(self, "azure_blob_storage_account_name")

    @property
    @pulumi.getter(name="azureBlobStorageContainerName")
    def azure_blob_storage_container_name(self) -> str:
        return pulumi.get(self, "azure_blob_storage_container_name")

    @property
    @pulumi.getter(name="azureBlobStorageEndpointDomainName")
    def azure_blob_storage_endpoint_domain_name(self) -> str:
        return pulumi.get(self, "azure_blob_storage_endpoint_domain_name")

    @property
    @pulumi.getter(name="azureBlobStorageSasToken")
    def azure_blob_storage_sas_token(self) -> str:
        return pulumi.get(self, "azure_blob_storage_sas_token")

    @property
    @pulumi.getter(name="dataSourceType")
    def data_source_type(self) -> str:
        return pulumi.get(self, "data_source_type")


@pulumi.output_type
class GetDestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceRecommendedManagedTablesResult(dict):
    def __init__(__self__, *,
                 data_source_type: str):
        pulumi.set(__self__, "data_source_type", data_source_type)

    @property
    @pulumi.getter(name="dataSourceType")
    def data_source_type(self) -> str:
        return pulumi.get(self, "data_source_type")


@pulumi.output_type
class GetDestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAmazonS3Result(dict):
    def __init__(__self__, *,
                 data_source_type: str,
                 file_name_pattern: str,
                 s3_access_key_id: str,
                 s3_bucket_name: str,
                 s3_bucket_path: str,
                 s3_bucket_region: str,
                 s3_secret_access_key: str):
        pulumi.set(__self__, "data_source_type", data_source_type)
        pulumi.set(__self__, "file_name_pattern", file_name_pattern)
        pulumi.set(__self__, "s3_access_key_id", s3_access_key_id)
        pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)
        pulumi.set(__self__, "s3_bucket_path", s3_bucket_path)
        pulumi.set(__self__, "s3_bucket_region", s3_bucket_region)
        pulumi.set(__self__, "s3_secret_access_key", s3_secret_access_key)

    @property
    @pulumi.getter(name="dataSourceType")
    def data_source_type(self) -> str:
        return pulumi.get(self, "data_source_type")

    @property
    @pulumi.getter(name="fileNamePattern")
    def file_name_pattern(self) -> str:
        return pulumi.get(self, "file_name_pattern")

    @property
    @pulumi.getter(name="s3AccessKeyId")
    def s3_access_key_id(self) -> str:
        return pulumi.get(self, "s3_access_key_id")

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> str:
        return pulumi.get(self, "s3_bucket_name")

    @property
    @pulumi.getter(name="s3BucketPath")
    def s3_bucket_path(self) -> str:
        return pulumi.get(self, "s3_bucket_path")

    @property
    @pulumi.getter(name="s3BucketRegion")
    def s3_bucket_region(self) -> str:
        return pulumi.get(self, "s3_bucket_region")

    @property
    @pulumi.getter(name="s3SecretAccessKey")
    def s3_secret_access_key(self) -> str:
        return pulumi.get(self, "s3_secret_access_key")


@pulumi.output_type
class GetDestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAzureBlobStorageResult(dict):
    def __init__(__self__, *,
                 azure_blob_storage_account_name: str,
                 azure_blob_storage_container_name: str,
                 azure_blob_storage_endpoint_domain_name: str,
                 azure_blob_storage_sas_token: str,
                 data_source_type: str):
        pulumi.set(__self__, "azure_blob_storage_account_name", azure_blob_storage_account_name)
        pulumi.set(__self__, "azure_blob_storage_container_name", azure_blob_storage_container_name)
        pulumi.set(__self__, "azure_blob_storage_endpoint_domain_name", azure_blob_storage_endpoint_domain_name)
        pulumi.set(__self__, "azure_blob_storage_sas_token", azure_blob_storage_sas_token)
        pulumi.set(__self__, "data_source_type", data_source_type)

    @property
    @pulumi.getter(name="azureBlobStorageAccountName")
    def azure_blob_storage_account_name(self) -> str:
        return pulumi.get(self, "azure_blob_storage_account_name")

    @property
    @pulumi.getter(name="azureBlobStorageContainerName")
    def azure_blob_storage_container_name(self) -> str:
        return pulumi.get(self, "azure_blob_storage_container_name")

    @property
    @pulumi.getter(name="azureBlobStorageEndpointDomainName")
    def azure_blob_storage_endpoint_domain_name(self) -> str:
        return pulumi.get(self, "azure_blob_storage_endpoint_domain_name")

    @property
    @pulumi.getter(name="azureBlobStorageSasToken")
    def azure_blob_storage_sas_token(self) -> str:
        return pulumi.get(self, "azure_blob_storage_sas_token")

    @property
    @pulumi.getter(name="dataSourceType")
    def data_source_type(self) -> str:
        return pulumi.get(self, "data_source_type")


@pulumi.output_type
class GetDestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceRecommendedManagedTablesResult(dict):
    def __init__(__self__, *,
                 data_source_type: str):
        pulumi.set(__self__, "data_source_type", data_source_type)

    @property
    @pulumi.getter(name="dataSourceType")
    def data_source_type(self) -> str:
        return pulumi.get(self, "data_source_type")


@pulumi.output_type
class GetDestinationDevNullConfigurationResult(dict):
    def __init__(__self__, *,
                 destination_type: str,
                 test_destination: 'outputs.GetDestinationDevNullConfigurationTestDestinationResult'):
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "test_destination", test_destination)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="testDestination")
    def test_destination(self) -> 'outputs.GetDestinationDevNullConfigurationTestDestinationResult':
        return pulumi.get(self, "test_destination")


@pulumi.output_type
class GetDestinationDevNullConfigurationTestDestinationResult(dict):
    def __init__(__self__, *,
                 destination_dev_null_test_destination_silent: 'outputs.GetDestinationDevNullConfigurationTestDestinationDestinationDevNullTestDestinationSilentResult',
                 destination_dev_null_update_test_destination_silent: 'outputs.GetDestinationDevNullConfigurationTestDestinationDestinationDevNullUpdateTestDestinationSilentResult'):
        pulumi.set(__self__, "destination_dev_null_test_destination_silent", destination_dev_null_test_destination_silent)
        pulumi.set(__self__, "destination_dev_null_update_test_destination_silent", destination_dev_null_update_test_destination_silent)

    @property
    @pulumi.getter(name="destinationDevNullTestDestinationSilent")
    def destination_dev_null_test_destination_silent(self) -> 'outputs.GetDestinationDevNullConfigurationTestDestinationDestinationDevNullTestDestinationSilentResult':
        return pulumi.get(self, "destination_dev_null_test_destination_silent")

    @property
    @pulumi.getter(name="destinationDevNullUpdateTestDestinationSilent")
    def destination_dev_null_update_test_destination_silent(self) -> 'outputs.GetDestinationDevNullConfigurationTestDestinationDestinationDevNullUpdateTestDestinationSilentResult':
        return pulumi.get(self, "destination_dev_null_update_test_destination_silent")


@pulumi.output_type
class GetDestinationDevNullConfigurationTestDestinationDestinationDevNullTestDestinationSilentResult(dict):
    def __init__(__self__, *,
                 test_destination_type: str):
        pulumi.set(__self__, "test_destination_type", test_destination_type)

    @property
    @pulumi.getter(name="testDestinationType")
    def test_destination_type(self) -> str:
        return pulumi.get(self, "test_destination_type")


@pulumi.output_type
class GetDestinationDevNullConfigurationTestDestinationDestinationDevNullUpdateTestDestinationSilentResult(dict):
    def __init__(__self__, *,
                 test_destination_type: str):
        pulumi.set(__self__, "test_destination_type", test_destination_type)

    @property
    @pulumi.getter(name="testDestinationType")
    def test_destination_type(self) -> str:
        return pulumi.get(self, "test_destination_type")


@pulumi.output_type
class GetDestinationDynamodbConfigurationResult(dict):
    def __init__(__self__, *,
                 access_key_id: str,
                 destination_type: str,
                 dynamodb_endpoint: str,
                 dynamodb_region: str,
                 dynamodb_table_name_prefix: str,
                 secret_access_key: str):
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "dynamodb_endpoint", dynamodb_endpoint)
        pulumi.set(__self__, "dynamodb_region", dynamodb_region)
        pulumi.set(__self__, "dynamodb_table_name_prefix", dynamodb_table_name_prefix)
        pulumi.set(__self__, "secret_access_key", secret_access_key)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> str:
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dynamodbEndpoint")
    def dynamodb_endpoint(self) -> str:
        return pulumi.get(self, "dynamodb_endpoint")

    @property
    @pulumi.getter(name="dynamodbRegion")
    def dynamodb_region(self) -> str:
        return pulumi.get(self, "dynamodb_region")

    @property
    @pulumi.getter(name="dynamodbTableNamePrefix")
    def dynamodb_table_name_prefix(self) -> str:
        return pulumi.get(self, "dynamodb_table_name_prefix")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> str:
        return pulumi.get(self, "secret_access_key")


@pulumi.output_type
class GetDestinationElasticsearchConfigurationResult(dict):
    def __init__(__self__, *,
                 authentication_method: 'outputs.GetDestinationElasticsearchConfigurationAuthenticationMethodResult',
                 ca_certificate: str,
                 destination_type: str,
                 endpoint: str,
                 upsert: bool):
        pulumi.set(__self__, "authentication_method", authentication_method)
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "upsert", upsert)

    @property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> 'outputs.GetDestinationElasticsearchConfigurationAuthenticationMethodResult':
        return pulumi.get(self, "authentication_method")

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def upsert(self) -> bool:
        return pulumi.get(self, "upsert")


@pulumi.output_type
class GetDestinationElasticsearchConfigurationAuthenticationMethodResult(dict):
    def __init__(__self__, *,
                 destination_elasticsearch_authentication_method_api_key_secret: 'outputs.GetDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodApiKeySecretResult',
                 destination_elasticsearch_authentication_method_username_password: 'outputs.GetDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodUsernamePasswordResult',
                 destination_elasticsearch_update_authentication_method_api_key_secret: 'outputs.GetDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodApiKeySecretResult',
                 destination_elasticsearch_update_authentication_method_username_password: 'outputs.GetDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodUsernamePasswordResult'):
        pulumi.set(__self__, "destination_elasticsearch_authentication_method_api_key_secret", destination_elasticsearch_authentication_method_api_key_secret)
        pulumi.set(__self__, "destination_elasticsearch_authentication_method_username_password", destination_elasticsearch_authentication_method_username_password)
        pulumi.set(__self__, "destination_elasticsearch_update_authentication_method_api_key_secret", destination_elasticsearch_update_authentication_method_api_key_secret)
        pulumi.set(__self__, "destination_elasticsearch_update_authentication_method_username_password", destination_elasticsearch_update_authentication_method_username_password)

    @property
    @pulumi.getter(name="destinationElasticsearchAuthenticationMethodApiKeySecret")
    def destination_elasticsearch_authentication_method_api_key_secret(self) -> 'outputs.GetDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodApiKeySecretResult':
        return pulumi.get(self, "destination_elasticsearch_authentication_method_api_key_secret")

    @property
    @pulumi.getter(name="destinationElasticsearchAuthenticationMethodUsernamePassword")
    def destination_elasticsearch_authentication_method_username_password(self) -> 'outputs.GetDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodUsernamePasswordResult':
        return pulumi.get(self, "destination_elasticsearch_authentication_method_username_password")

    @property
    @pulumi.getter(name="destinationElasticsearchUpdateAuthenticationMethodApiKeySecret")
    def destination_elasticsearch_update_authentication_method_api_key_secret(self) -> 'outputs.GetDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodApiKeySecretResult':
        return pulumi.get(self, "destination_elasticsearch_update_authentication_method_api_key_secret")

    @property
    @pulumi.getter(name="destinationElasticsearchUpdateAuthenticationMethodUsernamePassword")
    def destination_elasticsearch_update_authentication_method_username_password(self) -> 'outputs.GetDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodUsernamePasswordResult':
        return pulumi.get(self, "destination_elasticsearch_update_authentication_method_username_password")


@pulumi.output_type
class GetDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodApiKeySecretResult(dict):
    def __init__(__self__, *,
                 api_key_id: str,
                 api_key_secret: str,
                 method: str):
        pulumi.set(__self__, "api_key_id", api_key_id)
        pulumi.set(__self__, "api_key_secret", api_key_secret)
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter(name="apiKeyId")
    def api_key_id(self) -> str:
        return pulumi.get(self, "api_key_id")

    @property
    @pulumi.getter(name="apiKeySecret")
    def api_key_secret(self) -> str:
        return pulumi.get(self, "api_key_secret")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class GetDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodUsernamePasswordResult(dict):
    def __init__(__self__, *,
                 method: str,
                 password: str,
                 username: str):
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodApiKeySecretResult(dict):
    def __init__(__self__, *,
                 api_key_id: str,
                 api_key_secret: str,
                 method: str):
        pulumi.set(__self__, "api_key_id", api_key_id)
        pulumi.set(__self__, "api_key_secret", api_key_secret)
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter(name="apiKeyId")
    def api_key_id(self) -> str:
        return pulumi.get(self, "api_key_id")

    @property
    @pulumi.getter(name="apiKeySecret")
    def api_key_secret(self) -> str:
        return pulumi.get(self, "api_key_secret")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class GetDestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodUsernamePasswordResult(dict):
    def __init__(__self__, *,
                 method: str,
                 password: str,
                 username: str):
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetDestinationFireboltConfigurationResult(dict):
    def __init__(__self__, *,
                 account: str,
                 database: str,
                 destination_type: str,
                 engine: str,
                 host: str,
                 loading_method: 'outputs.GetDestinationFireboltConfigurationLoadingMethodResult',
                 password: str,
                 username: str):
        pulumi.set(__self__, "account", account)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "loading_method", loading_method)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def account(self) -> str:
        return pulumi.get(self, "account")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def engine(self) -> str:
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="loadingMethod")
    def loading_method(self) -> 'outputs.GetDestinationFireboltConfigurationLoadingMethodResult':
        return pulumi.get(self, "loading_method")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetDestinationFireboltConfigurationLoadingMethodResult(dict):
    def __init__(__self__, *,
                 destination_firebolt_loading_method_external_table_via_s3: 'outputs.GetDestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodExternalTableViaS3Result',
                 destination_firebolt_loading_method_sql_inserts: 'outputs.GetDestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodSqlInsertsResult',
                 destination_firebolt_update_loading_method_external_table_via_s3: 'outputs.GetDestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodExternalTableViaS3Result',
                 destination_firebolt_update_loading_method_sql_inserts: 'outputs.GetDestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodSqlInsertsResult'):
        pulumi.set(__self__, "destination_firebolt_loading_method_external_table_via_s3", destination_firebolt_loading_method_external_table_via_s3)
        pulumi.set(__self__, "destination_firebolt_loading_method_sql_inserts", destination_firebolt_loading_method_sql_inserts)
        pulumi.set(__self__, "destination_firebolt_update_loading_method_external_table_via_s3", destination_firebolt_update_loading_method_external_table_via_s3)
        pulumi.set(__self__, "destination_firebolt_update_loading_method_sql_inserts", destination_firebolt_update_loading_method_sql_inserts)

    @property
    @pulumi.getter(name="destinationFireboltLoadingMethodExternalTableViaS3")
    def destination_firebolt_loading_method_external_table_via_s3(self) -> 'outputs.GetDestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodExternalTableViaS3Result':
        return pulumi.get(self, "destination_firebolt_loading_method_external_table_via_s3")

    @property
    @pulumi.getter(name="destinationFireboltLoadingMethodSqlInserts")
    def destination_firebolt_loading_method_sql_inserts(self) -> 'outputs.GetDestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodSqlInsertsResult':
        return pulumi.get(self, "destination_firebolt_loading_method_sql_inserts")

    @property
    @pulumi.getter(name="destinationFireboltUpdateLoadingMethodExternalTableViaS3")
    def destination_firebolt_update_loading_method_external_table_via_s3(self) -> 'outputs.GetDestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodExternalTableViaS3Result':
        return pulumi.get(self, "destination_firebolt_update_loading_method_external_table_via_s3")

    @property
    @pulumi.getter(name="destinationFireboltUpdateLoadingMethodSqlInserts")
    def destination_firebolt_update_loading_method_sql_inserts(self) -> 'outputs.GetDestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodSqlInsertsResult':
        return pulumi.get(self, "destination_firebolt_update_loading_method_sql_inserts")


@pulumi.output_type
class GetDestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodExternalTableViaS3Result(dict):
    def __init__(__self__, *,
                 aws_key_id: str,
                 aws_key_secret: str,
                 method: str,
                 s3_bucket: str,
                 s3_region: str):
        pulumi.set(__self__, "aws_key_id", aws_key_id)
        pulumi.set(__self__, "aws_key_secret", aws_key_secret)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)

    @property
    @pulumi.getter(name="awsKeyId")
    def aws_key_id(self) -> str:
        return pulumi.get(self, "aws_key_id")

    @property
    @pulumi.getter(name="awsKeySecret")
    def aws_key_secret(self) -> str:
        return pulumi.get(self, "aws_key_secret")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")


@pulumi.output_type
class GetDestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodSqlInsertsResult(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class GetDestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodExternalTableViaS3Result(dict):
    def __init__(__self__, *,
                 aws_key_id: str,
                 aws_key_secret: str,
                 method: str,
                 s3_bucket: str,
                 s3_region: str):
        pulumi.set(__self__, "aws_key_id", aws_key_id)
        pulumi.set(__self__, "aws_key_secret", aws_key_secret)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)

    @property
    @pulumi.getter(name="awsKeyId")
    def aws_key_id(self) -> str:
        return pulumi.get(self, "aws_key_id")

    @property
    @pulumi.getter(name="awsKeySecret")
    def aws_key_secret(self) -> str:
        return pulumi.get(self, "aws_key_secret")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")


@pulumi.output_type
class GetDestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodSqlInsertsResult(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class GetDestinationFirestoreConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials_json: str,
                 destination_type: str,
                 project_id: str):
        pulumi.set(__self__, "credentials_json", credentials_json)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> str:
        return pulumi.get(self, "credentials_json")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetDestinationGcsConfigurationResult(dict):
    def __init__(__self__, *,
                 credential: 'outputs.GetDestinationGcsConfigurationCredentialResult',
                 destination_type: str,
                 format: 'outputs.GetDestinationGcsConfigurationFormatResult',
                 gcs_bucket_name: str,
                 gcs_bucket_path: str,
                 gcs_bucket_region: str):
        pulumi.set(__self__, "credential", credential)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "gcs_bucket_name", gcs_bucket_name)
        pulumi.set(__self__, "gcs_bucket_path", gcs_bucket_path)
        pulumi.set(__self__, "gcs_bucket_region", gcs_bucket_region)

    @property
    @pulumi.getter
    def credential(self) -> 'outputs.GetDestinationGcsConfigurationCredentialResult':
        return pulumi.get(self, "credential")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def format(self) -> 'outputs.GetDestinationGcsConfigurationFormatResult':
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="gcsBucketName")
    def gcs_bucket_name(self) -> str:
        return pulumi.get(self, "gcs_bucket_name")

    @property
    @pulumi.getter(name="gcsBucketPath")
    def gcs_bucket_path(self) -> str:
        return pulumi.get(self, "gcs_bucket_path")

    @property
    @pulumi.getter(name="gcsBucketRegion")
    def gcs_bucket_region(self) -> str:
        return pulumi.get(self, "gcs_bucket_region")


@pulumi.output_type
class GetDestinationGcsConfigurationCredentialResult(dict):
    def __init__(__self__, *,
                 destination_gcs_authentication_hmac_key: 'outputs.GetDestinationGcsConfigurationCredentialDestinationGcsAuthenticationHmacKeyResult',
                 destination_gcs_update_authentication_hmac_key: 'outputs.GetDestinationGcsConfigurationCredentialDestinationGcsUpdateAuthenticationHmacKeyResult'):
        pulumi.set(__self__, "destination_gcs_authentication_hmac_key", destination_gcs_authentication_hmac_key)
        pulumi.set(__self__, "destination_gcs_update_authentication_hmac_key", destination_gcs_update_authentication_hmac_key)

    @property
    @pulumi.getter(name="destinationGcsAuthenticationHmacKey")
    def destination_gcs_authentication_hmac_key(self) -> 'outputs.GetDestinationGcsConfigurationCredentialDestinationGcsAuthenticationHmacKeyResult':
        return pulumi.get(self, "destination_gcs_authentication_hmac_key")

    @property
    @pulumi.getter(name="destinationGcsUpdateAuthenticationHmacKey")
    def destination_gcs_update_authentication_hmac_key(self) -> 'outputs.GetDestinationGcsConfigurationCredentialDestinationGcsUpdateAuthenticationHmacKeyResult':
        return pulumi.get(self, "destination_gcs_update_authentication_hmac_key")


@pulumi.output_type
class GetDestinationGcsConfigurationCredentialDestinationGcsAuthenticationHmacKeyResult(dict):
    def __init__(__self__, *,
                 credential_type: str,
                 hmac_key_access_id: str,
                 hmac_key_secret: str):
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "hmac_key_access_id", hmac_key_access_id)
        pulumi.set(__self__, "hmac_key_secret", hmac_key_secret)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="hmacKeyAccessId")
    def hmac_key_access_id(self) -> str:
        return pulumi.get(self, "hmac_key_access_id")

    @property
    @pulumi.getter(name="hmacKeySecret")
    def hmac_key_secret(self) -> str:
        return pulumi.get(self, "hmac_key_secret")


@pulumi.output_type
class GetDestinationGcsConfigurationCredentialDestinationGcsUpdateAuthenticationHmacKeyResult(dict):
    def __init__(__self__, *,
                 credential_type: str,
                 hmac_key_access_id: str,
                 hmac_key_secret: str):
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "hmac_key_access_id", hmac_key_access_id)
        pulumi.set(__self__, "hmac_key_secret", hmac_key_secret)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="hmacKeyAccessId")
    def hmac_key_access_id(self) -> str:
        return pulumi.get(self, "hmac_key_access_id")

    @property
    @pulumi.getter(name="hmacKeySecret")
    def hmac_key_secret(self) -> str:
        return pulumi.get(self, "hmac_key_secret")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatResult(dict):
    def __init__(__self__, *,
                 destination_gcs_output_format_avro_apache_avro: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroResult',
                 destination_gcs_output_format_csv_comma_separated_values: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesResult',
                 destination_gcs_output_format_json_lines_newline_delimited_json: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonResult',
                 destination_gcs_output_format_parquet_columnar_storage: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatParquetColumnarStorageResult',
                 destination_gcs_update_output_format_avro_apache_avro: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroResult',
                 destination_gcs_update_output_format_csv_comma_separated_values: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesResult',
                 destination_gcs_update_output_format_json_lines_newline_delimited_json: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonResult',
                 destination_gcs_update_output_format_parquet_columnar_storage: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatParquetColumnarStorageResult'):
        pulumi.set(__self__, "destination_gcs_output_format_avro_apache_avro", destination_gcs_output_format_avro_apache_avro)
        pulumi.set(__self__, "destination_gcs_output_format_csv_comma_separated_values", destination_gcs_output_format_csv_comma_separated_values)
        pulumi.set(__self__, "destination_gcs_output_format_json_lines_newline_delimited_json", destination_gcs_output_format_json_lines_newline_delimited_json)
        pulumi.set(__self__, "destination_gcs_output_format_parquet_columnar_storage", destination_gcs_output_format_parquet_columnar_storage)
        pulumi.set(__self__, "destination_gcs_update_output_format_avro_apache_avro", destination_gcs_update_output_format_avro_apache_avro)
        pulumi.set(__self__, "destination_gcs_update_output_format_csv_comma_separated_values", destination_gcs_update_output_format_csv_comma_separated_values)
        pulumi.set(__self__, "destination_gcs_update_output_format_json_lines_newline_delimited_json", destination_gcs_update_output_format_json_lines_newline_delimited_json)
        pulumi.set(__self__, "destination_gcs_update_output_format_parquet_columnar_storage", destination_gcs_update_output_format_parquet_columnar_storage)

    @property
    @pulumi.getter(name="destinationGcsOutputFormatAvroApacheAvro")
    def destination_gcs_output_format_avro_apache_avro(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroResult':
        return pulumi.get(self, "destination_gcs_output_format_avro_apache_avro")

    @property
    @pulumi.getter(name="destinationGcsOutputFormatCsvCommaSeparatedValues")
    def destination_gcs_output_format_csv_comma_separated_values(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesResult':
        return pulumi.get(self, "destination_gcs_output_format_csv_comma_separated_values")

    @property
    @pulumi.getter(name="destinationGcsOutputFormatJsonLinesNewlineDelimitedJson")
    def destination_gcs_output_format_json_lines_newline_delimited_json(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonResult':
        return pulumi.get(self, "destination_gcs_output_format_json_lines_newline_delimited_json")

    @property
    @pulumi.getter(name="destinationGcsOutputFormatParquetColumnarStorage")
    def destination_gcs_output_format_parquet_columnar_storage(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatParquetColumnarStorageResult':
        return pulumi.get(self, "destination_gcs_output_format_parquet_columnar_storage")

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatAvroApacheAvro")
    def destination_gcs_update_output_format_avro_apache_avro(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroResult':
        return pulumi.get(self, "destination_gcs_update_output_format_avro_apache_avro")

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatCsvCommaSeparatedValues")
    def destination_gcs_update_output_format_csv_comma_separated_values(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesResult':
        return pulumi.get(self, "destination_gcs_update_output_format_csv_comma_separated_values")

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJson")
    def destination_gcs_update_output_format_json_lines_newline_delimited_json(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonResult':
        return pulumi.get(self, "destination_gcs_update_output_format_json_lines_newline_delimited_json")

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatParquetColumnarStorage")
    def destination_gcs_update_output_format_parquet_columnar_storage(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatParquetColumnarStorageResult':
        return pulumi.get(self, "destination_gcs_update_output_format_parquet_columnar_storage")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroResult(dict):
    def __init__(__self__, *,
                 compression_codec: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecResult',
                 format_type: str):
        pulumi.set(__self__, "compression_codec", compression_codec)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecResult':
        return pulumi.get(self, "compression_codec")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecResult(dict):
    def __init__(__self__, *,
                 destination_gcs_output_format_avro_apache_avro_compression_codec_bzip2: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2Result',
                 destination_gcs_output_format_avro_apache_avro_compression_codec_deflate: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflateResult',
                 destination_gcs_output_format_avro_apache_avro_compression_codec_no_compression: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompressionResult',
                 destination_gcs_output_format_avro_apache_avro_compression_codec_snappy: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappyResult',
                 destination_gcs_output_format_avro_apache_avro_compression_codec_xz: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecXzResult',
                 destination_gcs_output_format_avro_apache_avro_compression_codec_zstandard: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandardResult'):
        pulumi.set(__self__, "destination_gcs_output_format_avro_apache_avro_compression_codec_bzip2", destination_gcs_output_format_avro_apache_avro_compression_codec_bzip2)
        pulumi.set(__self__, "destination_gcs_output_format_avro_apache_avro_compression_codec_deflate", destination_gcs_output_format_avro_apache_avro_compression_codec_deflate)
        pulumi.set(__self__, "destination_gcs_output_format_avro_apache_avro_compression_codec_no_compression", destination_gcs_output_format_avro_apache_avro_compression_codec_no_compression)
        pulumi.set(__self__, "destination_gcs_output_format_avro_apache_avro_compression_codec_snappy", destination_gcs_output_format_avro_apache_avro_compression_codec_snappy)
        pulumi.set(__self__, "destination_gcs_output_format_avro_apache_avro_compression_codec_xz", destination_gcs_output_format_avro_apache_avro_compression_codec_xz)
        pulumi.set(__self__, "destination_gcs_output_format_avro_apache_avro_compression_codec_zstandard", destination_gcs_output_format_avro_apache_avro_compression_codec_zstandard)

    @property
    @pulumi.getter(name="destinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2")
    def destination_gcs_output_format_avro_apache_avro_compression_codec_bzip2(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2Result':
        return pulumi.get(self, "destination_gcs_output_format_avro_apache_avro_compression_codec_bzip2")

    @property
    @pulumi.getter(name="destinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate")
    def destination_gcs_output_format_avro_apache_avro_compression_codec_deflate(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflateResult':
        return pulumi.get(self, "destination_gcs_output_format_avro_apache_avro_compression_codec_deflate")

    @property
    @pulumi.getter(name="destinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression")
    def destination_gcs_output_format_avro_apache_avro_compression_codec_no_compression(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompressionResult':
        return pulumi.get(self, "destination_gcs_output_format_avro_apache_avro_compression_codec_no_compression")

    @property
    @pulumi.getter(name="destinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy")
    def destination_gcs_output_format_avro_apache_avro_compression_codec_snappy(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappyResult':
        return pulumi.get(self, "destination_gcs_output_format_avro_apache_avro_compression_codec_snappy")

    @property
    @pulumi.getter(name="destinationGcsOutputFormatAvroApacheAvroCompressionCodecXz")
    def destination_gcs_output_format_avro_apache_avro_compression_codec_xz(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecXzResult':
        return pulumi.get(self, "destination_gcs_output_format_avro_apache_avro_compression_codec_xz")

    @property
    @pulumi.getter(name="destinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard")
    def destination_gcs_output_format_avro_apache_avro_compression_codec_zstandard(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandardResult':
        return pulumi.get(self, "destination_gcs_output_format_avro_apache_avro_compression_codec_zstandard")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2Result(dict):
    def __init__(__self__, *,
                 codec: str):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflateResult(dict):
    def __init__(__self__, *,
                 codec: str,
                 compression_level: int):
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "compression_level", compression_level)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> int:
        return pulumi.get(self, "compression_level")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompressionResult(dict):
    def __init__(__self__, *,
                 codec: str):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappyResult(dict):
    def __init__(__self__, *,
                 codec: str):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecXzResult(dict):
    def __init__(__self__, *,
                 codec: str,
                 compression_level: int):
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "compression_level", compression_level)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> int:
        return pulumi.get(self, "compression_level")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandardResult(dict):
    def __init__(__self__, *,
                 codec: str,
                 compression_level: int,
                 include_checksum: bool):
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "compression_level", compression_level)
        pulumi.set(__self__, "include_checksum", include_checksum)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> int:
        return pulumi.get(self, "compression_level")

    @property
    @pulumi.getter(name="includeChecksum")
    def include_checksum(self) -> bool:
        return pulumi.get(self, "include_checksum")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesResult(dict):
    def __init__(__self__, *,
                 compression: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionResult',
                 flattening: str,
                 format_type: str):
        pulumi.set(__self__, "compression", compression)
        pulumi.set(__self__, "flattening", flattening)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter
    def compression(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionResult':
        return pulumi.get(self, "compression")

    @property
    @pulumi.getter
    def flattening(self) -> str:
        return pulumi.get(self, "flattening")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionResult(dict):
    def __init__(__self__, *,
                 destination_gcs_output_format_csv_comma_separated_values_compression_gzip: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzipResult',
                 destination_gcs_output_format_csv_comma_separated_values_compression_no_compression: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompressionResult'):
        pulumi.set(__self__, "destination_gcs_output_format_csv_comma_separated_values_compression_gzip", destination_gcs_output_format_csv_comma_separated_values_compression_gzip)
        pulumi.set(__self__, "destination_gcs_output_format_csv_comma_separated_values_compression_no_compression", destination_gcs_output_format_csv_comma_separated_values_compression_no_compression)

    @property
    @pulumi.getter(name="destinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzip")
    def destination_gcs_output_format_csv_comma_separated_values_compression_gzip(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzipResult':
        return pulumi.get(self, "destination_gcs_output_format_csv_comma_separated_values_compression_gzip")

    @property
    @pulumi.getter(name="destinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompression")
    def destination_gcs_output_format_csv_comma_separated_values_compression_no_compression(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompressionResult':
        return pulumi.get(self, "destination_gcs_output_format_csv_comma_separated_values_compression_no_compression")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzipResult(dict):
    def __init__(__self__, *,
                 compression_type: str):
        pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> str:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompressionResult(dict):
    def __init__(__self__, *,
                 compression_type: str):
        pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> str:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonResult(dict):
    def __init__(__self__, *,
                 compression: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionResult',
                 format_type: str):
        pulumi.set(__self__, "compression", compression)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter
    def compression(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionResult':
        return pulumi.get(self, "compression")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionResult(dict):
    def __init__(__self__, *,
                 destination_gcs_output_format_json_lines_newline_delimited_json_compression_gzip: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipResult',
                 destination_gcs_output_format_json_lines_newline_delimited_json_compression_no_compression: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionResult'):
        pulumi.set(__self__, "destination_gcs_output_format_json_lines_newline_delimited_json_compression_gzip", destination_gcs_output_format_json_lines_newline_delimited_json_compression_gzip)
        pulumi.set(__self__, "destination_gcs_output_format_json_lines_newline_delimited_json_compression_no_compression", destination_gcs_output_format_json_lines_newline_delimited_json_compression_no_compression)

    @property
    @pulumi.getter(name="destinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip")
    def destination_gcs_output_format_json_lines_newline_delimited_json_compression_gzip(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipResult':
        return pulumi.get(self, "destination_gcs_output_format_json_lines_newline_delimited_json_compression_gzip")

    @property
    @pulumi.getter(name="destinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression")
    def destination_gcs_output_format_json_lines_newline_delimited_json_compression_no_compression(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionResult':
        return pulumi.get(self, "destination_gcs_output_format_json_lines_newline_delimited_json_compression_no_compression")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipResult(dict):
    def __init__(__self__, *,
                 compression_type: str):
        pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> str:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionResult(dict):
    def __init__(__self__, *,
                 compression_type: str):
        pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> str:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsOutputFormatParquetColumnarStorageResult(dict):
    def __init__(__self__, *,
                 block_size_mb: int,
                 compression_codec: str,
                 dictionary_encoding: bool,
                 dictionary_page_size_kb: int,
                 format_type: str,
                 max_padding_size_mb: int,
                 page_size_kb: int):
        pulumi.set(__self__, "block_size_mb", block_size_mb)
        pulumi.set(__self__, "compression_codec", compression_codec)
        pulumi.set(__self__, "dictionary_encoding", dictionary_encoding)
        pulumi.set(__self__, "dictionary_page_size_kb", dictionary_page_size_kb)
        pulumi.set(__self__, "format_type", format_type)
        pulumi.set(__self__, "max_padding_size_mb", max_padding_size_mb)
        pulumi.set(__self__, "page_size_kb", page_size_kb)

    @property
    @pulumi.getter(name="blockSizeMb")
    def block_size_mb(self) -> int:
        return pulumi.get(self, "block_size_mb")

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> str:
        return pulumi.get(self, "compression_codec")

    @property
    @pulumi.getter(name="dictionaryEncoding")
    def dictionary_encoding(self) -> bool:
        return pulumi.get(self, "dictionary_encoding")

    @property
    @pulumi.getter(name="dictionaryPageSizeKb")
    def dictionary_page_size_kb(self) -> int:
        return pulumi.get(self, "dictionary_page_size_kb")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter(name="maxPaddingSizeMb")
    def max_padding_size_mb(self) -> int:
        return pulumi.get(self, "max_padding_size_mb")

    @property
    @pulumi.getter(name="pageSizeKb")
    def page_size_kb(self) -> int:
        return pulumi.get(self, "page_size_kb")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroResult(dict):
    def __init__(__self__, *,
                 compression_codec: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecResult',
                 format_type: str):
        pulumi.set(__self__, "compression_codec", compression_codec)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecResult':
        return pulumi.get(self, "compression_codec")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecResult(dict):
    def __init__(__self__, *,
                 destination_gcs_update_output_format_avro_apache_avro_compression_codec_bzip2: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecBzip2Result',
                 destination_gcs_update_output_format_avro_apache_avro_compression_codec_deflate: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflateResult',
                 destination_gcs_update_output_format_avro_apache_avro_compression_codec_no_compression: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecNoCompressionResult',
                 destination_gcs_update_output_format_avro_apache_avro_compression_codec_snappy: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecSnappyResult',
                 destination_gcs_update_output_format_avro_apache_avro_compression_codec_xz: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXzResult',
                 destination_gcs_update_output_format_avro_apache_avro_compression_codec_zstandard: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandardResult'):
        pulumi.set(__self__, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_bzip2", destination_gcs_update_output_format_avro_apache_avro_compression_codec_bzip2)
        pulumi.set(__self__, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_deflate", destination_gcs_update_output_format_avro_apache_avro_compression_codec_deflate)
        pulumi.set(__self__, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_no_compression", destination_gcs_update_output_format_avro_apache_avro_compression_codec_no_compression)
        pulumi.set(__self__, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_snappy", destination_gcs_update_output_format_avro_apache_avro_compression_codec_snappy)
        pulumi.set(__self__, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_xz", destination_gcs_update_output_format_avro_apache_avro_compression_codec_xz)
        pulumi.set(__self__, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_zstandard", destination_gcs_update_output_format_avro_apache_avro_compression_codec_zstandard)

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecBzip2")
    def destination_gcs_update_output_format_avro_apache_avro_compression_codec_bzip2(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecBzip2Result':
        return pulumi.get(self, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_bzip2")

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflate")
    def destination_gcs_update_output_format_avro_apache_avro_compression_codec_deflate(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflateResult':
        return pulumi.get(self, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_deflate")

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression")
    def destination_gcs_update_output_format_avro_apache_avro_compression_codec_no_compression(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecNoCompressionResult':
        return pulumi.get(self, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_no_compression")

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecSnappy")
    def destination_gcs_update_output_format_avro_apache_avro_compression_codec_snappy(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecSnappyResult':
        return pulumi.get(self, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_snappy")

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXz")
    def destination_gcs_update_output_format_avro_apache_avro_compression_codec_xz(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXzResult':
        return pulumi.get(self, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_xz")

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandard")
    def destination_gcs_update_output_format_avro_apache_avro_compression_codec_zstandard(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandardResult':
        return pulumi.get(self, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_zstandard")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecBzip2Result(dict):
    def __init__(__self__, *,
                 codec: str):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflateResult(dict):
    def __init__(__self__, *,
                 codec: str,
                 compression_level: int):
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "compression_level", compression_level)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> int:
        return pulumi.get(self, "compression_level")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecNoCompressionResult(dict):
    def __init__(__self__, *,
                 codec: str):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecSnappyResult(dict):
    def __init__(__self__, *,
                 codec: str):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXzResult(dict):
    def __init__(__self__, *,
                 codec: str,
                 compression_level: int):
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "compression_level", compression_level)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> int:
        return pulumi.get(self, "compression_level")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandardResult(dict):
    def __init__(__self__, *,
                 codec: str,
                 compression_level: int,
                 include_checksum: bool):
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "compression_level", compression_level)
        pulumi.set(__self__, "include_checksum", include_checksum)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> int:
        return pulumi.get(self, "compression_level")

    @property
    @pulumi.getter(name="includeChecksum")
    def include_checksum(self) -> bool:
        return pulumi.get(self, "include_checksum")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesResult(dict):
    def __init__(__self__, *,
                 compression: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionResult',
                 flattening: str,
                 format_type: str):
        pulumi.set(__self__, "compression", compression)
        pulumi.set(__self__, "flattening", flattening)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter
    def compression(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionResult':
        return pulumi.get(self, "compression")

    @property
    @pulumi.getter
    def flattening(self) -> str:
        return pulumi.get(self, "flattening")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionResult(dict):
    def __init__(__self__, *,
                 destination_gcs_update_output_format_csv_comma_separated_values_compression_gzip: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzipResult',
                 destination_gcs_update_output_format_csv_comma_separated_values_compression_no_compression: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompressionResult'):
        pulumi.set(__self__, "destination_gcs_update_output_format_csv_comma_separated_values_compression_gzip", destination_gcs_update_output_format_csv_comma_separated_values_compression_gzip)
        pulumi.set(__self__, "destination_gcs_update_output_format_csv_comma_separated_values_compression_no_compression", destination_gcs_update_output_format_csv_comma_separated_values_compression_no_compression)

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip")
    def destination_gcs_update_output_format_csv_comma_separated_values_compression_gzip(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzipResult':
        return pulumi.get(self, "destination_gcs_update_output_format_csv_comma_separated_values_compression_gzip")

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression")
    def destination_gcs_update_output_format_csv_comma_separated_values_compression_no_compression(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompressionResult':
        return pulumi.get(self, "destination_gcs_update_output_format_csv_comma_separated_values_compression_no_compression")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzipResult(dict):
    def __init__(__self__, *,
                 compression_type: str):
        pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> str:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompressionResult(dict):
    def __init__(__self__, *,
                 compression_type: str):
        pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> str:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonResult(dict):
    def __init__(__self__, *,
                 compression: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionResult',
                 format_type: str):
        pulumi.set(__self__, "compression", compression)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter
    def compression(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionResult':
        return pulumi.get(self, "compression")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionResult(dict):
    def __init__(__self__, *,
                 destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_gzip: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipResult',
                 destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_no_compression: 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionResult'):
        pulumi.set(__self__, "destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_gzip", destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_gzip)
        pulumi.set(__self__, "destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_no_compression", destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_no_compression)

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip")
    def destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_gzip(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipResult':
        return pulumi.get(self, "destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_gzip")

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression")
    def destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_no_compression(self) -> 'outputs.GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionResult':
        return pulumi.get(self, "destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_no_compression")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipResult(dict):
    def __init__(__self__, *,
                 compression_type: str):
        pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> str:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionResult(dict):
    def __init__(__self__, *,
                 compression_type: str):
        pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> str:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class GetDestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatParquetColumnarStorageResult(dict):
    def __init__(__self__, *,
                 block_size_mb: int,
                 compression_codec: str,
                 dictionary_encoding: bool,
                 dictionary_page_size_kb: int,
                 format_type: str,
                 max_padding_size_mb: int,
                 page_size_kb: int):
        pulumi.set(__self__, "block_size_mb", block_size_mb)
        pulumi.set(__self__, "compression_codec", compression_codec)
        pulumi.set(__self__, "dictionary_encoding", dictionary_encoding)
        pulumi.set(__self__, "dictionary_page_size_kb", dictionary_page_size_kb)
        pulumi.set(__self__, "format_type", format_type)
        pulumi.set(__self__, "max_padding_size_mb", max_padding_size_mb)
        pulumi.set(__self__, "page_size_kb", page_size_kb)

    @property
    @pulumi.getter(name="blockSizeMb")
    def block_size_mb(self) -> int:
        return pulumi.get(self, "block_size_mb")

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> str:
        return pulumi.get(self, "compression_codec")

    @property
    @pulumi.getter(name="dictionaryEncoding")
    def dictionary_encoding(self) -> bool:
        return pulumi.get(self, "dictionary_encoding")

    @property
    @pulumi.getter(name="dictionaryPageSizeKb")
    def dictionary_page_size_kb(self) -> int:
        return pulumi.get(self, "dictionary_page_size_kb")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter(name="maxPaddingSizeMb")
    def max_padding_size_mb(self) -> int:
        return pulumi.get(self, "max_padding_size_mb")

    @property
    @pulumi.getter(name="pageSizeKb")
    def page_size_kb(self) -> int:
        return pulumi.get(self, "page_size_kb")


@pulumi.output_type
class GetDestinationGoogleSheetsConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetDestinationGoogleSheetsConfigurationCredentialsResult',
                 destination_type: str,
                 spreadsheet_id: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "spreadsheet_id", spreadsheet_id)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetDestinationGoogleSheetsConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="spreadsheetId")
    def spreadsheet_id(self) -> str:
        return pulumi.get(self, "spreadsheet_id")


@pulumi.output_type
class GetDestinationGoogleSheetsConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetDestinationKeenConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 destination_type: str,
                 infer_timestamp: bool,
                 project_id: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "infer_timestamp", infer_timestamp)
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="inferTimestamp")
    def infer_timestamp(self) -> bool:
        return pulumi.get(self, "infer_timestamp")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetDestinationKinesisConfigurationResult(dict):
    def __init__(__self__, *,
                 access_key: str,
                 buffer_size: int,
                 destination_type: str,
                 endpoint: str,
                 private_key: str,
                 region: str,
                 shard_count: int):
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "buffer_size", buffer_size)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "private_key", private_key)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "shard_count", shard_count)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="bufferSize")
    def buffer_size(self) -> int:
        return pulumi.get(self, "buffer_size")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> str:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="shardCount")
    def shard_count(self) -> int:
        return pulumi.get(self, "shard_count")


@pulumi.output_type
class GetDestinationLangchainConfigurationResult(dict):
    def __init__(__self__, *,
                 destination_type: str,
                 embedding: 'outputs.GetDestinationLangchainConfigurationEmbeddingResult',
                 indexing: 'outputs.GetDestinationLangchainConfigurationIndexingResult',
                 processing: 'outputs.GetDestinationLangchainConfigurationProcessingResult'):
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "embedding", embedding)
        pulumi.set(__self__, "indexing", indexing)
        pulumi.set(__self__, "processing", processing)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def embedding(self) -> 'outputs.GetDestinationLangchainConfigurationEmbeddingResult':
        return pulumi.get(self, "embedding")

    @property
    @pulumi.getter
    def indexing(self) -> 'outputs.GetDestinationLangchainConfigurationIndexingResult':
        return pulumi.get(self, "indexing")

    @property
    @pulumi.getter
    def processing(self) -> 'outputs.GetDestinationLangchainConfigurationProcessingResult':
        return pulumi.get(self, "processing")


@pulumi.output_type
class GetDestinationLangchainConfigurationEmbeddingResult(dict):
    def __init__(__self__, *,
                 destination_langchain_embedding_fake: 'outputs.GetDestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingFakeResult',
                 destination_langchain_embedding_open_ai: 'outputs.GetDestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingOpenAiResult',
                 destination_langchain_update_embedding_fake: 'outputs.GetDestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingFakeResult',
                 destination_langchain_update_embedding_open_ai: 'outputs.GetDestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingOpenAiResult'):
        pulumi.set(__self__, "destination_langchain_embedding_fake", destination_langchain_embedding_fake)
        pulumi.set(__self__, "destination_langchain_embedding_open_ai", destination_langchain_embedding_open_ai)
        pulumi.set(__self__, "destination_langchain_update_embedding_fake", destination_langchain_update_embedding_fake)
        pulumi.set(__self__, "destination_langchain_update_embedding_open_ai", destination_langchain_update_embedding_open_ai)

    @property
    @pulumi.getter(name="destinationLangchainEmbeddingFake")
    def destination_langchain_embedding_fake(self) -> 'outputs.GetDestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingFakeResult':
        return pulumi.get(self, "destination_langchain_embedding_fake")

    @property
    @pulumi.getter(name="destinationLangchainEmbeddingOpenAi")
    def destination_langchain_embedding_open_ai(self) -> 'outputs.GetDestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingOpenAiResult':
        return pulumi.get(self, "destination_langchain_embedding_open_ai")

    @property
    @pulumi.getter(name="destinationLangchainUpdateEmbeddingFake")
    def destination_langchain_update_embedding_fake(self) -> 'outputs.GetDestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingFakeResult':
        return pulumi.get(self, "destination_langchain_update_embedding_fake")

    @property
    @pulumi.getter(name="destinationLangchainUpdateEmbeddingOpenAi")
    def destination_langchain_update_embedding_open_ai(self) -> 'outputs.GetDestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingOpenAiResult':
        return pulumi.get(self, "destination_langchain_update_embedding_open_ai")


@pulumi.output_type
class GetDestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingFakeResult(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetDestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingOpenAiResult(dict):
    def __init__(__self__, *,
                 mode: str,
                 openai_key: str):
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "openai_key", openai_key)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="openaiKey")
    def openai_key(self) -> str:
        return pulumi.get(self, "openai_key")


@pulumi.output_type
class GetDestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingFakeResult(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetDestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingOpenAiResult(dict):
    def __init__(__self__, *,
                 mode: str,
                 openai_key: str):
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "openai_key", openai_key)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="openaiKey")
    def openai_key(self) -> str:
        return pulumi.get(self, "openai_key")


@pulumi.output_type
class GetDestinationLangchainConfigurationIndexingResult(dict):
    def __init__(__self__, *,
                 destination_langchain_indexing_chroma_local_persistance: 'outputs.GetDestinationLangchainConfigurationIndexingDestinationLangchainIndexingChromaLocalPersistanceResult',
                 destination_langchain_indexing_doc_array_hnsw_search: 'outputs.GetDestinationLangchainConfigurationIndexingDestinationLangchainIndexingDocArrayHnswSearchResult',
                 destination_langchain_indexing_pinecone: 'outputs.GetDestinationLangchainConfigurationIndexingDestinationLangchainIndexingPineconeResult',
                 destination_langchain_update_indexing_chroma_local_persistance: 'outputs.GetDestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingChromaLocalPersistanceResult',
                 destination_langchain_update_indexing_doc_array_hnsw_search: 'outputs.GetDestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingDocArrayHnswSearchResult',
                 destination_langchain_update_indexing_pinecone: 'outputs.GetDestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingPineconeResult'):
        pulumi.set(__self__, "destination_langchain_indexing_chroma_local_persistance", destination_langchain_indexing_chroma_local_persistance)
        pulumi.set(__self__, "destination_langchain_indexing_doc_array_hnsw_search", destination_langchain_indexing_doc_array_hnsw_search)
        pulumi.set(__self__, "destination_langchain_indexing_pinecone", destination_langchain_indexing_pinecone)
        pulumi.set(__self__, "destination_langchain_update_indexing_chroma_local_persistance", destination_langchain_update_indexing_chroma_local_persistance)
        pulumi.set(__self__, "destination_langchain_update_indexing_doc_array_hnsw_search", destination_langchain_update_indexing_doc_array_hnsw_search)
        pulumi.set(__self__, "destination_langchain_update_indexing_pinecone", destination_langchain_update_indexing_pinecone)

    @property
    @pulumi.getter(name="destinationLangchainIndexingChromaLocalPersistance")
    def destination_langchain_indexing_chroma_local_persistance(self) -> 'outputs.GetDestinationLangchainConfigurationIndexingDestinationLangchainIndexingChromaLocalPersistanceResult':
        return pulumi.get(self, "destination_langchain_indexing_chroma_local_persistance")

    @property
    @pulumi.getter(name="destinationLangchainIndexingDocArrayHnswSearch")
    def destination_langchain_indexing_doc_array_hnsw_search(self) -> 'outputs.GetDestinationLangchainConfigurationIndexingDestinationLangchainIndexingDocArrayHnswSearchResult':
        return pulumi.get(self, "destination_langchain_indexing_doc_array_hnsw_search")

    @property
    @pulumi.getter(name="destinationLangchainIndexingPinecone")
    def destination_langchain_indexing_pinecone(self) -> 'outputs.GetDestinationLangchainConfigurationIndexingDestinationLangchainIndexingPineconeResult':
        return pulumi.get(self, "destination_langchain_indexing_pinecone")

    @property
    @pulumi.getter(name="destinationLangchainUpdateIndexingChromaLocalPersistance")
    def destination_langchain_update_indexing_chroma_local_persistance(self) -> 'outputs.GetDestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingChromaLocalPersistanceResult':
        return pulumi.get(self, "destination_langchain_update_indexing_chroma_local_persistance")

    @property
    @pulumi.getter(name="destinationLangchainUpdateIndexingDocArrayHnswSearch")
    def destination_langchain_update_indexing_doc_array_hnsw_search(self) -> 'outputs.GetDestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingDocArrayHnswSearchResult':
        return pulumi.get(self, "destination_langchain_update_indexing_doc_array_hnsw_search")

    @property
    @pulumi.getter(name="destinationLangchainUpdateIndexingPinecone")
    def destination_langchain_update_indexing_pinecone(self) -> 'outputs.GetDestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingPineconeResult':
        return pulumi.get(self, "destination_langchain_update_indexing_pinecone")


@pulumi.output_type
class GetDestinationLangchainConfigurationIndexingDestinationLangchainIndexingChromaLocalPersistanceResult(dict):
    def __init__(__self__, *,
                 collection_name: str,
                 destination_path: str,
                 mode: str):
        pulumi.set(__self__, "collection_name", collection_name)
        pulumi.set(__self__, "destination_path", destination_path)
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="collectionName")
    def collection_name(self) -> str:
        return pulumi.get(self, "collection_name")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> str:
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetDestinationLangchainConfigurationIndexingDestinationLangchainIndexingDocArrayHnswSearchResult(dict):
    def __init__(__self__, *,
                 destination_path: str,
                 mode: str):
        pulumi.set(__self__, "destination_path", destination_path)
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> str:
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetDestinationLangchainConfigurationIndexingDestinationLangchainIndexingPineconeResult(dict):
    def __init__(__self__, *,
                 index: str,
                 mode: str,
                 pinecone_environment: str,
                 pinecone_key: str):
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "pinecone_environment", pinecone_environment)
        pulumi.set(__self__, "pinecone_key", pinecone_key)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="pineconeEnvironment")
    def pinecone_environment(self) -> str:
        return pulumi.get(self, "pinecone_environment")

    @property
    @pulumi.getter(name="pineconeKey")
    def pinecone_key(self) -> str:
        return pulumi.get(self, "pinecone_key")


@pulumi.output_type
class GetDestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingChromaLocalPersistanceResult(dict):
    def __init__(__self__, *,
                 collection_name: str,
                 destination_path: str,
                 mode: str):
        pulumi.set(__self__, "collection_name", collection_name)
        pulumi.set(__self__, "destination_path", destination_path)
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="collectionName")
    def collection_name(self) -> str:
        return pulumi.get(self, "collection_name")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> str:
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetDestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingDocArrayHnswSearchResult(dict):
    def __init__(__self__, *,
                 destination_path: str,
                 mode: str):
        pulumi.set(__self__, "destination_path", destination_path)
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> str:
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetDestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingPineconeResult(dict):
    def __init__(__self__, *,
                 index: str,
                 mode: str,
                 pinecone_environment: str,
                 pinecone_key: str):
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "pinecone_environment", pinecone_environment)
        pulumi.set(__self__, "pinecone_key", pinecone_key)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="pineconeEnvironment")
    def pinecone_environment(self) -> str:
        return pulumi.get(self, "pinecone_environment")

    @property
    @pulumi.getter(name="pineconeKey")
    def pinecone_key(self) -> str:
        return pulumi.get(self, "pinecone_key")


@pulumi.output_type
class GetDestinationLangchainConfigurationProcessingResult(dict):
    def __init__(__self__, *,
                 chunk_overlap: int,
                 chunk_size: int,
                 text_fields: Sequence[str]):
        pulumi.set(__self__, "chunk_overlap", chunk_overlap)
        pulumi.set(__self__, "chunk_size", chunk_size)
        pulumi.set(__self__, "text_fields", text_fields)

    @property
    @pulumi.getter(name="chunkOverlap")
    def chunk_overlap(self) -> int:
        return pulumi.get(self, "chunk_overlap")

    @property
    @pulumi.getter(name="chunkSize")
    def chunk_size(self) -> int:
        return pulumi.get(self, "chunk_size")

    @property
    @pulumi.getter(name="textFields")
    def text_fields(self) -> Sequence[str]:
        return pulumi.get(self, "text_fields")


@pulumi.output_type
class GetDestinationMSsqlConfigurationResult(dict):
    def __init__(__self__, *,
                 database: str,
                 destination_type: str,
                 host: str,
                 jdbc_url_params: str,
                 password: str,
                 port: int,
                 schema: str,
                 ssl_method: 'outputs.GetDestinationMSsqlConfigurationSslMethodResult',
                 tunnel_method: 'outputs.GetDestinationMSsqlConfigurationTunnelMethodResult',
                 username: str):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "ssl_method", ssl_method)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> str:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> 'outputs.GetDestinationMSsqlConfigurationSslMethodResult':
        return pulumi.get(self, "ssl_method")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> 'outputs.GetDestinationMSsqlConfigurationTunnelMethodResult':
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetDestinationMSsqlConfigurationSslMethodResult(dict):
    def __init__(__self__, *,
                 destination_mssql_ssl_method_encrypted_trust_server_certificate: 'outputs.GetDestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedTrustServerCertificateResult',
                 destination_mssql_ssl_method_encrypted_verify_certificate: 'outputs.GetDestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedVerifyCertificateResult',
                 destination_mssql_update_ssl_method_encrypted_trust_server_certificate: 'outputs.GetDestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedTrustServerCertificateResult',
                 destination_mssql_update_ssl_method_encrypted_verify_certificate: 'outputs.GetDestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedVerifyCertificateResult'):
        pulumi.set(__self__, "destination_mssql_ssl_method_encrypted_trust_server_certificate", destination_mssql_ssl_method_encrypted_trust_server_certificate)
        pulumi.set(__self__, "destination_mssql_ssl_method_encrypted_verify_certificate", destination_mssql_ssl_method_encrypted_verify_certificate)
        pulumi.set(__self__, "destination_mssql_update_ssl_method_encrypted_trust_server_certificate", destination_mssql_update_ssl_method_encrypted_trust_server_certificate)
        pulumi.set(__self__, "destination_mssql_update_ssl_method_encrypted_verify_certificate", destination_mssql_update_ssl_method_encrypted_verify_certificate)

    @property
    @pulumi.getter(name="destinationMssqlSslMethodEncryptedTrustServerCertificate")
    def destination_mssql_ssl_method_encrypted_trust_server_certificate(self) -> 'outputs.GetDestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedTrustServerCertificateResult':
        return pulumi.get(self, "destination_mssql_ssl_method_encrypted_trust_server_certificate")

    @property
    @pulumi.getter(name="destinationMssqlSslMethodEncryptedVerifyCertificate")
    def destination_mssql_ssl_method_encrypted_verify_certificate(self) -> 'outputs.GetDestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedVerifyCertificateResult':
        return pulumi.get(self, "destination_mssql_ssl_method_encrypted_verify_certificate")

    @property
    @pulumi.getter(name="destinationMssqlUpdateSslMethodEncryptedTrustServerCertificate")
    def destination_mssql_update_ssl_method_encrypted_trust_server_certificate(self) -> 'outputs.GetDestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedTrustServerCertificateResult':
        return pulumi.get(self, "destination_mssql_update_ssl_method_encrypted_trust_server_certificate")

    @property
    @pulumi.getter(name="destinationMssqlUpdateSslMethodEncryptedVerifyCertificate")
    def destination_mssql_update_ssl_method_encrypted_verify_certificate(self) -> 'outputs.GetDestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedVerifyCertificateResult':
        return pulumi.get(self, "destination_mssql_update_ssl_method_encrypted_verify_certificate")


@pulumi.output_type
class GetDestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedTrustServerCertificateResult(dict):
    def __init__(__self__, *,
                 ssl_method: str):
        pulumi.set(__self__, "ssl_method", ssl_method)

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> str:
        return pulumi.get(self, "ssl_method")


@pulumi.output_type
class GetDestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedVerifyCertificateResult(dict):
    def __init__(__self__, *,
                 host_name_in_certificate: str,
                 ssl_method: str):
        pulumi.set(__self__, "host_name_in_certificate", host_name_in_certificate)
        pulumi.set(__self__, "ssl_method", ssl_method)

    @property
    @pulumi.getter(name="hostNameInCertificate")
    def host_name_in_certificate(self) -> str:
        return pulumi.get(self, "host_name_in_certificate")

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> str:
        return pulumi.get(self, "ssl_method")


@pulumi.output_type
class GetDestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedTrustServerCertificateResult(dict):
    def __init__(__self__, *,
                 ssl_method: str):
        pulumi.set(__self__, "ssl_method", ssl_method)

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> str:
        return pulumi.get(self, "ssl_method")


@pulumi.output_type
class GetDestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedVerifyCertificateResult(dict):
    def __init__(__self__, *,
                 host_name_in_certificate: str,
                 ssl_method: str):
        pulumi.set(__self__, "host_name_in_certificate", host_name_in_certificate)
        pulumi.set(__self__, "ssl_method", ssl_method)

    @property
    @pulumi.getter(name="hostNameInCertificate")
    def host_name_in_certificate(self) -> str:
        return pulumi.get(self, "host_name_in_certificate")

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> str:
        return pulumi.get(self, "ssl_method")


@pulumi.output_type
class GetDestinationMSsqlConfigurationTunnelMethodResult(dict):
    def __init__(__self__, *,
                 destination_mssql_ssh_tunnel_method_no_tunnel: 'outputs.GetDestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodNoTunnelResult',
                 destination_mssql_ssh_tunnel_method_password_authentication: 'outputs.GetDestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodPasswordAuthenticationResult',
                 destination_mssql_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetDestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodSshKeyAuthenticationResult',
                 destination_mssql_update_ssh_tunnel_method_no_tunnel: 'outputs.GetDestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodNoTunnelResult',
                 destination_mssql_update_ssh_tunnel_method_password_authentication: 'outputs.GetDestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodPasswordAuthenticationResult',
                 destination_mssql_update_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetDestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodSshKeyAuthenticationResult'):
        pulumi.set(__self__, "destination_mssql_ssh_tunnel_method_no_tunnel", destination_mssql_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "destination_mssql_ssh_tunnel_method_password_authentication", destination_mssql_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "destination_mssql_ssh_tunnel_method_ssh_key_authentication", destination_mssql_ssh_tunnel_method_ssh_key_authentication)
        pulumi.set(__self__, "destination_mssql_update_ssh_tunnel_method_no_tunnel", destination_mssql_update_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "destination_mssql_update_ssh_tunnel_method_password_authentication", destination_mssql_update_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "destination_mssql_update_ssh_tunnel_method_ssh_key_authentication", destination_mssql_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="destinationMssqlSshTunnelMethodNoTunnel")
    def destination_mssql_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetDestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "destination_mssql_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationMssqlSshTunnelMethodPasswordAuthentication")
    def destination_mssql_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetDestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "destination_mssql_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationMssqlSshTunnelMethodSshKeyAuthentication")
    def destination_mssql_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetDestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "destination_mssql_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="destinationMssqlUpdateSshTunnelMethodNoTunnel")
    def destination_mssql_update_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetDestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "destination_mssql_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationMssqlUpdateSshTunnelMethodPasswordAuthentication")
    def destination_mssql_update_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetDestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "destination_mssql_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationMssqlUpdateSshTunnelMethodSshKeyAuthentication")
    def destination_mssql_update_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetDestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "destination_mssql_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class GetDestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetDestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetDestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetDestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetDestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetDestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetDestinationMongodbConfigurationResult(dict):
    def __init__(__self__, *,
                 auth_type: 'outputs.GetDestinationMongodbConfigurationAuthTypeResult',
                 database: str,
                 destination_type: str,
                 instance_type: 'outputs.GetDestinationMongodbConfigurationInstanceTypeResult',
                 tunnel_method: 'outputs.GetDestinationMongodbConfigurationTunnelMethodResult'):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> 'outputs.GetDestinationMongodbConfigurationAuthTypeResult':
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> 'outputs.GetDestinationMongodbConfigurationInstanceTypeResult':
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> 'outputs.GetDestinationMongodbConfigurationTunnelMethodResult':
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetDestinationMongodbConfigurationAuthTypeResult(dict):
    def __init__(__self__, *,
                 destination_mongodb_authorization_type_login_password: 'outputs.GetDestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeLoginPasswordResult',
                 destination_mongodb_authorization_type_none: 'outputs.GetDestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeNoneResult',
                 destination_mongodb_update_authorization_type_login_password: 'outputs.GetDestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeLoginPasswordResult',
                 destination_mongodb_update_authorization_type_none: 'outputs.GetDestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeNoneResult'):
        pulumi.set(__self__, "destination_mongodb_authorization_type_login_password", destination_mongodb_authorization_type_login_password)
        pulumi.set(__self__, "destination_mongodb_authorization_type_none", destination_mongodb_authorization_type_none)
        pulumi.set(__self__, "destination_mongodb_update_authorization_type_login_password", destination_mongodb_update_authorization_type_login_password)
        pulumi.set(__self__, "destination_mongodb_update_authorization_type_none", destination_mongodb_update_authorization_type_none)

    @property
    @pulumi.getter(name="destinationMongodbAuthorizationTypeLoginPassword")
    def destination_mongodb_authorization_type_login_password(self) -> 'outputs.GetDestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeLoginPasswordResult':
        return pulumi.get(self, "destination_mongodb_authorization_type_login_password")

    @property
    @pulumi.getter(name="destinationMongodbAuthorizationTypeNone")
    def destination_mongodb_authorization_type_none(self) -> 'outputs.GetDestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeNoneResult':
        return pulumi.get(self, "destination_mongodb_authorization_type_none")

    @property
    @pulumi.getter(name="destinationMongodbUpdateAuthorizationTypeLoginPassword")
    def destination_mongodb_update_authorization_type_login_password(self) -> 'outputs.GetDestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeLoginPasswordResult':
        return pulumi.get(self, "destination_mongodb_update_authorization_type_login_password")

    @property
    @pulumi.getter(name="destinationMongodbUpdateAuthorizationTypeNone")
    def destination_mongodb_update_authorization_type_none(self) -> 'outputs.GetDestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeNoneResult':
        return pulumi.get(self, "destination_mongodb_update_authorization_type_none")


@pulumi.output_type
class GetDestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeLoginPasswordResult(dict):
    def __init__(__self__, *,
                 authorization: str,
                 password: str,
                 username: str):
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def authorization(self) -> str:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetDestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeNoneResult(dict):
    def __init__(__self__, *,
                 authorization: str):
        pulumi.set(__self__, "authorization", authorization)

    @property
    @pulumi.getter
    def authorization(self) -> str:
        return pulumi.get(self, "authorization")


@pulumi.output_type
class GetDestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeLoginPasswordResult(dict):
    def __init__(__self__, *,
                 authorization: str,
                 password: str,
                 username: str):
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def authorization(self) -> str:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetDestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeNoneResult(dict):
    def __init__(__self__, *,
                 authorization: str):
        pulumi.set(__self__, "authorization", authorization)

    @property
    @pulumi.getter
    def authorization(self) -> str:
        return pulumi.get(self, "authorization")


@pulumi.output_type
class GetDestinationMongodbConfigurationInstanceTypeResult(dict):
    def __init__(__self__, *,
                 destination_mongodb_mongo_db_instance_type_mongo_db_atlas: 'outputs.GetDestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeMongoDbAtlasResult',
                 destination_mongodb_mongo_db_instance_type_replica_set: 'outputs.GetDestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeReplicaSetResult',
                 destination_mongodb_mongo_db_instance_type_standalone_mongo_db_instance: 'outputs.GetDestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceResult',
                 destination_mongodb_update_mongo_db_instance_type_mongo_db_atlas: 'outputs.GetDestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlasResult',
                 destination_mongodb_update_mongo_db_instance_type_replica_set: 'outputs.GetDestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeReplicaSetResult',
                 destination_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance: 'outputs.GetDestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceResult'):
        pulumi.set(__self__, "destination_mongodb_mongo_db_instance_type_mongo_db_atlas", destination_mongodb_mongo_db_instance_type_mongo_db_atlas)
        pulumi.set(__self__, "destination_mongodb_mongo_db_instance_type_replica_set", destination_mongodb_mongo_db_instance_type_replica_set)
        pulumi.set(__self__, "destination_mongodb_mongo_db_instance_type_standalone_mongo_db_instance", destination_mongodb_mongo_db_instance_type_standalone_mongo_db_instance)
        pulumi.set(__self__, "destination_mongodb_update_mongo_db_instance_type_mongo_db_atlas", destination_mongodb_update_mongo_db_instance_type_mongo_db_atlas)
        pulumi.set(__self__, "destination_mongodb_update_mongo_db_instance_type_replica_set", destination_mongodb_update_mongo_db_instance_type_replica_set)
        pulumi.set(__self__, "destination_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance", destination_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance)

    @property
    @pulumi.getter(name="destinationMongodbMongoDbInstanceTypeMongoDbAtlas")
    def destination_mongodb_mongo_db_instance_type_mongo_db_atlas(self) -> 'outputs.GetDestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeMongoDbAtlasResult':
        return pulumi.get(self, "destination_mongodb_mongo_db_instance_type_mongo_db_atlas")

    @property
    @pulumi.getter(name="destinationMongodbMongoDbInstanceTypeReplicaSet")
    def destination_mongodb_mongo_db_instance_type_replica_set(self) -> 'outputs.GetDestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeReplicaSetResult':
        return pulumi.get(self, "destination_mongodb_mongo_db_instance_type_replica_set")

    @property
    @pulumi.getter(name="destinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance")
    def destination_mongodb_mongo_db_instance_type_standalone_mongo_db_instance(self) -> 'outputs.GetDestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceResult':
        return pulumi.get(self, "destination_mongodb_mongo_db_instance_type_standalone_mongo_db_instance")

    @property
    @pulumi.getter(name="destinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlas")
    def destination_mongodb_update_mongo_db_instance_type_mongo_db_atlas(self) -> 'outputs.GetDestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlasResult':
        return pulumi.get(self, "destination_mongodb_update_mongo_db_instance_type_mongo_db_atlas")

    @property
    @pulumi.getter(name="destinationMongodbUpdateMongoDbInstanceTypeReplicaSet")
    def destination_mongodb_update_mongo_db_instance_type_replica_set(self) -> 'outputs.GetDestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeReplicaSetResult':
        return pulumi.get(self, "destination_mongodb_update_mongo_db_instance_type_replica_set")

    @property
    @pulumi.getter(name="destinationMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance")
    def destination_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance(self) -> 'outputs.GetDestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceResult':
        return pulumi.get(self, "destination_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance")


@pulumi.output_type
class GetDestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeMongoDbAtlasResult(dict):
    def __init__(__self__, *,
                 cluster_url: str,
                 instance: str):
        pulumi.set(__self__, "cluster_url", cluster_url)
        pulumi.set(__self__, "instance", instance)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> str:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter
    def instance(self) -> str:
        return pulumi.get(self, "instance")


@pulumi.output_type
class GetDestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeReplicaSetResult(dict):
    def __init__(__self__, *,
                 instance: str,
                 replica_set: str,
                 server_addresses: str):
        pulumi.set(__self__, "instance", instance)
        pulumi.set(__self__, "replica_set", replica_set)
        pulumi.set(__self__, "server_addresses", server_addresses)

    @property
    @pulumi.getter
    def instance(self) -> str:
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter(name="replicaSet")
    def replica_set(self) -> str:
        return pulumi.get(self, "replica_set")

    @property
    @pulumi.getter(name="serverAddresses")
    def server_addresses(self) -> str:
        return pulumi.get(self, "server_addresses")


@pulumi.output_type
class GetDestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceResult(dict):
    def __init__(__self__, *,
                 host: str,
                 instance: str,
                 port: int):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "instance", instance)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def instance(self) -> str:
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetDestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlasResult(dict):
    def __init__(__self__, *,
                 cluster_url: str,
                 instance: str):
        pulumi.set(__self__, "cluster_url", cluster_url)
        pulumi.set(__self__, "instance", instance)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> str:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter
    def instance(self) -> str:
        return pulumi.get(self, "instance")


@pulumi.output_type
class GetDestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeReplicaSetResult(dict):
    def __init__(__self__, *,
                 instance: str,
                 replica_set: str,
                 server_addresses: str):
        pulumi.set(__self__, "instance", instance)
        pulumi.set(__self__, "replica_set", replica_set)
        pulumi.set(__self__, "server_addresses", server_addresses)

    @property
    @pulumi.getter
    def instance(self) -> str:
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter(name="replicaSet")
    def replica_set(self) -> str:
        return pulumi.get(self, "replica_set")

    @property
    @pulumi.getter(name="serverAddresses")
    def server_addresses(self) -> str:
        return pulumi.get(self, "server_addresses")


@pulumi.output_type
class GetDestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceResult(dict):
    def __init__(__self__, *,
                 host: str,
                 instance: str,
                 port: int):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "instance", instance)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def instance(self) -> str:
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetDestinationMongodbConfigurationTunnelMethodResult(dict):
    def __init__(__self__, *,
                 destination_mongodb_ssh_tunnel_method_no_tunnel: 'outputs.GetDestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodNoTunnelResult',
                 destination_mongodb_ssh_tunnel_method_password_authentication: 'outputs.GetDestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodPasswordAuthenticationResult',
                 destination_mongodb_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetDestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodSshKeyAuthenticationResult',
                 destination_mongodb_update_ssh_tunnel_method_no_tunnel: 'outputs.GetDestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodNoTunnelResult',
                 destination_mongodb_update_ssh_tunnel_method_password_authentication: 'outputs.GetDestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodPasswordAuthenticationResult',
                 destination_mongodb_update_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetDestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodSshKeyAuthenticationResult'):
        pulumi.set(__self__, "destination_mongodb_ssh_tunnel_method_no_tunnel", destination_mongodb_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "destination_mongodb_ssh_tunnel_method_password_authentication", destination_mongodb_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "destination_mongodb_ssh_tunnel_method_ssh_key_authentication", destination_mongodb_ssh_tunnel_method_ssh_key_authentication)
        pulumi.set(__self__, "destination_mongodb_update_ssh_tunnel_method_no_tunnel", destination_mongodb_update_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "destination_mongodb_update_ssh_tunnel_method_password_authentication", destination_mongodb_update_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "destination_mongodb_update_ssh_tunnel_method_ssh_key_authentication", destination_mongodb_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="destinationMongodbSshTunnelMethodNoTunnel")
    def destination_mongodb_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetDestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "destination_mongodb_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationMongodbSshTunnelMethodPasswordAuthentication")
    def destination_mongodb_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetDestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "destination_mongodb_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationMongodbSshTunnelMethodSshKeyAuthentication")
    def destination_mongodb_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetDestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "destination_mongodb_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="destinationMongodbUpdateSshTunnelMethodNoTunnel")
    def destination_mongodb_update_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetDestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "destination_mongodb_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationMongodbUpdateSshTunnelMethodPasswordAuthentication")
    def destination_mongodb_update_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetDestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "destination_mongodb_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationMongodbUpdateSshTunnelMethodSshKeyAuthentication")
    def destination_mongodb_update_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetDestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "destination_mongodb_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class GetDestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetDestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetDestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetDestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetDestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetDestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetDestinationMysqlConfigurationResult(dict):
    def __init__(__self__, *,
                 database: str,
                 destination_type: str,
                 host: str,
                 jdbc_url_params: str,
                 password: str,
                 port: int,
                 tunnel_method: 'outputs.GetDestinationMysqlConfigurationTunnelMethodResult',
                 username: str):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> str:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> 'outputs.GetDestinationMysqlConfigurationTunnelMethodResult':
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetDestinationMysqlConfigurationTunnelMethodResult(dict):
    def __init__(__self__, *,
                 destination_mysql_ssh_tunnel_method_no_tunnel: 'outputs.GetDestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodNoTunnelResult',
                 destination_mysql_ssh_tunnel_method_password_authentication: 'outputs.GetDestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodPasswordAuthenticationResult',
                 destination_mysql_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetDestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodSshKeyAuthenticationResult',
                 destination_mysql_update_ssh_tunnel_method_no_tunnel: 'outputs.GetDestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodNoTunnelResult',
                 destination_mysql_update_ssh_tunnel_method_password_authentication: 'outputs.GetDestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodPasswordAuthenticationResult',
                 destination_mysql_update_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetDestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodSshKeyAuthenticationResult'):
        pulumi.set(__self__, "destination_mysql_ssh_tunnel_method_no_tunnel", destination_mysql_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "destination_mysql_ssh_tunnel_method_password_authentication", destination_mysql_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "destination_mysql_ssh_tunnel_method_ssh_key_authentication", destination_mysql_ssh_tunnel_method_ssh_key_authentication)
        pulumi.set(__self__, "destination_mysql_update_ssh_tunnel_method_no_tunnel", destination_mysql_update_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "destination_mysql_update_ssh_tunnel_method_password_authentication", destination_mysql_update_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "destination_mysql_update_ssh_tunnel_method_ssh_key_authentication", destination_mysql_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="destinationMysqlSshTunnelMethodNoTunnel")
    def destination_mysql_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetDestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "destination_mysql_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationMysqlSshTunnelMethodPasswordAuthentication")
    def destination_mysql_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetDestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "destination_mysql_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationMysqlSshTunnelMethodSshKeyAuthentication")
    def destination_mysql_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetDestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "destination_mysql_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="destinationMysqlUpdateSshTunnelMethodNoTunnel")
    def destination_mysql_update_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetDestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "destination_mysql_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationMysqlUpdateSshTunnelMethodPasswordAuthentication")
    def destination_mysql_update_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetDestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "destination_mysql_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationMysqlUpdateSshTunnelMethodSshKeyAuthentication")
    def destination_mysql_update_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetDestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "destination_mysql_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class GetDestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetDestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetDestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetDestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetDestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetDestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetDestinationOracleConfigurationResult(dict):
    def __init__(__self__, *,
                 destination_type: str,
                 host: str,
                 jdbc_url_params: str,
                 password: str,
                 port: int,
                 schema: str,
                 sid: str,
                 tunnel_method: 'outputs.GetDestinationOracleConfigurationTunnelMethodResult',
                 username: str):
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "sid", sid)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> str:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter
    def sid(self) -> str:
        return pulumi.get(self, "sid")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> 'outputs.GetDestinationOracleConfigurationTunnelMethodResult':
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetDestinationOracleConfigurationTunnelMethodResult(dict):
    def __init__(__self__, *,
                 destination_oracle_ssh_tunnel_method_no_tunnel: 'outputs.GetDestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodNoTunnelResult',
                 destination_oracle_ssh_tunnel_method_password_authentication: 'outputs.GetDestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodPasswordAuthenticationResult',
                 destination_oracle_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetDestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodSshKeyAuthenticationResult',
                 destination_oracle_update_ssh_tunnel_method_no_tunnel: 'outputs.GetDestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodNoTunnelResult',
                 destination_oracle_update_ssh_tunnel_method_password_authentication: 'outputs.GetDestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodPasswordAuthenticationResult',
                 destination_oracle_update_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetDestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodSshKeyAuthenticationResult'):
        pulumi.set(__self__, "destination_oracle_ssh_tunnel_method_no_tunnel", destination_oracle_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "destination_oracle_ssh_tunnel_method_password_authentication", destination_oracle_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "destination_oracle_ssh_tunnel_method_ssh_key_authentication", destination_oracle_ssh_tunnel_method_ssh_key_authentication)
        pulumi.set(__self__, "destination_oracle_update_ssh_tunnel_method_no_tunnel", destination_oracle_update_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "destination_oracle_update_ssh_tunnel_method_password_authentication", destination_oracle_update_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "destination_oracle_update_ssh_tunnel_method_ssh_key_authentication", destination_oracle_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="destinationOracleSshTunnelMethodNoTunnel")
    def destination_oracle_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetDestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "destination_oracle_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationOracleSshTunnelMethodPasswordAuthentication")
    def destination_oracle_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetDestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "destination_oracle_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationOracleSshTunnelMethodSshKeyAuthentication")
    def destination_oracle_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetDestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "destination_oracle_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="destinationOracleUpdateSshTunnelMethodNoTunnel")
    def destination_oracle_update_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetDestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "destination_oracle_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationOracleUpdateSshTunnelMethodPasswordAuthentication")
    def destination_oracle_update_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetDestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "destination_oracle_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationOracleUpdateSshTunnelMethodSshKeyAuthentication")
    def destination_oracle_update_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetDestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "destination_oracle_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class GetDestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetDestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetDestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetDestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetDestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetDestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetDestinationPostgresConfigurationResult(dict):
    def __init__(__self__, *,
                 database: str,
                 destination_type: str,
                 host: str,
                 jdbc_url_params: str,
                 password: str,
                 port: int,
                 schema: str,
                 ssl_mode: 'outputs.GetDestinationPostgresConfigurationSslModeResult',
                 tunnel_method: 'outputs.GetDestinationPostgresConfigurationTunnelMethodResult',
                 username: str):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "ssl_mode", ssl_mode)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> str:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> 'outputs.GetDestinationPostgresConfigurationSslModeResult':
        return pulumi.get(self, "ssl_mode")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> 'outputs.GetDestinationPostgresConfigurationTunnelMethodResult':
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetDestinationPostgresConfigurationSslModeResult(dict):
    def __init__(__self__, *,
                 destination_postgres_ssl_modes_allow: 'outputs.GetDestinationPostgresConfigurationSslModeDestinationPostgresSslModesAllowResult',
                 destination_postgres_ssl_modes_disable: 'outputs.GetDestinationPostgresConfigurationSslModeDestinationPostgresSslModesDisableResult',
                 destination_postgres_ssl_modes_prefer: 'outputs.GetDestinationPostgresConfigurationSslModeDestinationPostgresSslModesPreferResult',
                 destination_postgres_ssl_modes_require: 'outputs.GetDestinationPostgresConfigurationSslModeDestinationPostgresSslModesRequireResult',
                 destination_postgres_ssl_modes_verify_ca: 'outputs.GetDestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyCaResult',
                 destination_postgres_ssl_modes_verify_full: 'outputs.GetDestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyFullResult',
                 destination_postgres_update_ssl_modes_allow: 'outputs.GetDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesAllowResult',
                 destination_postgres_update_ssl_modes_disable: 'outputs.GetDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesDisableResult',
                 destination_postgres_update_ssl_modes_prefer: 'outputs.GetDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesPreferResult',
                 destination_postgres_update_ssl_modes_require: 'outputs.GetDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesRequireResult',
                 destination_postgres_update_ssl_modes_verify_ca: 'outputs.GetDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyCaResult',
                 destination_postgres_update_ssl_modes_verify_full: 'outputs.GetDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyFullResult'):
        pulumi.set(__self__, "destination_postgres_ssl_modes_allow", destination_postgres_ssl_modes_allow)
        pulumi.set(__self__, "destination_postgres_ssl_modes_disable", destination_postgres_ssl_modes_disable)
        pulumi.set(__self__, "destination_postgres_ssl_modes_prefer", destination_postgres_ssl_modes_prefer)
        pulumi.set(__self__, "destination_postgres_ssl_modes_require", destination_postgres_ssl_modes_require)
        pulumi.set(__self__, "destination_postgres_ssl_modes_verify_ca", destination_postgres_ssl_modes_verify_ca)
        pulumi.set(__self__, "destination_postgres_ssl_modes_verify_full", destination_postgres_ssl_modes_verify_full)
        pulumi.set(__self__, "destination_postgres_update_ssl_modes_allow", destination_postgres_update_ssl_modes_allow)
        pulumi.set(__self__, "destination_postgres_update_ssl_modes_disable", destination_postgres_update_ssl_modes_disable)
        pulumi.set(__self__, "destination_postgres_update_ssl_modes_prefer", destination_postgres_update_ssl_modes_prefer)
        pulumi.set(__self__, "destination_postgres_update_ssl_modes_require", destination_postgres_update_ssl_modes_require)
        pulumi.set(__self__, "destination_postgres_update_ssl_modes_verify_ca", destination_postgres_update_ssl_modes_verify_ca)
        pulumi.set(__self__, "destination_postgres_update_ssl_modes_verify_full", destination_postgres_update_ssl_modes_verify_full)

    @property
    @pulumi.getter(name="destinationPostgresSslModesAllow")
    def destination_postgres_ssl_modes_allow(self) -> 'outputs.GetDestinationPostgresConfigurationSslModeDestinationPostgresSslModesAllowResult':
        return pulumi.get(self, "destination_postgres_ssl_modes_allow")

    @property
    @pulumi.getter(name="destinationPostgresSslModesDisable")
    def destination_postgres_ssl_modes_disable(self) -> 'outputs.GetDestinationPostgresConfigurationSslModeDestinationPostgresSslModesDisableResult':
        return pulumi.get(self, "destination_postgres_ssl_modes_disable")

    @property
    @pulumi.getter(name="destinationPostgresSslModesPrefer")
    def destination_postgres_ssl_modes_prefer(self) -> 'outputs.GetDestinationPostgresConfigurationSslModeDestinationPostgresSslModesPreferResult':
        return pulumi.get(self, "destination_postgres_ssl_modes_prefer")

    @property
    @pulumi.getter(name="destinationPostgresSslModesRequire")
    def destination_postgres_ssl_modes_require(self) -> 'outputs.GetDestinationPostgresConfigurationSslModeDestinationPostgresSslModesRequireResult':
        return pulumi.get(self, "destination_postgres_ssl_modes_require")

    @property
    @pulumi.getter(name="destinationPostgresSslModesVerifyCa")
    def destination_postgres_ssl_modes_verify_ca(self) -> 'outputs.GetDestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyCaResult':
        return pulumi.get(self, "destination_postgres_ssl_modes_verify_ca")

    @property
    @pulumi.getter(name="destinationPostgresSslModesVerifyFull")
    def destination_postgres_ssl_modes_verify_full(self) -> 'outputs.GetDestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyFullResult':
        return pulumi.get(self, "destination_postgres_ssl_modes_verify_full")

    @property
    @pulumi.getter(name="destinationPostgresUpdateSslModesAllow")
    def destination_postgres_update_ssl_modes_allow(self) -> 'outputs.GetDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesAllowResult':
        return pulumi.get(self, "destination_postgres_update_ssl_modes_allow")

    @property
    @pulumi.getter(name="destinationPostgresUpdateSslModesDisable")
    def destination_postgres_update_ssl_modes_disable(self) -> 'outputs.GetDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesDisableResult':
        return pulumi.get(self, "destination_postgres_update_ssl_modes_disable")

    @property
    @pulumi.getter(name="destinationPostgresUpdateSslModesPrefer")
    def destination_postgres_update_ssl_modes_prefer(self) -> 'outputs.GetDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesPreferResult':
        return pulumi.get(self, "destination_postgres_update_ssl_modes_prefer")

    @property
    @pulumi.getter(name="destinationPostgresUpdateSslModesRequire")
    def destination_postgres_update_ssl_modes_require(self) -> 'outputs.GetDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesRequireResult':
        return pulumi.get(self, "destination_postgres_update_ssl_modes_require")

    @property
    @pulumi.getter(name="destinationPostgresUpdateSslModesVerifyCa")
    def destination_postgres_update_ssl_modes_verify_ca(self) -> 'outputs.GetDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyCaResult':
        return pulumi.get(self, "destination_postgres_update_ssl_modes_verify_ca")

    @property
    @pulumi.getter(name="destinationPostgresUpdateSslModesVerifyFull")
    def destination_postgres_update_ssl_modes_verify_full(self) -> 'outputs.GetDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyFullResult':
        return pulumi.get(self, "destination_postgres_update_ssl_modes_verify_full")


@pulumi.output_type
class GetDestinationPostgresConfigurationSslModeDestinationPostgresSslModesAllowResult(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetDestinationPostgresConfigurationSslModeDestinationPostgresSslModesDisableResult(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetDestinationPostgresConfigurationSslModeDestinationPostgresSslModesPreferResult(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetDestinationPostgresConfigurationSslModeDestinationPostgresSslModesRequireResult(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetDestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyCaResult(dict):
    def __init__(__self__, *,
                 ca_certificate: str,
                 client_key_password: str,
                 mode: str):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "client_key_password", client_key_password)
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> str:
        return pulumi.get(self, "client_key_password")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetDestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyFullResult(dict):
    def __init__(__self__, *,
                 ca_certificate: str,
                 client_certificate: str,
                 client_key: str,
                 client_key_password: str,
                 mode: str):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "client_certificate", client_certificate)
        pulumi.set(__self__, "client_key", client_key)
        pulumi.set(__self__, "client_key_password", client_key_password)
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> str:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> str:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> str:
        return pulumi.get(self, "client_key_password")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesAllowResult(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesDisableResult(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesPreferResult(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesRequireResult(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyCaResult(dict):
    def __init__(__self__, *,
                 ca_certificate: str,
                 client_key_password: str,
                 mode: str):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "client_key_password", client_key_password)
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> str:
        return pulumi.get(self, "client_key_password")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetDestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyFullResult(dict):
    def __init__(__self__, *,
                 ca_certificate: str,
                 client_certificate: str,
                 client_key: str,
                 client_key_password: str,
                 mode: str):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "client_certificate", client_certificate)
        pulumi.set(__self__, "client_key", client_key)
        pulumi.set(__self__, "client_key_password", client_key_password)
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> str:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> str:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> str:
        return pulumi.get(self, "client_key_password")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetDestinationPostgresConfigurationTunnelMethodResult(dict):
    def __init__(__self__, *,
                 destination_postgres_ssh_tunnel_method_no_tunnel: 'outputs.GetDestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodNoTunnelResult',
                 destination_postgres_ssh_tunnel_method_password_authentication: 'outputs.GetDestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodPasswordAuthenticationResult',
                 destination_postgres_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetDestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodSshKeyAuthenticationResult',
                 destination_postgres_update_ssh_tunnel_method_no_tunnel: 'outputs.GetDestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodNoTunnelResult',
                 destination_postgres_update_ssh_tunnel_method_password_authentication: 'outputs.GetDestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodPasswordAuthenticationResult',
                 destination_postgres_update_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetDestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodSshKeyAuthenticationResult'):
        pulumi.set(__self__, "destination_postgres_ssh_tunnel_method_no_tunnel", destination_postgres_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "destination_postgres_ssh_tunnel_method_password_authentication", destination_postgres_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "destination_postgres_ssh_tunnel_method_ssh_key_authentication", destination_postgres_ssh_tunnel_method_ssh_key_authentication)
        pulumi.set(__self__, "destination_postgres_update_ssh_tunnel_method_no_tunnel", destination_postgres_update_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "destination_postgres_update_ssh_tunnel_method_password_authentication", destination_postgres_update_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "destination_postgres_update_ssh_tunnel_method_ssh_key_authentication", destination_postgres_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="destinationPostgresSshTunnelMethodNoTunnel")
    def destination_postgres_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetDestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "destination_postgres_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationPostgresSshTunnelMethodPasswordAuthentication")
    def destination_postgres_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetDestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "destination_postgres_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationPostgresSshTunnelMethodSshKeyAuthentication")
    def destination_postgres_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetDestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "destination_postgres_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="destinationPostgresUpdateSshTunnelMethodNoTunnel")
    def destination_postgres_update_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetDestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "destination_postgres_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationPostgresUpdateSshTunnelMethodPasswordAuthentication")
    def destination_postgres_update_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetDestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "destination_postgres_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationPostgresUpdateSshTunnelMethodSshKeyAuthentication")
    def destination_postgres_update_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetDestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "destination_postgres_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class GetDestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetDestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetDestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetDestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetDestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetDestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetDestinationPubsubConfigurationResult(dict):
    def __init__(__self__, *,
                 batching_delay_threshold: int,
                 batching_element_count_threshold: int,
                 batching_enabled: bool,
                 batching_request_bytes_threshold: int,
                 credentials_json: str,
                 destination_type: str,
                 ordering_enabled: bool,
                 project_id: str,
                 topic_id: str):
        pulumi.set(__self__, "batching_delay_threshold", batching_delay_threshold)
        pulumi.set(__self__, "batching_element_count_threshold", batching_element_count_threshold)
        pulumi.set(__self__, "batching_enabled", batching_enabled)
        pulumi.set(__self__, "batching_request_bytes_threshold", batching_request_bytes_threshold)
        pulumi.set(__self__, "credentials_json", credentials_json)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "ordering_enabled", ordering_enabled)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter(name="batchingDelayThreshold")
    def batching_delay_threshold(self) -> int:
        return pulumi.get(self, "batching_delay_threshold")

    @property
    @pulumi.getter(name="batchingElementCountThreshold")
    def batching_element_count_threshold(self) -> int:
        return pulumi.get(self, "batching_element_count_threshold")

    @property
    @pulumi.getter(name="batchingEnabled")
    def batching_enabled(self) -> bool:
        return pulumi.get(self, "batching_enabled")

    @property
    @pulumi.getter(name="batchingRequestBytesThreshold")
    def batching_request_bytes_threshold(self) -> int:
        return pulumi.get(self, "batching_request_bytes_threshold")

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> str:
        return pulumi.get(self, "credentials_json")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="orderingEnabled")
    def ordering_enabled(self) -> bool:
        return pulumi.get(self, "ordering_enabled")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> str:
        return pulumi.get(self, "topic_id")


@pulumi.output_type
class GetDestinationRedisConfigurationResult(dict):
    def __init__(__self__, *,
                 cache_type: str,
                 destination_type: str,
                 host: str,
                 password: str,
                 port: int,
                 ssl: bool,
                 ssl_mode: 'outputs.GetDestinationRedisConfigurationSslModeResult',
                 tunnel_method: 'outputs.GetDestinationRedisConfigurationTunnelMethodResult',
                 username: str):
        pulumi.set(__self__, "cache_type", cache_type)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "ssl_mode", ssl_mode)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="cacheType")
    def cache_type(self) -> str:
        return pulumi.get(self, "cache_type")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def ssl(self) -> bool:
        return pulumi.get(self, "ssl")

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> 'outputs.GetDestinationRedisConfigurationSslModeResult':
        return pulumi.get(self, "ssl_mode")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> 'outputs.GetDestinationRedisConfigurationTunnelMethodResult':
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetDestinationRedisConfigurationSslModeResult(dict):
    def __init__(__self__, *,
                 destination_redis_ssl_modes_disable: 'outputs.GetDestinationRedisConfigurationSslModeDestinationRedisSslModesDisableResult',
                 destination_redis_ssl_modes_verify_full: 'outputs.GetDestinationRedisConfigurationSslModeDestinationRedisSslModesVerifyFullResult',
                 destination_redis_update_ssl_modes_disable: 'outputs.GetDestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesDisableResult',
                 destination_redis_update_ssl_modes_verify_full: 'outputs.GetDestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesVerifyFullResult'):
        pulumi.set(__self__, "destination_redis_ssl_modes_disable", destination_redis_ssl_modes_disable)
        pulumi.set(__self__, "destination_redis_ssl_modes_verify_full", destination_redis_ssl_modes_verify_full)
        pulumi.set(__self__, "destination_redis_update_ssl_modes_disable", destination_redis_update_ssl_modes_disable)
        pulumi.set(__self__, "destination_redis_update_ssl_modes_verify_full", destination_redis_update_ssl_modes_verify_full)

    @property
    @pulumi.getter(name="destinationRedisSslModesDisable")
    def destination_redis_ssl_modes_disable(self) -> 'outputs.GetDestinationRedisConfigurationSslModeDestinationRedisSslModesDisableResult':
        return pulumi.get(self, "destination_redis_ssl_modes_disable")

    @property
    @pulumi.getter(name="destinationRedisSslModesVerifyFull")
    def destination_redis_ssl_modes_verify_full(self) -> 'outputs.GetDestinationRedisConfigurationSslModeDestinationRedisSslModesVerifyFullResult':
        return pulumi.get(self, "destination_redis_ssl_modes_verify_full")

    @property
    @pulumi.getter(name="destinationRedisUpdateSslModesDisable")
    def destination_redis_update_ssl_modes_disable(self) -> 'outputs.GetDestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesDisableResult':
        return pulumi.get(self, "destination_redis_update_ssl_modes_disable")

    @property
    @pulumi.getter(name="destinationRedisUpdateSslModesVerifyFull")
    def destination_redis_update_ssl_modes_verify_full(self) -> 'outputs.GetDestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesVerifyFullResult':
        return pulumi.get(self, "destination_redis_update_ssl_modes_verify_full")


@pulumi.output_type
class GetDestinationRedisConfigurationSslModeDestinationRedisSslModesDisableResult(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetDestinationRedisConfigurationSslModeDestinationRedisSslModesVerifyFullResult(dict):
    def __init__(__self__, *,
                 ca_certificate: str,
                 client_certificate: str,
                 client_key: str,
                 client_key_password: str,
                 mode: str):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "client_certificate", client_certificate)
        pulumi.set(__self__, "client_key", client_key)
        pulumi.set(__self__, "client_key_password", client_key_password)
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> str:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> str:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> str:
        return pulumi.get(self, "client_key_password")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetDestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesDisableResult(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetDestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesVerifyFullResult(dict):
    def __init__(__self__, *,
                 ca_certificate: str,
                 client_certificate: str,
                 client_key: str,
                 client_key_password: str,
                 mode: str):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "client_certificate", client_certificate)
        pulumi.set(__self__, "client_key", client_key)
        pulumi.set(__self__, "client_key_password", client_key_password)
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> str:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> str:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> str:
        return pulumi.get(self, "client_key_password")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetDestinationRedisConfigurationTunnelMethodResult(dict):
    def __init__(__self__, *,
                 destination_redis_ssh_tunnel_method_no_tunnel: 'outputs.GetDestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodNoTunnelResult',
                 destination_redis_ssh_tunnel_method_password_authentication: 'outputs.GetDestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodPasswordAuthenticationResult',
                 destination_redis_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetDestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodSshKeyAuthenticationResult',
                 destination_redis_update_ssh_tunnel_method_no_tunnel: 'outputs.GetDestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodNoTunnelResult',
                 destination_redis_update_ssh_tunnel_method_password_authentication: 'outputs.GetDestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodPasswordAuthenticationResult',
                 destination_redis_update_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetDestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodSshKeyAuthenticationResult'):
        pulumi.set(__self__, "destination_redis_ssh_tunnel_method_no_tunnel", destination_redis_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "destination_redis_ssh_tunnel_method_password_authentication", destination_redis_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "destination_redis_ssh_tunnel_method_ssh_key_authentication", destination_redis_ssh_tunnel_method_ssh_key_authentication)
        pulumi.set(__self__, "destination_redis_update_ssh_tunnel_method_no_tunnel", destination_redis_update_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "destination_redis_update_ssh_tunnel_method_password_authentication", destination_redis_update_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "destination_redis_update_ssh_tunnel_method_ssh_key_authentication", destination_redis_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="destinationRedisSshTunnelMethodNoTunnel")
    def destination_redis_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetDestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "destination_redis_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationRedisSshTunnelMethodPasswordAuthentication")
    def destination_redis_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetDestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "destination_redis_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationRedisSshTunnelMethodSshKeyAuthentication")
    def destination_redis_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetDestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "destination_redis_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="destinationRedisUpdateSshTunnelMethodNoTunnel")
    def destination_redis_update_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetDestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "destination_redis_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationRedisUpdateSshTunnelMethodPasswordAuthentication")
    def destination_redis_update_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetDestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "destination_redis_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationRedisUpdateSshTunnelMethodSshKeyAuthentication")
    def destination_redis_update_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetDestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "destination_redis_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class GetDestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetDestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetDestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetDestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetDestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetDestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetDestinationRedshiftConfigurationResult(dict):
    def __init__(__self__, *,
                 database: str,
                 destination_type: str,
                 host: str,
                 jdbc_url_params: str,
                 password: str,
                 port: int,
                 schema: str,
                 tunnel_method: 'outputs.GetDestinationRedshiftConfigurationTunnelMethodResult',
                 uploading_method: 'outputs.GetDestinationRedshiftConfigurationUploadingMethodResult',
                 username: str):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "uploading_method", uploading_method)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> str:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> 'outputs.GetDestinationRedshiftConfigurationTunnelMethodResult':
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="uploadingMethod")
    def uploading_method(self) -> 'outputs.GetDestinationRedshiftConfigurationUploadingMethodResult':
        return pulumi.get(self, "uploading_method")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetDestinationRedshiftConfigurationTunnelMethodResult(dict):
    def __init__(__self__, *,
                 destination_redshift_ssh_tunnel_method_no_tunnel: 'outputs.GetDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodNoTunnelResult',
                 destination_redshift_ssh_tunnel_method_password_authentication: 'outputs.GetDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodPasswordAuthenticationResult',
                 destination_redshift_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodSshKeyAuthenticationResult',
                 destination_redshift_update_ssh_tunnel_method_no_tunnel: 'outputs.GetDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodNoTunnelResult',
                 destination_redshift_update_ssh_tunnel_method_password_authentication: 'outputs.GetDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodPasswordAuthenticationResult',
                 destination_redshift_update_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodSshKeyAuthenticationResult'):
        pulumi.set(__self__, "destination_redshift_ssh_tunnel_method_no_tunnel", destination_redshift_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "destination_redshift_ssh_tunnel_method_password_authentication", destination_redshift_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "destination_redshift_ssh_tunnel_method_ssh_key_authentication", destination_redshift_ssh_tunnel_method_ssh_key_authentication)
        pulumi.set(__self__, "destination_redshift_update_ssh_tunnel_method_no_tunnel", destination_redshift_update_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "destination_redshift_update_ssh_tunnel_method_password_authentication", destination_redshift_update_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "destination_redshift_update_ssh_tunnel_method_ssh_key_authentication", destination_redshift_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="destinationRedshiftSshTunnelMethodNoTunnel")
    def destination_redshift_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "destination_redshift_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationRedshiftSshTunnelMethodPasswordAuthentication")
    def destination_redshift_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "destination_redshift_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationRedshiftSshTunnelMethodSshKeyAuthentication")
    def destination_redshift_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "destination_redshift_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="destinationRedshiftUpdateSshTunnelMethodNoTunnel")
    def destination_redshift_update_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "destination_redshift_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationRedshiftUpdateSshTunnelMethodPasswordAuthentication")
    def destination_redshift_update_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "destination_redshift_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationRedshiftUpdateSshTunnelMethodSshKeyAuthentication")
    def destination_redshift_update_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "destination_redshift_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class GetDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetDestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetDestinationRedshiftConfigurationUploadingMethodResult(dict):
    def __init__(__self__, *,
                 destination_redshift_update_uploading_method_s3_staging: 'outputs.GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingResult',
                 destination_redshift_update_uploading_method_standard: 'outputs.GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodStandardResult',
                 destination_redshift_uploading_method_s3_staging: 'outputs.GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingResult',
                 destination_redshift_uploading_method_standard: 'outputs.GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodStandardResult'):
        pulumi.set(__self__, "destination_redshift_update_uploading_method_s3_staging", destination_redshift_update_uploading_method_s3_staging)
        pulumi.set(__self__, "destination_redshift_update_uploading_method_standard", destination_redshift_update_uploading_method_standard)
        pulumi.set(__self__, "destination_redshift_uploading_method_s3_staging", destination_redshift_uploading_method_s3_staging)
        pulumi.set(__self__, "destination_redshift_uploading_method_standard", destination_redshift_uploading_method_standard)

    @property
    @pulumi.getter(name="destinationRedshiftUpdateUploadingMethodS3Staging")
    def destination_redshift_update_uploading_method_s3_staging(self) -> 'outputs.GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingResult':
        return pulumi.get(self, "destination_redshift_update_uploading_method_s3_staging")

    @property
    @pulumi.getter(name="destinationRedshiftUpdateUploadingMethodStandard")
    def destination_redshift_update_uploading_method_standard(self) -> 'outputs.GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodStandardResult':
        return pulumi.get(self, "destination_redshift_update_uploading_method_standard")

    @property
    @pulumi.getter(name="destinationRedshiftUploadingMethodS3Staging")
    def destination_redshift_uploading_method_s3_staging(self) -> 'outputs.GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingResult':
        return pulumi.get(self, "destination_redshift_uploading_method_s3_staging")

    @property
    @pulumi.getter(name="destinationRedshiftUploadingMethodStandard")
    def destination_redshift_uploading_method_standard(self) -> 'outputs.GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodStandardResult':
        return pulumi.get(self, "destination_redshift_uploading_method_standard")


@pulumi.output_type
class GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingResult(dict):
    def __init__(__self__, *,
                 access_key_id: str,
                 encryption: 'outputs.GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionResult',
                 file_buffer_count: int,
                 file_name_pattern: str,
                 method: str,
                 purge_staging_data: bool,
                 s3_bucket_name: str,
                 s3_bucket_path: str,
                 s3_bucket_region: str,
                 secret_access_key: str):
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "encryption", encryption)
        pulumi.set(__self__, "file_buffer_count", file_buffer_count)
        pulumi.set(__self__, "file_name_pattern", file_name_pattern)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "purge_staging_data", purge_staging_data)
        pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)
        pulumi.set(__self__, "s3_bucket_path", s3_bucket_path)
        pulumi.set(__self__, "s3_bucket_region", s3_bucket_region)
        pulumi.set(__self__, "secret_access_key", secret_access_key)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> str:
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter
    def encryption(self) -> 'outputs.GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionResult':
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter(name="fileBufferCount")
    def file_buffer_count(self) -> int:
        return pulumi.get(self, "file_buffer_count")

    @property
    @pulumi.getter(name="fileNamePattern")
    def file_name_pattern(self) -> str:
        return pulumi.get(self, "file_name_pattern")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="purgeStagingData")
    def purge_staging_data(self) -> bool:
        return pulumi.get(self, "purge_staging_data")

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> str:
        return pulumi.get(self, "s3_bucket_name")

    @property
    @pulumi.getter(name="s3BucketPath")
    def s3_bucket_path(self) -> str:
        return pulumi.get(self, "s3_bucket_path")

    @property
    @pulumi.getter(name="s3BucketRegion")
    def s3_bucket_region(self) -> str:
        return pulumi.get(self, "s3_bucket_region")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> str:
        return pulumi.get(self, "secret_access_key")


@pulumi.output_type
class GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionResult(dict):
    def __init__(__self__, *,
                 destination_redshift_update_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption: 'outputs.GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryptionResult',
                 destination_redshift_update_uploading_method_s3_staging_encryption_no_encryption: 'outputs.GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryptionResult'):
        pulumi.set(__self__, "destination_redshift_update_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption", destination_redshift_update_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption)
        pulumi.set(__self__, "destination_redshift_update_uploading_method_s3_staging_encryption_no_encryption", destination_redshift_update_uploading_method_s3_staging_encryption_no_encryption)

    @property
    @pulumi.getter(name="destinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption")
    def destination_redshift_update_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption(self) -> 'outputs.GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryptionResult':
        return pulumi.get(self, "destination_redshift_update_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption")

    @property
    @pulumi.getter(name="destinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryption")
    def destination_redshift_update_uploading_method_s3_staging_encryption_no_encryption(self) -> 'outputs.GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryptionResult':
        return pulumi.get(self, "destination_redshift_update_uploading_method_s3_staging_encryption_no_encryption")


@pulumi.output_type
class GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryptionResult(dict):
    def __init__(__self__, *,
                 encryption_type: str,
                 key_encrypting_key: str):
        pulumi.set(__self__, "encryption_type", encryption_type)
        pulumi.set(__self__, "key_encrypting_key", key_encrypting_key)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> str:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter(name="keyEncryptingKey")
    def key_encrypting_key(self) -> str:
        return pulumi.get(self, "key_encrypting_key")


@pulumi.output_type
class GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryptionResult(dict):
    def __init__(__self__, *,
                 encryption_type: str):
        pulumi.set(__self__, "encryption_type", encryption_type)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> str:
        return pulumi.get(self, "encryption_type")


@pulumi.output_type
class GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodStandardResult(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingResult(dict):
    def __init__(__self__, *,
                 access_key_id: str,
                 encryption: 'outputs.GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionResult',
                 file_buffer_count: int,
                 file_name_pattern: str,
                 method: str,
                 purge_staging_data: bool,
                 s3_bucket_name: str,
                 s3_bucket_path: str,
                 s3_bucket_region: str,
                 secret_access_key: str):
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "encryption", encryption)
        pulumi.set(__self__, "file_buffer_count", file_buffer_count)
        pulumi.set(__self__, "file_name_pattern", file_name_pattern)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "purge_staging_data", purge_staging_data)
        pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)
        pulumi.set(__self__, "s3_bucket_path", s3_bucket_path)
        pulumi.set(__self__, "s3_bucket_region", s3_bucket_region)
        pulumi.set(__self__, "secret_access_key", secret_access_key)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> str:
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter
    def encryption(self) -> 'outputs.GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionResult':
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter(name="fileBufferCount")
    def file_buffer_count(self) -> int:
        return pulumi.get(self, "file_buffer_count")

    @property
    @pulumi.getter(name="fileNamePattern")
    def file_name_pattern(self) -> str:
        return pulumi.get(self, "file_name_pattern")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="purgeStagingData")
    def purge_staging_data(self) -> bool:
        return pulumi.get(self, "purge_staging_data")

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> str:
        return pulumi.get(self, "s3_bucket_name")

    @property
    @pulumi.getter(name="s3BucketPath")
    def s3_bucket_path(self) -> str:
        return pulumi.get(self, "s3_bucket_path")

    @property
    @pulumi.getter(name="s3BucketRegion")
    def s3_bucket_region(self) -> str:
        return pulumi.get(self, "s3_bucket_region")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> str:
        return pulumi.get(self, "secret_access_key")


@pulumi.output_type
class GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionResult(dict):
    def __init__(__self__, *,
                 destination_redshift_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption: 'outputs.GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryptionResult',
                 destination_redshift_uploading_method_s3_staging_encryption_no_encryption: 'outputs.GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryptionResult'):
        pulumi.set(__self__, "destination_redshift_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption", destination_redshift_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption)
        pulumi.set(__self__, "destination_redshift_uploading_method_s3_staging_encryption_no_encryption", destination_redshift_uploading_method_s3_staging_encryption_no_encryption)

    @property
    @pulumi.getter(name="destinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption")
    def destination_redshift_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption(self) -> 'outputs.GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryptionResult':
        return pulumi.get(self, "destination_redshift_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption")

    @property
    @pulumi.getter(name="destinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption")
    def destination_redshift_uploading_method_s3_staging_encryption_no_encryption(self) -> 'outputs.GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryptionResult':
        return pulumi.get(self, "destination_redshift_uploading_method_s3_staging_encryption_no_encryption")


@pulumi.output_type
class GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryptionResult(dict):
    def __init__(__self__, *,
                 encryption_type: str,
                 key_encrypting_key: str):
        pulumi.set(__self__, "encryption_type", encryption_type)
        pulumi.set(__self__, "key_encrypting_key", key_encrypting_key)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> str:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter(name="keyEncryptingKey")
    def key_encrypting_key(self) -> str:
        return pulumi.get(self, "key_encrypting_key")


@pulumi.output_type
class GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryptionResult(dict):
    def __init__(__self__, *,
                 encryption_type: str):
        pulumi.set(__self__, "encryption_type", encryption_type)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> str:
        return pulumi.get(self, "encryption_type")


@pulumi.output_type
class GetDestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodStandardResult(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class GetDestinationS3ConfigurationResult(dict):
    def __init__(__self__, *,
                 access_key_id: str,
                 destination_type: str,
                 file_name_pattern: str,
                 format: 'outputs.GetDestinationS3ConfigurationFormatResult',
                 s3_bucket_name: str,
                 s3_bucket_path: str,
                 s3_bucket_region: str,
                 s3_endpoint: str,
                 s3_path_format: str,
                 secret_access_key: str):
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "file_name_pattern", file_name_pattern)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)
        pulumi.set(__self__, "s3_bucket_path", s3_bucket_path)
        pulumi.set(__self__, "s3_bucket_region", s3_bucket_region)
        pulumi.set(__self__, "s3_endpoint", s3_endpoint)
        pulumi.set(__self__, "s3_path_format", s3_path_format)
        pulumi.set(__self__, "secret_access_key", secret_access_key)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> str:
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="fileNamePattern")
    def file_name_pattern(self) -> str:
        return pulumi.get(self, "file_name_pattern")

    @property
    @pulumi.getter
    def format(self) -> 'outputs.GetDestinationS3ConfigurationFormatResult':
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> str:
        return pulumi.get(self, "s3_bucket_name")

    @property
    @pulumi.getter(name="s3BucketPath")
    def s3_bucket_path(self) -> str:
        return pulumi.get(self, "s3_bucket_path")

    @property
    @pulumi.getter(name="s3BucketRegion")
    def s3_bucket_region(self) -> str:
        return pulumi.get(self, "s3_bucket_region")

    @property
    @pulumi.getter(name="s3Endpoint")
    def s3_endpoint(self) -> str:
        return pulumi.get(self, "s3_endpoint")

    @property
    @pulumi.getter(name="s3PathFormat")
    def s3_path_format(self) -> str:
        return pulumi.get(self, "s3_path_format")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> str:
        return pulumi.get(self, "secret_access_key")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatResult(dict):
    def __init__(__self__, *,
                 destination_s3_output_format_avro_apache_avro: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroResult',
                 destination_s3_output_format_csv_comma_separated_values: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesResult',
                 destination_s3_output_format_json_lines_newline_delimited_json: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonResult',
                 destination_s3_output_format_parquet_columnar_storage: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatParquetColumnarStorageResult',
                 destination_s3_update_output_format_avro_apache_avro: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroResult',
                 destination_s3_update_output_format_csv_comma_separated_values: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesResult',
                 destination_s3_update_output_format_json_lines_newline_delimited_json: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonResult',
                 destination_s3_update_output_format_parquet_columnar_storage: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatParquetColumnarStorageResult'):
        pulumi.set(__self__, "destination_s3_output_format_avro_apache_avro", destination_s3_output_format_avro_apache_avro)
        pulumi.set(__self__, "destination_s3_output_format_csv_comma_separated_values", destination_s3_output_format_csv_comma_separated_values)
        pulumi.set(__self__, "destination_s3_output_format_json_lines_newline_delimited_json", destination_s3_output_format_json_lines_newline_delimited_json)
        pulumi.set(__self__, "destination_s3_output_format_parquet_columnar_storage", destination_s3_output_format_parquet_columnar_storage)
        pulumi.set(__self__, "destination_s3_update_output_format_avro_apache_avro", destination_s3_update_output_format_avro_apache_avro)
        pulumi.set(__self__, "destination_s3_update_output_format_csv_comma_separated_values", destination_s3_update_output_format_csv_comma_separated_values)
        pulumi.set(__self__, "destination_s3_update_output_format_json_lines_newline_delimited_json", destination_s3_update_output_format_json_lines_newline_delimited_json)
        pulumi.set(__self__, "destination_s3_update_output_format_parquet_columnar_storage", destination_s3_update_output_format_parquet_columnar_storage)

    @property
    @pulumi.getter(name="destinationS3OutputFormatAvroApacheAvro")
    def destination_s3_output_format_avro_apache_avro(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroResult':
        return pulumi.get(self, "destination_s3_output_format_avro_apache_avro")

    @property
    @pulumi.getter(name="destinationS3OutputFormatCsvCommaSeparatedValues")
    def destination_s3_output_format_csv_comma_separated_values(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesResult':
        return pulumi.get(self, "destination_s3_output_format_csv_comma_separated_values")

    @property
    @pulumi.getter(name="destinationS3OutputFormatJsonLinesNewlineDelimitedJson")
    def destination_s3_output_format_json_lines_newline_delimited_json(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonResult':
        return pulumi.get(self, "destination_s3_output_format_json_lines_newline_delimited_json")

    @property
    @pulumi.getter(name="destinationS3OutputFormatParquetColumnarStorage")
    def destination_s3_output_format_parquet_columnar_storage(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatParquetColumnarStorageResult':
        return pulumi.get(self, "destination_s3_output_format_parquet_columnar_storage")

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatAvroApacheAvro")
    def destination_s3_update_output_format_avro_apache_avro(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroResult':
        return pulumi.get(self, "destination_s3_update_output_format_avro_apache_avro")

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatCsvCommaSeparatedValues")
    def destination_s3_update_output_format_csv_comma_separated_values(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesResult':
        return pulumi.get(self, "destination_s3_update_output_format_csv_comma_separated_values")

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJson")
    def destination_s3_update_output_format_json_lines_newline_delimited_json(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonResult':
        return pulumi.get(self, "destination_s3_update_output_format_json_lines_newline_delimited_json")

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatParquetColumnarStorage")
    def destination_s3_update_output_format_parquet_columnar_storage(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatParquetColumnarStorageResult':
        return pulumi.get(self, "destination_s3_update_output_format_parquet_columnar_storage")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroResult(dict):
    def __init__(__self__, *,
                 compression_codec: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecResult',
                 format_type: str):
        pulumi.set(__self__, "compression_codec", compression_codec)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecResult':
        return pulumi.get(self, "compression_codec")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecResult(dict):
    def __init__(__self__, *,
                 destination_s3_output_format_avro_apache_avro_compression_codec_bzip2: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2Result',
                 destination_s3_output_format_avro_apache_avro_compression_codec_deflate: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflateResult',
                 destination_s3_output_format_avro_apache_avro_compression_codec_no_compression: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompressionResult',
                 destination_s3_output_format_avro_apache_avro_compression_codec_snappy: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappyResult',
                 destination_s3_output_format_avro_apache_avro_compression_codec_xz: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecXzResult',
                 destination_s3_output_format_avro_apache_avro_compression_codec_zstandard: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandardResult'):
        pulumi.set(__self__, "destination_s3_output_format_avro_apache_avro_compression_codec_bzip2", destination_s3_output_format_avro_apache_avro_compression_codec_bzip2)
        pulumi.set(__self__, "destination_s3_output_format_avro_apache_avro_compression_codec_deflate", destination_s3_output_format_avro_apache_avro_compression_codec_deflate)
        pulumi.set(__self__, "destination_s3_output_format_avro_apache_avro_compression_codec_no_compression", destination_s3_output_format_avro_apache_avro_compression_codec_no_compression)
        pulumi.set(__self__, "destination_s3_output_format_avro_apache_avro_compression_codec_snappy", destination_s3_output_format_avro_apache_avro_compression_codec_snappy)
        pulumi.set(__self__, "destination_s3_output_format_avro_apache_avro_compression_codec_xz", destination_s3_output_format_avro_apache_avro_compression_codec_xz)
        pulumi.set(__self__, "destination_s3_output_format_avro_apache_avro_compression_codec_zstandard", destination_s3_output_format_avro_apache_avro_compression_codec_zstandard)

    @property
    @pulumi.getter(name="destinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2")
    def destination_s3_output_format_avro_apache_avro_compression_codec_bzip2(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2Result':
        return pulumi.get(self, "destination_s3_output_format_avro_apache_avro_compression_codec_bzip2")

    @property
    @pulumi.getter(name="destinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate")
    def destination_s3_output_format_avro_apache_avro_compression_codec_deflate(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflateResult':
        return pulumi.get(self, "destination_s3_output_format_avro_apache_avro_compression_codec_deflate")

    @property
    @pulumi.getter(name="destinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression")
    def destination_s3_output_format_avro_apache_avro_compression_codec_no_compression(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompressionResult':
        return pulumi.get(self, "destination_s3_output_format_avro_apache_avro_compression_codec_no_compression")

    @property
    @pulumi.getter(name="destinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy")
    def destination_s3_output_format_avro_apache_avro_compression_codec_snappy(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappyResult':
        return pulumi.get(self, "destination_s3_output_format_avro_apache_avro_compression_codec_snappy")

    @property
    @pulumi.getter(name="destinationS3OutputFormatAvroApacheAvroCompressionCodecXz")
    def destination_s3_output_format_avro_apache_avro_compression_codec_xz(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecXzResult':
        return pulumi.get(self, "destination_s3_output_format_avro_apache_avro_compression_codec_xz")

    @property
    @pulumi.getter(name="destinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard")
    def destination_s3_output_format_avro_apache_avro_compression_codec_zstandard(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandardResult':
        return pulumi.get(self, "destination_s3_output_format_avro_apache_avro_compression_codec_zstandard")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2Result(dict):
    def __init__(__self__, *,
                 codec: str):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflateResult(dict):
    def __init__(__self__, *,
                 codec: str,
                 compression_level: int):
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "compression_level", compression_level)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> int:
        return pulumi.get(self, "compression_level")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompressionResult(dict):
    def __init__(__self__, *,
                 codec: str):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappyResult(dict):
    def __init__(__self__, *,
                 codec: str):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecXzResult(dict):
    def __init__(__self__, *,
                 codec: str,
                 compression_level: int):
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "compression_level", compression_level)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> int:
        return pulumi.get(self, "compression_level")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandardResult(dict):
    def __init__(__self__, *,
                 codec: str,
                 compression_level: int,
                 include_checksum: bool):
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "compression_level", compression_level)
        pulumi.set(__self__, "include_checksum", include_checksum)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> int:
        return pulumi.get(self, "compression_level")

    @property
    @pulumi.getter(name="includeChecksum")
    def include_checksum(self) -> bool:
        return pulumi.get(self, "include_checksum")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesResult(dict):
    def __init__(__self__, *,
                 compression: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionResult',
                 flattening: str,
                 format_type: str):
        pulumi.set(__self__, "compression", compression)
        pulumi.set(__self__, "flattening", flattening)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter
    def compression(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionResult':
        return pulumi.get(self, "compression")

    @property
    @pulumi.getter
    def flattening(self) -> str:
        return pulumi.get(self, "flattening")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionResult(dict):
    def __init__(__self__, *,
                 destination_s3_output_format_csv_comma_separated_values_compression_gzip: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzipResult',
                 destination_s3_output_format_csv_comma_separated_values_compression_no_compression: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompressionResult'):
        pulumi.set(__self__, "destination_s3_output_format_csv_comma_separated_values_compression_gzip", destination_s3_output_format_csv_comma_separated_values_compression_gzip)
        pulumi.set(__self__, "destination_s3_output_format_csv_comma_separated_values_compression_no_compression", destination_s3_output_format_csv_comma_separated_values_compression_no_compression)

    @property
    @pulumi.getter(name="destinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzip")
    def destination_s3_output_format_csv_comma_separated_values_compression_gzip(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzipResult':
        return pulumi.get(self, "destination_s3_output_format_csv_comma_separated_values_compression_gzip")

    @property
    @pulumi.getter(name="destinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompression")
    def destination_s3_output_format_csv_comma_separated_values_compression_no_compression(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompressionResult':
        return pulumi.get(self, "destination_s3_output_format_csv_comma_separated_values_compression_no_compression")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzipResult(dict):
    def __init__(__self__, *,
                 compression_type: str):
        pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> str:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompressionResult(dict):
    def __init__(__self__, *,
                 compression_type: str):
        pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> str:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonResult(dict):
    def __init__(__self__, *,
                 compression: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionResult',
                 flattening: str,
                 format_type: str):
        pulumi.set(__self__, "compression", compression)
        pulumi.set(__self__, "flattening", flattening)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter
    def compression(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionResult':
        return pulumi.get(self, "compression")

    @property
    @pulumi.getter
    def flattening(self) -> str:
        return pulumi.get(self, "flattening")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionResult(dict):
    def __init__(__self__, *,
                 destination_s3_output_format_json_lines_newline_delimited_json_compression_gzip: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipResult',
                 destination_s3_output_format_json_lines_newline_delimited_json_compression_no_compression: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionResult'):
        pulumi.set(__self__, "destination_s3_output_format_json_lines_newline_delimited_json_compression_gzip", destination_s3_output_format_json_lines_newline_delimited_json_compression_gzip)
        pulumi.set(__self__, "destination_s3_output_format_json_lines_newline_delimited_json_compression_no_compression", destination_s3_output_format_json_lines_newline_delimited_json_compression_no_compression)

    @property
    @pulumi.getter(name="destinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip")
    def destination_s3_output_format_json_lines_newline_delimited_json_compression_gzip(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipResult':
        return pulumi.get(self, "destination_s3_output_format_json_lines_newline_delimited_json_compression_gzip")

    @property
    @pulumi.getter(name="destinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression")
    def destination_s3_output_format_json_lines_newline_delimited_json_compression_no_compression(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionResult':
        return pulumi.get(self, "destination_s3_output_format_json_lines_newline_delimited_json_compression_no_compression")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipResult(dict):
    def __init__(__self__, *,
                 compression_type: str):
        pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> str:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionResult(dict):
    def __init__(__self__, *,
                 compression_type: str):
        pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> str:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3OutputFormatParquetColumnarStorageResult(dict):
    def __init__(__self__, *,
                 block_size_mb: int,
                 compression_codec: str,
                 dictionary_encoding: bool,
                 dictionary_page_size_kb: int,
                 format_type: str,
                 max_padding_size_mb: int,
                 page_size_kb: int):
        pulumi.set(__self__, "block_size_mb", block_size_mb)
        pulumi.set(__self__, "compression_codec", compression_codec)
        pulumi.set(__self__, "dictionary_encoding", dictionary_encoding)
        pulumi.set(__self__, "dictionary_page_size_kb", dictionary_page_size_kb)
        pulumi.set(__self__, "format_type", format_type)
        pulumi.set(__self__, "max_padding_size_mb", max_padding_size_mb)
        pulumi.set(__self__, "page_size_kb", page_size_kb)

    @property
    @pulumi.getter(name="blockSizeMb")
    def block_size_mb(self) -> int:
        return pulumi.get(self, "block_size_mb")

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> str:
        return pulumi.get(self, "compression_codec")

    @property
    @pulumi.getter(name="dictionaryEncoding")
    def dictionary_encoding(self) -> bool:
        return pulumi.get(self, "dictionary_encoding")

    @property
    @pulumi.getter(name="dictionaryPageSizeKb")
    def dictionary_page_size_kb(self) -> int:
        return pulumi.get(self, "dictionary_page_size_kb")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter(name="maxPaddingSizeMb")
    def max_padding_size_mb(self) -> int:
        return pulumi.get(self, "max_padding_size_mb")

    @property
    @pulumi.getter(name="pageSizeKb")
    def page_size_kb(self) -> int:
        return pulumi.get(self, "page_size_kb")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroResult(dict):
    def __init__(__self__, *,
                 compression_codec: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecResult',
                 format_type: str):
        pulumi.set(__self__, "compression_codec", compression_codec)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecResult':
        return pulumi.get(self, "compression_codec")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecResult(dict):
    def __init__(__self__, *,
                 destination_s3_update_output_format_avro_apache_avro_compression_codec_bzip2: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecBzip2Result',
                 destination_s3_update_output_format_avro_apache_avro_compression_codec_deflate: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflateResult',
                 destination_s3_update_output_format_avro_apache_avro_compression_codec_no_compression: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecNoCompressionResult',
                 destination_s3_update_output_format_avro_apache_avro_compression_codec_snappy: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecSnappyResult',
                 destination_s3_update_output_format_avro_apache_avro_compression_codec_xz: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXzResult',
                 destination_s3_update_output_format_avro_apache_avro_compression_codec_zstandard: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandardResult'):
        pulumi.set(__self__, "destination_s3_update_output_format_avro_apache_avro_compression_codec_bzip2", destination_s3_update_output_format_avro_apache_avro_compression_codec_bzip2)
        pulumi.set(__self__, "destination_s3_update_output_format_avro_apache_avro_compression_codec_deflate", destination_s3_update_output_format_avro_apache_avro_compression_codec_deflate)
        pulumi.set(__self__, "destination_s3_update_output_format_avro_apache_avro_compression_codec_no_compression", destination_s3_update_output_format_avro_apache_avro_compression_codec_no_compression)
        pulumi.set(__self__, "destination_s3_update_output_format_avro_apache_avro_compression_codec_snappy", destination_s3_update_output_format_avro_apache_avro_compression_codec_snappy)
        pulumi.set(__self__, "destination_s3_update_output_format_avro_apache_avro_compression_codec_xz", destination_s3_update_output_format_avro_apache_avro_compression_codec_xz)
        pulumi.set(__self__, "destination_s3_update_output_format_avro_apache_avro_compression_codec_zstandard", destination_s3_update_output_format_avro_apache_avro_compression_codec_zstandard)

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecBzip2")
    def destination_s3_update_output_format_avro_apache_avro_compression_codec_bzip2(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecBzip2Result':
        return pulumi.get(self, "destination_s3_update_output_format_avro_apache_avro_compression_codec_bzip2")

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflate")
    def destination_s3_update_output_format_avro_apache_avro_compression_codec_deflate(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflateResult':
        return pulumi.get(self, "destination_s3_update_output_format_avro_apache_avro_compression_codec_deflate")

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression")
    def destination_s3_update_output_format_avro_apache_avro_compression_codec_no_compression(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecNoCompressionResult':
        return pulumi.get(self, "destination_s3_update_output_format_avro_apache_avro_compression_codec_no_compression")

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecSnappy")
    def destination_s3_update_output_format_avro_apache_avro_compression_codec_snappy(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecSnappyResult':
        return pulumi.get(self, "destination_s3_update_output_format_avro_apache_avro_compression_codec_snappy")

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXz")
    def destination_s3_update_output_format_avro_apache_avro_compression_codec_xz(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXzResult':
        return pulumi.get(self, "destination_s3_update_output_format_avro_apache_avro_compression_codec_xz")

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandard")
    def destination_s3_update_output_format_avro_apache_avro_compression_codec_zstandard(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandardResult':
        return pulumi.get(self, "destination_s3_update_output_format_avro_apache_avro_compression_codec_zstandard")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecBzip2Result(dict):
    def __init__(__self__, *,
                 codec: str):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflateResult(dict):
    def __init__(__self__, *,
                 codec: str,
                 compression_level: int):
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "compression_level", compression_level)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> int:
        return pulumi.get(self, "compression_level")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecNoCompressionResult(dict):
    def __init__(__self__, *,
                 codec: str):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecSnappyResult(dict):
    def __init__(__self__, *,
                 codec: str):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXzResult(dict):
    def __init__(__self__, *,
                 codec: str,
                 compression_level: int):
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "compression_level", compression_level)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> int:
        return pulumi.get(self, "compression_level")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandardResult(dict):
    def __init__(__self__, *,
                 codec: str,
                 compression_level: int,
                 include_checksum: bool):
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "compression_level", compression_level)
        pulumi.set(__self__, "include_checksum", include_checksum)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> int:
        return pulumi.get(self, "compression_level")

    @property
    @pulumi.getter(name="includeChecksum")
    def include_checksum(self) -> bool:
        return pulumi.get(self, "include_checksum")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesResult(dict):
    def __init__(__self__, *,
                 compression: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionResult',
                 flattening: str,
                 format_type: str):
        pulumi.set(__self__, "compression", compression)
        pulumi.set(__self__, "flattening", flattening)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter
    def compression(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionResult':
        return pulumi.get(self, "compression")

    @property
    @pulumi.getter
    def flattening(self) -> str:
        return pulumi.get(self, "flattening")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionResult(dict):
    def __init__(__self__, *,
                 destination_s3_update_output_format_csv_comma_separated_values_compression_gzip: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzipResult',
                 destination_s3_update_output_format_csv_comma_separated_values_compression_no_compression: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompressionResult'):
        pulumi.set(__self__, "destination_s3_update_output_format_csv_comma_separated_values_compression_gzip", destination_s3_update_output_format_csv_comma_separated_values_compression_gzip)
        pulumi.set(__self__, "destination_s3_update_output_format_csv_comma_separated_values_compression_no_compression", destination_s3_update_output_format_csv_comma_separated_values_compression_no_compression)

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip")
    def destination_s3_update_output_format_csv_comma_separated_values_compression_gzip(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzipResult':
        return pulumi.get(self, "destination_s3_update_output_format_csv_comma_separated_values_compression_gzip")

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression")
    def destination_s3_update_output_format_csv_comma_separated_values_compression_no_compression(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompressionResult':
        return pulumi.get(self, "destination_s3_update_output_format_csv_comma_separated_values_compression_no_compression")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzipResult(dict):
    def __init__(__self__, *,
                 compression_type: str):
        pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> str:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompressionResult(dict):
    def __init__(__self__, *,
                 compression_type: str):
        pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> str:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonResult(dict):
    def __init__(__self__, *,
                 compression: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionResult',
                 flattening: str,
                 format_type: str):
        pulumi.set(__self__, "compression", compression)
        pulumi.set(__self__, "flattening", flattening)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter
    def compression(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionResult':
        return pulumi.get(self, "compression")

    @property
    @pulumi.getter
    def flattening(self) -> str:
        return pulumi.get(self, "flattening")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionResult(dict):
    def __init__(__self__, *,
                 destination_s3_update_output_format_json_lines_newline_delimited_json_compression_gzip: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipResult',
                 destination_s3_update_output_format_json_lines_newline_delimited_json_compression_no_compression: 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionResult'):
        pulumi.set(__self__, "destination_s3_update_output_format_json_lines_newline_delimited_json_compression_gzip", destination_s3_update_output_format_json_lines_newline_delimited_json_compression_gzip)
        pulumi.set(__self__, "destination_s3_update_output_format_json_lines_newline_delimited_json_compression_no_compression", destination_s3_update_output_format_json_lines_newline_delimited_json_compression_no_compression)

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip")
    def destination_s3_update_output_format_json_lines_newline_delimited_json_compression_gzip(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipResult':
        return pulumi.get(self, "destination_s3_update_output_format_json_lines_newline_delimited_json_compression_gzip")

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression")
    def destination_s3_update_output_format_json_lines_newline_delimited_json_compression_no_compression(self) -> 'outputs.GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionResult':
        return pulumi.get(self, "destination_s3_update_output_format_json_lines_newline_delimited_json_compression_no_compression")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipResult(dict):
    def __init__(__self__, *,
                 compression_type: str):
        pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> str:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionResult(dict):
    def __init__(__self__, *,
                 compression_type: str):
        pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> str:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class GetDestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatParquetColumnarStorageResult(dict):
    def __init__(__self__, *,
                 block_size_mb: int,
                 compression_codec: str,
                 dictionary_encoding: bool,
                 dictionary_page_size_kb: int,
                 format_type: str,
                 max_padding_size_mb: int,
                 page_size_kb: int):
        pulumi.set(__self__, "block_size_mb", block_size_mb)
        pulumi.set(__self__, "compression_codec", compression_codec)
        pulumi.set(__self__, "dictionary_encoding", dictionary_encoding)
        pulumi.set(__self__, "dictionary_page_size_kb", dictionary_page_size_kb)
        pulumi.set(__self__, "format_type", format_type)
        pulumi.set(__self__, "max_padding_size_mb", max_padding_size_mb)
        pulumi.set(__self__, "page_size_kb", page_size_kb)

    @property
    @pulumi.getter(name="blockSizeMb")
    def block_size_mb(self) -> int:
        return pulumi.get(self, "block_size_mb")

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> str:
        return pulumi.get(self, "compression_codec")

    @property
    @pulumi.getter(name="dictionaryEncoding")
    def dictionary_encoding(self) -> bool:
        return pulumi.get(self, "dictionary_encoding")

    @property
    @pulumi.getter(name="dictionaryPageSizeKb")
    def dictionary_page_size_kb(self) -> int:
        return pulumi.get(self, "dictionary_page_size_kb")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter(name="maxPaddingSizeMb")
    def max_padding_size_mb(self) -> int:
        return pulumi.get(self, "max_padding_size_mb")

    @property
    @pulumi.getter(name="pageSizeKb")
    def page_size_kb(self) -> int:
        return pulumi.get(self, "page_size_kb")


@pulumi.output_type
class GetDestinationS3GlueConfigurationResult(dict):
    def __init__(__self__, *,
                 access_key_id: str,
                 destination_type: str,
                 file_name_pattern: str,
                 format: 'outputs.GetDestinationS3GlueConfigurationFormatResult',
                 glue_database: str,
                 glue_serialization_library: str,
                 s3_bucket_name: str,
                 s3_bucket_path: str,
                 s3_bucket_region: str,
                 s3_endpoint: str,
                 s3_path_format: str,
                 secret_access_key: str):
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "file_name_pattern", file_name_pattern)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "glue_database", glue_database)
        pulumi.set(__self__, "glue_serialization_library", glue_serialization_library)
        pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)
        pulumi.set(__self__, "s3_bucket_path", s3_bucket_path)
        pulumi.set(__self__, "s3_bucket_region", s3_bucket_region)
        pulumi.set(__self__, "s3_endpoint", s3_endpoint)
        pulumi.set(__self__, "s3_path_format", s3_path_format)
        pulumi.set(__self__, "secret_access_key", secret_access_key)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> str:
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="fileNamePattern")
    def file_name_pattern(self) -> str:
        return pulumi.get(self, "file_name_pattern")

    @property
    @pulumi.getter
    def format(self) -> 'outputs.GetDestinationS3GlueConfigurationFormatResult':
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="glueDatabase")
    def glue_database(self) -> str:
        return pulumi.get(self, "glue_database")

    @property
    @pulumi.getter(name="glueSerializationLibrary")
    def glue_serialization_library(self) -> str:
        return pulumi.get(self, "glue_serialization_library")

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> str:
        return pulumi.get(self, "s3_bucket_name")

    @property
    @pulumi.getter(name="s3BucketPath")
    def s3_bucket_path(self) -> str:
        return pulumi.get(self, "s3_bucket_path")

    @property
    @pulumi.getter(name="s3BucketRegion")
    def s3_bucket_region(self) -> str:
        return pulumi.get(self, "s3_bucket_region")

    @property
    @pulumi.getter(name="s3Endpoint")
    def s3_endpoint(self) -> str:
        return pulumi.get(self, "s3_endpoint")

    @property
    @pulumi.getter(name="s3PathFormat")
    def s3_path_format(self) -> str:
        return pulumi.get(self, "s3_path_format")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> str:
        return pulumi.get(self, "secret_access_key")


@pulumi.output_type
class GetDestinationS3GlueConfigurationFormatResult(dict):
    def __init__(__self__, *,
                 destination_s3_glue_output_format_json_lines_newline_delimited_json: 'outputs.GetDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonResult',
                 destination_s3_glue_update_output_format_json_lines_newline_delimited_json: 'outputs.GetDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonResult'):
        pulumi.set(__self__, "destination_s3_glue_output_format_json_lines_newline_delimited_json", destination_s3_glue_output_format_json_lines_newline_delimited_json)
        pulumi.set(__self__, "destination_s3_glue_update_output_format_json_lines_newline_delimited_json", destination_s3_glue_update_output_format_json_lines_newline_delimited_json)

    @property
    @pulumi.getter(name="destinationS3GlueOutputFormatJsonLinesNewlineDelimitedJson")
    def destination_s3_glue_output_format_json_lines_newline_delimited_json(self) -> 'outputs.GetDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonResult':
        return pulumi.get(self, "destination_s3_glue_output_format_json_lines_newline_delimited_json")

    @property
    @pulumi.getter(name="destinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJson")
    def destination_s3_glue_update_output_format_json_lines_newline_delimited_json(self) -> 'outputs.GetDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonResult':
        return pulumi.get(self, "destination_s3_glue_update_output_format_json_lines_newline_delimited_json")


@pulumi.output_type
class GetDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonResult(dict):
    def __init__(__self__, *,
                 compression: 'outputs.GetDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionResult',
                 flattening: str,
                 format_type: str):
        pulumi.set(__self__, "compression", compression)
        pulumi.set(__self__, "flattening", flattening)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter
    def compression(self) -> 'outputs.GetDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionResult':
        return pulumi.get(self, "compression")

    @property
    @pulumi.getter
    def flattening(self) -> str:
        return pulumi.get(self, "flattening")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class GetDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionResult(dict):
    def __init__(__self__, *,
                 destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_gzip: 'outputs.GetDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipResult',
                 destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_no_compression: 'outputs.GetDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionResult'):
        pulumi.set(__self__, "destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_gzip", destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_gzip)
        pulumi.set(__self__, "destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_no_compression", destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_no_compression)

    @property
    @pulumi.getter(name="destinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip")
    def destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_gzip(self) -> 'outputs.GetDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipResult':
        return pulumi.get(self, "destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_gzip")

    @property
    @pulumi.getter(name="destinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression")
    def destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_no_compression(self) -> 'outputs.GetDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionResult':
        return pulumi.get(self, "destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_no_compression")


@pulumi.output_type
class GetDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipResult(dict):
    def __init__(__self__, *,
                 compression_type: str):
        pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> str:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class GetDestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionResult(dict):
    def __init__(__self__, *,
                 compression_type: str):
        pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> str:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class GetDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonResult(dict):
    def __init__(__self__, *,
                 compression: 'outputs.GetDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionResult',
                 flattening: str,
                 format_type: str):
        pulumi.set(__self__, "compression", compression)
        pulumi.set(__self__, "flattening", flattening)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter
    def compression(self) -> 'outputs.GetDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionResult':
        return pulumi.get(self, "compression")

    @property
    @pulumi.getter
    def flattening(self) -> str:
        return pulumi.get(self, "flattening")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class GetDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionResult(dict):
    def __init__(__self__, *,
                 destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_gzip: 'outputs.GetDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipResult',
                 destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_no_compression: 'outputs.GetDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionResult'):
        pulumi.set(__self__, "destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_gzip", destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_gzip)
        pulumi.set(__self__, "destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_no_compression", destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_no_compression)

    @property
    @pulumi.getter(name="destinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip")
    def destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_gzip(self) -> 'outputs.GetDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipResult':
        return pulumi.get(self, "destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_gzip")

    @property
    @pulumi.getter(name="destinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression")
    def destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_no_compression(self) -> 'outputs.GetDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionResult':
        return pulumi.get(self, "destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_no_compression")


@pulumi.output_type
class GetDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipResult(dict):
    def __init__(__self__, *,
                 compression_type: str):
        pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> str:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class GetDestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionResult(dict):
    def __init__(__self__, *,
                 compression_type: str):
        pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> str:
        return pulumi.get(self, "compression_type")


@pulumi.output_type
class GetDestinationSftpJsonConfigurationResult(dict):
    def __init__(__self__, *,
                 destination_path: str,
                 destination_type: str,
                 host: str,
                 password: str,
                 port: int,
                 username: str):
        pulumi.set(__self__, "destination_path", destination_path)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> str:
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetDestinationSnowflakeConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetDestinationSnowflakeConfigurationCredentialsResult',
                 database: str,
                 destination_type: str,
                 host: str,
                 jdbc_url_params: str,
                 raw_data_schema: str,
                 role: str,
                 schema: str,
                 use1s1t_format: bool,
                 username: str,
                 warehouse: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        pulumi.set(__self__, "raw_data_schema", raw_data_schema)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "use1s1t_format", use1s1t_format)
        pulumi.set(__self__, "username", username)
        pulumi.set(__self__, "warehouse", warehouse)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetDestinationSnowflakeConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> str:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter(name="rawDataSchema")
    def raw_data_schema(self) -> str:
        return pulumi.get(self, "raw_data_schema")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="use1s1tFormat")
    def use1s1t_format(self) -> bool:
        return pulumi.get(self, "use1s1t_format")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def warehouse(self) -> str:
        return pulumi.get(self, "warehouse")


@pulumi.output_type
class GetDestinationSnowflakeConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 destination_snowflake_authorization_method_key_pair_authentication: 'outputs.GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthenticationResult',
                 destination_snowflake_authorization_method_o_auth20: 'outputs.GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20Result',
                 destination_snowflake_authorization_method_username_and_password: 'outputs.GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPasswordResult',
                 destination_snowflake_update_authorization_method_key_pair_authentication: 'outputs.GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationResult',
                 destination_snowflake_update_authorization_method_o_auth20: 'outputs.GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20Result',
                 destination_snowflake_update_authorization_method_username_and_password: 'outputs.GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordResult'):
        pulumi.set(__self__, "destination_snowflake_authorization_method_key_pair_authentication", destination_snowflake_authorization_method_key_pair_authentication)
        pulumi.set(__self__, "destination_snowflake_authorization_method_o_auth20", destination_snowflake_authorization_method_o_auth20)
        pulumi.set(__self__, "destination_snowflake_authorization_method_username_and_password", destination_snowflake_authorization_method_username_and_password)
        pulumi.set(__self__, "destination_snowflake_update_authorization_method_key_pair_authentication", destination_snowflake_update_authorization_method_key_pair_authentication)
        pulumi.set(__self__, "destination_snowflake_update_authorization_method_o_auth20", destination_snowflake_update_authorization_method_o_auth20)
        pulumi.set(__self__, "destination_snowflake_update_authorization_method_username_and_password", destination_snowflake_update_authorization_method_username_and_password)

    @property
    @pulumi.getter(name="destinationSnowflakeAuthorizationMethodKeyPairAuthentication")
    def destination_snowflake_authorization_method_key_pair_authentication(self) -> 'outputs.GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthenticationResult':
        return pulumi.get(self, "destination_snowflake_authorization_method_key_pair_authentication")

    @property
    @pulumi.getter(name="destinationSnowflakeAuthorizationMethodOAuth20")
    def destination_snowflake_authorization_method_o_auth20(self) -> 'outputs.GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20Result':
        return pulumi.get(self, "destination_snowflake_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="destinationSnowflakeAuthorizationMethodUsernameAndPassword")
    def destination_snowflake_authorization_method_username_and_password(self) -> 'outputs.GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPasswordResult':
        return pulumi.get(self, "destination_snowflake_authorization_method_username_and_password")

    @property
    @pulumi.getter(name="destinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication")
    def destination_snowflake_update_authorization_method_key_pair_authentication(self) -> 'outputs.GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationResult':
        return pulumi.get(self, "destination_snowflake_update_authorization_method_key_pair_authentication")

    @property
    @pulumi.getter(name="destinationSnowflakeUpdateAuthorizationMethodOAuth20")
    def destination_snowflake_update_authorization_method_o_auth20(self) -> 'outputs.GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20Result':
        return pulumi.get(self, "destination_snowflake_update_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="destinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword")
    def destination_snowflake_update_authorization_method_username_and_password(self) -> 'outputs.GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordResult':
        return pulumi.get(self, "destination_snowflake_update_authorization_method_username_and_password")


@pulumi.output_type
class GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthenticationResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 private_key: str,
                 private_key_password: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "private_key", private_key)
        pulumi.set(__self__, "private_key_password", private_key_password)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> str:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="privateKeyPassword")
    def private_key_password(self) -> str:
        return pulumi.get(self, "private_key_password")


@pulumi.output_type
class GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPasswordResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 password: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")


@pulumi.output_type
class GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 private_key: str,
                 private_key_password: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "private_key", private_key)
        pulumi.set(__self__, "private_key_password", private_key_password)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> str:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="privateKeyPassword")
    def private_key_password(self) -> str:
        return pulumi.get(self, "private_key_password")


@pulumi.output_type
class GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 password: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")


@pulumi.output_type
class GetDestinationTimeplusConfigurationResult(dict):
    def __init__(__self__, *,
                 apikey: str,
                 destination_type: str,
                 endpoint: str):
        pulumi.set(__self__, "apikey", apikey)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "endpoint", endpoint)

    @property
    @pulumi.getter
    def apikey(self) -> str:
        return pulumi.get(self, "apikey")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")


@pulumi.output_type
class GetDestinationTypesenseConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 batch_size: str,
                 destination_type: str,
                 host: str,
                 port: str,
                 protocol: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "batch_size", batch_size)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> str:
        return pulumi.get(self, "batch_size")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetDestinationVerticaConfigurationResult(dict):
    def __init__(__self__, *,
                 database: str,
                 destination_type: str,
                 host: str,
                 jdbc_url_params: str,
                 password: str,
                 port: int,
                 schema: str,
                 tunnel_method: 'outputs.GetDestinationVerticaConfigurationTunnelMethodResult',
                 username: str):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> str:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> 'outputs.GetDestinationVerticaConfigurationTunnelMethodResult':
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetDestinationVerticaConfigurationTunnelMethodResult(dict):
    def __init__(__self__, *,
                 destination_vertica_ssh_tunnel_method_no_tunnel: 'outputs.GetDestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodNoTunnelResult',
                 destination_vertica_ssh_tunnel_method_password_authentication: 'outputs.GetDestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodPasswordAuthenticationResult',
                 destination_vertica_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetDestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodSshKeyAuthenticationResult',
                 destination_vertica_update_ssh_tunnel_method_no_tunnel: 'outputs.GetDestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodNoTunnelResult',
                 destination_vertica_update_ssh_tunnel_method_password_authentication: 'outputs.GetDestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodPasswordAuthenticationResult',
                 destination_vertica_update_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetDestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodSshKeyAuthenticationResult'):
        pulumi.set(__self__, "destination_vertica_ssh_tunnel_method_no_tunnel", destination_vertica_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "destination_vertica_ssh_tunnel_method_password_authentication", destination_vertica_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "destination_vertica_ssh_tunnel_method_ssh_key_authentication", destination_vertica_ssh_tunnel_method_ssh_key_authentication)
        pulumi.set(__self__, "destination_vertica_update_ssh_tunnel_method_no_tunnel", destination_vertica_update_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "destination_vertica_update_ssh_tunnel_method_password_authentication", destination_vertica_update_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "destination_vertica_update_ssh_tunnel_method_ssh_key_authentication", destination_vertica_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="destinationVerticaSshTunnelMethodNoTunnel")
    def destination_vertica_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetDestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "destination_vertica_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationVerticaSshTunnelMethodPasswordAuthentication")
    def destination_vertica_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetDestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "destination_vertica_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationVerticaSshTunnelMethodSshKeyAuthentication")
    def destination_vertica_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetDestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "destination_vertica_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="destinationVerticaUpdateSshTunnelMethodNoTunnel")
    def destination_vertica_update_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetDestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "destination_vertica_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="destinationVerticaUpdateSshTunnelMethodPasswordAuthentication")
    def destination_vertica_update_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetDestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "destination_vertica_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="destinationVerticaUpdateSshTunnelMethodSshKeyAuthentication")
    def destination_vertica_update_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetDestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "destination_vertica_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class GetDestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetDestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetDestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetDestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetDestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetDestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetDestinationXataConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 db_url: str,
                 destination_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "db_url", db_url)
        pulumi.set(__self__, "destination_type", destination_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="dbUrl")
    def db_url(self) -> str:
        return pulumi.get(self, "db_url")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")


@pulumi.output_type
class GetSourceAhaConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 source_type: str,
                 url: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetSourceAircallConfigurationResult(dict):
    def __init__(__self__, *,
                 api_id: str,
                 api_token: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "api_id", api_id)
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiId")
    def api_id(self) -> str:
        return pulumi.get(self, "api_id")

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceAirtableConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourceAirtableConfigurationCredentialsResult',
                 source_type: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceAirtableConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceAirtableConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_airtable_authentication_o_auth20: 'outputs.GetSourceAirtableConfigurationCredentialsSourceAirtableAuthenticationOAuth20Result',
                 source_airtable_authentication_personal_access_token: 'outputs.GetSourceAirtableConfigurationCredentialsSourceAirtableAuthenticationPersonalAccessTokenResult',
                 source_airtable_update_authentication_o_auth20: 'outputs.GetSourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationOAuth20Result',
                 source_airtable_update_authentication_personal_access_token: 'outputs.GetSourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationPersonalAccessTokenResult'):
        pulumi.set(__self__, "source_airtable_authentication_o_auth20", source_airtable_authentication_o_auth20)
        pulumi.set(__self__, "source_airtable_authentication_personal_access_token", source_airtable_authentication_personal_access_token)
        pulumi.set(__self__, "source_airtable_update_authentication_o_auth20", source_airtable_update_authentication_o_auth20)
        pulumi.set(__self__, "source_airtable_update_authentication_personal_access_token", source_airtable_update_authentication_personal_access_token)

    @property
    @pulumi.getter(name="sourceAirtableAuthenticationOAuth20")
    def source_airtable_authentication_o_auth20(self) -> 'outputs.GetSourceAirtableConfigurationCredentialsSourceAirtableAuthenticationOAuth20Result':
        return pulumi.get(self, "source_airtable_authentication_o_auth20")

    @property
    @pulumi.getter(name="sourceAirtableAuthenticationPersonalAccessToken")
    def source_airtable_authentication_personal_access_token(self) -> 'outputs.GetSourceAirtableConfigurationCredentialsSourceAirtableAuthenticationPersonalAccessTokenResult':
        return pulumi.get(self, "source_airtable_authentication_personal_access_token")

    @property
    @pulumi.getter(name="sourceAirtableUpdateAuthenticationOAuth20")
    def source_airtable_update_authentication_o_auth20(self) -> 'outputs.GetSourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationOAuth20Result':
        return pulumi.get(self, "source_airtable_update_authentication_o_auth20")

    @property
    @pulumi.getter(name="sourceAirtableUpdateAuthenticationPersonalAccessToken")
    def source_airtable_update_authentication_personal_access_token(self) -> 'outputs.GetSourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationPersonalAccessTokenResult':
        return pulumi.get(self, "source_airtable_update_authentication_personal_access_token")


@pulumi.output_type
class GetSourceAirtableConfigurationCredentialsSourceAirtableAuthenticationOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_method: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 token_expiry_date: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> str:
        return pulumi.get(self, "token_expiry_date")


@pulumi.output_type
class GetSourceAirtableConfigurationCredentialsSourceAirtableAuthenticationPersonalAccessTokenResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 auth_method: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")


@pulumi.output_type
class GetSourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_method: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 token_expiry_date: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> str:
        return pulumi.get(self, "token_expiry_date")


@pulumi.output_type
class GetSourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationPersonalAccessTokenResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 auth_method: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")


@pulumi.output_type
class GetSourceAlloydbConfigurationResult(dict):
    def __init__(__self__, *,
                 database: str,
                 host: str,
                 jdbc_url_params: str,
                 password: str,
                 port: int,
                 replication_method: 'outputs.GetSourceAlloydbConfigurationReplicationMethodResult',
                 schemas: Sequence[str],
                 source_type: str,
                 ssl_mode: 'outputs.GetSourceAlloydbConfigurationSslModeResult',
                 tunnel_method: 'outputs.GetSourceAlloydbConfigurationTunnelMethodResult',
                 username: str):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "replication_method", replication_method)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "ssl_mode", ssl_mode)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> str:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="replicationMethod")
    def replication_method(self) -> 'outputs.GetSourceAlloydbConfigurationReplicationMethodResult':
        return pulumi.get(self, "replication_method")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> 'outputs.GetSourceAlloydbConfigurationSslModeResult':
        return pulumi.get(self, "ssl_mode")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> 'outputs.GetSourceAlloydbConfigurationTunnelMethodResult':
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSourceAlloydbConfigurationReplicationMethodResult(dict):
    def __init__(__self__, *,
                 source_alloydb_replication_method_logical_replication_cdc: 'outputs.GetSourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodLogicalReplicationCdcResult',
                 source_alloydb_replication_method_standard: 'outputs.GetSourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardResult',
                 source_alloydb_replication_method_standard_xmin: 'outputs.GetSourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardXminResult',
                 source_alloydb_update_replication_method_logical_replication_cdc: 'outputs.GetSourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodLogicalReplicationCdcResult',
                 source_alloydb_update_replication_method_standard: 'outputs.GetSourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardResult',
                 source_alloydb_update_replication_method_standard_xmin: 'outputs.GetSourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardXminResult'):
        pulumi.set(__self__, "source_alloydb_replication_method_logical_replication_cdc", source_alloydb_replication_method_logical_replication_cdc)
        pulumi.set(__self__, "source_alloydb_replication_method_standard", source_alloydb_replication_method_standard)
        pulumi.set(__self__, "source_alloydb_replication_method_standard_xmin", source_alloydb_replication_method_standard_xmin)
        pulumi.set(__self__, "source_alloydb_update_replication_method_logical_replication_cdc", source_alloydb_update_replication_method_logical_replication_cdc)
        pulumi.set(__self__, "source_alloydb_update_replication_method_standard", source_alloydb_update_replication_method_standard)
        pulumi.set(__self__, "source_alloydb_update_replication_method_standard_xmin", source_alloydb_update_replication_method_standard_xmin)

    @property
    @pulumi.getter(name="sourceAlloydbReplicationMethodLogicalReplicationCdc")
    def source_alloydb_replication_method_logical_replication_cdc(self) -> 'outputs.GetSourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodLogicalReplicationCdcResult':
        return pulumi.get(self, "source_alloydb_replication_method_logical_replication_cdc")

    @property
    @pulumi.getter(name="sourceAlloydbReplicationMethodStandard")
    def source_alloydb_replication_method_standard(self) -> 'outputs.GetSourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardResult':
        return pulumi.get(self, "source_alloydb_replication_method_standard")

    @property
    @pulumi.getter(name="sourceAlloydbReplicationMethodStandardXmin")
    def source_alloydb_replication_method_standard_xmin(self) -> 'outputs.GetSourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardXminResult':
        return pulumi.get(self, "source_alloydb_replication_method_standard_xmin")

    @property
    @pulumi.getter(name="sourceAlloydbUpdateReplicationMethodLogicalReplicationCdc")
    def source_alloydb_update_replication_method_logical_replication_cdc(self) -> 'outputs.GetSourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodLogicalReplicationCdcResult':
        return pulumi.get(self, "source_alloydb_update_replication_method_logical_replication_cdc")

    @property
    @pulumi.getter(name="sourceAlloydbUpdateReplicationMethodStandard")
    def source_alloydb_update_replication_method_standard(self) -> 'outputs.GetSourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardResult':
        return pulumi.get(self, "source_alloydb_update_replication_method_standard")

    @property
    @pulumi.getter(name="sourceAlloydbUpdateReplicationMethodStandardXmin")
    def source_alloydb_update_replication_method_standard_xmin(self) -> 'outputs.GetSourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardXminResult':
        return pulumi.get(self, "source_alloydb_update_replication_method_standard_xmin")


@pulumi.output_type
class GetSourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodLogicalReplicationCdcResult(dict):
    def __init__(__self__, *,
                 initial_waiting_seconds: int,
                 lsn_commit_behaviour: str,
                 method: str,
                 plugin: str,
                 publication: str,
                 queue_size: int,
                 replication_slot: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "initial_waiting_seconds", initial_waiting_seconds)
        pulumi.set(__self__, "lsn_commit_behaviour", lsn_commit_behaviour)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "plugin", plugin)
        pulumi.set(__self__, "publication", publication)
        pulumi.set(__self__, "queue_size", queue_size)
        pulumi.set(__self__, "replication_slot", replication_slot)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="initialWaitingSeconds")
    def initial_waiting_seconds(self) -> int:
        return pulumi.get(self, "initial_waiting_seconds")

    @property
    @pulumi.getter(name="lsnCommitBehaviour")
    def lsn_commit_behaviour(self) -> str:
        return pulumi.get(self, "lsn_commit_behaviour")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def plugin(self) -> str:
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def publication(self) -> str:
        return pulumi.get(self, "publication")

    @property
    @pulumi.getter(name="queueSize")
    def queue_size(self) -> int:
        return pulumi.get(self, "queue_size")

    @property
    @pulumi.getter(name="replicationSlot")
    def replication_slot(self) -> str:
        return pulumi.get(self, "replication_slot")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardResult(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class GetSourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardXminResult(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class GetSourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodLogicalReplicationCdcResult(dict):
    def __init__(__self__, *,
                 initial_waiting_seconds: int,
                 lsn_commit_behaviour: str,
                 method: str,
                 plugin: str,
                 publication: str,
                 queue_size: int,
                 replication_slot: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "initial_waiting_seconds", initial_waiting_seconds)
        pulumi.set(__self__, "lsn_commit_behaviour", lsn_commit_behaviour)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "plugin", plugin)
        pulumi.set(__self__, "publication", publication)
        pulumi.set(__self__, "queue_size", queue_size)
        pulumi.set(__self__, "replication_slot", replication_slot)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="initialWaitingSeconds")
    def initial_waiting_seconds(self) -> int:
        return pulumi.get(self, "initial_waiting_seconds")

    @property
    @pulumi.getter(name="lsnCommitBehaviour")
    def lsn_commit_behaviour(self) -> str:
        return pulumi.get(self, "lsn_commit_behaviour")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def plugin(self) -> str:
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def publication(self) -> str:
        return pulumi.get(self, "publication")

    @property
    @pulumi.getter(name="queueSize")
    def queue_size(self) -> int:
        return pulumi.get(self, "queue_size")

    @property
    @pulumi.getter(name="replicationSlot")
    def replication_slot(self) -> str:
        return pulumi.get(self, "replication_slot")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardResult(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class GetSourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardXminResult(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class GetSourceAlloydbConfigurationSslModeResult(dict):
    def __init__(__self__, *,
                 source_alloydb_ssl_modes_allow: 'outputs.GetSourceAlloydbConfigurationSslModeSourceAlloydbSslModesAllowResult',
                 source_alloydb_ssl_modes_disable: 'outputs.GetSourceAlloydbConfigurationSslModeSourceAlloydbSslModesDisableResult',
                 source_alloydb_ssl_modes_prefer: 'outputs.GetSourceAlloydbConfigurationSslModeSourceAlloydbSslModesPreferResult',
                 source_alloydb_ssl_modes_require: 'outputs.GetSourceAlloydbConfigurationSslModeSourceAlloydbSslModesRequireResult',
                 source_alloydb_ssl_modes_verify_ca: 'outputs.GetSourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyCaResult',
                 source_alloydb_ssl_modes_verify_full: 'outputs.GetSourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyFullResult',
                 source_alloydb_update_ssl_modes_allow: 'outputs.GetSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesAllowResult',
                 source_alloydb_update_ssl_modes_disable: 'outputs.GetSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesDisableResult',
                 source_alloydb_update_ssl_modes_prefer: 'outputs.GetSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesPreferResult',
                 source_alloydb_update_ssl_modes_require: 'outputs.GetSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesRequireResult',
                 source_alloydb_update_ssl_modes_verify_ca: 'outputs.GetSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyCaResult',
                 source_alloydb_update_ssl_modes_verify_full: 'outputs.GetSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyFullResult'):
        pulumi.set(__self__, "source_alloydb_ssl_modes_allow", source_alloydb_ssl_modes_allow)
        pulumi.set(__self__, "source_alloydb_ssl_modes_disable", source_alloydb_ssl_modes_disable)
        pulumi.set(__self__, "source_alloydb_ssl_modes_prefer", source_alloydb_ssl_modes_prefer)
        pulumi.set(__self__, "source_alloydb_ssl_modes_require", source_alloydb_ssl_modes_require)
        pulumi.set(__self__, "source_alloydb_ssl_modes_verify_ca", source_alloydb_ssl_modes_verify_ca)
        pulumi.set(__self__, "source_alloydb_ssl_modes_verify_full", source_alloydb_ssl_modes_verify_full)
        pulumi.set(__self__, "source_alloydb_update_ssl_modes_allow", source_alloydb_update_ssl_modes_allow)
        pulumi.set(__self__, "source_alloydb_update_ssl_modes_disable", source_alloydb_update_ssl_modes_disable)
        pulumi.set(__self__, "source_alloydb_update_ssl_modes_prefer", source_alloydb_update_ssl_modes_prefer)
        pulumi.set(__self__, "source_alloydb_update_ssl_modes_require", source_alloydb_update_ssl_modes_require)
        pulumi.set(__self__, "source_alloydb_update_ssl_modes_verify_ca", source_alloydb_update_ssl_modes_verify_ca)
        pulumi.set(__self__, "source_alloydb_update_ssl_modes_verify_full", source_alloydb_update_ssl_modes_verify_full)

    @property
    @pulumi.getter(name="sourceAlloydbSslModesAllow")
    def source_alloydb_ssl_modes_allow(self) -> 'outputs.GetSourceAlloydbConfigurationSslModeSourceAlloydbSslModesAllowResult':
        return pulumi.get(self, "source_alloydb_ssl_modes_allow")

    @property
    @pulumi.getter(name="sourceAlloydbSslModesDisable")
    def source_alloydb_ssl_modes_disable(self) -> 'outputs.GetSourceAlloydbConfigurationSslModeSourceAlloydbSslModesDisableResult':
        return pulumi.get(self, "source_alloydb_ssl_modes_disable")

    @property
    @pulumi.getter(name="sourceAlloydbSslModesPrefer")
    def source_alloydb_ssl_modes_prefer(self) -> 'outputs.GetSourceAlloydbConfigurationSslModeSourceAlloydbSslModesPreferResult':
        return pulumi.get(self, "source_alloydb_ssl_modes_prefer")

    @property
    @pulumi.getter(name="sourceAlloydbSslModesRequire")
    def source_alloydb_ssl_modes_require(self) -> 'outputs.GetSourceAlloydbConfigurationSslModeSourceAlloydbSslModesRequireResult':
        return pulumi.get(self, "source_alloydb_ssl_modes_require")

    @property
    @pulumi.getter(name="sourceAlloydbSslModesVerifyCa")
    def source_alloydb_ssl_modes_verify_ca(self) -> 'outputs.GetSourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyCaResult':
        return pulumi.get(self, "source_alloydb_ssl_modes_verify_ca")

    @property
    @pulumi.getter(name="sourceAlloydbSslModesVerifyFull")
    def source_alloydb_ssl_modes_verify_full(self) -> 'outputs.GetSourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyFullResult':
        return pulumi.get(self, "source_alloydb_ssl_modes_verify_full")

    @property
    @pulumi.getter(name="sourceAlloydbUpdateSslModesAllow")
    def source_alloydb_update_ssl_modes_allow(self) -> 'outputs.GetSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesAllowResult':
        return pulumi.get(self, "source_alloydb_update_ssl_modes_allow")

    @property
    @pulumi.getter(name="sourceAlloydbUpdateSslModesDisable")
    def source_alloydb_update_ssl_modes_disable(self) -> 'outputs.GetSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesDisableResult':
        return pulumi.get(self, "source_alloydb_update_ssl_modes_disable")

    @property
    @pulumi.getter(name="sourceAlloydbUpdateSslModesPrefer")
    def source_alloydb_update_ssl_modes_prefer(self) -> 'outputs.GetSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesPreferResult':
        return pulumi.get(self, "source_alloydb_update_ssl_modes_prefer")

    @property
    @pulumi.getter(name="sourceAlloydbUpdateSslModesRequire")
    def source_alloydb_update_ssl_modes_require(self) -> 'outputs.GetSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesRequireResult':
        return pulumi.get(self, "source_alloydb_update_ssl_modes_require")

    @property
    @pulumi.getter(name="sourceAlloydbUpdateSslModesVerifyCa")
    def source_alloydb_update_ssl_modes_verify_ca(self) -> 'outputs.GetSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyCaResult':
        return pulumi.get(self, "source_alloydb_update_ssl_modes_verify_ca")

    @property
    @pulumi.getter(name="sourceAlloydbUpdateSslModesVerifyFull")
    def source_alloydb_update_ssl_modes_verify_full(self) -> 'outputs.GetSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyFullResult':
        return pulumi.get(self, "source_alloydb_update_ssl_modes_verify_full")


@pulumi.output_type
class GetSourceAlloydbConfigurationSslModeSourceAlloydbSslModesAllowResult(dict):
    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceAlloydbConfigurationSslModeSourceAlloydbSslModesDisableResult(dict):
    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceAlloydbConfigurationSslModeSourceAlloydbSslModesPreferResult(dict):
    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceAlloydbConfigurationSslModeSourceAlloydbSslModesRequireResult(dict):
    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyCaResult(dict):
    def __init__(__self__, *,
                 ca_certificate: str,
                 client_certificate: str,
                 client_key: str,
                 client_key_password: str,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "client_certificate", client_certificate)
        pulumi.set(__self__, "client_key", client_key)
        pulumi.set(__self__, "client_key_password", client_key_password)
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> str:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> str:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> str:
        return pulumi.get(self, "client_key_password")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyFullResult(dict):
    def __init__(__self__, *,
                 ca_certificate: str,
                 client_certificate: str,
                 client_key: str,
                 client_key_password: str,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "client_certificate", client_certificate)
        pulumi.set(__self__, "client_key", client_key)
        pulumi.set(__self__, "client_key_password", client_key_password)
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> str:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> str:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> str:
        return pulumi.get(self, "client_key_password")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesAllowResult(dict):
    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesDisableResult(dict):
    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesPreferResult(dict):
    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesRequireResult(dict):
    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyCaResult(dict):
    def __init__(__self__, *,
                 ca_certificate: str,
                 client_certificate: str,
                 client_key: str,
                 client_key_password: str,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "client_certificate", client_certificate)
        pulumi.set(__self__, "client_key", client_key)
        pulumi.set(__self__, "client_key_password", client_key_password)
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> str:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> str:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> str:
        return pulumi.get(self, "client_key_password")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyFullResult(dict):
    def __init__(__self__, *,
                 ca_certificate: str,
                 client_certificate: str,
                 client_key: str,
                 client_key_password: str,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "client_certificate", client_certificate)
        pulumi.set(__self__, "client_key", client_key)
        pulumi.set(__self__, "client_key_password", client_key_password)
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> str:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> str:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> str:
        return pulumi.get(self, "client_key_password")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceAlloydbConfigurationTunnelMethodResult(dict):
    def __init__(__self__, *,
                 source_alloydb_ssh_tunnel_method_no_tunnel: 'outputs.GetSourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodNoTunnelResult',
                 source_alloydb_ssh_tunnel_method_password_authentication: 'outputs.GetSourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodPasswordAuthenticationResult',
                 source_alloydb_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetSourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodSshKeyAuthenticationResult',
                 source_alloydb_update_ssh_tunnel_method_no_tunnel: 'outputs.GetSourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodNoTunnelResult',
                 source_alloydb_update_ssh_tunnel_method_password_authentication: 'outputs.GetSourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodPasswordAuthenticationResult',
                 source_alloydb_update_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetSourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodSshKeyAuthenticationResult'):
        pulumi.set(__self__, "source_alloydb_ssh_tunnel_method_no_tunnel", source_alloydb_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "source_alloydb_ssh_tunnel_method_password_authentication", source_alloydb_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "source_alloydb_ssh_tunnel_method_ssh_key_authentication", source_alloydb_ssh_tunnel_method_ssh_key_authentication)
        pulumi.set(__self__, "source_alloydb_update_ssh_tunnel_method_no_tunnel", source_alloydb_update_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "source_alloydb_update_ssh_tunnel_method_password_authentication", source_alloydb_update_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "source_alloydb_update_ssh_tunnel_method_ssh_key_authentication", source_alloydb_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="sourceAlloydbSshTunnelMethodNoTunnel")
    def source_alloydb_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetSourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "source_alloydb_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="sourceAlloydbSshTunnelMethodPasswordAuthentication")
    def source_alloydb_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetSourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "source_alloydb_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="sourceAlloydbSshTunnelMethodSshKeyAuthentication")
    def source_alloydb_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetSourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "source_alloydb_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="sourceAlloydbUpdateSshTunnelMethodNoTunnel")
    def source_alloydb_update_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetSourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "source_alloydb_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="sourceAlloydbUpdateSshTunnelMethodPasswordAuthentication")
    def source_alloydb_update_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetSourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "source_alloydb_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="sourceAlloydbUpdateSshTunnelMethodSshKeyAuthentication")
    def source_alloydb_update_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetSourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "source_alloydb_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class GetSourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetSourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetSourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetSourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetSourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetSourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetSourceAmazonAdsConfigurationResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 look_back_window: int,
                 profiles: Sequence[int],
                 refresh_token: str,
                 region: str,
                 report_record_types: Sequence[str],
                 source_type: str,
                 start_date: str,
                 state_filters: Sequence[str]):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "look_back_window", look_back_window)
        pulumi.set(__self__, "profiles", profiles)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "report_record_types", report_record_types)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "state_filters", state_filters)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="lookBackWindow")
    def look_back_window(self) -> int:
        return pulumi.get(self, "look_back_window")

    @property
    @pulumi.getter
    def profiles(self) -> Sequence[int]:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="reportRecordTypes")
    def report_record_types(self) -> Sequence[str]:
        return pulumi.get(self, "report_record_types")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="stateFilters")
    def state_filters(self) -> Sequence[str]:
        return pulumi.get(self, "state_filters")


@pulumi.output_type
class GetSourceAmazonSellerPartnerConfigurationResult(dict):
    def __init__(__self__, *,
                 advanced_stream_options: str,
                 auth_type: str,
                 aws_access_key: str,
                 aws_environment: str,
                 aws_secret_key: str,
                 lwa_app_id: str,
                 lwa_client_secret: str,
                 max_wait_seconds: int,
                 period_in_days: int,
                 refresh_token: str,
                 region: str,
                 replication_end_date: str,
                 replication_start_date: str,
                 report_options: str,
                 role_arn: str,
                 source_type: str):
        pulumi.set(__self__, "advanced_stream_options", advanced_stream_options)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "aws_access_key", aws_access_key)
        pulumi.set(__self__, "aws_environment", aws_environment)
        pulumi.set(__self__, "aws_secret_key", aws_secret_key)
        pulumi.set(__self__, "lwa_app_id", lwa_app_id)
        pulumi.set(__self__, "lwa_client_secret", lwa_client_secret)
        pulumi.set(__self__, "max_wait_seconds", max_wait_seconds)
        pulumi.set(__self__, "period_in_days", period_in_days)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "replication_end_date", replication_end_date)
        pulumi.set(__self__, "replication_start_date", replication_start_date)
        pulumi.set(__self__, "report_options", report_options)
        pulumi.set(__self__, "role_arn", role_arn)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="advancedStreamOptions")
    def advanced_stream_options(self) -> str:
        return pulumi.get(self, "advanced_stream_options")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="awsAccessKey")
    def aws_access_key(self) -> str:
        return pulumi.get(self, "aws_access_key")

    @property
    @pulumi.getter(name="awsEnvironment")
    def aws_environment(self) -> str:
        return pulumi.get(self, "aws_environment")

    @property
    @pulumi.getter(name="awsSecretKey")
    def aws_secret_key(self) -> str:
        return pulumi.get(self, "aws_secret_key")

    @property
    @pulumi.getter(name="lwaAppId")
    def lwa_app_id(self) -> str:
        return pulumi.get(self, "lwa_app_id")

    @property
    @pulumi.getter(name="lwaClientSecret")
    def lwa_client_secret(self) -> str:
        return pulumi.get(self, "lwa_client_secret")

    @property
    @pulumi.getter(name="maxWaitSeconds")
    def max_wait_seconds(self) -> int:
        return pulumi.get(self, "max_wait_seconds")

    @property
    @pulumi.getter(name="periodInDays")
    def period_in_days(self) -> int:
        return pulumi.get(self, "period_in_days")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="replicationEndDate")
    def replication_end_date(self) -> str:
        return pulumi.get(self, "replication_end_date")

    @property
    @pulumi.getter(name="replicationStartDate")
    def replication_start_date(self) -> str:
        return pulumi.get(self, "replication_start_date")

    @property
    @pulumi.getter(name="reportOptions")
    def report_options(self) -> str:
        return pulumi.get(self, "report_options")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceAmazonSqsConfigurationResult(dict):
    def __init__(__self__, *,
                 access_key: str,
                 attributes_to_return: str,
                 delete_messages: bool,
                 max_batch_size: int,
                 max_wait_time: int,
                 queue_url: str,
                 region: str,
                 secret_key: str,
                 source_type: str,
                 visibility_timeout: int):
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "attributes_to_return", attributes_to_return)
        pulumi.set(__self__, "delete_messages", delete_messages)
        pulumi.set(__self__, "max_batch_size", max_batch_size)
        pulumi.set(__self__, "max_wait_time", max_wait_time)
        pulumi.set(__self__, "queue_url", queue_url)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "visibility_timeout", visibility_timeout)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="attributesToReturn")
    def attributes_to_return(self) -> str:
        return pulumi.get(self, "attributes_to_return")

    @property
    @pulumi.getter(name="deleteMessages")
    def delete_messages(self) -> bool:
        return pulumi.get(self, "delete_messages")

    @property
    @pulumi.getter(name="maxBatchSize")
    def max_batch_size(self) -> int:
        return pulumi.get(self, "max_batch_size")

    @property
    @pulumi.getter(name="maxWaitTime")
    def max_wait_time(self) -> int:
        return pulumi.get(self, "max_wait_time")

    @property
    @pulumi.getter(name="queueUrl")
    def queue_url(self) -> str:
        return pulumi.get(self, "queue_url")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="visibilityTimeout")
    def visibility_timeout(self) -> int:
        return pulumi.get(self, "visibility_timeout")


@pulumi.output_type
class GetSourceAmplitudeConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 data_region: str,
                 request_time_range: int,
                 secret_key: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "data_region", data_region)
        pulumi.set(__self__, "request_time_range", request_time_range)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="dataRegion")
    def data_region(self) -> str:
        return pulumi.get(self, "data_region")

    @property
    @pulumi.getter(name="requestTimeRange")
    def request_time_range(self) -> int:
        return pulumi.get(self, "request_time_range")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceApifyDatasetConfigurationResult(dict):
    def __init__(__self__, *,
                 clean: bool,
                 dataset_id: str,
                 source_type: str):
        pulumi.set(__self__, "clean", clean)
        pulumi.set(__self__, "dataset_id", dataset_id)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def clean(self) -> bool:
        return pulumi.get(self, "clean")

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> str:
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceAppfollowConfigurationResult(dict):
    def __init__(__self__, *,
                 api_secret: str,
                 source_type: str):
        pulumi.set(__self__, "api_secret", api_secret)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiSecret")
    def api_secret(self) -> str:
        return pulumi.get(self, "api_secret")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceAsanaConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourceAsanaConfigurationCredentialsResult',
                 source_type: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceAsanaConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceAsanaConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_asana_authentication_mechanism_authenticate_via_asana_oauth: 'outputs.GetSourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauthResult',
                 source_asana_authentication_mechanism_authenticate_with_personal_access_token: 'outputs.GetSourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessTokenResult',
                 source_asana_update_authentication_mechanism_authenticate_via_asana_oauth: 'outputs.GetSourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauthResult',
                 source_asana_update_authentication_mechanism_authenticate_with_personal_access_token: 'outputs.GetSourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessTokenResult'):
        pulumi.set(__self__, "source_asana_authentication_mechanism_authenticate_via_asana_oauth", source_asana_authentication_mechanism_authenticate_via_asana_oauth)
        pulumi.set(__self__, "source_asana_authentication_mechanism_authenticate_with_personal_access_token", source_asana_authentication_mechanism_authenticate_with_personal_access_token)
        pulumi.set(__self__, "source_asana_update_authentication_mechanism_authenticate_via_asana_oauth", source_asana_update_authentication_mechanism_authenticate_via_asana_oauth)
        pulumi.set(__self__, "source_asana_update_authentication_mechanism_authenticate_with_personal_access_token", source_asana_update_authentication_mechanism_authenticate_with_personal_access_token)

    @property
    @pulumi.getter(name="sourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth")
    def source_asana_authentication_mechanism_authenticate_via_asana_oauth(self) -> 'outputs.GetSourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauthResult':
        return pulumi.get(self, "source_asana_authentication_mechanism_authenticate_via_asana_oauth")

    @property
    @pulumi.getter(name="sourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken")
    def source_asana_authentication_mechanism_authenticate_with_personal_access_token(self) -> 'outputs.GetSourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessTokenResult':
        return pulumi.get(self, "source_asana_authentication_mechanism_authenticate_with_personal_access_token")

    @property
    @pulumi.getter(name="sourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauth")
    def source_asana_update_authentication_mechanism_authenticate_via_asana_oauth(self) -> 'outputs.GetSourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauthResult':
        return pulumi.get(self, "source_asana_update_authentication_mechanism_authenticate_via_asana_oauth")

    @property
    @pulumi.getter(name="sourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken")
    def source_asana_update_authentication_mechanism_authenticate_with_personal_access_token(self) -> 'outputs.GetSourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessTokenResult':
        return pulumi.get(self, "source_asana_update_authentication_mechanism_authenticate_with_personal_access_token")


@pulumi.output_type
class GetSourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauthResult(dict):
    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 option_title: str,
                 refresh_token: str):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "option_title", option_title)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> str:
        return pulumi.get(self, "option_title")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessTokenResult(dict):
    def __init__(__self__, *,
                 option_title: str,
                 personal_access_token: str):
        pulumi.set(__self__, "option_title", option_title)
        pulumi.set(__self__, "personal_access_token", personal_access_token)

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> str:
        return pulumi.get(self, "option_title")

    @property
    @pulumi.getter(name="personalAccessToken")
    def personal_access_token(self) -> str:
        return pulumi.get(self, "personal_access_token")


@pulumi.output_type
class GetSourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauthResult(dict):
    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 option_title: str,
                 refresh_token: str):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "option_title", option_title)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> str:
        return pulumi.get(self, "option_title")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessTokenResult(dict):
    def __init__(__self__, *,
                 option_title: str,
                 personal_access_token: str):
        pulumi.set(__self__, "option_title", option_title)
        pulumi.set(__self__, "personal_access_token", personal_access_token)

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> str:
        return pulumi.get(self, "option_title")

    @property
    @pulumi.getter(name="personalAccessToken")
    def personal_access_token(self) -> str:
        return pulumi.get(self, "personal_access_token")


@pulumi.output_type
class GetSourceAuth0ConfigurationResult(dict):
    def __init__(__self__, *,
                 base_url: str,
                 credentials: 'outputs.GetSourceAuth0ConfigurationCredentialsResult',
                 source_type: str):
        pulumi.set(__self__, "base_url", base_url)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> str:
        return pulumi.get(self, "base_url")

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceAuth0ConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceAuth0ConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_auth0_authentication_method_o_auth2_access_token: 'outputs.GetSourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2AccessTokenResult',
                 source_auth0_authentication_method_o_auth2_confidential_application: 'outputs.GetSourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2ConfidentialApplicationResult',
                 source_auth0_update_authentication_method_o_auth2_access_token: 'outputs.GetSourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2AccessTokenResult',
                 source_auth0_update_authentication_method_o_auth2_confidential_application: 'outputs.GetSourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplicationResult'):
        pulumi.set(__self__, "source_auth0_authentication_method_o_auth2_access_token", source_auth0_authentication_method_o_auth2_access_token)
        pulumi.set(__self__, "source_auth0_authentication_method_o_auth2_confidential_application", source_auth0_authentication_method_o_auth2_confidential_application)
        pulumi.set(__self__, "source_auth0_update_authentication_method_o_auth2_access_token", source_auth0_update_authentication_method_o_auth2_access_token)
        pulumi.set(__self__, "source_auth0_update_authentication_method_o_auth2_confidential_application", source_auth0_update_authentication_method_o_auth2_confidential_application)

    @property
    @pulumi.getter(name="sourceAuth0AuthenticationMethodOAuth2AccessToken")
    def source_auth0_authentication_method_o_auth2_access_token(self) -> 'outputs.GetSourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2AccessTokenResult':
        return pulumi.get(self, "source_auth0_authentication_method_o_auth2_access_token")

    @property
    @pulumi.getter(name="sourceAuth0AuthenticationMethodOAuth2ConfidentialApplication")
    def source_auth0_authentication_method_o_auth2_confidential_application(self) -> 'outputs.GetSourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2ConfidentialApplicationResult':
        return pulumi.get(self, "source_auth0_authentication_method_o_auth2_confidential_application")

    @property
    @pulumi.getter(name="sourceAuth0UpdateAuthenticationMethodOAuth2AccessToken")
    def source_auth0_update_authentication_method_o_auth2_access_token(self) -> 'outputs.GetSourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2AccessTokenResult':
        return pulumi.get(self, "source_auth0_update_authentication_method_o_auth2_access_token")

    @property
    @pulumi.getter(name="sourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication")
    def source_auth0_update_authentication_method_o_auth2_confidential_application(self) -> 'outputs.GetSourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplicationResult':
        return pulumi.get(self, "source_auth0_update_authentication_method_o_auth2_confidential_application")


@pulumi.output_type
class GetSourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2AccessTokenResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class GetSourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2ConfidentialApplicationResult(dict):
    def __init__(__self__, *,
                 audience: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str):
        pulumi.set(__self__, "audience", audience)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter
    def audience(self) -> str:
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class GetSourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2AccessTokenResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class GetSourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplicationResult(dict):
    def __init__(__self__, *,
                 audience: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str):
        pulumi.set(__self__, "audience", audience)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter
    def audience(self) -> str:
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class GetSourceAwsCloudtrailConfigurationResult(dict):
    def __init__(__self__, *,
                 aws_key_id: str,
                 aws_region_name: str,
                 aws_secret_key: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "aws_key_id", aws_key_id)
        pulumi.set(__self__, "aws_region_name", aws_region_name)
        pulumi.set(__self__, "aws_secret_key", aws_secret_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="awsKeyId")
    def aws_key_id(self) -> str:
        return pulumi.get(self, "aws_key_id")

    @property
    @pulumi.getter(name="awsRegionName")
    def aws_region_name(self) -> str:
        return pulumi.get(self, "aws_region_name")

    @property
    @pulumi.getter(name="awsSecretKey")
    def aws_secret_key(self) -> str:
        return pulumi.get(self, "aws_secret_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceAzureBlobStorageConfigurationResult(dict):
    def __init__(__self__, *,
                 azure_blob_storage_account_key: str,
                 azure_blob_storage_account_name: str,
                 azure_blob_storage_blobs_prefix: str,
                 azure_blob_storage_container_name: str,
                 azure_blob_storage_endpoint: str,
                 azure_blob_storage_schema_inference_limit: int,
                 format: 'outputs.GetSourceAzureBlobStorageConfigurationFormatResult',
                 source_type: str):
        pulumi.set(__self__, "azure_blob_storage_account_key", azure_blob_storage_account_key)
        pulumi.set(__self__, "azure_blob_storage_account_name", azure_blob_storage_account_name)
        pulumi.set(__self__, "azure_blob_storage_blobs_prefix", azure_blob_storage_blobs_prefix)
        pulumi.set(__self__, "azure_blob_storage_container_name", azure_blob_storage_container_name)
        pulumi.set(__self__, "azure_blob_storage_endpoint", azure_blob_storage_endpoint)
        pulumi.set(__self__, "azure_blob_storage_schema_inference_limit", azure_blob_storage_schema_inference_limit)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="azureBlobStorageAccountKey")
    def azure_blob_storage_account_key(self) -> str:
        return pulumi.get(self, "azure_blob_storage_account_key")

    @property
    @pulumi.getter(name="azureBlobStorageAccountName")
    def azure_blob_storage_account_name(self) -> str:
        return pulumi.get(self, "azure_blob_storage_account_name")

    @property
    @pulumi.getter(name="azureBlobStorageBlobsPrefix")
    def azure_blob_storage_blobs_prefix(self) -> str:
        return pulumi.get(self, "azure_blob_storage_blobs_prefix")

    @property
    @pulumi.getter(name="azureBlobStorageContainerName")
    def azure_blob_storage_container_name(self) -> str:
        return pulumi.get(self, "azure_blob_storage_container_name")

    @property
    @pulumi.getter(name="azureBlobStorageEndpoint")
    def azure_blob_storage_endpoint(self) -> str:
        return pulumi.get(self, "azure_blob_storage_endpoint")

    @property
    @pulumi.getter(name="azureBlobStorageSchemaInferenceLimit")
    def azure_blob_storage_schema_inference_limit(self) -> int:
        return pulumi.get(self, "azure_blob_storage_schema_inference_limit")

    @property
    @pulumi.getter
    def format(self) -> 'outputs.GetSourceAzureBlobStorageConfigurationFormatResult':
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceAzureBlobStorageConfigurationFormatResult(dict):
    def __init__(__self__, *,
                 source_azure_blob_storage_input_format_json_lines_newline_delimited_json: 'outputs.GetSourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJsonResult',
                 source_azure_blob_storage_update_input_format_json_lines_newline_delimited_json: 'outputs.GetSourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJsonResult'):
        pulumi.set(__self__, "source_azure_blob_storage_input_format_json_lines_newline_delimited_json", source_azure_blob_storage_input_format_json_lines_newline_delimited_json)
        pulumi.set(__self__, "source_azure_blob_storage_update_input_format_json_lines_newline_delimited_json", source_azure_blob_storage_update_input_format_json_lines_newline_delimited_json)

    @property
    @pulumi.getter(name="sourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJson")
    def source_azure_blob_storage_input_format_json_lines_newline_delimited_json(self) -> 'outputs.GetSourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJsonResult':
        return pulumi.get(self, "source_azure_blob_storage_input_format_json_lines_newline_delimited_json")

    @property
    @pulumi.getter(name="sourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJson")
    def source_azure_blob_storage_update_input_format_json_lines_newline_delimited_json(self) -> 'outputs.GetSourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJsonResult':
        return pulumi.get(self, "source_azure_blob_storage_update_input_format_json_lines_newline_delimited_json")


@pulumi.output_type
class GetSourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJsonResult(dict):
    def __init__(__self__, *,
                 format_type: str):
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class GetSourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJsonResult(dict):
    def __init__(__self__, *,
                 format_type: str):
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")


@pulumi.output_type
class GetSourceAzureTableConfigurationResult(dict):
    def __init__(__self__, *,
                 source_type: str,
                 storage_access_key: str,
                 storage_account_name: str,
                 storage_endpoint_suffix: str):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "storage_access_key", storage_access_key)
        pulumi.set(__self__, "storage_account_name", storage_account_name)
        pulumi.set(__self__, "storage_endpoint_suffix", storage_endpoint_suffix)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="storageAccessKey")
    def storage_access_key(self) -> str:
        return pulumi.get(self, "storage_access_key")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> str:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="storageEndpointSuffix")
    def storage_endpoint_suffix(self) -> str:
        return pulumi.get(self, "storage_endpoint_suffix")


@pulumi.output_type
class GetSourceBambooHrConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 custom_reports_fields: str,
                 custom_reports_include_default_fields: bool,
                 source_type: str,
                 subdomain: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "custom_reports_fields", custom_reports_fields)
        pulumi.set(__self__, "custom_reports_include_default_fields", custom_reports_include_default_fields)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "subdomain", subdomain)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="customReportsFields")
    def custom_reports_fields(self) -> str:
        return pulumi.get(self, "custom_reports_fields")

    @property
    @pulumi.getter(name="customReportsIncludeDefaultFields")
    def custom_reports_include_default_fields(self) -> bool:
        return pulumi.get(self, "custom_reports_include_default_fields")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def subdomain(self) -> str:
        return pulumi.get(self, "subdomain")


@pulumi.output_type
class GetSourceBigcommerceConfigurationResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 source_type: str,
                 start_date: str,
                 store_hash: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "store_hash", store_hash)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="storeHash")
    def store_hash(self) -> str:
        return pulumi.get(self, "store_hash")


@pulumi.output_type
class GetSourceBigqueryConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials_json: str,
                 dataset_id: str,
                 project_id: str,
                 source_type: str):
        pulumi.set(__self__, "credentials_json", credentials_json)
        pulumi.set(__self__, "dataset_id", dataset_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> str:
        return pulumi.get(self, "credentials_json")

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> str:
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceBingAdsConfigurationResult(dict):
    def __init__(__self__, *,
                 auth_method: str,
                 client_id: str,
                 client_secret: str,
                 developer_token: str,
                 lookback_window: int,
                 refresh_token: str,
                 reports_start_date: str,
                 source_type: str,
                 tenant_id: str):
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "developer_token", developer_token)
        pulumi.set(__self__, "lookback_window", lookback_window)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "reports_start_date", reports_start_date)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="developerToken")
    def developer_token(self) -> str:
        return pulumi.get(self, "developer_token")

    @property
    @pulumi.getter(name="lookbackWindow")
    def lookback_window(self) -> int:
        return pulumi.get(self, "lookback_window")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="reportsStartDate")
    def reports_start_date(self) -> str:
        return pulumi.get(self, "reports_start_date")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class GetSourceBraintreeConfigurationResult(dict):
    def __init__(__self__, *,
                 environment: str,
                 merchant_id: str,
                 private_key: str,
                 public_key: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "merchant_id", merchant_id)
        pulumi.set(__self__, "private_key", private_key)
        pulumi.set(__self__, "public_key", public_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def environment(self) -> str:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="merchantId")
    def merchant_id(self) -> str:
        return pulumi.get(self, "merchant_id")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> str:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> str:
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceBrazeConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 source_type: str,
                 start_date: str,
                 url: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetSourceChargebeeConfigurationResult(dict):
    def __init__(__self__, *,
                 product_catalog: str,
                 site: str,
                 site_api_key: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "product_catalog", product_catalog)
        pulumi.set(__self__, "site", site)
        pulumi.set(__self__, "site_api_key", site_api_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="productCatalog")
    def product_catalog(self) -> str:
        return pulumi.get(self, "product_catalog")

    @property
    @pulumi.getter
    def site(self) -> str:
        return pulumi.get(self, "site")

    @property
    @pulumi.getter(name="siteApiKey")
    def site_api_key(self) -> str:
        return pulumi.get(self, "site_api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceChartmogulConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 interval: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter
    def interval(self) -> str:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceClickhouseConfigurationResult(dict):
    def __init__(__self__, *,
                 database: str,
                 host: str,
                 password: str,
                 port: int,
                 source_type: str,
                 tunnel_method: 'outputs.GetSourceClickhouseConfigurationTunnelMethodResult',
                 username: str):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> 'outputs.GetSourceClickhouseConfigurationTunnelMethodResult':
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSourceClickhouseConfigurationTunnelMethodResult(dict):
    def __init__(__self__, *,
                 source_clickhouse_ssh_tunnel_method_no_tunnel: 'outputs.GetSourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodNoTunnelResult',
                 source_clickhouse_ssh_tunnel_method_password_authentication: 'outputs.GetSourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodPasswordAuthenticationResult',
                 source_clickhouse_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetSourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodSshKeyAuthenticationResult',
                 source_clickhouse_update_ssh_tunnel_method_no_tunnel: 'outputs.GetSourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodNoTunnelResult',
                 source_clickhouse_update_ssh_tunnel_method_password_authentication: 'outputs.GetSourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodPasswordAuthenticationResult',
                 source_clickhouse_update_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetSourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodSshKeyAuthenticationResult'):
        pulumi.set(__self__, "source_clickhouse_ssh_tunnel_method_no_tunnel", source_clickhouse_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "source_clickhouse_ssh_tunnel_method_password_authentication", source_clickhouse_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "source_clickhouse_ssh_tunnel_method_ssh_key_authentication", source_clickhouse_ssh_tunnel_method_ssh_key_authentication)
        pulumi.set(__self__, "source_clickhouse_update_ssh_tunnel_method_no_tunnel", source_clickhouse_update_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "source_clickhouse_update_ssh_tunnel_method_password_authentication", source_clickhouse_update_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "source_clickhouse_update_ssh_tunnel_method_ssh_key_authentication", source_clickhouse_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="sourceClickhouseSshTunnelMethodNoTunnel")
    def source_clickhouse_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetSourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "source_clickhouse_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="sourceClickhouseSshTunnelMethodPasswordAuthentication")
    def source_clickhouse_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetSourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "source_clickhouse_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="sourceClickhouseSshTunnelMethodSshKeyAuthentication")
    def source_clickhouse_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetSourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "source_clickhouse_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="sourceClickhouseUpdateSshTunnelMethodNoTunnel")
    def source_clickhouse_update_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetSourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "source_clickhouse_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="sourceClickhouseUpdateSshTunnelMethodPasswordAuthentication")
    def source_clickhouse_update_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetSourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "source_clickhouse_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="sourceClickhouseUpdateSshTunnelMethodSshKeyAuthentication")
    def source_clickhouse_update_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetSourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "source_clickhouse_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class GetSourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetSourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetSourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetSourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetSourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetSourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetSourceClickupApiConfigurationResult(dict):
    def __init__(__self__, *,
                 api_token: str,
                 folder_id: str,
                 include_closed_tasks: bool,
                 list_id: str,
                 source_type: str,
                 space_id: str,
                 team_id: str):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "folder_id", folder_id)
        pulumi.set(__self__, "include_closed_tasks", include_closed_tasks)
        pulumi.set(__self__, "list_id", list_id)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "team_id", team_id)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> str:
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter(name="includeClosedTasks")
    def include_closed_tasks(self) -> bool:
        return pulumi.get(self, "include_closed_tasks")

    @property
    @pulumi.getter(name="listId")
    def list_id(self) -> str:
        return pulumi.get(self, "list_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> str:
        return pulumi.get(self, "team_id")


@pulumi.output_type
class GetSourceClockifyConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 api_url: str,
                 source_type: str,
                 workspace_id: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "api_url", api_url)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> str:
        return pulumi.get(self, "api_url")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetSourceCloseComConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceCodaConfigurationResult(dict):
    def __init__(__self__, *,
                 auth_token: str,
                 source_type: str):
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> str:
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceCoinApiConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 end_date: str,
                 environment: str,
                 limit: int,
                 period: str,
                 source_type: str,
                 start_date: str,
                 symbol_id: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "symbol_id", symbol_id)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter
    def environment(self) -> str:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def limit(self) -> int:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def period(self) -> str:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="symbolId")
    def symbol_id(self) -> str:
        return pulumi.get(self, "symbol_id")


@pulumi.output_type
class GetSourceCoinmarketcapConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 data_type: str,
                 source_type: str,
                 symbols: Sequence[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "symbols", symbols)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> str:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def symbols(self) -> Sequence[str]:
        return pulumi.get(self, "symbols")


@pulumi.output_type
class GetSourceConfigcatConfigurationResult(dict):
    def __init__(__self__, *,
                 password: str,
                 source_type: str,
                 username: str):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSourceConfluenceConfigurationResult(dict):
    def __init__(__self__, *,
                 api_token: str,
                 domain_name: str,
                 email: str,
                 source_type: str):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> str:
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceConvexConfigurationResult(dict):
    def __init__(__self__, *,
                 access_key: str,
                 deployment_url: str,
                 source_type: str):
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "deployment_url", deployment_url)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="deploymentUrl")
    def deployment_url(self) -> str:
        return pulumi.get(self, "deployment_url")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceDatadogConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 application_key: str,
                 end_date: str,
                 max_records_per_request: int,
                 queries: Sequence['outputs.GetSourceDatadogConfigurationQueryResult'],
                 query: str,
                 site: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "application_key", application_key)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "max_records_per_request", max_records_per_request)
        pulumi.set(__self__, "queries", queries)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "site", site)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="applicationKey")
    def application_key(self) -> str:
        return pulumi.get(self, "application_key")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="maxRecordsPerRequest")
    def max_records_per_request(self) -> int:
        return pulumi.get(self, "max_records_per_request")

    @property
    @pulumi.getter
    def queries(self) -> Sequence['outputs.GetSourceDatadogConfigurationQueryResult']:
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def site(self) -> str:
        return pulumi.get(self, "site")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceDatadogConfigurationQueryResult(dict):
    def __init__(__self__, *,
                 data_source: str,
                 name: str,
                 query: str):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")


@pulumi.output_type
class GetSourceDatascopeConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceDelightedConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 since: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "since", since)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter
    def since(self) -> str:
        return pulumi.get(self, "since")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceDixaConfigurationResult(dict):
    def __init__(__self__, *,
                 api_token: str,
                 batch_size: int,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "batch_size", batch_size)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> int:
        return pulumi.get(self, "batch_size")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceDockerhubConfigurationResult(dict):
    def __init__(__self__, *,
                 docker_username: str,
                 source_type: str):
        pulumi.set(__self__, "docker_username", docker_username)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="dockerUsername")
    def docker_username(self) -> str:
        return pulumi.get(self, "docker_username")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceDremioConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 base_url: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "base_url", base_url)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> str:
        return pulumi.get(self, "base_url")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceDynamodbConfigurationResult(dict):
    def __init__(__self__, *,
                 access_key_id: str,
                 endpoint: str,
                 region: str,
                 reserved_attribute_names: str,
                 secret_access_key: str,
                 source_type: str):
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "reserved_attribute_names", reserved_attribute_names)
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> str:
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="reservedAttributeNames")
    def reserved_attribute_names(self) -> str:
        return pulumi.get(self, "reserved_attribute_names")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> str:
        return pulumi.get(self, "secret_access_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceE2eTestCloudConfigurationResult(dict):
    def __init__(__self__, *,
                 max_messages: int,
                 message_interval_ms: int,
                 mock_catalog: 'outputs.GetSourceE2eTestCloudConfigurationMockCatalogResult',
                 seed: int,
                 source_type: str,
                 type: str):
        pulumi.set(__self__, "max_messages", max_messages)
        pulumi.set(__self__, "message_interval_ms", message_interval_ms)
        pulumi.set(__self__, "mock_catalog", mock_catalog)
        pulumi.set(__self__, "seed", seed)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="maxMessages")
    def max_messages(self) -> int:
        return pulumi.get(self, "max_messages")

    @property
    @pulumi.getter(name="messageIntervalMs")
    def message_interval_ms(self) -> int:
        return pulumi.get(self, "message_interval_ms")

    @property
    @pulumi.getter(name="mockCatalog")
    def mock_catalog(self) -> 'outputs.GetSourceE2eTestCloudConfigurationMockCatalogResult':
        return pulumi.get(self, "mock_catalog")

    @property
    @pulumi.getter
    def seed(self) -> int:
        return pulumi.get(self, "seed")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSourceE2eTestCloudConfigurationMockCatalogResult(dict):
    def __init__(__self__, *,
                 source_e2e_test_cloud_mock_catalog_multi_schema: 'outputs.GetSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogMultiSchemaResult',
                 source_e2e_test_cloud_mock_catalog_single_schema: 'outputs.GetSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogSingleSchemaResult',
                 source_e2e_test_cloud_update_mock_catalog_multi_schema: 'outputs.GetSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogMultiSchemaResult',
                 source_e2e_test_cloud_update_mock_catalog_single_schema: 'outputs.GetSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogSingleSchemaResult'):
        pulumi.set(__self__, "source_e2e_test_cloud_mock_catalog_multi_schema", source_e2e_test_cloud_mock_catalog_multi_schema)
        pulumi.set(__self__, "source_e2e_test_cloud_mock_catalog_single_schema", source_e2e_test_cloud_mock_catalog_single_schema)
        pulumi.set(__self__, "source_e2e_test_cloud_update_mock_catalog_multi_schema", source_e2e_test_cloud_update_mock_catalog_multi_schema)
        pulumi.set(__self__, "source_e2e_test_cloud_update_mock_catalog_single_schema", source_e2e_test_cloud_update_mock_catalog_single_schema)

    @property
    @pulumi.getter(name="sourceE2eTestCloudMockCatalogMultiSchema")
    def source_e2e_test_cloud_mock_catalog_multi_schema(self) -> 'outputs.GetSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogMultiSchemaResult':
        return pulumi.get(self, "source_e2e_test_cloud_mock_catalog_multi_schema")

    @property
    @pulumi.getter(name="sourceE2eTestCloudMockCatalogSingleSchema")
    def source_e2e_test_cloud_mock_catalog_single_schema(self) -> 'outputs.GetSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogSingleSchemaResult':
        return pulumi.get(self, "source_e2e_test_cloud_mock_catalog_single_schema")

    @property
    @pulumi.getter(name="sourceE2eTestCloudUpdateMockCatalogMultiSchema")
    def source_e2e_test_cloud_update_mock_catalog_multi_schema(self) -> 'outputs.GetSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogMultiSchemaResult':
        return pulumi.get(self, "source_e2e_test_cloud_update_mock_catalog_multi_schema")

    @property
    @pulumi.getter(name="sourceE2eTestCloudUpdateMockCatalogSingleSchema")
    def source_e2e_test_cloud_update_mock_catalog_single_schema(self) -> 'outputs.GetSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogSingleSchemaResult':
        return pulumi.get(self, "source_e2e_test_cloud_update_mock_catalog_single_schema")


@pulumi.output_type
class GetSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogMultiSchemaResult(dict):
    def __init__(__self__, *,
                 stream_schemas: str,
                 type: str):
        pulumi.set(__self__, "stream_schemas", stream_schemas)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="streamSchemas")
    def stream_schemas(self) -> str:
        return pulumi.get(self, "stream_schemas")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogSingleSchemaResult(dict):
    def __init__(__self__, *,
                 stream_duplication: int,
                 stream_name: str,
                 stream_schema: str,
                 type: str):
        pulumi.set(__self__, "stream_duplication", stream_duplication)
        pulumi.set(__self__, "stream_name", stream_name)
        pulumi.set(__self__, "stream_schema", stream_schema)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="streamDuplication")
    def stream_duplication(self) -> int:
        return pulumi.get(self, "stream_duplication")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        return pulumi.get(self, "stream_name")

    @property
    @pulumi.getter(name="streamSchema")
    def stream_schema(self) -> str:
        return pulumi.get(self, "stream_schema")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogMultiSchemaResult(dict):
    def __init__(__self__, *,
                 stream_schemas: str,
                 type: str):
        pulumi.set(__self__, "stream_schemas", stream_schemas)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="streamSchemas")
    def stream_schemas(self) -> str:
        return pulumi.get(self, "stream_schemas")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogSingleSchemaResult(dict):
    def __init__(__self__, *,
                 stream_duplication: int,
                 stream_name: str,
                 stream_schema: str,
                 type: str):
        pulumi.set(__self__, "stream_duplication", stream_duplication)
        pulumi.set(__self__, "stream_name", stream_name)
        pulumi.set(__self__, "stream_schema", stream_schema)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="streamDuplication")
    def stream_duplication(self) -> int:
        return pulumi.get(self, "stream_duplication")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        return pulumi.get(self, "stream_name")

    @property
    @pulumi.getter(name="streamSchema")
    def stream_schema(self) -> str:
        return pulumi.get(self, "stream_schema")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSourceEmailoctopusConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceExchangeRatesConfigurationResult(dict):
    def __init__(__self__, *,
                 access_key: str,
                 base: str,
                 ignore_weekends: bool,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "base", base)
        pulumi.set(__self__, "ignore_weekends", ignore_weekends)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter
    def base(self) -> str:
        return pulumi.get(self, "base")

    @property
    @pulumi.getter(name="ignoreWeekends")
    def ignore_weekends(self) -> bool:
        return pulumi.get(self, "ignore_weekends")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceFacebookMarketingConfigurationResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 account_id: str,
                 action_breakdowns_allow_empty: bool,
                 client_id: str,
                 client_secret: str,
                 custom_insights: Sequence['outputs.GetSourceFacebookMarketingConfigurationCustomInsightResult'],
                 end_date: str,
                 fetch_thumbnail_images: bool,
                 include_deleted: bool,
                 insights_lookback_window: int,
                 max_batch_size: int,
                 page_size: int,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "action_breakdowns_allow_empty", action_breakdowns_allow_empty)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "custom_insights", custom_insights)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "fetch_thumbnail_images", fetch_thumbnail_images)
        pulumi.set(__self__, "include_deleted", include_deleted)
        pulumi.set(__self__, "insights_lookback_window", insights_lookback_window)
        pulumi.set(__self__, "max_batch_size", max_batch_size)
        pulumi.set(__self__, "page_size", page_size)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="actionBreakdownsAllowEmpty")
    def action_breakdowns_allow_empty(self) -> bool:
        return pulumi.get(self, "action_breakdowns_allow_empty")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="customInsights")
    def custom_insights(self) -> Sequence['outputs.GetSourceFacebookMarketingConfigurationCustomInsightResult']:
        return pulumi.get(self, "custom_insights")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="fetchThumbnailImages")
    def fetch_thumbnail_images(self) -> bool:
        return pulumi.get(self, "fetch_thumbnail_images")

    @property
    @pulumi.getter(name="includeDeleted")
    def include_deleted(self) -> bool:
        return pulumi.get(self, "include_deleted")

    @property
    @pulumi.getter(name="insightsLookbackWindow")
    def insights_lookback_window(self) -> int:
        return pulumi.get(self, "insights_lookback_window")

    @property
    @pulumi.getter(name="maxBatchSize")
    def max_batch_size(self) -> int:
        return pulumi.get(self, "max_batch_size")

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> int:
        return pulumi.get(self, "page_size")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceFacebookMarketingConfigurationCustomInsightResult(dict):
    def __init__(__self__, *,
                 action_breakdowns: Sequence[str],
                 action_report_time: str,
                 breakdowns: Sequence[str],
                 end_date: str,
                 fields: Sequence[str],
                 insights_lookback_window: int,
                 level: str,
                 name: str,
                 start_date: str,
                 time_increment: int):
        pulumi.set(__self__, "action_breakdowns", action_breakdowns)
        pulumi.set(__self__, "action_report_time", action_report_time)
        pulumi.set(__self__, "breakdowns", breakdowns)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "fields", fields)
        pulumi.set(__self__, "insights_lookback_window", insights_lookback_window)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "time_increment", time_increment)

    @property
    @pulumi.getter(name="actionBreakdowns")
    def action_breakdowns(self) -> Sequence[str]:
        return pulumi.get(self, "action_breakdowns")

    @property
    @pulumi.getter(name="actionReportTime")
    def action_report_time(self) -> str:
        return pulumi.get(self, "action_report_time")

    @property
    @pulumi.getter
    def breakdowns(self) -> Sequence[str]:
        return pulumi.get(self, "breakdowns")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter
    def fields(self) -> Sequence[str]:
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter(name="insightsLookbackWindow")
    def insights_lookback_window(self) -> int:
        return pulumi.get(self, "insights_lookback_window")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="timeIncrement")
    def time_increment(self) -> int:
        return pulumi.get(self, "time_increment")


@pulumi.output_type
class GetSourceFacebookPagesConfigurationResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 page_id: str,
                 source_type: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "page_id", page_id)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="pageId")
    def page_id(self) -> str:
        return pulumi.get(self, "page_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceFakerConfigurationResult(dict):
    def __init__(__self__, *,
                 always_updated: bool,
                 count: int,
                 parallelism: int,
                 records_per_slice: int,
                 seed: int,
                 source_type: str):
        pulumi.set(__self__, "always_updated", always_updated)
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "parallelism", parallelism)
        pulumi.set(__self__, "records_per_slice", records_per_slice)
        pulumi.set(__self__, "seed", seed)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="alwaysUpdated")
    def always_updated(self) -> bool:
        return pulumi.get(self, "always_updated")

    @property
    @pulumi.getter
    def count(self) -> int:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def parallelism(self) -> int:
        return pulumi.get(self, "parallelism")

    @property
    @pulumi.getter(name="recordsPerSlice")
    def records_per_slice(self) -> int:
        return pulumi.get(self, "records_per_slice")

    @property
    @pulumi.getter
    def seed(self) -> int:
        return pulumi.get(self, "seed")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceFaunaConfigurationResult(dict):
    def __init__(__self__, *,
                 collection: 'outputs.GetSourceFaunaConfigurationCollectionResult',
                 domain: str,
                 port: int,
                 scheme: str,
                 secret: str,
                 source_type: str):
        pulumi.set(__self__, "collection", collection)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def collection(self) -> 'outputs.GetSourceFaunaConfigurationCollectionResult':
        return pulumi.get(self, "collection")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def scheme(self) -> str:
        return pulumi.get(self, "scheme")

    @property
    @pulumi.getter
    def secret(self) -> str:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceFaunaConfigurationCollectionResult(dict):
    def __init__(__self__, *,
                 deletions: 'outputs.GetSourceFaunaConfigurationCollectionDeletionsResult',
                 page_size: int):
        pulumi.set(__self__, "deletions", deletions)
        pulumi.set(__self__, "page_size", page_size)

    @property
    @pulumi.getter
    def deletions(self) -> 'outputs.GetSourceFaunaConfigurationCollectionDeletionsResult':
        return pulumi.get(self, "deletions")

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> int:
        return pulumi.get(self, "page_size")


@pulumi.output_type
class GetSourceFaunaConfigurationCollectionDeletionsResult(dict):
    def __init__(__self__, *,
                 source_fauna_collection_deletion_mode_disabled: 'outputs.GetSourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeDisabledResult',
                 source_fauna_collection_deletion_mode_enabled: 'outputs.GetSourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeEnabledResult',
                 source_fauna_update_collection_deletion_mode_disabled: 'outputs.GetSourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeDisabledResult',
                 source_fauna_update_collection_deletion_mode_enabled: 'outputs.GetSourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeEnabledResult'):
        pulumi.set(__self__, "source_fauna_collection_deletion_mode_disabled", source_fauna_collection_deletion_mode_disabled)
        pulumi.set(__self__, "source_fauna_collection_deletion_mode_enabled", source_fauna_collection_deletion_mode_enabled)
        pulumi.set(__self__, "source_fauna_update_collection_deletion_mode_disabled", source_fauna_update_collection_deletion_mode_disabled)
        pulumi.set(__self__, "source_fauna_update_collection_deletion_mode_enabled", source_fauna_update_collection_deletion_mode_enabled)

    @property
    @pulumi.getter(name="sourceFaunaCollectionDeletionModeDisabled")
    def source_fauna_collection_deletion_mode_disabled(self) -> 'outputs.GetSourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeDisabledResult':
        return pulumi.get(self, "source_fauna_collection_deletion_mode_disabled")

    @property
    @pulumi.getter(name="sourceFaunaCollectionDeletionModeEnabled")
    def source_fauna_collection_deletion_mode_enabled(self) -> 'outputs.GetSourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeEnabledResult':
        return pulumi.get(self, "source_fauna_collection_deletion_mode_enabled")

    @property
    @pulumi.getter(name="sourceFaunaUpdateCollectionDeletionModeDisabled")
    def source_fauna_update_collection_deletion_mode_disabled(self) -> 'outputs.GetSourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeDisabledResult':
        return pulumi.get(self, "source_fauna_update_collection_deletion_mode_disabled")

    @property
    @pulumi.getter(name="sourceFaunaUpdateCollectionDeletionModeEnabled")
    def source_fauna_update_collection_deletion_mode_enabled(self) -> 'outputs.GetSourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeEnabledResult':
        return pulumi.get(self, "source_fauna_update_collection_deletion_mode_enabled")


@pulumi.output_type
class GetSourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeDisabledResult(dict):
    def __init__(__self__, *,
                 deletion_mode: str):
        pulumi.set(__self__, "deletion_mode", deletion_mode)

    @property
    @pulumi.getter(name="deletionMode")
    def deletion_mode(self) -> str:
        return pulumi.get(self, "deletion_mode")


@pulumi.output_type
class GetSourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeEnabledResult(dict):
    def __init__(__self__, *,
                 column: str,
                 deletion_mode: str):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "deletion_mode", deletion_mode)

    @property
    @pulumi.getter
    def column(self) -> str:
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="deletionMode")
    def deletion_mode(self) -> str:
        return pulumi.get(self, "deletion_mode")


@pulumi.output_type
class GetSourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeDisabledResult(dict):
    def __init__(__self__, *,
                 deletion_mode: str):
        pulumi.set(__self__, "deletion_mode", deletion_mode)

    @property
    @pulumi.getter(name="deletionMode")
    def deletion_mode(self) -> str:
        return pulumi.get(self, "deletion_mode")


@pulumi.output_type
class GetSourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeEnabledResult(dict):
    def __init__(__self__, *,
                 column: str,
                 deletion_mode: str):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "deletion_mode", deletion_mode)

    @property
    @pulumi.getter
    def column(self) -> str:
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="deletionMode")
    def deletion_mode(self) -> str:
        return pulumi.get(self, "deletion_mode")


@pulumi.output_type
class GetSourceFileSecureConfigurationResult(dict):
    def __init__(__self__, *,
                 dataset_name: str,
                 format: str,
                 provider: 'outputs.GetSourceFileSecureConfigurationProviderResult',
                 reader_options: str,
                 source_type: str,
                 url: str):
        pulumi.set(__self__, "dataset_name", dataset_name)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "reader_options", reader_options)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="datasetName")
    def dataset_name(self) -> str:
        return pulumi.get(self, "dataset_name")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def provider(self) -> 'outputs.GetSourceFileSecureConfigurationProviderResult':
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter(name="readerOptions")
    def reader_options(self) -> str:
        return pulumi.get(self, "reader_options")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetSourceFileSecureConfigurationProviderResult(dict):
    def __init__(__self__, *,
                 source_file_secure_storage_provider_az_blob_azure_blob_storage: 'outputs.GetSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderAzBlobAzureBlobStorageResult',
                 source_file_secure_storage_provider_gcs_google_cloud_storage: 'outputs.GetSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderGcsGoogleCloudStorageResult',
                 source_file_secure_storage_provider_https_public_web: 'outputs.GetSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderHttpsPublicWebResult',
                 source_file_secure_storage_provider_s3_amazon_web_services: 'outputs.GetSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderS3AmazonWebServicesResult',
                 source_file_secure_storage_provider_scp_secure_copy_protocol: 'outputs.GetSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderScpSecureCopyProtocolResult',
                 source_file_secure_storage_provider_sftp_secure_file_transfer_protocol: 'outputs.GetSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSftpSecureFileTransferProtocolResult',
                 source_file_secure_storage_provider_ssh_secure_shell: 'outputs.GetSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSshSecureShellResult',
                 source_file_secure_update_storage_provider_az_blob_azure_blob_storage: 'outputs.GetSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorageResult',
                 source_file_secure_update_storage_provider_gcs_google_cloud_storage: 'outputs.GetSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderGcsGoogleCloudStorageResult',
                 source_file_secure_update_storage_provider_https_public_web: 'outputs.GetSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderHttpsPublicWebResult',
                 source_file_secure_update_storage_provider_s3_amazon_web_services: 'outputs.GetSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderS3AmazonWebServicesResult',
                 source_file_secure_update_storage_provider_scp_secure_copy_protocol: 'outputs.GetSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderScpSecureCopyProtocolResult',
                 source_file_secure_update_storage_provider_sftp_secure_file_transfer_protocol: 'outputs.GetSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSftpSecureFileTransferProtocolResult',
                 source_file_secure_update_storage_provider_ssh_secure_shell: 'outputs.GetSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSshSecureShellResult'):
        pulumi.set(__self__, "source_file_secure_storage_provider_az_blob_azure_blob_storage", source_file_secure_storage_provider_az_blob_azure_blob_storage)
        pulumi.set(__self__, "source_file_secure_storage_provider_gcs_google_cloud_storage", source_file_secure_storage_provider_gcs_google_cloud_storage)
        pulumi.set(__self__, "source_file_secure_storage_provider_https_public_web", source_file_secure_storage_provider_https_public_web)
        pulumi.set(__self__, "source_file_secure_storage_provider_s3_amazon_web_services", source_file_secure_storage_provider_s3_amazon_web_services)
        pulumi.set(__self__, "source_file_secure_storage_provider_scp_secure_copy_protocol", source_file_secure_storage_provider_scp_secure_copy_protocol)
        pulumi.set(__self__, "source_file_secure_storage_provider_sftp_secure_file_transfer_protocol", source_file_secure_storage_provider_sftp_secure_file_transfer_protocol)
        pulumi.set(__self__, "source_file_secure_storage_provider_ssh_secure_shell", source_file_secure_storage_provider_ssh_secure_shell)
        pulumi.set(__self__, "source_file_secure_update_storage_provider_az_blob_azure_blob_storage", source_file_secure_update_storage_provider_az_blob_azure_blob_storage)
        pulumi.set(__self__, "source_file_secure_update_storage_provider_gcs_google_cloud_storage", source_file_secure_update_storage_provider_gcs_google_cloud_storage)
        pulumi.set(__self__, "source_file_secure_update_storage_provider_https_public_web", source_file_secure_update_storage_provider_https_public_web)
        pulumi.set(__self__, "source_file_secure_update_storage_provider_s3_amazon_web_services", source_file_secure_update_storage_provider_s3_amazon_web_services)
        pulumi.set(__self__, "source_file_secure_update_storage_provider_scp_secure_copy_protocol", source_file_secure_update_storage_provider_scp_secure_copy_protocol)
        pulumi.set(__self__, "source_file_secure_update_storage_provider_sftp_secure_file_transfer_protocol", source_file_secure_update_storage_provider_sftp_secure_file_transfer_protocol)
        pulumi.set(__self__, "source_file_secure_update_storage_provider_ssh_secure_shell", source_file_secure_update_storage_provider_ssh_secure_shell)

    @property
    @pulumi.getter(name="sourceFileSecureStorageProviderAzBlobAzureBlobStorage")
    def source_file_secure_storage_provider_az_blob_azure_blob_storage(self) -> 'outputs.GetSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderAzBlobAzureBlobStorageResult':
        return pulumi.get(self, "source_file_secure_storage_provider_az_blob_azure_blob_storage")

    @property
    @pulumi.getter(name="sourceFileSecureStorageProviderGcsGoogleCloudStorage")
    def source_file_secure_storage_provider_gcs_google_cloud_storage(self) -> 'outputs.GetSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderGcsGoogleCloudStorageResult':
        return pulumi.get(self, "source_file_secure_storage_provider_gcs_google_cloud_storage")

    @property
    @pulumi.getter(name="sourceFileSecureStorageProviderHttpsPublicWeb")
    def source_file_secure_storage_provider_https_public_web(self) -> 'outputs.GetSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderHttpsPublicWebResult':
        return pulumi.get(self, "source_file_secure_storage_provider_https_public_web")

    @property
    @pulumi.getter(name="sourceFileSecureStorageProviderS3AmazonWebServices")
    def source_file_secure_storage_provider_s3_amazon_web_services(self) -> 'outputs.GetSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderS3AmazonWebServicesResult':
        return pulumi.get(self, "source_file_secure_storage_provider_s3_amazon_web_services")

    @property
    @pulumi.getter(name="sourceFileSecureStorageProviderScpSecureCopyProtocol")
    def source_file_secure_storage_provider_scp_secure_copy_protocol(self) -> 'outputs.GetSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderScpSecureCopyProtocolResult':
        return pulumi.get(self, "source_file_secure_storage_provider_scp_secure_copy_protocol")

    @property
    @pulumi.getter(name="sourceFileSecureStorageProviderSftpSecureFileTransferProtocol")
    def source_file_secure_storage_provider_sftp_secure_file_transfer_protocol(self) -> 'outputs.GetSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSftpSecureFileTransferProtocolResult':
        return pulumi.get(self, "source_file_secure_storage_provider_sftp_secure_file_transfer_protocol")

    @property
    @pulumi.getter(name="sourceFileSecureStorageProviderSshSecureShell")
    def source_file_secure_storage_provider_ssh_secure_shell(self) -> 'outputs.GetSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSshSecureShellResult':
        return pulumi.get(self, "source_file_secure_storage_provider_ssh_secure_shell")

    @property
    @pulumi.getter(name="sourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorage")
    def source_file_secure_update_storage_provider_az_blob_azure_blob_storage(self) -> 'outputs.GetSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorageResult':
        return pulumi.get(self, "source_file_secure_update_storage_provider_az_blob_azure_blob_storage")

    @property
    @pulumi.getter(name="sourceFileSecureUpdateStorageProviderGcsGoogleCloudStorage")
    def source_file_secure_update_storage_provider_gcs_google_cloud_storage(self) -> 'outputs.GetSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderGcsGoogleCloudStorageResult':
        return pulumi.get(self, "source_file_secure_update_storage_provider_gcs_google_cloud_storage")

    @property
    @pulumi.getter(name="sourceFileSecureUpdateStorageProviderHttpsPublicWeb")
    def source_file_secure_update_storage_provider_https_public_web(self) -> 'outputs.GetSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderHttpsPublicWebResult':
        return pulumi.get(self, "source_file_secure_update_storage_provider_https_public_web")

    @property
    @pulumi.getter(name="sourceFileSecureUpdateStorageProviderS3AmazonWebServices")
    def source_file_secure_update_storage_provider_s3_amazon_web_services(self) -> 'outputs.GetSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderS3AmazonWebServicesResult':
        return pulumi.get(self, "source_file_secure_update_storage_provider_s3_amazon_web_services")

    @property
    @pulumi.getter(name="sourceFileSecureUpdateStorageProviderScpSecureCopyProtocol")
    def source_file_secure_update_storage_provider_scp_secure_copy_protocol(self) -> 'outputs.GetSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderScpSecureCopyProtocolResult':
        return pulumi.get(self, "source_file_secure_update_storage_provider_scp_secure_copy_protocol")

    @property
    @pulumi.getter(name="sourceFileSecureUpdateStorageProviderSftpSecureFileTransferProtocol")
    def source_file_secure_update_storage_provider_sftp_secure_file_transfer_protocol(self) -> 'outputs.GetSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSftpSecureFileTransferProtocolResult':
        return pulumi.get(self, "source_file_secure_update_storage_provider_sftp_secure_file_transfer_protocol")

    @property
    @pulumi.getter(name="sourceFileSecureUpdateStorageProviderSshSecureShell")
    def source_file_secure_update_storage_provider_ssh_secure_shell(self) -> 'outputs.GetSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSshSecureShellResult':
        return pulumi.get(self, "source_file_secure_update_storage_provider_ssh_secure_shell")


@pulumi.output_type
class GetSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderAzBlobAzureBlobStorageResult(dict):
    def __init__(__self__, *,
                 sas_token: str,
                 shared_key: str,
                 storage: str,
                 storage_account: str):
        pulumi.set(__self__, "sas_token", sas_token)
        pulumi.set(__self__, "shared_key", shared_key)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "storage_account", storage_account)

    @property
    @pulumi.getter(name="sasToken")
    def sas_token(self) -> str:
        return pulumi.get(self, "sas_token")

    @property
    @pulumi.getter(name="sharedKey")
    def shared_key(self) -> str:
        return pulumi.get(self, "shared_key")

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="storageAccount")
    def storage_account(self) -> str:
        return pulumi.get(self, "storage_account")


@pulumi.output_type
class GetSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderGcsGoogleCloudStorageResult(dict):
    def __init__(__self__, *,
                 service_account_json: str,
                 storage: str):
        pulumi.set(__self__, "service_account_json", service_account_json)
        pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter(name="serviceAccountJson")
    def service_account_json(self) -> str:
        return pulumi.get(self, "service_account_json")

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")


@pulumi.output_type
class GetSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderHttpsPublicWebResult(dict):
    def __init__(__self__, *,
                 storage: str,
                 user_agent: bool):
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "user_agent", user_agent)

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> bool:
        return pulumi.get(self, "user_agent")


@pulumi.output_type
class GetSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderS3AmazonWebServicesResult(dict):
    def __init__(__self__, *,
                 aws_access_key_id: str,
                 aws_secret_access_key: str,
                 storage: str):
        pulumi.set(__self__, "aws_access_key_id", aws_access_key_id)
        pulumi.set(__self__, "aws_secret_access_key", aws_secret_access_key)
        pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> str:
        return pulumi.get(self, "aws_access_key_id")

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> str:
        return pulumi.get(self, "aws_secret_access_key")

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")


@pulumi.output_type
class GetSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderScpSecureCopyProtocolResult(dict):
    def __init__(__self__, *,
                 host: str,
                 password: str,
                 port: str,
                 storage: str,
                 user: str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")


@pulumi.output_type
class GetSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSftpSecureFileTransferProtocolResult(dict):
    def __init__(__self__, *,
                 host: str,
                 password: str,
                 port: str,
                 storage: str,
                 user: str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")


@pulumi.output_type
class GetSourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSshSecureShellResult(dict):
    def __init__(__self__, *,
                 host: str,
                 password: str,
                 port: str,
                 storage: str,
                 user: str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")


@pulumi.output_type
class GetSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorageResult(dict):
    def __init__(__self__, *,
                 sas_token: str,
                 shared_key: str,
                 storage: str,
                 storage_account: str):
        pulumi.set(__self__, "sas_token", sas_token)
        pulumi.set(__self__, "shared_key", shared_key)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "storage_account", storage_account)

    @property
    @pulumi.getter(name="sasToken")
    def sas_token(self) -> str:
        return pulumi.get(self, "sas_token")

    @property
    @pulumi.getter(name="sharedKey")
    def shared_key(self) -> str:
        return pulumi.get(self, "shared_key")

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="storageAccount")
    def storage_account(self) -> str:
        return pulumi.get(self, "storage_account")


@pulumi.output_type
class GetSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderGcsGoogleCloudStorageResult(dict):
    def __init__(__self__, *,
                 service_account_json: str,
                 storage: str):
        pulumi.set(__self__, "service_account_json", service_account_json)
        pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter(name="serviceAccountJson")
    def service_account_json(self) -> str:
        return pulumi.get(self, "service_account_json")

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")


@pulumi.output_type
class GetSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderHttpsPublicWebResult(dict):
    def __init__(__self__, *,
                 storage: str,
                 user_agent: bool):
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "user_agent", user_agent)

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> bool:
        return pulumi.get(self, "user_agent")


@pulumi.output_type
class GetSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderS3AmazonWebServicesResult(dict):
    def __init__(__self__, *,
                 aws_access_key_id: str,
                 aws_secret_access_key: str,
                 storage: str):
        pulumi.set(__self__, "aws_access_key_id", aws_access_key_id)
        pulumi.set(__self__, "aws_secret_access_key", aws_secret_access_key)
        pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> str:
        return pulumi.get(self, "aws_access_key_id")

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> str:
        return pulumi.get(self, "aws_secret_access_key")

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")


@pulumi.output_type
class GetSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderScpSecureCopyProtocolResult(dict):
    def __init__(__self__, *,
                 host: str,
                 password: str,
                 port: str,
                 storage: str,
                 user: str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")


@pulumi.output_type
class GetSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSftpSecureFileTransferProtocolResult(dict):
    def __init__(__self__, *,
                 host: str,
                 password: str,
                 port: str,
                 storage: str,
                 user: str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")


@pulumi.output_type
class GetSourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSshSecureShellResult(dict):
    def __init__(__self__, *,
                 host: str,
                 password: str,
                 port: str,
                 storage: str,
                 user: str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")


@pulumi.output_type
class GetSourceFireboltConfigurationResult(dict):
    def __init__(__self__, *,
                 account: str,
                 database: str,
                 engine: str,
                 host: str,
                 password: str,
                 source_type: str,
                 username: str):
        pulumi.set(__self__, "account", account)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def account(self) -> str:
        return pulumi.get(self, "account")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def engine(self) -> str:
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSourceFreshcallerConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 domain: str,
                 requests_per_minute: int,
                 source_type: str,
                 start_date: str,
                 sync_lag_minutes: int):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "requests_per_minute", requests_per_minute)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "sync_lag_minutes", sync_lag_minutes)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="requestsPerMinute")
    def requests_per_minute(self) -> int:
        return pulumi.get(self, "requests_per_minute")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="syncLagMinutes")
    def sync_lag_minutes(self) -> int:
        return pulumi.get(self, "sync_lag_minutes")


@pulumi.output_type
class GetSourceFreshdeskConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 domain: str,
                 requests_per_minute: int,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "requests_per_minute", requests_per_minute)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="requestsPerMinute")
    def requests_per_minute(self) -> int:
        return pulumi.get(self, "requests_per_minute")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceFreshsalesConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 domain_name: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> str:
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceGainsightPxConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceGcsConfigurationResult(dict):
    def __init__(__self__, *,
                 gcs_bucket: str,
                 gcs_path: str,
                 service_account: str,
                 source_type: str):
        pulumi.set(__self__, "gcs_bucket", gcs_bucket)
        pulumi.set(__self__, "gcs_path", gcs_path)
        pulumi.set(__self__, "service_account", service_account)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="gcsBucket")
    def gcs_bucket(self) -> str:
        return pulumi.get(self, "gcs_bucket")

    @property
    @pulumi.getter(name="gcsPath")
    def gcs_path(self) -> str:
        return pulumi.get(self, "gcs_path")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> str:
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceGetlagoConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceGithubConfigurationResult(dict):
    def __init__(__self__, *,
                 branch: str,
                 credentials: 'outputs.GetSourceGithubConfigurationCredentialsResult',
                 repository: str,
                 requests_per_hour: int,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "branch", branch)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "repository", repository)
        pulumi.set(__self__, "requests_per_hour", requests_per_hour)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def branch(self) -> str:
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceGithubConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def repository(self) -> str:
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="requestsPerHour")
    def requests_per_hour(self) -> int:
        return pulumi.get(self, "requests_per_hour")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceGithubConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_github_authentication_o_auth: 'outputs.GetSourceGithubConfigurationCredentialsSourceGithubAuthenticationOAuthResult',
                 source_github_authentication_personal_access_token: 'outputs.GetSourceGithubConfigurationCredentialsSourceGithubAuthenticationPersonalAccessTokenResult',
                 source_github_update_authentication_o_auth: 'outputs.GetSourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationOAuthResult',
                 source_github_update_authentication_personal_access_token: 'outputs.GetSourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationPersonalAccessTokenResult'):
        pulumi.set(__self__, "source_github_authentication_o_auth", source_github_authentication_o_auth)
        pulumi.set(__self__, "source_github_authentication_personal_access_token", source_github_authentication_personal_access_token)
        pulumi.set(__self__, "source_github_update_authentication_o_auth", source_github_update_authentication_o_auth)
        pulumi.set(__self__, "source_github_update_authentication_personal_access_token", source_github_update_authentication_personal_access_token)

    @property
    @pulumi.getter(name="sourceGithubAuthenticationOAuth")
    def source_github_authentication_o_auth(self) -> 'outputs.GetSourceGithubConfigurationCredentialsSourceGithubAuthenticationOAuthResult':
        return pulumi.get(self, "source_github_authentication_o_auth")

    @property
    @pulumi.getter(name="sourceGithubAuthenticationPersonalAccessToken")
    def source_github_authentication_personal_access_token(self) -> 'outputs.GetSourceGithubConfigurationCredentialsSourceGithubAuthenticationPersonalAccessTokenResult':
        return pulumi.get(self, "source_github_authentication_personal_access_token")

    @property
    @pulumi.getter(name="sourceGithubUpdateAuthenticationOAuth")
    def source_github_update_authentication_o_auth(self) -> 'outputs.GetSourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationOAuthResult':
        return pulumi.get(self, "source_github_update_authentication_o_auth")

    @property
    @pulumi.getter(name="sourceGithubUpdateAuthenticationPersonalAccessToken")
    def source_github_update_authentication_personal_access_token(self) -> 'outputs.GetSourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationPersonalAccessTokenResult':
        return pulumi.get(self, "source_github_update_authentication_personal_access_token")


@pulumi.output_type
class GetSourceGithubConfigurationCredentialsSourceGithubAuthenticationOAuthResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 client_id: str,
                 client_secret: str,
                 option_title: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> str:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class GetSourceGithubConfigurationCredentialsSourceGithubAuthenticationPersonalAccessTokenResult(dict):
    def __init__(__self__, *,
                 option_title: str,
                 personal_access_token: str):
        pulumi.set(__self__, "option_title", option_title)
        pulumi.set(__self__, "personal_access_token", personal_access_token)

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> str:
        return pulumi.get(self, "option_title")

    @property
    @pulumi.getter(name="personalAccessToken")
    def personal_access_token(self) -> str:
        return pulumi.get(self, "personal_access_token")


@pulumi.output_type
class GetSourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationOAuthResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 client_id: str,
                 client_secret: str,
                 option_title: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> str:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class GetSourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationPersonalAccessTokenResult(dict):
    def __init__(__self__, *,
                 option_title: str,
                 personal_access_token: str):
        pulumi.set(__self__, "option_title", option_title)
        pulumi.set(__self__, "personal_access_token", personal_access_token)

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> str:
        return pulumi.get(self, "option_title")

    @property
    @pulumi.getter(name="personalAccessToken")
    def personal_access_token(self) -> str:
        return pulumi.get(self, "personal_access_token")


@pulumi.output_type
class GetSourceGitlabConfigurationResult(dict):
    def __init__(__self__, *,
                 api_url: str,
                 credentials: 'outputs.GetSourceGitlabConfigurationCredentialsResult',
                 groups: str,
                 projects: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "api_url", api_url)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "projects", projects)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> str:
        return pulumi.get(self, "api_url")

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceGitlabConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def groups(self) -> str:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def projects(self) -> str:
        return pulumi.get(self, "projects")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceGitlabConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_gitlab_authorization_method_o_auth20: 'outputs.GetSourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodOAuth20Result',
                 source_gitlab_authorization_method_private_token: 'outputs.GetSourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodPrivateTokenResult',
                 source_gitlab_update_authorization_method_o_auth20: 'outputs.GetSourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodOAuth20Result',
                 source_gitlab_update_authorization_method_private_token: 'outputs.GetSourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodPrivateTokenResult'):
        pulumi.set(__self__, "source_gitlab_authorization_method_o_auth20", source_gitlab_authorization_method_o_auth20)
        pulumi.set(__self__, "source_gitlab_authorization_method_private_token", source_gitlab_authorization_method_private_token)
        pulumi.set(__self__, "source_gitlab_update_authorization_method_o_auth20", source_gitlab_update_authorization_method_o_auth20)
        pulumi.set(__self__, "source_gitlab_update_authorization_method_private_token", source_gitlab_update_authorization_method_private_token)

    @property
    @pulumi.getter(name="sourceGitlabAuthorizationMethodOAuth20")
    def source_gitlab_authorization_method_o_auth20(self) -> 'outputs.GetSourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodOAuth20Result':
        return pulumi.get(self, "source_gitlab_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourceGitlabAuthorizationMethodPrivateToken")
    def source_gitlab_authorization_method_private_token(self) -> 'outputs.GetSourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodPrivateTokenResult':
        return pulumi.get(self, "source_gitlab_authorization_method_private_token")

    @property
    @pulumi.getter(name="sourceGitlabUpdateAuthorizationMethodOAuth20")
    def source_gitlab_update_authorization_method_o_auth20(self) -> 'outputs.GetSourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodOAuth20Result':
        return pulumi.get(self, "source_gitlab_update_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourceGitlabUpdateAuthorizationMethodPrivateToken")
    def source_gitlab_update_authorization_method_private_token(self) -> 'outputs.GetSourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodPrivateTokenResult':
        return pulumi.get(self, "source_gitlab_update_authorization_method_private_token")


@pulumi.output_type
class GetSourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 token_expiry_date: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> str:
        return pulumi.get(self, "token_expiry_date")


@pulumi.output_type
class GetSourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodPrivateTokenResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class GetSourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 token_expiry_date: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> str:
        return pulumi.get(self, "token_expiry_date")


@pulumi.output_type
class GetSourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodPrivateTokenResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class GetSourceGlassfrogConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceGnewsConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 country: str,
                 end_date: str,
                 ins: Sequence[str],
                 language: str,
                 nullables: Sequence[str],
                 query: str,
                 sortby: str,
                 source_type: str,
                 start_date: str,
                 top_headlines_query: str,
                 top_headlines_topic: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "ins", ins)
        pulumi.set(__self__, "language", language)
        pulumi.set(__self__, "nullables", nullables)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "sortby", sortby)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "top_headlines_query", top_headlines_query)
        pulumi.set(__self__, "top_headlines_topic", top_headlines_topic)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter
    def country(self) -> str:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter
    def ins(self) -> Sequence[str]:
        return pulumi.get(self, "ins")

    @property
    @pulumi.getter
    def language(self) -> str:
        return pulumi.get(self, "language")

    @property
    @pulumi.getter
    def nullables(self) -> Sequence[str]:
        return pulumi.get(self, "nullables")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def sortby(self) -> str:
        return pulumi.get(self, "sortby")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="topHeadlinesQuery")
    def top_headlines_query(self) -> str:
        return pulumi.get(self, "top_headlines_query")

    @property
    @pulumi.getter(name="topHeadlinesTopic")
    def top_headlines_topic(self) -> str:
        return pulumi.get(self, "top_headlines_topic")


@pulumi.output_type
class GetSourceGoogleAdsConfigurationResult(dict):
    def __init__(__self__, *,
                 conversion_window_days: int,
                 credentials: 'outputs.GetSourceGoogleAdsConfigurationCredentialsResult',
                 custom_queries: Sequence['outputs.GetSourceGoogleAdsConfigurationCustomQueryResult'],
                 customer_id: str,
                 end_date: str,
                 login_customer_id: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "conversion_window_days", conversion_window_days)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "custom_queries", custom_queries)
        pulumi.set(__self__, "customer_id", customer_id)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "login_customer_id", login_customer_id)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="conversionWindowDays")
    def conversion_window_days(self) -> int:
        return pulumi.get(self, "conversion_window_days")

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceGoogleAdsConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="customQueries")
    def custom_queries(self) -> Sequence['outputs.GetSourceGoogleAdsConfigurationCustomQueryResult']:
        return pulumi.get(self, "custom_queries")

    @property
    @pulumi.getter(name="customerId")
    def customer_id(self) -> str:
        return pulumi.get(self, "customer_id")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="loginCustomerId")
    def login_customer_id(self) -> str:
        return pulumi.get(self, "login_customer_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceGoogleAdsConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 client_id: str,
                 client_secret: str,
                 developer_token: str,
                 refresh_token: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "developer_token", developer_token)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="developerToken")
    def developer_token(self) -> str:
        return pulumi.get(self, "developer_token")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourceGoogleAdsConfigurationCustomQueryResult(dict):
    def __init__(__self__, *,
                 query: str,
                 table_name: str):
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        return pulumi.get(self, "table_name")


@pulumi.output_type
class GetSourceGoogleAnalyticsDataApiConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourceGoogleAnalyticsDataApiConfigurationCredentialsResult',
                 custom_reports: str,
                 date_ranges_start_date: str,
                 property_id: str,
                 source_type: str,
                 window_in_days: int):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "custom_reports", custom_reports)
        pulumi.set(__self__, "date_ranges_start_date", date_ranges_start_date)
        pulumi.set(__self__, "property_id", property_id)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "window_in_days", window_in_days)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceGoogleAnalyticsDataApiConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="customReports")
    def custom_reports(self) -> str:
        return pulumi.get(self, "custom_reports")

    @property
    @pulumi.getter(name="dateRangesStartDate")
    def date_ranges_start_date(self) -> str:
        return pulumi.get(self, "date_ranges_start_date")

    @property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> str:
        return pulumi.get(self, "property_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="windowInDays")
    def window_in_days(self) -> int:
        return pulumi.get(self, "window_in_days")


@pulumi.output_type
class GetSourceGoogleAnalyticsDataApiConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_google_analytics_data_api_credentials_authenticate_via_google_oauth: 'outputs.GetSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauthResult',
                 source_google_analytics_data_api_credentials_service_account_key_authentication: 'outputs.GetSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthenticationResult',
                 source_google_analytics_data_api_update_credentials_authenticate_via_google_oauth: 'outputs.GetSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauthResult',
                 source_google_analytics_data_api_update_credentials_service_account_key_authentication: 'outputs.GetSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthenticationResult'):
        pulumi.set(__self__, "source_google_analytics_data_api_credentials_authenticate_via_google_oauth", source_google_analytics_data_api_credentials_authenticate_via_google_oauth)
        pulumi.set(__self__, "source_google_analytics_data_api_credentials_service_account_key_authentication", source_google_analytics_data_api_credentials_service_account_key_authentication)
        pulumi.set(__self__, "source_google_analytics_data_api_update_credentials_authenticate_via_google_oauth", source_google_analytics_data_api_update_credentials_authenticate_via_google_oauth)
        pulumi.set(__self__, "source_google_analytics_data_api_update_credentials_service_account_key_authentication", source_google_analytics_data_api_update_credentials_service_account_key_authentication)

    @property
    @pulumi.getter(name="sourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauth")
    def source_google_analytics_data_api_credentials_authenticate_via_google_oauth(self) -> 'outputs.GetSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauthResult':
        return pulumi.get(self, "source_google_analytics_data_api_credentials_authenticate_via_google_oauth")

    @property
    @pulumi.getter(name="sourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthentication")
    def source_google_analytics_data_api_credentials_service_account_key_authentication(self) -> 'outputs.GetSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthenticationResult':
        return pulumi.get(self, "source_google_analytics_data_api_credentials_service_account_key_authentication")

    @property
    @pulumi.getter(name="sourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauth")
    def source_google_analytics_data_api_update_credentials_authenticate_via_google_oauth(self) -> 'outputs.GetSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauthResult':
        return pulumi.get(self, "source_google_analytics_data_api_update_credentials_authenticate_via_google_oauth")

    @property
    @pulumi.getter(name="sourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthentication")
    def source_google_analytics_data_api_update_credentials_service_account_key_authentication(self) -> 'outputs.GetSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthenticationResult':
        return pulumi.get(self, "source_google_analytics_data_api_update_credentials_service_account_key_authentication")


@pulumi.output_type
class GetSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauthResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 credentials_json: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "credentials_json", credentials_json)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> str:
        return pulumi.get(self, "credentials_json")


@pulumi.output_type
class GetSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauthResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 credentials_json: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "credentials_json", credentials_json)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> str:
        return pulumi.get(self, "credentials_json")


@pulumi.output_type
class GetSourceGoogleAnalyticsV4ConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourceGoogleAnalyticsV4ConfigurationCredentialsResult',
                 custom_reports: str,
                 source_type: str,
                 start_date: str,
                 view_id: str,
                 window_in_days: int):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "custom_reports", custom_reports)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "view_id", view_id)
        pulumi.set(__self__, "window_in_days", window_in_days)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceGoogleAnalyticsV4ConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="customReports")
    def custom_reports(self) -> str:
        return pulumi.get(self, "custom_reports")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="viewId")
    def view_id(self) -> str:
        return pulumi.get(self, "view_id")

    @property
    @pulumi.getter(name="windowInDays")
    def window_in_days(self) -> int:
        return pulumi.get(self, "window_in_days")


@pulumi.output_type
class GetSourceGoogleAnalyticsV4ConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_google_analytics_v4_credentials_authenticate_via_google_oauth: 'outputs.GetSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauthResult',
                 source_google_analytics_v4_credentials_service_account_key_authentication: 'outputs.GetSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthenticationResult',
                 source_google_analytics_v4_update_credentials_authenticate_via_google_oauth: 'outputs.GetSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauthResult',
                 source_google_analytics_v4_update_credentials_service_account_key_authentication: 'outputs.GetSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthenticationResult'):
        pulumi.set(__self__, "source_google_analytics_v4_credentials_authenticate_via_google_oauth", source_google_analytics_v4_credentials_authenticate_via_google_oauth)
        pulumi.set(__self__, "source_google_analytics_v4_credentials_service_account_key_authentication", source_google_analytics_v4_credentials_service_account_key_authentication)
        pulumi.set(__self__, "source_google_analytics_v4_update_credentials_authenticate_via_google_oauth", source_google_analytics_v4_update_credentials_authenticate_via_google_oauth)
        pulumi.set(__self__, "source_google_analytics_v4_update_credentials_service_account_key_authentication", source_google_analytics_v4_update_credentials_service_account_key_authentication)

    @property
    @pulumi.getter(name="sourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth")
    def source_google_analytics_v4_credentials_authenticate_via_google_oauth(self) -> 'outputs.GetSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauthResult':
        return pulumi.get(self, "source_google_analytics_v4_credentials_authenticate_via_google_oauth")

    @property
    @pulumi.getter(name="sourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication")
    def source_google_analytics_v4_credentials_service_account_key_authentication(self) -> 'outputs.GetSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthenticationResult':
        return pulumi.get(self, "source_google_analytics_v4_credentials_service_account_key_authentication")

    @property
    @pulumi.getter(name="sourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth")
    def source_google_analytics_v4_update_credentials_authenticate_via_google_oauth(self) -> 'outputs.GetSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauthResult':
        return pulumi.get(self, "source_google_analytics_v4_update_credentials_authenticate_via_google_oauth")

    @property
    @pulumi.getter(name="sourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication")
    def source_google_analytics_v4_update_credentials_service_account_key_authentication(self) -> 'outputs.GetSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthenticationResult':
        return pulumi.get(self, "source_google_analytics_v4_update_credentials_service_account_key_authentication")


@pulumi.output_type
class GetSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauthResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 credentials_json: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "credentials_json", credentials_json)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> str:
        return pulumi.get(self, "credentials_json")


@pulumi.output_type
class GetSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauthResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 credentials_json: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "credentials_json", credentials_json)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> str:
        return pulumi.get(self, "credentials_json")


@pulumi.output_type
class GetSourceGoogleDirectoryConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourceGoogleDirectoryConfigurationCredentialsResult',
                 source_type: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceGoogleDirectoryConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceGoogleDirectoryConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_google_directory_google_credentials_service_account_key: 'outputs.GetSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsServiceAccountKeyResult',
                 source_google_directory_google_credentials_sign_in_via_google_o_auth: 'outputs.GetSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuthResult',
                 source_google_directory_update_google_credentials_service_account_key: 'outputs.GetSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKeyResult',
                 source_google_directory_update_google_credentials_sign_in_via_google_o_auth: 'outputs.GetSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuthResult'):
        pulumi.set(__self__, "source_google_directory_google_credentials_service_account_key", source_google_directory_google_credentials_service_account_key)
        pulumi.set(__self__, "source_google_directory_google_credentials_sign_in_via_google_o_auth", source_google_directory_google_credentials_sign_in_via_google_o_auth)
        pulumi.set(__self__, "source_google_directory_update_google_credentials_service_account_key", source_google_directory_update_google_credentials_service_account_key)
        pulumi.set(__self__, "source_google_directory_update_google_credentials_sign_in_via_google_o_auth", source_google_directory_update_google_credentials_sign_in_via_google_o_auth)

    @property
    @pulumi.getter(name="sourceGoogleDirectoryGoogleCredentialsServiceAccountKey")
    def source_google_directory_google_credentials_service_account_key(self) -> 'outputs.GetSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsServiceAccountKeyResult':
        return pulumi.get(self, "source_google_directory_google_credentials_service_account_key")

    @property
    @pulumi.getter(name="sourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuth")
    def source_google_directory_google_credentials_sign_in_via_google_o_auth(self) -> 'outputs.GetSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuthResult':
        return pulumi.get(self, "source_google_directory_google_credentials_sign_in_via_google_o_auth")

    @property
    @pulumi.getter(name="sourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey")
    def source_google_directory_update_google_credentials_service_account_key(self) -> 'outputs.GetSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKeyResult':
        return pulumi.get(self, "source_google_directory_update_google_credentials_service_account_key")

    @property
    @pulumi.getter(name="sourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth")
    def source_google_directory_update_google_credentials_sign_in_via_google_o_auth(self) -> 'outputs.GetSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuthResult':
        return pulumi.get(self, "source_google_directory_update_google_credentials_sign_in_via_google_o_auth")


@pulumi.output_type
class GetSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsServiceAccountKeyResult(dict):
    def __init__(__self__, *,
                 credentials_json: str,
                 credentials_title: str,
                 email: str):
        pulumi.set(__self__, "credentials_json", credentials_json)
        pulumi.set(__self__, "credentials_title", credentials_title)
        pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> str:
        return pulumi.get(self, "credentials_json")

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> str:
        return pulumi.get(self, "credentials_title")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")


@pulumi.output_type
class GetSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuthResult(dict):
    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 credentials_title: str,
                 refresh_token: str):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "credentials_title", credentials_title)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> str:
        return pulumi.get(self, "credentials_title")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKeyResult(dict):
    def __init__(__self__, *,
                 credentials_json: str,
                 credentials_title: str,
                 email: str):
        pulumi.set(__self__, "credentials_json", credentials_json)
        pulumi.set(__self__, "credentials_title", credentials_title)
        pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> str:
        return pulumi.get(self, "credentials_json")

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> str:
        return pulumi.get(self, "credentials_title")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")


@pulumi.output_type
class GetSourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuthResult(dict):
    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 credentials_title: str,
                 refresh_token: str):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "credentials_title", credentials_title)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> str:
        return pulumi.get(self, "credentials_title")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourceGooglePagespeedInsightsConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 categories: Sequence[str],
                 source_type: str,
                 strategies: Sequence[str],
                 urls: Sequence[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "strategies", strategies)
        pulumi.set(__self__, "urls", urls)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter
    def categories(self) -> Sequence[str]:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def strategies(self) -> Sequence[str]:
        return pulumi.get(self, "strategies")

    @property
    @pulumi.getter
    def urls(self) -> Sequence[str]:
        return pulumi.get(self, "urls")


@pulumi.output_type
class GetSourceGoogleSearchConsoleConfigurationResult(dict):
    def __init__(__self__, *,
                 authorization: 'outputs.GetSourceGoogleSearchConsoleConfigurationAuthorizationResult',
                 custom_reports: str,
                 data_state: str,
                 end_date: str,
                 site_urls: Sequence[str],
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "custom_reports", custom_reports)
        pulumi.set(__self__, "data_state", data_state)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "site_urls", site_urls)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def authorization(self) -> 'outputs.GetSourceGoogleSearchConsoleConfigurationAuthorizationResult':
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="customReports")
    def custom_reports(self) -> str:
        return pulumi.get(self, "custom_reports")

    @property
    @pulumi.getter(name="dataState")
    def data_state(self) -> str:
        return pulumi.get(self, "data_state")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="siteUrls")
    def site_urls(self) -> Sequence[str]:
        return pulumi.get(self, "site_urls")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceGoogleSearchConsoleConfigurationAuthorizationResult(dict):
    def __init__(__self__, *,
                 source_google_search_console_authentication_type_o_auth: 'outputs.GetSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeOAuthResult',
                 source_google_search_console_authentication_type_service_account_key_authentication: 'outputs.GetSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationResult',
                 source_google_search_console_update_authentication_type_o_auth: 'outputs.GetSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeOAuthResult',
                 source_google_search_console_update_authentication_type_service_account_key_authentication: 'outputs.GetSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthenticationResult'):
        pulumi.set(__self__, "source_google_search_console_authentication_type_o_auth", source_google_search_console_authentication_type_o_auth)
        pulumi.set(__self__, "source_google_search_console_authentication_type_service_account_key_authentication", source_google_search_console_authentication_type_service_account_key_authentication)
        pulumi.set(__self__, "source_google_search_console_update_authentication_type_o_auth", source_google_search_console_update_authentication_type_o_auth)
        pulumi.set(__self__, "source_google_search_console_update_authentication_type_service_account_key_authentication", source_google_search_console_update_authentication_type_service_account_key_authentication)

    @property
    @pulumi.getter(name="sourceGoogleSearchConsoleAuthenticationTypeOAuth")
    def source_google_search_console_authentication_type_o_auth(self) -> 'outputs.GetSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeOAuthResult':
        return pulumi.get(self, "source_google_search_console_authentication_type_o_auth")

    @property
    @pulumi.getter(name="sourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication")
    def source_google_search_console_authentication_type_service_account_key_authentication(self) -> 'outputs.GetSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationResult':
        return pulumi.get(self, "source_google_search_console_authentication_type_service_account_key_authentication")

    @property
    @pulumi.getter(name="sourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth")
    def source_google_search_console_update_authentication_type_o_auth(self) -> 'outputs.GetSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeOAuthResult':
        return pulumi.get(self, "source_google_search_console_update_authentication_type_o_auth")

    @property
    @pulumi.getter(name="sourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication")
    def source_google_search_console_update_authentication_type_service_account_key_authentication(self) -> 'outputs.GetSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthenticationResult':
        return pulumi.get(self, "source_google_search_console_update_authentication_type_service_account_key_authentication")


@pulumi.output_type
class GetSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeOAuthResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 email: str,
                 service_account_info: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "service_account_info", service_account_info)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="serviceAccountInfo")
    def service_account_info(self) -> str:
        return pulumi.get(self, "service_account_info")


@pulumi.output_type
class GetSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeOAuthResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 email: str,
                 service_account_info: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "service_account_info", service_account_info)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="serviceAccountInfo")
    def service_account_info(self) -> str:
        return pulumi.get(self, "service_account_info")


@pulumi.output_type
class GetSourceGoogleSheetsConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourceGoogleSheetsConfigurationCredentialsResult',
                 names_conversion: bool,
                 row_batch_size: int,
                 source_type: str,
                 spreadsheet_id: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "names_conversion", names_conversion)
        pulumi.set(__self__, "row_batch_size", row_batch_size)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "spreadsheet_id", spreadsheet_id)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceGoogleSheetsConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="namesConversion")
    def names_conversion(self) -> bool:
        return pulumi.get(self, "names_conversion")

    @property
    @pulumi.getter(name="rowBatchSize")
    def row_batch_size(self) -> int:
        return pulumi.get(self, "row_batch_size")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="spreadsheetId")
    def spreadsheet_id(self) -> str:
        return pulumi.get(self, "spreadsheet_id")


@pulumi.output_type
class GetSourceGoogleSheetsConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_google_sheets_authentication_authenticate_via_google_o_auth: 'outputs.GetSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuthResult',
                 source_google_sheets_authentication_service_account_key_authentication: 'outputs.GetSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationServiceAccountKeyAuthenticationResult',
                 source_google_sheets_update_authentication_authenticate_via_google_o_auth: 'outputs.GetSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuthResult',
                 source_google_sheets_update_authentication_service_account_key_authentication: 'outputs.GetSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthenticationResult'):
        pulumi.set(__self__, "source_google_sheets_authentication_authenticate_via_google_o_auth", source_google_sheets_authentication_authenticate_via_google_o_auth)
        pulumi.set(__self__, "source_google_sheets_authentication_service_account_key_authentication", source_google_sheets_authentication_service_account_key_authentication)
        pulumi.set(__self__, "source_google_sheets_update_authentication_authenticate_via_google_o_auth", source_google_sheets_update_authentication_authenticate_via_google_o_auth)
        pulumi.set(__self__, "source_google_sheets_update_authentication_service_account_key_authentication", source_google_sheets_update_authentication_service_account_key_authentication)

    @property
    @pulumi.getter(name="sourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth")
    def source_google_sheets_authentication_authenticate_via_google_o_auth(self) -> 'outputs.GetSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuthResult':
        return pulumi.get(self, "source_google_sheets_authentication_authenticate_via_google_o_auth")

    @property
    @pulumi.getter(name="sourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication")
    def source_google_sheets_authentication_service_account_key_authentication(self) -> 'outputs.GetSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationServiceAccountKeyAuthenticationResult':
        return pulumi.get(self, "source_google_sheets_authentication_service_account_key_authentication")

    @property
    @pulumi.getter(name="sourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth")
    def source_google_sheets_update_authentication_authenticate_via_google_o_auth(self) -> 'outputs.GetSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuthResult':
        return pulumi.get(self, "source_google_sheets_update_authentication_authenticate_via_google_o_auth")

    @property
    @pulumi.getter(name="sourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication")
    def source_google_sheets_update_authentication_service_account_key_authentication(self) -> 'outputs.GetSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthenticationResult':
        return pulumi.get(self, "source_google_sheets_update_authentication_service_account_key_authentication")


@pulumi.output_type
class GetSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuthResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationServiceAccountKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 service_account_info: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "service_account_info", service_account_info)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="serviceAccountInfo")
    def service_account_info(self) -> str:
        return pulumi.get(self, "service_account_info")


@pulumi.output_type
class GetSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuthResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 service_account_info: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "service_account_info", service_account_info)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="serviceAccountInfo")
    def service_account_info(self) -> str:
        return pulumi.get(self, "service_account_info")


@pulumi.output_type
class GetSourceGoogleWebfontsConfigurationResult(dict):
    def __init__(__self__, *,
                 alt: str,
                 api_key: str,
                 pretty_print: str,
                 sort: str,
                 source_type: str):
        pulumi.set(__self__, "alt", alt)
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "pretty_print", pretty_print)
        pulumi.set(__self__, "sort", sort)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def alt(self) -> str:
        return pulumi.get(self, "alt")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="prettyPrint")
    def pretty_print(self) -> str:
        return pulumi.get(self, "pretty_print")

    @property
    @pulumi.getter
    def sort(self) -> str:
        return pulumi.get(self, "sort")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceGoogleWorkspaceAdminReportsConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials_json: str,
                 email: str,
                 lookback: int,
                 source_type: str):
        pulumi.set(__self__, "credentials_json", credentials_json)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "lookback", lookback)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> str:
        return pulumi.get(self, "credentials_json")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def lookback(self) -> int:
        return pulumi.get(self, "lookback")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceGreenhouseConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceGridlyConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 grid_id: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "grid_id", grid_id)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="gridId")
    def grid_id(self) -> str:
        return pulumi.get(self, "grid_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceHarvestConfigurationResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 credentials: 'outputs.GetSourceHarvestConfigurationCredentialsResult',
                 replication_end_date: str,
                 replication_start_date: str,
                 source_type: str):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "replication_end_date", replication_end_date)
        pulumi.set(__self__, "replication_start_date", replication_start_date)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceHarvestConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="replicationEndDate")
    def replication_end_date(self) -> str:
        return pulumi.get(self, "replication_end_date")

    @property
    @pulumi.getter(name="replicationStartDate")
    def replication_start_date(self) -> str:
        return pulumi.get(self, "replication_start_date")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceHarvestConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_harvest_authentication_mechanism_authenticate_via_harvest_o_auth: 'outputs.GetSourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthResult',
                 source_harvest_authentication_mechanism_authenticate_with_personal_access_token: 'outputs.GetSourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenResult',
                 source_harvest_update_authentication_mechanism_authenticate_via_harvest_o_auth: 'outputs.GetSourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuthResult',
                 source_harvest_update_authentication_mechanism_authenticate_with_personal_access_token: 'outputs.GetSourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessTokenResult'):
        pulumi.set(__self__, "source_harvest_authentication_mechanism_authenticate_via_harvest_o_auth", source_harvest_authentication_mechanism_authenticate_via_harvest_o_auth)
        pulumi.set(__self__, "source_harvest_authentication_mechanism_authenticate_with_personal_access_token", source_harvest_authentication_mechanism_authenticate_with_personal_access_token)
        pulumi.set(__self__, "source_harvest_update_authentication_mechanism_authenticate_via_harvest_o_auth", source_harvest_update_authentication_mechanism_authenticate_via_harvest_o_auth)
        pulumi.set(__self__, "source_harvest_update_authentication_mechanism_authenticate_with_personal_access_token", source_harvest_update_authentication_mechanism_authenticate_with_personal_access_token)

    @property
    @pulumi.getter(name="sourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth")
    def source_harvest_authentication_mechanism_authenticate_via_harvest_o_auth(self) -> 'outputs.GetSourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthResult':
        return pulumi.get(self, "source_harvest_authentication_mechanism_authenticate_via_harvest_o_auth")

    @property
    @pulumi.getter(name="sourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken")
    def source_harvest_authentication_mechanism_authenticate_with_personal_access_token(self) -> 'outputs.GetSourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenResult':
        return pulumi.get(self, "source_harvest_authentication_mechanism_authenticate_with_personal_access_token")

    @property
    @pulumi.getter(name="sourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth")
    def source_harvest_update_authentication_mechanism_authenticate_via_harvest_o_auth(self) -> 'outputs.GetSourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuthResult':
        return pulumi.get(self, "source_harvest_update_authentication_mechanism_authenticate_via_harvest_o_auth")

    @property
    @pulumi.getter(name="sourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken")
    def source_harvest_update_authentication_mechanism_authenticate_with_personal_access_token(self) -> 'outputs.GetSourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessTokenResult':
        return pulumi.get(self, "source_harvest_update_authentication_mechanism_authenticate_with_personal_access_token")


@pulumi.output_type
class GetSourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenResult(dict):
    def __init__(__self__, *,
                 api_token: str,
                 auth_type: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "auth_type", auth_type)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuthResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessTokenResult(dict):
    def __init__(__self__, *,
                 api_token: str,
                 auth_type: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "auth_type", auth_type)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceHubplannerConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceHubspotConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourceHubspotConfigurationCredentialsResult',
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceHubspotConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceHubspotConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_hubspot_authentication_o_auth: 'outputs.GetSourceHubspotConfigurationCredentialsSourceHubspotAuthenticationOAuthResult',
                 source_hubspot_authentication_private_app: 'outputs.GetSourceHubspotConfigurationCredentialsSourceHubspotAuthenticationPrivateAppResult',
                 source_hubspot_update_authentication_o_auth: 'outputs.GetSourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationOAuthResult',
                 source_hubspot_update_authentication_private_app: 'outputs.GetSourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationPrivateAppResult'):
        pulumi.set(__self__, "source_hubspot_authentication_o_auth", source_hubspot_authentication_o_auth)
        pulumi.set(__self__, "source_hubspot_authentication_private_app", source_hubspot_authentication_private_app)
        pulumi.set(__self__, "source_hubspot_update_authentication_o_auth", source_hubspot_update_authentication_o_auth)
        pulumi.set(__self__, "source_hubspot_update_authentication_private_app", source_hubspot_update_authentication_private_app)

    @property
    @pulumi.getter(name="sourceHubspotAuthenticationOAuth")
    def source_hubspot_authentication_o_auth(self) -> 'outputs.GetSourceHubspotConfigurationCredentialsSourceHubspotAuthenticationOAuthResult':
        return pulumi.get(self, "source_hubspot_authentication_o_auth")

    @property
    @pulumi.getter(name="sourceHubspotAuthenticationPrivateApp")
    def source_hubspot_authentication_private_app(self) -> 'outputs.GetSourceHubspotConfigurationCredentialsSourceHubspotAuthenticationPrivateAppResult':
        return pulumi.get(self, "source_hubspot_authentication_private_app")

    @property
    @pulumi.getter(name="sourceHubspotUpdateAuthenticationOAuth")
    def source_hubspot_update_authentication_o_auth(self) -> 'outputs.GetSourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationOAuthResult':
        return pulumi.get(self, "source_hubspot_update_authentication_o_auth")

    @property
    @pulumi.getter(name="sourceHubspotUpdateAuthenticationPrivateApp")
    def source_hubspot_update_authentication_private_app(self) -> 'outputs.GetSourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationPrivateAppResult':
        return pulumi.get(self, "source_hubspot_update_authentication_private_app")


@pulumi.output_type
class GetSourceHubspotConfigurationCredentialsSourceHubspotAuthenticationOAuthResult(dict):
    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 credentials_title: str,
                 refresh_token: str):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "credentials_title", credentials_title)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> str:
        return pulumi.get(self, "credentials_title")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourceHubspotConfigurationCredentialsSourceHubspotAuthenticationPrivateAppResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 credentials_title: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "credentials_title", credentials_title)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> str:
        return pulumi.get(self, "credentials_title")


@pulumi.output_type
class GetSourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationOAuthResult(dict):
    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 credentials_title: str,
                 refresh_token: str):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "credentials_title", credentials_title)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> str:
        return pulumi.get(self, "credentials_title")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationPrivateAppResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 credentials_title: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "credentials_title", credentials_title)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> str:
        return pulumi.get(self, "credentials_title")


@pulumi.output_type
class GetSourceInsightlyConfigurationResult(dict):
    def __init__(__self__, *,
                 source_type: str,
                 start_date: str,
                 token: str):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def token(self) -> str:
        return pulumi.get(self, "token")


@pulumi.output_type
class GetSourceInstagramConfigurationResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 client_id: str,
                 client_secret: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceInstatusConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceIntercomConfigurationResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceIp2whoisConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 domain: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceIterableConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceJiraConfigurationResult(dict):
    def __init__(__self__, *,
                 api_token: str,
                 domain: str,
                 email: str,
                 enable_experimental_streams: bool,
                 expand_issue_changelog: bool,
                 projects: Sequence[str],
                 render_fields: bool,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "enable_experimental_streams", enable_experimental_streams)
        pulumi.set(__self__, "expand_issue_changelog", expand_issue_changelog)
        pulumi.set(__self__, "projects", projects)
        pulumi.set(__self__, "render_fields", render_fields)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="enableExperimentalStreams")
    def enable_experimental_streams(self) -> bool:
        return pulumi.get(self, "enable_experimental_streams")

    @property
    @pulumi.getter(name="expandIssueChangelog")
    def expand_issue_changelog(self) -> bool:
        return pulumi.get(self, "expand_issue_changelog")

    @property
    @pulumi.getter
    def projects(self) -> Sequence[str]:
        return pulumi.get(self, "projects")

    @property
    @pulumi.getter(name="renderFields")
    def render_fields(self) -> bool:
        return pulumi.get(self, "render_fields")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceK6CloudConfigurationResult(dict):
    def __init__(__self__, *,
                 api_token: str,
                 source_type: str):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceKlarnaConfigurationResult(dict):
    def __init__(__self__, *,
                 password: str,
                 playground: bool,
                 region: str,
                 source_type: str,
                 username: str):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "playground", playground)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def playground(self) -> bool:
        return pulumi.get(self, "playground")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSourceKlaviyoConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceKustomerSingerConfigurationResult(dict):
    def __init__(__self__, *,
                 api_token: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceKyveConfigurationResult(dict):
    def __init__(__self__, *,
                 max_pages: int,
                 page_size: int,
                 pool_ids: str,
                 source_type: str,
                 start_ids: str,
                 url_base: str):
        pulumi.set(__self__, "max_pages", max_pages)
        pulumi.set(__self__, "page_size", page_size)
        pulumi.set(__self__, "pool_ids", pool_ids)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_ids", start_ids)
        pulumi.set(__self__, "url_base", url_base)

    @property
    @pulumi.getter(name="maxPages")
    def max_pages(self) -> int:
        return pulumi.get(self, "max_pages")

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> int:
        return pulumi.get(self, "page_size")

    @property
    @pulumi.getter(name="poolIds")
    def pool_ids(self) -> str:
        return pulumi.get(self, "pool_ids")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startIds")
    def start_ids(self) -> str:
        return pulumi.get(self, "start_ids")

    @property
    @pulumi.getter(name="urlBase")
    def url_base(self) -> str:
        return pulumi.get(self, "url_base")


@pulumi.output_type
class GetSourceLaunchdarklyConfigurationResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 source_type: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceLemlistConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceLeverHiringConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourceLeverHiringConfigurationCredentialsResult',
                 environment: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceLeverHiringConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def environment(self) -> str:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceLeverHiringConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_lever_hiring_authentication_mechanism_authenticate_via_lever_api_key: 'outputs.GetSourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKeyResult',
                 source_lever_hiring_authentication_mechanism_authenticate_via_lever_o_auth: 'outputs.GetSourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuthResult',
                 source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_api_key: 'outputs.GetSourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKeyResult',
                 source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_o_auth: 'outputs.GetSourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuthResult'):
        pulumi.set(__self__, "source_lever_hiring_authentication_mechanism_authenticate_via_lever_api_key", source_lever_hiring_authentication_mechanism_authenticate_via_lever_api_key)
        pulumi.set(__self__, "source_lever_hiring_authentication_mechanism_authenticate_via_lever_o_auth", source_lever_hiring_authentication_mechanism_authenticate_via_lever_o_auth)
        pulumi.set(__self__, "source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_api_key", source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_api_key)
        pulumi.set(__self__, "source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_o_auth", source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_o_auth)

    @property
    @pulumi.getter(name="sourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKey")
    def source_lever_hiring_authentication_mechanism_authenticate_via_lever_api_key(self) -> 'outputs.GetSourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKeyResult':
        return pulumi.get(self, "source_lever_hiring_authentication_mechanism_authenticate_via_lever_api_key")

    @property
    @pulumi.getter(name="sourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth")
    def source_lever_hiring_authentication_mechanism_authenticate_via_lever_o_auth(self) -> 'outputs.GetSourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuthResult':
        return pulumi.get(self, "source_lever_hiring_authentication_mechanism_authenticate_via_lever_o_auth")

    @property
    @pulumi.getter(name="sourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKey")
    def source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_api_key(self) -> 'outputs.GetSourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKeyResult':
        return pulumi.get(self, "source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_api_key")

    @property
    @pulumi.getter(name="sourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth")
    def source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_o_auth(self) -> 'outputs.GetSourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuthResult':
        return pulumi.get(self, "source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_o_auth")


@pulumi.output_type
class GetSourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKeyResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 auth_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class GetSourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuthResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKeyResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 auth_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class GetSourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuthResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourceLinkedinAdsConfigurationResult(dict):
    def __init__(__self__, *,
                 account_ids: Sequence[int],
                 ad_analytics_reports: Sequence['outputs.GetSourceLinkedinAdsConfigurationAdAnalyticsReportResult'],
                 credentials: 'outputs.GetSourceLinkedinAdsConfigurationCredentialsResult',
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "account_ids", account_ids)
        pulumi.set(__self__, "ad_analytics_reports", ad_analytics_reports)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Sequence[int]:
        return pulumi.get(self, "account_ids")

    @property
    @pulumi.getter(name="adAnalyticsReports")
    def ad_analytics_reports(self) -> Sequence['outputs.GetSourceLinkedinAdsConfigurationAdAnalyticsReportResult']:
        return pulumi.get(self, "ad_analytics_reports")

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceLinkedinAdsConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceLinkedinAdsConfigurationAdAnalyticsReportResult(dict):
    def __init__(__self__, *,
                 name: str,
                 pivot_by: str,
                 time_granularity: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "pivot_by", pivot_by)
        pulumi.set(__self__, "time_granularity", time_granularity)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pivotBy")
    def pivot_by(self) -> str:
        return pulumi.get(self, "pivot_by")

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> str:
        return pulumi.get(self, "time_granularity")


@pulumi.output_type
class GetSourceLinkedinAdsConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_linkedin_ads_authentication_access_token: 'outputs.GetSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationAccessTokenResult',
                 source_linkedin_ads_authentication_o_auth20: 'outputs.GetSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationOAuth20Result',
                 source_linkedin_ads_update_authentication_access_token: 'outputs.GetSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationAccessTokenResult',
                 source_linkedin_ads_update_authentication_o_auth20: 'outputs.GetSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationOAuth20Result'):
        pulumi.set(__self__, "source_linkedin_ads_authentication_access_token", source_linkedin_ads_authentication_access_token)
        pulumi.set(__self__, "source_linkedin_ads_authentication_o_auth20", source_linkedin_ads_authentication_o_auth20)
        pulumi.set(__self__, "source_linkedin_ads_update_authentication_access_token", source_linkedin_ads_update_authentication_access_token)
        pulumi.set(__self__, "source_linkedin_ads_update_authentication_o_auth20", source_linkedin_ads_update_authentication_o_auth20)

    @property
    @pulumi.getter(name="sourceLinkedinAdsAuthenticationAccessToken")
    def source_linkedin_ads_authentication_access_token(self) -> 'outputs.GetSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationAccessTokenResult':
        return pulumi.get(self, "source_linkedin_ads_authentication_access_token")

    @property
    @pulumi.getter(name="sourceLinkedinAdsAuthenticationOAuth20")
    def source_linkedin_ads_authentication_o_auth20(self) -> 'outputs.GetSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationOAuth20Result':
        return pulumi.get(self, "source_linkedin_ads_authentication_o_auth20")

    @property
    @pulumi.getter(name="sourceLinkedinAdsUpdateAuthenticationAccessToken")
    def source_linkedin_ads_update_authentication_access_token(self) -> 'outputs.GetSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationAccessTokenResult':
        return pulumi.get(self, "source_linkedin_ads_update_authentication_access_token")

    @property
    @pulumi.getter(name="sourceLinkedinAdsUpdateAuthenticationOAuth20")
    def source_linkedin_ads_update_authentication_o_auth20(self) -> 'outputs.GetSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationOAuth20Result':
        return pulumi.get(self, "source_linkedin_ads_update_authentication_o_auth20")


@pulumi.output_type
class GetSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationAccessTokenResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_method: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")


@pulumi.output_type
class GetSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationOAuth20Result(dict):
    def __init__(__self__, *,
                 auth_method: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationAccessTokenResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_method: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")


@pulumi.output_type
class GetSourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationOAuth20Result(dict):
    def __init__(__self__, *,
                 auth_method: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourceLinkedinPagesConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourceLinkedinPagesConfigurationCredentialsResult',
                 org_id: str,
                 source_type: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceLinkedinPagesConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceLinkedinPagesConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_linkedin_pages_authentication_access_token: 'outputs.GetSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationAccessTokenResult',
                 source_linkedin_pages_authentication_o_auth20: 'outputs.GetSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationOAuth20Result',
                 source_linkedin_pages_update_authentication_access_token: 'outputs.GetSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationAccessTokenResult',
                 source_linkedin_pages_update_authentication_o_auth20: 'outputs.GetSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationOAuth20Result'):
        pulumi.set(__self__, "source_linkedin_pages_authentication_access_token", source_linkedin_pages_authentication_access_token)
        pulumi.set(__self__, "source_linkedin_pages_authentication_o_auth20", source_linkedin_pages_authentication_o_auth20)
        pulumi.set(__self__, "source_linkedin_pages_update_authentication_access_token", source_linkedin_pages_update_authentication_access_token)
        pulumi.set(__self__, "source_linkedin_pages_update_authentication_o_auth20", source_linkedin_pages_update_authentication_o_auth20)

    @property
    @pulumi.getter(name="sourceLinkedinPagesAuthenticationAccessToken")
    def source_linkedin_pages_authentication_access_token(self) -> 'outputs.GetSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationAccessTokenResult':
        return pulumi.get(self, "source_linkedin_pages_authentication_access_token")

    @property
    @pulumi.getter(name="sourceLinkedinPagesAuthenticationOAuth20")
    def source_linkedin_pages_authentication_o_auth20(self) -> 'outputs.GetSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationOAuth20Result':
        return pulumi.get(self, "source_linkedin_pages_authentication_o_auth20")

    @property
    @pulumi.getter(name="sourceLinkedinPagesUpdateAuthenticationAccessToken")
    def source_linkedin_pages_update_authentication_access_token(self) -> 'outputs.GetSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationAccessTokenResult':
        return pulumi.get(self, "source_linkedin_pages_update_authentication_access_token")

    @property
    @pulumi.getter(name="sourceLinkedinPagesUpdateAuthenticationOAuth20")
    def source_linkedin_pages_update_authentication_o_auth20(self) -> 'outputs.GetSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationOAuth20Result':
        return pulumi.get(self, "source_linkedin_pages_update_authentication_o_auth20")


@pulumi.output_type
class GetSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationAccessTokenResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_method: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")


@pulumi.output_type
class GetSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationOAuth20Result(dict):
    def __init__(__self__, *,
                 auth_method: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationAccessTokenResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_method: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")


@pulumi.output_type
class GetSourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationOAuth20Result(dict):
    def __init__(__self__, *,
                 auth_method: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourceLinnworksConfigurationResult(dict):
    def __init__(__self__, *,
                 application_id: str,
                 application_secret: str,
                 source_type: str,
                 start_date: str,
                 token: str):
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "application_secret", application_secret)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> str:
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="applicationSecret")
    def application_secret(self) -> str:
        return pulumi.get(self, "application_secret")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def token(self) -> str:
        return pulumi.get(self, "token")


@pulumi.output_type
class GetSourceLokaliseConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 project_id: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceMailchimpConfigurationResult(dict):
    def __init__(__self__, *,
                 campaign_id: str,
                 credentials: 'outputs.GetSourceMailchimpConfigurationCredentialsResult',
                 source_type: str):
        pulumi.set(__self__, "campaign_id", campaign_id)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="campaignId")
    def campaign_id(self) -> str:
        return pulumi.get(self, "campaign_id")

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceMailchimpConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceMailchimpConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_mailchimp_authentication_api_key: 'outputs.GetSourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationApiKeyResult',
                 source_mailchimp_authentication_o_auth20: 'outputs.GetSourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationOAuth20Result',
                 source_mailchimp_update_authentication_api_key: 'outputs.GetSourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationApiKeyResult',
                 source_mailchimp_update_authentication_o_auth20: 'outputs.GetSourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationOAuth20Result'):
        pulumi.set(__self__, "source_mailchimp_authentication_api_key", source_mailchimp_authentication_api_key)
        pulumi.set(__self__, "source_mailchimp_authentication_o_auth20", source_mailchimp_authentication_o_auth20)
        pulumi.set(__self__, "source_mailchimp_update_authentication_api_key", source_mailchimp_update_authentication_api_key)
        pulumi.set(__self__, "source_mailchimp_update_authentication_o_auth20", source_mailchimp_update_authentication_o_auth20)

    @property
    @pulumi.getter(name="sourceMailchimpAuthenticationApiKey")
    def source_mailchimp_authentication_api_key(self) -> 'outputs.GetSourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationApiKeyResult':
        return pulumi.get(self, "source_mailchimp_authentication_api_key")

    @property
    @pulumi.getter(name="sourceMailchimpAuthenticationOAuth20")
    def source_mailchimp_authentication_o_auth20(self) -> 'outputs.GetSourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationOAuth20Result':
        return pulumi.get(self, "source_mailchimp_authentication_o_auth20")

    @property
    @pulumi.getter(name="sourceMailchimpUpdateAuthenticationApiKey")
    def source_mailchimp_update_authentication_api_key(self) -> 'outputs.GetSourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationApiKeyResult':
        return pulumi.get(self, "source_mailchimp_update_authentication_api_key")

    @property
    @pulumi.getter(name="sourceMailchimpUpdateAuthenticationOAuth20")
    def source_mailchimp_update_authentication_o_auth20(self) -> 'outputs.GetSourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationOAuth20Result':
        return pulumi.get(self, "source_mailchimp_update_authentication_o_auth20")


@pulumi.output_type
class GetSourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationApiKeyResult(dict):
    def __init__(__self__, *,
                 apikey: str,
                 auth_type: str):
        pulumi.set(__self__, "apikey", apikey)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter
    def apikey(self) -> str:
        return pulumi.get(self, "apikey")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class GetSourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class GetSourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationApiKeyResult(dict):
    def __init__(__self__, *,
                 apikey: str,
                 auth_type: str):
        pulumi.set(__self__, "apikey", apikey)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter
    def apikey(self) -> str:
        return pulumi.get(self, "apikey")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class GetSourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class GetSourceMailgunConfigurationResult(dict):
    def __init__(__self__, *,
                 domain_region: str,
                 private_key: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "domain_region", domain_region)
        pulumi.set(__self__, "private_key", private_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="domainRegion")
    def domain_region(self) -> str:
        return pulumi.get(self, "domain_region")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> str:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceMailjetSmsConfigurationResult(dict):
    def __init__(__self__, *,
                 end_date: int,
                 source_type: str,
                 start_date: int,
                 token: str):
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> int:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> int:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def token(self) -> str:
        return pulumi.get(self, "token")


@pulumi.output_type
class GetSourceMarketoConfigurationResult(dict):
    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 domain_url: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "domain_url", domain_url)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="domainUrl")
    def domain_url(self) -> str:
        return pulumi.get(self, "domain_url")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceMetabaseConfigurationResult(dict):
    def __init__(__self__, *,
                 instance_api_url: str,
                 password: str,
                 session_token: str,
                 source_type: str,
                 username: str):
        pulumi.set(__self__, "instance_api_url", instance_api_url)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "session_token", session_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="instanceApiUrl")
    def instance_api_url(self) -> str:
        return pulumi.get(self, "instance_api_url")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="sessionToken")
    def session_token(self) -> str:
        return pulumi.get(self, "session_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSourceMicrosoftTeamsConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourceMicrosoftTeamsConfigurationCredentialsResult',
                 period: str,
                 source_type: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceMicrosoftTeamsConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def period(self) -> str:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceMicrosoftTeamsConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft: 'outputs.GetSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftResult',
                 source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft_o_auth20: 'outputs.GetSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20Result',
                 source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft: 'outputs.GetSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftResult',
                 source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft_o_auth20: 'outputs.GetSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20Result'):
        pulumi.set(__self__, "source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft", source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft)
        pulumi.set(__self__, "source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft_o_auth20", source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft_o_auth20)
        pulumi.set(__self__, "source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft", source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft)
        pulumi.set(__self__, "source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft_o_auth20", source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft_o_auth20)

    @property
    @pulumi.getter(name="sourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft")
    def source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft(self) -> 'outputs.GetSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftResult':
        return pulumi.get(self, "source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft")

    @property
    @pulumi.getter(name="sourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20")
    def source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft_o_auth20(self) -> 'outputs.GetSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20Result':
        return pulumi.get(self, "source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft_o_auth20")

    @property
    @pulumi.getter(name="sourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoft")
    def source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft(self) -> 'outputs.GetSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftResult':
        return pulumi.get(self, "source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft")

    @property
    @pulumi.getter(name="sourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20")
    def source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft_o_auth20(self) -> 'outputs.GetSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20Result':
        return pulumi.get(self, "source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft_o_auth20")


@pulumi.output_type
class GetSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 tenant_id: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class GetSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20Result(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 tenant_id: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class GetSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 tenant_id: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class GetSourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20Result(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 tenant_id: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class GetSourceMixpanelConfigurationResult(dict):
    def __init__(__self__, *,
                 attribution_window: int,
                 credentials: 'outputs.GetSourceMixpanelConfigurationCredentialsResult',
                 date_window_size: int,
                 end_date: str,
                 project_id: int,
                 project_timezone: str,
                 region: str,
                 select_properties_by_default: bool,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "attribution_window", attribution_window)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "date_window_size", date_window_size)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "project_timezone", project_timezone)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "select_properties_by_default", select_properties_by_default)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="attributionWindow")
    def attribution_window(self) -> int:
        return pulumi.get(self, "attribution_window")

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceMixpanelConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="dateWindowSize")
    def date_window_size(self) -> int:
        return pulumi.get(self, "date_window_size")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="projectTimezone")
    def project_timezone(self) -> str:
        return pulumi.get(self, "project_timezone")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="selectPropertiesByDefault")
    def select_properties_by_default(self) -> bool:
        return pulumi.get(self, "select_properties_by_default")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceMixpanelConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_mixpanel_authentication_wildcard_project_secret: 'outputs.GetSourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecretResult',
                 source_mixpanel_authentication_wildcard_service_account: 'outputs.GetSourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccountResult',
                 source_mixpanel_update_authentication_wildcard_project_secret: 'outputs.GetSourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecretResult',
                 source_mixpanel_update_authentication_wildcard_service_account: 'outputs.GetSourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccountResult'):
        pulumi.set(__self__, "source_mixpanel_authentication_wildcard_project_secret", source_mixpanel_authentication_wildcard_project_secret)
        pulumi.set(__self__, "source_mixpanel_authentication_wildcard_service_account", source_mixpanel_authentication_wildcard_service_account)
        pulumi.set(__self__, "source_mixpanel_update_authentication_wildcard_project_secret", source_mixpanel_update_authentication_wildcard_project_secret)
        pulumi.set(__self__, "source_mixpanel_update_authentication_wildcard_service_account", source_mixpanel_update_authentication_wildcard_service_account)

    @property
    @pulumi.getter(name="sourceMixpanelAuthenticationWildcardProjectSecret")
    def source_mixpanel_authentication_wildcard_project_secret(self) -> 'outputs.GetSourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecretResult':
        return pulumi.get(self, "source_mixpanel_authentication_wildcard_project_secret")

    @property
    @pulumi.getter(name="sourceMixpanelAuthenticationWildcardServiceAccount")
    def source_mixpanel_authentication_wildcard_service_account(self) -> 'outputs.GetSourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccountResult':
        return pulumi.get(self, "source_mixpanel_authentication_wildcard_service_account")

    @property
    @pulumi.getter(name="sourceMixpanelUpdateAuthenticationWildcardProjectSecret")
    def source_mixpanel_update_authentication_wildcard_project_secret(self) -> 'outputs.GetSourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecretResult':
        return pulumi.get(self, "source_mixpanel_update_authentication_wildcard_project_secret")

    @property
    @pulumi.getter(name="sourceMixpanelUpdateAuthenticationWildcardServiceAccount")
    def source_mixpanel_update_authentication_wildcard_service_account(self) -> 'outputs.GetSourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccountResult':
        return pulumi.get(self, "source_mixpanel_update_authentication_wildcard_service_account")


@pulumi.output_type
class GetSourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecretResult(dict):
    def __init__(__self__, *,
                 api_secret: str,
                 option_title: str):
        pulumi.set(__self__, "api_secret", api_secret)
        pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="apiSecret")
    def api_secret(self) -> str:
        return pulumi.get(self, "api_secret")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> str:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class GetSourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccountResult(dict):
    def __init__(__self__, *,
                 option_title: str,
                 secret: str,
                 username: str):
        pulumi.set(__self__, "option_title", option_title)
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> str:
        return pulumi.get(self, "option_title")

    @property
    @pulumi.getter
    def secret(self) -> str:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecretResult(dict):
    def __init__(__self__, *,
                 api_secret: str,
                 option_title: str):
        pulumi.set(__self__, "api_secret", api_secret)
        pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="apiSecret")
    def api_secret(self) -> str:
        return pulumi.get(self, "api_secret")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> str:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class GetSourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccountResult(dict):
    def __init__(__self__, *,
                 option_title: str,
                 secret: str,
                 username: str):
        pulumi.set(__self__, "option_title", option_title)
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> str:
        return pulumi.get(self, "option_title")

    @property
    @pulumi.getter
    def secret(self) -> str:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSourceMondayConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourceMondayConfigurationCredentialsResult',
                 source_type: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceMondayConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceMondayConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_monday_authorization_method_api_token: 'outputs.GetSourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodApiTokenResult',
                 source_monday_authorization_method_o_auth20: 'outputs.GetSourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodOAuth20Result',
                 source_monday_update_authorization_method_api_token: 'outputs.GetSourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodApiTokenResult',
                 source_monday_update_authorization_method_o_auth20: 'outputs.GetSourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodOAuth20Result'):
        pulumi.set(__self__, "source_monday_authorization_method_api_token", source_monday_authorization_method_api_token)
        pulumi.set(__self__, "source_monday_authorization_method_o_auth20", source_monday_authorization_method_o_auth20)
        pulumi.set(__self__, "source_monday_update_authorization_method_api_token", source_monday_update_authorization_method_api_token)
        pulumi.set(__self__, "source_monday_update_authorization_method_o_auth20", source_monday_update_authorization_method_o_auth20)

    @property
    @pulumi.getter(name="sourceMondayAuthorizationMethodApiToken")
    def source_monday_authorization_method_api_token(self) -> 'outputs.GetSourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodApiTokenResult':
        return pulumi.get(self, "source_monday_authorization_method_api_token")

    @property
    @pulumi.getter(name="sourceMondayAuthorizationMethodOAuth20")
    def source_monday_authorization_method_o_auth20(self) -> 'outputs.GetSourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodOAuth20Result':
        return pulumi.get(self, "source_monday_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourceMondayUpdateAuthorizationMethodApiToken")
    def source_monday_update_authorization_method_api_token(self) -> 'outputs.GetSourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodApiTokenResult':
        return pulumi.get(self, "source_monday_update_authorization_method_api_token")

    @property
    @pulumi.getter(name="sourceMondayUpdateAuthorizationMethodOAuth20")
    def source_monday_update_authorization_method_o_auth20(self) -> 'outputs.GetSourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodOAuth20Result':
        return pulumi.get(self, "source_monday_update_authorization_method_o_auth20")


@pulumi.output_type
class GetSourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodApiTokenResult(dict):
    def __init__(__self__, *,
                 api_token: str,
                 auth_type: str):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class GetSourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 subdomain: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "subdomain", subdomain)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter
    def subdomain(self) -> str:
        return pulumi.get(self, "subdomain")


@pulumi.output_type
class GetSourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodApiTokenResult(dict):
    def __init__(__self__, *,
                 api_token: str,
                 auth_type: str):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class GetSourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 subdomain: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "subdomain", subdomain)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter
    def subdomain(self) -> str:
        return pulumi.get(self, "subdomain")


@pulumi.output_type
class GetSourceMongodbConfigurationResult(dict):
    def __init__(__self__, *,
                 auth_source: str,
                 database: str,
                 instance_type: 'outputs.GetSourceMongodbConfigurationInstanceTypeResult',
                 password: str,
                 source_type: str,
                 user: str):
        pulumi.set(__self__, "auth_source", auth_source)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="authSource")
    def auth_source(self) -> str:
        return pulumi.get(self, "auth_source")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> 'outputs.GetSourceMongodbConfigurationInstanceTypeResult':
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")


@pulumi.output_type
class GetSourceMongodbConfigurationInstanceTypeResult(dict):
    def __init__(__self__, *,
                 source_mongodb_mongo_db_instance_type_mongo_db_atlas: 'outputs.GetSourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeMongoDbAtlasResult',
                 source_mongodb_mongo_db_instance_type_replica_set: 'outputs.GetSourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeReplicaSetResult',
                 source_mongodb_mongo_db_instance_type_standalone_mongo_db_instance: 'outputs.GetSourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceResult',
                 source_mongodb_update_mongo_db_instance_type_mongo_db_atlas: 'outputs.GetSourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlasResult',
                 source_mongodb_update_mongo_db_instance_type_replica_set: 'outputs.GetSourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSetResult',
                 source_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance: 'outputs.GetSourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceResult'):
        pulumi.set(__self__, "source_mongodb_mongo_db_instance_type_mongo_db_atlas", source_mongodb_mongo_db_instance_type_mongo_db_atlas)
        pulumi.set(__self__, "source_mongodb_mongo_db_instance_type_replica_set", source_mongodb_mongo_db_instance_type_replica_set)
        pulumi.set(__self__, "source_mongodb_mongo_db_instance_type_standalone_mongo_db_instance", source_mongodb_mongo_db_instance_type_standalone_mongo_db_instance)
        pulumi.set(__self__, "source_mongodb_update_mongo_db_instance_type_mongo_db_atlas", source_mongodb_update_mongo_db_instance_type_mongo_db_atlas)
        pulumi.set(__self__, "source_mongodb_update_mongo_db_instance_type_replica_set", source_mongodb_update_mongo_db_instance_type_replica_set)
        pulumi.set(__self__, "source_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance", source_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance)

    @property
    @pulumi.getter(name="sourceMongodbMongoDbInstanceTypeMongoDbAtlas")
    def source_mongodb_mongo_db_instance_type_mongo_db_atlas(self) -> 'outputs.GetSourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeMongoDbAtlasResult':
        return pulumi.get(self, "source_mongodb_mongo_db_instance_type_mongo_db_atlas")

    @property
    @pulumi.getter(name="sourceMongodbMongoDbInstanceTypeReplicaSet")
    def source_mongodb_mongo_db_instance_type_replica_set(self) -> 'outputs.GetSourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeReplicaSetResult':
        return pulumi.get(self, "source_mongodb_mongo_db_instance_type_replica_set")

    @property
    @pulumi.getter(name="sourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance")
    def source_mongodb_mongo_db_instance_type_standalone_mongo_db_instance(self) -> 'outputs.GetSourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceResult':
        return pulumi.get(self, "source_mongodb_mongo_db_instance_type_standalone_mongo_db_instance")

    @property
    @pulumi.getter(name="sourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlas")
    def source_mongodb_update_mongo_db_instance_type_mongo_db_atlas(self) -> 'outputs.GetSourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlasResult':
        return pulumi.get(self, "source_mongodb_update_mongo_db_instance_type_mongo_db_atlas")

    @property
    @pulumi.getter(name="sourceMongodbUpdateMongoDbInstanceTypeReplicaSet")
    def source_mongodb_update_mongo_db_instance_type_replica_set(self) -> 'outputs.GetSourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSetResult':
        return pulumi.get(self, "source_mongodb_update_mongo_db_instance_type_replica_set")

    @property
    @pulumi.getter(name="sourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance")
    def source_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance(self) -> 'outputs.GetSourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceResult':
        return pulumi.get(self, "source_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance")


@pulumi.output_type
class GetSourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeMongoDbAtlasResult(dict):
    def __init__(__self__, *,
                 cluster_url: str,
                 instance: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "cluster_url", cluster_url)
        pulumi.set(__self__, "instance", instance)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> str:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter
    def instance(self) -> str:
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeReplicaSetResult(dict):
    def __init__(__self__, *,
                 instance: str,
                 replica_set: str,
                 server_addresses: str):
        pulumi.set(__self__, "instance", instance)
        pulumi.set(__self__, "replica_set", replica_set)
        pulumi.set(__self__, "server_addresses", server_addresses)

    @property
    @pulumi.getter
    def instance(self) -> str:
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter(name="replicaSet")
    def replica_set(self) -> str:
        return pulumi.get(self, "replica_set")

    @property
    @pulumi.getter(name="serverAddresses")
    def server_addresses(self) -> str:
        return pulumi.get(self, "server_addresses")


@pulumi.output_type
class GetSourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceResult(dict):
    def __init__(__self__, *,
                 host: str,
                 instance: str,
                 port: int):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "instance", instance)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def instance(self) -> str:
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetSourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlasResult(dict):
    def __init__(__self__, *,
                 cluster_url: str,
                 instance: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "cluster_url", cluster_url)
        pulumi.set(__self__, "instance", instance)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> str:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter
    def instance(self) -> str:
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSetResult(dict):
    def __init__(__self__, *,
                 instance: str,
                 replica_set: str,
                 server_addresses: str):
        pulumi.set(__self__, "instance", instance)
        pulumi.set(__self__, "replica_set", replica_set)
        pulumi.set(__self__, "server_addresses", server_addresses)

    @property
    @pulumi.getter
    def instance(self) -> str:
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter(name="replicaSet")
    def replica_set(self) -> str:
        return pulumi.get(self, "replica_set")

    @property
    @pulumi.getter(name="serverAddresses")
    def server_addresses(self) -> str:
        return pulumi.get(self, "server_addresses")


@pulumi.output_type
class GetSourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceResult(dict):
    def __init__(__self__, *,
                 host: str,
                 instance: str,
                 port: int):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "instance", instance)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def instance(self) -> str:
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetSourceMongodbInternalPocConfigurationResult(dict):
    def __init__(__self__, *,
                 auth_source: str,
                 connection_string: str,
                 password: str,
                 replica_set: str,
                 source_type: str,
                 user: str):
        pulumi.set(__self__, "auth_source", auth_source)
        pulumi.set(__self__, "connection_string", connection_string)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "replica_set", replica_set)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="authSource")
    def auth_source(self) -> str:
        return pulumi.get(self, "auth_source")

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> str:
        return pulumi.get(self, "connection_string")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="replicaSet")
    def replica_set(self) -> str:
        return pulumi.get(self, "replica_set")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")


@pulumi.output_type
class GetSourceMssqlConfigurationResult(dict):
    def __init__(__self__, *,
                 database: str,
                 host: str,
                 jdbc_url_params: str,
                 password: str,
                 port: int,
                 replication_method: 'outputs.GetSourceMssqlConfigurationReplicationMethodResult',
                 schemas: Sequence[str],
                 source_type: str,
                 ssl_method: 'outputs.GetSourceMssqlConfigurationSslMethodResult',
                 tunnel_method: 'outputs.GetSourceMssqlConfigurationTunnelMethodResult',
                 username: str):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "replication_method", replication_method)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "ssl_method", ssl_method)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> str:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="replicationMethod")
    def replication_method(self) -> 'outputs.GetSourceMssqlConfigurationReplicationMethodResult':
        return pulumi.get(self, "replication_method")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> 'outputs.GetSourceMssqlConfigurationSslMethodResult':
        return pulumi.get(self, "ssl_method")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> 'outputs.GetSourceMssqlConfigurationTunnelMethodResult':
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSourceMssqlConfigurationReplicationMethodResult(dict):
    def __init__(__self__, *,
                 source_mssql_replication_method_logical_replication_cdc: 'outputs.GetSourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodLogicalReplicationCdcResult',
                 source_mssql_replication_method_standard: 'outputs.GetSourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodStandardResult',
                 source_mssql_update_replication_method_logical_replication_cdc: 'outputs.GetSourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodLogicalReplicationCdcResult',
                 source_mssql_update_replication_method_standard: 'outputs.GetSourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodStandardResult'):
        pulumi.set(__self__, "source_mssql_replication_method_logical_replication_cdc", source_mssql_replication_method_logical_replication_cdc)
        pulumi.set(__self__, "source_mssql_replication_method_standard", source_mssql_replication_method_standard)
        pulumi.set(__self__, "source_mssql_update_replication_method_logical_replication_cdc", source_mssql_update_replication_method_logical_replication_cdc)
        pulumi.set(__self__, "source_mssql_update_replication_method_standard", source_mssql_update_replication_method_standard)

    @property
    @pulumi.getter(name="sourceMssqlReplicationMethodLogicalReplicationCdc")
    def source_mssql_replication_method_logical_replication_cdc(self) -> 'outputs.GetSourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodLogicalReplicationCdcResult':
        return pulumi.get(self, "source_mssql_replication_method_logical_replication_cdc")

    @property
    @pulumi.getter(name="sourceMssqlReplicationMethodStandard")
    def source_mssql_replication_method_standard(self) -> 'outputs.GetSourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodStandardResult':
        return pulumi.get(self, "source_mssql_replication_method_standard")

    @property
    @pulumi.getter(name="sourceMssqlUpdateReplicationMethodLogicalReplicationCdc")
    def source_mssql_update_replication_method_logical_replication_cdc(self) -> 'outputs.GetSourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodLogicalReplicationCdcResult':
        return pulumi.get(self, "source_mssql_update_replication_method_logical_replication_cdc")

    @property
    @pulumi.getter(name="sourceMssqlUpdateReplicationMethodStandard")
    def source_mssql_update_replication_method_standard(self) -> 'outputs.GetSourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodStandardResult':
        return pulumi.get(self, "source_mssql_update_replication_method_standard")


@pulumi.output_type
class GetSourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodLogicalReplicationCdcResult(dict):
    def __init__(__self__, *,
                 data_to_sync: str,
                 initial_waiting_seconds: int,
                 method: str,
                 snapshot_isolation: str):
        pulumi.set(__self__, "data_to_sync", data_to_sync)
        pulumi.set(__self__, "initial_waiting_seconds", initial_waiting_seconds)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "snapshot_isolation", snapshot_isolation)

    @property
    @pulumi.getter(name="dataToSync")
    def data_to_sync(self) -> str:
        return pulumi.get(self, "data_to_sync")

    @property
    @pulumi.getter(name="initialWaitingSeconds")
    def initial_waiting_seconds(self) -> int:
        return pulumi.get(self, "initial_waiting_seconds")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="snapshotIsolation")
    def snapshot_isolation(self) -> str:
        return pulumi.get(self, "snapshot_isolation")


@pulumi.output_type
class GetSourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodStandardResult(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class GetSourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodLogicalReplicationCdcResult(dict):
    def __init__(__self__, *,
                 data_to_sync: str,
                 initial_waiting_seconds: int,
                 method: str,
                 snapshot_isolation: str):
        pulumi.set(__self__, "data_to_sync", data_to_sync)
        pulumi.set(__self__, "initial_waiting_seconds", initial_waiting_seconds)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "snapshot_isolation", snapshot_isolation)

    @property
    @pulumi.getter(name="dataToSync")
    def data_to_sync(self) -> str:
        return pulumi.get(self, "data_to_sync")

    @property
    @pulumi.getter(name="initialWaitingSeconds")
    def initial_waiting_seconds(self) -> int:
        return pulumi.get(self, "initial_waiting_seconds")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="snapshotIsolation")
    def snapshot_isolation(self) -> str:
        return pulumi.get(self, "snapshot_isolation")


@pulumi.output_type
class GetSourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodStandardResult(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class GetSourceMssqlConfigurationSslMethodResult(dict):
    def __init__(__self__, *,
                 source_mssql_ssl_method_encrypted_trust_server_certificate: 'outputs.GetSourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedTrustServerCertificateResult',
                 source_mssql_ssl_method_encrypted_verify_certificate: 'outputs.GetSourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedVerifyCertificateResult',
                 source_mssql_update_ssl_method_encrypted_trust_server_certificate: 'outputs.GetSourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedTrustServerCertificateResult',
                 source_mssql_update_ssl_method_encrypted_verify_certificate: 'outputs.GetSourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedVerifyCertificateResult'):
        pulumi.set(__self__, "source_mssql_ssl_method_encrypted_trust_server_certificate", source_mssql_ssl_method_encrypted_trust_server_certificate)
        pulumi.set(__self__, "source_mssql_ssl_method_encrypted_verify_certificate", source_mssql_ssl_method_encrypted_verify_certificate)
        pulumi.set(__self__, "source_mssql_update_ssl_method_encrypted_trust_server_certificate", source_mssql_update_ssl_method_encrypted_trust_server_certificate)
        pulumi.set(__self__, "source_mssql_update_ssl_method_encrypted_verify_certificate", source_mssql_update_ssl_method_encrypted_verify_certificate)

    @property
    @pulumi.getter(name="sourceMssqlSslMethodEncryptedTrustServerCertificate")
    def source_mssql_ssl_method_encrypted_trust_server_certificate(self) -> 'outputs.GetSourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedTrustServerCertificateResult':
        return pulumi.get(self, "source_mssql_ssl_method_encrypted_trust_server_certificate")

    @property
    @pulumi.getter(name="sourceMssqlSslMethodEncryptedVerifyCertificate")
    def source_mssql_ssl_method_encrypted_verify_certificate(self) -> 'outputs.GetSourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedVerifyCertificateResult':
        return pulumi.get(self, "source_mssql_ssl_method_encrypted_verify_certificate")

    @property
    @pulumi.getter(name="sourceMssqlUpdateSslMethodEncryptedTrustServerCertificate")
    def source_mssql_update_ssl_method_encrypted_trust_server_certificate(self) -> 'outputs.GetSourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedTrustServerCertificateResult':
        return pulumi.get(self, "source_mssql_update_ssl_method_encrypted_trust_server_certificate")

    @property
    @pulumi.getter(name="sourceMssqlUpdateSslMethodEncryptedVerifyCertificate")
    def source_mssql_update_ssl_method_encrypted_verify_certificate(self) -> 'outputs.GetSourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedVerifyCertificateResult':
        return pulumi.get(self, "source_mssql_update_ssl_method_encrypted_verify_certificate")


@pulumi.output_type
class GetSourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedTrustServerCertificateResult(dict):
    def __init__(__self__, *,
                 ssl_method: str):
        pulumi.set(__self__, "ssl_method", ssl_method)

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> str:
        return pulumi.get(self, "ssl_method")


@pulumi.output_type
class GetSourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedVerifyCertificateResult(dict):
    def __init__(__self__, *,
                 host_name_in_certificate: str,
                 ssl_method: str):
        pulumi.set(__self__, "host_name_in_certificate", host_name_in_certificate)
        pulumi.set(__self__, "ssl_method", ssl_method)

    @property
    @pulumi.getter(name="hostNameInCertificate")
    def host_name_in_certificate(self) -> str:
        return pulumi.get(self, "host_name_in_certificate")

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> str:
        return pulumi.get(self, "ssl_method")


@pulumi.output_type
class GetSourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedTrustServerCertificateResult(dict):
    def __init__(__self__, *,
                 ssl_method: str):
        pulumi.set(__self__, "ssl_method", ssl_method)

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> str:
        return pulumi.get(self, "ssl_method")


@pulumi.output_type
class GetSourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedVerifyCertificateResult(dict):
    def __init__(__self__, *,
                 host_name_in_certificate: str,
                 ssl_method: str):
        pulumi.set(__self__, "host_name_in_certificate", host_name_in_certificate)
        pulumi.set(__self__, "ssl_method", ssl_method)

    @property
    @pulumi.getter(name="hostNameInCertificate")
    def host_name_in_certificate(self) -> str:
        return pulumi.get(self, "host_name_in_certificate")

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> str:
        return pulumi.get(self, "ssl_method")


@pulumi.output_type
class GetSourceMssqlConfigurationTunnelMethodResult(dict):
    def __init__(__self__, *,
                 source_mssql_ssh_tunnel_method_no_tunnel: 'outputs.GetSourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodNoTunnelResult',
                 source_mssql_ssh_tunnel_method_password_authentication: 'outputs.GetSourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodPasswordAuthenticationResult',
                 source_mssql_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetSourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodSshKeyAuthenticationResult',
                 source_mssql_update_ssh_tunnel_method_no_tunnel: 'outputs.GetSourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodNoTunnelResult',
                 source_mssql_update_ssh_tunnel_method_password_authentication: 'outputs.GetSourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodPasswordAuthenticationResult',
                 source_mssql_update_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetSourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodSshKeyAuthenticationResult'):
        pulumi.set(__self__, "source_mssql_ssh_tunnel_method_no_tunnel", source_mssql_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "source_mssql_ssh_tunnel_method_password_authentication", source_mssql_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "source_mssql_ssh_tunnel_method_ssh_key_authentication", source_mssql_ssh_tunnel_method_ssh_key_authentication)
        pulumi.set(__self__, "source_mssql_update_ssh_tunnel_method_no_tunnel", source_mssql_update_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "source_mssql_update_ssh_tunnel_method_password_authentication", source_mssql_update_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "source_mssql_update_ssh_tunnel_method_ssh_key_authentication", source_mssql_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="sourceMssqlSshTunnelMethodNoTunnel")
    def source_mssql_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetSourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "source_mssql_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="sourceMssqlSshTunnelMethodPasswordAuthentication")
    def source_mssql_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetSourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "source_mssql_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="sourceMssqlSshTunnelMethodSshKeyAuthentication")
    def source_mssql_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetSourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "source_mssql_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="sourceMssqlUpdateSshTunnelMethodNoTunnel")
    def source_mssql_update_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetSourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "source_mssql_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="sourceMssqlUpdateSshTunnelMethodPasswordAuthentication")
    def source_mssql_update_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetSourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "source_mssql_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="sourceMssqlUpdateSshTunnelMethodSshKeyAuthentication")
    def source_mssql_update_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetSourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "source_mssql_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class GetSourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetSourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetSourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetSourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetSourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetSourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetSourceMyHoursConfigurationResult(dict):
    def __init__(__self__, *,
                 email: str,
                 logs_batch_size: int,
                 password: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "logs_batch_size", logs_batch_size)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="logsBatchSize")
    def logs_batch_size(self) -> int:
        return pulumi.get(self, "logs_batch_size")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceMysqlConfigurationResult(dict):
    def __init__(__self__, *,
                 database: str,
                 host: str,
                 jdbc_url_params: str,
                 password: str,
                 port: int,
                 replication_method: 'outputs.GetSourceMysqlConfigurationReplicationMethodResult',
                 source_type: str,
                 ssl_mode: 'outputs.GetSourceMysqlConfigurationSslModeResult',
                 tunnel_method: 'outputs.GetSourceMysqlConfigurationTunnelMethodResult',
                 username: str):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "replication_method", replication_method)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "ssl_mode", ssl_mode)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> str:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="replicationMethod")
    def replication_method(self) -> 'outputs.GetSourceMysqlConfigurationReplicationMethodResult':
        return pulumi.get(self, "replication_method")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> 'outputs.GetSourceMysqlConfigurationSslModeResult':
        return pulumi.get(self, "ssl_mode")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> 'outputs.GetSourceMysqlConfigurationTunnelMethodResult':
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSourceMysqlConfigurationReplicationMethodResult(dict):
    def __init__(__self__, *,
                 source_mysql_update_method_read_changes_using_binary_log_cdc: 'outputs.GetSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodReadChangesUsingBinaryLogCdcResult',
                 source_mysql_update_method_scan_changes_with_user_defined_cursor: 'outputs.GetSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodScanChangesWithUserDefinedCursorResult',
                 source_mysql_update_update_method_read_changes_using_binary_log_cdc: 'outputs.GetSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdcResult',
                 source_mysql_update_update_method_scan_changes_with_user_defined_cursor: 'outputs.GetSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursorResult'):
        pulumi.set(__self__, "source_mysql_update_method_read_changes_using_binary_log_cdc", source_mysql_update_method_read_changes_using_binary_log_cdc)
        pulumi.set(__self__, "source_mysql_update_method_scan_changes_with_user_defined_cursor", source_mysql_update_method_scan_changes_with_user_defined_cursor)
        pulumi.set(__self__, "source_mysql_update_update_method_read_changes_using_binary_log_cdc", source_mysql_update_update_method_read_changes_using_binary_log_cdc)
        pulumi.set(__self__, "source_mysql_update_update_method_scan_changes_with_user_defined_cursor", source_mysql_update_update_method_scan_changes_with_user_defined_cursor)

    @property
    @pulumi.getter(name="sourceMysqlUpdateMethodReadChangesUsingBinaryLogCdc")
    def source_mysql_update_method_read_changes_using_binary_log_cdc(self) -> 'outputs.GetSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodReadChangesUsingBinaryLogCdcResult':
        return pulumi.get(self, "source_mysql_update_method_read_changes_using_binary_log_cdc")

    @property
    @pulumi.getter(name="sourceMysqlUpdateMethodScanChangesWithUserDefinedCursor")
    def source_mysql_update_method_scan_changes_with_user_defined_cursor(self) -> 'outputs.GetSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodScanChangesWithUserDefinedCursorResult':
        return pulumi.get(self, "source_mysql_update_method_scan_changes_with_user_defined_cursor")

    @property
    @pulumi.getter(name="sourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdc")
    def source_mysql_update_update_method_read_changes_using_binary_log_cdc(self) -> 'outputs.GetSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdcResult':
        return pulumi.get(self, "source_mysql_update_update_method_read_changes_using_binary_log_cdc")

    @property
    @pulumi.getter(name="sourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursor")
    def source_mysql_update_update_method_scan_changes_with_user_defined_cursor(self) -> 'outputs.GetSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursorResult':
        return pulumi.get(self, "source_mysql_update_update_method_scan_changes_with_user_defined_cursor")


@pulumi.output_type
class GetSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodReadChangesUsingBinaryLogCdcResult(dict):
    def __init__(__self__, *,
                 initial_waiting_seconds: int,
                 method: str,
                 server_time_zone: str):
        pulumi.set(__self__, "initial_waiting_seconds", initial_waiting_seconds)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "server_time_zone", server_time_zone)

    @property
    @pulumi.getter(name="initialWaitingSeconds")
    def initial_waiting_seconds(self) -> int:
        return pulumi.get(self, "initial_waiting_seconds")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="serverTimeZone")
    def server_time_zone(self) -> str:
        return pulumi.get(self, "server_time_zone")


@pulumi.output_type
class GetSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodScanChangesWithUserDefinedCursorResult(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class GetSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdcResult(dict):
    def __init__(__self__, *,
                 initial_waiting_seconds: int,
                 method: str,
                 server_time_zone: str):
        pulumi.set(__self__, "initial_waiting_seconds", initial_waiting_seconds)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "server_time_zone", server_time_zone)

    @property
    @pulumi.getter(name="initialWaitingSeconds")
    def initial_waiting_seconds(self) -> int:
        return pulumi.get(self, "initial_waiting_seconds")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="serverTimeZone")
    def server_time_zone(self) -> str:
        return pulumi.get(self, "server_time_zone")


@pulumi.output_type
class GetSourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursorResult(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class GetSourceMysqlConfigurationSslModeResult(dict):
    def __init__(__self__, *,
                 source_mysql_ssl_modes_preferred: 'outputs.GetSourceMysqlConfigurationSslModeSourceMysqlSslModesPreferredResult',
                 source_mysql_ssl_modes_required: 'outputs.GetSourceMysqlConfigurationSslModeSourceMysqlSslModesRequiredResult',
                 source_mysql_ssl_modes_verify_ca: 'outputs.GetSourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyCaResult',
                 source_mysql_ssl_modes_verify_identity: 'outputs.GetSourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyIdentityResult',
                 source_mysql_update_ssl_modes_preferred: 'outputs.GetSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesPreferredResult',
                 source_mysql_update_ssl_modes_required: 'outputs.GetSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesRequiredResult',
                 source_mysql_update_ssl_modes_verify_ca: 'outputs.GetSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyCaResult',
                 source_mysql_update_ssl_modes_verify_identity: 'outputs.GetSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyIdentityResult'):
        pulumi.set(__self__, "source_mysql_ssl_modes_preferred", source_mysql_ssl_modes_preferred)
        pulumi.set(__self__, "source_mysql_ssl_modes_required", source_mysql_ssl_modes_required)
        pulumi.set(__self__, "source_mysql_ssl_modes_verify_ca", source_mysql_ssl_modes_verify_ca)
        pulumi.set(__self__, "source_mysql_ssl_modes_verify_identity", source_mysql_ssl_modes_verify_identity)
        pulumi.set(__self__, "source_mysql_update_ssl_modes_preferred", source_mysql_update_ssl_modes_preferred)
        pulumi.set(__self__, "source_mysql_update_ssl_modes_required", source_mysql_update_ssl_modes_required)
        pulumi.set(__self__, "source_mysql_update_ssl_modes_verify_ca", source_mysql_update_ssl_modes_verify_ca)
        pulumi.set(__self__, "source_mysql_update_ssl_modes_verify_identity", source_mysql_update_ssl_modes_verify_identity)

    @property
    @pulumi.getter(name="sourceMysqlSslModesPreferred")
    def source_mysql_ssl_modes_preferred(self) -> 'outputs.GetSourceMysqlConfigurationSslModeSourceMysqlSslModesPreferredResult':
        return pulumi.get(self, "source_mysql_ssl_modes_preferred")

    @property
    @pulumi.getter(name="sourceMysqlSslModesRequired")
    def source_mysql_ssl_modes_required(self) -> 'outputs.GetSourceMysqlConfigurationSslModeSourceMysqlSslModesRequiredResult':
        return pulumi.get(self, "source_mysql_ssl_modes_required")

    @property
    @pulumi.getter(name="sourceMysqlSslModesVerifyCa")
    def source_mysql_ssl_modes_verify_ca(self) -> 'outputs.GetSourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyCaResult':
        return pulumi.get(self, "source_mysql_ssl_modes_verify_ca")

    @property
    @pulumi.getter(name="sourceMysqlSslModesVerifyIdentity")
    def source_mysql_ssl_modes_verify_identity(self) -> 'outputs.GetSourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyIdentityResult':
        return pulumi.get(self, "source_mysql_ssl_modes_verify_identity")

    @property
    @pulumi.getter(name="sourceMysqlUpdateSslModesPreferred")
    def source_mysql_update_ssl_modes_preferred(self) -> 'outputs.GetSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesPreferredResult':
        return pulumi.get(self, "source_mysql_update_ssl_modes_preferred")

    @property
    @pulumi.getter(name="sourceMysqlUpdateSslModesRequired")
    def source_mysql_update_ssl_modes_required(self) -> 'outputs.GetSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesRequiredResult':
        return pulumi.get(self, "source_mysql_update_ssl_modes_required")

    @property
    @pulumi.getter(name="sourceMysqlUpdateSslModesVerifyCa")
    def source_mysql_update_ssl_modes_verify_ca(self) -> 'outputs.GetSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyCaResult':
        return pulumi.get(self, "source_mysql_update_ssl_modes_verify_ca")

    @property
    @pulumi.getter(name="sourceMysqlUpdateSslModesVerifyIdentity")
    def source_mysql_update_ssl_modes_verify_identity(self) -> 'outputs.GetSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyIdentityResult':
        return pulumi.get(self, "source_mysql_update_ssl_modes_verify_identity")


@pulumi.output_type
class GetSourceMysqlConfigurationSslModeSourceMysqlSslModesPreferredResult(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetSourceMysqlConfigurationSslModeSourceMysqlSslModesRequiredResult(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetSourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyCaResult(dict):
    def __init__(__self__, *,
                 ca_certificate: str,
                 client_certificate: str,
                 client_key: str,
                 client_key_password: str,
                 mode: str):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "client_certificate", client_certificate)
        pulumi.set(__self__, "client_key", client_key)
        pulumi.set(__self__, "client_key_password", client_key_password)
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> str:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> str:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> str:
        return pulumi.get(self, "client_key_password")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetSourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyIdentityResult(dict):
    def __init__(__self__, *,
                 ca_certificate: str,
                 client_certificate: str,
                 client_key: str,
                 client_key_password: str,
                 mode: str):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "client_certificate", client_certificate)
        pulumi.set(__self__, "client_key", client_key)
        pulumi.set(__self__, "client_key_password", client_key_password)
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> str:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> str:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> str:
        return pulumi.get(self, "client_key_password")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesPreferredResult(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesRequiredResult(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyCaResult(dict):
    def __init__(__self__, *,
                 ca_certificate: str,
                 client_certificate: str,
                 client_key: str,
                 client_key_password: str,
                 mode: str):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "client_certificate", client_certificate)
        pulumi.set(__self__, "client_key", client_key)
        pulumi.set(__self__, "client_key_password", client_key_password)
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> str:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> str:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> str:
        return pulumi.get(self, "client_key_password")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetSourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyIdentityResult(dict):
    def __init__(__self__, *,
                 ca_certificate: str,
                 client_certificate: str,
                 client_key: str,
                 client_key_password: str,
                 mode: str):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "client_certificate", client_certificate)
        pulumi.set(__self__, "client_key", client_key)
        pulumi.set(__self__, "client_key_password", client_key_password)
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> str:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> str:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> str:
        return pulumi.get(self, "client_key_password")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetSourceMysqlConfigurationTunnelMethodResult(dict):
    def __init__(__self__, *,
                 source_mysql_ssh_tunnel_method_no_tunnel: 'outputs.GetSourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodNoTunnelResult',
                 source_mysql_ssh_tunnel_method_password_authentication: 'outputs.GetSourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodPasswordAuthenticationResult',
                 source_mysql_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetSourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodSshKeyAuthenticationResult',
                 source_mysql_update_ssh_tunnel_method_no_tunnel: 'outputs.GetSourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodNoTunnelResult',
                 source_mysql_update_ssh_tunnel_method_password_authentication: 'outputs.GetSourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodPasswordAuthenticationResult',
                 source_mysql_update_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetSourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodSshKeyAuthenticationResult'):
        pulumi.set(__self__, "source_mysql_ssh_tunnel_method_no_tunnel", source_mysql_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "source_mysql_ssh_tunnel_method_password_authentication", source_mysql_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "source_mysql_ssh_tunnel_method_ssh_key_authentication", source_mysql_ssh_tunnel_method_ssh_key_authentication)
        pulumi.set(__self__, "source_mysql_update_ssh_tunnel_method_no_tunnel", source_mysql_update_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "source_mysql_update_ssh_tunnel_method_password_authentication", source_mysql_update_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "source_mysql_update_ssh_tunnel_method_ssh_key_authentication", source_mysql_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="sourceMysqlSshTunnelMethodNoTunnel")
    def source_mysql_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetSourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "source_mysql_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="sourceMysqlSshTunnelMethodPasswordAuthentication")
    def source_mysql_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetSourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "source_mysql_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="sourceMysqlSshTunnelMethodSshKeyAuthentication")
    def source_mysql_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetSourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "source_mysql_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="sourceMysqlUpdateSshTunnelMethodNoTunnel")
    def source_mysql_update_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetSourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "source_mysql_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="sourceMysqlUpdateSshTunnelMethodPasswordAuthentication")
    def source_mysql_update_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetSourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "source_mysql_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="sourceMysqlUpdateSshTunnelMethodSshKeyAuthentication")
    def source_mysql_update_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetSourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "source_mysql_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class GetSourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetSourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetSourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetSourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetSourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetSourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetSourceNetsuiteConfigurationResult(dict):
    def __init__(__self__, *,
                 consumer_key: str,
                 consumer_secret: str,
                 object_types: Sequence[str],
                 realm: str,
                 source_type: str,
                 start_datetime: str,
                 token_key: str,
                 token_secret: str,
                 window_in_days: int):
        pulumi.set(__self__, "consumer_key", consumer_key)
        pulumi.set(__self__, "consumer_secret", consumer_secret)
        pulumi.set(__self__, "object_types", object_types)
        pulumi.set(__self__, "realm", realm)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_datetime", start_datetime)
        pulumi.set(__self__, "token_key", token_key)
        pulumi.set(__self__, "token_secret", token_secret)
        pulumi.set(__self__, "window_in_days", window_in_days)

    @property
    @pulumi.getter(name="consumerKey")
    def consumer_key(self) -> str:
        return pulumi.get(self, "consumer_key")

    @property
    @pulumi.getter(name="consumerSecret")
    def consumer_secret(self) -> str:
        return pulumi.get(self, "consumer_secret")

    @property
    @pulumi.getter(name="objectTypes")
    def object_types(self) -> Sequence[str]:
        return pulumi.get(self, "object_types")

    @property
    @pulumi.getter
    def realm(self) -> str:
        return pulumi.get(self, "realm")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDatetime")
    def start_datetime(self) -> str:
        return pulumi.get(self, "start_datetime")

    @property
    @pulumi.getter(name="tokenKey")
    def token_key(self) -> str:
        return pulumi.get(self, "token_key")

    @property
    @pulumi.getter(name="tokenSecret")
    def token_secret(self) -> str:
        return pulumi.get(self, "token_secret")

    @property
    @pulumi.getter(name="windowInDays")
    def window_in_days(self) -> int:
        return pulumi.get(self, "window_in_days")


@pulumi.output_type
class GetSourceNotionConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourceNotionConfigurationCredentialsResult',
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceNotionConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceNotionConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_notion_authenticate_using_access_token: 'outputs.GetSourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingAccessTokenResult',
                 source_notion_authenticate_using_o_auth20: 'outputs.GetSourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingOAuth20Result',
                 source_notion_update_authenticate_using_access_token: 'outputs.GetSourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingAccessTokenResult',
                 source_notion_update_authenticate_using_o_auth20: 'outputs.GetSourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingOAuth20Result'):
        pulumi.set(__self__, "source_notion_authenticate_using_access_token", source_notion_authenticate_using_access_token)
        pulumi.set(__self__, "source_notion_authenticate_using_o_auth20", source_notion_authenticate_using_o_auth20)
        pulumi.set(__self__, "source_notion_update_authenticate_using_access_token", source_notion_update_authenticate_using_access_token)
        pulumi.set(__self__, "source_notion_update_authenticate_using_o_auth20", source_notion_update_authenticate_using_o_auth20)

    @property
    @pulumi.getter(name="sourceNotionAuthenticateUsingAccessToken")
    def source_notion_authenticate_using_access_token(self) -> 'outputs.GetSourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingAccessTokenResult':
        return pulumi.get(self, "source_notion_authenticate_using_access_token")

    @property
    @pulumi.getter(name="sourceNotionAuthenticateUsingOAuth20")
    def source_notion_authenticate_using_o_auth20(self) -> 'outputs.GetSourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingOAuth20Result':
        return pulumi.get(self, "source_notion_authenticate_using_o_auth20")

    @property
    @pulumi.getter(name="sourceNotionUpdateAuthenticateUsingAccessToken")
    def source_notion_update_authenticate_using_access_token(self) -> 'outputs.GetSourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingAccessTokenResult':
        return pulumi.get(self, "source_notion_update_authenticate_using_access_token")

    @property
    @pulumi.getter(name="sourceNotionUpdateAuthenticateUsingOAuth20")
    def source_notion_update_authenticate_using_o_auth20(self) -> 'outputs.GetSourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingOAuth20Result':
        return pulumi.get(self, "source_notion_update_authenticate_using_o_auth20")


@pulumi.output_type
class GetSourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingAccessTokenResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 token: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def token(self) -> str:
        return pulumi.get(self, "token")


@pulumi.output_type
class GetSourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class GetSourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingAccessTokenResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 token: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def token(self) -> str:
        return pulumi.get(self, "token")


@pulumi.output_type
class GetSourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class GetSourceNytimesConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 end_date: str,
                 period: int,
                 share_type: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "share_type", share_type)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter
    def period(self) -> int:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="shareType")
    def share_type(self) -> str:
        return pulumi.get(self, "share_type")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceOktaConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourceOktaConfigurationCredentialsResult',
                 domain: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceOktaConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceOktaConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_okta_authorization_method_api_token: 'outputs.GetSourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodApiTokenResult',
                 source_okta_authorization_method_o_auth20: 'outputs.GetSourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodOAuth20Result',
                 source_okta_update_authorization_method_api_token: 'outputs.GetSourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodApiTokenResult',
                 source_okta_update_authorization_method_o_auth20: 'outputs.GetSourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodOAuth20Result'):
        pulumi.set(__self__, "source_okta_authorization_method_api_token", source_okta_authorization_method_api_token)
        pulumi.set(__self__, "source_okta_authorization_method_o_auth20", source_okta_authorization_method_o_auth20)
        pulumi.set(__self__, "source_okta_update_authorization_method_api_token", source_okta_update_authorization_method_api_token)
        pulumi.set(__self__, "source_okta_update_authorization_method_o_auth20", source_okta_update_authorization_method_o_auth20)

    @property
    @pulumi.getter(name="sourceOktaAuthorizationMethodApiToken")
    def source_okta_authorization_method_api_token(self) -> 'outputs.GetSourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodApiTokenResult':
        return pulumi.get(self, "source_okta_authorization_method_api_token")

    @property
    @pulumi.getter(name="sourceOktaAuthorizationMethodOAuth20")
    def source_okta_authorization_method_o_auth20(self) -> 'outputs.GetSourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodOAuth20Result':
        return pulumi.get(self, "source_okta_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourceOktaUpdateAuthorizationMethodApiToken")
    def source_okta_update_authorization_method_api_token(self) -> 'outputs.GetSourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodApiTokenResult':
        return pulumi.get(self, "source_okta_update_authorization_method_api_token")

    @property
    @pulumi.getter(name="sourceOktaUpdateAuthorizationMethodOAuth20")
    def source_okta_update_authorization_method_o_auth20(self) -> 'outputs.GetSourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodOAuth20Result':
        return pulumi.get(self, "source_okta_update_authorization_method_o_auth20")


@pulumi.output_type
class GetSourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodApiTokenResult(dict):
    def __init__(__self__, *,
                 api_token: str,
                 auth_type: str):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class GetSourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodApiTokenResult(dict):
    def __init__(__self__, *,
                 api_token: str,
                 auth_type: str):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class GetSourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourceOmnisendConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceOnesignalConfigurationResult(dict):
    def __init__(__self__, *,
                 applications: Sequence['outputs.GetSourceOnesignalConfigurationApplicationResult'],
                 outcome_names: str,
                 source_type: str,
                 start_date: str,
                 user_auth_key: str):
        pulumi.set(__self__, "applications", applications)
        pulumi.set(__self__, "outcome_names", outcome_names)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "user_auth_key", user_auth_key)

    @property
    @pulumi.getter
    def applications(self) -> Sequence['outputs.GetSourceOnesignalConfigurationApplicationResult']:
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter(name="outcomeNames")
    def outcome_names(self) -> str:
        return pulumi.get(self, "outcome_names")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="userAuthKey")
    def user_auth_key(self) -> str:
        return pulumi.get(self, "user_auth_key")


@pulumi.output_type
class GetSourceOnesignalConfigurationApplicationResult(dict):
    def __init__(__self__, *,
                 app_api_key: str,
                 app_id: str,
                 app_name: str):
        pulumi.set(__self__, "app_api_key", app_api_key)
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "app_name", app_name)

    @property
    @pulumi.getter(name="appApiKey")
    def app_api_key(self) -> str:
        return pulumi.get(self, "app_api_key")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> str:
        return pulumi.get(self, "app_name")


@pulumi.output_type
class GetSourceOpenweatherConfigurationResult(dict):
    def __init__(__self__, *,
                 appid: str,
                 lang: str,
                 lat: str,
                 lon: str,
                 source_type: str,
                 units: str):
        pulumi.set(__self__, "appid", appid)
        pulumi.set(__self__, "lang", lang)
        pulumi.set(__self__, "lat", lat)
        pulumi.set(__self__, "lon", lon)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "units", units)

    @property
    @pulumi.getter
    def appid(self) -> str:
        return pulumi.get(self, "appid")

    @property
    @pulumi.getter
    def lang(self) -> str:
        return pulumi.get(self, "lang")

    @property
    @pulumi.getter
    def lat(self) -> str:
        return pulumi.get(self, "lat")

    @property
    @pulumi.getter
    def lon(self) -> str:
        return pulumi.get(self, "lon")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def units(self) -> str:
        return pulumi.get(self, "units")


@pulumi.output_type
class GetSourceOracleConfigurationResult(dict):
    def __init__(__self__, *,
                 connection_data: 'outputs.GetSourceOracleConfigurationConnectionDataResult',
                 encryption: 'outputs.GetSourceOracleConfigurationEncryptionResult',
                 host: str,
                 jdbc_url_params: str,
                 password: str,
                 port: int,
                 schemas: Sequence[str],
                 source_type: str,
                 tunnel_method: 'outputs.GetSourceOracleConfigurationTunnelMethodResult',
                 username: str):
        pulumi.set(__self__, "connection_data", connection_data)
        pulumi.set(__self__, "encryption", encryption)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="connectionData")
    def connection_data(self) -> 'outputs.GetSourceOracleConfigurationConnectionDataResult':
        return pulumi.get(self, "connection_data")

    @property
    @pulumi.getter
    def encryption(self) -> 'outputs.GetSourceOracleConfigurationEncryptionResult':
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> str:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> 'outputs.GetSourceOracleConfigurationTunnelMethodResult':
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSourceOracleConfigurationConnectionDataResult(dict):
    def __init__(__self__, *,
                 source_oracle_connect_by_service_name: 'outputs.GetSourceOracleConfigurationConnectionDataSourceOracleConnectByServiceNameResult',
                 source_oracle_connect_by_system_id_sid: 'outputs.GetSourceOracleConfigurationConnectionDataSourceOracleConnectBySystemIdSidResult',
                 source_oracle_update_connect_by_service_name: 'outputs.GetSourceOracleConfigurationConnectionDataSourceOracleUpdateConnectByServiceNameResult',
                 source_oracle_update_connect_by_system_id_sid: 'outputs.GetSourceOracleConfigurationConnectionDataSourceOracleUpdateConnectBySystemIdSidResult'):
        pulumi.set(__self__, "source_oracle_connect_by_service_name", source_oracle_connect_by_service_name)
        pulumi.set(__self__, "source_oracle_connect_by_system_id_sid", source_oracle_connect_by_system_id_sid)
        pulumi.set(__self__, "source_oracle_update_connect_by_service_name", source_oracle_update_connect_by_service_name)
        pulumi.set(__self__, "source_oracle_update_connect_by_system_id_sid", source_oracle_update_connect_by_system_id_sid)

    @property
    @pulumi.getter(name="sourceOracleConnectByServiceName")
    def source_oracle_connect_by_service_name(self) -> 'outputs.GetSourceOracleConfigurationConnectionDataSourceOracleConnectByServiceNameResult':
        return pulumi.get(self, "source_oracle_connect_by_service_name")

    @property
    @pulumi.getter(name="sourceOracleConnectBySystemIdSid")
    def source_oracle_connect_by_system_id_sid(self) -> 'outputs.GetSourceOracleConfigurationConnectionDataSourceOracleConnectBySystemIdSidResult':
        return pulumi.get(self, "source_oracle_connect_by_system_id_sid")

    @property
    @pulumi.getter(name="sourceOracleUpdateConnectByServiceName")
    def source_oracle_update_connect_by_service_name(self) -> 'outputs.GetSourceOracleConfigurationConnectionDataSourceOracleUpdateConnectByServiceNameResult':
        return pulumi.get(self, "source_oracle_update_connect_by_service_name")

    @property
    @pulumi.getter(name="sourceOracleUpdateConnectBySystemIdSid")
    def source_oracle_update_connect_by_system_id_sid(self) -> 'outputs.GetSourceOracleConfigurationConnectionDataSourceOracleUpdateConnectBySystemIdSidResult':
        return pulumi.get(self, "source_oracle_update_connect_by_system_id_sid")


@pulumi.output_type
class GetSourceOracleConfigurationConnectionDataSourceOracleConnectByServiceNameResult(dict):
    def __init__(__self__, *,
                 connection_type: str,
                 service_name: str):
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> str:
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetSourceOracleConfigurationConnectionDataSourceOracleConnectBySystemIdSidResult(dict):
    def __init__(__self__, *,
                 connection_type: str,
                 sid: str):
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "sid", sid)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> str:
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter
    def sid(self) -> str:
        return pulumi.get(self, "sid")


@pulumi.output_type
class GetSourceOracleConfigurationConnectionDataSourceOracleUpdateConnectByServiceNameResult(dict):
    def __init__(__self__, *,
                 connection_type: str,
                 service_name: str):
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> str:
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetSourceOracleConfigurationConnectionDataSourceOracleUpdateConnectBySystemIdSidResult(dict):
    def __init__(__self__, *,
                 connection_type: str,
                 sid: str):
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "sid", sid)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> str:
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter
    def sid(self) -> str:
        return pulumi.get(self, "sid")


@pulumi.output_type
class GetSourceOracleConfigurationEncryptionResult(dict):
    def __init__(__self__, *,
                 source_oracle_encryption_native_network_encryption_nne: 'outputs.GetSourceOracleConfigurationEncryptionSourceOracleEncryptionNativeNetworkEncryptionNneResult',
                 source_oracle_encryption_tls_encrypted_verify_certificate: 'outputs.GetSourceOracleConfigurationEncryptionSourceOracleEncryptionTlsEncryptedVerifyCertificateResult',
                 source_oracle_update_encryption_native_network_encryption_nne: 'outputs.GetSourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionNativeNetworkEncryptionNneResult',
                 source_oracle_update_encryption_tls_encrypted_verify_certificate: 'outputs.GetSourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionTlsEncryptedVerifyCertificateResult'):
        pulumi.set(__self__, "source_oracle_encryption_native_network_encryption_nne", source_oracle_encryption_native_network_encryption_nne)
        pulumi.set(__self__, "source_oracle_encryption_tls_encrypted_verify_certificate", source_oracle_encryption_tls_encrypted_verify_certificate)
        pulumi.set(__self__, "source_oracle_update_encryption_native_network_encryption_nne", source_oracle_update_encryption_native_network_encryption_nne)
        pulumi.set(__self__, "source_oracle_update_encryption_tls_encrypted_verify_certificate", source_oracle_update_encryption_tls_encrypted_verify_certificate)

    @property
    @pulumi.getter(name="sourceOracleEncryptionNativeNetworkEncryptionNne")
    def source_oracle_encryption_native_network_encryption_nne(self) -> 'outputs.GetSourceOracleConfigurationEncryptionSourceOracleEncryptionNativeNetworkEncryptionNneResult':
        return pulumi.get(self, "source_oracle_encryption_native_network_encryption_nne")

    @property
    @pulumi.getter(name="sourceOracleEncryptionTlsEncryptedVerifyCertificate")
    def source_oracle_encryption_tls_encrypted_verify_certificate(self) -> 'outputs.GetSourceOracleConfigurationEncryptionSourceOracleEncryptionTlsEncryptedVerifyCertificateResult':
        return pulumi.get(self, "source_oracle_encryption_tls_encrypted_verify_certificate")

    @property
    @pulumi.getter(name="sourceOracleUpdateEncryptionNativeNetworkEncryptionNne")
    def source_oracle_update_encryption_native_network_encryption_nne(self) -> 'outputs.GetSourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionNativeNetworkEncryptionNneResult':
        return pulumi.get(self, "source_oracle_update_encryption_native_network_encryption_nne")

    @property
    @pulumi.getter(name="sourceOracleUpdateEncryptionTlsEncryptedVerifyCertificate")
    def source_oracle_update_encryption_tls_encrypted_verify_certificate(self) -> 'outputs.GetSourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionTlsEncryptedVerifyCertificateResult':
        return pulumi.get(self, "source_oracle_update_encryption_tls_encrypted_verify_certificate")


@pulumi.output_type
class GetSourceOracleConfigurationEncryptionSourceOracleEncryptionNativeNetworkEncryptionNneResult(dict):
    def __init__(__self__, *,
                 encryption_algorithm: str,
                 encryption_method: str):
        pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        pulumi.set(__self__, "encryption_method", encryption_method)

    @property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> str:
        return pulumi.get(self, "encryption_algorithm")

    @property
    @pulumi.getter(name="encryptionMethod")
    def encryption_method(self) -> str:
        return pulumi.get(self, "encryption_method")


@pulumi.output_type
class GetSourceOracleConfigurationEncryptionSourceOracleEncryptionTlsEncryptedVerifyCertificateResult(dict):
    def __init__(__self__, *,
                 encryption_method: str,
                 ssl_certificate: str):
        pulumi.set(__self__, "encryption_method", encryption_method)
        pulumi.set(__self__, "ssl_certificate", ssl_certificate)

    @property
    @pulumi.getter(name="encryptionMethod")
    def encryption_method(self) -> str:
        return pulumi.get(self, "encryption_method")

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> str:
        return pulumi.get(self, "ssl_certificate")


@pulumi.output_type
class GetSourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionNativeNetworkEncryptionNneResult(dict):
    def __init__(__self__, *,
                 encryption_algorithm: str,
                 encryption_method: str):
        pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        pulumi.set(__self__, "encryption_method", encryption_method)

    @property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> str:
        return pulumi.get(self, "encryption_algorithm")

    @property
    @pulumi.getter(name="encryptionMethod")
    def encryption_method(self) -> str:
        return pulumi.get(self, "encryption_method")


@pulumi.output_type
class GetSourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionTlsEncryptedVerifyCertificateResult(dict):
    def __init__(__self__, *,
                 encryption_method: str,
                 ssl_certificate: str):
        pulumi.set(__self__, "encryption_method", encryption_method)
        pulumi.set(__self__, "ssl_certificate", ssl_certificate)

    @property
    @pulumi.getter(name="encryptionMethod")
    def encryption_method(self) -> str:
        return pulumi.get(self, "encryption_method")

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> str:
        return pulumi.get(self, "ssl_certificate")


@pulumi.output_type
class GetSourceOracleConfigurationTunnelMethodResult(dict):
    def __init__(__self__, *,
                 source_oracle_ssh_tunnel_method_no_tunnel: 'outputs.GetSourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodNoTunnelResult',
                 source_oracle_ssh_tunnel_method_password_authentication: 'outputs.GetSourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodPasswordAuthenticationResult',
                 source_oracle_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetSourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodSshKeyAuthenticationResult',
                 source_oracle_update_ssh_tunnel_method_no_tunnel: 'outputs.GetSourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodNoTunnelResult',
                 source_oracle_update_ssh_tunnel_method_password_authentication: 'outputs.GetSourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodPasswordAuthenticationResult',
                 source_oracle_update_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetSourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodSshKeyAuthenticationResult'):
        pulumi.set(__self__, "source_oracle_ssh_tunnel_method_no_tunnel", source_oracle_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "source_oracle_ssh_tunnel_method_password_authentication", source_oracle_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "source_oracle_ssh_tunnel_method_ssh_key_authentication", source_oracle_ssh_tunnel_method_ssh_key_authentication)
        pulumi.set(__self__, "source_oracle_update_ssh_tunnel_method_no_tunnel", source_oracle_update_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "source_oracle_update_ssh_tunnel_method_password_authentication", source_oracle_update_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "source_oracle_update_ssh_tunnel_method_ssh_key_authentication", source_oracle_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="sourceOracleSshTunnelMethodNoTunnel")
    def source_oracle_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetSourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "source_oracle_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="sourceOracleSshTunnelMethodPasswordAuthentication")
    def source_oracle_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetSourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "source_oracle_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="sourceOracleSshTunnelMethodSshKeyAuthentication")
    def source_oracle_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetSourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "source_oracle_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="sourceOracleUpdateSshTunnelMethodNoTunnel")
    def source_oracle_update_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetSourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "source_oracle_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="sourceOracleUpdateSshTunnelMethodPasswordAuthentication")
    def source_oracle_update_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetSourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "source_oracle_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="sourceOracleUpdateSshTunnelMethodSshKeyAuthentication")
    def source_oracle_update_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetSourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "source_oracle_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class GetSourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetSourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetSourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetSourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetSourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetSourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetSourceOrbConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 lookback_window_days: int,
                 numeric_event_properties_keys: Sequence[str],
                 plan_id: str,
                 source_type: str,
                 start_date: str,
                 string_event_properties_keys: Sequence[str],
                 subscription_usage_grouping_key: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "lookback_window_days", lookback_window_days)
        pulumi.set(__self__, "numeric_event_properties_keys", numeric_event_properties_keys)
        pulumi.set(__self__, "plan_id", plan_id)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "string_event_properties_keys", string_event_properties_keys)
        pulumi.set(__self__, "subscription_usage_grouping_key", subscription_usage_grouping_key)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="lookbackWindowDays")
    def lookback_window_days(self) -> int:
        return pulumi.get(self, "lookback_window_days")

    @property
    @pulumi.getter(name="numericEventPropertiesKeys")
    def numeric_event_properties_keys(self) -> Sequence[str]:
        return pulumi.get(self, "numeric_event_properties_keys")

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> str:
        return pulumi.get(self, "plan_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="stringEventPropertiesKeys")
    def string_event_properties_keys(self) -> Sequence[str]:
        return pulumi.get(self, "string_event_properties_keys")

    @property
    @pulumi.getter(name="subscriptionUsageGroupingKey")
    def subscription_usage_grouping_key(self) -> str:
        return pulumi.get(self, "subscription_usage_grouping_key")


@pulumi.output_type
class GetSourceOrbitConfigurationResult(dict):
    def __init__(__self__, *,
                 api_token: str,
                 source_type: str,
                 start_date: str,
                 workspace: str):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "workspace", workspace)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def workspace(self) -> str:
        return pulumi.get(self, "workspace")


@pulumi.output_type
class GetSourceOutbrainAmplifyConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourceOutbrainAmplifyConfigurationCredentialsResult',
                 end_date: str,
                 geo_location_breakdown: str,
                 report_granularity: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "geo_location_breakdown", geo_location_breakdown)
        pulumi.set(__self__, "report_granularity", report_granularity)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceOutbrainAmplifyConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="geoLocationBreakdown")
    def geo_location_breakdown(self) -> str:
        return pulumi.get(self, "geo_location_breakdown")

    @property
    @pulumi.getter(name="reportGranularity")
    def report_granularity(self) -> str:
        return pulumi.get(self, "report_granularity")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceOutbrainAmplifyConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_outbrain_amplify_authentication_method_access_token: 'outputs.GetSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodAccessTokenResult',
                 source_outbrain_amplify_authentication_method_username_password: 'outputs.GetSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodUsernamePasswordResult',
                 source_outbrain_amplify_update_authentication_method_access_token: 'outputs.GetSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodAccessTokenResult',
                 source_outbrain_amplify_update_authentication_method_username_password: 'outputs.GetSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePasswordResult'):
        pulumi.set(__self__, "source_outbrain_amplify_authentication_method_access_token", source_outbrain_amplify_authentication_method_access_token)
        pulumi.set(__self__, "source_outbrain_amplify_authentication_method_username_password", source_outbrain_amplify_authentication_method_username_password)
        pulumi.set(__self__, "source_outbrain_amplify_update_authentication_method_access_token", source_outbrain_amplify_update_authentication_method_access_token)
        pulumi.set(__self__, "source_outbrain_amplify_update_authentication_method_username_password", source_outbrain_amplify_update_authentication_method_username_password)

    @property
    @pulumi.getter(name="sourceOutbrainAmplifyAuthenticationMethodAccessToken")
    def source_outbrain_amplify_authentication_method_access_token(self) -> 'outputs.GetSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodAccessTokenResult':
        return pulumi.get(self, "source_outbrain_amplify_authentication_method_access_token")

    @property
    @pulumi.getter(name="sourceOutbrainAmplifyAuthenticationMethodUsernamePassword")
    def source_outbrain_amplify_authentication_method_username_password(self) -> 'outputs.GetSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodUsernamePasswordResult':
        return pulumi.get(self, "source_outbrain_amplify_authentication_method_username_password")

    @property
    @pulumi.getter(name="sourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken")
    def source_outbrain_amplify_update_authentication_method_access_token(self) -> 'outputs.GetSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodAccessTokenResult':
        return pulumi.get(self, "source_outbrain_amplify_update_authentication_method_access_token")

    @property
    @pulumi.getter(name="sourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword")
    def source_outbrain_amplify_update_authentication_method_username_password(self) -> 'outputs.GetSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePasswordResult':
        return pulumi.get(self, "source_outbrain_amplify_update_authentication_method_username_password")


@pulumi.output_type
class GetSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodAccessTokenResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 type: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodUsernamePasswordResult(dict):
    def __init__(__self__, *,
                 password: str,
                 type: str,
                 username: str):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodAccessTokenResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 type: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePasswordResult(dict):
    def __init__(__self__, *,
                 password: str,
                 type: str,
                 username: str):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSourceOutreachConfigurationResult(dict):
    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 redirect_uri: str,
                 refresh_token: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "redirect_uri", redirect_uri)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="redirectUri")
    def redirect_uri(self) -> str:
        return pulumi.get(self, "redirect_uri")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourcePaypalTransactionConfigurationResult(dict):
    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 is_sandbox: bool,
                 refresh_token: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "is_sandbox", is_sandbox)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="isSandbox")
    def is_sandbox(self) -> bool:
        return pulumi.get(self, "is_sandbox")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourcePaystackConfigurationResult(dict):
    def __init__(__self__, *,
                 lookback_window_days: int,
                 secret_key: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "lookback_window_days", lookback_window_days)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="lookbackWindowDays")
    def lookback_window_days(self) -> int:
        return pulumi.get(self, "lookback_window_days")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourcePendoConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourcePersistiqConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourcePexelsApiConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 color: str,
                 locale: str,
                 orientation: str,
                 query: str,
                 size: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "locale", locale)
        pulumi.set(__self__, "orientation", orientation)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def locale(self) -> str:
        return pulumi.get(self, "locale")

    @property
    @pulumi.getter
    def orientation(self) -> str:
        return pulumi.get(self, "orientation")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def size(self) -> str:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourcePinterestConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourcePinterestConfigurationCredentialsResult',
                 source_type: str,
                 start_date: str,
                 statuses: Sequence[str]):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "statuses", statuses)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourcePinterestConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def statuses(self) -> Sequence[str]:
        return pulumi.get(self, "statuses")


@pulumi.output_type
class GetSourcePinterestConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_pinterest_authorization_method_access_token: 'outputs.GetSourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodAccessTokenResult',
                 source_pinterest_authorization_method_o_auth20: 'outputs.GetSourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodOAuth20Result',
                 source_pinterest_update_authorization_method_access_token: 'outputs.GetSourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodAccessTokenResult',
                 source_pinterest_update_authorization_method_o_auth20: 'outputs.GetSourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodOAuth20Result'):
        pulumi.set(__self__, "source_pinterest_authorization_method_access_token", source_pinterest_authorization_method_access_token)
        pulumi.set(__self__, "source_pinterest_authorization_method_o_auth20", source_pinterest_authorization_method_o_auth20)
        pulumi.set(__self__, "source_pinterest_update_authorization_method_access_token", source_pinterest_update_authorization_method_access_token)
        pulumi.set(__self__, "source_pinterest_update_authorization_method_o_auth20", source_pinterest_update_authorization_method_o_auth20)

    @property
    @pulumi.getter(name="sourcePinterestAuthorizationMethodAccessToken")
    def source_pinterest_authorization_method_access_token(self) -> 'outputs.GetSourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodAccessTokenResult':
        return pulumi.get(self, "source_pinterest_authorization_method_access_token")

    @property
    @pulumi.getter(name="sourcePinterestAuthorizationMethodOAuth20")
    def source_pinterest_authorization_method_o_auth20(self) -> 'outputs.GetSourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodOAuth20Result':
        return pulumi.get(self, "source_pinterest_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourcePinterestUpdateAuthorizationMethodAccessToken")
    def source_pinterest_update_authorization_method_access_token(self) -> 'outputs.GetSourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodAccessTokenResult':
        return pulumi.get(self, "source_pinterest_update_authorization_method_access_token")

    @property
    @pulumi.getter(name="sourcePinterestUpdateAuthorizationMethodOAuth20")
    def source_pinterest_update_authorization_method_o_auth20(self) -> 'outputs.GetSourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodOAuth20Result':
        return pulumi.get(self, "source_pinterest_update_authorization_method_o_auth20")


@pulumi.output_type
class GetSourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodAccessTokenResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_method: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")


@pulumi.output_type
class GetSourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 auth_method: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodAccessTokenResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_method: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")


@pulumi.output_type
class GetSourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 auth_method: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourcePipedriveConfigurationResult(dict):
    def __init__(__self__, *,
                 authorization: 'outputs.GetSourcePipedriveConfigurationAuthorizationResult',
                 replication_start_date: str,
                 source_type: str):
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "replication_start_date", replication_start_date)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def authorization(self) -> 'outputs.GetSourcePipedriveConfigurationAuthorizationResult':
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="replicationStartDate")
    def replication_start_date(self) -> str:
        return pulumi.get(self, "replication_start_date")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourcePipedriveConfigurationAuthorizationResult(dict):
    def __init__(__self__, *,
                 api_token: str,
                 auth_type: str):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class GetSourcePocketConfigurationResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 consumer_key: str,
                 content_type: str,
                 detail_type: str,
                 domain: str,
                 favorite: bool,
                 search: str,
                 since: str,
                 sort: str,
                 source_type: str,
                 state: str,
                 tag: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "consumer_key", consumer_key)
        pulumi.set(__self__, "content_type", content_type)
        pulumi.set(__self__, "detail_type", detail_type)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "favorite", favorite)
        pulumi.set(__self__, "search", search)
        pulumi.set(__self__, "since", since)
        pulumi.set(__self__, "sort", sort)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="consumerKey")
    def consumer_key(self) -> str:
        return pulumi.get(self, "consumer_key")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="detailType")
    def detail_type(self) -> str:
        return pulumi.get(self, "detail_type")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def favorite(self) -> bool:
        return pulumi.get(self, "favorite")

    @property
    @pulumi.getter
    def search(self) -> str:
        return pulumi.get(self, "search")

    @property
    @pulumi.getter
    def since(self) -> str:
        return pulumi.get(self, "since")

    @property
    @pulumi.getter
    def sort(self) -> str:
        return pulumi.get(self, "sort")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tag(self) -> str:
        return pulumi.get(self, "tag")


@pulumi.output_type
class GetSourcePokeapiConfigurationResult(dict):
    def __init__(__self__, *,
                 pokemon_name: str,
                 source_type: str):
        pulumi.set(__self__, "pokemon_name", pokemon_name)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="pokemonName")
    def pokemon_name(self) -> str:
        return pulumi.get(self, "pokemon_name")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourcePolygonStockApiConfigurationResult(dict):
    def __init__(__self__, *,
                 adjusted: str,
                 api_key: str,
                 end_date: str,
                 limit: int,
                 multiplier: int,
                 sort: str,
                 source_type: str,
                 start_date: str,
                 stocks_ticker: str,
                 timespan: str):
        pulumi.set(__self__, "adjusted", adjusted)
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "multiplier", multiplier)
        pulumi.set(__self__, "sort", sort)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "stocks_ticker", stocks_ticker)
        pulumi.set(__self__, "timespan", timespan)

    @property
    @pulumi.getter
    def adjusted(self) -> str:
        return pulumi.get(self, "adjusted")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter
    def limit(self) -> int:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def multiplier(self) -> int:
        return pulumi.get(self, "multiplier")

    @property
    @pulumi.getter
    def sort(self) -> str:
        return pulumi.get(self, "sort")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="stocksTicker")
    def stocks_ticker(self) -> str:
        return pulumi.get(self, "stocks_ticker")

    @property
    @pulumi.getter
    def timespan(self) -> str:
        return pulumi.get(self, "timespan")


@pulumi.output_type
class GetSourcePostgresConfigurationResult(dict):
    def __init__(__self__, *,
                 database: str,
                 host: str,
                 jdbc_url_params: str,
                 password: str,
                 port: int,
                 replication_method: 'outputs.GetSourcePostgresConfigurationReplicationMethodResult',
                 schemas: Sequence[str],
                 source_type: str,
                 ssl_mode: 'outputs.GetSourcePostgresConfigurationSslModeResult',
                 tunnel_method: 'outputs.GetSourcePostgresConfigurationTunnelMethodResult',
                 username: str):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "replication_method", replication_method)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "ssl_mode", ssl_mode)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> str:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="replicationMethod")
    def replication_method(self) -> 'outputs.GetSourcePostgresConfigurationReplicationMethodResult':
        return pulumi.get(self, "replication_method")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> 'outputs.GetSourcePostgresConfigurationSslModeResult':
        return pulumi.get(self, "ssl_mode")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> 'outputs.GetSourcePostgresConfigurationTunnelMethodResult':
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSourcePostgresConfigurationReplicationMethodResult(dict):
    def __init__(__self__, *,
                 source_postgres_replication_method_logical_replication_cdc: 'outputs.GetSourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodLogicalReplicationCdcResult',
                 source_postgres_replication_method_standard: 'outputs.GetSourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardResult',
                 source_postgres_replication_method_standard_xmin: 'outputs.GetSourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardXminResult',
                 source_postgres_update_replication_method_logical_replication_cdc: 'outputs.GetSourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodLogicalReplicationCdcResult',
                 source_postgres_update_replication_method_standard: 'outputs.GetSourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardResult',
                 source_postgres_update_replication_method_standard_xmin: 'outputs.GetSourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardXminResult'):
        pulumi.set(__self__, "source_postgres_replication_method_logical_replication_cdc", source_postgres_replication_method_logical_replication_cdc)
        pulumi.set(__self__, "source_postgres_replication_method_standard", source_postgres_replication_method_standard)
        pulumi.set(__self__, "source_postgres_replication_method_standard_xmin", source_postgres_replication_method_standard_xmin)
        pulumi.set(__self__, "source_postgres_update_replication_method_logical_replication_cdc", source_postgres_update_replication_method_logical_replication_cdc)
        pulumi.set(__self__, "source_postgres_update_replication_method_standard", source_postgres_update_replication_method_standard)
        pulumi.set(__self__, "source_postgres_update_replication_method_standard_xmin", source_postgres_update_replication_method_standard_xmin)

    @property
    @pulumi.getter(name="sourcePostgresReplicationMethodLogicalReplicationCdc")
    def source_postgres_replication_method_logical_replication_cdc(self) -> 'outputs.GetSourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodLogicalReplicationCdcResult':
        return pulumi.get(self, "source_postgres_replication_method_logical_replication_cdc")

    @property
    @pulumi.getter(name="sourcePostgresReplicationMethodStandard")
    def source_postgres_replication_method_standard(self) -> 'outputs.GetSourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardResult':
        return pulumi.get(self, "source_postgres_replication_method_standard")

    @property
    @pulumi.getter(name="sourcePostgresReplicationMethodStandardXmin")
    def source_postgres_replication_method_standard_xmin(self) -> 'outputs.GetSourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardXminResult':
        return pulumi.get(self, "source_postgres_replication_method_standard_xmin")

    @property
    @pulumi.getter(name="sourcePostgresUpdateReplicationMethodLogicalReplicationCdc")
    def source_postgres_update_replication_method_logical_replication_cdc(self) -> 'outputs.GetSourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodLogicalReplicationCdcResult':
        return pulumi.get(self, "source_postgres_update_replication_method_logical_replication_cdc")

    @property
    @pulumi.getter(name="sourcePostgresUpdateReplicationMethodStandard")
    def source_postgres_update_replication_method_standard(self) -> 'outputs.GetSourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardResult':
        return pulumi.get(self, "source_postgres_update_replication_method_standard")

    @property
    @pulumi.getter(name="sourcePostgresUpdateReplicationMethodStandardXmin")
    def source_postgres_update_replication_method_standard_xmin(self) -> 'outputs.GetSourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardXminResult':
        return pulumi.get(self, "source_postgres_update_replication_method_standard_xmin")


@pulumi.output_type
class GetSourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodLogicalReplicationCdcResult(dict):
    def __init__(__self__, *,
                 initial_waiting_seconds: int,
                 lsn_commit_behaviour: str,
                 method: str,
                 plugin: str,
                 publication: str,
                 queue_size: int,
                 replication_slot: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "initial_waiting_seconds", initial_waiting_seconds)
        pulumi.set(__self__, "lsn_commit_behaviour", lsn_commit_behaviour)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "plugin", plugin)
        pulumi.set(__self__, "publication", publication)
        pulumi.set(__self__, "queue_size", queue_size)
        pulumi.set(__self__, "replication_slot", replication_slot)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="initialWaitingSeconds")
    def initial_waiting_seconds(self) -> int:
        return pulumi.get(self, "initial_waiting_seconds")

    @property
    @pulumi.getter(name="lsnCommitBehaviour")
    def lsn_commit_behaviour(self) -> str:
        return pulumi.get(self, "lsn_commit_behaviour")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def plugin(self) -> str:
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def publication(self) -> str:
        return pulumi.get(self, "publication")

    @property
    @pulumi.getter(name="queueSize")
    def queue_size(self) -> int:
        return pulumi.get(self, "queue_size")

    @property
    @pulumi.getter(name="replicationSlot")
    def replication_slot(self) -> str:
        return pulumi.get(self, "replication_slot")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardResult(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class GetSourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardXminResult(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class GetSourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodLogicalReplicationCdcResult(dict):
    def __init__(__self__, *,
                 initial_waiting_seconds: int,
                 lsn_commit_behaviour: str,
                 method: str,
                 plugin: str,
                 publication: str,
                 queue_size: int,
                 replication_slot: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "initial_waiting_seconds", initial_waiting_seconds)
        pulumi.set(__self__, "lsn_commit_behaviour", lsn_commit_behaviour)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "plugin", plugin)
        pulumi.set(__self__, "publication", publication)
        pulumi.set(__self__, "queue_size", queue_size)
        pulumi.set(__self__, "replication_slot", replication_slot)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="initialWaitingSeconds")
    def initial_waiting_seconds(self) -> int:
        return pulumi.get(self, "initial_waiting_seconds")

    @property
    @pulumi.getter(name="lsnCommitBehaviour")
    def lsn_commit_behaviour(self) -> str:
        return pulumi.get(self, "lsn_commit_behaviour")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def plugin(self) -> str:
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def publication(self) -> str:
        return pulumi.get(self, "publication")

    @property
    @pulumi.getter(name="queueSize")
    def queue_size(self) -> int:
        return pulumi.get(self, "queue_size")

    @property
    @pulumi.getter(name="replicationSlot")
    def replication_slot(self) -> str:
        return pulumi.get(self, "replication_slot")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardResult(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class GetSourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardXminResult(dict):
    def __init__(__self__, *,
                 method: str):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")


@pulumi.output_type
class GetSourcePostgresConfigurationSslModeResult(dict):
    def __init__(__self__, *,
                 source_postgres_ssl_modes_allow: 'outputs.GetSourcePostgresConfigurationSslModeSourcePostgresSslModesAllowResult',
                 source_postgres_ssl_modes_disable: 'outputs.GetSourcePostgresConfigurationSslModeSourcePostgresSslModesDisableResult',
                 source_postgres_ssl_modes_prefer: 'outputs.GetSourcePostgresConfigurationSslModeSourcePostgresSslModesPreferResult',
                 source_postgres_ssl_modes_require: 'outputs.GetSourcePostgresConfigurationSslModeSourcePostgresSslModesRequireResult',
                 source_postgres_ssl_modes_verify_ca: 'outputs.GetSourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyCaResult',
                 source_postgres_ssl_modes_verify_full: 'outputs.GetSourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyFullResult',
                 source_postgres_update_ssl_modes_allow: 'outputs.GetSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesAllowResult',
                 source_postgres_update_ssl_modes_disable: 'outputs.GetSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesDisableResult',
                 source_postgres_update_ssl_modes_prefer: 'outputs.GetSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesPreferResult',
                 source_postgres_update_ssl_modes_require: 'outputs.GetSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesRequireResult',
                 source_postgres_update_ssl_modes_verify_ca: 'outputs.GetSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyCaResult',
                 source_postgres_update_ssl_modes_verify_full: 'outputs.GetSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyFullResult'):
        pulumi.set(__self__, "source_postgres_ssl_modes_allow", source_postgres_ssl_modes_allow)
        pulumi.set(__self__, "source_postgres_ssl_modes_disable", source_postgres_ssl_modes_disable)
        pulumi.set(__self__, "source_postgres_ssl_modes_prefer", source_postgres_ssl_modes_prefer)
        pulumi.set(__self__, "source_postgres_ssl_modes_require", source_postgres_ssl_modes_require)
        pulumi.set(__self__, "source_postgres_ssl_modes_verify_ca", source_postgres_ssl_modes_verify_ca)
        pulumi.set(__self__, "source_postgres_ssl_modes_verify_full", source_postgres_ssl_modes_verify_full)
        pulumi.set(__self__, "source_postgres_update_ssl_modes_allow", source_postgres_update_ssl_modes_allow)
        pulumi.set(__self__, "source_postgres_update_ssl_modes_disable", source_postgres_update_ssl_modes_disable)
        pulumi.set(__self__, "source_postgres_update_ssl_modes_prefer", source_postgres_update_ssl_modes_prefer)
        pulumi.set(__self__, "source_postgres_update_ssl_modes_require", source_postgres_update_ssl_modes_require)
        pulumi.set(__self__, "source_postgres_update_ssl_modes_verify_ca", source_postgres_update_ssl_modes_verify_ca)
        pulumi.set(__self__, "source_postgres_update_ssl_modes_verify_full", source_postgres_update_ssl_modes_verify_full)

    @property
    @pulumi.getter(name="sourcePostgresSslModesAllow")
    def source_postgres_ssl_modes_allow(self) -> 'outputs.GetSourcePostgresConfigurationSslModeSourcePostgresSslModesAllowResult':
        return pulumi.get(self, "source_postgres_ssl_modes_allow")

    @property
    @pulumi.getter(name="sourcePostgresSslModesDisable")
    def source_postgres_ssl_modes_disable(self) -> 'outputs.GetSourcePostgresConfigurationSslModeSourcePostgresSslModesDisableResult':
        return pulumi.get(self, "source_postgres_ssl_modes_disable")

    @property
    @pulumi.getter(name="sourcePostgresSslModesPrefer")
    def source_postgres_ssl_modes_prefer(self) -> 'outputs.GetSourcePostgresConfigurationSslModeSourcePostgresSslModesPreferResult':
        return pulumi.get(self, "source_postgres_ssl_modes_prefer")

    @property
    @pulumi.getter(name="sourcePostgresSslModesRequire")
    def source_postgres_ssl_modes_require(self) -> 'outputs.GetSourcePostgresConfigurationSslModeSourcePostgresSslModesRequireResult':
        return pulumi.get(self, "source_postgres_ssl_modes_require")

    @property
    @pulumi.getter(name="sourcePostgresSslModesVerifyCa")
    def source_postgres_ssl_modes_verify_ca(self) -> 'outputs.GetSourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyCaResult':
        return pulumi.get(self, "source_postgres_ssl_modes_verify_ca")

    @property
    @pulumi.getter(name="sourcePostgresSslModesVerifyFull")
    def source_postgres_ssl_modes_verify_full(self) -> 'outputs.GetSourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyFullResult':
        return pulumi.get(self, "source_postgres_ssl_modes_verify_full")

    @property
    @pulumi.getter(name="sourcePostgresUpdateSslModesAllow")
    def source_postgres_update_ssl_modes_allow(self) -> 'outputs.GetSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesAllowResult':
        return pulumi.get(self, "source_postgres_update_ssl_modes_allow")

    @property
    @pulumi.getter(name="sourcePostgresUpdateSslModesDisable")
    def source_postgres_update_ssl_modes_disable(self) -> 'outputs.GetSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesDisableResult':
        return pulumi.get(self, "source_postgres_update_ssl_modes_disable")

    @property
    @pulumi.getter(name="sourcePostgresUpdateSslModesPrefer")
    def source_postgres_update_ssl_modes_prefer(self) -> 'outputs.GetSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesPreferResult':
        return pulumi.get(self, "source_postgres_update_ssl_modes_prefer")

    @property
    @pulumi.getter(name="sourcePostgresUpdateSslModesRequire")
    def source_postgres_update_ssl_modes_require(self) -> 'outputs.GetSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesRequireResult':
        return pulumi.get(self, "source_postgres_update_ssl_modes_require")

    @property
    @pulumi.getter(name="sourcePostgresUpdateSslModesVerifyCa")
    def source_postgres_update_ssl_modes_verify_ca(self) -> 'outputs.GetSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyCaResult':
        return pulumi.get(self, "source_postgres_update_ssl_modes_verify_ca")

    @property
    @pulumi.getter(name="sourcePostgresUpdateSslModesVerifyFull")
    def source_postgres_update_ssl_modes_verify_full(self) -> 'outputs.GetSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyFullResult':
        return pulumi.get(self, "source_postgres_update_ssl_modes_verify_full")


@pulumi.output_type
class GetSourcePostgresConfigurationSslModeSourcePostgresSslModesAllowResult(dict):
    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourcePostgresConfigurationSslModeSourcePostgresSslModesDisableResult(dict):
    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourcePostgresConfigurationSslModeSourcePostgresSslModesPreferResult(dict):
    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourcePostgresConfigurationSslModeSourcePostgresSslModesRequireResult(dict):
    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyCaResult(dict):
    def __init__(__self__, *,
                 ca_certificate: str,
                 client_certificate: str,
                 client_key: str,
                 client_key_password: str,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "client_certificate", client_certificate)
        pulumi.set(__self__, "client_key", client_key)
        pulumi.set(__self__, "client_key_password", client_key_password)
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> str:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> str:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> str:
        return pulumi.get(self, "client_key_password")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyFullResult(dict):
    def __init__(__self__, *,
                 ca_certificate: str,
                 client_certificate: str,
                 client_key: str,
                 client_key_password: str,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "client_certificate", client_certificate)
        pulumi.set(__self__, "client_key", client_key)
        pulumi.set(__self__, "client_key_password", client_key_password)
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> str:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> str:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> str:
        return pulumi.get(self, "client_key_password")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesAllowResult(dict):
    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesDisableResult(dict):
    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesPreferResult(dict):
    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesRequireResult(dict):
    def __init__(__self__, *,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyCaResult(dict):
    def __init__(__self__, *,
                 ca_certificate: str,
                 client_certificate: str,
                 client_key: str,
                 client_key_password: str,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "client_certificate", client_certificate)
        pulumi.set(__self__, "client_key", client_key)
        pulumi.set(__self__, "client_key_password", client_key_password)
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> str:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> str:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> str:
        return pulumi.get(self, "client_key_password")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyFullResult(dict):
    def __init__(__self__, *,
                 ca_certificate: str,
                 client_certificate: str,
                 client_key: str,
                 client_key_password: str,
                 mode: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "client_certificate", client_certificate)
        pulumi.set(__self__, "client_key", client_key)
        pulumi.set(__self__, "client_key_password", client_key_password)
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> str:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> str:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> str:
        return pulumi.get(self, "client_key_password")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourcePostgresConfigurationTunnelMethodResult(dict):
    def __init__(__self__, *,
                 source_postgres_ssh_tunnel_method_no_tunnel: 'outputs.GetSourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodNoTunnelResult',
                 source_postgres_ssh_tunnel_method_password_authentication: 'outputs.GetSourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodPasswordAuthenticationResult',
                 source_postgres_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetSourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodSshKeyAuthenticationResult',
                 source_postgres_update_ssh_tunnel_method_no_tunnel: 'outputs.GetSourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodNoTunnelResult',
                 source_postgres_update_ssh_tunnel_method_password_authentication: 'outputs.GetSourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodPasswordAuthenticationResult',
                 source_postgres_update_ssh_tunnel_method_ssh_key_authentication: 'outputs.GetSourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodSshKeyAuthenticationResult'):
        pulumi.set(__self__, "source_postgres_ssh_tunnel_method_no_tunnel", source_postgres_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "source_postgres_ssh_tunnel_method_password_authentication", source_postgres_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "source_postgres_ssh_tunnel_method_ssh_key_authentication", source_postgres_ssh_tunnel_method_ssh_key_authentication)
        pulumi.set(__self__, "source_postgres_update_ssh_tunnel_method_no_tunnel", source_postgres_update_ssh_tunnel_method_no_tunnel)
        pulumi.set(__self__, "source_postgres_update_ssh_tunnel_method_password_authentication", source_postgres_update_ssh_tunnel_method_password_authentication)
        pulumi.set(__self__, "source_postgres_update_ssh_tunnel_method_ssh_key_authentication", source_postgres_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="sourcePostgresSshTunnelMethodNoTunnel")
    def source_postgres_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetSourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "source_postgres_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="sourcePostgresSshTunnelMethodPasswordAuthentication")
    def source_postgres_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetSourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "source_postgres_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="sourcePostgresSshTunnelMethodSshKeyAuthentication")
    def source_postgres_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetSourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "source_postgres_ssh_tunnel_method_ssh_key_authentication")

    @property
    @pulumi.getter(name="sourcePostgresUpdateSshTunnelMethodNoTunnel")
    def source_postgres_update_ssh_tunnel_method_no_tunnel(self) -> 'outputs.GetSourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodNoTunnelResult':
        return pulumi.get(self, "source_postgres_update_ssh_tunnel_method_no_tunnel")

    @property
    @pulumi.getter(name="sourcePostgresUpdateSshTunnelMethodPasswordAuthentication")
    def source_postgres_update_ssh_tunnel_method_password_authentication(self) -> 'outputs.GetSourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodPasswordAuthenticationResult':
        return pulumi.get(self, "source_postgres_update_ssh_tunnel_method_password_authentication")

    @property
    @pulumi.getter(name="sourcePostgresUpdateSshTunnelMethodSshKeyAuthentication")
    def source_postgres_update_ssh_tunnel_method_ssh_key_authentication(self) -> 'outputs.GetSourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodSshKeyAuthenticationResult':
        return pulumi.get(self, "source_postgres_update_ssh_tunnel_method_ssh_key_authentication")


@pulumi.output_type
class GetSourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetSourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetSourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetSourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodNoTunnelResult(dict):
    def __init__(__self__, *,
                 tunnel_method: str):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")


@pulumi.output_type
class GetSourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str,
                 tunnel_user_password: str):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> str:
        return pulumi.get(self, "tunnel_user_password")


@pulumi.output_type
class GetSourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 ssh_key: str,
                 tunnel_host: str,
                 tunnel_method: str,
                 tunnel_port: int,
                 tunnel_user: str):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> str:
        return pulumi.get(self, "tunnel_host")

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> str:
        return pulumi.get(self, "tunnel_method")

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> int:
        return pulumi.get(self, "tunnel_port")

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> str:
        return pulumi.get(self, "tunnel_user")


@pulumi.output_type
class GetSourcePosthogConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 base_url: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "base_url", base_url)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> str:
        return pulumi.get(self, "base_url")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourcePostmarkappConfigurationResult(dict):
    def __init__(__self__, *,
                 source_type: str,
                 x_postmark_account_token: str,
                 x_postmark_server_token: str):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "x_postmark_account_token", x_postmark_account_token)
        pulumi.set(__self__, "x_postmark_server_token", x_postmark_server_token)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="xPostmarkAccountToken")
    def x_postmark_account_token(self) -> str:
        return pulumi.get(self, "x_postmark_account_token")

    @property
    @pulumi.getter(name="xPostmarkServerToken")
    def x_postmark_server_token(self) -> str:
        return pulumi.get(self, "x_postmark_server_token")


@pulumi.output_type
class GetSourcePrestashopConfigurationResult(dict):
    def __init__(__self__, *,
                 access_key: str,
                 source_type: str,
                 start_date: str,
                 url: str):
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetSourcePublicApisConfigurationResult(dict):
    def __init__(__self__, *,
                 source_type: str):
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourcePunkApiConfigurationResult(dict):
    def __init__(__self__, *,
                 brewed_after: str,
                 brewed_before: str,
                 id: str,
                 source_type: str):
        pulumi.set(__self__, "brewed_after", brewed_after)
        pulumi.set(__self__, "brewed_before", brewed_before)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="brewedAfter")
    def brewed_after(self) -> str:
        return pulumi.get(self, "brewed_after")

    @property
    @pulumi.getter(name="brewedBefore")
    def brewed_before(self) -> str:
        return pulumi.get(self, "brewed_before")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourcePypiConfigurationResult(dict):
    def __init__(__self__, *,
                 project_name: str,
                 source_type: str,
                 version: str):
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> str:
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetSourceQualarooConfigurationResult(dict):
    def __init__(__self__, *,
                 key: str,
                 source_type: str,
                 start_date: str,
                 survey_ids: Sequence[str],
                 token: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "survey_ids", survey_ids)
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="surveyIds")
    def survey_ids(self) -> Sequence[str]:
        return pulumi.get(self, "survey_ids")

    @property
    @pulumi.getter
    def token(self) -> str:
        return pulumi.get(self, "token")


@pulumi.output_type
class GetSourceQuickbooksConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourceQuickbooksConfigurationCredentialsResult',
                 sandbox: bool,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "sandbox", sandbox)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceQuickbooksConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def sandbox(self) -> bool:
        return pulumi.get(self, "sandbox")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceQuickbooksConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_quickbooks_authorization_method_o_auth20: 'outputs.GetSourceQuickbooksConfigurationCredentialsSourceQuickbooksAuthorizationMethodOAuth20Result',
                 source_quickbooks_update_authorization_method_o_auth20: 'outputs.GetSourceQuickbooksConfigurationCredentialsSourceQuickbooksUpdateAuthorizationMethodOAuth20Result'):
        pulumi.set(__self__, "source_quickbooks_authorization_method_o_auth20", source_quickbooks_authorization_method_o_auth20)
        pulumi.set(__self__, "source_quickbooks_update_authorization_method_o_auth20", source_quickbooks_update_authorization_method_o_auth20)

    @property
    @pulumi.getter(name="sourceQuickbooksAuthorizationMethodOAuth20")
    def source_quickbooks_authorization_method_o_auth20(self) -> 'outputs.GetSourceQuickbooksConfigurationCredentialsSourceQuickbooksAuthorizationMethodOAuth20Result':
        return pulumi.get(self, "source_quickbooks_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourceQuickbooksUpdateAuthorizationMethodOAuth20")
    def source_quickbooks_update_authorization_method_o_auth20(self) -> 'outputs.GetSourceQuickbooksConfigurationCredentialsSourceQuickbooksUpdateAuthorizationMethodOAuth20Result':
        return pulumi.get(self, "source_quickbooks_update_authorization_method_o_auth20")


@pulumi.output_type
class GetSourceQuickbooksConfigurationCredentialsSourceQuickbooksAuthorizationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 realm_id: str,
                 refresh_token: str,
                 token_expiry_date: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "realm_id", realm_id)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="realmId")
    def realm_id(self) -> str:
        return pulumi.get(self, "realm_id")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> str:
        return pulumi.get(self, "token_expiry_date")


@pulumi.output_type
class GetSourceQuickbooksConfigurationCredentialsSourceQuickbooksUpdateAuthorizationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 realm_id: str,
                 refresh_token: str,
                 token_expiry_date: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "realm_id", realm_id)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="realmId")
    def realm_id(self) -> str:
        return pulumi.get(self, "realm_id")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> str:
        return pulumi.get(self, "token_expiry_date")


@pulumi.output_type
class GetSourceRailzConfigurationResult(dict):
    def __init__(__self__, *,
                 client_id: str,
                 secret_key: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceRechargeConfigurationResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceRecreationConfigurationResult(dict):
    def __init__(__self__, *,
                 apikey: str,
                 query_campsites: str,
                 source_type: str):
        pulumi.set(__self__, "apikey", apikey)
        pulumi.set(__self__, "query_campsites", query_campsites)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def apikey(self) -> str:
        return pulumi.get(self, "apikey")

    @property
    @pulumi.getter(name="queryCampsites")
    def query_campsites(self) -> str:
        return pulumi.get(self, "query_campsites")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceRecruiteeConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 company_id: int,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "company_id", company_id)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="companyId")
    def company_id(self) -> int:
        return pulumi.get(self, "company_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceRecurlyConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 begin_time: str,
                 end_time: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "begin_time", begin_time)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> str:
        return pulumi.get(self, "begin_time")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceRedshiftConfigurationResult(dict):
    def __init__(__self__, *,
                 database: str,
                 host: str,
                 jdbc_url_params: str,
                 password: str,
                 port: int,
                 schemas: Sequence[str],
                 source_type: str,
                 username: str):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> str:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSourceRetentlyConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourceRetentlyConfigurationCredentialsResult',
                 source_type: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceRetentlyConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceRetentlyConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_retently_authentication_mechanism_authenticate_via_retently_o_auth: 'outputs.GetSourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthResult',
                 source_retently_authentication_mechanism_authenticate_with_api_token: 'outputs.GetSourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateWithApiTokenResult',
                 source_retently_update_authentication_mechanism_authenticate_via_retently_o_auth: 'outputs.GetSourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuthResult',
                 source_retently_update_authentication_mechanism_authenticate_with_api_token: 'outputs.GetSourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiTokenResult'):
        pulumi.set(__self__, "source_retently_authentication_mechanism_authenticate_via_retently_o_auth", source_retently_authentication_mechanism_authenticate_via_retently_o_auth)
        pulumi.set(__self__, "source_retently_authentication_mechanism_authenticate_with_api_token", source_retently_authentication_mechanism_authenticate_with_api_token)
        pulumi.set(__self__, "source_retently_update_authentication_mechanism_authenticate_via_retently_o_auth", source_retently_update_authentication_mechanism_authenticate_via_retently_o_auth)
        pulumi.set(__self__, "source_retently_update_authentication_mechanism_authenticate_with_api_token", source_retently_update_authentication_mechanism_authenticate_with_api_token)

    @property
    @pulumi.getter(name="sourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth")
    def source_retently_authentication_mechanism_authenticate_via_retently_o_auth(self) -> 'outputs.GetSourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthResult':
        return pulumi.get(self, "source_retently_authentication_mechanism_authenticate_via_retently_o_auth")

    @property
    @pulumi.getter(name="sourceRetentlyAuthenticationMechanismAuthenticateWithApiToken")
    def source_retently_authentication_mechanism_authenticate_with_api_token(self) -> 'outputs.GetSourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateWithApiTokenResult':
        return pulumi.get(self, "source_retently_authentication_mechanism_authenticate_with_api_token")

    @property
    @pulumi.getter(name="sourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth")
    def source_retently_update_authentication_mechanism_authenticate_via_retently_o_auth(self) -> 'outputs.GetSourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuthResult':
        return pulumi.get(self, "source_retently_update_authentication_mechanism_authenticate_via_retently_o_auth")

    @property
    @pulumi.getter(name="sourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiToken")
    def source_retently_update_authentication_mechanism_authenticate_with_api_token(self) -> 'outputs.GetSourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiTokenResult':
        return pulumi.get(self, "source_retently_update_authentication_mechanism_authenticate_with_api_token")


@pulumi.output_type
class GetSourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateWithApiTokenResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 auth_type: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "auth_type", auth_type)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuthResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiTokenResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 auth_type: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "auth_type", auth_type)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceRkiCovidConfigurationResult(dict):
    def __init__(__self__, *,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceRssConfigurationResult(dict):
    def __init__(__self__, *,
                 source_type: str,
                 url: str):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetSourceS3ConfigurationResult(dict):
    def __init__(__self__, *,
                 dataset: str,
                 format: 'outputs.GetSourceS3ConfigurationFormatResult',
                 path_pattern: str,
                 provider: 'outputs.GetSourceS3ConfigurationProviderResult',
                 schema: str,
                 source_type: str):
        pulumi.set(__self__, "dataset", dataset)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "path_pattern", path_pattern)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def dataset(self) -> str:
        return pulumi.get(self, "dataset")

    @property
    @pulumi.getter
    def format(self) -> 'outputs.GetSourceS3ConfigurationFormatResult':
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="pathPattern")
    def path_pattern(self) -> str:
        return pulumi.get(self, "path_pattern")

    @property
    @pulumi.getter
    def provider(self) -> 'outputs.GetSourceS3ConfigurationProviderResult':
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceS3ConfigurationFormatResult(dict):
    def __init__(__self__, *,
                 source_s3_file_format_avro: 'outputs.GetSourceS3ConfigurationFormatSourceS3FileFormatAvroResult',
                 source_s3_file_format_csv: 'outputs.GetSourceS3ConfigurationFormatSourceS3FileFormatCsvResult',
                 source_s3_file_format_jsonl: 'outputs.GetSourceS3ConfigurationFormatSourceS3FileFormatJsonlResult',
                 source_s3_file_format_parquet: 'outputs.GetSourceS3ConfigurationFormatSourceS3FileFormatParquetResult',
                 source_s3_update_file_format_avro: 'outputs.GetSourceS3ConfigurationFormatSourceS3UpdateFileFormatAvroResult',
                 source_s3_update_file_format_csv: 'outputs.GetSourceS3ConfigurationFormatSourceS3UpdateFileFormatCsvResult',
                 source_s3_update_file_format_jsonl: 'outputs.GetSourceS3ConfigurationFormatSourceS3UpdateFileFormatJsonlResult',
                 source_s3_update_file_format_parquet: 'outputs.GetSourceS3ConfigurationFormatSourceS3UpdateFileFormatParquetResult'):
        pulumi.set(__self__, "source_s3_file_format_avro", source_s3_file_format_avro)
        pulumi.set(__self__, "source_s3_file_format_csv", source_s3_file_format_csv)
        pulumi.set(__self__, "source_s3_file_format_jsonl", source_s3_file_format_jsonl)
        pulumi.set(__self__, "source_s3_file_format_parquet", source_s3_file_format_parquet)
        pulumi.set(__self__, "source_s3_update_file_format_avro", source_s3_update_file_format_avro)
        pulumi.set(__self__, "source_s3_update_file_format_csv", source_s3_update_file_format_csv)
        pulumi.set(__self__, "source_s3_update_file_format_jsonl", source_s3_update_file_format_jsonl)
        pulumi.set(__self__, "source_s3_update_file_format_parquet", source_s3_update_file_format_parquet)

    @property
    @pulumi.getter(name="sourceS3FileFormatAvro")
    def source_s3_file_format_avro(self) -> 'outputs.GetSourceS3ConfigurationFormatSourceS3FileFormatAvroResult':
        return pulumi.get(self, "source_s3_file_format_avro")

    @property
    @pulumi.getter(name="sourceS3FileFormatCsv")
    def source_s3_file_format_csv(self) -> 'outputs.GetSourceS3ConfigurationFormatSourceS3FileFormatCsvResult':
        return pulumi.get(self, "source_s3_file_format_csv")

    @property
    @pulumi.getter(name="sourceS3FileFormatJsonl")
    def source_s3_file_format_jsonl(self) -> 'outputs.GetSourceS3ConfigurationFormatSourceS3FileFormatJsonlResult':
        return pulumi.get(self, "source_s3_file_format_jsonl")

    @property
    @pulumi.getter(name="sourceS3FileFormatParquet")
    def source_s3_file_format_parquet(self) -> 'outputs.GetSourceS3ConfigurationFormatSourceS3FileFormatParquetResult':
        return pulumi.get(self, "source_s3_file_format_parquet")

    @property
    @pulumi.getter(name="sourceS3UpdateFileFormatAvro")
    def source_s3_update_file_format_avro(self) -> 'outputs.GetSourceS3ConfigurationFormatSourceS3UpdateFileFormatAvroResult':
        return pulumi.get(self, "source_s3_update_file_format_avro")

    @property
    @pulumi.getter(name="sourceS3UpdateFileFormatCsv")
    def source_s3_update_file_format_csv(self) -> 'outputs.GetSourceS3ConfigurationFormatSourceS3UpdateFileFormatCsvResult':
        return pulumi.get(self, "source_s3_update_file_format_csv")

    @property
    @pulumi.getter(name="sourceS3UpdateFileFormatJsonl")
    def source_s3_update_file_format_jsonl(self) -> 'outputs.GetSourceS3ConfigurationFormatSourceS3UpdateFileFormatJsonlResult':
        return pulumi.get(self, "source_s3_update_file_format_jsonl")

    @property
    @pulumi.getter(name="sourceS3UpdateFileFormatParquet")
    def source_s3_update_file_format_parquet(self) -> 'outputs.GetSourceS3ConfigurationFormatSourceS3UpdateFileFormatParquetResult':
        return pulumi.get(self, "source_s3_update_file_format_parquet")


@pulumi.output_type
class GetSourceS3ConfigurationFormatSourceS3FileFormatAvroResult(dict):
    def __init__(__self__, *,
                 filetype: str):
        pulumi.set(__self__, "filetype", filetype)

    @property
    @pulumi.getter
    def filetype(self) -> str:
        return pulumi.get(self, "filetype")


@pulumi.output_type
class GetSourceS3ConfigurationFormatSourceS3FileFormatCsvResult(dict):
    def __init__(__self__, *,
                 additional_reader_options: str,
                 advanced_options: str,
                 block_size: int,
                 delimiter: str,
                 double_quote: bool,
                 encoding: str,
                 escape_char: str,
                 filetype: str,
                 infer_datatypes: bool,
                 newlines_in_values: bool,
                 quote_char: str):
        pulumi.set(__self__, "additional_reader_options", additional_reader_options)
        pulumi.set(__self__, "advanced_options", advanced_options)
        pulumi.set(__self__, "block_size", block_size)
        pulumi.set(__self__, "delimiter", delimiter)
        pulumi.set(__self__, "double_quote", double_quote)
        pulumi.set(__self__, "encoding", encoding)
        pulumi.set(__self__, "escape_char", escape_char)
        pulumi.set(__self__, "filetype", filetype)
        pulumi.set(__self__, "infer_datatypes", infer_datatypes)
        pulumi.set(__self__, "newlines_in_values", newlines_in_values)
        pulumi.set(__self__, "quote_char", quote_char)

    @property
    @pulumi.getter(name="additionalReaderOptions")
    def additional_reader_options(self) -> str:
        return pulumi.get(self, "additional_reader_options")

    @property
    @pulumi.getter(name="advancedOptions")
    def advanced_options(self) -> str:
        return pulumi.get(self, "advanced_options")

    @property
    @pulumi.getter(name="blockSize")
    def block_size(self) -> int:
        return pulumi.get(self, "block_size")

    @property
    @pulumi.getter
    def delimiter(self) -> str:
        return pulumi.get(self, "delimiter")

    @property
    @pulumi.getter(name="doubleQuote")
    def double_quote(self) -> bool:
        return pulumi.get(self, "double_quote")

    @property
    @pulumi.getter
    def encoding(self) -> str:
        return pulumi.get(self, "encoding")

    @property
    @pulumi.getter(name="escapeChar")
    def escape_char(self) -> str:
        return pulumi.get(self, "escape_char")

    @property
    @pulumi.getter
    def filetype(self) -> str:
        return pulumi.get(self, "filetype")

    @property
    @pulumi.getter(name="inferDatatypes")
    def infer_datatypes(self) -> bool:
        return pulumi.get(self, "infer_datatypes")

    @property
    @pulumi.getter(name="newlinesInValues")
    def newlines_in_values(self) -> bool:
        return pulumi.get(self, "newlines_in_values")

    @property
    @pulumi.getter(name="quoteChar")
    def quote_char(self) -> str:
        return pulumi.get(self, "quote_char")


@pulumi.output_type
class GetSourceS3ConfigurationFormatSourceS3FileFormatJsonlResult(dict):
    def __init__(__self__, *,
                 block_size: int,
                 filetype: str,
                 newlines_in_values: bool,
                 unexpected_field_behavior: str):
        pulumi.set(__self__, "block_size", block_size)
        pulumi.set(__self__, "filetype", filetype)
        pulumi.set(__self__, "newlines_in_values", newlines_in_values)
        pulumi.set(__self__, "unexpected_field_behavior", unexpected_field_behavior)

    @property
    @pulumi.getter(name="blockSize")
    def block_size(self) -> int:
        return pulumi.get(self, "block_size")

    @property
    @pulumi.getter
    def filetype(self) -> str:
        return pulumi.get(self, "filetype")

    @property
    @pulumi.getter(name="newlinesInValues")
    def newlines_in_values(self) -> bool:
        return pulumi.get(self, "newlines_in_values")

    @property
    @pulumi.getter(name="unexpectedFieldBehavior")
    def unexpected_field_behavior(self) -> str:
        return pulumi.get(self, "unexpected_field_behavior")


@pulumi.output_type
class GetSourceS3ConfigurationFormatSourceS3FileFormatParquetResult(dict):
    def __init__(__self__, *,
                 batch_size: int,
                 buffer_size: int,
                 columns: Sequence[str],
                 filetype: str):
        pulumi.set(__self__, "batch_size", batch_size)
        pulumi.set(__self__, "buffer_size", buffer_size)
        pulumi.set(__self__, "columns", columns)
        pulumi.set(__self__, "filetype", filetype)

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> int:
        return pulumi.get(self, "batch_size")

    @property
    @pulumi.getter(name="bufferSize")
    def buffer_size(self) -> int:
        return pulumi.get(self, "buffer_size")

    @property
    @pulumi.getter
    def columns(self) -> Sequence[str]:
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter
    def filetype(self) -> str:
        return pulumi.get(self, "filetype")


@pulumi.output_type
class GetSourceS3ConfigurationFormatSourceS3UpdateFileFormatAvroResult(dict):
    def __init__(__self__, *,
                 filetype: str):
        pulumi.set(__self__, "filetype", filetype)

    @property
    @pulumi.getter
    def filetype(self) -> str:
        return pulumi.get(self, "filetype")


@pulumi.output_type
class GetSourceS3ConfigurationFormatSourceS3UpdateFileFormatCsvResult(dict):
    def __init__(__self__, *,
                 additional_reader_options: str,
                 advanced_options: str,
                 block_size: int,
                 delimiter: str,
                 double_quote: bool,
                 encoding: str,
                 escape_char: str,
                 filetype: str,
                 infer_datatypes: bool,
                 newlines_in_values: bool,
                 quote_char: str):
        pulumi.set(__self__, "additional_reader_options", additional_reader_options)
        pulumi.set(__self__, "advanced_options", advanced_options)
        pulumi.set(__self__, "block_size", block_size)
        pulumi.set(__self__, "delimiter", delimiter)
        pulumi.set(__self__, "double_quote", double_quote)
        pulumi.set(__self__, "encoding", encoding)
        pulumi.set(__self__, "escape_char", escape_char)
        pulumi.set(__self__, "filetype", filetype)
        pulumi.set(__self__, "infer_datatypes", infer_datatypes)
        pulumi.set(__self__, "newlines_in_values", newlines_in_values)
        pulumi.set(__self__, "quote_char", quote_char)

    @property
    @pulumi.getter(name="additionalReaderOptions")
    def additional_reader_options(self) -> str:
        return pulumi.get(self, "additional_reader_options")

    @property
    @pulumi.getter(name="advancedOptions")
    def advanced_options(self) -> str:
        return pulumi.get(self, "advanced_options")

    @property
    @pulumi.getter(name="blockSize")
    def block_size(self) -> int:
        return pulumi.get(self, "block_size")

    @property
    @pulumi.getter
    def delimiter(self) -> str:
        return pulumi.get(self, "delimiter")

    @property
    @pulumi.getter(name="doubleQuote")
    def double_quote(self) -> bool:
        return pulumi.get(self, "double_quote")

    @property
    @pulumi.getter
    def encoding(self) -> str:
        return pulumi.get(self, "encoding")

    @property
    @pulumi.getter(name="escapeChar")
    def escape_char(self) -> str:
        return pulumi.get(self, "escape_char")

    @property
    @pulumi.getter
    def filetype(self) -> str:
        return pulumi.get(self, "filetype")

    @property
    @pulumi.getter(name="inferDatatypes")
    def infer_datatypes(self) -> bool:
        return pulumi.get(self, "infer_datatypes")

    @property
    @pulumi.getter(name="newlinesInValues")
    def newlines_in_values(self) -> bool:
        return pulumi.get(self, "newlines_in_values")

    @property
    @pulumi.getter(name="quoteChar")
    def quote_char(self) -> str:
        return pulumi.get(self, "quote_char")


@pulumi.output_type
class GetSourceS3ConfigurationFormatSourceS3UpdateFileFormatJsonlResult(dict):
    def __init__(__self__, *,
                 block_size: int,
                 filetype: str,
                 newlines_in_values: bool,
                 unexpected_field_behavior: str):
        pulumi.set(__self__, "block_size", block_size)
        pulumi.set(__self__, "filetype", filetype)
        pulumi.set(__self__, "newlines_in_values", newlines_in_values)
        pulumi.set(__self__, "unexpected_field_behavior", unexpected_field_behavior)

    @property
    @pulumi.getter(name="blockSize")
    def block_size(self) -> int:
        return pulumi.get(self, "block_size")

    @property
    @pulumi.getter
    def filetype(self) -> str:
        return pulumi.get(self, "filetype")

    @property
    @pulumi.getter(name="newlinesInValues")
    def newlines_in_values(self) -> bool:
        return pulumi.get(self, "newlines_in_values")

    @property
    @pulumi.getter(name="unexpectedFieldBehavior")
    def unexpected_field_behavior(self) -> str:
        return pulumi.get(self, "unexpected_field_behavior")


@pulumi.output_type
class GetSourceS3ConfigurationFormatSourceS3UpdateFileFormatParquetResult(dict):
    def __init__(__self__, *,
                 batch_size: int,
                 buffer_size: int,
                 columns: Sequence[str],
                 filetype: str):
        pulumi.set(__self__, "batch_size", batch_size)
        pulumi.set(__self__, "buffer_size", buffer_size)
        pulumi.set(__self__, "columns", columns)
        pulumi.set(__self__, "filetype", filetype)

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> int:
        return pulumi.get(self, "batch_size")

    @property
    @pulumi.getter(name="bufferSize")
    def buffer_size(self) -> int:
        return pulumi.get(self, "buffer_size")

    @property
    @pulumi.getter
    def columns(self) -> Sequence[str]:
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter
    def filetype(self) -> str:
        return pulumi.get(self, "filetype")


@pulumi.output_type
class GetSourceS3ConfigurationProviderResult(dict):
    def __init__(__self__, *,
                 aws_access_key_id: str,
                 aws_secret_access_key: str,
                 bucket: str,
                 endpoint: str,
                 path_prefix: str,
                 start_date: str):
        pulumi.set(__self__, "aws_access_key_id", aws_access_key_id)
        pulumi.set(__self__, "aws_secret_access_key", aws_secret_access_key)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "path_prefix", path_prefix)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> str:
        return pulumi.get(self, "aws_access_key_id")

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> str:
        return pulumi.get(self, "aws_secret_access_key")

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="pathPrefix")
    def path_prefix(self) -> str:
        return pulumi.get(self, "path_prefix")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceSalesforceConfigurationResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 force_use_bulk_api: bool,
                 is_sandbox: bool,
                 refresh_token: str,
                 source_type: str,
                 start_date: str,
                 streams_criterias: Sequence['outputs.GetSourceSalesforceConfigurationStreamsCriteriaResult']):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "force_use_bulk_api", force_use_bulk_api)
        pulumi.set(__self__, "is_sandbox", is_sandbox)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "streams_criterias", streams_criterias)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="forceUseBulkApi")
    def force_use_bulk_api(self) -> bool:
        return pulumi.get(self, "force_use_bulk_api")

    @property
    @pulumi.getter(name="isSandbox")
    def is_sandbox(self) -> bool:
        return pulumi.get(self, "is_sandbox")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="streamsCriterias")
    def streams_criterias(self) -> Sequence['outputs.GetSourceSalesforceConfigurationStreamsCriteriaResult']:
        return pulumi.get(self, "streams_criterias")


@pulumi.output_type
class GetSourceSalesforceConfigurationStreamsCriteriaResult(dict):
    def __init__(__self__, *,
                 criteria: str,
                 value: str):
        pulumi.set(__self__, "criteria", criteria)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def criteria(self) -> str:
        return pulumi.get(self, "criteria")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSourceSalesloftConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourceSalesloftConfigurationCredentialsResult',
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceSalesloftConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceSalesloftConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_salesloft_credentials_authenticate_via_api_key: 'outputs.GetSourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaApiKeyResult',
                 source_salesloft_credentials_authenticate_via_o_auth: 'outputs.GetSourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaOAuthResult',
                 source_salesloft_update_credentials_authenticate_via_api_key: 'outputs.GetSourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaApiKeyResult',
                 source_salesloft_update_credentials_authenticate_via_o_auth: 'outputs.GetSourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaOAuthResult'):
        pulumi.set(__self__, "source_salesloft_credentials_authenticate_via_api_key", source_salesloft_credentials_authenticate_via_api_key)
        pulumi.set(__self__, "source_salesloft_credentials_authenticate_via_o_auth", source_salesloft_credentials_authenticate_via_o_auth)
        pulumi.set(__self__, "source_salesloft_update_credentials_authenticate_via_api_key", source_salesloft_update_credentials_authenticate_via_api_key)
        pulumi.set(__self__, "source_salesloft_update_credentials_authenticate_via_o_auth", source_salesloft_update_credentials_authenticate_via_o_auth)

    @property
    @pulumi.getter(name="sourceSalesloftCredentialsAuthenticateViaApiKey")
    def source_salesloft_credentials_authenticate_via_api_key(self) -> 'outputs.GetSourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaApiKeyResult':
        return pulumi.get(self, "source_salesloft_credentials_authenticate_via_api_key")

    @property
    @pulumi.getter(name="sourceSalesloftCredentialsAuthenticateViaOAuth")
    def source_salesloft_credentials_authenticate_via_o_auth(self) -> 'outputs.GetSourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaOAuthResult':
        return pulumi.get(self, "source_salesloft_credentials_authenticate_via_o_auth")

    @property
    @pulumi.getter(name="sourceSalesloftUpdateCredentialsAuthenticateViaApiKey")
    def source_salesloft_update_credentials_authenticate_via_api_key(self) -> 'outputs.GetSourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaApiKeyResult':
        return pulumi.get(self, "source_salesloft_update_credentials_authenticate_via_api_key")

    @property
    @pulumi.getter(name="sourceSalesloftUpdateCredentialsAuthenticateViaOAuth")
    def source_salesloft_update_credentials_authenticate_via_o_auth(self) -> 'outputs.GetSourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaOAuthResult':
        return pulumi.get(self, "source_salesloft_update_credentials_authenticate_via_o_auth")


@pulumi.output_type
class GetSourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaApiKeyResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 auth_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class GetSourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaOAuthResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 token_expiry_date: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> str:
        return pulumi.get(self, "token_expiry_date")


@pulumi.output_type
class GetSourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaApiKeyResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 auth_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class GetSourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaOAuthResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 token_expiry_date: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> str:
        return pulumi.get(self, "token_expiry_date")


@pulumi.output_type
class GetSourceSapFieldglassConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceSecodaConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceSendgridConfigurationResult(dict):
    def __init__(__self__, *,
                 apikey: str,
                 source_type: str,
                 start_time: str):
        pulumi.set(__self__, "apikey", apikey)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def apikey(self) -> str:
        return pulumi.get(self, "apikey")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetSourceSendinblueConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceSenseforceConfigurationResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 backend_url: str,
                 dataset_id: str,
                 slice_range: int,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "backend_url", backend_url)
        pulumi.set(__self__, "dataset_id", dataset_id)
        pulumi.set(__self__, "slice_range", slice_range)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="backendUrl")
    def backend_url(self) -> str:
        return pulumi.get(self, "backend_url")

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> str:
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="sliceRange")
    def slice_range(self) -> int:
        return pulumi.get(self, "slice_range")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceSentryConfigurationResult(dict):
    def __init__(__self__, *,
                 auth_token: str,
                 discover_fields: Sequence[str],
                 hostname: str,
                 organization: str,
                 project: str,
                 source_type: str):
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "discover_fields", discover_fields)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> str:
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="discoverFields")
    def discover_fields(self) -> Sequence[str]:
        return pulumi.get(self, "discover_fields")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def project(self) -> str:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceSftpBulkConfigurationResult(dict):
    def __init__(__self__, *,
                 file_most_recent: bool,
                 file_pattern: str,
                 file_type: str,
                 folder_path: str,
                 host: str,
                 password: str,
                 port: int,
                 private_key: str,
                 separator: str,
                 source_type: str,
                 start_date: str,
                 stream_name: str,
                 username: str):
        pulumi.set(__self__, "file_most_recent", file_most_recent)
        pulumi.set(__self__, "file_pattern", file_pattern)
        pulumi.set(__self__, "file_type", file_type)
        pulumi.set(__self__, "folder_path", folder_path)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "private_key", private_key)
        pulumi.set(__self__, "separator", separator)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "stream_name", stream_name)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="fileMostRecent")
    def file_most_recent(self) -> bool:
        return pulumi.get(self, "file_most_recent")

    @property
    @pulumi.getter(name="filePattern")
    def file_pattern(self) -> str:
        return pulumi.get(self, "file_pattern")

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> str:
        return pulumi.get(self, "file_type")

    @property
    @pulumi.getter(name="folderPath")
    def folder_path(self) -> str:
        return pulumi.get(self, "folder_path")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> str:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter
    def separator(self) -> str:
        return pulumi.get(self, "separator")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        return pulumi.get(self, "stream_name")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSourceSftpConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourceSftpConfigurationCredentialsResult',
                 file_pattern: str,
                 file_types: str,
                 folder_path: str,
                 host: str,
                 port: int,
                 source_type: str,
                 user: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "file_pattern", file_pattern)
        pulumi.set(__self__, "file_types", file_types)
        pulumi.set(__self__, "folder_path", folder_path)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceSftpConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="filePattern")
    def file_pattern(self) -> str:
        return pulumi.get(self, "file_pattern")

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> str:
        return pulumi.get(self, "file_types")

    @property
    @pulumi.getter(name="folderPath")
    def folder_path(self) -> str:
        return pulumi.get(self, "folder_path")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")


@pulumi.output_type
class GetSourceSftpConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_sftp_authentication_wildcard_password_authentication: 'outputs.GetSourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardPasswordAuthenticationResult',
                 source_sftp_authentication_wildcard_ssh_key_authentication: 'outputs.GetSourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardSshKeyAuthenticationResult',
                 source_sftp_update_authentication_wildcard_password_authentication: 'outputs.GetSourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardPasswordAuthenticationResult',
                 source_sftp_update_authentication_wildcard_ssh_key_authentication: 'outputs.GetSourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardSshKeyAuthenticationResult'):
        pulumi.set(__self__, "source_sftp_authentication_wildcard_password_authentication", source_sftp_authentication_wildcard_password_authentication)
        pulumi.set(__self__, "source_sftp_authentication_wildcard_ssh_key_authentication", source_sftp_authentication_wildcard_ssh_key_authentication)
        pulumi.set(__self__, "source_sftp_update_authentication_wildcard_password_authentication", source_sftp_update_authentication_wildcard_password_authentication)
        pulumi.set(__self__, "source_sftp_update_authentication_wildcard_ssh_key_authentication", source_sftp_update_authentication_wildcard_ssh_key_authentication)

    @property
    @pulumi.getter(name="sourceSftpAuthenticationWildcardPasswordAuthentication")
    def source_sftp_authentication_wildcard_password_authentication(self) -> 'outputs.GetSourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardPasswordAuthenticationResult':
        return pulumi.get(self, "source_sftp_authentication_wildcard_password_authentication")

    @property
    @pulumi.getter(name="sourceSftpAuthenticationWildcardSshKeyAuthentication")
    def source_sftp_authentication_wildcard_ssh_key_authentication(self) -> 'outputs.GetSourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardSshKeyAuthenticationResult':
        return pulumi.get(self, "source_sftp_authentication_wildcard_ssh_key_authentication")

    @property
    @pulumi.getter(name="sourceSftpUpdateAuthenticationWildcardPasswordAuthentication")
    def source_sftp_update_authentication_wildcard_password_authentication(self) -> 'outputs.GetSourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardPasswordAuthenticationResult':
        return pulumi.get(self, "source_sftp_update_authentication_wildcard_password_authentication")

    @property
    @pulumi.getter(name="sourceSftpUpdateAuthenticationWildcardSshKeyAuthentication")
    def source_sftp_update_authentication_wildcard_ssh_key_authentication(self) -> 'outputs.GetSourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardSshKeyAuthenticationResult':
        return pulumi.get(self, "source_sftp_update_authentication_wildcard_ssh_key_authentication")


@pulumi.output_type
class GetSourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 auth_method: str,
                 auth_user_password: str):
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "auth_user_password", auth_user_password)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="authUserPassword")
    def auth_user_password(self) -> str:
        return pulumi.get(self, "auth_user_password")


@pulumi.output_type
class GetSourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 auth_method: str,
                 auth_ssh_key: str):
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "auth_ssh_key", auth_ssh_key)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="authSshKey")
    def auth_ssh_key(self) -> str:
        return pulumi.get(self, "auth_ssh_key")


@pulumi.output_type
class GetSourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardPasswordAuthenticationResult(dict):
    def __init__(__self__, *,
                 auth_method: str,
                 auth_user_password: str):
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "auth_user_password", auth_user_password)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="authUserPassword")
    def auth_user_password(self) -> str:
        return pulumi.get(self, "auth_user_password")


@pulumi.output_type
class GetSourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardSshKeyAuthenticationResult(dict):
    def __init__(__self__, *,
                 auth_method: str,
                 auth_ssh_key: str):
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "auth_ssh_key", auth_ssh_key)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="authSshKey")
    def auth_ssh_key(self) -> str:
        return pulumi.get(self, "auth_ssh_key")


@pulumi.output_type
class GetSourceShopifyConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourceShopifyConfigurationCredentialsResult',
                 shop: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "shop", shop)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceShopifyConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def shop(self) -> str:
        return pulumi.get(self, "shop")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceShopifyConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_shopify_shopify_authorization_method_api_password: 'outputs.GetSourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodApiPasswordResult',
                 source_shopify_shopify_authorization_method_o_auth20: 'outputs.GetSourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodOAuth20Result',
                 source_shopify_update_shopify_authorization_method_api_password: 'outputs.GetSourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodApiPasswordResult',
                 source_shopify_update_shopify_authorization_method_o_auth20: 'outputs.GetSourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodOAuth20Result'):
        pulumi.set(__self__, "source_shopify_shopify_authorization_method_api_password", source_shopify_shopify_authorization_method_api_password)
        pulumi.set(__self__, "source_shopify_shopify_authorization_method_o_auth20", source_shopify_shopify_authorization_method_o_auth20)
        pulumi.set(__self__, "source_shopify_update_shopify_authorization_method_api_password", source_shopify_update_shopify_authorization_method_api_password)
        pulumi.set(__self__, "source_shopify_update_shopify_authorization_method_o_auth20", source_shopify_update_shopify_authorization_method_o_auth20)

    @property
    @pulumi.getter(name="sourceShopifyShopifyAuthorizationMethodApiPassword")
    def source_shopify_shopify_authorization_method_api_password(self) -> 'outputs.GetSourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodApiPasswordResult':
        return pulumi.get(self, "source_shopify_shopify_authorization_method_api_password")

    @property
    @pulumi.getter(name="sourceShopifyShopifyAuthorizationMethodOAuth20")
    def source_shopify_shopify_authorization_method_o_auth20(self) -> 'outputs.GetSourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodOAuth20Result':
        return pulumi.get(self, "source_shopify_shopify_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourceShopifyUpdateShopifyAuthorizationMethodApiPassword")
    def source_shopify_update_shopify_authorization_method_api_password(self) -> 'outputs.GetSourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodApiPasswordResult':
        return pulumi.get(self, "source_shopify_update_shopify_authorization_method_api_password")

    @property
    @pulumi.getter(name="sourceShopifyUpdateShopifyAuthorizationMethodOAuth20")
    def source_shopify_update_shopify_authorization_method_o_auth20(self) -> 'outputs.GetSourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodOAuth20Result':
        return pulumi.get(self, "source_shopify_update_shopify_authorization_method_o_auth20")


@pulumi.output_type
class GetSourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodApiPasswordResult(dict):
    def __init__(__self__, *,
                 api_password: str,
                 auth_method: str):
        pulumi.set(__self__, "api_password", api_password)
        pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="apiPassword")
    def api_password(self) -> str:
        return pulumi.get(self, "api_password")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")


@pulumi.output_type
class GetSourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_method: str,
                 client_id: str,
                 client_secret: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class GetSourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodApiPasswordResult(dict):
    def __init__(__self__, *,
                 api_password: str,
                 auth_method: str):
        pulumi.set(__self__, "api_password", api_password)
        pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="apiPassword")
    def api_password(self) -> str:
        return pulumi.get(self, "api_password")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")


@pulumi.output_type
class GetSourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_method: str,
                 client_id: str,
                 client_secret: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class GetSourceShortioConfigurationResult(dict):
    def __init__(__self__, *,
                 domain_id: str,
                 secret_key: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> str:
        return pulumi.get(self, "domain_id")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceSlackConfigurationResult(dict):
    def __init__(__self__, *,
                 channel_filters: Sequence[str],
                 credentials: 'outputs.GetSourceSlackConfigurationCredentialsResult',
                 join_channels: bool,
                 lookback_window: int,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "channel_filters", channel_filters)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "join_channels", join_channels)
        pulumi.set(__self__, "lookback_window", lookback_window)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="channelFilters")
    def channel_filters(self) -> Sequence[str]:
        return pulumi.get(self, "channel_filters")

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceSlackConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="joinChannels")
    def join_channels(self) -> bool:
        return pulumi.get(self, "join_channels")

    @property
    @pulumi.getter(name="lookbackWindow")
    def lookback_window(self) -> int:
        return pulumi.get(self, "lookback_window")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceSlackConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_slack_authentication_mechanism_api_token: 'outputs.GetSourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismApiTokenResult',
                 source_slack_authentication_mechanism_sign_in_via_slack_o_auth: 'outputs.GetSourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismSignInViaSlackOAuthResult',
                 source_slack_update_authentication_mechanism_api_token: 'outputs.GetSourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismApiTokenResult',
                 source_slack_update_authentication_mechanism_sign_in_via_slack_o_auth: 'outputs.GetSourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuthResult'):
        pulumi.set(__self__, "source_slack_authentication_mechanism_api_token", source_slack_authentication_mechanism_api_token)
        pulumi.set(__self__, "source_slack_authentication_mechanism_sign_in_via_slack_o_auth", source_slack_authentication_mechanism_sign_in_via_slack_o_auth)
        pulumi.set(__self__, "source_slack_update_authentication_mechanism_api_token", source_slack_update_authentication_mechanism_api_token)
        pulumi.set(__self__, "source_slack_update_authentication_mechanism_sign_in_via_slack_o_auth", source_slack_update_authentication_mechanism_sign_in_via_slack_o_auth)

    @property
    @pulumi.getter(name="sourceSlackAuthenticationMechanismApiToken")
    def source_slack_authentication_mechanism_api_token(self) -> 'outputs.GetSourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismApiTokenResult':
        return pulumi.get(self, "source_slack_authentication_mechanism_api_token")

    @property
    @pulumi.getter(name="sourceSlackAuthenticationMechanismSignInViaSlackOAuth")
    def source_slack_authentication_mechanism_sign_in_via_slack_o_auth(self) -> 'outputs.GetSourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismSignInViaSlackOAuthResult':
        return pulumi.get(self, "source_slack_authentication_mechanism_sign_in_via_slack_o_auth")

    @property
    @pulumi.getter(name="sourceSlackUpdateAuthenticationMechanismApiToken")
    def source_slack_update_authentication_mechanism_api_token(self) -> 'outputs.GetSourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismApiTokenResult':
        return pulumi.get(self, "source_slack_update_authentication_mechanism_api_token")

    @property
    @pulumi.getter(name="sourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth")
    def source_slack_update_authentication_mechanism_sign_in_via_slack_o_auth(self) -> 'outputs.GetSourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuthResult':
        return pulumi.get(self, "source_slack_update_authentication_mechanism_sign_in_via_slack_o_auth")


@pulumi.output_type
class GetSourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismApiTokenResult(dict):
    def __init__(__self__, *,
                 api_token: str,
                 option_title: str):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> str:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class GetSourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismSignInViaSlackOAuthResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 client_id: str,
                 client_secret: str,
                 option_title: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> str:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class GetSourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismApiTokenResult(dict):
    def __init__(__self__, *,
                 api_token: str,
                 option_title: str):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> str:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class GetSourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuthResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 client_id: str,
                 client_secret: str,
                 option_title: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> str:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class GetSourceSmailyConfigurationResult(dict):
    def __init__(__self__, *,
                 api_password: str,
                 api_subdomain: str,
                 api_username: str,
                 source_type: str):
        pulumi.set(__self__, "api_password", api_password)
        pulumi.set(__self__, "api_subdomain", api_subdomain)
        pulumi.set(__self__, "api_username", api_username)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiPassword")
    def api_password(self) -> str:
        return pulumi.get(self, "api_password")

    @property
    @pulumi.getter(name="apiSubdomain")
    def api_subdomain(self) -> str:
        return pulumi.get(self, "api_subdomain")

    @property
    @pulumi.getter(name="apiUsername")
    def api_username(self) -> str:
        return pulumi.get(self, "api_username")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceSmartengageConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceSmartsheetsConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourceSmartsheetsConfigurationCredentialsResult',
                 metadata_fields: Sequence[str],
                 source_type: str,
                 spreadsheet_id: str,
                 start_datetime: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "metadata_fields", metadata_fields)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "spreadsheet_id", spreadsheet_id)
        pulumi.set(__self__, "start_datetime", start_datetime)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceSmartsheetsConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="metadataFields")
    def metadata_fields(self) -> Sequence[str]:
        return pulumi.get(self, "metadata_fields")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="spreadsheetId")
    def spreadsheet_id(self) -> str:
        return pulumi.get(self, "spreadsheet_id")

    @property
    @pulumi.getter(name="startDatetime")
    def start_datetime(self) -> str:
        return pulumi.get(self, "start_datetime")


@pulumi.output_type
class GetSourceSmartsheetsConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_smartsheets_authorization_method_api_access_token: 'outputs.GetSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodApiAccessTokenResult',
                 source_smartsheets_authorization_method_o_auth20: 'outputs.GetSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodOAuth20Result',
                 source_smartsheets_update_authorization_method_api_access_token: 'outputs.GetSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodApiAccessTokenResult',
                 source_smartsheets_update_authorization_method_o_auth20: 'outputs.GetSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodOAuth20Result'):
        pulumi.set(__self__, "source_smartsheets_authorization_method_api_access_token", source_smartsheets_authorization_method_api_access_token)
        pulumi.set(__self__, "source_smartsheets_authorization_method_o_auth20", source_smartsheets_authorization_method_o_auth20)
        pulumi.set(__self__, "source_smartsheets_update_authorization_method_api_access_token", source_smartsheets_update_authorization_method_api_access_token)
        pulumi.set(__self__, "source_smartsheets_update_authorization_method_o_auth20", source_smartsheets_update_authorization_method_o_auth20)

    @property
    @pulumi.getter(name="sourceSmartsheetsAuthorizationMethodApiAccessToken")
    def source_smartsheets_authorization_method_api_access_token(self) -> 'outputs.GetSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodApiAccessTokenResult':
        return pulumi.get(self, "source_smartsheets_authorization_method_api_access_token")

    @property
    @pulumi.getter(name="sourceSmartsheetsAuthorizationMethodOAuth20")
    def source_smartsheets_authorization_method_o_auth20(self) -> 'outputs.GetSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodOAuth20Result':
        return pulumi.get(self, "source_smartsheets_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourceSmartsheetsUpdateAuthorizationMethodApiAccessToken")
    def source_smartsheets_update_authorization_method_api_access_token(self) -> 'outputs.GetSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodApiAccessTokenResult':
        return pulumi.get(self, "source_smartsheets_update_authorization_method_api_access_token")

    @property
    @pulumi.getter(name="sourceSmartsheetsUpdateAuthorizationMethodOAuth20")
    def source_smartsheets_update_authorization_method_o_auth20(self) -> 'outputs.GetSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodOAuth20Result':
        return pulumi.get(self, "source_smartsheets_update_authorization_method_o_auth20")


@pulumi.output_type
class GetSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodApiAccessTokenResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class GetSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 token_expiry_date: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> str:
        return pulumi.get(self, "token_expiry_date")


@pulumi.output_type
class GetSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodApiAccessTokenResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class GetSourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 token_expiry_date: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> str:
        return pulumi.get(self, "token_expiry_date")


@pulumi.output_type
class GetSourceSnapchatMarketingConfigurationResult(dict):
    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 end_date: str,
                 refresh_token: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceSnowflakeConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourceSnowflakeConfigurationCredentialsResult',
                 database: str,
                 host: str,
                 jdbc_url_params: str,
                 role: str,
                 schema: str,
                 source_type: str,
                 warehouse: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "warehouse", warehouse)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceSnowflakeConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> str:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def warehouse(self) -> str:
        return pulumi.get(self, "warehouse")


@pulumi.output_type
class GetSourceSnowflakeConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_snowflake_authorization_method_o_auth20: 'outputs.GetSourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodOAuth20Result',
                 source_snowflake_authorization_method_username_and_password: 'outputs.GetSourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodUsernameAndPasswordResult',
                 source_snowflake_update_authorization_method_o_auth20: 'outputs.GetSourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodOAuth20Result',
                 source_snowflake_update_authorization_method_username_and_password: 'outputs.GetSourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodUsernameAndPasswordResult'):
        pulumi.set(__self__, "source_snowflake_authorization_method_o_auth20", source_snowflake_authorization_method_o_auth20)
        pulumi.set(__self__, "source_snowflake_authorization_method_username_and_password", source_snowflake_authorization_method_username_and_password)
        pulumi.set(__self__, "source_snowflake_update_authorization_method_o_auth20", source_snowflake_update_authorization_method_o_auth20)
        pulumi.set(__self__, "source_snowflake_update_authorization_method_username_and_password", source_snowflake_update_authorization_method_username_and_password)

    @property
    @pulumi.getter(name="sourceSnowflakeAuthorizationMethodOAuth20")
    def source_snowflake_authorization_method_o_auth20(self) -> 'outputs.GetSourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodOAuth20Result':
        return pulumi.get(self, "source_snowflake_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourceSnowflakeAuthorizationMethodUsernameAndPassword")
    def source_snowflake_authorization_method_username_and_password(self) -> 'outputs.GetSourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodUsernameAndPasswordResult':
        return pulumi.get(self, "source_snowflake_authorization_method_username_and_password")

    @property
    @pulumi.getter(name="sourceSnowflakeUpdateAuthorizationMethodOAuth20")
    def source_snowflake_update_authorization_method_o_auth20(self) -> 'outputs.GetSourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodOAuth20Result':
        return pulumi.get(self, "source_snowflake_update_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword")
    def source_snowflake_update_authorization_method_username_and_password(self) -> 'outputs.GetSourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodUsernameAndPasswordResult':
        return pulumi.get(self, "source_snowflake_update_authorization_method_username_and_password")


@pulumi.output_type
class GetSourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodUsernameAndPasswordResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 password: str,
                 username: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodUsernameAndPasswordResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 password: str,
                 username: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSourceSonarCloudConfigurationResult(dict):
    def __init__(__self__, *,
                 component_keys: Sequence[str],
                 end_date: str,
                 organization: str,
                 source_type: str,
                 start_date: str,
                 user_token: str):
        pulumi.set(__self__, "component_keys", component_keys)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "user_token", user_token)

    @property
    @pulumi.getter(name="componentKeys")
    def component_keys(self) -> Sequence[str]:
        return pulumi.get(self, "component_keys")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="userToken")
    def user_token(self) -> str:
        return pulumi.get(self, "user_token")


@pulumi.output_type
class GetSourceSpaceXApiConfigurationResult(dict):
    def __init__(__self__, *,
                 id: str,
                 options: str,
                 source_type: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "options", options)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def options(self) -> str:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceSquareConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourceSquareConfigurationCredentialsResult',
                 include_deleted_objects: bool,
                 is_sandbox: bool,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "include_deleted_objects", include_deleted_objects)
        pulumi.set(__self__, "is_sandbox", is_sandbox)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceSquareConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="includeDeletedObjects")
    def include_deleted_objects(self) -> bool:
        return pulumi.get(self, "include_deleted_objects")

    @property
    @pulumi.getter(name="isSandbox")
    def is_sandbox(self) -> bool:
        return pulumi.get(self, "is_sandbox")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceSquareConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_square_authentication_api_key: 'outputs.GetSourceSquareConfigurationCredentialsSourceSquareAuthenticationApiKeyResult',
                 source_square_authentication_oauth_authentication: 'outputs.GetSourceSquareConfigurationCredentialsSourceSquareAuthenticationOauthAuthenticationResult',
                 source_square_update_authentication_api_key: 'outputs.GetSourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationApiKeyResult',
                 source_square_update_authentication_oauth_authentication: 'outputs.GetSourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationOauthAuthenticationResult'):
        pulumi.set(__self__, "source_square_authentication_api_key", source_square_authentication_api_key)
        pulumi.set(__self__, "source_square_authentication_oauth_authentication", source_square_authentication_oauth_authentication)
        pulumi.set(__self__, "source_square_update_authentication_api_key", source_square_update_authentication_api_key)
        pulumi.set(__self__, "source_square_update_authentication_oauth_authentication", source_square_update_authentication_oauth_authentication)

    @property
    @pulumi.getter(name="sourceSquareAuthenticationApiKey")
    def source_square_authentication_api_key(self) -> 'outputs.GetSourceSquareConfigurationCredentialsSourceSquareAuthenticationApiKeyResult':
        return pulumi.get(self, "source_square_authentication_api_key")

    @property
    @pulumi.getter(name="sourceSquareAuthenticationOauthAuthentication")
    def source_square_authentication_oauth_authentication(self) -> 'outputs.GetSourceSquareConfigurationCredentialsSourceSquareAuthenticationOauthAuthenticationResult':
        return pulumi.get(self, "source_square_authentication_oauth_authentication")

    @property
    @pulumi.getter(name="sourceSquareUpdateAuthenticationApiKey")
    def source_square_update_authentication_api_key(self) -> 'outputs.GetSourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationApiKeyResult':
        return pulumi.get(self, "source_square_update_authentication_api_key")

    @property
    @pulumi.getter(name="sourceSquareUpdateAuthenticationOauthAuthentication")
    def source_square_update_authentication_oauth_authentication(self) -> 'outputs.GetSourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationOauthAuthenticationResult':
        return pulumi.get(self, "source_square_update_authentication_oauth_authentication")


@pulumi.output_type
class GetSourceSquareConfigurationCredentialsSourceSquareAuthenticationApiKeyResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 auth_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class GetSourceSquareConfigurationCredentialsSourceSquareAuthenticationOauthAuthenticationResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationApiKeyResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 auth_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class GetSourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationOauthAuthenticationResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourceStravaConfigurationResult(dict):
    def __init__(__self__, *,
                 athlete_id: int,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "athlete_id", athlete_id)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="athleteId")
    def athlete_id(self) -> int:
        return pulumi.get(self, "athlete_id")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceStripeConfigurationResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 client_secret: str,
                 lookback_window_days: int,
                 slice_range: int,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "lookback_window_days", lookback_window_days)
        pulumi.set(__self__, "slice_range", slice_range)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="lookbackWindowDays")
    def lookback_window_days(self) -> int:
        return pulumi.get(self, "lookback_window_days")

    @property
    @pulumi.getter(name="sliceRange")
    def slice_range(self) -> int:
        return pulumi.get(self, "slice_range")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceSurveySparrowConfigurationResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 region: 'outputs.GetSourceSurveySparrowConfigurationRegionResult',
                 source_type: str,
                 survey_ids: Sequence[str]):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "survey_ids", survey_ids)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter
    def region(self) -> 'outputs.GetSourceSurveySparrowConfigurationRegionResult':
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="surveyIds")
    def survey_ids(self) -> Sequence[str]:
        return pulumi.get(self, "survey_ids")


@pulumi.output_type
class GetSourceSurveySparrowConfigurationRegionResult(dict):
    def __init__(__self__, *,
                 source_survey_sparrow_base_url_eu_based_account: 'outputs.GetSourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlEuBasedAccountResult',
                 source_survey_sparrow_base_url_global_account: 'outputs.GetSourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlGlobalAccountResult',
                 source_survey_sparrow_update_base_url_eu_based_account: 'outputs.GetSourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlEuBasedAccountResult',
                 source_survey_sparrow_update_base_url_global_account: 'outputs.GetSourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlGlobalAccountResult'):
        pulumi.set(__self__, "source_survey_sparrow_base_url_eu_based_account", source_survey_sparrow_base_url_eu_based_account)
        pulumi.set(__self__, "source_survey_sparrow_base_url_global_account", source_survey_sparrow_base_url_global_account)
        pulumi.set(__self__, "source_survey_sparrow_update_base_url_eu_based_account", source_survey_sparrow_update_base_url_eu_based_account)
        pulumi.set(__self__, "source_survey_sparrow_update_base_url_global_account", source_survey_sparrow_update_base_url_global_account)

    @property
    @pulumi.getter(name="sourceSurveySparrowBaseUrlEuBasedAccount")
    def source_survey_sparrow_base_url_eu_based_account(self) -> 'outputs.GetSourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlEuBasedAccountResult':
        return pulumi.get(self, "source_survey_sparrow_base_url_eu_based_account")

    @property
    @pulumi.getter(name="sourceSurveySparrowBaseUrlGlobalAccount")
    def source_survey_sparrow_base_url_global_account(self) -> 'outputs.GetSourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlGlobalAccountResult':
        return pulumi.get(self, "source_survey_sparrow_base_url_global_account")

    @property
    @pulumi.getter(name="sourceSurveySparrowUpdateBaseUrlEuBasedAccount")
    def source_survey_sparrow_update_base_url_eu_based_account(self) -> 'outputs.GetSourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlEuBasedAccountResult':
        return pulumi.get(self, "source_survey_sparrow_update_base_url_eu_based_account")

    @property
    @pulumi.getter(name="sourceSurveySparrowUpdateBaseUrlGlobalAccount")
    def source_survey_sparrow_update_base_url_global_account(self) -> 'outputs.GetSourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlGlobalAccountResult':
        return pulumi.get(self, "source_survey_sparrow_update_base_url_global_account")


@pulumi.output_type
class GetSourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlEuBasedAccountResult(dict):
    def __init__(__self__, *,
                 url_base: str):
        pulumi.set(__self__, "url_base", url_base)

    @property
    @pulumi.getter(name="urlBase")
    def url_base(self) -> str:
        return pulumi.get(self, "url_base")


@pulumi.output_type
class GetSourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlGlobalAccountResult(dict):
    def __init__(__self__, *,
                 url_base: str):
        pulumi.set(__self__, "url_base", url_base)

    @property
    @pulumi.getter(name="urlBase")
    def url_base(self) -> str:
        return pulumi.get(self, "url_base")


@pulumi.output_type
class GetSourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlEuBasedAccountResult(dict):
    def __init__(__self__, *,
                 url_base: str):
        pulumi.set(__self__, "url_base", url_base)

    @property
    @pulumi.getter(name="urlBase")
    def url_base(self) -> str:
        return pulumi.get(self, "url_base")


@pulumi.output_type
class GetSourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlGlobalAccountResult(dict):
    def __init__(__self__, *,
                 url_base: str):
        pulumi.set(__self__, "url_base", url_base)

    @property
    @pulumi.getter(name="urlBase")
    def url_base(self) -> str:
        return pulumi.get(self, "url_base")


@pulumi.output_type
class GetSourceSurveymonkeyConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourceSurveymonkeyConfigurationCredentialsResult',
                 origin: str,
                 source_type: str,
                 start_date: str,
                 survey_ids: Sequence[str]):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "origin", origin)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "survey_ids", survey_ids)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceSurveymonkeyConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def origin(self) -> str:
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="surveyIds")
    def survey_ids(self) -> Sequence[str]:
        return pulumi.get(self, "survey_ids")


@pulumi.output_type
class GetSourceSurveymonkeyConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_method: str,
                 client_id: str,
                 client_secret: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class GetSourceTempoConfigurationResult(dict):
    def __init__(__self__, *,
                 api_token: str,
                 source_type: str):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceTheGuardianApiConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 end_date: str,
                 query: str,
                 section: str,
                 source_type: str,
                 start_date: str,
                 tag: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "section", section)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def section(self) -> str:
        return pulumi.get(self, "section")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def tag(self) -> str:
        return pulumi.get(self, "tag")


@pulumi.output_type
class GetSourceTiktokMarketingConfigurationResult(dict):
    def __init__(__self__, *,
                 attribution_window: int,
                 credentials: 'outputs.GetSourceTiktokMarketingConfigurationCredentialsResult',
                 end_date: str,
                 include_deleted: bool,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "attribution_window", attribution_window)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "include_deleted", include_deleted)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="attributionWindow")
    def attribution_window(self) -> int:
        return pulumi.get(self, "attribution_window")

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceTiktokMarketingConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="includeDeleted")
    def include_deleted(self) -> bool:
        return pulumi.get(self, "include_deleted")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceTiktokMarketingConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_tiktok_marketing_authentication_method_o_auth20: 'outputs.GetSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodOAuth20Result',
                 source_tiktok_marketing_authentication_method_sandbox_access_token: 'outputs.GetSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodSandboxAccessTokenResult',
                 source_tiktok_marketing_update_authentication_method_o_auth20: 'outputs.GetSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodOAuth20Result',
                 source_tiktok_marketing_update_authentication_method_sandbox_access_token: 'outputs.GetSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessTokenResult'):
        pulumi.set(__self__, "source_tiktok_marketing_authentication_method_o_auth20", source_tiktok_marketing_authentication_method_o_auth20)
        pulumi.set(__self__, "source_tiktok_marketing_authentication_method_sandbox_access_token", source_tiktok_marketing_authentication_method_sandbox_access_token)
        pulumi.set(__self__, "source_tiktok_marketing_update_authentication_method_o_auth20", source_tiktok_marketing_update_authentication_method_o_auth20)
        pulumi.set(__self__, "source_tiktok_marketing_update_authentication_method_sandbox_access_token", source_tiktok_marketing_update_authentication_method_sandbox_access_token)

    @property
    @pulumi.getter(name="sourceTiktokMarketingAuthenticationMethodOAuth20")
    def source_tiktok_marketing_authentication_method_o_auth20(self) -> 'outputs.GetSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodOAuth20Result':
        return pulumi.get(self, "source_tiktok_marketing_authentication_method_o_auth20")

    @property
    @pulumi.getter(name="sourceTiktokMarketingAuthenticationMethodSandboxAccessToken")
    def source_tiktok_marketing_authentication_method_sandbox_access_token(self) -> 'outputs.GetSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodSandboxAccessTokenResult':
        return pulumi.get(self, "source_tiktok_marketing_authentication_method_sandbox_access_token")

    @property
    @pulumi.getter(name="sourceTiktokMarketingUpdateAuthenticationMethodOAuth20")
    def source_tiktok_marketing_update_authentication_method_o_auth20(self) -> 'outputs.GetSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodOAuth20Result':
        return pulumi.get(self, "source_tiktok_marketing_update_authentication_method_o_auth20")

    @property
    @pulumi.getter(name="sourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken")
    def source_tiktok_marketing_update_authentication_method_sandbox_access_token(self) -> 'outputs.GetSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessTokenResult':
        return pulumi.get(self, "source_tiktok_marketing_update_authentication_method_sandbox_access_token")


@pulumi.output_type
class GetSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 advertiser_id: str,
                 app_id: str,
                 auth_type: str,
                 secret: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "advertiser_id", advertiser_id)
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="advertiserId")
    def advertiser_id(self) -> str:
        return pulumi.get(self, "advertiser_id")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def secret(self) -> str:
        return pulumi.get(self, "secret")


@pulumi.output_type
class GetSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodSandboxAccessTokenResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 advertiser_id: str,
                 auth_type: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "advertiser_id", advertiser_id)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="advertiserId")
    def advertiser_id(self) -> str:
        return pulumi.get(self, "advertiser_id")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class GetSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 advertiser_id: str,
                 app_id: str,
                 auth_type: str,
                 secret: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "advertiser_id", advertiser_id)
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="advertiserId")
    def advertiser_id(self) -> str:
        return pulumi.get(self, "advertiser_id")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def secret(self) -> str:
        return pulumi.get(self, "secret")


@pulumi.output_type
class GetSourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessTokenResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 advertiser_id: str,
                 auth_type: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "advertiser_id", advertiser_id)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="advertiserId")
    def advertiser_id(self) -> str:
        return pulumi.get(self, "advertiser_id")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class GetSourceTodoistConfigurationResult(dict):
    def __init__(__self__, *,
                 source_type: str,
                 token: str):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def token(self) -> str:
        return pulumi.get(self, "token")


@pulumi.output_type
class GetSourceTrelloConfigurationResult(dict):
    def __init__(__self__, *,
                 board_ids: Sequence[str],
                 key: str,
                 source_type: str,
                 start_date: str,
                 token: str):
        pulumi.set(__self__, "board_ids", board_ids)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="boardIds")
    def board_ids(self) -> Sequence[str]:
        return pulumi.get(self, "board_ids")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def token(self) -> str:
        return pulumi.get(self, "token")


@pulumi.output_type
class GetSourceTrustpilotConfigurationResult(dict):
    def __init__(__self__, *,
                 business_units: Sequence[str],
                 credentials: 'outputs.GetSourceTrustpilotConfigurationCredentialsResult',
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "business_units", business_units)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="businessUnits")
    def business_units(self) -> Sequence[str]:
        return pulumi.get(self, "business_units")

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceTrustpilotConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceTrustpilotConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_trustpilot_authorization_method_api_key: 'outputs.GetSourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodApiKeyResult',
                 source_trustpilot_authorization_method_o_auth20: 'outputs.GetSourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodOAuth20Result',
                 source_trustpilot_update_authorization_method_api_key: 'outputs.GetSourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodApiKeyResult',
                 source_trustpilot_update_authorization_method_o_auth20: 'outputs.GetSourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodOAuth20Result'):
        pulumi.set(__self__, "source_trustpilot_authorization_method_api_key", source_trustpilot_authorization_method_api_key)
        pulumi.set(__self__, "source_trustpilot_authorization_method_o_auth20", source_trustpilot_authorization_method_o_auth20)
        pulumi.set(__self__, "source_trustpilot_update_authorization_method_api_key", source_trustpilot_update_authorization_method_api_key)
        pulumi.set(__self__, "source_trustpilot_update_authorization_method_o_auth20", source_trustpilot_update_authorization_method_o_auth20)

    @property
    @pulumi.getter(name="sourceTrustpilotAuthorizationMethodApiKey")
    def source_trustpilot_authorization_method_api_key(self) -> 'outputs.GetSourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodApiKeyResult':
        return pulumi.get(self, "source_trustpilot_authorization_method_api_key")

    @property
    @pulumi.getter(name="sourceTrustpilotAuthorizationMethodOAuth20")
    def source_trustpilot_authorization_method_o_auth20(self) -> 'outputs.GetSourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodOAuth20Result':
        return pulumi.get(self, "source_trustpilot_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourceTrustpilotUpdateAuthorizationMethodApiKey")
    def source_trustpilot_update_authorization_method_api_key(self) -> 'outputs.GetSourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodApiKeyResult':
        return pulumi.get(self, "source_trustpilot_update_authorization_method_api_key")

    @property
    @pulumi.getter(name="sourceTrustpilotUpdateAuthorizationMethodOAuth20")
    def source_trustpilot_update_authorization_method_o_auth20(self) -> 'outputs.GetSourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodOAuth20Result':
        return pulumi.get(self, "source_trustpilot_update_authorization_method_o_auth20")


@pulumi.output_type
class GetSourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodApiKeyResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")


@pulumi.output_type
class GetSourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 token_expiry_date: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> str:
        return pulumi.get(self, "token_expiry_date")


@pulumi.output_type
class GetSourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodApiKeyResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")


@pulumi.output_type
class GetSourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 token_expiry_date: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> str:
        return pulumi.get(self, "token_expiry_date")


@pulumi.output_type
class GetSourceTvmazeScheduleConfigurationResult(dict):
    def __init__(__self__, *,
                 domestic_schedule_country_code: str,
                 end_date: str,
                 source_type: str,
                 start_date: str,
                 web_schedule_country_code: str):
        pulumi.set(__self__, "domestic_schedule_country_code", domestic_schedule_country_code)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "web_schedule_country_code", web_schedule_country_code)

    @property
    @pulumi.getter(name="domesticScheduleCountryCode")
    def domestic_schedule_country_code(self) -> str:
        return pulumi.get(self, "domestic_schedule_country_code")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="webScheduleCountryCode")
    def web_schedule_country_code(self) -> str:
        return pulumi.get(self, "web_schedule_country_code")


@pulumi.output_type
class GetSourceTwilioConfigurationResult(dict):
    def __init__(__self__, *,
                 account_sid: str,
                 auth_token: str,
                 lookback_window: int,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "account_sid", account_sid)
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "lookback_window", lookback_window)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="accountSid")
    def account_sid(self) -> str:
        return pulumi.get(self, "account_sid")

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> str:
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="lookbackWindow")
    def lookback_window(self) -> int:
        return pulumi.get(self, "lookback_window")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceTwilioTaskrouterConfigurationResult(dict):
    def __init__(__self__, *,
                 account_sid: str,
                 auth_token: str,
                 source_type: str):
        pulumi.set(__self__, "account_sid", account_sid)
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="accountSid")
    def account_sid(self) -> str:
        return pulumi.get(self, "account_sid")

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> str:
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceTwitterConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 end_date: str,
                 query: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceTypeformConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourceTypeformConfigurationCredentialsResult',
                 form_ids: Sequence[str],
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "form_ids", form_ids)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceTypeformConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="formIds")
    def form_ids(self) -> Sequence[str]:
        return pulumi.get(self, "form_ids")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceTypeformConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_typeform_authorization_method_o_auth20: 'outputs.GetSourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodOAuth20Result',
                 source_typeform_authorization_method_private_token: 'outputs.GetSourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodPrivateTokenResult',
                 source_typeform_update_authorization_method_o_auth20: 'outputs.GetSourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodOAuth20Result',
                 source_typeform_update_authorization_method_private_token: 'outputs.GetSourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodPrivateTokenResult'):
        pulumi.set(__self__, "source_typeform_authorization_method_o_auth20", source_typeform_authorization_method_o_auth20)
        pulumi.set(__self__, "source_typeform_authorization_method_private_token", source_typeform_authorization_method_private_token)
        pulumi.set(__self__, "source_typeform_update_authorization_method_o_auth20", source_typeform_update_authorization_method_o_auth20)
        pulumi.set(__self__, "source_typeform_update_authorization_method_private_token", source_typeform_update_authorization_method_private_token)

    @property
    @pulumi.getter(name="sourceTypeformAuthorizationMethodOAuth20")
    def source_typeform_authorization_method_o_auth20(self) -> 'outputs.GetSourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodOAuth20Result':
        return pulumi.get(self, "source_typeform_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourceTypeformAuthorizationMethodPrivateToken")
    def source_typeform_authorization_method_private_token(self) -> 'outputs.GetSourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodPrivateTokenResult':
        return pulumi.get(self, "source_typeform_authorization_method_private_token")

    @property
    @pulumi.getter(name="sourceTypeformUpdateAuthorizationMethodOAuth20")
    def source_typeform_update_authorization_method_o_auth20(self) -> 'outputs.GetSourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodOAuth20Result':
        return pulumi.get(self, "source_typeform_update_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourceTypeformUpdateAuthorizationMethodPrivateToken")
    def source_typeform_update_authorization_method_private_token(self) -> 'outputs.GetSourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodPrivateTokenResult':
        return pulumi.get(self, "source_typeform_update_authorization_method_private_token")


@pulumi.output_type
class GetSourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 token_expiry_date: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> str:
        return pulumi.get(self, "token_expiry_date")


@pulumi.output_type
class GetSourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodPrivateTokenResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class GetSourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 token_expiry_date: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> str:
        return pulumi.get(self, "token_expiry_date")


@pulumi.output_type
class GetSourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodPrivateTokenResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class GetSourceUsCensusConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 query_params: str,
                 query_path: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "query_params", query_params)
        pulumi.set(__self__, "query_path", query_path)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="queryParams")
    def query_params(self) -> str:
        return pulumi.get(self, "query_params")

    @property
    @pulumi.getter(name="queryPath")
    def query_path(self) -> str:
        return pulumi.get(self, "query_path")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceVantageConfigurationResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 source_type: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceWebflowConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 site_id: str,
                 source_type: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "site_id", site_id)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> str:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceWhiskyHunterConfigurationResult(dict):
    def __init__(__self__, *,
                 source_type: str):
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceWikipediaPageviewsConfigurationResult(dict):
    def __init__(__self__, *,
                 access: str,
                 agent: str,
                 article: str,
                 country: str,
                 end: str,
                 project: str,
                 source_type: str,
                 start: str):
        pulumi.set(__self__, "access", access)
        pulumi.set(__self__, "agent", agent)
        pulumi.set(__self__, "article", article)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def access(self) -> str:
        return pulumi.get(self, "access")

    @property
    @pulumi.getter
    def agent(self) -> str:
        return pulumi.get(self, "agent")

    @property
    @pulumi.getter
    def article(self) -> str:
        return pulumi.get(self, "article")

    @property
    @pulumi.getter
    def country(self) -> str:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def end(self) -> str:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def project(self) -> str:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def start(self) -> str:
        return pulumi.get(self, "start")


@pulumi.output_type
class GetSourceWoocommerceConfigurationResult(dict):
    def __init__(__self__, *,
                 api_key: str,
                 api_secret: str,
                 shop: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "api_secret", api_secret)
        pulumi.set(__self__, "shop", shop)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="apiSecret")
    def api_secret(self) -> str:
        return pulumi.get(self, "api_secret")

    @property
    @pulumi.getter
    def shop(self) -> str:
        return pulumi.get(self, "shop")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceXeroConfigurationResult(dict):
    def __init__(__self__, *,
                 authentication: 'outputs.GetSourceXeroConfigurationAuthenticationResult',
                 source_type: str,
                 start_date: str,
                 tenant_id: str):
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter
    def authentication(self) -> 'outputs.GetSourceXeroConfigurationAuthenticationResult':
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class GetSourceXeroConfigurationAuthenticationResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 token_expiry_date: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> str:
        return pulumi.get(self, "token_expiry_date")


@pulumi.output_type
class GetSourceXkcdConfigurationResult(dict):
    def __init__(__self__, *,
                 source_type: str):
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceYandexMetricaConfigurationResult(dict):
    def __init__(__self__, *,
                 auth_token: str,
                 counter_id: str,
                 end_date: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "counter_id", counter_id)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> str:
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="counterId")
    def counter_id(self) -> str:
        return pulumi.get(self, "counter_id")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceYotpoConfigurationResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 app_key: str,
                 email: str,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "app_key", app_key)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="appKey")
    def app_key(self) -> str:
        return pulumi.get(self, "app_key")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceYouniumConfigurationResult(dict):
    def __init__(__self__, *,
                 legal_entity: str,
                 password: str,
                 playground: bool,
                 source_type: str,
                 username: str):
        pulumi.set(__self__, "legal_entity", legal_entity)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "playground", playground)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="legalEntity")
    def legal_entity(self) -> str:
        return pulumi.get(self, "legal_entity")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def playground(self) -> bool:
        return pulumi.get(self, "playground")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSourceYoutubeAnalyticsConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourceYoutubeAnalyticsConfigurationCredentialsResult',
                 source_type: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceYoutubeAnalyticsConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceYoutubeAnalyticsConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceZendeskChatConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourceZendeskChatConfigurationCredentialsResult',
                 source_type: str,
                 start_date: str,
                 subdomain: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "subdomain", subdomain)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceZendeskChatConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def subdomain(self) -> str:
        return pulumi.get(self, "subdomain")


@pulumi.output_type
class GetSourceZendeskChatConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_zendesk_chat_authorization_method_access_token: 'outputs.GetSourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodAccessTokenResult',
                 source_zendesk_chat_authorization_method_o_auth20: 'outputs.GetSourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodOAuth20Result',
                 source_zendesk_chat_update_authorization_method_access_token: 'outputs.GetSourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodAccessTokenResult',
                 source_zendesk_chat_update_authorization_method_o_auth20: 'outputs.GetSourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodOAuth20Result'):
        pulumi.set(__self__, "source_zendesk_chat_authorization_method_access_token", source_zendesk_chat_authorization_method_access_token)
        pulumi.set(__self__, "source_zendesk_chat_authorization_method_o_auth20", source_zendesk_chat_authorization_method_o_auth20)
        pulumi.set(__self__, "source_zendesk_chat_update_authorization_method_access_token", source_zendesk_chat_update_authorization_method_access_token)
        pulumi.set(__self__, "source_zendesk_chat_update_authorization_method_o_auth20", source_zendesk_chat_update_authorization_method_o_auth20)

    @property
    @pulumi.getter(name="sourceZendeskChatAuthorizationMethodAccessToken")
    def source_zendesk_chat_authorization_method_access_token(self) -> 'outputs.GetSourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodAccessTokenResult':
        return pulumi.get(self, "source_zendesk_chat_authorization_method_access_token")

    @property
    @pulumi.getter(name="sourceZendeskChatAuthorizationMethodOAuth20")
    def source_zendesk_chat_authorization_method_o_auth20(self) -> 'outputs.GetSourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodOAuth20Result':
        return pulumi.get(self, "source_zendesk_chat_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourceZendeskChatUpdateAuthorizationMethodAccessToken")
    def source_zendesk_chat_update_authorization_method_access_token(self) -> 'outputs.GetSourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodAccessTokenResult':
        return pulumi.get(self, "source_zendesk_chat_update_authorization_method_access_token")

    @property
    @pulumi.getter(name="sourceZendeskChatUpdateAuthorizationMethodOAuth20")
    def source_zendesk_chat_update_authorization_method_o_auth20(self) -> 'outputs.GetSourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodOAuth20Result':
        return pulumi.get(self, "source_zendesk_chat_update_authorization_method_o_auth20")


@pulumi.output_type
class GetSourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodAccessTokenResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 credentials: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter
    def credentials(self) -> str:
        return pulumi.get(self, "credentials")


@pulumi.output_type
class GetSourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 client_id: str,
                 client_secret: str,
                 credentials: str,
                 refresh_token: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter
    def credentials(self) -> str:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodAccessTokenResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 credentials: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter
    def credentials(self) -> str:
        return pulumi.get(self, "credentials")


@pulumi.output_type
class GetSourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 client_id: str,
                 client_secret: str,
                 credentials: str,
                 refresh_token: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter
    def credentials(self) -> str:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetSourceZendeskSunshineConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourceZendeskSunshineConfigurationCredentialsResult',
                 source_type: str,
                 start_date: str,
                 subdomain: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "subdomain", subdomain)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceZendeskSunshineConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def subdomain(self) -> str:
        return pulumi.get(self, "subdomain")


@pulumi.output_type
class GetSourceZendeskSunshineConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_zendesk_sunshine_authorization_method_api_token: 'outputs.GetSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodApiTokenResult',
                 source_zendesk_sunshine_authorization_method_o_auth20: 'outputs.GetSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodOAuth20Result',
                 source_zendesk_sunshine_update_authorization_method_api_token: 'outputs.GetSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodApiTokenResult',
                 source_zendesk_sunshine_update_authorization_method_o_auth20: 'outputs.GetSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodOAuth20Result'):
        pulumi.set(__self__, "source_zendesk_sunshine_authorization_method_api_token", source_zendesk_sunshine_authorization_method_api_token)
        pulumi.set(__self__, "source_zendesk_sunshine_authorization_method_o_auth20", source_zendesk_sunshine_authorization_method_o_auth20)
        pulumi.set(__self__, "source_zendesk_sunshine_update_authorization_method_api_token", source_zendesk_sunshine_update_authorization_method_api_token)
        pulumi.set(__self__, "source_zendesk_sunshine_update_authorization_method_o_auth20", source_zendesk_sunshine_update_authorization_method_o_auth20)

    @property
    @pulumi.getter(name="sourceZendeskSunshineAuthorizationMethodApiToken")
    def source_zendesk_sunshine_authorization_method_api_token(self) -> 'outputs.GetSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodApiTokenResult':
        return pulumi.get(self, "source_zendesk_sunshine_authorization_method_api_token")

    @property
    @pulumi.getter(name="sourceZendeskSunshineAuthorizationMethodOAuth20")
    def source_zendesk_sunshine_authorization_method_o_auth20(self) -> 'outputs.GetSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodOAuth20Result':
        return pulumi.get(self, "source_zendesk_sunshine_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="sourceZendeskSunshineUpdateAuthorizationMethodApiToken")
    def source_zendesk_sunshine_update_authorization_method_api_token(self) -> 'outputs.GetSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodApiTokenResult':
        return pulumi.get(self, "source_zendesk_sunshine_update_authorization_method_api_token")

    @property
    @pulumi.getter(name="sourceZendeskSunshineUpdateAuthorizationMethodOAuth20")
    def source_zendesk_sunshine_update_authorization_method_o_auth20(self) -> 'outputs.GetSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodOAuth20Result':
        return pulumi.get(self, "source_zendesk_sunshine_update_authorization_method_o_auth20")


@pulumi.output_type
class GetSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodApiTokenResult(dict):
    def __init__(__self__, *,
                 api_token: str,
                 auth_method: str,
                 email: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "email", email)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_method: str,
                 client_id: str,
                 client_secret: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodApiTokenResult(dict):
    def __init__(__self__, *,
                 api_token: str,
                 auth_method: str,
                 email: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "email", email)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_method: str,
                 client_id: str,
                 client_secret: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceZendeskSupportConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourceZendeskSupportConfigurationCredentialsResult',
                 ignore_pagination: bool,
                 source_type: str,
                 start_date: str,
                 subdomain: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "ignore_pagination", ignore_pagination)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "subdomain", subdomain)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceZendeskSupportConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="ignorePagination")
    def ignore_pagination(self) -> bool:
        return pulumi.get(self, "ignore_pagination")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def subdomain(self) -> str:
        return pulumi.get(self, "subdomain")


@pulumi.output_type
class GetSourceZendeskSupportConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_zendesk_support_authentication_api_token: 'outputs.GetSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationApiTokenResult',
                 source_zendesk_support_authentication_o_auth20: 'outputs.GetSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationOAuth20Result',
                 source_zendesk_support_update_authentication_api_token: 'outputs.GetSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationApiTokenResult',
                 source_zendesk_support_update_authentication_o_auth20: 'outputs.GetSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationOAuth20Result'):
        pulumi.set(__self__, "source_zendesk_support_authentication_api_token", source_zendesk_support_authentication_api_token)
        pulumi.set(__self__, "source_zendesk_support_authentication_o_auth20", source_zendesk_support_authentication_o_auth20)
        pulumi.set(__self__, "source_zendesk_support_update_authentication_api_token", source_zendesk_support_update_authentication_api_token)
        pulumi.set(__self__, "source_zendesk_support_update_authentication_o_auth20", source_zendesk_support_update_authentication_o_auth20)

    @property
    @pulumi.getter(name="sourceZendeskSupportAuthenticationApiToken")
    def source_zendesk_support_authentication_api_token(self) -> 'outputs.GetSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationApiTokenResult':
        return pulumi.get(self, "source_zendesk_support_authentication_api_token")

    @property
    @pulumi.getter(name="sourceZendeskSupportAuthenticationOAuth20")
    def source_zendesk_support_authentication_o_auth20(self) -> 'outputs.GetSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationOAuth20Result':
        return pulumi.get(self, "source_zendesk_support_authentication_o_auth20")

    @property
    @pulumi.getter(name="sourceZendeskSupportUpdateAuthenticationApiToken")
    def source_zendesk_support_update_authentication_api_token(self) -> 'outputs.GetSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationApiTokenResult':
        return pulumi.get(self, "source_zendesk_support_update_authentication_api_token")

    @property
    @pulumi.getter(name="sourceZendeskSupportUpdateAuthenticationOAuth20")
    def source_zendesk_support_update_authentication_o_auth20(self) -> 'outputs.GetSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationOAuth20Result':
        return pulumi.get(self, "source_zendesk_support_update_authentication_o_auth20")


@pulumi.output_type
class GetSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationApiTokenResult(dict):
    def __init__(__self__, *,
                 api_token: str,
                 credentials: str,
                 email: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "email", email)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter
    def credentials(self) -> str:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 client_id: str,
                 client_secret: str,
                 credentials: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "credentials", credentials)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter
    def credentials(self) -> str:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationApiTokenResult(dict):
    def __init__(__self__, *,
                 api_token: str,
                 credentials: str,
                 email: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "email", email)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter
    def credentials(self) -> str:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 client_id: str,
                 client_secret: str,
                 credentials: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "credentials", credentials)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter
    def credentials(self) -> str:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceZendeskTalkConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetSourceZendeskTalkConfigurationCredentialsResult',
                 source_type: str,
                 start_date: str,
                 subdomain: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "subdomain", subdomain)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceZendeskTalkConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def subdomain(self) -> str:
        return pulumi.get(self, "subdomain")


@pulumi.output_type
class GetSourceZendeskTalkConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_zendesk_talk_authentication_api_token: 'outputs.GetSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationApiTokenResult',
                 source_zendesk_talk_authentication_o_auth20: 'outputs.GetSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationOAuth20Result',
                 source_zendesk_talk_update_authentication_api_token: 'outputs.GetSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationApiTokenResult',
                 source_zendesk_talk_update_authentication_o_auth20: 'outputs.GetSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationOAuth20Result'):
        pulumi.set(__self__, "source_zendesk_talk_authentication_api_token", source_zendesk_talk_authentication_api_token)
        pulumi.set(__self__, "source_zendesk_talk_authentication_o_auth20", source_zendesk_talk_authentication_o_auth20)
        pulumi.set(__self__, "source_zendesk_talk_update_authentication_api_token", source_zendesk_talk_update_authentication_api_token)
        pulumi.set(__self__, "source_zendesk_talk_update_authentication_o_auth20", source_zendesk_talk_update_authentication_o_auth20)

    @property
    @pulumi.getter(name="sourceZendeskTalkAuthenticationApiToken")
    def source_zendesk_talk_authentication_api_token(self) -> 'outputs.GetSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationApiTokenResult':
        return pulumi.get(self, "source_zendesk_talk_authentication_api_token")

    @property
    @pulumi.getter(name="sourceZendeskTalkAuthenticationOAuth20")
    def source_zendesk_talk_authentication_o_auth20(self) -> 'outputs.GetSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationOAuth20Result':
        return pulumi.get(self, "source_zendesk_talk_authentication_o_auth20")

    @property
    @pulumi.getter(name="sourceZendeskTalkUpdateAuthenticationApiToken")
    def source_zendesk_talk_update_authentication_api_token(self) -> 'outputs.GetSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationApiTokenResult':
        return pulumi.get(self, "source_zendesk_talk_update_authentication_api_token")

    @property
    @pulumi.getter(name="sourceZendeskTalkUpdateAuthenticationOAuth20")
    def source_zendesk_talk_update_authentication_o_auth20(self) -> 'outputs.GetSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationOAuth20Result':
        return pulumi.get(self, "source_zendesk_talk_update_authentication_o_auth20")


@pulumi.output_type
class GetSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationApiTokenResult(dict):
    def __init__(__self__, *,
                 api_token: str,
                 auth_type: str,
                 email: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "email", email)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationApiTokenResult(dict):
    def __init__(__self__, *,
                 api_token: str,
                 auth_type: str,
                 email: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "email", email)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 additional_properties: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class GetSourceZenloopConfigurationResult(dict):
    def __init__(__self__, *,
                 api_token: str,
                 date_from: str,
                 source_type: str,
                 survey_group_id: str,
                 survey_id: str):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "date_from", date_from)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "survey_group_id", survey_group_id)
        pulumi.set(__self__, "survey_id", survey_id)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="dateFrom")
    def date_from(self) -> str:
        return pulumi.get(self, "date_from")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="surveyGroupId")
    def survey_group_id(self) -> str:
        return pulumi.get(self, "survey_group_id")

    @property
    @pulumi.getter(name="surveyId")
    def survey_id(self) -> str:
        return pulumi.get(self, "survey_id")


@pulumi.output_type
class GetSourceZohoCrmConfigurationResult(dict):
    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 dc_region: str,
                 edition: str,
                 environment: str,
                 refresh_token: str,
                 source_type: str,
                 start_datetime: str):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "dc_region", dc_region)
        pulumi.set(__self__, "edition", edition)
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_datetime", start_datetime)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="dcRegion")
    def dc_region(self) -> str:
        return pulumi.get(self, "dc_region")

    @property
    @pulumi.getter
    def edition(self) -> str:
        return pulumi.get(self, "edition")

    @property
    @pulumi.getter
    def environment(self) -> str:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDatetime")
    def start_datetime(self) -> str:
        return pulumi.get(self, "start_datetime")


@pulumi.output_type
class GetSourceZoomConfigurationResult(dict):
    def __init__(__self__, *,
                 jwt_token: str,
                 source_type: str):
        pulumi.set(__self__, "jwt_token", jwt_token)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="jwtToken")
    def jwt_token(self) -> str:
        return pulumi.get(self, "jwt_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSourceZuoraConfigurationResult(dict):
    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 data_query: str,
                 source_type: str,
                 start_date: str,
                 tenant_endpoint: str,
                 window_in_days: str):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "data_query", data_query)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "tenant_endpoint", tenant_endpoint)
        pulumi.set(__self__, "window_in_days", window_in_days)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="dataQuery")
    def data_query(self) -> str:
        return pulumi.get(self, "data_query")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="tenantEndpoint")
    def tenant_endpoint(self) -> str:
        return pulumi.get(self, "tenant_endpoint")

    @property
    @pulumi.getter(name="windowInDays")
    def window_in_days(self) -> str:
        return pulumi.get(self, "window_in_days")


